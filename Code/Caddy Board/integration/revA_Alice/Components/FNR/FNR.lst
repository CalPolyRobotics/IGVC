   1               		.file	"FNR.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 139               	.global	FNRForward
 141               	FNRForward:
 142               		.stabd	46,0,0
   1:Components/FNR/FNR.c **** //FNR controller functions
   2:Components/FNR/FNR.c **** #include <avr/io.h>
   3:Components/FNR/FNR.c **** #include "FreeRTOS.h"
   4:Components/FNR/FNR.c **** #include "task.h"
   5:Components/FNR/FNR.c **** #include "FNR.h"
   6:Components/FNR/FNR.c **** 
   7:Components/FNR/FNR.c **** #define setABit(x) \
   8:Components/FNR/FNR.c **** PORTA |= (1 << (x));
   9:Components/FNR/FNR.c **** 
  10:Components/FNR/FNR.c **** #define clearABit(x) \
  11:Components/FNR/FNR.c **** PORTA &= ~(1 << (x));
  12:Components/FNR/FNR.c **** 
  13:Components/FNR/FNR.c **** void FNRForward(void);
  14:Components/FNR/FNR.c **** void FNRReverse(void);
  15:Components/FNR/FNR.c **** void FNRNeutral(void);
  16:Components/FNR/FNR.c **** 
  17:Components/FNR/FNR.c **** 
  18:Components/FNR/FNR.c **** void FNRForward(){
 144               	.LM0:
 145               	.LFBB1:
 146 0000 CF93      		push r28
 147 0002 DF93      		push r29
 148 0004 CDB7      		in r28,__SP_L__
 149 0006 DEB7      		in r29,__SP_H__
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 2 */
 153               	.L__stack_usage = 2
  19:Components/FNR/FNR.c **** 	clearABit(1);
 155               	.LM1:
 156 0008 82E2      		ldi r24,lo8(34)
 157 000a 90E0      		ldi r25,0
 158 000c 22E2      		ldi r18,lo8(34)
 159 000e 30E0      		ldi r19,0
 160 0010 F901      		movw r30,r18
 161 0012 2081      		ld r18,Z
 162 0014 2D7F      		andi r18,lo8(-3)
 163 0016 FC01      		movw r30,r24
 164 0018 2083      		st Z,r18
  20:Components/FNR/FNR.c **** 	while((PORTA & 0x2) != 0){
 166               	.LM2:
 167 001a 00C0      		rjmp .L2
 168               	.L3:
  21:Components/FNR/FNR.c **** 		clearABit(1);
 170               	.LM3:
 171 001c 82E2      		ldi r24,lo8(34)
 172 001e 90E0      		ldi r25,0
 173 0020 22E2      		ldi r18,lo8(34)
 174 0022 30E0      		ldi r19,0
 175 0024 F901      		movw r30,r18
 176 0026 2081      		ld r18,Z
 177 0028 2D7F      		andi r18,lo8(-3)
 178 002a FC01      		movw r30,r24
 179 002c 2083      		st Z,r18
  22:Components/FNR/FNR.c **** 		vTaskDelay(1);
 181               	.LM4:
 182 002e 81E0      		ldi r24,lo8(1)
 183 0030 90E0      		ldi r25,0
 184 0032 0E94 0000 		call vTaskDelay
 185               	.L2:
  20:Components/FNR/FNR.c **** 	while((PORTA & 0x2) != 0){
 187               	.LM5:
 188 0036 82E2      		ldi r24,lo8(34)
 189 0038 90E0      		ldi r25,0
 190 003a FC01      		movw r30,r24
 191 003c 8081      		ld r24,Z
 192 003e 882F      		mov r24,r24
 193 0040 90E0      		ldi r25,0
 194 0042 8270      		andi r24,2
 195 0044 9927      		clr r25
 196 0046 0097      		sbiw r24,0
 197 0048 01F4      		brne .L3
  23:Components/FNR/FNR.c **** 	}
  24:Components/FNR/FNR.c **** 	setABit(0);
 199               	.LM6:
 200 004a 82E2      		ldi r24,lo8(34)
 201 004c 90E0      		ldi r25,0
 202 004e 22E2      		ldi r18,lo8(34)
 203 0050 30E0      		ldi r19,0
 204 0052 F901      		movw r30,r18
 205 0054 2081      		ld r18,Z
 206 0056 2160      		ori r18,lo8(1)
 207 0058 FC01      		movw r30,r24
 208 005a 2083      		st Z,r18
 209               	/* epilogue start */
  25:Components/FNR/FNR.c **** 
  26:Components/FNR/FNR.c **** 	//PORTL &= ~0x30;
  27:Components/FNR/FNR.c **** }
 211               	.LM7:
 212 005c DF91      		pop r29
 213 005e CF91      		pop r28
 214 0060 0895      		ret
 216               	.Lscope1:
 218               		.stabd	78,0,0
 220               	.global	FNRReverse
 222               	FNRReverse:
 223               		.stabd	46,0,0
  28:Components/FNR/FNR.c **** 
  29:Components/FNR/FNR.c **** void FNRReverse(){
 225               	.LM8:
 226               	.LFBB2:
 227 0062 CF93      		push r28
 228 0064 DF93      		push r29
 229 0066 CDB7      		in r28,__SP_L__
 230 0068 DEB7      		in r29,__SP_H__
 231               	/* prologue: function */
 232               	/* frame size = 0 */
 233               	/* stack size = 2 */
 234               	.L__stack_usage = 2
  30:Components/FNR/FNR.c **** 	clearABit(0);
 236               	.LM9:
 237 006a 82E2      		ldi r24,lo8(34)
 238 006c 90E0      		ldi r25,0
 239 006e 22E2      		ldi r18,lo8(34)
 240 0070 30E0      		ldi r19,0
 241 0072 F901      		movw r30,r18
 242 0074 2081      		ld r18,Z
 243 0076 2E7F      		andi r18,lo8(-2)
 244 0078 FC01      		movw r30,r24
 245 007a 2083      		st Z,r18
  31:Components/FNR/FNR.c **** 	while((PORTA & 0x1) != 0){
 247               	.LM10:
 248 007c 00C0      		rjmp .L5
 249               	.L6:
  32:Components/FNR/FNR.c **** 		clearABit(0);
 251               	.LM11:
 252 007e 82E2      		ldi r24,lo8(34)
 253 0080 90E0      		ldi r25,0
 254 0082 22E2      		ldi r18,lo8(34)
 255 0084 30E0      		ldi r19,0
 256 0086 F901      		movw r30,r18
 257 0088 2081      		ld r18,Z
 258 008a 2E7F      		andi r18,lo8(-2)
 259 008c FC01      		movw r30,r24
 260 008e 2083      		st Z,r18
  33:Components/FNR/FNR.c **** 		vTaskDelay(1);
 262               	.LM12:
 263 0090 81E0      		ldi r24,lo8(1)
 264 0092 90E0      		ldi r25,0
 265 0094 0E94 0000 		call vTaskDelay
 266               	.L5:
  31:Components/FNR/FNR.c **** 	while((PORTA & 0x1) != 0){
 268               	.LM13:
 269 0098 82E2      		ldi r24,lo8(34)
 270 009a 90E0      		ldi r25,0
 271 009c FC01      		movw r30,r24
 272 009e 8081      		ld r24,Z
 273 00a0 882F      		mov r24,r24
 274 00a2 90E0      		ldi r25,0
 275 00a4 8170      		andi r24,1
 276 00a6 9927      		clr r25
 277 00a8 0097      		sbiw r24,0
 278 00aa 01F4      		brne .L6
  34:Components/FNR/FNR.c **** 	}
  35:Components/FNR/FNR.c **** 	setABit(1);
 280               	.LM14:
 281 00ac 82E2      		ldi r24,lo8(34)
 282 00ae 90E0      		ldi r25,0
 283 00b0 22E2      		ldi r18,lo8(34)
 284 00b2 30E0      		ldi r19,0
 285 00b4 F901      		movw r30,r18
 286 00b6 2081      		ld r18,Z
 287 00b8 2260      		ori r18,lo8(2)
 288 00ba FC01      		movw r30,r24
 289 00bc 2083      		st Z,r18
 290               	/* epilogue start */
  36:Components/FNR/FNR.c **** 
  37:Components/FNR/FNR.c **** 	//PORTL |= 0x30;
  38:Components/FNR/FNR.c **** }
 292               	.LM15:
 293 00be DF91      		pop r29
 294 00c0 CF91      		pop r28
 295 00c2 0895      		ret
 297               	.Lscope2:
 299               		.stabd	78,0,0
 301               	.global	FNRNeutral
 303               	FNRNeutral:
 304               		.stabd	46,0,0
  39:Components/FNR/FNR.c **** 
  40:Components/FNR/FNR.c **** void FNRNeutral(){
 306               	.LM16:
 307               	.LFBB3:
 308 00c4 CF93      		push r28
 309 00c6 DF93      		push r29
 310 00c8 CDB7      		in r28,__SP_L__
 311 00ca DEB7      		in r29,__SP_H__
 312               	/* prologue: function */
 313               	/* frame size = 0 */
 314               	/* stack size = 2 */
 315               	.L__stack_usage = 2
  41:Components/FNR/FNR.c **** 	clearABit(0);
 317               	.LM17:
 318 00cc 82E2      		ldi r24,lo8(34)
 319 00ce 90E0      		ldi r25,0
 320 00d0 22E2      		ldi r18,lo8(34)
 321 00d2 30E0      		ldi r19,0
 322 00d4 F901      		movw r30,r18
 323 00d6 2081      		ld r18,Z
 324 00d8 2E7F      		andi r18,lo8(-2)
 325 00da FC01      		movw r30,r24
 326 00dc 2083      		st Z,r18
  42:Components/FNR/FNR.c **** 	clearABit(1);
 328               	.LM18:
 329 00de 82E2      		ldi r24,lo8(34)
 330 00e0 90E0      		ldi r25,0
 331 00e2 22E2      		ldi r18,lo8(34)
 332 00e4 30E0      		ldi r19,0
 333 00e6 F901      		movw r30,r18
 334 00e8 2081      		ld r18,Z
 335 00ea 2D7F      		andi r18,lo8(-3)
 336 00ec FC01      		movw r30,r24
 337 00ee 2083      		st Z,r18
  43:Components/FNR/FNR.c **** 	while((PORTA & 0x3) != 0){
 339               	.LM19:
 340 00f0 00C0      		rjmp .L8
 341               	.L9:
  44:Components/FNR/FNR.c **** 		clearABit(0);
 343               	.LM20:
 344 00f2 82E2      		ldi r24,lo8(34)
 345 00f4 90E0      		ldi r25,0
 346 00f6 22E2      		ldi r18,lo8(34)
 347 00f8 30E0      		ldi r19,0
 348 00fa F901      		movw r30,r18
 349 00fc 2081      		ld r18,Z
 350 00fe 2E7F      		andi r18,lo8(-2)
 351 0100 FC01      		movw r30,r24
 352 0102 2083      		st Z,r18
  45:Components/FNR/FNR.c **** 		clearABit(1);
 354               	.LM21:
 355 0104 82E2      		ldi r24,lo8(34)
 356 0106 90E0      		ldi r25,0
 357 0108 22E2      		ldi r18,lo8(34)
 358 010a 30E0      		ldi r19,0
 359 010c F901      		movw r30,r18
 360 010e 2081      		ld r18,Z
 361 0110 2D7F      		andi r18,lo8(-3)
 362 0112 FC01      		movw r30,r24
 363 0114 2083      		st Z,r18
  46:Components/FNR/FNR.c **** 		vTaskDelay(1);
 365               	.LM22:
 366 0116 81E0      		ldi r24,lo8(1)
 367 0118 90E0      		ldi r25,0
 368 011a 0E94 0000 		call vTaskDelay
 369               	.L8:
  43:Components/FNR/FNR.c **** 		clearABit(0);
 371               	.LM23:
 372 011e 82E2      		ldi r24,lo8(34)
 373 0120 90E0      		ldi r25,0
 374 0122 FC01      		movw r30,r24
 375 0124 8081      		ld r24,Z
 376 0126 882F      		mov r24,r24
 377 0128 90E0      		ldi r25,0
 378 012a 8370      		andi r24,3
 379 012c 9927      		clr r25
 380 012e 0097      		sbiw r24,0
 381 0130 01F4      		brne .L9
 382               	/* epilogue start */
  47:Components/FNR/FNR.c **** 	}
  48:Components/FNR/FNR.c **** 	//PORTL &= ~0x30;
  49:Components/FNR/FNR.c **** }
 384               	.LM24:
 385 0132 DF91      		pop r29
 386 0134 CF91      		pop r28
 387 0136 0895      		ret
 389               	.Lscope3:
 391               		.stabd	78,0,0
 394               	.global	setFNR
 396               	setFNR:
 397               		.stabd	46,0,0
  50:Components/FNR/FNR.c **** 
  51:Components/FNR/FNR.c **** //set the FNR controller, inputs are either -1, 0, or 1.
  52:Components/FNR/FNR.c **** char setFNR(char FNR) {
 399               	.LM25:
 400               	.LFBB4:
 401 0138 CF93      		push r28
 402 013a DF93      		push r29
 403 013c 1F92      		push __zero_reg__
 404 013e CDB7      		in r28,__SP_L__
 405 0140 DEB7      		in r29,__SP_H__
 406               	/* prologue: function */
 407               	/* frame size = 1 */
 408               	/* stack size = 3 */
 409               	.L__stack_usage = 3
 410 0142 8983      		std Y+1,r24
  53:Components/FNR/FNR.c ****    //dummy function, nothing happens
  54:Components/FNR/FNR.c ****    //return success
  55:Components/FNR/FNR.c **** 	if(FNR == 0){
 412               	.LM26:
 413 0144 8981      		ldd r24,Y+1
 414 0146 8823      		tst r24
 415 0148 01F4      		brne .L11
  56:Components/FNR/FNR.c **** 		FNRNeutral();
 417               	.LM27:
 418 014a 0E94 0000 		call FNRNeutral
 419 014e 00C0      		rjmp .L12
 420               	.L11:
  57:Components/FNR/FNR.c **** 	} else if(FNR == 1){
 422               	.LM28:
 423 0150 8981      		ldd r24,Y+1
 424 0152 8130      		cpi r24,lo8(1)
 425 0154 01F4      		brne .L13
  58:Components/FNR/FNR.c **** 		FNRForward();
 427               	.LM29:
 428 0156 0E94 0000 		call FNRForward
 429 015a 00C0      		rjmp .L12
 430               	.L13:
  59:Components/FNR/FNR.c **** 	} else if(FNR == -1){
 432               	.LM30:
 433 015c 8981      		ldd r24,Y+1
 434 015e 8F3F      		cpi r24,lo8(-1)
 435 0160 01F4      		brne .L12
  60:Components/FNR/FNR.c **** 		FNRReverse();
 437               	.LM31:
 438 0162 0E94 0000 		call FNRReverse
 439               	.L12:
  61:Components/FNR/FNR.c **** 	}
  62:Components/FNR/FNR.c **** 
  63:Components/FNR/FNR.c ****    return 1;
 441               	.LM32:
 442 0166 81E0      		ldi r24,lo8(1)
 443               	/* epilogue start */
  64:Components/FNR/FNR.c **** }
 445               	.LM33:
 446 0168 0F90      		pop __tmp_reg__
 447 016a DF91      		pop r29
 448 016c CF91      		pop r28
 449 016e 0895      		ret
 451               	.Lscope4:
 453               		.stabd	78,0,0
 456               	.global	getFNR
 458               	getFNR:
 459               		.stabd	46,0,0
  65:Components/FNR/FNR.c **** 
  66:Components/FNR/FNR.c **** //get the current FNR state. Function follows same format for consistancy
  67:Components/FNR/FNR.c **** char getFNR(char *sensorResponse) {
 461               	.LM34:
 462               	.LFBB5:
 463 0170 CF93      		push r28
 464 0172 DF93      		push r29
 465 0174 1F92      		push __zero_reg__
 466 0176 1F92      		push __zero_reg__
 467 0178 CDB7      		in r28,__SP_L__
 468 017a DEB7      		in r29,__SP_H__
 469               	/* prologue: function */
 470               	/* frame size = 2 */
 471               	/* stack size = 4 */
 472               	.L__stack_usage = 4
 473 017c 9A83      		std Y+2,r25
 474 017e 8983      		std Y+1,r24
  68:Components/FNR/FNR.c ****    //fake reading
  69:Components/FNR/FNR.c ****    *sensorResponse = 0;
 476               	.LM35:
 477 0180 8981      		ldd r24,Y+1
 478 0182 9A81      		ldd r25,Y+2
 479 0184 FC01      		movw r30,r24
 480 0186 1082      		st Z,__zero_reg__
  70:Components/FNR/FNR.c ****    //return success
  71:Components/FNR/FNR.c ****    return 1;
 482               	.LM36:
 483 0188 81E0      		ldi r24,lo8(1)
 484               	/* epilogue start */
  72:Components/FNR/FNR.c **** }
 486               	.LM37:
 487 018a 0F90      		pop __tmp_reg__
 488 018c 0F90      		pop __tmp_reg__
 489 018e DF91      		pop r29
 490 0190 CF91      		pop r28
 491 0192 0895      		ret
 493               	.Lscope5:
 495               		.stabd	78,0,0
 497               	.Letext0:
 498               		.ident	"GCC: (GNU) 4.9.0"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 FNR.c
     /tmp/ccY49Ta9.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccY49Ta9.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccY49Ta9.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccY49Ta9.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccY49Ta9.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccY49Ta9.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccY49Ta9.s:141    .text:0000000000000000 FNRForward
     /tmp/ccY49Ta9.s:222    .text:0000000000000062 FNRReverse
     /tmp/ccY49Ta9.s:303    .text:00000000000000c4 FNRNeutral
     /tmp/ccY49Ta9.s:396    .text:0000000000000138 setFNR
     /tmp/ccY49Ta9.s:458    .text:0000000000000170 getFNR

UNDEFINED SYMBOLS
vTaskDelay
