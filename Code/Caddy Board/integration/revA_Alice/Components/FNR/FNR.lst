   1               		.file	"FNR.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 104               	.global	FNRForward
 106               	FNRForward:
 107               		.stabd	46,0,0
   1:Components/FNR/FNR.c **** //FNR controller functions
   2:Components/FNR/FNR.c **** #include <avr/io.h>
   3:Components/FNR/FNR.c **** 
   4:Components/FNR/FNR.c **** #define setABit(x) \
   5:Components/FNR/FNR.c **** PORTA |= (1 << (x));
   6:Components/FNR/FNR.c **** 
   7:Components/FNR/FNR.c **** #define clearABit(x) \
   8:Components/FNR/FNR.c **** PORTA &= ~(1 << (x));
   9:Components/FNR/FNR.c **** 
  10:Components/FNR/FNR.c **** 
  11:Components/FNR/FNR.c **** void FNRForward(){
 109               	.LM0:
 110               	.LFBB1:
 111 0000 CF93      		push r28
 112 0002 DF93      		push r29
 113 0004 CDB7      		in r28,__SP_L__
 114 0006 DEB7      		in r29,__SP_H__
 115               	/* prologue: function */
 116               	/* frame size = 0 */
 117               	/* stack size = 2 */
 118               	.L__stack_usage = 2
  12:Components/FNR/FNR.c **** 	clearABit(1);
 120               	.LM1:
 121 0008 82E2      		ldi r24,lo8(34)
 122 000a 90E0      		ldi r25,0
 123 000c 22E2      		ldi r18,lo8(34)
 124 000e 30E0      		ldi r19,0
 125 0010 F901      		movw r30,r18
 126 0012 2081      		ld r18,Z
 127 0014 2D7F      		andi r18,lo8(-3)
 128 0016 FC01      		movw r30,r24
 129 0018 2083      		st Z,r18
  13:Components/FNR/FNR.c **** 	while((PORTA & 0x2) != 0){
 131               	.LM2:
 132 001a 00C0      		rjmp .L2
 133               	.L3:
 134               	.LBB2:
  14:Components/FNR/FNR.c **** 		clearABit(1);
 136               	.LM3:
 137 001c 82E2      		ldi r24,lo8(34)
 138 001e 90E0      		ldi r25,0
 139 0020 22E2      		ldi r18,lo8(34)
 140 0022 30E0      		ldi r19,0
 141 0024 F901      		movw r30,r18
 142 0026 2081      		ld r18,Z
 143 0028 2D7F      		andi r18,lo8(-3)
 144 002a FC01      		movw r30,r24
 145 002c 2083      		st Z,r18
  15:Components/FNR/FNR.c **** 		vTaskDelay(1);
 147               	.LM4:
 148 002e 81E0      		ldi r24,lo8(1)
 149 0030 90E0      		ldi r25,0
 150 0032 0E94 0000 		call vTaskDelay
 151               	.L2:
 152               	.LBE2:
  13:Components/FNR/FNR.c **** 	while((PORTA & 0x2) != 0){
 154               	.LM5:
 155 0036 82E2      		ldi r24,lo8(34)
 156 0038 90E0      		ldi r25,0
 157 003a FC01      		movw r30,r24
 158 003c 8081      		ld r24,Z
 159 003e 882F      		mov r24,r24
 160 0040 90E0      		ldi r25,0
 161 0042 8270      		andi r24,2
 162 0044 9927      		clr r25
 163 0046 0097      		sbiw r24,0
 164 0048 01F4      		brne .L3
  16:Components/FNR/FNR.c **** 	}
  17:Components/FNR/FNR.c **** 	setABit(0);
 166               	.LM6:
 167 004a 82E2      		ldi r24,lo8(34)
 168 004c 90E0      		ldi r25,0
 169 004e 22E2      		ldi r18,lo8(34)
 170 0050 30E0      		ldi r19,0
 171 0052 F901      		movw r30,r18
 172 0054 2081      		ld r18,Z
 173 0056 2160      		ori r18,lo8(1)
 174 0058 FC01      		movw r30,r24
 175 005a 2083      		st Z,r18
  18:Components/FNR/FNR.c **** 
  19:Components/FNR/FNR.c **** 	PORTL &= ~0x30;
 177               	.LM7:
 178 005c 8BE0      		ldi r24,lo8(11)
 179 005e 91E0      		ldi r25,lo8(1)
 180 0060 2BE0      		ldi r18,lo8(11)
 181 0062 31E0      		ldi r19,lo8(1)
 182 0064 F901      		movw r30,r18
 183 0066 2081      		ld r18,Z
 184 0068 2F7C      		andi r18,lo8(-49)
 185 006a FC01      		movw r30,r24
 186 006c 2083      		st Z,r18
 187               	/* epilogue start */
  20:Components/FNR/FNR.c **** }
 189               	.LM8:
 190 006e DF91      		pop r29
 191 0070 CF91      		pop r28
 192 0072 0895      		ret
 194               	.Lscope1:
 196               		.stabd	78,0,0
 198               	.global	FNRReverse
 200               	FNRReverse:
 201               		.stabd	46,0,0
  21:Components/FNR/FNR.c **** 
  22:Components/FNR/FNR.c **** void FNRReverse(){
 203               	.LM9:
 204               	.LFBB2:
 205 0074 CF93      		push r28
 206 0076 DF93      		push r29
 207 0078 CDB7      		in r28,__SP_L__
 208 007a DEB7      		in r29,__SP_H__
 209               	/* prologue: function */
 210               	/* frame size = 0 */
 211               	/* stack size = 2 */
 212               	.L__stack_usage = 2
  23:Components/FNR/FNR.c **** 	clearABit(0);
 214               	.LM10:
 215 007c 82E2      		ldi r24,lo8(34)
 216 007e 90E0      		ldi r25,0
 217 0080 22E2      		ldi r18,lo8(34)
 218 0082 30E0      		ldi r19,0
 219 0084 F901      		movw r30,r18
 220 0086 2081      		ld r18,Z
 221 0088 2E7F      		andi r18,lo8(-2)
 222 008a FC01      		movw r30,r24
 223 008c 2083      		st Z,r18
  24:Components/FNR/FNR.c **** 	while((PORTA & 0x1) != 0){
 225               	.LM11:
 226 008e 00C0      		rjmp .L5
 227               	.L6:
 228               	.LBB3:
  25:Components/FNR/FNR.c **** 		clearABit(0);
 230               	.LM12:
 231 0090 82E2      		ldi r24,lo8(34)
 232 0092 90E0      		ldi r25,0
 233 0094 22E2      		ldi r18,lo8(34)
 234 0096 30E0      		ldi r19,0
 235 0098 F901      		movw r30,r18
 236 009a 2081      		ld r18,Z
 237 009c 2E7F      		andi r18,lo8(-2)
 238 009e FC01      		movw r30,r24
 239 00a0 2083      		st Z,r18
  26:Components/FNR/FNR.c **** 		vTaskDelay(1);
 241               	.LM13:
 242 00a2 81E0      		ldi r24,lo8(1)
 243 00a4 90E0      		ldi r25,0
 244 00a6 0E94 0000 		call vTaskDelay
 245               	.L5:
 246               	.LBE3:
  24:Components/FNR/FNR.c **** 	while((PORTA & 0x1) != 0){
 248               	.LM14:
 249 00aa 82E2      		ldi r24,lo8(34)
 250 00ac 90E0      		ldi r25,0
 251 00ae FC01      		movw r30,r24
 252 00b0 8081      		ld r24,Z
 253 00b2 882F      		mov r24,r24
 254 00b4 90E0      		ldi r25,0
 255 00b6 8170      		andi r24,1
 256 00b8 9927      		clr r25
 257 00ba 0097      		sbiw r24,0
 258 00bc 01F4      		brne .L6
  27:Components/FNR/FNR.c **** 	}
  28:Components/FNR/FNR.c **** 	setABit(1);
 260               	.LM15:
 261 00be 82E2      		ldi r24,lo8(34)
 262 00c0 90E0      		ldi r25,0
 263 00c2 22E2      		ldi r18,lo8(34)
 264 00c4 30E0      		ldi r19,0
 265 00c6 F901      		movw r30,r18
 266 00c8 2081      		ld r18,Z
 267 00ca 2260      		ori r18,lo8(2)
 268 00cc FC01      		movw r30,r24
 269 00ce 2083      		st Z,r18
  29:Components/FNR/FNR.c **** 
  30:Components/FNR/FNR.c **** 	PORTL |= 0x30;
 271               	.LM16:
 272 00d0 8BE0      		ldi r24,lo8(11)
 273 00d2 91E0      		ldi r25,lo8(1)
 274 00d4 2BE0      		ldi r18,lo8(11)
 275 00d6 31E0      		ldi r19,lo8(1)
 276 00d8 F901      		movw r30,r18
 277 00da 2081      		ld r18,Z
 278 00dc 2063      		ori r18,lo8(48)
 279 00de FC01      		movw r30,r24
 280 00e0 2083      		st Z,r18
 281               	/* epilogue start */
  31:Components/FNR/FNR.c **** }
 283               	.LM17:
 284 00e2 DF91      		pop r29
 285 00e4 CF91      		pop r28
 286 00e6 0895      		ret
 288               	.Lscope2:
 290               		.stabd	78,0,0
 292               	.global	FNRNeutral
 294               	FNRNeutral:
 295               		.stabd	46,0,0
  32:Components/FNR/FNR.c **** 
  33:Components/FNR/FNR.c **** void FNRNeutral(){
 297               	.LM18:
 298               	.LFBB3:
 299 00e8 CF93      		push r28
 300 00ea DF93      		push r29
 301 00ec CDB7      		in r28,__SP_L__
 302 00ee DEB7      		in r29,__SP_H__
 303               	/* prologue: function */
 304               	/* frame size = 0 */
 305               	/* stack size = 2 */
 306               	.L__stack_usage = 2
  34:Components/FNR/FNR.c **** 	clearABit(0);
 308               	.LM19:
 309 00f0 82E2      		ldi r24,lo8(34)
 310 00f2 90E0      		ldi r25,0
 311 00f4 22E2      		ldi r18,lo8(34)
 312 00f6 30E0      		ldi r19,0
 313 00f8 F901      		movw r30,r18
 314 00fa 2081      		ld r18,Z
 315 00fc 2E7F      		andi r18,lo8(-2)
 316 00fe FC01      		movw r30,r24
 317 0100 2083      		st Z,r18
  35:Components/FNR/FNR.c **** 	clearABit(1);
 319               	.LM20:
 320 0102 82E2      		ldi r24,lo8(34)
 321 0104 90E0      		ldi r25,0
 322 0106 22E2      		ldi r18,lo8(34)
 323 0108 30E0      		ldi r19,0
 324 010a F901      		movw r30,r18
 325 010c 2081      		ld r18,Z
 326 010e 2D7F      		andi r18,lo8(-3)
 327 0110 FC01      		movw r30,r24
 328 0112 2083      		st Z,r18
  36:Components/FNR/FNR.c **** 	while((PORTA & 0x3) != 0){
 330               	.LM21:
 331 0114 00C0      		rjmp .L8
 332               	.L9:
 333               	.LBB4:
  37:Components/FNR/FNR.c **** 		clearABit(0);
 335               	.LM22:
 336 0116 82E2      		ldi r24,lo8(34)
 337 0118 90E0      		ldi r25,0
 338 011a 22E2      		ldi r18,lo8(34)
 339 011c 30E0      		ldi r19,0
 340 011e F901      		movw r30,r18
 341 0120 2081      		ld r18,Z
 342 0122 2E7F      		andi r18,lo8(-2)
 343 0124 FC01      		movw r30,r24
 344 0126 2083      		st Z,r18
  38:Components/FNR/FNR.c **** 		clearABit(1);
 346               	.LM23:
 347 0128 82E2      		ldi r24,lo8(34)
 348 012a 90E0      		ldi r25,0
 349 012c 22E2      		ldi r18,lo8(34)
 350 012e 30E0      		ldi r19,0
 351 0130 F901      		movw r30,r18
 352 0132 2081      		ld r18,Z
 353 0134 2D7F      		andi r18,lo8(-3)
 354 0136 FC01      		movw r30,r24
 355 0138 2083      		st Z,r18
  39:Components/FNR/FNR.c **** 		vTaskDelay(1);
 357               	.LM24:
 358 013a 81E0      		ldi r24,lo8(1)
 359 013c 90E0      		ldi r25,0
 360 013e 0E94 0000 		call vTaskDelay
 361               	.L8:
 362               	.LBE4:
  36:Components/FNR/FNR.c **** 		clearABit(0);
 364               	.LM25:
 365 0142 82E2      		ldi r24,lo8(34)
 366 0144 90E0      		ldi r25,0
 367 0146 FC01      		movw r30,r24
 368 0148 8081      		ld r24,Z
 369 014a 882F      		mov r24,r24
 370 014c 90E0      		ldi r25,0
 371 014e 8370      		andi r24,3
 372 0150 9927      		clr r25
 373 0152 0097      		sbiw r24,0
 374 0154 01F4      		brne .L9
  40:Components/FNR/FNR.c **** 	}
  41:Components/FNR/FNR.c **** 	PORTL &= ~0x30;
 376               	.LM26:
 377 0156 8BE0      		ldi r24,lo8(11)
 378 0158 91E0      		ldi r25,lo8(1)
 379 015a 2BE0      		ldi r18,lo8(11)
 380 015c 31E0      		ldi r19,lo8(1)
 381 015e F901      		movw r30,r18
 382 0160 2081      		ld r18,Z
 383 0162 2F7C      		andi r18,lo8(-49)
 384 0164 FC01      		movw r30,r24
 385 0166 2083      		st Z,r18
 386               	/* epilogue start */
  42:Components/FNR/FNR.c **** }
 388               	.LM27:
 389 0168 DF91      		pop r29
 390 016a CF91      		pop r28
 391 016c 0895      		ret
 393               	.Lscope3:
 395               		.stabd	78,0,0
 398               	.global	setFNR
 400               	setFNR:
 401               		.stabd	46,0,0
  43:Components/FNR/FNR.c **** 
  44:Components/FNR/FNR.c **** //set the FNR controller, inputs are either -1, 0, or 1.
  45:Components/FNR/FNR.c **** char setFNR(char FNR) {
 403               	.LM28:
 404               	.LFBB4:
 405 016e CF93      		push r28
 406 0170 DF93      		push r29
 407 0172 1F92      		push __zero_reg__
 408 0174 CDB7      		in r28,__SP_L__
 409 0176 DEB7      		in r29,__SP_H__
 410               	/* prologue: function */
 411               	/* frame size = 1 */
 412               	/* stack size = 3 */
 413               	.L__stack_usage = 3
 414 0178 8983      		std Y+1,r24
  46:Components/FNR/FNR.c ****    //dummy function, nothing happens
  47:Components/FNR/FNR.c ****    //return success
  48:Components/FNR/FNR.c **** 	if(FNR == 0){
 416               	.LM29:
 417 017a 8981      		ldd r24,Y+1
 418 017c 8823      		tst r24
 419 017e 01F4      		brne .L11
  49:Components/FNR/FNR.c **** 		FNRNeutral();
 421               	.LM30:
 422 0180 0E94 0000 		call FNRNeutral
 423 0184 00C0      		rjmp .L12
 424               	.L11:
  50:Components/FNR/FNR.c **** 	} else if(FNR == 1){
 426               	.LM31:
 427 0186 8981      		ldd r24,Y+1
 428 0188 8130      		cpi r24,lo8(1)
 429 018a 01F4      		brne .L13
  51:Components/FNR/FNR.c **** 		FNRForward();
 431               	.LM32:
 432 018c 0E94 0000 		call FNRForward
 433 0190 00C0      		rjmp .L12
 434               	.L13:
  52:Components/FNR/FNR.c **** 	} else if(FNR == -1){
 436               	.LM33:
 437 0192 8981      		ldd r24,Y+1
 438 0194 8F3F      		cpi r24,lo8(-1)
 439 0196 01F4      		brne .L12
  53:Components/FNR/FNR.c **** 		FNRReverse();
 441               	.LM34:
 442 0198 0E94 0000 		call FNRReverse
 443               	.L12:
  54:Components/FNR/FNR.c **** 	}
  55:Components/FNR/FNR.c **** 
  56:Components/FNR/FNR.c ****    return 1;
 445               	.LM35:
 446 019c 81E0      		ldi r24,lo8(1)
 447               	/* epilogue start */
  57:Components/FNR/FNR.c **** }
 449               	.LM36:
 450 019e 0F90      		pop __tmp_reg__
 451 01a0 DF91      		pop r29
 452 01a2 CF91      		pop r28
 453 01a4 0895      		ret
 455               	.Lscope4:
 457               		.stabd	78,0,0
 460               	.global	getFNR
 462               	getFNR:
 463               		.stabd	46,0,0
  58:Components/FNR/FNR.c **** 
  59:Components/FNR/FNR.c **** //get the current FNR state. Function follows same format for consistancy
  60:Components/FNR/FNR.c **** char getFNR(char *sensorResponse) {
 465               	.LM37:
 466               	.LFBB5:
 467 01a6 CF93      		push r28
 468 01a8 DF93      		push r29
 469 01aa 1F92      		push __zero_reg__
 470 01ac 1F92      		push __zero_reg__
 471 01ae CDB7      		in r28,__SP_L__
 472 01b0 DEB7      		in r29,__SP_H__
 473               	/* prologue: function */
 474               	/* frame size = 2 */
 475               	/* stack size = 4 */
 476               	.L__stack_usage = 4
 477 01b2 9A83      		std Y+2,r25
 478 01b4 8983      		std Y+1,r24
  61:Components/FNR/FNR.c ****    //fake reading
  62:Components/FNR/FNR.c ****    *sensorResponse = 0;
 480               	.LM38:
 481 01b6 8981      		ldd r24,Y+1
 482 01b8 9A81      		ldd r25,Y+2
 483 01ba FC01      		movw r30,r24
 484 01bc 1082      		st Z,__zero_reg__
  63:Components/FNR/FNR.c ****    //return success
  64:Components/FNR/FNR.c ****    return 1;
 486               	.LM39:
 487 01be 81E0      		ldi r24,lo8(1)
 488               	/* epilogue start */
  65:Components/FNR/FNR.c **** }
 490               	.LM40:
 491 01c0 0F90      		pop __tmp_reg__
 492 01c2 0F90      		pop __tmp_reg__
 493 01c4 DF91      		pop r29
 494 01c6 CF91      		pop r28
 495 01c8 0895      		ret
 497               	.Lscope5:
 499               		.stabd	78,0,0
 501               	.Letext0:
 502               		.ident	"GCC: (GNU) 4.8.2"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 FNR.c
     /tmp/ccWGDJYU.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccWGDJYU.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccWGDJYU.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccWGDJYU.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccWGDJYU.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccWGDJYU.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccWGDJYU.s:106    .text:0000000000000000 FNRForward
     /tmp/ccWGDJYU.s:200    .text:0000000000000074 FNRReverse
     /tmp/ccWGDJYU.s:294    .text:00000000000000e8 FNRNeutral
     /tmp/ccWGDJYU.s:400    .text:000000000000016e setFNR
     /tmp/ccWGDJYU.s:462    .text:00000000000001a6 getFNR

UNDEFINED SYMBOLS
vTaskDelay
