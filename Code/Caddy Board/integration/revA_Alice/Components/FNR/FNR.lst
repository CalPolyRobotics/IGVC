   1               		.file	"FNR.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 104               	.global	FNRForward
 106               	FNRForward:
 107               		.stabd	46,0,0
   1:Components/FNR/FNR.c **** //FNR controller functions
   2:Components/FNR/FNR.c **** #include <avr/io.h>
   3:Components/FNR/FNR.c **** 
   4:Components/FNR/FNR.c **** #define setABit(x) \
   5:Components/FNR/FNR.c **** PORTA |= (1 << (x));
   6:Components/FNR/FNR.c **** 
   7:Components/FNR/FNR.c **** #define clearABit(x) \
   8:Components/FNR/FNR.c **** PORTA &= ~(1 << (x));
   9:Components/FNR/FNR.c **** 
  10:Components/FNR/FNR.c **** 
  11:Components/FNR/FNR.c **** void FNRForward(){
 109               	.LM0:
 110               	.LFBB1:
 111 0000 CF93      		push r28
 112 0002 DF93      		push r29
 113 0004 CDB7      		in r28,__SP_L__
 114 0006 DEB7      		in r29,__SP_H__
 115               	/* prologue: function */
 116               	/* frame size = 0 */
 117               	/* stack size = 2 */
 118               	.L__stack_usage = 2
  12:Components/FNR/FNR.c **** 	clearABit(1);
 120               	.LM1:
 121 0008 82E2      		ldi r24,lo8(34)
 122 000a 90E0      		ldi r25,0
 123 000c 22E2      		ldi r18,lo8(34)
 124 000e 30E0      		ldi r19,0
 125 0010 F901      		movw r30,r18
 126 0012 2081      		ld r18,Z
 127 0014 2D7F      		andi r18,lo8(-3)
 128 0016 FC01      		movw r30,r24
 129 0018 2083      		st Z,r18
  13:Components/FNR/FNR.c **** 	while((PORTA & 0x2) != 0){
 131               	.LM2:
 132 001a 00C0      		rjmp .L2
 133               	.L3:
 134               	.LBB2:
  14:Components/FNR/FNR.c **** 		clearABit(1);
 136               	.LM3:
 137 001c 82E2      		ldi r24,lo8(34)
 138 001e 90E0      		ldi r25,0
 139 0020 22E2      		ldi r18,lo8(34)
 140 0022 30E0      		ldi r19,0
 141 0024 F901      		movw r30,r18
 142 0026 2081      		ld r18,Z
 143 0028 2D7F      		andi r18,lo8(-3)
 144 002a FC01      		movw r30,r24
 145 002c 2083      		st Z,r18
  15:Components/FNR/FNR.c **** 		vTaskDelay(1);
 147               	.LM4:
 148 002e 81E0      		ldi r24,lo8(1)
 149 0030 90E0      		ldi r25,0
 150 0032 0E94 0000 		call vTaskDelay
 151               	.L2:
 152               	.LBE2:
  13:Components/FNR/FNR.c **** 	while((PORTA & 0x2) != 0){
 154               	.LM5:
 155 0036 82E2      		ldi r24,lo8(34)
 156 0038 90E0      		ldi r25,0
 157 003a FC01      		movw r30,r24
 158 003c 8081      		ld r24,Z
 159 003e 882F      		mov r24,r24
 160 0040 90E0      		ldi r25,0
 161 0042 8270      		andi r24,2
 162 0044 9927      		clr r25
 163 0046 0097      		sbiw r24,0
 164 0048 01F4      		brne .L3
  16:Components/FNR/FNR.c **** 	}
  17:Components/FNR/FNR.c **** 	setABit(0);
 166               	.LM6:
 167 004a 82E2      		ldi r24,lo8(34)
 168 004c 90E0      		ldi r25,0
 169 004e 22E2      		ldi r18,lo8(34)
 170 0050 30E0      		ldi r19,0
 171 0052 F901      		movw r30,r18
 172 0054 2081      		ld r18,Z
 173 0056 2160      		ori r18,lo8(1)
 174 0058 FC01      		movw r30,r24
 175 005a 2083      		st Z,r18
 176               	/* epilogue start */
  18:Components/FNR/FNR.c **** }
 178               	.LM7:
 179 005c DF91      		pop r29
 180 005e CF91      		pop r28
 181 0060 0895      		ret
 183               	.Lscope1:
 185               		.stabd	78,0,0
 187               	.global	FNRReverse
 189               	FNRReverse:
 190               		.stabd	46,0,0
  19:Components/FNR/FNR.c **** 
  20:Components/FNR/FNR.c **** void FNRReverse(){
 192               	.LM8:
 193               	.LFBB2:
 194 0062 CF93      		push r28
 195 0064 DF93      		push r29
 196 0066 CDB7      		in r28,__SP_L__
 197 0068 DEB7      		in r29,__SP_H__
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 2 */
 201               	.L__stack_usage = 2
  21:Components/FNR/FNR.c **** 	clearABit(0);
 203               	.LM9:
 204 006a 82E2      		ldi r24,lo8(34)
 205 006c 90E0      		ldi r25,0
 206 006e 22E2      		ldi r18,lo8(34)
 207 0070 30E0      		ldi r19,0
 208 0072 F901      		movw r30,r18
 209 0074 2081      		ld r18,Z
 210 0076 2E7F      		andi r18,lo8(-2)
 211 0078 FC01      		movw r30,r24
 212 007a 2083      		st Z,r18
  22:Components/FNR/FNR.c **** 	while((PORTA & 0x1) != 0){
 214               	.LM10:
 215 007c 00C0      		rjmp .L5
 216               	.L6:
 217               	.LBB3:
  23:Components/FNR/FNR.c **** 		clearABit(0);
 219               	.LM11:
 220 007e 82E2      		ldi r24,lo8(34)
 221 0080 90E0      		ldi r25,0
 222 0082 22E2      		ldi r18,lo8(34)
 223 0084 30E0      		ldi r19,0
 224 0086 F901      		movw r30,r18
 225 0088 2081      		ld r18,Z
 226 008a 2E7F      		andi r18,lo8(-2)
 227 008c FC01      		movw r30,r24
 228 008e 2083      		st Z,r18
  24:Components/FNR/FNR.c **** 		vTaskDelay(1);
 230               	.LM12:
 231 0090 81E0      		ldi r24,lo8(1)
 232 0092 90E0      		ldi r25,0
 233 0094 0E94 0000 		call vTaskDelay
 234               	.L5:
 235               	.LBE3:
  22:Components/FNR/FNR.c **** 	while((PORTA & 0x1) != 0){
 237               	.LM13:
 238 0098 82E2      		ldi r24,lo8(34)
 239 009a 90E0      		ldi r25,0
 240 009c FC01      		movw r30,r24
 241 009e 8081      		ld r24,Z
 242 00a0 882F      		mov r24,r24
 243 00a2 90E0      		ldi r25,0
 244 00a4 8170      		andi r24,1
 245 00a6 9927      		clr r25
 246 00a8 0097      		sbiw r24,0
 247 00aa 01F4      		brne .L6
  25:Components/FNR/FNR.c **** 	}
  26:Components/FNR/FNR.c **** 	setABit(1);
 249               	.LM14:
 250 00ac 82E2      		ldi r24,lo8(34)
 251 00ae 90E0      		ldi r25,0
 252 00b0 22E2      		ldi r18,lo8(34)
 253 00b2 30E0      		ldi r19,0
 254 00b4 F901      		movw r30,r18
 255 00b6 2081      		ld r18,Z
 256 00b8 2260      		ori r18,lo8(2)
 257 00ba FC01      		movw r30,r24
 258 00bc 2083      		st Z,r18
 259               	/* epilogue start */
  27:Components/FNR/FNR.c **** }
 261               	.LM15:
 262 00be DF91      		pop r29
 263 00c0 CF91      		pop r28
 264 00c2 0895      		ret
 266               	.Lscope2:
 268               		.stabd	78,0,0
 270               	.global	FNRNeutral
 272               	FNRNeutral:
 273               		.stabd	46,0,0
  28:Components/FNR/FNR.c **** 
  29:Components/FNR/FNR.c **** void FNRNeutral(){
 275               	.LM16:
 276               	.LFBB3:
 277 00c4 CF93      		push r28
 278 00c6 DF93      		push r29
 279 00c8 CDB7      		in r28,__SP_L__
 280 00ca DEB7      		in r29,__SP_H__
 281               	/* prologue: function */
 282               	/* frame size = 0 */
 283               	/* stack size = 2 */
 284               	.L__stack_usage = 2
  30:Components/FNR/FNR.c **** 	clearABit(0);
 286               	.LM17:
 287 00cc 82E2      		ldi r24,lo8(34)
 288 00ce 90E0      		ldi r25,0
 289 00d0 22E2      		ldi r18,lo8(34)
 290 00d2 30E0      		ldi r19,0
 291 00d4 F901      		movw r30,r18
 292 00d6 2081      		ld r18,Z
 293 00d8 2E7F      		andi r18,lo8(-2)
 294 00da FC01      		movw r30,r24
 295 00dc 2083      		st Z,r18
  31:Components/FNR/FNR.c **** 	clearABit(1);
 297               	.LM18:
 298 00de 82E2      		ldi r24,lo8(34)
 299 00e0 90E0      		ldi r25,0
 300 00e2 22E2      		ldi r18,lo8(34)
 301 00e4 30E0      		ldi r19,0
 302 00e6 F901      		movw r30,r18
 303 00e8 2081      		ld r18,Z
 304 00ea 2D7F      		andi r18,lo8(-3)
 305 00ec FC01      		movw r30,r24
 306 00ee 2083      		st Z,r18
  32:Components/FNR/FNR.c **** 	while((PORTA & 0x3) != 0){
 308               	.LM19:
 309 00f0 00C0      		rjmp .L8
 310               	.L9:
 311               	.LBB4:
  33:Components/FNR/FNR.c **** 		clearABit(0);
 313               	.LM20:
 314 00f2 82E2      		ldi r24,lo8(34)
 315 00f4 90E0      		ldi r25,0
 316 00f6 22E2      		ldi r18,lo8(34)
 317 00f8 30E0      		ldi r19,0
 318 00fa F901      		movw r30,r18
 319 00fc 2081      		ld r18,Z
 320 00fe 2E7F      		andi r18,lo8(-2)
 321 0100 FC01      		movw r30,r24
 322 0102 2083      		st Z,r18
  34:Components/FNR/FNR.c **** 		clearABit(1);
 324               	.LM21:
 325 0104 82E2      		ldi r24,lo8(34)
 326 0106 90E0      		ldi r25,0
 327 0108 22E2      		ldi r18,lo8(34)
 328 010a 30E0      		ldi r19,0
 329 010c F901      		movw r30,r18
 330 010e 2081      		ld r18,Z
 331 0110 2D7F      		andi r18,lo8(-3)
 332 0112 FC01      		movw r30,r24
 333 0114 2083      		st Z,r18
  35:Components/FNR/FNR.c **** 		vTaskDelay(1);
 335               	.LM22:
 336 0116 81E0      		ldi r24,lo8(1)
 337 0118 90E0      		ldi r25,0
 338 011a 0E94 0000 		call vTaskDelay
 339               	.L8:
 340               	.LBE4:
  32:Components/FNR/FNR.c **** 		clearABit(0);
 342               	.LM23:
 343 011e 82E2      		ldi r24,lo8(34)
 344 0120 90E0      		ldi r25,0
 345 0122 FC01      		movw r30,r24
 346 0124 8081      		ld r24,Z
 347 0126 882F      		mov r24,r24
 348 0128 90E0      		ldi r25,0
 349 012a 8370      		andi r24,3
 350 012c 9927      		clr r25
 351 012e 0097      		sbiw r24,0
 352 0130 01F4      		brne .L9
 353               	/* epilogue start */
  36:Components/FNR/FNR.c **** 	}
  37:Components/FNR/FNR.c **** }
 355               	.LM24:
 356 0132 DF91      		pop r29
 357 0134 CF91      		pop r28
 358 0136 0895      		ret
 360               	.Lscope3:
 362               		.stabd	78,0,0
 365               	.global	setFNR
 367               	setFNR:
 368               		.stabd	46,0,0
  38:Components/FNR/FNR.c **** 
  39:Components/FNR/FNR.c **** //set the FNR controller, inputs are either -1, 0, or 1.
  40:Components/FNR/FNR.c **** char setFNR(char FNR) {
 370               	.LM25:
 371               	.LFBB4:
 372 0138 CF93      		push r28
 373 013a DF93      		push r29
 374 013c 1F92      		push __zero_reg__
 375 013e CDB7      		in r28,__SP_L__
 376 0140 DEB7      		in r29,__SP_H__
 377               	/* prologue: function */
 378               	/* frame size = 1 */
 379               	/* stack size = 3 */
 380               	.L__stack_usage = 3
 381 0142 8983      		std Y+1,r24
  41:Components/FNR/FNR.c ****    //dummy function, nothing happens
  42:Components/FNR/FNR.c ****    //return success
  43:Components/FNR/FNR.c **** 	if(FNR == 0){
 383               	.LM26:
 384 0144 8981      		ldd r24,Y+1
 385 0146 8823      		tst r24
 386 0148 01F4      		brne .L11
  44:Components/FNR/FNR.c **** 		FNRNeutral();
 388               	.LM27:
 389 014a 0E94 0000 		call FNRNeutral
 390 014e 00C0      		rjmp .L12
 391               	.L11:
  45:Components/FNR/FNR.c **** 	} else if(FNR == 1){
 393               	.LM28:
 394 0150 8981      		ldd r24,Y+1
 395 0152 8130      		cpi r24,lo8(1)
 396 0154 01F4      		brne .L13
  46:Components/FNR/FNR.c **** 		FNRForward();
 398               	.LM29:
 399 0156 0E94 0000 		call FNRForward
 400 015a 00C0      		rjmp .L12
 401               	.L13:
  47:Components/FNR/FNR.c **** 	} else if(FNR == -1){
 403               	.LM30:
 404 015c 8981      		ldd r24,Y+1
 405 015e 8F3F      		cpi r24,lo8(-1)
 406 0160 01F4      		brne .L12
  48:Components/FNR/FNR.c **** 		FNRReverse();
 408               	.LM31:
 409 0162 0E94 0000 		call FNRReverse
 410               	.L12:
  49:Components/FNR/FNR.c **** 	}
  50:Components/FNR/FNR.c **** 
  51:Components/FNR/FNR.c ****    return 1;
 412               	.LM32:
 413 0166 81E0      		ldi r24,lo8(1)
 414               	/* epilogue start */
  52:Components/FNR/FNR.c **** }
 416               	.LM33:
 417 0168 0F90      		pop __tmp_reg__
 418 016a DF91      		pop r29
 419 016c CF91      		pop r28
 420 016e 0895      		ret
 422               	.Lscope4:
 424               		.stabd	78,0,0
 427               	.global	getFNR
 429               	getFNR:
 430               		.stabd	46,0,0
  53:Components/FNR/FNR.c **** 
  54:Components/FNR/FNR.c **** //get the current FNR state. Function follows same format for consistancy
  55:Components/FNR/FNR.c **** char getFNR(char *sensorResponse) {
 432               	.LM34:
 433               	.LFBB5:
 434 0170 CF93      		push r28
 435 0172 DF93      		push r29
 436 0174 1F92      		push __zero_reg__
 437 0176 1F92      		push __zero_reg__
 438 0178 CDB7      		in r28,__SP_L__
 439 017a DEB7      		in r29,__SP_H__
 440               	/* prologue: function */
 441               	/* frame size = 2 */
 442               	/* stack size = 4 */
 443               	.L__stack_usage = 4
 444 017c 9A83      		std Y+2,r25
 445 017e 8983      		std Y+1,r24
  56:Components/FNR/FNR.c ****    //fake reading
  57:Components/FNR/FNR.c ****    *sensorResponse = 0;
 447               	.LM35:
 448 0180 8981      		ldd r24,Y+1
 449 0182 9A81      		ldd r25,Y+2
 450 0184 FC01      		movw r30,r24
 451 0186 1082      		st Z,__zero_reg__
  58:Components/FNR/FNR.c ****    //return success
  59:Components/FNR/FNR.c ****    return 1;
 453               	.LM36:
 454 0188 81E0      		ldi r24,lo8(1)
 455               	/* epilogue start */
  60:Components/FNR/FNR.c **** }
 457               	.LM37:
 458 018a 0F90      		pop __tmp_reg__
 459 018c 0F90      		pop __tmp_reg__
 460 018e DF91      		pop r29
 461 0190 CF91      		pop r28
 462 0192 0895      		ret
 464               	.Lscope5:
 466               		.stabd	78,0,0
 468               	.Letext0:
 469               		.ident	"GCC: (GNU) 4.8.2"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 FNR.c
     /tmp/cc25QgPG.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc25QgPG.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc25QgPG.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc25QgPG.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc25QgPG.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc25QgPG.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc25QgPG.s:106    .text:0000000000000000 FNRForward
     /tmp/cc25QgPG.s:189    .text:0000000000000062 FNRReverse
     /tmp/cc25QgPG.s:272    .text:00000000000000c4 FNRNeutral
     /tmp/cc25QgPG.s:367    .text:0000000000000138 setFNR
     /tmp/cc25QgPG.s:429    .text:0000000000000170 getFNR

UNDEFINED SYMBOLS
vTaskDelay
