   1               		.file	"Steering.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
  30               	.global	setAngle
  32               	setAngle:
  33               		.stabd	46,0,0
   1:Components/Steering/Steering.c **** 
   2:Components/Steering/Steering.c **** //Steering group
   3:Components/Steering/Steering.c **** 
   4:Components/Steering/Steering.c **** //JUST SETS ANGLE TARGET. Actual angle changing is lower level
   5:Components/Steering/Steering.c **** char setAngle(char angleTarget) {
  35               	.LM0:
  36               	.LFBB1:
  37 0000 DF93      		push r29
  38 0002 CF93      		push r28
  39 0004 0F92      		push __tmp_reg__
  40 0006 CDB7      		in r28,__SP_L__
  41 0008 DEB7      		in r29,__SP_H__
  42               	/* prologue: function */
  43               	/* frame size = 1 */
  44 000a 8983      		std Y+1,r24
   6:Components/Steering/Steering.c ****    //dummy function, nothing will happen for now...
   7:Components/Steering/Steering.c ****    //return success
   8:Components/Steering/Steering.c ****    return 1;
  46               	.LM1:
  47 000c 81E0      		ldi r24,lo8(1)
  48               	/* epilogue start */
   9:Components/Steering/Steering.c **** }
  50               	.LM2:
  51 000e 0F90      		pop __tmp_reg__
  52 0010 CF91      		pop r28
  53 0012 DF91      		pop r29
  54 0014 0895      		ret
  56               	.Lscope1:
  58               		.stabd	78,0,0
  61               	.global	getAngle
  63               	getAngle:
  64               		.stabd	46,0,0
  10:Components/Steering/Steering.c **** 
  11:Components/Steering/Steering.c **** //get the current angle of the steering system
  12:Components/Steering/Steering.c **** char getAngle(char* sensorResponse) {
  66               	.LM3:
  67               	.LFBB2:
  68 0016 DF93      		push r29
  69 0018 CF93      		push r28
  70 001a 0F92      		push __tmp_reg__
  71 001c 0F92      		push __tmp_reg__
  72 001e CDB7      		in r28,__SP_L__
  73 0020 DEB7      		in r29,__SP_H__
  74               	/* prologue: function */
  75               	/* frame size = 2 */
  76 0022 9A83      		std Y+2,r25
  77 0024 8983      		std Y+1,r24
  13:Components/Steering/Steering.c ****    //store fake angle reading
  14:Components/Steering/Steering.c ****    *sensorResponse = 0;
  79               	.LM4:
  80 0026 E981      		ldd r30,Y+1
  81 0028 FA81      		ldd r31,Y+2
  82 002a 1082      		st Z,__zero_reg__
  15:Components/Steering/Steering.c ****    //return success
  16:Components/Steering/Steering.c ****    return 1;
  84               	.LM5:
  85 002c 81E0      		ldi r24,lo8(1)
  86               	/* epilogue start */
  17:Components/Steering/Steering.c **** }
  88               	.LM6:
  89 002e 0F90      		pop __tmp_reg__
  90 0030 0F90      		pop __tmp_reg__
  91 0032 CF91      		pop r28
  92 0034 DF91      		pop r29
  93 0036 0895      		ret
  95               	.Lscope2:
  97               		.stabd	78,0,0
 100               	.global	getDesiredAngle
 102               	getDesiredAngle:
 103               		.stabd	46,0,0
  18:Components/Steering/Steering.c **** 
  19:Components/Steering/Steering.c **** //get the angle target. argument name is sensorResponse for the sake of consistancy
  20:Components/Steering/Steering.c **** char getDesiredAngle(char* sensorResponse) {
 105               	.LM7:
 106               	.LFBB3:
 107 0038 DF93      		push r29
 108 003a CF93      		push r28
 109 003c 0F92      		push __tmp_reg__
 110 003e 0F92      		push __tmp_reg__
 111 0040 CDB7      		in r28,__SP_L__
 112 0042 DEB7      		in r29,__SP_H__
 113               	/* prologue: function */
 114               	/* frame size = 2 */
 115 0044 9A83      		std Y+2,r25
 116 0046 8983      		std Y+1,r24
  21:Components/Steering/Steering.c ****    //fake response
  22:Components/Steering/Steering.c ****    *sensorResponse = 0;
 118               	.LM8:
 119 0048 E981      		ldd r30,Y+1
 120 004a FA81      		ldd r31,Y+2
 121 004c 1082      		st Z,__zero_reg__
  23:Components/Steering/Steering.c ****    //return success
  24:Components/Steering/Steering.c ****    return 1;
 123               	.LM9:
 124 004e 81E0      		ldi r24,lo8(1)
 125               	/* epilogue start */
  25:Components/Steering/Steering.c **** }
 127               	.LM10:
 128 0050 0F90      		pop __tmp_reg__
 129 0052 0F90      		pop __tmp_reg__
 130 0054 CF91      		pop r28
 131 0056 DF91      		pop r29
 132 0058 0895      		ret
 134               	.Lscope3:
 136               		.stabd	78,0,0
 141               	.global	changePID
 143               	changePID:
 144               		.stabd	46,0,0
  26:Components/Steering/Steering.c **** 
  27:Components/Steering/Steering.c **** //change the PID controller
  28:Components/Steering/Steering.c **** char changePID(char P, char I, char D) {
 146               	.LM11:
 147               	.LFBB4:
 148 005a DF93      		push r29
 149 005c CF93      		push r28
 150 005e 00D0      		rcall .
 151 0060 CDB7      		in r28,__SP_L__
 152 0062 DEB7      		in r29,__SP_H__
 153               	/* prologue: function */
 154               	/* frame size = 3 */
 155 0064 8983      		std Y+1,r24
 156 0066 6A83      		std Y+2,r22
 157 0068 4B83      		std Y+3,r20
  29:Components/Steering/Steering.c ****    //dummy function, nothing happens
  30:Components/Steering/Steering.c ****    //return success
  31:Components/Steering/Steering.c ****    return 1;
 159               	.LM12:
 160 006a 81E0      		ldi r24,lo8(1)
 161               	/* epilogue start */
  32:Components/Steering/Steering.c **** }
 163               	.LM13:
 164 006c 0F90      		pop __tmp_reg__
 165 006e 0F90      		pop __tmp_reg__
 166 0070 0F90      		pop __tmp_reg__
 167 0072 CF91      		pop r28
 168 0074 DF91      		pop r29
 169 0076 0895      		ret
 171               	.Lscope4:
 173               		.stabd	78,0,0
 177               	.global	setLimits
 179               	setLimits:
 180               		.stabd	46,0,0
  33:Components/Steering/Steering.c **** 
  34:Components/Steering/Steering.c **** //not sure what this does. Also not sure why upper and lower are separated
  35:Components/Steering/Steering.c **** //but its in the specs so...
  36:Components/Steering/Steering.c **** char setLimits(char upper, char lower) {
 182               	.LM14:
 183               	.LFBB5:
 184 0078 DF93      		push r29
 185 007a CF93      		push r28
 186 007c 0F92      		push __tmp_reg__
 187 007e 0F92      		push __tmp_reg__
 188 0080 CDB7      		in r28,__SP_L__
 189 0082 DEB7      		in r29,__SP_H__
 190               	/* prologue: function */
 191               	/* frame size = 2 */
 192 0084 8983      		std Y+1,r24
 193 0086 6A83      		std Y+2,r22
  37:Components/Steering/Steering.c ****    //dummy function, nothing happens
  38:Components/Steering/Steering.c ****    //return success
  39:Components/Steering/Steering.c ****    return 1;
 195               	.LM15:
 196 0088 81E0      		ldi r24,lo8(1)
 197               	/* epilogue start */
  40:Components/Steering/Steering.c **** }
 199               	.LM16:
 200 008a 0F90      		pop __tmp_reg__
 201 008c 0F90      		pop __tmp_reg__
 202 008e CF91      		pop r28
 203 0090 DF91      		pop r29
 204 0092 0895      		ret
 206               	.Lscope5:
 208               		.stabd	78,0,0
 210               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 Steering.c
     /tmp/ccqlFA91.s:2      *ABS*:0000003f __SREG__
     /tmp/ccqlFA91.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccqlFA91.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccqlFA91.s:5      *ABS*:00000034 __CCP__
     /tmp/ccqlFA91.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccqlFA91.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccqlFA91.s:32     .text:00000000 setAngle
     /tmp/ccqlFA91.s:63     .text:00000016 getAngle
     /tmp/ccqlFA91.s:102    .text:00000038 getDesiredAngle
     /tmp/ccqlFA91.s:143    .text:0000005a changePID
     /tmp/ccqlFA91.s:179    .text:00000078 setLimits

NO UNDEFINED SYMBOLS
