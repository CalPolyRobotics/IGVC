   1               		.file	"protocol.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
  68               	.global	commandIntegCheck
  70               	commandIntegCheck:
  71               		.stabd	46,0,0
   1:protocol.c    **** /**
   2:protocol.c    ****  * Skeleton of command recieve and response
   3:protocol.c    ****  *
   4:protocol.c    ****  * @author Louie Thiros
   5:protocol.c    ****  */
   6:protocol.c    **** 
   7:protocol.c    **** #include "protocol.h"
   8:protocol.c    **** #include "Components/Battery/Battery.h"
   9:protocol.c    **** #include "Components/Brake/Brake.h"
  10:protocol.c    **** #include "Components/Error/Error.h"
  11:protocol.c    **** #include "Components/FNR/FNR.h"
  12:protocol.c    **** #include "Components/Speed/Speed.h"
  13:protocol.c    **** #include "Components/Steering/Steering.h"
  14:protocol.c    **** #include "Components/Sonar/Sonar.h"
  15:protocol.c    **** #include "Components/Lights/Lights.h"
  16:protocol.c    **** 
  17:protocol.c    **** 
  18:protocol.c    **** char processUltrasonicCommand(char commandCode, void* commandData, Response* responseData); 
  19:protocol.c    **** char processSpeedCommand(char commandCode, void* commandData, Response* responseData); 
  20:protocol.c    **** char processSteeringCommand(char commandCode, void* commandData, Response* responseData); 
  21:protocol.c    **** char processFNRCommand(char commandCode, void* commandData, Response* responseData); 
  22:protocol.c    **** char processBrakeCommand(char commandCode, void* commandData, Response* responseData); 
  23:protocol.c    **** char processBatteryCommand(char commandCode, void* commandData, Response* responseData); 
  24:protocol.c    **** char processLightCommand(char commandCode, void* commandData, Response* responseData); 
  25:protocol.c    **** 
  26:protocol.c    **** 
  27:protocol.c    **** //function to CRC the command structure
  28:protocol.c    **** char commandIntegCheck(Command *command) {
  73               	.LM0:
  74               	.LFBB1:
  75 0000 CF93      		push r28
  76 0002 DF93      		push r29
  77 0004 1F92      		push __zero_reg__
  78 0006 1F92      		push __zero_reg__
  79 0008 CDB7      		in r28,__SP_L__
  80 000a DEB7      		in r29,__SP_H__
  81               	/* prologue: function */
  82               	/* frame size = 2 */
  83               	/* stack size = 4 */
  84               	.L__stack_usage = 4
  85 000c 9A83      		std Y+2,r25
  86 000e 8983      		std Y+1,r24
  29:protocol.c    ****    //CRC the command with 0x00 in place of the CRC
  30:protocol.c    ****    //return success for now
  31:protocol.c    ****    return 1;
  88               	.LM1:
  89 0010 81E0      		ldi r24,lo8(1)
  90               	/* epilogue start */
  32:protocol.c    **** }
  92               	.LM2:
  93 0012 0F90      		pop __tmp_reg__
  94 0014 0F90      		pop __tmp_reg__
  95 0016 DF91      		pop r29
  96 0018 CF91      		pop r28
  97 001a 0895      		ret
  99               	.Lscope1:
 101               		.stabd	78,0,0
 106               	.global	processUltrasonicCommand
 108               	processUltrasonicCommand:
 109               		.stabd	46,0,0
  33:protocol.c    **** 
  34:protocol.c    **** char processUltrasonicCommand(char commandCode, void* commandData, Response* responseData) {
 111               	.LM3:
 112               	.LFBB2:
 113 001c CF93      		push r28
 114 001e DF93      		push r29
 115 0020 00D0      		rcall .
 116 0022 1F92      		push __zero_reg__
 117 0024 1F92      		push __zero_reg__
 118 0026 CDB7      		in r28,__SP_L__
 119 0028 DEB7      		in r29,__SP_H__
 120               	/* prologue: function */
 121               	/* frame size = 5 */
 122               	/* stack size = 7 */
 123               	.L__stack_usage = 7
 124 002a 8983      		std Y+1,r24
 125 002c 7B83      		std Y+3,r23
 126 002e 6A83      		std Y+2,r22
 127 0030 5D83      		std Y+5,r21
 128 0032 4C83      		std Y+4,r20
  35:protocol.c    ****    switch(commandCode) {
 130               	.LM4:
 131 0034 8981      		ldd r24,Y+1
 132 0036 9927      		clr r25
 133 0038 87FD      		sbrc r24,7
 134 003a 9095      		com r25
 135 003c 8230      		cpi r24,2
 136 003e 9105      		cpc r25,__zero_reg__
 137 0040 01F0      		breq .L5
 138 0042 8330      		cpi r24,3
 139 0044 9105      		cpc r25,__zero_reg__
 140 0046 01F0      		breq .L6
 141 0048 8130      		cpi r24,1
 142 004a 9105      		cpc r25,__zero_reg__
 143 004c 01F4      		brne .L4
  36:protocol.c    ****       case GET_ALL_SENSORS:
  37:protocol.c    ****          getAllSensors((int*) responseData->payload);
 145               	.LM5:
 146 004e 8C81      		ldd r24,Y+4
 147 0050 9D81      		ldd r25,Y+5
 148 0052 0296      		adiw r24,2
 149 0054 0E94 0000 		call getAllSensors
  38:protocol.c    ****          break;
 151               	.LM6:
 152 0058 00C0      		rjmp .L4
 153               	.L5:
  39:protocol.c    ****       case GET_CERTAIN_SENSORS:
  40:protocol.c    ****          getCertainSensor(((char*)commandData)[0], (int*) responseData->payload);
 155               	.LM7:
 156 005a 8C81      		ldd r24,Y+4
 157 005c 9D81      		ldd r25,Y+5
 158 005e 0296      		adiw r24,2
 159 0060 2A81      		ldd r18,Y+2
 160 0062 3B81      		ldd r19,Y+3
 161 0064 F901      		movw r30,r18
 162 0066 2081      		ld r18,Z
 163 0068 BC01      		movw r22,r24
 164 006a 822F      		mov r24,r18
 165 006c 0E94 0000 		call getCertainSensor
  41:protocol.c    ****          break;
 167               	.LM8:
 168 0070 00C0      		rjmp .L4
 169               	.L6:
  42:protocol.c    ****       case GET_SENSOR_GROUP:
  43:protocol.c    ****          getSensorGroup(((char*)commandData)[0], (int*) responseData->payload);
 171               	.LM9:
 172 0072 8C81      		ldd r24,Y+4
 173 0074 9D81      		ldd r25,Y+5
 174 0076 0296      		adiw r24,2
 175 0078 2A81      		ldd r18,Y+2
 176 007a 3B81      		ldd r19,Y+3
 177 007c F901      		movw r30,r18
 178 007e 2081      		ld r18,Z
 179 0080 BC01      		movw r22,r24
 180 0082 822F      		mov r24,r18
 181 0084 0E94 0000 		call getSensorGroup
  44:protocol.c    ****          break;
 183               	.LM10:
 184 0088 0000      		nop
 185               	.L4:
  45:protocol.c    ****    }
  46:protocol.c    ****    //return success for now...
  47:protocol.c    ****    return 1;
 187               	.LM11:
 188 008a 81E0      		ldi r24,lo8(1)
 189               	/* epilogue start */
  48:protocol.c    **** }
 191               	.LM12:
 192 008c 0F90      		pop __tmp_reg__
 193 008e 0F90      		pop __tmp_reg__
 194 0090 0F90      		pop __tmp_reg__
 195 0092 0F90      		pop __tmp_reg__
 196 0094 0F90      		pop __tmp_reg__
 197 0096 DF91      		pop r29
 198 0098 CF91      		pop r28
 199 009a 0895      		ret
 201               	.Lscope2:
 203               		.stabd	78,0,0
 208               	.global	processSpeedCommand
 210               	processSpeedCommand:
 211               		.stabd	46,0,0
  49:protocol.c    **** 
  50:protocol.c    **** char processSpeedCommand(char commandCode, void* commandData, Response* responseData) {
 213               	.LM13:
 214               	.LFBB3:
 215 009c CF93      		push r28
 216 009e DF93      		push r29
 217 00a0 00D0      		rcall .
 218 00a2 1F92      		push __zero_reg__
 219 00a4 1F92      		push __zero_reg__
 220 00a6 CDB7      		in r28,__SP_L__
 221 00a8 DEB7      		in r29,__SP_H__
 222               	/* prologue: function */
 223               	/* frame size = 5 */
 224               	/* stack size = 7 */
 225               	.L__stack_usage = 7
 226 00aa 8983      		std Y+1,r24
 227 00ac 7B83      		std Y+3,r23
 228 00ae 6A83      		std Y+2,r22
 229 00b0 5D83      		std Y+5,r21
 230 00b2 4C83      		std Y+4,r20
  51:protocol.c    ****    switch(commandCode) {
 232               	.LM14:
 233 00b4 8981      		ldd r24,Y+1
 234 00b6 9927      		clr r25
 235 00b8 87FD      		sbrc r24,7
 236 00ba 9095      		com r25
 237 00bc 0097      		sbiw r24,0
 238 00be 01F0      		breq .L11
 239 00c0 8130      		cpi r24,1
 240 00c2 9105      		cpc r25,__zero_reg__
 241 00c4 01F0      		breq .L12
 242 00c6 00C0      		rjmp .L10
 243               	.L11:
  52:protocol.c    ****       case GET_SPEED:
  53:protocol.c    ****          getSpeed((unsigned char*) responseData);
 245               	.LM15:
 246 00c8 8C81      		ldd r24,Y+4
 247 00ca 9D81      		ldd r25,Y+5
 248 00cc 0E94 0000 		call getSpeed
  54:protocol.c    ****          break;
 250               	.LM16:
 251 00d0 00C0      		rjmp .L10
 252               	.L12:
  55:protocol.c    ****       case SET_SPEED:
  56:protocol.c    **** 			responseData->size = 0;
 254               	.LM17:
 255 00d2 8C81      		ldd r24,Y+4
 256 00d4 9D81      		ldd r25,Y+5
 257 00d6 FC01      		movw r30,r24
 258 00d8 1182      		std Z+1,__zero_reg__
  57:protocol.c    ****          setSpeed(((char*)commandData)[0]);
 260               	.LM18:
 261 00da 8A81      		ldd r24,Y+2
 262 00dc 9B81      		ldd r25,Y+3
 263 00de FC01      		movw r30,r24
 264 00e0 8081      		ld r24,Z
 265 00e2 0E94 0000 		call setSpeed
  58:protocol.c    ****          break;
 267               	.LM19:
 268 00e6 0000      		nop
 269               	.L10:
  59:protocol.c    ****    }
  60:protocol.c    ****    //return success for now
  61:protocol.c    ****    return 1;
 271               	.LM20:
 272 00e8 81E0      		ldi r24,lo8(1)
 273               	/* epilogue start */
  62:protocol.c    **** }
 275               	.LM21:
 276 00ea 0F90      		pop __tmp_reg__
 277 00ec 0F90      		pop __tmp_reg__
 278 00ee 0F90      		pop __tmp_reg__
 279 00f0 0F90      		pop __tmp_reg__
 280 00f2 0F90      		pop __tmp_reg__
 281 00f4 DF91      		pop r29
 282 00f6 CF91      		pop r28
 283 00f8 0895      		ret
 285               	.Lscope3:
 287               		.stabd	78,0,0
 292               	.global	processSteeringCommand
 294               	processSteeringCommand:
 295               		.stabd	46,0,0
  63:protocol.c    **** 
  64:protocol.c    **** char processSteeringCommand(char commandCode, void* commandData, Response* responseData) {
 297               	.LM22:
 298               	.LFBB4:
 299 00fa CF93      		push r28
 300 00fc DF93      		push r29
 301 00fe 00D0      		rcall .
 302 0100 1F92      		push __zero_reg__
 303 0102 1F92      		push __zero_reg__
 304 0104 CDB7      		in r28,__SP_L__
 305 0106 DEB7      		in r29,__SP_H__
 306               	/* prologue: function */
 307               	/* frame size = 5 */
 308               	/* stack size = 7 */
 309               	.L__stack_usage = 7
 310 0108 8983      		std Y+1,r24
 311 010a 7B83      		std Y+3,r23
 312 010c 6A83      		std Y+2,r22
 313 010e 5D83      		std Y+5,r21
 314 0110 4C83      		std Y+4,r20
  65:protocol.c    ****    switch(commandCode) {
 316               	.LM23:
 317 0112 8981      		ldd r24,Y+1
 318 0114 9927      		clr r25
 319 0116 87FD      		sbrc r24,7
 320 0118 9095      		com r25
 321 011a 8230      		cpi r24,2
 322 011c 9105      		cpc r25,__zero_reg__
 323 011e 01F0      		breq .L16
 324 0120 8330      		cpi r24,3
 325 0122 9105      		cpc r25,__zero_reg__
 326 0124 04F4      		brge .L17
 327 0126 0097      		sbiw r24,0
 328 0128 01F0      		breq .L18
 329 012a 8130      		cpi r24,1
 330 012c 9105      		cpc r25,__zero_reg__
 331 012e 01F0      		breq .L19
 332 0130 00C0      		rjmp .L15
 333               	.L17:
 334 0132 8330      		cpi r24,3
 335 0134 9105      		cpc r25,__zero_reg__
 336 0136 01F0      		breq .L20
 337 0138 8430      		cpi r24,4
 338 013a 9105      		cpc r25,__zero_reg__
 339 013c 01F0      		breq .L21
 340 013e 00C0      		rjmp .L15
 341               	.L18:
  66:protocol.c    ****       case SET_ANGLE:
  67:protocol.c    ****          setAngle(*((char*)commandData));
 343               	.LM24:
 344 0140 8A81      		ldd r24,Y+2
 345 0142 9B81      		ldd r25,Y+3
 346 0144 FC01      		movw r30,r24
 347 0146 8081      		ld r24,Z
 348 0148 0E94 0000 		call setAngle
  68:protocol.c    ****          break;
 350               	.LM25:
 351 014c 00C0      		rjmp .L15
 352               	.L19:
  69:protocol.c    ****       case GET_ANGLE:
  70:protocol.c    ****          getAngle((char*) responseData);
 354               	.LM26:
 355 014e 8C81      		ldd r24,Y+4
 356 0150 9D81      		ldd r25,Y+5
 357 0152 0E94 0000 		call getAngle
  71:protocol.c    ****          break;
 359               	.LM27:
 360 0156 00C0      		rjmp .L15
 361               	.L16:
  72:protocol.c    ****       case GET_DESIRED_ANGLE:
  73:protocol.c    ****          getDesiredAngle((char*) responseData);
 363               	.LM28:
 364 0158 8C81      		ldd r24,Y+4
 365 015a 9D81      		ldd r25,Y+5
 366 015c 0E94 0000 		call getDesiredAngle
  74:protocol.c    ****          break;
 368               	.LM29:
 369 0160 00C0      		rjmp .L15
 370               	.L20:
  75:protocol.c    ****       case CHANGE_PID:
  76:protocol.c    ****          changePID(((char*)commandData)[0], ((char*)commandData)[1], ((char*)commandData)[2]);
 372               	.LM30:
 373 0162 8A81      		ldd r24,Y+2
 374 0164 9B81      		ldd r25,Y+3
 375 0166 0296      		adiw r24,2
 376 0168 FC01      		movw r30,r24
 377 016a 3081      		ld r19,Z
 378 016c 8A81      		ldd r24,Y+2
 379 016e 9B81      		ldd r25,Y+3
 380 0170 0196      		adiw r24,1
 381 0172 FC01      		movw r30,r24
 382 0174 2081      		ld r18,Z
 383 0176 8A81      		ldd r24,Y+2
 384 0178 9B81      		ldd r25,Y+3
 385 017a FC01      		movw r30,r24
 386 017c 8081      		ld r24,Z
 387 017e 432F      		mov r20,r19
 388 0180 622F      		mov r22,r18
 389 0182 0E94 0000 		call changePID
  77:protocol.c    ****          break;
 391               	.LM31:
 392 0186 00C0      		rjmp .L15
 393               	.L21:
  78:protocol.c    ****       case SET_LIMITS:
  79:protocol.c    ****          setLimits(((char*)commandData)[0], ((char*)commandData)[1]);
 395               	.LM32:
 396 0188 8A81      		ldd r24,Y+2
 397 018a 9B81      		ldd r25,Y+3
 398 018c 0196      		adiw r24,1
 399 018e FC01      		movw r30,r24
 400 0190 2081      		ld r18,Z
 401 0192 8A81      		ldd r24,Y+2
 402 0194 9B81      		ldd r25,Y+3
 403 0196 FC01      		movw r30,r24
 404 0198 8081      		ld r24,Z
 405 019a 622F      		mov r22,r18
 406 019c 0E94 0000 		call setLimits
  80:protocol.c    ****          break;
 408               	.LM33:
 409 01a0 0000      		nop
 410               	.L15:
  81:protocol.c    ****    }
  82:protocol.c    ****    //return success for now
  83:protocol.c    ****    return 1;
 412               	.LM34:
 413 01a2 81E0      		ldi r24,lo8(1)
 414               	/* epilogue start */
  84:protocol.c    **** }
 416               	.LM35:
 417 01a4 0F90      		pop __tmp_reg__
 418 01a6 0F90      		pop __tmp_reg__
 419 01a8 0F90      		pop __tmp_reg__
 420 01aa 0F90      		pop __tmp_reg__
 421 01ac 0F90      		pop __tmp_reg__
 422 01ae DF91      		pop r29
 423 01b0 CF91      		pop r28
 424 01b2 0895      		ret
 426               	.Lscope4:
 428               		.stabd	78,0,0
 433               	.global	processFNRCommand
 435               	processFNRCommand:
 436               		.stabd	46,0,0
  85:protocol.c    **** 
  86:protocol.c    **** char processFNRCommand(char commandCode, void* commandData, Response* responseData) {
 438               	.LM36:
 439               	.LFBB5:
 440 01b4 CF93      		push r28
 441 01b6 DF93      		push r29
 442 01b8 00D0      		rcall .
 443 01ba 1F92      		push __zero_reg__
 444 01bc 1F92      		push __zero_reg__
 445 01be CDB7      		in r28,__SP_L__
 446 01c0 DEB7      		in r29,__SP_H__
 447               	/* prologue: function */
 448               	/* frame size = 5 */
 449               	/* stack size = 7 */
 450               	.L__stack_usage = 7
 451 01c2 8983      		std Y+1,r24
 452 01c4 7B83      		std Y+3,r23
 453 01c6 6A83      		std Y+2,r22
 454 01c8 5D83      		std Y+5,r21
 455 01ca 4C83      		std Y+4,r20
  87:protocol.c    **** 	responseData->size = 0;	
 457               	.LM37:
 458 01cc 8C81      		ldd r24,Y+4
 459 01ce 9D81      		ldd r25,Y+5
 460 01d0 FC01      		movw r30,r24
 461 01d2 1182      		std Z+1,__zero_reg__
  88:protocol.c    ****    switch(commandCode) {
 463               	.LM38:
 464 01d4 8981      		ldd r24,Y+1
 465 01d6 9927      		clr r25
 466 01d8 87FD      		sbrc r24,7
 467 01da 9095      		com r25
 468 01dc 0097      		sbiw r24,0
 469 01de 01F0      		breq .L25
 470 01e0 8130      		cpi r24,1
 471 01e2 9105      		cpc r25,__zero_reg__
 472 01e4 01F0      		breq .L26
 473 01e6 00C0      		rjmp .L24
 474               	.L25:
  89:protocol.c    ****       case SET_FNR:
  90:protocol.c    ****          setFNR(*((char*)commandData));
 476               	.LM39:
 477 01e8 8A81      		ldd r24,Y+2
 478 01ea 9B81      		ldd r25,Y+3
 479 01ec FC01      		movw r30,r24
 480 01ee 8081      		ld r24,Z
 481 01f0 0E94 0000 		call setFNR
  91:protocol.c    ****          break;
 483               	.LM40:
 484 01f4 00C0      		rjmp .L24
 485               	.L26:
  92:protocol.c    ****       case GET_FNR:
  93:protocol.c    ****          getFNR((char*) responseData);
 487               	.LM41:
 488 01f6 8C81      		ldd r24,Y+4
 489 01f8 9D81      		ldd r25,Y+5
 490 01fa 0E94 0000 		call getFNR
  94:protocol.c    ****          break;
 492               	.LM42:
 493 01fe 0000      		nop
 494               	.L24:
  95:protocol.c    ****    }
  96:protocol.c    ****    return 1;
 496               	.LM43:
 497 0200 81E0      		ldi r24,lo8(1)
 498               	/* epilogue start */
  97:protocol.c    **** }
 500               	.LM44:
 501 0202 0F90      		pop __tmp_reg__
 502 0204 0F90      		pop __tmp_reg__
 503 0206 0F90      		pop __tmp_reg__
 504 0208 0F90      		pop __tmp_reg__
 505 020a 0F90      		pop __tmp_reg__
 506 020c DF91      		pop r29
 507 020e CF91      		pop r28
 508 0210 0895      		ret
 510               	.Lscope5:
 512               		.stabd	78,0,0
 517               	.global	processBrakeCommand
 519               	processBrakeCommand:
 520               		.stabd	46,0,0
  98:protocol.c    **** 
  99:protocol.c    **** char processBrakeCommand(char commandCode, void* commandData, Response* responseData) {
 522               	.LM45:
 523               	.LFBB6:
 524 0212 CF93      		push r28
 525 0214 DF93      		push r29
 526 0216 00D0      		rcall .
 527 0218 1F92      		push __zero_reg__
 528 021a 1F92      		push __zero_reg__
 529 021c CDB7      		in r28,__SP_L__
 530 021e DEB7      		in r29,__SP_H__
 531               	/* prologue: function */
 532               	/* frame size = 5 */
 533               	/* stack size = 7 */
 534               	.L__stack_usage = 7
 535 0220 8983      		std Y+1,r24
 536 0222 7B83      		std Y+3,r23
 537 0224 6A83      		std Y+2,r22
 538 0226 5D83      		std Y+5,r21
 539 0228 4C83      		std Y+4,r20
 100:protocol.c    ****    switch(commandCode) {
 541               	.LM46:
 542 022a 8981      		ldd r24,Y+1
 543 022c 9927      		clr r25
 544 022e 87FD      		sbrc r24,7
 545 0230 9095      		com r25
 546 0232 0097      		sbiw r24,0
 547 0234 01F0      		breq .L30
 548 0236 8130      		cpi r24,1
 549 0238 9105      		cpc r25,__zero_reg__
 550 023a 01F0      		breq .L31
 551 023c 00C0      		rjmp .L29
 552               	.L30:
 101:protocol.c    ****       case SET_BRAKE:
 102:protocol.c    **** 	 setBrake(*((char*)commandData));
 554               	.LM47:
 555 023e 8A81      		ldd r24,Y+2
 556 0240 9B81      		ldd r25,Y+3
 557 0242 FC01      		movw r30,r24
 558 0244 8081      		ld r24,Z
 559 0246 0E94 0000 		call setBrake
 103:protocol.c    **** 	 break;
 561               	.LM48:
 562 024a 00C0      		rjmp .L29
 563               	.L31:
 104:protocol.c    ****       case GET_BRAKE:
 105:protocol.c    **** 	 getBrake((char*) responseData);
 565               	.LM49:
 566 024c 8C81      		ldd r24,Y+4
 567 024e 9D81      		ldd r25,Y+5
 568 0250 0E94 0000 		call getBrake
 106:protocol.c    **** 	 break; 
 570               	.LM50:
 571 0254 0000      		nop
 572               	.L29:
 107:protocol.c    ****    }
 108:protocol.c    ****    return 1;
 574               	.LM51:
 575 0256 81E0      		ldi r24,lo8(1)
 576               	/* epilogue start */
 109:protocol.c    **** }
 578               	.LM52:
 579 0258 0F90      		pop __tmp_reg__
 580 025a 0F90      		pop __tmp_reg__
 581 025c 0F90      		pop __tmp_reg__
 582 025e 0F90      		pop __tmp_reg__
 583 0260 0F90      		pop __tmp_reg__
 584 0262 DF91      		pop r29
 585 0264 CF91      		pop r28
 586 0266 0895      		ret
 588               	.Lscope6:
 590               		.stabd	78,0,0
 595               	.global	processBatteryCommand
 597               	processBatteryCommand:
 598               		.stabd	46,0,0
 110:protocol.c    **** 
 111:protocol.c    **** char processBatteryCommand(char commandCode, void* commandData, Response* responseData) {
 600               	.LM53:
 601               	.LFBB7:
 602 0268 CF93      		push r28
 603 026a DF93      		push r29
 604 026c 00D0      		rcall .
 605 026e 1F92      		push __zero_reg__
 606 0270 1F92      		push __zero_reg__
 607 0272 CDB7      		in r28,__SP_L__
 608 0274 DEB7      		in r29,__SP_H__
 609               	/* prologue: function */
 610               	/* frame size = 5 */
 611               	/* stack size = 7 */
 612               	.L__stack_usage = 7
 613 0276 8983      		std Y+1,r24
 614 0278 7B83      		std Y+3,r23
 615 027a 6A83      		std Y+2,r22
 616 027c 5D83      		std Y+5,r21
 617 027e 4C83      		std Y+4,r20
 112:protocol.c    ****    switch(commandCode) {
 619               	.LM54:
 620 0280 8981      		ldd r24,Y+1
 621 0282 9927      		clr r25
 622 0284 87FD      		sbrc r24,7
 623 0286 9095      		com r25
 624 0288 0097      		sbiw r24,0
 625 028a 01F0      		breq .L35
 626 028c 8130      		cpi r24,1
 627 028e 9105      		cpc r25,__zero_reg__
 628 0290 01F0      		breq .L36
 629 0292 00C0      		rjmp .L34
 630               	.L35:
 113:protocol.c    ****       case GET_BATTERY_VOLTAGE:
 114:protocol.c    ****          getBatteryVoltage((char*) responseData);
 632               	.LM55:
 633 0294 8C81      		ldd r24,Y+4
 634 0296 9D81      		ldd r25,Y+5
 635 0298 0E94 0000 		call getBatteryVoltage
 115:protocol.c    ****          break;
 637               	.LM56:
 638 029c 00C0      		rjmp .L34
 639               	.L36:
 116:protocol.c    ****       case GET_STEERING_VOLTAGE:
 117:protocol.c    ****          getSteeringVoltage((char*) responseData);
 641               	.LM57:
 642 029e 8C81      		ldd r24,Y+4
 643 02a0 9D81      		ldd r25,Y+5
 644 02a2 0E94 0000 		call getSteeringVoltage
 118:protocol.c    ****          break;
 646               	.LM58:
 647 02a6 0000      		nop
 648               	.L34:
 119:protocol.c    ****    }
 120:protocol.c    ****    return 1;
 650               	.LM59:
 651 02a8 81E0      		ldi r24,lo8(1)
 652               	/* epilogue start */
 121:protocol.c    **** }
 654               	.LM60:
 655 02aa 0F90      		pop __tmp_reg__
 656 02ac 0F90      		pop __tmp_reg__
 657 02ae 0F90      		pop __tmp_reg__
 658 02b0 0F90      		pop __tmp_reg__
 659 02b2 0F90      		pop __tmp_reg__
 660 02b4 DF91      		pop r29
 661 02b6 CF91      		pop r28
 662 02b8 0895      		ret
 664               	.Lscope7:
 666               		.stabd	78,0,0
 671               	.global	processLightCommand
 673               	processLightCommand:
 674               		.stabd	46,0,0
 122:protocol.c    **** 
 123:protocol.c    **** char processLightCommand(char commandCode, void* commandData, Response* responseData) {
 676               	.LM61:
 677               	.LFBB8:
 678 02ba CF93      		push r28
 679 02bc DF93      		push r29
 680 02be 00D0      		rcall .
 681 02c0 1F92      		push __zero_reg__
 682 02c2 1F92      		push __zero_reg__
 683 02c4 CDB7      		in r28,__SP_L__
 684 02c6 DEB7      		in r29,__SP_H__
 685               	/* prologue: function */
 686               	/* frame size = 5 */
 687               	/* stack size = 7 */
 688               	.L__stack_usage = 7
 689 02c8 8983      		std Y+1,r24
 690 02ca 7B83      		std Y+3,r23
 691 02cc 6A83      		std Y+2,r22
 692 02ce 5D83      		std Y+5,r21
 693 02d0 4C83      		std Y+4,r20
 124:protocol.c    **** 	responseData->size = 0;
 695               	.LM62:
 696 02d2 8C81      		ldd r24,Y+4
 697 02d4 9D81      		ldd r25,Y+5
 698 02d6 FC01      		movw r30,r24
 699 02d8 1182      		std Z+1,__zero_reg__
 125:protocol.c    ****    switch(commandCode) {
 701               	.LM63:
 702 02da 8981      		ldd r24,Y+1
 703 02dc 9927      		clr r25
 704 02de 87FD      		sbrc r24,7
 705 02e0 9095      		com r25
 706 02e2 0097      		sbiw r24,0
 707 02e4 01F4      		brne .L39
 126:protocol.c    ****    case SET_LIGHT:
 127:protocol.c    **** 	 	setLight(*((char*)commandData));
 709               	.LM64:
 710 02e6 8A81      		ldd r24,Y+2
 711 02e8 9B81      		ldd r25,Y+3
 712 02ea FC01      		movw r30,r24
 713 02ec 8081      		ld r24,Z
 714 02ee 0E94 0000 		call setLight
 128:protocol.c    ****       break;
 716               	.LM65:
 717 02f2 0000      		nop
 718               	.L39:
 129:protocol.c    ****    }
 130:protocol.c    ****    return 1;
 720               	.LM66:
 721 02f4 81E0      		ldi r24,lo8(1)
 722               	/* epilogue start */
 131:protocol.c    **** }
 724               	.LM67:
 725 02f6 0F90      		pop __tmp_reg__
 726 02f8 0F90      		pop __tmp_reg__
 727 02fa 0F90      		pop __tmp_reg__
 728 02fc 0F90      		pop __tmp_reg__
 729 02fe 0F90      		pop __tmp_reg__
 730 0300 DF91      		pop r29
 731 0302 CF91      		pop r28
 732 0304 0895      		ret
 734               	.Lscope8:
 736               		.stabd	78,0,0
 740               	.global	processCommand
 742               	processCommand:
 743               		.stabd	46,0,0
 132:protocol.c    **** 
 133:protocol.c    **** 
 134:protocol.c    **** 
 135:protocol.c    **** //Function that will take in a command (as char array) and process it into a
 136:protocol.c    **** //correct response to be stored into response
 137:protocol.c    **** char processCommand(Command *command, Response *response) {
 745               	.LM68:
 746               	.LFBB9:
 747 0306 CF93      		push r28
 748 0308 DF93      		push r29
 749 030a 00D0      		rcall .
 750 030c 1F92      		push __zero_reg__
 751 030e CDB7      		in r28,__SP_L__
 752 0310 DEB7      		in r29,__SP_H__
 753               	/* prologue: function */
 754               	/* frame size = 4 */
 755               	/* stack size = 6 */
 756               	.L__stack_usage = 6
 757 0312 9A83      		std Y+2,r25
 758 0314 8983      		std Y+1,r24
 759 0316 7C83      		std Y+4,r23
 760 0318 6B83      		std Y+3,r22
 138:protocol.c    **** 	response->commandBack = command->cmd;
 762               	.LM69:
 763 031a 8981      		ldd r24,Y+1
 764 031c 9A81      		ldd r25,Y+2
 765 031e DC01      		movw r26,r24
 766 0320 1196      		adiw r26,1
 767 0322 2C91      		ld r18,X
 768 0324 8B81      		ldd r24,Y+3
 769 0326 9C81      		ldd r25,Y+4
 770 0328 FC01      		movw r30,r24
 771 032a 2083      		st Z,r18
 139:protocol.c    ****    switch(command->groupID) {
 773               	.LM70:
 774 032c 8981      		ldd r24,Y+1
 775 032e 9A81      		ldd r25,Y+2
 776 0330 DC01      		movw r26,r24
 777 0332 8C91      		ld r24,X
 778 0334 9927      		clr r25
 779 0336 87FD      		sbrc r24,7
 780 0338 9095      		com r25
 781 033a AA27      		clr r26
 782 033c 97FD      		sbrc r25,7
 783 033e A095      		com r26
 784 0340 BA2F      		mov r27,r26
 785 0342 41E0      		ldi r20,lo8(1)
 786 0344 50E0      		ldi r21,0
 787 0346 27E0      		ldi r18,lo8(7)
 788 0348 30E0      		ldi r19,0
 789 034a 841B      		sub r24,r20
 790 034c 950B      		sbc r25,r21
 791 034e 2817      		cp r18,r24
 792 0350 3907      		cpc r19,r25
 793 0352 00F4      		brsh .+2
 794 0354 00C0      		rjmp .L43
 795 0356 8050      		subi r24,lo8(-(gs(.L45)))
 796 0358 9040      		sbci r25,hi8(-(gs(.L45)))
 797 035a FC01      		movw r30,r24
 798 035c 0C94 0000 		jmp __tablejump2__
 799               		.section	.progmem.gcc_sw_table,"a",@progbits
 800               		.p2align	1
 801               	.L45:
 802 0000 0000      		.word gs(.L44)
 803 0002 0000      		.word gs(.L46)
 804 0004 0000      		.word gs(.L47)
 805 0006 0000      		.word gs(.L48)
 806 0008 0000      		.word gs(.L54)
 807 000a 0000      		.word gs(.L50)
 808 000c 0000      		.word gs(.L51)
 809 000e 0000      		.word gs(.L54)
 810               		.text
 811               	.L44:
 140:protocol.c    ****       case ULTRASONIC_GROUP:
 141:protocol.c    ****          processUltrasonicCommand(command->cmd, command->payload, response);
 813               	.LM71:
 814 0360 8981      		ldd r24,Y+1
 815 0362 9A81      		ldd r25,Y+2
 816 0364 0396      		adiw r24,3
 817 0366 2981      		ldd r18,Y+1
 818 0368 3A81      		ldd r19,Y+2
 819 036a D901      		movw r26,r18
 820 036c 1196      		adiw r26,1
 821 036e EC91      		ld r30,X
 822 0370 2B81      		ldd r18,Y+3
 823 0372 3C81      		ldd r19,Y+4
 824 0374 A901      		movw r20,r18
 825 0376 BC01      		movw r22,r24
 826 0378 8E2F      		mov r24,r30
 827 037a 0E94 0000 		call processUltrasonicCommand
 142:protocol.c    ****          break;
 829               	.LM72:
 830 037e 00C0      		rjmp .L43
 831               	.L46:
 143:protocol.c    ****       case SPEED_GROUP:
 144:protocol.c    **** 			processSpeedCommand(command->cmd,command->payload,response);
 833               	.LM73:
 834 0380 8981      		ldd r24,Y+1
 835 0382 9A81      		ldd r25,Y+2
 836 0384 0396      		adiw r24,3
 837 0386 2981      		ldd r18,Y+1
 838 0388 3A81      		ldd r19,Y+2
 839 038a D901      		movw r26,r18
 840 038c 1196      		adiw r26,1
 841 038e EC91      		ld r30,X
 842 0390 2B81      		ldd r18,Y+3
 843 0392 3C81      		ldd r19,Y+4
 844 0394 A901      		movw r20,r18
 845 0396 BC01      		movw r22,r24
 846 0398 8E2F      		mov r24,r30
 847 039a 0E94 0000 		call processSpeedCommand
 145:protocol.c    ****          break;
 849               	.LM74:
 850 039e 00C0      		rjmp .L43
 851               	.L47:
 146:protocol.c    ****       case STEERING_GROUP:
 147:protocol.c    ****          processSteeringCommand(command->cmd,command->payload,response);
 853               	.LM75:
 854 03a0 8981      		ldd r24,Y+1
 855 03a2 9A81      		ldd r25,Y+2
 856 03a4 0396      		adiw r24,3
 857 03a6 2981      		ldd r18,Y+1
 858 03a8 3A81      		ldd r19,Y+2
 859 03aa D901      		movw r26,r18
 860 03ac 1196      		adiw r26,1
 861 03ae EC91      		ld r30,X
 862 03b0 2B81      		ldd r18,Y+3
 863 03b2 3C81      		ldd r19,Y+4
 864 03b4 A901      		movw r20,r18
 865 03b6 BC01      		movw r22,r24
 866 03b8 8E2F      		mov r24,r30
 867 03ba 0E94 0000 		call processSteeringCommand
 148:protocol.c    ****          break;
 869               	.LM76:
 870 03be 00C0      		rjmp .L43
 871               	.L48:
 149:protocol.c    ****       case FNR_GROUP:
 150:protocol.c    **** 			processFNRCommand(command->cmd,command->payload,response);
 873               	.LM77:
 874 03c0 8981      		ldd r24,Y+1
 875 03c2 9A81      		ldd r25,Y+2
 876 03c4 0396      		adiw r24,3
 877 03c6 2981      		ldd r18,Y+1
 878 03c8 3A81      		ldd r19,Y+2
 879 03ca D901      		movw r26,r18
 880 03cc 1196      		adiw r26,1
 881 03ce EC91      		ld r30,X
 882 03d0 2B81      		ldd r18,Y+3
 883 03d2 3C81      		ldd r19,Y+4
 884 03d4 A901      		movw r20,r18
 885 03d6 BC01      		movw r22,r24
 886 03d8 8E2F      		mov r24,r30
 887 03da 0E94 0000 		call processFNRCommand
 151:protocol.c    ****          break;
 889               	.LM78:
 890 03de 00C0      		rjmp .L43
 891               	.L50:
 152:protocol.c    ****       case BRAKES_GROUP:
 153:protocol.c    ****          /*do brakes things*/
 154:protocol.c    ****          break;
 155:protocol.c    ****       case BATTERY_GROUP:
 156:protocol.c    ****          processBatteryCommand(command->cmd,command->payload,response);
 893               	.LM79:
 894 03e0 8981      		ldd r24,Y+1
 895 03e2 9A81      		ldd r25,Y+2
 896 03e4 0396      		adiw r24,3
 897 03e6 2981      		ldd r18,Y+1
 898 03e8 3A81      		ldd r19,Y+2
 899 03ea D901      		movw r26,r18
 900 03ec 1196      		adiw r26,1
 901 03ee EC91      		ld r30,X
 902 03f0 2B81      		ldd r18,Y+3
 903 03f2 3C81      		ldd r19,Y+4
 904 03f4 A901      		movw r20,r18
 905 03f6 BC01      		movw r22,r24
 906 03f8 8E2F      		mov r24,r30
 907 03fa 0E94 0000 		call processBatteryCommand
 157:protocol.c    ****          break;
 909               	.LM80:
 910 03fe 00C0      		rjmp .L43
 911               	.L51:
 158:protocol.c    ****       case LIGHTS_GROUP:
 159:protocol.c    **** 	      processLightCommand(command->cmd,command->payload,response);
 913               	.LM81:
 914 0400 8981      		ldd r24,Y+1
 915 0402 9A81      		ldd r25,Y+2
 916 0404 0396      		adiw r24,3
 917 0406 2981      		ldd r18,Y+1
 918 0408 3A81      		ldd r19,Y+2
 919 040a D901      		movw r26,r18
 920 040c 1196      		adiw r26,1
 921 040e EC91      		ld r30,X
 922 0410 2B81      		ldd r18,Y+3
 923 0412 3C81      		ldd r19,Y+4
 924 0414 A901      		movw r20,r18
 925 0416 BC01      		movw r22,r24
 926 0418 8E2F      		mov r24,r30
 927 041a 0E94 0000 		call processLightCommand
 160:protocol.c    ****          break;
 929               	.LM82:
 930 041e 00C0      		rjmp .L43
 931               	.L54:
 161:protocol.c    ****       case ERROR_GROUP:
 162:protocol.c    ****          /*do error things*/
 163:protocol.c    ****          break;
 933               	.LM83:
 934 0420 0000      		nop
 935               	.L43:
 164:protocol.c    ****    }
 165:protocol.c    ****    //return a dummy success for now
 166:protocol.c    ****    return 1;
 937               	.LM84:
 938 0422 81E0      		ldi r24,lo8(1)
 939               	/* epilogue start */
 167:protocol.c    **** }
 941               	.LM85:
 942 0424 0F90      		pop __tmp_reg__
 943 0426 0F90      		pop __tmp_reg__
 944 0428 0F90      		pop __tmp_reg__
 945 042a 0F90      		pop __tmp_reg__
 946 042c DF91      		pop r29
 947 042e CF91      		pop r28
 948 0430 0895      		ret
 950               	.Lscope9:
 952               		.stabd	78,0,0
 954               	.Letext0:
 955               		.ident	"GCC: (GNU) 4.9.0"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 protocol.c
     /tmp/ccA3XaQ1.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccA3XaQ1.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccA3XaQ1.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccA3XaQ1.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccA3XaQ1.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccA3XaQ1.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccA3XaQ1.s:70     .text:0000000000000000 commandIntegCheck
     /tmp/ccA3XaQ1.s:108    .text:000000000000001c processUltrasonicCommand
     /tmp/ccA3XaQ1.s:210    .text:000000000000009c processSpeedCommand
     /tmp/ccA3XaQ1.s:294    .text:00000000000000fa processSteeringCommand
     /tmp/ccA3XaQ1.s:435    .text:00000000000001b4 processFNRCommand
     /tmp/ccA3XaQ1.s:519    .text:0000000000000212 processBrakeCommand
     /tmp/ccA3XaQ1.s:597    .text:0000000000000268 processBatteryCommand
     /tmp/ccA3XaQ1.s:673    .text:00000000000002ba processLightCommand
     /tmp/ccA3XaQ1.s:742    .text:0000000000000306 processCommand

UNDEFINED SYMBOLS
getAllSensors
getCertainSensor
getSensorGroup
getSpeed
setSpeed
setAngle
getAngle
getDesiredAngle
changePID
setLimits
setFNR
getFNR
setBrake
getBrake
getBatteryVoltage
getSteeringVoltage
setLight
__tablejump2__
