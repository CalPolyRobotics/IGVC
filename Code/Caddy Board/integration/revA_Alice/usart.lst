   1               		.file	"usart.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 107               	.global	USART_Init
 109               	USART_Init:
 110               		.stabd	46,0,0
   1:usart.c       **** /***************************
   2:usart.c       **** *
   3:usart.c       **** * Filename: usart.cpp
   4:usart.c       **** *
   5:usart.c       **** * Description: Provides print methods for various
   6:usart.c       **** *  datatypes using USART.
   7:usart.c       **** *
   8:usart.c       **** * Authors: Doug Gallatin and Jason Schray
   9:usart.c       **** * Edited by: Tim Peters & James Humphrey
  10:usart.c       **** *
  11:usart.c       **** ***************************/
  12:usart.c       **** 
  13:usart.c       **** #include "FreeRTOS.h"
  14:usart.c       **** #include "semphr.h" 
  15:usart.c       **** #include "queue.h"
  16:usart.c       **** #include "protocol.h"
  17:usart.c       **** 
  18:usart.c       **** #include <stdlib.h>
  19:usart.c       **** #include <stdint.h>
  20:usart.c       **** #include <avr/io.h>
  21:usart.c       **** 
  22:usart.c       **** 
  23:usart.c       **** #include "usart.h"
  24:usart.c       **** 
  25:usart.c       **** xQueueHandle USART_WriteQueue;
  26:usart.c       **** xQueueHandle USART_ReadQueue;
  27:usart.c       **** xQueueHandle USART_WriteQueueLog;
  28:usart.c       **** 
  29:usart.c       **** 
  30:usart.c       **** 
  31:usart.c       **** /************************************
  32:usart.c       **** * Procedure: usart_init
  33:usart.c       **** *  
  34:usart.c       **** * Description: Initializes the USART module with 
  35:usart.c       **** *  the specified baud rate and clk speed.
  36:usart.c       **** *
  37:usart.c       **** * Param buadin: The desired Baud rate.
  38:usart.c       **** * Param clk_seedin: The clk speed of the ATmega328p
  39:usart.c       **** ************************************/
  40:usart.c       **** void USART_Init(uint16_t baudin, uint32_t clk_speedin) {
 112               	.LM0:
 113               	.LFBB1:
 114 0000 EF92      		push r14
 115 0002 FF92      		push r15
 116 0004 0F93      		push r16
 117 0006 1F93      		push r17
 118 0008 DF93      		push r29
 119 000a CF93      		push r28
 120 000c CDB7      		in r28,__SP_L__
 121 000e DEB7      		in r29,__SP_H__
 122 0010 2A97      		sbiw r28,10
 123 0012 0FB6      		in __tmp_reg__,__SREG__
 124 0014 F894      		cli
 125 0016 DEBF      		out __SP_H__,r29
 126 0018 0FBE      		out __SREG__,__tmp_reg__
 127 001a CDBF      		out __SP_L__,r28
 128               	/* prologue: function */
 129               	/* frame size = 10 */
 130 001c 9E83      		std Y+6,r25
 131 001e 8D83      		std Y+5,r24
 132 0020 4F83      		std Y+7,r20
 133 0022 5887      		std Y+8,r21
 134 0024 6987      		std Y+9,r22
 135 0026 7A87      		std Y+10,r23
  41:usart.c       ****     USART_WriteQueue = xQueueCreate(64,sizeof(uint8_t));
 137               	.LM1:
 138 0028 80E4      		ldi r24,lo8(64)
 139 002a 61E0      		ldi r22,lo8(1)
 140 002c 40E0      		ldi r20,lo8(0)
 141 002e 0E94 0000 		call xQueueGenericCreate
 142 0032 9093 0000 		sts (USART_WriteQueue)+1,r25
 143 0036 8093 0000 		sts USART_WriteQueue,r24
  42:usart.c       ****     USART_ReadQueue = xQueueCreate(8,sizeof(uint8_t));
 145               	.LM2:
 146 003a 88E0      		ldi r24,lo8(8)
 147 003c 61E0      		ldi r22,lo8(1)
 148 003e 40E0      		ldi r20,lo8(0)
 149 0040 0E94 0000 		call xQueueGenericCreate
 150 0044 9093 0000 		sts (USART_ReadQueue)+1,r25
 151 0048 8093 0000 		sts USART_ReadQueue,r24
  43:usart.c       **** 
  44:usart.c       ****     uint32_t ubrr = clk_speedin/(16UL)/baudin-1;
 153               	.LM3:
 154 004c 8F81      		ldd r24,Y+7
 155 004e 9885      		ldd r25,Y+8
 156 0050 A985      		ldd r26,Y+9
 157 0052 BA85      		ldd r27,Y+10
 158 0054 7C01      		movw r14,r24
 159 0056 8D01      		movw r16,r26
 160 0058 6894      		set
 161 005a 13F8      		bld __zero_reg__,4-1
 162 005c 1695      	1:	lsr r17
 163 005e 0795      		ror r16
 164 0060 F794      		ror r15
 165 0062 E794      		ror r14
 166 0064 1694      		lsr __zero_reg__
 167 0066 01F4      		brne 1b
 168 0068 8D81      		ldd r24,Y+5
 169 006a 9E81      		ldd r25,Y+6
 170 006c 9C01      		movw r18,r24
 171 006e 40E0      		ldi r20,lo8(0)
 172 0070 50E0      		ldi r21,hi8(0)
 173 0072 C801      		movw r24,r16
 174 0074 B701      		movw r22,r14
 175 0076 0E94 0000 		call __udivmodsi4
 176 007a DA01      		movw r26,r20
 177 007c C901      		movw r24,r18
 178 007e 0197      		sbiw r24,1
 179 0080 A109      		sbc r26,__zero_reg__
 180 0082 B109      		sbc r27,__zero_reg__
 181 0084 8983      		std Y+1,r24
 182 0086 9A83      		std Y+2,r25
 183 0088 AB83      		std Y+3,r26
 184 008a BC83      		std Y+4,r27
  45:usart.c       ****     UBRR1H = (unsigned char)(ubrr>>8) ;// & 0x7F;
 186               	.LM4:
 187 008c EDEC      		ldi r30,lo8(205)
 188 008e F0E0      		ldi r31,hi8(205)
 189 0090 8981      		ldd r24,Y+1
 190 0092 9A81      		ldd r25,Y+2
 191 0094 AB81      		ldd r26,Y+3
 192 0096 BC81      		ldd r27,Y+4
 193 0098 892F      		mov r24,r25
 194 009a 9A2F      		mov r25,r26
 195 009c AB2F      		mov r26,r27
 196 009e BB27      		clr r27
 197 00a0 8083      		st Z,r24
  46:usart.c       ****     UBRR1L = (unsigned char)ubrr;
 199               	.LM5:
 200 00a2 ECEC      		ldi r30,lo8(204)
 201 00a4 F0E0      		ldi r31,hi8(204)
 202 00a6 8981      		ldd r24,Y+1
 203 00a8 8083      		st Z,r24
  47:usart.c       ****     
  48:usart.c       ****     //UBRR0H = 0; //115200
  49:usart.c       ****     //UBRR0L = 8;
  50:usart.c       **** 
  51:usart.c       ****     /* Enable receiver and transmitter */
  52:usart.c       ****     UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
 205               	.LM6:
 206 00aa E9EC      		ldi r30,lo8(201)
 207 00ac F0E0      		ldi r31,hi8(201)
 208 00ae 88E9      		ldi r24,lo8(-104)
 209 00b0 8083      		st Z,r24
  53:usart.c       ****     /* Set frame format: 8data, 1stop bit */
  54:usart.c       ****     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
 211               	.LM7:
 212 00b2 EAEC      		ldi r30,lo8(202)
 213 00b4 F0E0      		ldi r31,hi8(202)
 214 00b6 86E0      		ldi r24,lo8(6)
 215 00b8 8083      		st Z,r24
  55:usart.c       **** 	// clear U2X0 for Synchronous operation
  56:usart.c       ****     UCSR1A &= ~(1<<U2X1);
 217               	.LM8:
 218 00ba A8EC      		ldi r26,lo8(200)
 219 00bc B0E0      		ldi r27,hi8(200)
 220 00be E8EC      		ldi r30,lo8(200)
 221 00c0 F0E0      		ldi r31,hi8(200)
 222 00c2 8081      		ld r24,Z
 223 00c4 8D7F      		andi r24,lo8(-3)
 224 00c6 8C93      		st X,r24
 225               	/* epilogue start */
  57:usart.c       **** 
  58:usart.c       ****     //UCSR0B |= (1<<UDRIE0);
  59:usart.c       **** 
  60:usart.c       **** 
  61:usart.c       ****     //UART0 Logging
  62:usart.c       **** 
  63:usart.c       ****     /*USART_WriteQueueLog = xQueueCreate(32,sizeof(uint8_t));
  64:usart.c       **** 
  65:usart.c       ****     ubrr = clk_speedin/(16UL)/baudin-1;
  66:usart.c       ****     UBRR0H = (unsigned char)(ubrr>>8) ;// & 0x7F;
  67:usart.c       ****     UBRR0L = (unsigned char)ubrr;
  68:usart.c       ****     
  69:usart.c       ****     //UBRR0H = 0; //115200
  70:usart.c       ****     //UBRR0L = 8;
  71:usart.c       **** 
  72:usart.c       ****     /* Enable receiver and transmitter */
  73:usart.c       ****     //UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  74:usart.c       ****     /* Set frame format: 8data, 1stop bit */
  75:usart.c       ****     //UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  76:usart.c       ****     // clear U2X0 for Synchronous operation
  77:usart.c       ****     //UCSR0A &= ~(1<<U2X0);*/
  78:usart.c       **** 
  79:usart.c       **** }
 227               	.LM9:
 228 00c8 2A96      		adiw r28,10
 229 00ca 0FB6      		in __tmp_reg__,__SREG__
 230 00cc F894      		cli
 231 00ce DEBF      		out __SP_H__,r29
 232 00d0 0FBE      		out __SREG__,__tmp_reg__
 233 00d2 CDBF      		out __SP_L__,r28
 234 00d4 CF91      		pop r28
 235 00d6 DF91      		pop r29
 236 00d8 1F91      		pop r17
 237 00da 0F91      		pop r16
 238 00dc FF90      		pop r15
 239 00de EF90      		pop r14
 240 00e0 0895      		ret
 245               	.Lscope1:
 247               		.stabd	78,0,0
 250               	.global	USART_Write
 252               	USART_Write:
 253               		.stabd	46,0,0
  80:usart.c       **** 
  81:usart.c       **** /*the send function will put 8bits on the trans line. */
  82:usart.c       **** void USART_Write(uint8_t data) {
 255               	.LM10:
 256               	.LFBB2:
 257 00e2 DF93      		push r29
 258 00e4 CF93      		push r28
 259 00e6 0F92      		push __tmp_reg__
 260 00e8 CDB7      		in r28,__SP_L__
 261 00ea DEB7      		in r29,__SP_H__
 262               	/* prologue: function */
 263               	/* frame size = 1 */
 264 00ec 8983      		std Y+1,r24
 265               	.L4:
  83:usart.c       **** 		/* Wait for empty transmit buffer */
  84:usart.c       **** 		while ( !( UCSR0A & (1<<UDRE0)) )
 267               	.LM11:
 268 00ee E0EC      		ldi r30,lo8(192)
 269 00f0 F0E0      		ldi r31,hi8(192)
 270 00f2 8081      		ld r24,Z
 271 00f4 882F      		mov r24,r24
 272 00f6 90E0      		ldi r25,lo8(0)
 273 00f8 8072      		andi r24,lo8(32)
 274 00fa 9070      		andi r25,hi8(32)
 275 00fc 0097      		sbiw r24,0
 276 00fe 01F0      		breq .L4
  85:usart.c       **** 		;
  86:usart.c       **** 		/* Put data into buffer, sends the data */
  87:usart.c       **** 		UDR0 = data;
 278               	.LM12:
 279 0100 E6EC      		ldi r30,lo8(198)
 280 0102 F0E0      		ldi r31,hi8(198)
 281 0104 8981      		ldd r24,Y+1
 282 0106 8083      		st Z,r24
 283               	/* epilogue start */
  88:usart.c       **** }
 285               	.LM13:
 286 0108 0F90      		pop __tmp_reg__
 287 010a CF91      		pop r28
 288 010c DF91      		pop r29
 289 010e 0895      		ret
 291               	.Lscope2:
 293               		.stabd	78,0,0
 296               	.global	USART_Write_Unprotected
 298               	USART_Write_Unprotected:
 299               		.stabd	46,0,0
  89:usart.c       **** 
  90:usart.c       **** /*the send function will put 8bits on the trans line. */
  91:usart.c       **** void USART_Write_Unprotected(uint8_t data) {
 301               	.LM14:
 302               	.LFBB3:
 303 0110 DF93      		push r29
 304 0112 CF93      		push r28
 305 0114 0F92      		push __tmp_reg__
 306 0116 CDB7      		in r28,__SP_L__
 307 0118 DEB7      		in r29,__SP_H__
 308               	/* prologue: function */
 309               	/* frame size = 1 */
 310 011a 8983      		std Y+1,r24
 311               	.L7:
  92:usart.c       **** 	/* Wait for empty transmit buffer */
  93:usart.c       **** 	while ( !( UCSR0A & (1<<UDRE0)) )
 313               	.LM15:
 314 011c E0EC      		ldi r30,lo8(192)
 315 011e F0E0      		ldi r31,hi8(192)
 316 0120 8081      		ld r24,Z
 317 0122 882F      		mov r24,r24
 318 0124 90E0      		ldi r25,lo8(0)
 319 0126 8072      		andi r24,lo8(32)
 320 0128 9070      		andi r25,hi8(32)
 321 012a 0097      		sbiw r24,0
 322 012c 01F0      		breq .L7
  94:usart.c       **** 	;
  95:usart.c       **** 	/* Put data into buffer, sends the data */
  96:usart.c       **** 	UDR0 = data;
 324               	.LM16:
 325 012e E6EC      		ldi r30,lo8(198)
 326 0130 F0E0      		ldi r31,hi8(198)
 327 0132 8981      		ldd r24,Y+1
 328 0134 8083      		st Z,r24
 329               	/* epilogue start */
  97:usart.c       **** }
 331               	.LM17:
 332 0136 0F90      		pop __tmp_reg__
 333 0138 CF91      		pop r28
 334 013a DF91      		pop r29
 335 013c 0895      		ret
 337               	.Lscope3:
 339               		.stabd	78,0,0
 341               	.global	USART_Read
 343               	USART_Read:
 344               		.stabd	46,0,0
  98:usart.c       **** 
  99:usart.c       **** /* the receive data function. Note that this a blocking call
 100:usart.c       **** Therefore you may not get control back after this is called 
 101:usart.c       **** until a much later time. It may be helpful to use the 
 102:usart.c       **** istheredata() function to check before calling this function
 103:usart.c       ****         @return 8bit data packet from sender
 104:usart.c       **** */
 105:usart.c       **** uint8_t USART_Read(void) {
 346               	.LM18:
 347               	.LFBB4:
 348 013e DF93      		push r29
 349 0140 CF93      		push r28
 350 0142 CDB7      		in r28,__SP_L__
 351 0144 DEB7      		in r29,__SP_H__
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	.L10:
 106:usart.c       ****     /* Wait for data to be received */
 107:usart.c       ****     while ( !(UCSR0A & (1<<RXC0)) )
 356               	.LM19:
 357 0146 E0EC      		ldi r30,lo8(192)
 358 0148 F0E0      		ldi r31,hi8(192)
 359 014a 8081      		ld r24,Z
 360 014c 8823      		tst r24
 361 014e 04F4      		brge .L10
 108:usart.c       ****         ;
 109:usart.c       ****     /* Get and return received data from buffer */
 110:usart.c       ****     return UDR0;
 363               	.LM20:
 364 0150 E6EC      		ldi r30,lo8(198)
 365 0152 F0E0      		ldi r31,hi8(198)
 366 0154 8081      		ld r24,Z
 367               	/* epilogue start */
 111:usart.c       **** }
 369               	.LM21:
 370 0156 CF91      		pop r28
 371 0158 DF91      		pop r29
 372 015a 0895      		ret
 374               	.Lscope4:
 376               		.stabd	78,0,0
 379               	.global	ISR
 381               	ISR:
 382               		.stabd	46,0,0
 112:usart.c       **** 
 113:usart.c       **** 
 114:usart.c       **** ISR(USART1_RX_vect){
 384               	.LM22:
 385               	.LFBB5:
 386 015c DF93      		push r29
 387 015e CF93      		push r28
 388 0160 00D0      		rcall .
 389 0162 0F92      		push __tmp_reg__
 390 0164 CDB7      		in r28,__SP_L__
 391 0166 DEB7      		in r29,__SP_H__
 392               	/* prologue: function */
 393               	/* frame size = 4 */
 394 0168 9A83      		std Y+2,r25
 395 016a 8983      		std Y+1,r24
 115:usart.c       ****     //uint8_t data;
 116:usart.c       ****     //data = UDR1;
 117:usart.c       ****     PORTB = 0xFF;
 397               	.LM23:
 398 016c E5E2      		ldi r30,lo8(37)
 399 016e F0E0      		ldi r31,hi8(37)
 400 0170 8FEF      		ldi r24,lo8(-1)
 401 0172 8083      		st Z,r24
 402               	/* epilogue start */
 118:usart.c       ****     //xQueueSendToBackFromISR(USART_ReadQueue,&data,NULL);
 119:usart.c       **** }
 404               	.LM24:
 405 0174 0F90      		pop __tmp_reg__
 406 0176 0F90      		pop __tmp_reg__
 407 0178 0F90      		pop __tmp_reg__
 408 017a 0F90      		pop __tmp_reg__
 409 017c CF91      		pop r28
 410 017e DF91      		pop r29
 411 0180 0895      		ret
 413               	.Lscope5:
 415               		.stabd	78,0,0
 418               	.global	USART_AddToQueue
 420               	USART_AddToQueue:
 421               		.stabd	46,0,0
 120:usart.c       **** 
 121:usart.c       **** void USART_AddToQueue(uint8_t data){
 423               	.LM25:
 424               	.LFBB6:
 425 0182 DF93      		push r29
 426 0184 CF93      		push r28
 427 0186 0F92      		push __tmp_reg__
 428 0188 CDB7      		in r28,__SP_L__
 429 018a DEB7      		in r29,__SP_H__
 430               	/* prologue: function */
 431               	/* frame size = 1 */
 432 018c 8983      		std Y+1,r24
 122:usart.c       ****     
 123:usart.c       ****     xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);
 434               	.LM26:
 435 018e 8091 0000 		lds r24,USART_WriteQueue
 436 0192 9091 0000 		lds r25,(USART_WriteQueue)+1
 437 0196 9E01      		movw r18,r28
 438 0198 2F5F      		subi r18,lo8(-(1))
 439 019a 3F4F      		sbci r19,hi8(-(1))
 440 019c B901      		movw r22,r18
 441 019e 4FEF      		ldi r20,lo8(-1)
 442 01a0 5FEF      		ldi r21,hi8(-1)
 443 01a2 20E0      		ldi r18,lo8(0)
 444 01a4 0E94 0000 		call xQueueGenericSend
 445               	/* epilogue start */
 124:usart.c       **** 
 125:usart.c       **** }
 447               	.LM27:
 448 01a8 0F90      		pop __tmp_reg__
 449 01aa CF91      		pop r28
 450 01ac DF91      		pop r29
 451 01ae 0895      		ret
 453               	.Lscope6:
 455               		.stabd	78,0,0
 458               	.global	USART_TransmitString
 460               	USART_TransmitString:
 461               		.stabd	46,0,0
 126:usart.c       **** 
 127:usart.c       **** void USART_TransmitString(char* str){
 463               	.LM28:
 464               	.LFBB7:
 465 01b0 DF93      		push r29
 466 01b2 CF93      		push r28
 467 01b4 0F92      		push __tmp_reg__
 468 01b6 0F92      		push __tmp_reg__
 469 01b8 CDB7      		in r28,__SP_L__
 470 01ba DEB7      		in r29,__SP_H__
 471               	/* prologue: function */
 472               	/* frame size = 2 */
 473 01bc 9A83      		std Y+2,r25
 474 01be 8983      		std Y+1,r24
 475 01c0 00C0      		rjmp .L17
 476               	.L18:
 128:usart.c       ****     while(*str) {
 129:usart.c       ****         USART_AddToQueue(*str);
 478               	.LM29:
 479 01c2 E981      		ldd r30,Y+1
 480 01c4 FA81      		ldd r31,Y+2
 481 01c6 8081      		ld r24,Z
 482 01c8 0E94 0000 		call USART_AddToQueue
 130:usart.c       ****         str++;
 484               	.LM30:
 485 01cc 8981      		ldd r24,Y+1
 486 01ce 9A81      		ldd r25,Y+2
 487 01d0 0196      		adiw r24,1
 488 01d2 9A83      		std Y+2,r25
 489 01d4 8983      		std Y+1,r24
 490               	.L17:
 128:usart.c       ****     while(*str) {
 492               	.LM31:
 493 01d6 E981      		ldd r30,Y+1
 494 01d8 FA81      		ldd r31,Y+2
 495 01da 8081      		ld r24,Z
 496 01dc 8823      		tst r24
 497 01de 01F4      		brne .L18
 498               	/* epilogue start */
 131:usart.c       ****     }
 132:usart.c       **** }
 500               	.LM32:
 501 01e0 0F90      		pop __tmp_reg__
 502 01e2 0F90      		pop __tmp_reg__
 503 01e4 CF91      		pop r28
 504 01e6 DF91      		pop r29
 505 01e8 0895      		ret
 507               	.Lscope7:
 509               		.stabd	78,0,0
 512               	.global	vTaskUSARTWrite
 514               	vTaskUSARTWrite:
 515               		.stabd	46,0,0
 133:usart.c       **** 
 134:usart.c       **** void vTaskUSARTWrite(void *pvParameters){
 517               	.LM33:
 518               	.LFBB8:
 519 01ea DF93      		push r29
 520 01ec CF93      		push r28
 521 01ee 00D0      		rcall .
 522 01f0 CDB7      		in r28,__SP_L__
 523 01f2 DEB7      		in r29,__SP_H__
 524               	/* prologue: function */
 525               	/* frame size = 3 */
 526 01f4 9B83      		std Y+3,r25
 527 01f6 8A83      		std Y+2,r24
 528               	.L22:
 135:usart.c       ****     uint8_t data;
 136:usart.c       ****     while(1){
 137:usart.c       ****     xQueueReceive(USART_WriteQueue,&data,portMAX_DELAY);
 530               	.LM34:
 531 01f8 8091 0000 		lds r24,USART_WriteQueue
 532 01fc 9091 0000 		lds r25,(USART_WriteQueue)+1
 533 0200 9E01      		movw r18,r28
 534 0202 2F5F      		subi r18,lo8(-(1))
 535 0204 3F4F      		sbci r19,hi8(-(1))
 536 0206 B901      		movw r22,r18
 537 0208 4FEF      		ldi r20,lo8(-1)
 538 020a 5FEF      		ldi r21,hi8(-1)
 539 020c 20E0      		ldi r18,lo8(0)
 540 020e 0E94 0000 		call xQueueGenericReceive
 541               	.L21:
 138:usart.c       **** 
 139:usart.c       ****         while(!(UCSR1A & (1<<UDRE1)));
 543               	.LM35:
 544 0212 E8EC      		ldi r30,lo8(200)
 545 0214 F0E0      		ldi r31,hi8(200)
 546 0216 8081      		ld r24,Z
 547 0218 882F      		mov r24,r24
 548 021a 90E0      		ldi r25,lo8(0)
 549 021c 8072      		andi r24,lo8(32)
 550 021e 9070      		andi r25,hi8(32)
 551 0220 0097      		sbiw r24,0
 552 0222 01F0      		breq .L21
 140:usart.c       ****         UDR1 = data;
 554               	.LM36:
 555 0224 EEEC      		ldi r30,lo8(206)
 556 0226 F0E0      		ldi r31,hi8(206)
 557 0228 8981      		ldd r24,Y+1
 558 022a 8083      		st Z,r24
 559 022c 00C0      		rjmp .L22
 564               	.Lscope8:
 566               		.stabd	78,0,0
 569               	.global	USART_LogChar
 571               	USART_LogChar:
 572               		.stabd	46,0,0
 141:usart.c       **** 
 142:usart.c       ****     }
 143:usart.c       **** }
 144:usart.c       **** 
 145:usart.c       **** void USART_LogChar(uint8_t data){
 574               	.LM37:
 575               	.LFBB9:
 576 022e DF93      		push r29
 577 0230 CF93      		push r28
 578 0232 0F92      		push __tmp_reg__
 579 0234 CDB7      		in r28,__SP_L__
 580 0236 DEB7      		in r29,__SP_H__
 581               	/* prologue: function */
 582               	/* frame size = 1 */
 583 0238 8983      		std Y+1,r24
 146:usart.c       ****     xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
 585               	.LM38:
 586 023a 8091 0000 		lds r24,USART_WriteQueueLog
 587 023e 9091 0000 		lds r25,(USART_WriteQueueLog)+1
 588 0242 9E01      		movw r18,r28
 589 0244 2F5F      		subi r18,lo8(-(1))
 590 0246 3F4F      		sbci r19,hi8(-(1))
 591 0248 B901      		movw r22,r18
 592 024a 4FEF      		ldi r20,lo8(-1)
 593 024c 5FEF      		ldi r21,hi8(-1)
 594 024e 20E0      		ldi r18,lo8(0)
 595 0250 0E94 0000 		call xQueueGenericSend
 596               	/* epilogue start */
 147:usart.c       **** }
 598               	.LM39:
 599 0254 0F90      		pop __tmp_reg__
 600 0256 CF91      		pop r28
 601 0258 DF91      		pop r29
 602 025a 0895      		ret
 604               	.Lscope9:
 606               		.stabd	78,0,0
 609               	.global	USART_LogString
 611               	USART_LogString:
 612               		.stabd	46,0,0
 148:usart.c       **** 
 149:usart.c       **** void USART_LogString(char* str){
 614               	.LM40:
 615               	.LFBB10:
 616 025c DF93      		push r29
 617 025e CF93      		push r28
 618 0260 0F92      		push __tmp_reg__
 619 0262 0F92      		push __tmp_reg__
 620 0264 CDB7      		in r28,__SP_L__
 621 0266 DEB7      		in r29,__SP_H__
 622               	/* prologue: function */
 623               	/* frame size = 2 */
 624 0268 9A83      		std Y+2,r25
 625 026a 8983      		std Y+1,r24
 626 026c 00C0      		rjmp .L27
 627               	.L28:
 150:usart.c       ****     while(*str){
 151:usart.c       ****         USART_LogChar(*str);
 629               	.LM41:
 630 026e E981      		ldd r30,Y+1
 631 0270 FA81      		ldd r31,Y+2
 632 0272 8081      		ld r24,Z
 633 0274 0E94 0000 		call USART_LogChar
 152:usart.c       ****         str++;
 635               	.LM42:
 636 0278 8981      		ldd r24,Y+1
 637 027a 9A81      		ldd r25,Y+2
 638 027c 0196      		adiw r24,1
 639 027e 9A83      		std Y+2,r25
 640 0280 8983      		std Y+1,r24
 641               	.L27:
 150:usart.c       ****     while(*str){
 643               	.LM43:
 644 0282 E981      		ldd r30,Y+1
 645 0284 FA81      		ldd r31,Y+2
 646 0286 8081      		ld r24,Z
 647 0288 8823      		tst r24
 648 028a 01F4      		brne .L28
 649               	/* epilogue start */
 153:usart.c       ****     }
 154:usart.c       **** }
 651               	.LM44:
 652 028c 0F90      		pop __tmp_reg__
 653 028e 0F90      		pop __tmp_reg__
 654 0290 CF91      		pop r28
 655 0292 DF91      		pop r29
 656 0294 0895      		ret
 658               	.Lscope10:
 660               		.stabd	78,0,0
 663               	.global	vTaskUSARTLog
 665               	vTaskUSARTLog:
 666               		.stabd	46,0,0
 155:usart.c       **** 
 156:usart.c       **** void vTaskUSARTLog(void *pvParameters){
 668               	.LM45:
 669               	.LFBB11:
 670 0296 DF93      		push r29
 671 0298 CF93      		push r28
 672 029a 00D0      		rcall .
 673 029c CDB7      		in r28,__SP_L__
 674 029e DEB7      		in r29,__SP_H__
 675               	/* prologue: function */
 676               	/* frame size = 3 */
 677 02a0 9B83      		std Y+3,r25
 678 02a2 8A83      		std Y+2,r24
 679               	.L32:
 157:usart.c       ****     uint8_t data;
 158:usart.c       ****     while(1){
 159:usart.c       ****     xQueueReceive(USART_WriteQueueLog,&data,portMAX_DELAY);
 681               	.LM46:
 682 02a4 8091 0000 		lds r24,USART_WriteQueueLog
 683 02a8 9091 0000 		lds r25,(USART_WriteQueueLog)+1
 684 02ac 9E01      		movw r18,r28
 685 02ae 2F5F      		subi r18,lo8(-(1))
 686 02b0 3F4F      		sbci r19,hi8(-(1))
 687 02b2 B901      		movw r22,r18
 688 02b4 4FEF      		ldi r20,lo8(-1)
 689 02b6 5FEF      		ldi r21,hi8(-1)
 690 02b8 20E0      		ldi r18,lo8(0)
 691 02ba 0E94 0000 		call xQueueGenericReceive
 692               	.L31:
 160:usart.c       **** 
 161:usart.c       ****         while(!(UCSR0A & (1<<UDRE0)));
 694               	.LM47:
 695 02be E0EC      		ldi r30,lo8(192)
 696 02c0 F0E0      		ldi r31,hi8(192)
 697 02c2 8081      		ld r24,Z
 698 02c4 882F      		mov r24,r24
 699 02c6 90E0      		ldi r25,lo8(0)
 700 02c8 8072      		andi r24,lo8(32)
 701 02ca 9070      		andi r25,hi8(32)
 702 02cc 0097      		sbiw r24,0
 703 02ce 01F0      		breq .L31
 162:usart.c       ****         UDR0 = data;
 705               	.LM48:
 706 02d0 E6EC      		ldi r30,lo8(198)
 707 02d2 F0E0      		ldi r31,hi8(198)
 708 02d4 8981      		ldd r24,Y+1
 709 02d6 8083      		st Z,r24
 710 02d8 00C0      		rjmp .L32
 715               	.Lscope11:
 717               		.stabd	78,0,0
 720               	.global	vTaskUSARTRead
 722               	vTaskUSARTRead:
 723               		.stabd	46,0,0
 163:usart.c       **** 
 164:usart.c       ****     }
 165:usart.c       **** 
 166:usart.c       **** }
 167:usart.c       **** 
 168:usart.c       **** void vTaskUSARTRead(void *pvParameters){
 725               	.LM49:
 726               	.LFBB12:
 727 02da DF93      		push r29
 728 02dc CF93      		push r28
 729 02de CDB7      		in r28,__SP_L__
 730 02e0 DEB7      		in r29,__SP_H__
 731 02e2 C655      		subi r28,lo8(-(-86))
 732 02e4 D040      		sbci r29,hi8(-(-86))
 733 02e6 0FB6      		in __tmp_reg__,__SREG__
 734 02e8 F894      		cli
 735 02ea DEBF      		out __SP_H__,r29
 736 02ec 0FBE      		out __SREG__,__tmp_reg__
 737 02ee CDBF      		out __SP_L__,r28
 738               	/* prologue: function */
 739               	/* frame size = 86 */
 740 02f0 FE01      		movw r30,r28
 741 02f2 EB5A      		subi r30,lo8(-(85))
 742 02f4 FF4F      		sbci r31,hi8(-(85))
 743 02f6 9183      		std Z+1,r25
 744 02f8 8083      		st Z,r24
 169:usart.c       **** 
 170:usart.c       ****     char bytesRecieved;
 171:usart.c       ****     uint8_t rxData;
 172:usart.c       ****     uint8_t buffer[8];
 173:usart.c       ****     char size;
 174:usart.c       ****     char groupID;
 175:usart.c       ****     char cmd;
 176:usart.c       ****     unsigned int timeout;
 177:usart.c       **** 
 178:usart.c       ****     PORTB = 0;
 746               	.LM50:
 747 02fa E5E2      		ldi r30,lo8(37)
 748 02fc F0E0      		ldi r31,hi8(37)
 749 02fe 1082      		st Z,__zero_reg__
 750               	.L48:
 179:usart.c       **** 
 180:usart.c       ****     Command command;
 181:usart.c       ****     Response response;
 182:usart.c       ****     while(1){
 183:usart.c       ****         //PORTB = 0;
 184:usart.c       ****         //Get Header
 185:usart.c       ****         bytesRecieved = 0;
 752               	.LM51:
 753 0300 1F82      		std Y+7,__zero_reg__
 186:usart.c       ****         timeout = 0;
 755               	.LM52:
 756 0302 1A82      		std Y+2,__zero_reg__
 757 0304 1982      		std Y+1,__zero_reg__
 758 0306 00C0      		rjmp .L35
 759               	.L38:
 187:usart.c       ****         while(bytesRecieved < 4){
 188:usart.c       ****             //if there is data to be read...
 189:usart.c       ****             if((UCSR1A & (1<<RXC1))){
 761               	.LM53:
 762 0308 E8EC      		ldi r30,lo8(200)
 763 030a F0E0      		ldi r31,hi8(200)
 764 030c 8081      		ld r24,Z
 765 030e 8823      		tst r24
 766 0310 04F4      		brge .L36
 190:usart.c       ****                 rxData = UDR1;
 768               	.LM54:
 769 0312 EEEC      		ldi r30,lo8(206)
 770 0314 F0E0      		ldi r31,hi8(206)
 771 0316 8081      		ld r24,Z
 772 0318 8E83      		std Y+6,r24
 191:usart.c       ****             //if(xQueueReceive(USART_ReadQueue,&rxData,portMAX_DELAY) == pdTRUE){
 192:usart.c       ****                 buffer[bytesRecieved] = rxData;
 774               	.LM55:
 775 031a 8F81      		ldd r24,Y+7
 776 031c 282F      		mov r18,r24
 777 031e 3327      		clr r19
 778 0320 27FD      		sbrc r18,7
 779 0322 3095      		com r19
 780 0324 CE01      		movw r24,r28
 781 0326 0896      		adiw r24,8
 782 0328 FC01      		movw r30,r24
 783 032a E20F      		add r30,r18
 784 032c F31F      		adc r31,r19
 785 032e 8E81      		ldd r24,Y+6
 786 0330 8083      		st Z,r24
 193:usart.c       ****                 //USART_AddToQueue(rxData);
 194:usart.c       ****                 bytesRecieved++;
 788               	.LM56:
 789 0332 8F81      		ldd r24,Y+7
 790 0334 8F5F      		subi r24,lo8(-(1))
 791 0336 8F83      		std Y+7,r24
 792 0338 00C0      		rjmp .L37
 793               	.L36:
 195:usart.c       ****                 //timeout = 0;
 196:usart.c       ****             } else {
 197:usart.c       ****                 timeout++;
 795               	.LM57:
 796 033a 8981      		ldd r24,Y+1
 797 033c 9A81      		ldd r25,Y+2
 798 033e 0196      		adiw r24,1
 799 0340 9A83      		std Y+2,r25
 800 0342 8983      		std Y+1,r24
 801               	.L37:
 198:usart.c       ****             }
 199:usart.c       ****             if(timeout > 50000){
 803               	.LM58:
 804 0344 8981      		ldd r24,Y+1
 805 0346 9A81      		ldd r25,Y+2
 806 0348 23EC      		ldi r18,hi8(-15535)
 807 034a 8135      		cpi r24,lo8(-15535)
 808 034c 9207      		cpc r25,r18
 809 034e 00F0      		brlo .L35
 200:usart.c       ****                 timeout = 0;
 811               	.LM59:
 812 0350 1A82      		std Y+2,__zero_reg__
 813 0352 1982      		std Y+1,__zero_reg__
 201:usart.c       ****                 bytesRecieved = 0;
 815               	.LM60:
 816 0354 1F82      		std Y+7,__zero_reg__
 817               	.L35:
 187:usart.c       ****         while(bytesRecieved < 4){
 819               	.LM61:
 820 0356 8F81      		ldd r24,Y+7
 821 0358 8430      		cpi r24,lo8(4)
 822 035a 04F0      		brlt .L38
 202:usart.c       ****             }
 203:usart.c       ****         }
 204:usart.c       ****         //PORTB = 0;
 205:usart.c       ****         if(calcChecksum(buffer,3) != buffer[3]){
 824               	.LM62:
 825 035c CE01      		movw r24,r28
 826 035e 0896      		adiw r24,8
 827 0360 63E0      		ldi r22,lo8(3)
 828 0362 0E94 0000 		call calcChecksum
 829 0366 982F      		mov r25,r24
 830 0368 8B85      		ldd r24,Y+11
 831 036a 9817      		cp r25,r24
 832 036c 01F0      		breq .L39
 206:usart.c       ****             sendNACK();
 834               	.LM63:
 835 036e 0E94 0000 		call sendNACK
 836 0372 00C0      		rjmp .L48
 837               	.L39:
 207:usart.c       ****         } else {
 208:usart.c       ****             sendACK();
 839               	.LM64:
 840 0374 0E94 0000 		call sendACK
 209:usart.c       ****             bytesRecieved = 0;
 842               	.LM65:
 843 0378 1F82      		std Y+7,__zero_reg__
 210:usart.c       ****             command.groupID = buffer[0];
 845               	.LM66:
 846 037a 8885      		ldd r24,Y+8
 847 037c 888B      		std Y+16,r24
 211:usart.c       ****             command.cmd = buffer[1];
 849               	.LM67:
 850 037e 8985      		ldd r24,Y+9
 851 0380 898B      		std Y+17,r24
 212:usart.c       ****             command.crc = buffer[3];
 853               	.LM68:
 854 0382 8B85      		ldd r24,Y+11
 855 0384 8A8B      		std Y+18,r24
 213:usart.c       ****             size = buffer[2];
 857               	.LM69:
 858 0386 8A85      		ldd r24,Y+10
 859 0388 8D83      		std Y+5,r24
 214:usart.c       ****             timeout = 0;
 861               	.LM70:
 862 038a 1A82      		std Y+2,__zero_reg__
 863 038c 1982      		std Y+1,__zero_reg__
 215:usart.c       ****             if(size != 0){
 865               	.LM71:
 866 038e 8D81      		ldd r24,Y+5
 867 0390 8823      		tst r24
 868 0392 01F4      		brne .+2
 869 0394 00C0      		rjmp .L41
 870 0396 00C0      		rjmp .L42
 871               	.L45:
 216:usart.c       ****                 while(1) {
 217:usart.c       ****                     while((bytesRecieved < size+1) && (timeout < 50)){  //1 for crc
 218:usart.c       ****                         if(UCSR1A & (1<<RXC1)){
 873               	.LM72:
 874 0398 E8EC      		ldi r30,lo8(200)
 875 039a F0E0      		ldi r31,hi8(200)
 876 039c 8081      		ld r24,Z
 877 039e 8823      		tst r24
 878 03a0 04F4      		brge .L43
 219:usart.c       ****                             rxData = UDR1;
 880               	.LM73:
 881 03a2 EEEC      		ldi r30,lo8(206)
 882 03a4 F0E0      		ldi r31,hi8(206)
 883 03a6 8081      		ld r24,Z
 884 03a8 8E83      		std Y+6,r24
 220:usart.c       **** 
 221:usart.c       ****                             //PORTB = 0xFF;
 222:usart.c       ****                         //if(xQueueReceive(USART_ReadQueue,&rxData,portMAX_DELAY) == pdTRUE){
 223:usart.c       ****                             buffer[bytesRecieved] = rxData;
 886               	.LM74:
 887 03aa 8F81      		ldd r24,Y+7
 888 03ac 282F      		mov r18,r24
 889 03ae 3327      		clr r19
 890 03b0 27FD      		sbrc r18,7
 891 03b2 3095      		com r19
 892 03b4 CE01      		movw r24,r28
 893 03b6 0896      		adiw r24,8
 894 03b8 FC01      		movw r30,r24
 895 03ba E20F      		add r30,r18
 896 03bc F31F      		adc r31,r19
 897 03be 8E81      		ldd r24,Y+6
 898 03c0 8083      		st Z,r24
 224:usart.c       ****                             bytesRecieved++;
 900               	.LM75:
 901 03c2 8F81      		ldd r24,Y+7
 902 03c4 8F5F      		subi r24,lo8(-(1))
 903 03c6 8F83      		std Y+7,r24
 904 03c8 00C0      		rjmp .L42
 905               	.L43:
 225:usart.c       ****                         } else {
 226:usart.c       ****                             //timeout++;
 227:usart.c       ****                             timeout = 1;
 907               	.LM76:
 908 03ca 81E0      		ldi r24,lo8(1)
 909 03cc 90E0      		ldi r25,hi8(1)
 910 03ce 9A83      		std Y+2,r25
 911 03d0 8983      		std Y+1,r24
 912               	.L42:
 217:usart.c       ****                     while((bytesRecieved < size+1) && (timeout < 50)){  //1 for crc
 914               	.LM77:
 915 03d2 8F81      		ldd r24,Y+7
 916 03d4 282F      		mov r18,r24
 917 03d6 3327      		clr r19
 918 03d8 27FD      		sbrc r18,7
 919 03da 3095      		com r19
 920 03dc 8D81      		ldd r24,Y+5
 921 03de 9927      		clr r25
 922 03e0 87FD      		sbrc r24,7
 923 03e2 9095      		com r25
 924 03e4 0196      		adiw r24,1
 925 03e6 2817      		cp r18,r24
 926 03e8 3907      		cpc r19,r25
 927 03ea 04F4      		brge .L44
 928 03ec 8981      		ldd r24,Y+1
 929 03ee 9A81      		ldd r25,Y+2
 930 03f0 8233      		cpi r24,50
 931 03f2 9105      		cpc r25,__zero_reg__
 932 03f4 00F0      		brlo .L45
 933               	.L44:
 228:usart.c       ****                         }
 229:usart.c       ****                     } 
 230:usart.c       ****                     if(timeout >= 50){
 935               	.LM78:
 936 03f6 8981      		ldd r24,Y+1
 937 03f8 9A81      		ldd r25,Y+2
 938 03fa 8233      		cpi r24,50
 939 03fc 9105      		cpc r25,__zero_reg__
 940 03fe 00F4      		brsh .L41
 231:usart.c       ****                         break;
 232:usart.c       ****                     }
 233:usart.c       ****                     if(calcChecksum(buffer,size) != buffer[size]){
 942               	.LM79:
 943 0400 2D81      		ldd r18,Y+5
 944 0402 CE01      		movw r24,r28
 945 0404 0896      		adiw r24,8
 946 0406 622F      		mov r22,r18
 947 0408 0E94 0000 		call calcChecksum
 948 040c 482F      		mov r20,r24
 949 040e 8D81      		ldd r24,Y+5
 950 0410 282F      		mov r18,r24
 951 0412 3327      		clr r19
 952 0414 27FD      		sbrc r18,7
 953 0416 3095      		com r19
 954 0418 CE01      		movw r24,r28
 955 041a 0896      		adiw r24,8
 956 041c FC01      		movw r30,r24
 957 041e E20F      		add r30,r18
 958 0420 F31F      		adc r31,r19
 959 0422 8081      		ld r24,Z
 960 0424 4817      		cp r20,r24
 961 0426 01F0      		breq .L46
 234:usart.c       ****                         sendNACK();
 963               	.LM80:
 964 0428 0E94 0000 		call sendNACK
 235:usart.c       ****                         bytesRecieved = 0;
 966               	.LM81:
 967 042c 1F82      		std Y+7,__zero_reg__
 968 042e 00C0      		rjmp .L42
 969               	.L46:
 236:usart.c       ****                     } else {
 237:usart.c       ****                         //PORTB = buffer[0];
 238:usart.c       ****                         sendACK();
 971               	.LM82:
 972 0430 0E94 0000 		call sendACK
 239:usart.c       ****                         memcpy(command.payload,buffer,size);
 974               	.LM83:
 975 0434 8D81      		ldd r24,Y+5
 976 0436 482F      		mov r20,r24
 977 0438 5527      		clr r21
 978 043a 47FD      		sbrc r20,7
 979 043c 5095      		com r21
 980 043e CE01      		movw r24,r28
 981 0440 4096      		adiw r24,16
 982 0442 0396      		adiw r24,3
 983 0444 9E01      		movw r18,r28
 984 0446 285F      		subi r18,lo8(-(8))
 985 0448 3F4F      		sbci r19,hi8(-(8))
 986 044a B901      		movw r22,r18
 987 044c 0E94 0000 		call memcpy
 988               	.L41:
 240:usart.c       ****                         break;
 241:usart.c       ****                     }
 242:usart.c       ****                 }
 243:usart.c       ****             }
 244:usart.c       ****             processCommand(&command,&response);
 990               	.LM84:
 991 0450 CE01      		movw r24,r28
 992 0452 4096      		adiw r24,16
 993 0454 9E01      		movw r18,r28
 994 0456 2D5C      		subi r18,lo8(-(51))
 995 0458 3F4F      		sbci r19,hi8(-(51))
 996 045a B901      		movw r22,r18
 997 045c 0E94 0000 		call processCommand
 245:usart.c       ****             sendResponse(&response);
 999               	.LM85:
 1000 0460 CE01      		movw r24,r28
 1001 0462 C396      		adiw r24,51
 1002 0464 0E94 0000 		call sendResponse
 1003 0468 00C0      		rjmp .L48
 1016               	.Lscope12:
 1018               		.stabd	78,0,0
 1021               	.global	sendResponse
 1023               	sendResponse:
 1024               		.stabd	46,0,0
 246:usart.c       **** 
 247:usart.c       ****         }
 248:usart.c       **** 
 249:usart.c       ****     }
 250:usart.c       **** 
 251:usart.c       **** }
 252:usart.c       **** 
 253:usart.c       **** void sendResponse(Response* response){
 1026               	.LM86:
 1027               	.LFBB13:
 1028 046a DF93      		push r29
 1029 046c CF93      		push r28
 1030 046e 00D0      		rcall .
 1031 0470 00D0      		rcall .
 1032 0472 CDB7      		in r28,__SP_L__
 1033 0474 DEB7      		in r29,__SP_H__
 1034               	/* prologue: function */
 1035               	/* frame size = 6 */
 1036 0476 9E83      		std Y+6,r25
 1037 0478 8D83      		std Y+5,r24
 1038               	.L52:
 254:usart.c       ****     char checksumBuffer[2];
 255:usart.c       ****     int i;
 256:usart.c       ****     while(1){
 257:usart.c       ****         USART_AddToQueue(response->commandBack);
 1040               	.LM87:
 1041 047a ED81      		ldd r30,Y+5
 1042 047c FE81      		ldd r31,Y+6
 1043 047e 8081      		ld r24,Z
 1044 0480 0E94 0000 		call USART_AddToQueue
 258:usart.c       ****         USART_AddToQueue(response->size);
 1046               	.LM88:
 1047 0484 ED81      		ldd r30,Y+5
 1048 0486 FE81      		ldd r31,Y+6
 1049 0488 8181      		ldd r24,Z+1
 1050 048a 0E94 0000 		call USART_AddToQueue
 259:usart.c       ****         checksumBuffer[0] = response->commandBack;
 1052               	.LM89:
 1053 048e ED81      		ldd r30,Y+5
 1054 0490 FE81      		ldd r31,Y+6
 1055 0492 8081      		ld r24,Z
 1056 0494 8B83      		std Y+3,r24
 260:usart.c       ****         checksumBuffer[1] = response->size;
 1058               	.LM90:
 1059 0496 ED81      		ldd r30,Y+5
 1060 0498 FE81      		ldd r31,Y+6
 1061 049a 8181      		ldd r24,Z+1
 1062 049c 8C83      		std Y+4,r24
 261:usart.c       ****         USART_AddToQueue(calcChecksum(checksumBuffer,2));
 1064               	.LM91:
 1065 049e CE01      		movw r24,r28
 1066 04a0 0396      		adiw r24,3
 1067 04a2 62E0      		ldi r22,lo8(2)
 1068 04a4 0E94 0000 		call calcChecksum
 1069 04a8 0E94 0000 		call USART_AddToQueue
 262:usart.c       ****         if(waitForChecksum() == 0){
 1071               	.LM92:
 1072 04ac 0E94 0000 		call waitForChecksum
 1073 04b0 8823      		tst r24
 1074 04b2 01F4      		brne .L52
 1075               	.L51:
 263:usart.c       ****             break;
 264:usart.c       ****         }
 265:usart.c       ****     }
 266:usart.c       **** 
 267:usart.c       ****     for(i=0;i<response->size;i++){
 1077               	.LM93:
 1078 04b4 1A82      		std Y+2,__zero_reg__
 1079 04b6 1982      		std Y+1,__zero_reg__
 1080 04b8 00C0      		rjmp .L53
 1081               	.L54:
 268:usart.c       ****         USART_AddToQueue(response->payload[i]);
 1083               	.LM94:
 1084 04ba 2981      		ldd r18,Y+1
 1085 04bc 3A81      		ldd r19,Y+2
 1086 04be 8D81      		ldd r24,Y+5
 1087 04c0 9E81      		ldd r25,Y+6
 1088 04c2 820F      		add r24,r18
 1089 04c4 931F      		adc r25,r19
 1090 04c6 FC01      		movw r30,r24
 1091 04c8 3296      		adiw r30,2
 1092 04ca 8081      		ld r24,Z
 1093 04cc 0E94 0000 		call USART_AddToQueue
 267:usart.c       ****     for(i=0;i<response->size;i++){
 1095               	.LM95:
 1096 04d0 8981      		ldd r24,Y+1
 1097 04d2 9A81      		ldd r25,Y+2
 1098 04d4 0196      		adiw r24,1
 1099 04d6 9A83      		std Y+2,r25
 1100 04d8 8983      		std Y+1,r24
 1101               	.L53:
 1102 04da ED81      		ldd r30,Y+5
 1103 04dc FE81      		ldd r31,Y+6
 1104 04de 8181      		ldd r24,Z+1
 1105 04e0 282F      		mov r18,r24
 1106 04e2 3327      		clr r19
 1107 04e4 27FD      		sbrc r18,7
 1108 04e6 3095      		com r19
 1109 04e8 8981      		ldd r24,Y+1
 1110 04ea 9A81      		ldd r25,Y+2
 1111 04ec 8217      		cp r24,r18
 1112 04ee 9307      		cpc r25,r19
 1113 04f0 04F0      		brlt .L54
 269:usart.c       ****         //USART_AddToQueue()
 270:usart.c       ****     }
 271:usart.c       ****     USART_AddToQueue(calcChecksum(response->payload,12));
 1115               	.LM96:
 1116 04f2 8D81      		ldd r24,Y+5
 1117 04f4 9E81      		ldd r25,Y+6
 1118 04f6 0296      		adiw r24,2
 1119 04f8 6CE0      		ldi r22,lo8(12)
 1120 04fa 0E94 0000 		call calcChecksum
 1121 04fe 0E94 0000 		call USART_AddToQueue
 1122               	/* epilogue start */
 272:usart.c       **** 
 273:usart.c       **** 
 274:usart.c       **** }
 1124               	.LM97:
 1125 0502 2696      		adiw r28,6
 1126 0504 0FB6      		in __tmp_reg__,__SREG__
 1127 0506 F894      		cli
 1128 0508 DEBF      		out __SP_H__,r29
 1129 050a 0FBE      		out __SREG__,__tmp_reg__
 1130 050c CDBF      		out __SP_L__,r28
 1131 050e CF91      		pop r28
 1132 0510 DF91      		pop r29
 1133 0512 0895      		ret
 1139               	.Lscope13:
 1141               		.stabd	78,0,0
 1143               	.global	sendACK
 1145               	sendACK:
 1146               		.stabd	46,0,0
 275:usart.c       **** 
 276:usart.c       **** void sendACK(){
 1148               	.LM98:
 1149               	.LFBB14:
 1150 0514 DF93      		push r29
 1151 0516 CF93      		push r28
 1152 0518 CDB7      		in r28,__SP_L__
 1153 051a DEB7      		in r29,__SP_H__
 1154               	/* prologue: function */
 1155               	/* frame size = 0 */
 277:usart.c       ****     USART_AddToQueue(128);
 1157               	.LM99:
 1158 051c 80E8      		ldi r24,lo8(-128)
 1159 051e 0E94 0000 		call USART_AddToQueue
 1160               	/* epilogue start */
 278:usart.c       **** }
 1162               	.LM100:
 1163 0522 CF91      		pop r28
 1164 0524 DF91      		pop r29
 1165 0526 0895      		ret
 1167               	.Lscope14:
 1169               		.stabd	78,0,0
 1171               	.global	sendNACK
 1173               	sendNACK:
 1174               		.stabd	46,0,0
 279:usart.c       **** 
 280:usart.c       **** void sendNACK(){
 1176               	.LM101:
 1177               	.LFBB15:
 1178 0528 DF93      		push r29
 1179 052a CF93      		push r28
 1180 052c CDB7      		in r28,__SP_L__
 1181 052e DEB7      		in r29,__SP_H__
 1182               	/* prologue: function */
 1183               	/* frame size = 0 */
 281:usart.c       ****     USART_AddToQueue(0);
 1185               	.LM102:
 1186 0530 80E0      		ldi r24,lo8(0)
 1187 0532 0E94 0000 		call USART_AddToQueue
 1188               	/* epilogue start */
 282:usart.c       **** }
 1190               	.LM103:
 1191 0536 CF91      		pop r28
 1192 0538 DF91      		pop r29
 1193 053a 0895      		ret
 1195               	.Lscope15:
 1197               		.stabd	78,0,0
 1199               	.global	waitForChecksum
 1201               	waitForChecksum:
 1202               		.stabd	46,0,0
 283:usart.c       **** 
 284:usart.c       **** char waitForChecksum(){
 1204               	.LM104:
 1205               	.LFBB16:
 1206 053c DF93      		push r29
 1207 053e CF93      		push r28
 1208 0540 CDB7      		in r28,__SP_L__
 1209 0542 DEB7      		in r29,__SP_H__
 1210               	/* prologue: function */
 1211               	/* frame size = 0 */
 1212               	.L62:
 285:usart.c       ****     while(1){
 286:usart.c       ****         if(UCSR1A & (1<<RXC1)){
 1214               	.LM105:
 1215 0544 E8EC      		ldi r30,lo8(200)
 1216 0546 F0E0      		ldi r31,hi8(200)
 1217 0548 8081      		ld r24,Z
 1218 054a 8823      		tst r24
 1219 054c 04F4      		brge .L61
 287:usart.c       ****             if(UDR1 = 0xFF) {
 1221               	.LM106:
 1222 054e EEEC      		ldi r30,lo8(206)
 1223 0550 F0E0      		ldi r31,hi8(206)
 1224 0552 8FEF      		ldi r24,lo8(-1)
 1225 0554 8083      		st Z,r24
 288:usart.c       ****                 return 0;
 1227               	.LM107:
 1228 0556 80E0      		ldi r24,lo8(0)
 1229               	/* epilogue start */
 289:usart.c       ****             } else {
 290:usart.c       ****                 return -1;
 291:usart.c       ****             }
 292:usart.c       **** 
 293:usart.c       ****         } else {
 294:usart.c       ****             vTaskDelay(1);
 295:usart.c       ****         }
 296:usart.c       **** 
 297:usart.c       ****     }
 298:usart.c       **** }
 1231               	.LM108:
 1232 0558 CF91      		pop r28
 1233 055a DF91      		pop r29
 1234 055c 0895      		ret
 1235               	.L61:
 294:usart.c       ****             vTaskDelay(1);
 1237               	.LM109:
 1238 055e 81E0      		ldi r24,lo8(1)
 1239 0560 90E0      		ldi r25,hi8(1)
 1240 0562 0E94 0000 		call vTaskDelay
 1241 0566 00C0      		rjmp .L62
 1243               	.Lscope16:
 1245               		.stabd	78,0,0
 1249               	.global	calcChecksum
 1251               	calcChecksum:
 1252               		.stabd	46,0,0
 299:usart.c       **** 
 300:usart.c       **** uint8_t calcChecksum(uint8_t* buffer,uint8_t size){
 1254               	.LM110:
 1255               	.LFBB17:
 1256 0568 DF93      		push r29
 1257 056a CF93      		push r28
 1258 056c 00D0      		rcall .
 1259 056e 0F92      		push __tmp_reg__
 1260 0570 0F92      		push __tmp_reg__
 1261 0572 CDB7      		in r28,__SP_L__
 1262 0574 DEB7      		in r29,__SP_H__
 1263               	/* prologue: function */
 1264               	/* frame size = 5 */
 1265 0576 9B83      		std Y+3,r25
 1266 0578 8A83      		std Y+2,r24
 1267 057a 6C83      		std Y+4,r22
 301:usart.c       ****     uint8_t checksum = 0;
 1269               	.LM111:
 1270 057c 1982      		std Y+1,__zero_reg__
 1271 057e 00C0      		rjmp .L65
 1272               	.L67:
 302:usart.c       ****     while(size-- > 0){
 303:usart.c       ****         checksum += *(buffer++);
 1274               	.LM112:
 1275 0580 EA81      		ldd r30,Y+2
 1276 0582 FB81      		ldd r31,Y+3
 1277 0584 9081      		ld r25,Z
 1278 0586 8981      		ldd r24,Y+1
 1279 0588 890F      		add r24,r25
 1280 058a 8983      		std Y+1,r24
 1281 058c 8A81      		ldd r24,Y+2
 1282 058e 9B81      		ldd r25,Y+3
 1283 0590 0196      		adiw r24,1
 1284 0592 9B83      		std Y+3,r25
 1285 0594 8A83      		std Y+2,r24
 1286               	.L65:
 302:usart.c       ****     while(size-- > 0){
 1288               	.LM113:
 1289 0596 8C81      		ldd r24,Y+4
 1290 0598 8D83      		std Y+5,r24
 1291 059a 8D81      		ldd r24,Y+5
 1292 059c 8823      		tst r24
 1293 059e 01F0      		breq .L66
 1294 05a0 81E0      		ldi r24,lo8(1)
 1295 05a2 8D83      		std Y+5,r24
 1296               	.L66:
 1297 05a4 8D81      		ldd r24,Y+5
 1298 05a6 9C81      		ldd r25,Y+4
 1299 05a8 9150      		subi r25,lo8(-(-1))
 1300 05aa 9C83      		std Y+4,r25
 1301 05ac 8823      		tst r24
 1302 05ae 01F4      		brne .L67
 304:usart.c       ****     }
 305:usart.c       ****     return checksum;
 1304               	.LM114:
 1305 05b0 8981      		ldd r24,Y+1
 1306               	/* epilogue start */
 306:usart.c       **** }...
 1308               	.LM115:
 1309 05b2 0F90      		pop __tmp_reg__
 1310 05b4 0F90      		pop __tmp_reg__
 1311 05b6 0F90      		pop __tmp_reg__
 1312 05b8 0F90      		pop __tmp_reg__
 1313 05ba 0F90      		pop __tmp_reg__
 1314 05bc CF91      		pop r28
 1315 05be DF91      		pop r29
 1316 05c0 0895      		ret
 1321               	.Lscope17:
 1323               		.stabd	78,0,0
 1324               		.comm USART_WriteQueue,2,1
 1325               		.comm USART_ReadQueue,2,1
 1326               		.comm USART_WriteQueueLog,2,1
 1331               	.Letext0:
 1332               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 usart.c
     /tmp/ccEcRUoP.s:2      *ABS*:0000003f __SREG__
     /tmp/ccEcRUoP.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccEcRUoP.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccEcRUoP.s:5      *ABS*:00000034 __CCP__
     /tmp/ccEcRUoP.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccEcRUoP.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccEcRUoP.s:109    .text:00000000 USART_Init
                            *COM*:00000002 USART_WriteQueue
                            *COM*:00000002 USART_ReadQueue
     /tmp/ccEcRUoP.s:252    .text:000000e2 USART_Write
     /tmp/ccEcRUoP.s:298    .text:00000110 USART_Write_Unprotected
     /tmp/ccEcRUoP.s:343    .text:0000013e USART_Read
     /tmp/ccEcRUoP.s:381    .text:0000015c ISR
     /tmp/ccEcRUoP.s:420    .text:00000182 USART_AddToQueue
     /tmp/ccEcRUoP.s:460    .text:000001b0 USART_TransmitString
     /tmp/ccEcRUoP.s:514    .text:000001ea vTaskUSARTWrite
     /tmp/ccEcRUoP.s:571    .text:0000022e USART_LogChar
                            *COM*:00000002 USART_WriteQueueLog
     /tmp/ccEcRUoP.s:611    .text:0000025c USART_LogString
     /tmp/ccEcRUoP.s:665    .text:00000296 vTaskUSARTLog
     /tmp/ccEcRUoP.s:722    .text:000002da vTaskUSARTRead
     /tmp/ccEcRUoP.s:1251   .text:00000568 calcChecksum
     /tmp/ccEcRUoP.s:1173   .text:00000528 sendNACK
     /tmp/ccEcRUoP.s:1145   .text:00000514 sendACK
     /tmp/ccEcRUoP.s:1023   .text:0000046a sendResponse
     /tmp/ccEcRUoP.s:1201   .text:0000053c waitForChecksum

UNDEFINED SYMBOLS
xQueueGenericCreate
__udivmodsi4
xQueueGenericSend
xQueueGenericReceive
memcpy
processCommand
vTaskDelay
__do_clear_bss
