   1               		.file	"usart.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 157               		.comm	USART_WriteQueue,2,1
 158               		.comm	USART_ReadQueue,2,1
 159               		.comm	USART_WriteQueueLog,2,1
 161               	.global	USART_Init
 163               	USART_Init:
 164               		.stabd	46,0,0
   1:usart.c       **** /***************************
   2:usart.c       **** *
   3:usart.c       **** * Filename: usart.cpp
   4:usart.c       **** *
   5:usart.c       **** * Description: Provides print methods for various
   6:usart.c       **** *  datatypes using USART.
   7:usart.c       **** *
   8:usart.c       **** * Authors: Doug Gallatin and Jason Schray
   9:usart.c       **** * Edited by: Tim Peters & James Humphrey
  10:usart.c       **** *
  11:usart.c       **** ***************************/
  12:usart.c       **** 
  13:usart.c       **** #include "FreeRTOS.h"
  14:usart.c       **** #include "semphr.h" 
  15:usart.c       **** #include "queue.h"
  16:usart.c       **** #include "protocol.h"
  17:usart.c       **** #include "task.h"
  18:usart.c       **** 
  19:usart.c       **** #include <stdlib.h>
  20:usart.c       **** #include <stdint.h>
  21:usart.c       **** #include <avr/io.h>
  22:usart.c       **** #include <avr/interrupt.h>
  23:usart.c       **** 
  24:usart.c       **** #include "usart.h"
  25:usart.c       **** 
  26:usart.c       **** #define NACK_BYTE 0 
  27:usart.c       **** #define ACK_BYTE	128
  28:usart.c       **** 
  29:usart.c       **** xQueueHandle USART_WriteQueue;
  30:usart.c       **** xQueueHandle USART_ReadQueue;
  31:usart.c       **** xQueueHandle USART_WriteQueueLog;
  32:usart.c       **** 
  33:usart.c       **** int sendResponse(Response* response);
  34:usart.c       **** uint8_t calcChecksum(uint8_t* buffer, uint8_t size);
  35:usart.c       **** int recievePayload(int size, unsigned char *buffer);
  36:usart.c       **** uint8_t USART_GetChar(void);
  37:usart.c       **** void sendACK(void);
  38:usart.c       **** void sendNACK(void);
  39:usart.c       **** 
  40:usart.c       **** /************************************
  41:usart.c       **** * Procedure: usart_init
  42:usart.c       **** *  
  43:usart.c       **** * Description: Initializes the USART module with 
  44:usart.c       **** *  the specified baud rate and clk speed.
  45:usart.c       **** *
  46:usart.c       **** * Param buadin: The desired Baud rate.
  47:usart.c       **** * Param clk_seedin: The clk speed of the ATmega328p
  48:usart.c       **** ************************************/
  49:usart.c       **** void USART_Init() {
 166               	.LM0:
 167               	.LFBB1:
 168 0000 CF93      		push r28
 169 0002 DF93      		push r29
 170 0004 CDB7      		in r28,__SP_L__
 171 0006 DEB7      		in r29,__SP_H__
 172               	/* prologue: function */
 173               	/* frame size = 0 */
 174               	/* stack size = 2 */
 175               	.L__stack_usage = 2
  50:usart.c       ****     USART_WriteQueue = xQueueCreate(64,sizeof(uint8_t));
 177               	.LM1:
 178 0008 40E0      		ldi r20,0
 179 000a 61E0      		ldi r22,lo8(1)
 180 000c 80E4      		ldi r24,lo8(64)
 181 000e 0E94 0000 		call xQueueGenericCreate
 182 0012 9093 0000 		sts USART_WriteQueue+1,r25
 183 0016 8093 0000 		sts USART_WriteQueue,r24
  51:usart.c       ****     USART_ReadQueue = xQueueCreate(8,sizeof(uint8_t));
 185               	.LM2:
 186 001a 40E0      		ldi r20,0
 187 001c 61E0      		ldi r22,lo8(1)
 188 001e 88E0      		ldi r24,lo8(8)
 189 0020 0E94 0000 		call xQueueGenericCreate
 190 0024 9093 0000 		sts USART_ReadQueue+1,r25
 191 0028 8093 0000 		sts USART_ReadQueue,r24
  52:usart.c       **** 
  53:usart.c       ****     //uint32_t ubrr = clk_speedin/(16UL)/baudin-1;
  54:usart.c       ****     //UBRR1H = (unsigned char)(ubrr>>8) ;// & 0x7F;
  55:usart.c       ****     //UBRR1L = (unsigned char)ubrr;
  56:usart.c       ****     
  57:usart.c       ****     UBRR0H = 0; //115200
 193               	.LM3:
 194 002c 85EC      		ldi r24,lo8(-59)
 195 002e 90E0      		ldi r25,0
 196 0030 FC01      		movw r30,r24
 197 0032 1082      		st Z,__zero_reg__
  58:usart.c       ****     UBRR0L = 8;
 199               	.LM4:
 200 0034 84EC      		ldi r24,lo8(-60)
 201 0036 90E0      		ldi r25,0
 202 0038 28E0      		ldi r18,lo8(8)
 203 003a FC01      		movw r30,r24
 204 003c 2083      		st Z,r18
  59:usart.c       **** 
  60:usart.c       ****     /* Enable receiver and transmitter */
  61:usart.c       ****     UCSR0B = (1<<RXEN0)|(1<<TXEN0);//|(1<<RXCIE1);
 206               	.LM5:
 207 003e 81EC      		ldi r24,lo8(-63)
 208 0040 90E0      		ldi r25,0
 209 0042 28E1      		ldi r18,lo8(24)
 210 0044 FC01      		movw r30,r24
 211 0046 2083      		st Z,r18
  62:usart.c       ****     /* Set frame format: 8data, 1stop bit */
  63:usart.c       ****     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 213               	.LM6:
 214 0048 82EC      		ldi r24,lo8(-62)
 215 004a 90E0      		ldi r25,0
 216 004c 26E0      		ldi r18,lo8(6)
 217 004e FC01      		movw r30,r24
 218 0050 2083      		st Z,r18
  64:usart.c       **** 	 // clear U2X0 for Synchronous operation
  65:usart.c       ****     UCSR0A &= ~(1<<U2X0);
 220               	.LM7:
 221 0052 80EC      		ldi r24,lo8(-64)
 222 0054 90E0      		ldi r25,0
 223 0056 20EC      		ldi r18,lo8(-64)
 224 0058 30E0      		ldi r19,0
 225 005a F901      		movw r30,r18
 226 005c 2081      		ld r18,Z
 227 005e 2D7F      		andi r18,lo8(-3)
 228 0060 FC01      		movw r30,r24
 229 0062 2083      		st Z,r18
 230               	/* epilogue start */
  66:usart.c       **** 
  67:usart.c       ****     //UCSR0B |= (1<<UDRIE0);
  68:usart.c       **** 
  69:usart.c       ****     //PORTB = 0xFF;
  70:usart.c       **** 
  71:usart.c       ****     //UART0 Logging
  72:usart.c       **** 
  73:usart.c       ****     /*USART_WriteQueueLog = xQueueCreate(32,sizeof(uint8_t));
  74:usart.c       **** 
  75:usart.c       ****     ubrr = clk_speedin/(16UL)/baudin-1;
  76:usart.c       ****     UBRR0H = (unsigned char)(ubrr>>8) ;// & 0x7F;
  77:usart.c       ****     UBRR0L = (unsigned char)ubrr;
  78:usart.c       ****     
  79:usart.c       ****     //UBRR0H = 0; //115200
  80:usart.c       ****     //UBRR0L = 8;
  81:usart.c       **** 
  82:usart.c       ****     /* Enable receiver and transmitter */
  83:usart.c       ****     //UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  84:usart.c       ****     /* Set frame format: 8data, 1stop bit */
  85:usart.c       ****     //UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  86:usart.c       ****     // clear U2X0 for Synchronous operation
  87:usart.c       ****     //UCSR0A &= ~(1<<U2X0);*/
  88:usart.c       **** 
  89:usart.c       **** }
 232               	.LM8:
 233 0064 DF91      		pop r29
 234 0066 CF91      		pop r28
 235 0068 0895      		ret
 237               	.Lscope1:
 239               		.stabd	78,0,0
 242               	.global	USART_Write
 244               	USART_Write:
 245               		.stabd	46,0,0
  90:usart.c       **** 
  91:usart.c       **** /*the send function will put 8bits on the trans line. */
  92:usart.c       **** void USART_Write(uint8_t data) {
 247               	.LM9:
 248               	.LFBB2:
 249 006a CF93      		push r28
 250 006c DF93      		push r29
 251 006e 1F92      		push __zero_reg__
 252 0070 CDB7      		in r28,__SP_L__
 253 0072 DEB7      		in r29,__SP_H__
 254               	/* prologue: function */
 255               	/* frame size = 1 */
 256               	/* stack size = 3 */
 257               	.L__stack_usage = 3
 258 0074 8983      		std Y+1,r24
  93:usart.c       **** 		/* Wait for empty transmit buffer */
  94:usart.c       **** 		while ( !( UCSR0A & (1<<UDRE0)) )
 260               	.LM10:
 261 0076 0000      		nop
 262               	.L3:
 264               	.LM11:
 265 0078 80EC      		ldi r24,lo8(-64)
 266 007a 90E0      		ldi r25,0
 267 007c FC01      		movw r30,r24
 268 007e 8081      		ld r24,Z
 269 0080 882F      		mov r24,r24
 270 0082 90E0      		ldi r25,0
 271 0084 8072      		andi r24,32
 272 0086 9927      		clr r25
 273 0088 0097      		sbiw r24,0
 274 008a 01F0      		breq .L3
  95:usart.c       **** 		;
  96:usart.c       **** 		/* Put data into buffer, sends the data */
  97:usart.c       **** 		UDR0 = data;
 276               	.LM12:
 277 008c 86EC      		ldi r24,lo8(-58)
 278 008e 90E0      		ldi r25,0
 279 0090 2981      		ldd r18,Y+1
 280 0092 FC01      		movw r30,r24
 281 0094 2083      		st Z,r18
 282               	/* epilogue start */
  98:usart.c       **** }
 284               	.LM13:
 285 0096 0F90      		pop __tmp_reg__
 286 0098 DF91      		pop r29
 287 009a CF91      		pop r28
 288 009c 0895      		ret
 290               	.Lscope2:
 292               		.stabd	78,0,0
 294               	.global	USART_Read
 296               	USART_Read:
 297               		.stabd	46,0,0
  99:usart.c       **** 
 100:usart.c       **** 
 101:usart.c       **** uint8_t USART_Read(void) {
 299               	.LM14:
 300               	.LFBB3:
 301 009e CF93      		push r28
 302 00a0 DF93      		push r29
 303 00a2 CDB7      		in r28,__SP_L__
 304 00a4 DEB7      		in r29,__SP_H__
 305               	/* prologue: function */
 306               	/* frame size = 0 */
 307               	/* stack size = 2 */
 308               	.L__stack_usage = 2
 102:usart.c       ****     /* Wait for data to be received */
 103:usart.c       ****     while ( !(UCSR2A & (1<<RXC2)) )
 310               	.LM15:
 311 00a6 0000      		nop
 312               	.L5:
 314               	.LM16:
 315 00a8 80ED      		ldi r24,lo8(-48)
 316 00aa 90E0      		ldi r25,0
 317 00ac FC01      		movw r30,r24
 318 00ae 8081      		ld r24,Z
 319 00b0 8823      		tst r24
 320 00b2 04F4      		brge .L5
 104:usart.c       ****         ;
 105:usart.c       ****     /* Get and return received data from buffer */
 106:usart.c       ****     return UDR2;
 322               	.LM17:
 323 00b4 86ED      		ldi r24,lo8(-42)
 324 00b6 90E0      		ldi r25,0
 325 00b8 FC01      		movw r30,r24
 326 00ba 8081      		ld r24,Z
 327               	/* epilogue start */
 107:usart.c       **** }
 329               	.LM18:
 330 00bc DF91      		pop r29
 331 00be CF91      		pop r28
 332 00c0 0895      		ret
 334               	.Lscope3:
 336               		.stabd	78,0,0
 339               	.global	USART_AddToQueue
 341               	USART_AddToQueue:
 342               		.stabd	46,0,0
 108:usart.c       **** 
 109:usart.c       **** 
 110:usart.c       **** /*ISR(USART1_RX_vect){
 111:usart.c       ****     //uint8_t data;
 112:usart.c       ****     //data = UDR1;
 113:usart.c       **** 
 114:usart.c       ****     //while(!(UCSR1A & (1<<UDRE1)));
 115:usart.c       ****     //UDR1 = data;
 116:usart.c       ****     
 117:usart.c       **** 
 118:usart.c       ****   //  USART_AddToQueue(data);
 119:usart.c       ****     //xQueueSendToBackFromISR(USART_ReadQueue,&data,NULL);
 120:usart.c       **** }*/
 121:usart.c       **** 
 122:usart.c       **** void USART_AddToQueue(uint8_t data){
 344               	.LM19:
 345               	.LFBB4:
 346 00c2 CF93      		push r28
 347 00c4 DF93      		push r29
 348 00c6 1F92      		push __zero_reg__
 349 00c8 CDB7      		in r28,__SP_L__
 350 00ca DEB7      		in r29,__SP_H__
 351               	/* prologue: function */
 352               	/* frame size = 1 */
 353               	/* stack size = 3 */
 354               	.L__stack_usage = 3
 355 00cc 8983      		std Y+1,r24
 123:usart.c       ****     
 124:usart.c       ****     xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);
 357               	.LM20:
 358 00ce 8091 0000 		lds r24,USART_WriteQueue
 359 00d2 9091 0000 		lds r25,USART_WriteQueue+1
 360 00d6 20E0      		ldi r18,0
 361 00d8 4FEF      		ldi r20,lo8(-1)
 362 00da 5FEF      		ldi r21,lo8(-1)
 363 00dc BE01      		movw r22,r28
 364 00de 6F5F      		subi r22,-1
 365 00e0 7F4F      		sbci r23,-1
 366 00e2 0E94 0000 		call xQueueGenericSend
 367               	/* epilogue start */
 125:usart.c       **** 
 126:usart.c       **** }
 369               	.LM21:
 370 00e6 0F90      		pop __tmp_reg__
 371 00e8 DF91      		pop r29
 372 00ea CF91      		pop r28
 373 00ec 0895      		ret
 375               	.Lscope4:
 377               		.stabd	78,0,0
 380               	.global	USART_TransmitString
 382               	USART_TransmitString:
 383               		.stabd	46,0,0
 127:usart.c       **** 
 128:usart.c       **** void USART_TransmitString(char* str){
 385               	.LM22:
 386               	.LFBB5:
 387 00ee CF93      		push r28
 388 00f0 DF93      		push r29
 389 00f2 1F92      		push __zero_reg__
 390 00f4 1F92      		push __zero_reg__
 391 00f6 CDB7      		in r28,__SP_L__
 392 00f8 DEB7      		in r29,__SP_H__
 393               	/* prologue: function */
 394               	/* frame size = 2 */
 395               	/* stack size = 4 */
 396               	.L__stack_usage = 4
 397 00fa 9A83      		std Y+2,r25
 398 00fc 8983      		std Y+1,r24
 129:usart.c       ****     while(*str) {
 400               	.LM23:
 401 00fe 00C0      		rjmp .L9
 402               	.L10:
 130:usart.c       ****         USART_AddToQueue(*str);
 404               	.LM24:
 405 0100 8981      		ldd r24,Y+1
 406 0102 9A81      		ldd r25,Y+2
 407 0104 FC01      		movw r30,r24
 408 0106 8081      		ld r24,Z
 409 0108 0E94 0000 		call USART_AddToQueue
 131:usart.c       ****         str++;
 411               	.LM25:
 412 010c 8981      		ldd r24,Y+1
 413 010e 9A81      		ldd r25,Y+2
 414 0110 0196      		adiw r24,1
 415 0112 9A83      		std Y+2,r25
 416 0114 8983      		std Y+1,r24
 417               	.L9:
 129:usart.c       ****     while(*str) {
 419               	.LM26:
 420 0116 8981      		ldd r24,Y+1
 421 0118 9A81      		ldd r25,Y+2
 422 011a FC01      		movw r30,r24
 423 011c 8081      		ld r24,Z
 424 011e 8823      		tst r24
 425 0120 01F4      		brne .L10
 426               	/* epilogue start */
 132:usart.c       ****     }
 133:usart.c       **** }
 428               	.LM27:
 429 0122 0F90      		pop __tmp_reg__
 430 0124 0F90      		pop __tmp_reg__
 431 0126 DF91      		pop r29
 432 0128 CF91      		pop r28
 433 012a 0895      		ret
 435               	.Lscope5:
 437               		.stabd	78,0,0
 439               	.global	vTaskUSARTWrite
 441               	vTaskUSARTWrite:
 442               		.stabd	46,0,0
 134:usart.c       **** 
 135:usart.c       **** void vTaskUSARTWrite(){
 444               	.LM28:
 445               	.LFBB6:
 446 012c CF93      		push r28
 447 012e DF93      		push r29
 448 0130 1F92      		push __zero_reg__
 449 0132 CDB7      		in r28,__SP_L__
 450 0134 DEB7      		in r29,__SP_H__
 451               	/* prologue: function */
 452               	/* frame size = 1 */
 453               	/* stack size = 3 */
 454               	.L__stack_usage = 3
 455               	.L13:
 136:usart.c       ****     uint8_t data;
 137:usart.c       ****     while(1){
 138:usart.c       ****     xQueueReceive(USART_WriteQueue,&data,portMAX_DELAY);
 457               	.LM29:
 458 0136 8091 0000 		lds r24,USART_WriteQueue
 459 013a 9091 0000 		lds r25,USART_WriteQueue+1
 460 013e 20E0      		ldi r18,0
 461 0140 4FEF      		ldi r20,lo8(-1)
 462 0142 5FEF      		ldi r21,lo8(-1)
 463 0144 BE01      		movw r22,r28
 464 0146 6F5F      		subi r22,-1
 465 0148 7F4F      		sbci r23,-1
 466 014a 0E94 0000 		call xQueueGenericReceive
 139:usart.c       **** 
 140:usart.c       ****         while(!(UCSR1A & (1<<UDRE1)));
 468               	.LM30:
 469 014e 0000      		nop
 470               	.L12:
 472               	.LM31:
 473 0150 88EC      		ldi r24,lo8(-56)
 474 0152 90E0      		ldi r25,0
 475 0154 FC01      		movw r30,r24
 476 0156 8081      		ld r24,Z
 477 0158 882F      		mov r24,r24
 478 015a 90E0      		ldi r25,0
 479 015c 8072      		andi r24,32
 480 015e 9927      		clr r25
 481 0160 0097      		sbiw r24,0
 482 0162 01F0      		breq .L12
 141:usart.c       ****         UDR1 = data;
 484               	.LM32:
 485 0164 8EEC      		ldi r24,lo8(-50)
 486 0166 90E0      		ldi r25,0
 487 0168 2981      		ldd r18,Y+1
 488 016a FC01      		movw r30,r24
 489 016c 2083      		st Z,r18
 142:usart.c       **** 
 143:usart.c       ****     }
 491               	.LM33:
 492 016e 00C0      		rjmp .L13
 497               	.Lscope6:
 499               		.stabd	78,0,0
 502               	.global	USART_LogChar
 504               	USART_LogChar:
 505               		.stabd	46,0,0
 144:usart.c       **** }
 145:usart.c       **** 
 146:usart.c       **** void USART_LogChar(uint8_t data){
 507               	.LM34:
 508               	.LFBB7:
 509 0170 CF93      		push r28
 510 0172 DF93      		push r29
 511 0174 1F92      		push __zero_reg__
 512 0176 CDB7      		in r28,__SP_L__
 513 0178 DEB7      		in r29,__SP_H__
 514               	/* prologue: function */
 515               	/* frame size = 1 */
 516               	/* stack size = 3 */
 517               	.L__stack_usage = 3
 518 017a 8983      		std Y+1,r24
 147:usart.c       ****     xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
 520               	.LM35:
 521 017c 8091 0000 		lds r24,USART_WriteQueueLog
 522 0180 9091 0000 		lds r25,USART_WriteQueueLog+1
 523 0184 20E0      		ldi r18,0
 524 0186 4FEF      		ldi r20,lo8(-1)
 525 0188 5FEF      		ldi r21,lo8(-1)
 526 018a BE01      		movw r22,r28
 527 018c 6F5F      		subi r22,-1
 528 018e 7F4F      		sbci r23,-1
 529 0190 0E94 0000 		call xQueueGenericSend
 530               	/* epilogue start */
 148:usart.c       **** }
 532               	.LM36:
 533 0194 0F90      		pop __tmp_reg__
 534 0196 DF91      		pop r29
 535 0198 CF91      		pop r28
 536 019a 0895      		ret
 538               	.Lscope7:
 540               		.stabd	78,0,0
 543               	.global	USART_LogString
 545               	USART_LogString:
 546               		.stabd	46,0,0
 149:usart.c       **** 
 150:usart.c       **** void USART_LogString(char* str){
 548               	.LM37:
 549               	.LFBB8:
 550 019c CF93      		push r28
 551 019e DF93      		push r29
 552 01a0 1F92      		push __zero_reg__
 553 01a2 1F92      		push __zero_reg__
 554 01a4 CDB7      		in r28,__SP_L__
 555 01a6 DEB7      		in r29,__SP_H__
 556               	/* prologue: function */
 557               	/* frame size = 2 */
 558               	/* stack size = 4 */
 559               	.L__stack_usage = 4
 560 01a8 9A83      		std Y+2,r25
 561 01aa 8983      		std Y+1,r24
 151:usart.c       ****     while(*str){
 563               	.LM38:
 564 01ac 00C0      		rjmp .L16
 565               	.L17:
 152:usart.c       ****         USART_LogChar(*str);
 567               	.LM39:
 568 01ae 8981      		ldd r24,Y+1
 569 01b0 9A81      		ldd r25,Y+2
 570 01b2 FC01      		movw r30,r24
 571 01b4 8081      		ld r24,Z
 572 01b6 0E94 0000 		call USART_LogChar
 153:usart.c       ****         str++;
 574               	.LM40:
 575 01ba 8981      		ldd r24,Y+1
 576 01bc 9A81      		ldd r25,Y+2
 577 01be 0196      		adiw r24,1
 578 01c0 9A83      		std Y+2,r25
 579 01c2 8983      		std Y+1,r24
 580               	.L16:
 151:usart.c       ****     while(*str){
 582               	.LM41:
 583 01c4 8981      		ldd r24,Y+1
 584 01c6 9A81      		ldd r25,Y+2
 585 01c8 FC01      		movw r30,r24
 586 01ca 8081      		ld r24,Z
 587 01cc 8823      		tst r24
 588 01ce 01F4      		brne .L17
 589               	/* epilogue start */
 154:usart.c       ****     }
 155:usart.c       **** }
 591               	.LM42:
 592 01d0 0F90      		pop __tmp_reg__
 593 01d2 0F90      		pop __tmp_reg__
 594 01d4 DF91      		pop r29
 595 01d6 CF91      		pop r28
 596 01d8 0895      		ret
 598               	.Lscope8:
 600               		.stabd	78,0,0
 602               	.global	vTaskUSARTLog
 604               	vTaskUSARTLog:
 605               		.stabd	46,0,0
 156:usart.c       **** 
 157:usart.c       **** void vTaskUSARTLog(){
 607               	.LM43:
 608               	.LFBB9:
 609 01da CF93      		push r28
 610 01dc DF93      		push r29
 611 01de 1F92      		push __zero_reg__
 612 01e0 CDB7      		in r28,__SP_L__
 613 01e2 DEB7      		in r29,__SP_H__
 614               	/* prologue: function */
 615               	/* frame size = 1 */
 616               	/* stack size = 3 */
 617               	.L__stack_usage = 3
 618               	.L20:
 158:usart.c       ****     uint8_t data;
 159:usart.c       ****     while(1){
 160:usart.c       ****         xQueueReceive(USART_WriteQueueLog,&data,portMAX_DELAY);
 620               	.LM44:
 621 01e4 8091 0000 		lds r24,USART_WriteQueueLog
 622 01e8 9091 0000 		lds r25,USART_WriteQueueLog+1
 623 01ec 20E0      		ldi r18,0
 624 01ee 4FEF      		ldi r20,lo8(-1)
 625 01f0 5FEF      		ldi r21,lo8(-1)
 626 01f2 BE01      		movw r22,r28
 627 01f4 6F5F      		subi r22,-1
 628 01f6 7F4F      		sbci r23,-1
 629 01f8 0E94 0000 		call xQueueGenericReceive
 161:usart.c       **** 
 162:usart.c       ****         while(!(UCSR0A & (1<<UDRE0)));
 631               	.LM45:
 632 01fc 0000      		nop
 633               	.L19:
 635               	.LM46:
 636 01fe 80EC      		ldi r24,lo8(-64)
 637 0200 90E0      		ldi r25,0
 638 0202 FC01      		movw r30,r24
 639 0204 8081      		ld r24,Z
 640 0206 882F      		mov r24,r24
 641 0208 90E0      		ldi r25,0
 642 020a 8072      		andi r24,32
 643 020c 9927      		clr r25
 644 020e 0097      		sbiw r24,0
 645 0210 01F0      		breq .L19
 163:usart.c       ****         UDR0 = data;
 647               	.LM47:
 648 0212 86EC      		ldi r24,lo8(-58)
 649 0214 90E0      		ldi r25,0
 650 0216 2981      		ldd r18,Y+1
 651 0218 FC01      		movw r30,r24
 652 021a 2083      		st Z,r18
 164:usart.c       **** 
 165:usart.c       ****     }
 654               	.LM48:
 655 021c 00C0      		rjmp .L20
 660               	.Lscope9:
 662               		.stabd	78,0,0
 664               	.global	USART_GetChar
 666               	USART_GetChar:
 667               		.stabd	46,0,0
 166:usart.c       **** 
 167:usart.c       **** }
 168:usart.c       **** 
 169:usart.c       **** uint8_t USART_GetChar(){
 669               	.LM49:
 670               	.LFBB10:
 671 021e CF93      		push r28
 672 0220 DF93      		push r29
 673 0222 1F92      		push __zero_reg__
 674 0224 CDB7      		in r28,__SP_L__
 675 0226 DEB7      		in r29,__SP_H__
 676               	/* prologue: function */
 677               	/* frame size = 1 */
 678               	/* stack size = 3 */
 679               	.L__stack_usage = 3
 170:usart.c       ****     uint8_t data;
 171:usart.c       ****     if(xQueueReceive(USART_ReadQueue,&data,1) == pdTRUE){
 681               	.LM50:
 682 0228 8091 0000 		lds r24,USART_ReadQueue
 683 022c 9091 0000 		lds r25,USART_ReadQueue+1
 684 0230 20E0      		ldi r18,0
 685 0232 41E0      		ldi r20,lo8(1)
 686 0234 50E0      		ldi r21,0
 687 0236 BE01      		movw r22,r28
 688 0238 6F5F      		subi r22,-1
 689 023a 7F4F      		sbci r23,-1
 690 023c 0E94 0000 		call xQueueGenericReceive
 691 0240 8130      		cpi r24,lo8(1)
 692 0242 01F4      		brne .L22
 172:usart.c       ****         //USART_AddToQueue('~');
 173:usart.c       ****         return data;
 694               	.LM51:
 695 0244 8981      		ldd r24,Y+1
 696 0246 00C0      		rjmp .L24
 697               	.L22:
 174:usart.c       ****     } else {
 175:usart.c       ****         return 255;
 699               	.LM52:
 700 0248 8FEF      		ldi r24,lo8(-1)
 701               	.L24:
 702               	/* epilogue start */
 176:usart.c       ****     }
 177:usart.c       **** }
 704               	.LM53:
 705 024a 0F90      		pop __tmp_reg__
 706 024c DF91      		pop r29
 707 024e CF91      		pop r28
 708 0250 0895      		ret
 713               	.Lscope10:
 715               		.stabd	78,0,0
 717               	.global	sendACK
 719               	sendACK:
 720               		.stabd	46,0,0
 178:usart.c       **** 
 179:usart.c       **** void sendACK(){
 722               	.LM54:
 723               	.LFBB11:
 724 0252 CF93      		push r28
 725 0254 DF93      		push r29
 726 0256 CDB7      		in r28,__SP_L__
 727 0258 DEB7      		in r29,__SP_H__
 728               	/* prologue: function */
 729               	/* frame size = 0 */
 730               	/* stack size = 2 */
 731               	.L__stack_usage = 2
 180:usart.c       ****     USART_Write(ACK_BYTE);
 733               	.LM55:
 734 025a 80E8      		ldi r24,lo8(-128)
 735 025c 0E94 0000 		call USART_Write
 736               	/* epilogue start */
 181:usart.c       **** }
 738               	.LM56:
 739 0260 DF91      		pop r29
 740 0262 CF91      		pop r28
 741 0264 0895      		ret
 743               	.Lscope11:
 745               		.stabd	78,0,0
 747               	.global	sendNACK
 749               	sendNACK:
 750               		.stabd	46,0,0
 182:usart.c       **** 
 183:usart.c       **** void sendNACK(){
 752               	.LM57:
 753               	.LFBB12:
 754 0266 CF93      		push r28
 755 0268 DF93      		push r29
 756 026a CDB7      		in r28,__SP_L__
 757 026c DEB7      		in r29,__SP_H__
 758               	/* prologue: function */
 759               	/* frame size = 0 */
 760               	/* stack size = 2 */
 761               	.L__stack_usage = 2
 184:usart.c       ****     USART_Write(NACK_BYTE);
 763               	.LM58:
 764 026e 80E0      		ldi r24,0
 765 0270 0E94 0000 		call USART_Write
 766               	/* epilogue start */
 185:usart.c       **** }
 768               	.LM59:
 769 0274 DF91      		pop r29
 770 0276 CF91      		pop r28
 771 0278 0895      		ret
 773               	.Lscope12:
 775               		.stabd	78,0,0
 779               	.global	recievePayload
 781               	recievePayload:
 782               		.stabd	46,0,0
 186:usart.c       **** 
 187:usart.c       **** int recievePayload(int size,unsigned char *buffer){
 784               	.LM60:
 785               	.LFBB13:
 786 027a CF93      		push r28
 787 027c DF93      		push r29
 788 027e CDB7      		in r28,__SP_L__
 789 0280 DEB7      		in r29,__SP_H__
 790 0282 2D97      		sbiw r28,13
 791 0284 0FB6      		in __tmp_reg__,__SREG__
 792 0286 F894      		cli
 793 0288 DEBF      		out __SP_H__,r29
 794 028a 0FBE      		out __SREG__,__tmp_reg__
 795 028c CDBF      		out __SP_L__,r28
 796               	/* prologue: function */
 797               	/* frame size = 13 */
 798               	/* stack size = 15 */
 799               	.L__stack_usage = 15
 800 028e 9B87      		std Y+11,r25
 801 0290 8A87      		std Y+10,r24
 802 0292 7D87      		std Y+13,r23
 803 0294 6C87      		std Y+12,r22
 188:usart.c       **** 
 189:usart.c       **** 	int bytesRecieved = 0;
 805               	.LM61:
 806 0296 1A82      		std Y+2,__zero_reg__
 807 0298 1982      		std Y+1,__zero_reg__
 190:usart.c       **** 	int numTries = 0;
 809               	.LM62:
 810 029a 1C82      		std Y+4,__zero_reg__
 811 029c 1B82      		std Y+3,__zero_reg__
 191:usart.c       **** 	const int maxNumTries = 3;
 813               	.LM63:
 814 029e 83E0      		ldi r24,lo8(3)
 815 02a0 90E0      		ldi r25,0
 816 02a2 9887      		std Y+8,r25
 817 02a4 8F83      		std Y+7,r24
 192:usart.c       **** 	unsigned char data;
 193:usart.c       **** 	int timeout;
 194:usart.c       **** 
 195:usart.c       **** 	while(numTries < maxNumTries){
 819               	.LM64:
 820 02a6 00C0      		rjmp .L28
 821               	.L39:
 196:usart.c       **** 		while(bytesRecieved < size){
 823               	.LM65:
 824 02a8 00C0      		rjmp .L29
 825               	.L34:
 197:usart.c       **** 			timeout = 50;
 827               	.LM66:
 828 02aa 82E3      		ldi r24,lo8(50)
 829 02ac 90E0      		ldi r25,0
 830 02ae 9E83      		std Y+6,r25
 831 02b0 8D83      		std Y+5,r24
 198:usart.c       **** 			while ( !(UCSR0A & (1<<RXC0)) ){
 833               	.LM67:
 834 02b2 00C0      		rjmp .L30
 835               	.L33:
 199:usart.c       ****   				timeout--;
 837               	.LM68:
 838 02b4 8D81      		ldd r24,Y+5
 839 02b6 9E81      		ldd r25,Y+6
 840 02b8 0197      		sbiw r24,1
 841 02ba 9E83      		std Y+6,r25
 842 02bc 8D83      		std Y+5,r24
 200:usart.c       ****      			if(timeout == 0){
 844               	.LM69:
 845 02be 8D81      		ldd r24,Y+5
 846 02c0 9E81      		ldd r25,Y+6
 847 02c2 0097      		sbiw r24,0
 848 02c4 01F4      		brne .L31
 201:usart.c       **** 					return -1;
 850               	.LM70:
 851 02c6 8FEF      		ldi r24,lo8(-1)
 852 02c8 9FEF      		ldi r25,lo8(-1)
 853 02ca 00C0      		rjmp .L32
 854               	.L31:
 202:usart.c       ****      			}
 203:usart.c       ****      			vTaskDelay(1);
 856               	.LM71:
 857 02cc 81E0      		ldi r24,lo8(1)
 858 02ce 90E0      		ldi r25,0
 859 02d0 0E94 0000 		call vTaskDelay
 860               	.L30:
 198:usart.c       ****   				timeout--;
 862               	.LM72:
 863 02d4 80EC      		ldi r24,lo8(-64)
 864 02d6 90E0      		ldi r25,0
 865 02d8 FC01      		movw r30,r24
 866 02da 8081      		ld r24,Z
 867 02dc 8823      		tst r24
 868 02de 04F4      		brge .L33
 204:usart.c       ****    		}
 205:usart.c       **** 			data = UDR0;
 870               	.LM73:
 871 02e0 86EC      		ldi r24,lo8(-58)
 872 02e2 90E0      		ldi r25,0
 873 02e4 FC01      		movw r30,r24
 874 02e6 8081      		ld r24,Z
 875 02e8 8987      		std Y+9,r24
 206:usart.c       **** 			buffer[bytesRecieved] = data;
 877               	.LM74:
 878 02ea 8981      		ldd r24,Y+1
 879 02ec 9A81      		ldd r25,Y+2
 880 02ee 2C85      		ldd r18,Y+12
 881 02f0 3D85      		ldd r19,Y+13
 882 02f2 820F      		add r24,r18
 883 02f4 931F      		adc r25,r19
 884 02f6 2985      		ldd r18,Y+9
 885 02f8 FC01      		movw r30,r24
 886 02fa 2083      		st Z,r18
 207:usart.c       **** 			bytesRecieved++;
 888               	.LM75:
 889 02fc 8981      		ldd r24,Y+1
 890 02fe 9A81      		ldd r25,Y+2
 891 0300 0196      		adiw r24,1
 892 0302 9A83      		std Y+2,r25
 893 0304 8983      		std Y+1,r24
 894               	.L29:
 196:usart.c       **** 			timeout = 50;
 896               	.LM76:
 897 0306 2981      		ldd r18,Y+1
 898 0308 3A81      		ldd r19,Y+2
 899 030a 8A85      		ldd r24,Y+10
 900 030c 9B85      		ldd r25,Y+11
 901 030e 2817      		cp r18,r24
 902 0310 3907      		cpc r19,r25
 903 0312 04F0      		brlt .L34
 208:usart.c       **** 		}
 209:usart.c       **** 		
 210:usart.c       **** 		timeout = 50;
 905               	.LM77:
 906 0314 82E3      		ldi r24,lo8(50)
 907 0316 90E0      		ldi r25,0
 908 0318 9E83      		std Y+6,r25
 909 031a 8D83      		std Y+5,r24
 211:usart.c       **** 		while ( !(UCSR0A & (1<<RXC0)) ){
 911               	.LM78:
 912 031c 00C0      		rjmp .L35
 913               	.L37:
 212:usart.c       ****   			timeout--;
 915               	.LM79:
 916 031e 8D81      		ldd r24,Y+5
 917 0320 9E81      		ldd r25,Y+6
 918 0322 0197      		sbiw r24,1
 919 0324 9E83      		std Y+6,r25
 920 0326 8D83      		std Y+5,r24
 213:usart.c       ****      		if(timeout == 0){
 922               	.LM80:
 923 0328 8D81      		ldd r24,Y+5
 924 032a 9E81      		ldd r25,Y+6
 925 032c 0097      		sbiw r24,0
 926 032e 01F4      		brne .L36
 214:usart.c       **** 				return -1;
 928               	.LM81:
 929 0330 8FEF      		ldi r24,lo8(-1)
 930 0332 9FEF      		ldi r25,lo8(-1)
 931 0334 00C0      		rjmp .L32
 932               	.L36:
 215:usart.c       ****      		}
 216:usart.c       ****      		vTaskDelay(1);
 934               	.LM82:
 935 0336 81E0      		ldi r24,lo8(1)
 936 0338 90E0      		ldi r25,0
 937 033a 0E94 0000 		call vTaskDelay
 938               	.L35:
 211:usart.c       ****   			timeout--;
 940               	.LM83:
 941 033e 80EC      		ldi r24,lo8(-64)
 942 0340 90E0      		ldi r25,0
 943 0342 FC01      		movw r30,r24
 944 0344 8081      		ld r24,Z
 945 0346 8823      		tst r24
 946 0348 04F4      		brge .L37
 217:usart.c       ****    	}	
 218:usart.c       **** 		data = UDR0;
 948               	.LM84:
 949 034a 86EC      		ldi r24,lo8(-58)
 950 034c 90E0      		ldi r25,0
 951 034e FC01      		movw r30,r24
 952 0350 8081      		ld r24,Z
 953 0352 8987      		std Y+9,r24
 219:usart.c       **** 		if(data != calcChecksum(buffer,size)){
 955               	.LM85:
 956 0354 2A85      		ldd r18,Y+10
 957 0356 8C85      		ldd r24,Y+12
 958 0358 9D85      		ldd r25,Y+13
 959 035a 622F      		mov r22,r18
 960 035c 0E94 0000 		call calcChecksum
 961 0360 982F      		mov r25,r24
 962 0362 8985      		ldd r24,Y+9
 963 0364 9817      		cp r25,r24
 964 0366 01F0      		breq .L38
 220:usart.c       **** 			sendNACK();
 966               	.LM86:
 967 0368 0E94 0000 		call sendNACK
 221:usart.c       **** 			numTries++;
 969               	.LM87:
 970 036c 8B81      		ldd r24,Y+3
 971 036e 9C81      		ldd r25,Y+4
 972 0370 0196      		adiw r24,1
 973 0372 9C83      		std Y+4,r25
 974 0374 8B83      		std Y+3,r24
 975 0376 00C0      		rjmp .L28
 976               	.L38:
 222:usart.c       **** 		} else {
 223:usart.c       **** 			sendACK();
 978               	.LM88:
 979 0378 0E94 0000 		call sendACK
 224:usart.c       **** 			return 0;
 981               	.LM89:
 982 037c 80E0      		ldi r24,0
 983 037e 90E0      		ldi r25,0
 984 0380 00C0      		rjmp .L32
 985               	.L28:
 195:usart.c       **** 		while(bytesRecieved < size){
 987               	.LM90:
 988 0382 2B81      		ldd r18,Y+3
 989 0384 3C81      		ldd r19,Y+4
 990 0386 8F81      		ldd r24,Y+7
 991 0388 9885      		ldd r25,Y+8
 992 038a 2817      		cp r18,r24
 993 038c 3907      		cpc r19,r25
 994 038e 04F4      		brge .+2
 995 0390 00C0      		rjmp .L39
 225:usart.c       **** 		}
 226:usart.c       **** 	}
 227:usart.c       **** 	return -1;
 997               	.LM91:
 998 0392 8FEF      		ldi r24,lo8(-1)
 999 0394 9FEF      		ldi r25,lo8(-1)
 1000               	.L32:
 1001               	/* epilogue start */
 228:usart.c       **** }
 1003               	.LM92:
 1004 0396 2D96      		adiw r28,13
 1005 0398 0FB6      		in __tmp_reg__,__SREG__
 1006 039a F894      		cli
 1007 039c DEBF      		out __SP_H__,r29
 1008 039e 0FBE      		out __SREG__,__tmp_reg__
 1009 03a0 CDBF      		out __SP_L__,r28
 1010 03a2 DF91      		pop r29
 1011 03a4 CF91      		pop r28
 1012 03a6 0895      		ret
 1021               	.Lscope13:
 1023               		.stabd	78,0,0
 1025               	.global	vTaskUSARTRead
 1027               	vTaskUSARTRead:
 1028               		.stabd	46,0,0
 229:usart.c       **** 
 230:usart.c       **** void vTaskUSARTRead(){
 1030               	.LM93:
 1031               	.LFBB14:
 1032 03a8 CF93      		push r28
 1033 03aa DF93      		push r29
 1034 03ac CDB7      		in r28,__SP_L__
 1035 03ae DEB7      		in r29,__SP_H__
 1036 03b0 CA55      		subi r28,90
 1037 03b2 D109      		sbc r29,__zero_reg__
 1038 03b4 0FB6      		in __tmp_reg__,__SREG__
 1039 03b6 F894      		cli
 1040 03b8 DEBF      		out __SP_H__,r29
 1041 03ba 0FBE      		out __SREG__,__tmp_reg__
 1042 03bc CDBF      		out __SP_L__,r28
 1043               	/* prologue: function */
 1044               	/* frame size = 90 */
 1045               	/* stack size = 92 */
 1046               	.L__stack_usage = 92
 231:usart.c       **** 
 232:usart.c       ****     unsigned char bytesRecieved;
 233:usart.c       ****     uint8_t data;
 234:usart.c       ****     uint8_t buffer[16];
 235:usart.c       ****     unsigned char size;
 236:usart.c       ****     unsigned int timeout;
 237:usart.c       **** 
 238:usart.c       **** 	DDRB = 0xFF;
 1048               	.LM94:
 1049 03be 84E2      		ldi r24,lo8(36)
 1050 03c0 90E0      		ldi r25,0
 1051 03c2 2FEF      		ldi r18,lo8(-1)
 1052 03c4 FC01      		movw r30,r24
 1053 03c6 2083      		st Z,r18
 1054               	.L49:
 239:usart.c       **** 
 240:usart.c       ****     Command command;
 241:usart.c       ****     Response response;
 242:usart.c       ****     while(1){
 243:usart.c       ****         bytesRecieved = 0;
 1056               	.LM95:
 1057 03c8 1982      		std Y+1,__zero_reg__
 244:usart.c       ****         timeout = 30;
 1059               	.LM96:
 1060 03ca 8EE1      		ldi r24,lo8(30)
 1061 03cc 90E0      		ldi r25,0
 1062 03ce 9B83      		std Y+3,r25
 1063 03d0 8A83      		std Y+2,r24
 245:usart.c       ****         while(bytesRecieved < 4){
 1065               	.LM97:
 1066 03d2 00C0      		rjmp .L41
 1067               	.L45:
 246:usart.c       ****             
 247:usart.c       ****             while ( !(UCSR0A & (1<<RXC0)) ){
 1069               	.LM98:
 1070 03d4 00C0      		rjmp .L42
 1071               	.L44:
 248:usart.c       ****                 timeout--;
 1073               	.LM99:
 1074 03d6 8A81      		ldd r24,Y+2
 1075 03d8 9B81      		ldd r25,Y+3
 1076 03da 0197      		sbiw r24,1
 1077 03dc 9B83      		std Y+3,r25
 1078 03de 8A83      		std Y+2,r24
 249:usart.c       ****                 if(timeout == 0){
 1080               	.LM100:
 1081 03e0 8A81      		ldd r24,Y+2
 1082 03e2 9B81      		ldd r25,Y+3
 1083 03e4 0097      		sbiw r24,0
 1084 03e6 01F4      		brne .L43
 250:usart.c       ****                     bytesRecieved = 0;
 1086               	.LM101:
 1087 03e8 1982      		std Y+1,__zero_reg__
 251:usart.c       ****                     timeout = 30;
 1089               	.LM102:
 1090 03ea 8EE1      		ldi r24,lo8(30)
 1091 03ec 90E0      		ldi r25,0
 1092 03ee 9B83      		std Y+3,r25
 1093 03f0 8A83      		std Y+2,r24
 1094               	.L43:
 252:usart.c       ****                 }
 253:usart.c       ****                 vTaskDelay(1);
 1096               	.LM103:
 1097 03f2 81E0      		ldi r24,lo8(1)
 1098 03f4 90E0      		ldi r25,0
 1099 03f6 0E94 0000 		call vTaskDelay
 1100               	.L42:
 247:usart.c       ****                 timeout--;
 1102               	.LM104:
 1103 03fa 80EC      		ldi r24,lo8(-64)
 1104 03fc 90E0      		ldi r25,0
 1105 03fe FC01      		movw r30,r24
 1106 0400 8081      		ld r24,Z
 1107 0402 8823      		tst r24
 1108 0404 04F4      		brge .L44
 254:usart.c       ****             }
 255:usart.c       ****             data = UDR0;
 1110               	.LM105:
 1111 0406 86EC      		ldi r24,lo8(-58)
 1112 0408 90E0      		ldi r25,0
 1113 040a FC01      		movw r30,r24
 1114 040c 8081      		ld r24,Z
 1115 040e 8D83      		std Y+5,r24
 256:usart.c       ****             buffer[bytesRecieved] = data;
 1117               	.LM106:
 1118 0410 8981      		ldd r24,Y+1
 1119 0412 882F      		mov r24,r24
 1120 0414 90E0      		ldi r25,0
 1121 0416 9E01      		movw r18,r28
 1122 0418 2A5F      		subi r18,-6
 1123 041a 3F4F      		sbci r19,-1
 1124 041c 820F      		add r24,r18
 1125 041e 931F      		adc r25,r19
 1126 0420 2D81      		ldd r18,Y+5
 1127 0422 FC01      		movw r30,r24
 1128 0424 2083      		st Z,r18
 257:usart.c       ****             bytesRecieved++;        
 1130               	.LM107:
 1131 0426 8981      		ldd r24,Y+1
 1132 0428 8F5F      		subi r24,lo8(-(1))
 1133 042a 8983      		std Y+1,r24
 1134               	.L41:
 245:usart.c       ****             
 1136               	.LM108:
 1137 042c 8981      		ldd r24,Y+1
 1138 042e 8430      		cpi r24,lo8(4)
 1139 0430 00F0      		brlo .L45
 258:usart.c       ****         }
 259:usart.c       **** 
 260:usart.c       ****         if(calcChecksum(buffer,3) != buffer[3]){
 1141               	.LM109:
 1142 0432 CE01      		movw r24,r28
 1143 0434 0696      		adiw r24,6
 1144 0436 63E0      		ldi r22,lo8(3)
 1145 0438 0E94 0000 		call calcChecksum
 1146 043c 982F      		mov r25,r24
 1147 043e 8985      		ldd r24,Y+9
 1148 0440 9817      		cp r25,r24
 1149 0442 01F0      		breq .L46
 261:usart.c       ****             sendNACK();
 1151               	.LM110:
 1152 0444 0E94 0000 		call sendNACK
 262:usart.c       ****             bytesRecieved = 0;
 1154               	.LM111:
 1155 0448 1982      		std Y+1,__zero_reg__
 1156 044a 00C0      		rjmp .L47
 1157               	.L46:
 263:usart.c       ****         } else {
 264:usart.c       ****             sendACK();
 1159               	.LM112:
 1160 044c 0E94 0000 		call sendACK
 265:usart.c       ****             bytesRecieved = 0;
 1162               	.LM113:
 1163 0450 1982      		std Y+1,__zero_reg__
 266:usart.c       **** 				command.groupID = buffer[0];
 1165               	.LM114:
 1166 0452 8E81      		ldd r24,Y+6
 1167 0454 8E8B      		std Y+22,r24
 267:usart.c       **** 				command.cmd = buffer[1];
 1169               	.LM115:
 1170 0456 8F81      		ldd r24,Y+7
 1171 0458 8F8B      		std Y+23,r24
 268:usart.c       **** 				size = buffer[2];
 1173               	.LM116:
 1174 045a 8885      		ldd r24,Y+8
 1175 045c 8C83      		std Y+4,r24
 269:usart.c       **** 
 270:usart.c       **** 				if(size > 0){ //No dynamic memory allocations. 16 is the size of the buffer
 1177               	.LM117:
 1178 045e 8C81      		ldd r24,Y+4
 1179 0460 8823      		tst r24
 1180 0462 01F0      		breq .L48
 271:usart.c       **** 					if(recievePayload(size,command.payload) == -1){
 1182               	.LM118:
 1183 0464 8C81      		ldd r24,Y+4
 1184 0466 882F      		mov r24,r24
 1185 0468 90E0      		ldi r25,0
 1186 046a 9E01      		movw r18,r28
 1187 046c 2A5E      		subi r18,-22
 1188 046e 3F4F      		sbci r19,-1
 1189 0470 2D5F      		subi r18,-3
 1190 0472 3F4F      		sbci r19,-1
 1191 0474 B901      		movw r22,r18
 1192 0476 0E94 0000 		call recievePayload
 1193 047a 8F3F      		cpi r24,-1
 1194 047c FFEF      		ldi r31,-1
 1195 047e 9F07      		cpc r25,r31
 1196 0480 01F4      		brne .L48
 272:usart.c       **** 						continue;	//Restart comms
 1198               	.LM119:
 1199 0482 00C0      		rjmp .L47
 1200               	.L48:
 273:usart.c       **** 					}
 274:usart.c       **** 				}
 275:usart.c       **** 				
 276:usart.c       ****  
 277:usart.c       ****             processCommand(&command,&response);
 1202               	.LM120:
 1203 0484 9E01      		movw r18,r28
 1204 0486 275C      		subi r18,-57
 1205 0488 3F4F      		sbci r19,-1
 1206 048a CE01      		movw r24,r28
 1207 048c 4696      		adiw r24,22
 1208 048e B901      		movw r22,r18
 1209 0490 0E94 0000 		call processCommand
 278:usart.c       ****             sendResponse(&response);
 1211               	.LM121:
 1212 0494 CE01      		movw r24,r28
 1213 0496 C996      		adiw r24,57
 1214 0498 0E94 0000 		call sendResponse
 1215               	.L47:
 279:usart.c       **** 
 280:usart.c       ****         }
 281:usart.c       **** 
 282:usart.c       ****     }
 1217               	.LM122:
 1218 049c 00C0      		rjmp .L49
 1229               	.Lscope14:
 1231               		.stabd	78,0,0
 1234               	.global	sendResponse
 1236               	sendResponse:
 1237               		.stabd	46,0,0
 283:usart.c       **** 
 284:usart.c       **** }
 285:usart.c       **** 
 286:usart.c       **** int sendResponse(Response* response){
 1239               	.LM123:
 1240               	.LFBB15:
 1241 049e CF93      		push r28
 1242 04a0 DF93      		push r29
 1243 04a2 CDB7      		in r28,__SP_L__
 1244 04a4 DEB7      		in r29,__SP_H__
 1245 04a6 2897      		sbiw r28,8
 1246 04a8 0FB6      		in __tmp_reg__,__SREG__
 1247 04aa F894      		cli
 1248 04ac DEBF      		out __SP_H__,r29
 1249 04ae 0FBE      		out __SREG__,__tmp_reg__
 1250 04b0 CDBF      		out __SP_L__,r28
 1251               	/* prologue: function */
 1252               	/* frame size = 8 */
 1253               	/* stack size = 10 */
 1254               	.L__stack_usage = 10
 1255 04b2 9887      		std Y+8,r25
 1256 04b4 8F83      		std Y+7,r24
 287:usart.c       ****     uint8_t checksumBuffer[2];
 288:usart.c       ****     int i;
 289:usart.c       ****     int timeout = 50;
 1258               	.LM124:
 1259 04b6 82E3      		ldi r24,lo8(50)
 1260 04b8 90E0      		ldi r25,0
 1261 04ba 9C83      		std Y+4,r25
 1262 04bc 8B83      		std Y+3,r24
 1263               	.L57:
 290:usart.c       ****     while(1){
 291:usart.c       ****         	USART_Write(response->commandBack);
 1265               	.LM125:
 1266 04be 8F81      		ldd r24,Y+7
 1267 04c0 9885      		ldd r25,Y+8
 1268 04c2 FC01      		movw r30,r24
 1269 04c4 8081      		ld r24,Z
 1270 04c6 0E94 0000 		call USART_Write
 292:usart.c       **** 			vTaskDelay(1);
 1272               	.LM126:
 1273 04ca 81E0      		ldi r24,lo8(1)
 1274 04cc 90E0      		ldi r25,0
 1275 04ce 0E94 0000 		call vTaskDelay
 293:usart.c       ****         	USART_Write(response->size);
 1277               	.LM127:
 1278 04d2 8F81      		ldd r24,Y+7
 1279 04d4 9885      		ldd r25,Y+8
 1280 04d6 FC01      		movw r30,r24
 1281 04d8 8181      		ldd r24,Z+1
 1282 04da 0E94 0000 		call USART_Write
 294:usart.c       **** 			vTaskDelay(1);
 1284               	.LM128:
 1285 04de 81E0      		ldi r24,lo8(1)
 1286 04e0 90E0      		ldi r25,0
 1287 04e2 0E94 0000 		call vTaskDelay
 295:usart.c       ****         	checksumBuffer[0] = response->commandBack;
 1289               	.LM129:
 1290 04e6 8F81      		ldd r24,Y+7
 1291 04e8 9885      		ldd r25,Y+8
 1292 04ea FC01      		movw r30,r24
 1293 04ec 8081      		ld r24,Z
 1294 04ee 8D83      		std Y+5,r24
 296:usart.c       ****         	checksumBuffer[1] = response->size;
 1296               	.LM130:
 1297 04f0 8F81      		ldd r24,Y+7
 1298 04f2 9885      		ldd r25,Y+8
 1299 04f4 FC01      		movw r30,r24
 1300 04f6 8181      		ldd r24,Z+1
 1301 04f8 8E83      		std Y+6,r24
 297:usart.c       ****         	USART_Write((uint8_t)calcChecksum(checksumBuffer,2));
 1303               	.LM131:
 1304 04fa CE01      		movw r24,r28
 1305 04fc 0596      		adiw r24,5
 1306 04fe 62E0      		ldi r22,lo8(2)
 1307 0500 0E94 0000 		call calcChecksum
 1308 0504 0E94 0000 		call USART_Write
 298:usart.c       ****         	switch(waitForAck()){
 1310               	.LM132:
 1311 0508 0E94 0000 		call waitForAck
 1312 050c 9927      		clr r25
 1313 050e 87FD      		sbrc r24,7
 1314 0510 9095      		com r25
 1315 0512 0097      		sbiw r24,0
 1316 0514 01F0      		breq .L52
 1317 0516 8130      		cpi r24,1
 1318 0518 9105      		cpc r25,__zero_reg__
 1319 051a 01F0      		breq .L61
 1320 051c 8F3F      		cpi r24,-1
 1321 051e FFEF      		ldi r31,-1
 1322 0520 9F07      		cpc r25,r31
 1323 0522 01F4      		brne .L51
 299:usart.c       ****         	case 1:
 300:usart.c       ****            	goto outOfWhile;
 301:usart.c       ****         	case -1:
 302:usart.c       ****            	return -1;
 1325               	.LM133:
 1326 0524 8FEF      		ldi r24,lo8(-1)
 1327 0526 9FEF      		ldi r25,lo8(-1)
 1328 0528 00C0      		rjmp .L60
 1329               	.L52:
 303:usart.c       ****         	case 0:
 304:usart.c       ****            	timeout--;
 1331               	.LM134:
 1332 052a 8B81      		ldd r24,Y+3
 1333 052c 9C81      		ldd r25,Y+4
 1334 052e 0197      		sbiw r24,1
 1335 0530 9C83      		std Y+4,r25
 1336 0532 8B83      		std Y+3,r24
 305:usart.c       ****            	if(!timeout){
 1338               	.LM135:
 1339 0534 8B81      		ldd r24,Y+3
 1340 0536 9C81      		ldd r25,Y+4
 1341 0538 0097      		sbiw r24,0
 1342 053a 01F4      		brne .L51
 306:usart.c       ****               	return -1;
 1344               	.LM136:
 1345 053c 8FEF      		ldi r24,lo8(-1)
 1346 053e 9FEF      		ldi r25,lo8(-1)
 1347 0540 00C0      		rjmp .L60
 1348               	.L51:
 307:usart.c       ****            	}
 308:usart.c       ****         	}
 309:usart.c       ****     }
 1350               	.LM137:
 1351 0542 00C0      		rjmp .L57
 1352               	.L61:
 300:usart.c       ****         	case -1:
 1354               	.LM138:
 1355 0544 0000      		nop
 1356               	.L55:
 310:usart.c       **** 
 311:usart.c       ****     outOfWhile:
 312:usart.c       **** 
 313:usart.c       **** 
 314:usart.c       ****     for(i=0;i<response->size;i++){
 1358               	.LM139:
 1359 0546 1A82      		std Y+2,__zero_reg__
 1360 0548 1982      		std Y+1,__zero_reg__
 1361 054a 00C0      		rjmp .L58
 1362               	.L59:
 315:usart.c       ****         USART_Write(response->payload[i]);
 1364               	.LM140:
 1365 054c 2F81      		ldd r18,Y+7
 1366 054e 3885      		ldd r19,Y+8
 1367 0550 8981      		ldd r24,Y+1
 1368 0552 9A81      		ldd r25,Y+2
 1369 0554 820F      		add r24,r18
 1370 0556 931F      		adc r25,r19
 1371 0558 0296      		adiw r24,2
 1372 055a FC01      		movw r30,r24
 1373 055c 8081      		ld r24,Z
 1374 055e 0E94 0000 		call USART_Write
 316:usart.c       **** 			vTaskDelay(1);
 1376               	.LM141:
 1377 0562 81E0      		ldi r24,lo8(1)
 1378 0564 90E0      		ldi r25,0
 1379 0566 0E94 0000 		call vTaskDelay
 314:usart.c       ****         USART_Write(response->payload[i]);
 1381               	.LM142:
 1382 056a 8981      		ldd r24,Y+1
 1383 056c 9A81      		ldd r25,Y+2
 1384 056e 0196      		adiw r24,1
 1385 0570 9A83      		std Y+2,r25
 1386 0572 8983      		std Y+1,r24
 1387               	.L58:
 314:usart.c       ****         USART_Write(response->payload[i]);
 1389               	.LM143:
 1390 0574 8F81      		ldd r24,Y+7
 1391 0576 9885      		ldd r25,Y+8
 1392 0578 FC01      		movw r30,r24
 1393 057a 8181      		ldd r24,Z+1
 1394 057c 282F      		mov r18,r24
 1395 057e 3327      		clr r19
 1396 0580 27FD      		sbrc r18,7
 1397 0582 3095      		com r19
 1398 0584 8981      		ldd r24,Y+1
 1399 0586 9A81      		ldd r25,Y+2
 1400 0588 8217      		cp r24,r18
 1401 058a 9307      		cpc r25,r19
 1402 058c 04F0      		brlt .L59
 317:usart.c       **** 		  //USART_AddToQueue(0x30 | (i + 2));
 318:usart.c       ****         //USART_AddToQueue()
 319:usart.c       ****     }
 320:usart.c       ****     USART_Write(calcChecksum((uint8_t*)response->payload,response->size));
 1404               	.LM144:
 1405 058e 8F81      		ldd r24,Y+7
 1406 0590 9885      		ldd r25,Y+8
 1407 0592 FC01      		movw r30,r24
 1408 0594 8181      		ldd r24,Z+1
 1409 0596 282F      		mov r18,r24
 1410 0598 8F81      		ldd r24,Y+7
 1411 059a 9885      		ldd r25,Y+8
 1412 059c 0296      		adiw r24,2
 1413 059e 622F      		mov r22,r18
 1414 05a0 0E94 0000 		call calcChecksum
 1415 05a4 0E94 0000 		call USART_Write
 321:usart.c       **** 	 
 322:usart.c       **** 
 323:usart.c       ****     waitForAck();
 1417               	.LM145:
 1418 05a8 0E94 0000 		call waitForAck
 324:usart.c       **** 
 325:usart.c       ****     return 0;
 1420               	.LM146:
 1421 05ac 80E0      		ldi r24,0
 1422 05ae 90E0      		ldi r25,0
 1423               	.L60:
 1424               	/* epilogue start */
 326:usart.c       **** 
 327:usart.c       **** }
 1426               	.LM147:
 1427 05b0 2896      		adiw r28,8
 1428 05b2 0FB6      		in __tmp_reg__,__SREG__
 1429 05b4 F894      		cli
 1430 05b6 DEBF      		out __SP_H__,r29
 1431 05b8 0FBE      		out __SREG__,__tmp_reg__
 1432 05ba CDBF      		out __SP_L__,r28
 1433 05bc DF91      		pop r29
 1434 05be CF91      		pop r28
 1435 05c0 0895      		ret
 1442               	.Lscope15:
 1444               		.stabd	78,0,0
 1446               	.global	waitForAck
 1448               	waitForAck:
 1449               		.stabd	46,0,0
 328:usart.c       **** 
 329:usart.c       **** char waitForAck(){
 1451               	.LM148:
 1452               	.LFBB16:
 1453 05c2 CF93      		push r28
 1454 05c4 DF93      		push r29
 1455 05c6 1F92      		push __zero_reg__
 1456 05c8 1F92      		push __zero_reg__
 1457 05ca CDB7      		in r28,__SP_L__
 1458 05cc DEB7      		in r29,__SP_H__
 1459               	/* prologue: function */
 1460               	/* frame size = 2 */
 1461               	/* stack size = 4 */
 1462               	.L__stack_usage = 4
 330:usart.c       ****     int timeout = 5000;
 1464               	.LM149:
 1465 05ce 88E8      		ldi r24,lo8(-120)
 1466 05d0 93E1      		ldi r25,lo8(19)
 1467 05d2 9A83      		std Y+2,r25
 1468 05d4 8983      		std Y+1,r24
 331:usart.c       ****     while ( !(UCSR2A & (1<<RXC2)) ){
 1470               	.LM150:
 1471 05d6 00C0      		rjmp .L63
 1472               	.L65:
 332:usart.c       ****         timeout--;
 1474               	.LM151:
 1475 05d8 8981      		ldd r24,Y+1
 1476 05da 9A81      		ldd r25,Y+2
 1477 05dc 0197      		sbiw r24,1
 1478 05de 9A83      		std Y+2,r25
 1479 05e0 8983      		std Y+1,r24
 333:usart.c       ****         if(!timeout){
 1481               	.LM152:
 1482 05e2 8981      		ldd r24,Y+1
 1483 05e4 9A81      		ldd r25,Y+2
 1484 05e6 0097      		sbiw r24,0
 1485 05e8 01F4      		brne .L63
 334:usart.c       ****             return -1;
 1487               	.LM153:
 1488 05ea 8FEF      		ldi r24,lo8(-1)
 1489 05ec 00C0      		rjmp .L64
 1490               	.L63:
 331:usart.c       ****         timeout--;
 1492               	.LM154:
 1493 05ee 80ED      		ldi r24,lo8(-48)
 1494 05f0 90E0      		ldi r25,0
 1495 05f2 FC01      		movw r30,r24
 1496 05f4 8081      		ld r24,Z
 1497 05f6 8823      		tst r24
 1498 05f8 04F4      		brge .L65
 335:usart.c       ****         }
 336:usart.c       ****     }
 337:usart.c       ****     if(UDR2 == ACK_BYTE){
 1500               	.LM155:
 1501 05fa 86ED      		ldi r24,lo8(-42)
 1502 05fc 90E0      		ldi r25,0
 1503 05fe FC01      		movw r30,r24
 1504 0600 8081      		ld r24,Z
 1505 0602 8038      		cpi r24,lo8(-128)
 1506 0604 01F4      		brne .L66
 338:usart.c       ****         return 1;
 1508               	.LM156:
 1509 0606 81E0      		ldi r24,lo8(1)
 1510 0608 00C0      		rjmp .L64
 1511               	.L66:
 339:usart.c       ****     } else {
 340:usart.c       ****         return 0;
 1513               	.LM157:
 1514 060a 80E0      		ldi r24,0
 1515               	.L64:
 1516               	/* epilogue start */
 341:usart.c       ****     }
 342:usart.c       **** }
 1518               	.LM158:
 1519 060c 0F90      		pop __tmp_reg__
 1520 060e 0F90      		pop __tmp_reg__
 1521 0610 DF91      		pop r29
 1522 0612 CF91      		pop r28
 1523 0614 0895      		ret
 1528               	.Lscope16:
 1530               		.stabd	78,0,0
 1534               	.global	calcChecksum
 1536               	calcChecksum:
 1537               		.stabd	46,0,0
 343:usart.c       **** 
 344:usart.c       **** uint8_t calcChecksum(uint8_t* buffer, uint8_t size){
 1539               	.LM159:
 1540               	.LFBB17:
 1541 0616 CF93      		push r28
 1542 0618 DF93      		push r29
 1543 061a 00D0      		rcall .
 1544 061c 00D0      		rcall .
 1545 061e CDB7      		in r28,__SP_L__
 1546 0620 DEB7      		in r29,__SP_H__
 1547               	/* prologue: function */
 1548               	/* frame size = 6 */
 1549               	/* stack size = 8 */
 1550               	.L__stack_usage = 8
 1551 0622 9D83      		std Y+5,r25
 1552 0624 8C83      		std Y+4,r24
 1553 0626 6E83      		std Y+6,r22
 345:usart.c       ****    uint8_t checksum = 0;
 1555               	.LM160:
 1556 0628 1982      		std Y+1,__zero_reg__
 346:usart.c       ****    int i;   
 347:usart.c       ****    for(i = 0; i < size; i++) {
 1558               	.LM161:
 1559 062a 1B82      		std Y+3,__zero_reg__
 1560 062c 1A82      		std Y+2,__zero_reg__
 1561 062e 00C0      		rjmp .L68
 1562               	.L69:
 348:usart.c       ****        checksum += *(buffer++);
 1564               	.LM162:
 1565 0630 8C81      		ldd r24,Y+4
 1566 0632 9D81      		ldd r25,Y+5
 1567 0634 9C01      		movw r18,r24
 1568 0636 2F5F      		subi r18,-1
 1569 0638 3F4F      		sbci r19,-1
 1570 063a 3D83      		std Y+5,r19
 1571 063c 2C83      		std Y+4,r18
 1572 063e FC01      		movw r30,r24
 1573 0640 8081      		ld r24,Z
 1574 0642 9981      		ldd r25,Y+1
 1575 0644 890F      		add r24,r25
 1576 0646 8983      		std Y+1,r24
 347:usart.c       ****        checksum += *(buffer++);
 1578               	.LM163:
 1579 0648 8A81      		ldd r24,Y+2
 1580 064a 9B81      		ldd r25,Y+3
 1581 064c 0196      		adiw r24,1
 1582 064e 9B83      		std Y+3,r25
 1583 0650 8A83      		std Y+2,r24
 1584               	.L68:
 347:usart.c       ****        checksum += *(buffer++);
 1586               	.LM164:
 1587 0652 8E81      		ldd r24,Y+6
 1588 0654 282F      		mov r18,r24
 1589 0656 30E0      		ldi r19,0
 1590 0658 8A81      		ldd r24,Y+2
 1591 065a 9B81      		ldd r25,Y+3
 1592 065c 8217      		cp r24,r18
 1593 065e 9307      		cpc r25,r19
 1594 0660 04F0      		brlt .L69
 349:usart.c       ****    }
 350:usart.c       ****    return checksum;
 1596               	.LM165:
 1597 0662 8981      		ldd r24,Y+1
 1598               	/* epilogue start */
 351:usart.c       **** }
 1600               	.LM166:
 1601 0664 2696      		adiw r28,6
 1602 0666 0FB6      		in __tmp_reg__,__SREG__
 1603 0668 F894      		cli
 1604 066a DEBF      		out __SP_H__,r29
 1605 066c 0FBE      		out __SREG__,__tmp_reg__
 1606 066e CDBF      		out __SP_L__,r28
 1607 0670 DF91      		pop r29
 1608 0672 CF91      		pop r28
 1609 0674 0895      		ret
 1615               	.Lscope17:
 1617               		.stabd	78,0,0
 1622               	.Letext0:
 1623               		.ident	"GCC: (GNU) 4.9.0"
 1624               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usart.c
     /tmp/ccu9zZhZ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccu9zZhZ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccu9zZhZ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccu9zZhZ.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccu9zZhZ.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccu9zZhZ.s:7      *ABS*:0000000000000001 __zero_reg__
                            *COM*:0000000000000002 USART_WriteQueue
                            *COM*:0000000000000002 USART_ReadQueue
                            *COM*:0000000000000002 USART_WriteQueueLog
     /tmp/ccu9zZhZ.s:163    .text:0000000000000000 USART_Init
     /tmp/ccu9zZhZ.s:244    .text:000000000000006a USART_Write
     /tmp/ccu9zZhZ.s:296    .text:000000000000009e USART_Read
     /tmp/ccu9zZhZ.s:341    .text:00000000000000c2 USART_AddToQueue
     /tmp/ccu9zZhZ.s:382    .text:00000000000000ee USART_TransmitString
     /tmp/ccu9zZhZ.s:441    .text:000000000000012c vTaskUSARTWrite
     /tmp/ccu9zZhZ.s:504    .text:0000000000000170 USART_LogChar
     /tmp/ccu9zZhZ.s:545    .text:000000000000019c USART_LogString
     /tmp/ccu9zZhZ.s:604    .text:00000000000001da vTaskUSARTLog
     /tmp/ccu9zZhZ.s:666    .text:000000000000021e USART_GetChar
     /tmp/ccu9zZhZ.s:719    .text:0000000000000252 sendACK
     /tmp/ccu9zZhZ.s:749    .text:0000000000000266 sendNACK
     /tmp/ccu9zZhZ.s:781    .text:000000000000027a recievePayload
     /tmp/ccu9zZhZ.s:1536   .text:0000000000000616 calcChecksum
     /tmp/ccu9zZhZ.s:1027   .text:00000000000003a8 vTaskUSARTRead
     /tmp/ccu9zZhZ.s:1236   .text:000000000000049e sendResponse
     /tmp/ccu9zZhZ.s:1448   .text:00000000000005c2 waitForAck

UNDEFINED SYMBOLS
xQueueGenericCreate
xQueueGenericSend
xQueueGenericReceive
vTaskDelay
processCommand
__do_clear_bss
