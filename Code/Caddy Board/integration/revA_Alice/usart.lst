   1               		.file	"usart.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 138               		.comm	USART_WriteQueue,2,1
 139               		.comm	USART_ReadQueue,2,1
 140               		.comm	USART_WriteQueueLog,2,1
 144               	.global	USART_Init
 146               	USART_Init:
 147               		.stabd	46,0,0
   1:usart.c       **** /***************************
   2:usart.c       **** *
   3:usart.c       **** * Filename: usart.cpp
   4:usart.c       **** *
   5:usart.c       **** * Description: Provides print methods for various
   6:usart.c       **** *  datatypes using USART.
   7:usart.c       **** *
   8:usart.c       **** * Authors: Doug Gallatin and Jason Schray
   9:usart.c       **** * Edited by: Tim Peters & James Humphrey
  10:usart.c       **** *
  11:usart.c       **** ***************************/
  12:usart.c       **** 
  13:usart.c       **** #include "FreeRTOS.h"
  14:usart.c       **** #include "semphr.h" 
  15:usart.c       **** #include "queue.h"
  16:usart.c       **** #include "protocol.h"
  17:usart.c       **** 
  18:usart.c       **** #include <stdlib.h>
  19:usart.c       **** #include <stdint.h>
  20:usart.c       **** #include <avr/io.h>
  21:usart.c       **** #include <avr/interrupt.h>
  22:usart.c       **** 
  23:usart.c       **** #include "usart.h"
  24:usart.c       **** 
  25:usart.c       **** #define NACK_BYTE 0 
  26:usart.c       **** #define ACK_BYTE	128
  27:usart.c       **** 
  28:usart.c       **** xQueueHandle USART_WriteQueue;
  29:usart.c       **** xQueueHandle USART_ReadQueue;
  30:usart.c       **** xQueueHandle USART_WriteQueueLog;
  31:usart.c       **** 
  32:usart.c       **** 
  33:usart.c       **** 
  34:usart.c       **** /************************************
  35:usart.c       **** * Procedure: usart_init
  36:usart.c       **** *  
  37:usart.c       **** * Description: Initializes the USART module with 
  38:usart.c       **** *  the specified baud rate and clk speed.
  39:usart.c       **** *
  40:usart.c       **** * Param buadin: The desired Baud rate.
  41:usart.c       **** * Param clk_seedin: The clk speed of the ATmega328p
  42:usart.c       **** ************************************/
  43:usart.c       **** void USART_Init(uint16_t baudin, uint32_t clk_speedin) {
 149               	.LM0:
 150               	.LFBB1:
 151 0000 CF93      		push r28
 152 0002 DF93      		push r29
 153 0004 00D0      		rcall .
 154 0006 00D0      		rcall .
 155 0008 CDB7      		in r28,__SP_L__
 156 000a DEB7      		in r29,__SP_H__
 157               	/* prologue: function */
 158               	/* frame size = 6 */
 159               	/* stack size = 8 */
 160               	.L__stack_usage = 8
 161 000c 9A83      		std Y+2,r25
 162 000e 8983      		std Y+1,r24
 163 0010 4B83      		std Y+3,r20
 164 0012 5C83      		std Y+4,r21
 165 0014 6D83      		std Y+5,r22
 166 0016 7E83      		std Y+6,r23
  44:usart.c       ****     USART_WriteQueue = xQueueCreate(64,sizeof(uint8_t));
 168               	.LM1:
 169 0018 40E0      		ldi r20,0
 170 001a 61E0      		ldi r22,lo8(1)
 171 001c 80E4      		ldi r24,lo8(64)
 172 001e 0E94 0000 		call xQueueGenericCreate
 173 0022 9093 0000 		sts USART_WriteQueue+1,r25
 174 0026 8093 0000 		sts USART_WriteQueue,r24
  45:usart.c       ****     USART_ReadQueue = xQueueCreate(8,sizeof(uint8_t));
 176               	.LM2:
 177 002a 40E0      		ldi r20,0
 178 002c 61E0      		ldi r22,lo8(1)
 179 002e 88E0      		ldi r24,lo8(8)
 180 0030 0E94 0000 		call xQueueGenericCreate
 181 0034 9093 0000 		sts USART_ReadQueue+1,r25
 182 0038 8093 0000 		sts USART_ReadQueue,r24
  46:usart.c       **** 
  47:usart.c       ****     //uint32_t ubrr = clk_speedin/(16UL)/baudin-1;
  48:usart.c       ****     //UBRR1H = (unsigned char)(ubrr>>8) ;// & 0x7F;
  49:usart.c       ****     //UBRR1L = (unsigned char)ubrr;
  50:usart.c       ****     
  51:usart.c       ****     UBRR0H = 0; //115200
 184               	.LM3:
 185 003c 85EC      		ldi r24,lo8(-59)
 186 003e 90E0      		ldi r25,0
 187 0040 FC01      		movw r30,r24
 188 0042 1082      		st Z,__zero_reg__
  52:usart.c       ****     UBRR0L = 8;
 190               	.LM4:
 191 0044 84EC      		ldi r24,lo8(-60)
 192 0046 90E0      		ldi r25,0
 193 0048 28E0      		ldi r18,lo8(8)
 194 004a FC01      		movw r30,r24
 195 004c 2083      		st Z,r18
  53:usart.c       **** 
  54:usart.c       ****     /* Enable receiver and transmitter */
  55:usart.c       ****     UCSR0B = (1<<RXEN0)|(1<<TXEN0);//|(1<<RXCIE1);
 197               	.LM5:
 198 004e 81EC      		ldi r24,lo8(-63)
 199 0050 90E0      		ldi r25,0
 200 0052 28E1      		ldi r18,lo8(24)
 201 0054 FC01      		movw r30,r24
 202 0056 2083      		st Z,r18
  56:usart.c       ****     /* Set frame format: 8data, 1stop bit */
  57:usart.c       ****     UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 204               	.LM6:
 205 0058 82EC      		ldi r24,lo8(-62)
 206 005a 90E0      		ldi r25,0
 207 005c 26E0      		ldi r18,lo8(6)
 208 005e FC01      		movw r30,r24
 209 0060 2083      		st Z,r18
  58:usart.c       **** 	 // clear U2X0 for Synchronous operation
  59:usart.c       ****     UCSR0A &= ~(1<<U2X0);
 211               	.LM7:
 212 0062 80EC      		ldi r24,lo8(-64)
 213 0064 90E0      		ldi r25,0
 214 0066 20EC      		ldi r18,lo8(-64)
 215 0068 30E0      		ldi r19,0
 216 006a F901      		movw r30,r18
 217 006c 2081      		ld r18,Z
 218 006e 2D7F      		andi r18,lo8(-3)
 219 0070 FC01      		movw r30,r24
 220 0072 2083      		st Z,r18
 221               	/* epilogue start */
  60:usart.c       **** 
  61:usart.c       ****     //UCSR0B |= (1<<UDRIE0);
  62:usart.c       **** 
  63:usart.c       ****     //PORTB = 0xFF;
  64:usart.c       **** 
  65:usart.c       ****     //UART0 Logging
  66:usart.c       **** 
  67:usart.c       ****     /*USART_WriteQueueLog = xQueueCreate(32,sizeof(uint8_t));
  68:usart.c       **** 
  69:usart.c       ****     ubrr = clk_speedin/(16UL)/baudin-1;
  70:usart.c       ****     UBRR0H = (unsigned char)(ubrr>>8) ;// & 0x7F;
  71:usart.c       ****     UBRR0L = (unsigned char)ubrr;
  72:usart.c       ****     
  73:usart.c       ****     //UBRR0H = 0; //115200
  74:usart.c       ****     //UBRR0L = 8;
  75:usart.c       **** 
  76:usart.c       ****     /* Enable receiver and transmitter */
  77:usart.c       ****     //UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  78:usart.c       ****     /* Set frame format: 8data, 1stop bit */
  79:usart.c       ****     //UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  80:usart.c       ****     // clear U2X0 for Synchronous operation
  81:usart.c       ****     //UCSR0A &= ~(1<<U2X0);*/
  82:usart.c       **** 
  83:usart.c       **** }
 223               	.LM8:
 224 0074 2696      		adiw r28,6
 225 0076 0FB6      		in __tmp_reg__,__SREG__
 226 0078 F894      		cli
 227 007a DEBF      		out __SP_H__,r29
 228 007c 0FBE      		out __SREG__,__tmp_reg__
 229 007e CDBF      		out __SP_L__,r28
 230 0080 DF91      		pop r29
 231 0082 CF91      		pop r28
 232 0084 0895      		ret
 234               	.Lscope1:
 236               		.stabd	78,0,0
 239               	.global	USART_Write
 241               	USART_Write:
 242               		.stabd	46,0,0
  84:usart.c       **** 
  85:usart.c       **** /*the send function will put 8bits on the trans line. */
  86:usart.c       **** void USART_Write(uint8_t data) {
 244               	.LM9:
 245               	.LFBB2:
 246 0086 CF93      		push r28
 247 0088 DF93      		push r29
 248 008a 1F92      		push __zero_reg__
 249 008c CDB7      		in r28,__SP_L__
 250 008e DEB7      		in r29,__SP_H__
 251               	/* prologue: function */
 252               	/* frame size = 1 */
 253               	/* stack size = 3 */
 254               	.L__stack_usage = 3
 255 0090 8983      		std Y+1,r24
  87:usart.c       **** 		/* Wait for empty transmit buffer */
  88:usart.c       **** 		while ( !( UCSR0A & (1<<UDRE0)) )
 257               	.LM10:
 258 0092 0000      		nop
 259               	.L3:
 261               	.LM11:
 262 0094 80EC      		ldi r24,lo8(-64)
 263 0096 90E0      		ldi r25,0
 264 0098 FC01      		movw r30,r24
 265 009a 8081      		ld r24,Z
 266 009c 882F      		mov r24,r24
 267 009e 90E0      		ldi r25,0
 268 00a0 8072      		andi r24,32
 269 00a2 9927      		clr r25
 270 00a4 0097      		sbiw r24,0
 271 00a6 01F0      		breq .L3
  89:usart.c       **** 		;
  90:usart.c       **** 		/* Put data into buffer, sends the data */
  91:usart.c       **** 		UDR0 = data;
 273               	.LM12:
 274 00a8 86EC      		ldi r24,lo8(-58)
 275 00aa 90E0      		ldi r25,0
 276 00ac 2981      		ldd r18,Y+1
 277 00ae FC01      		movw r30,r24
 278 00b0 2083      		st Z,r18
 279               	/* epilogue start */
  92:usart.c       **** }
 281               	.LM13:
 282 00b2 0F90      		pop __tmp_reg__
 283 00b4 DF91      		pop r29
 284 00b6 CF91      		pop r28
 285 00b8 0895      		ret
 287               	.Lscope2:
 289               		.stabd	78,0,0
 292               	.global	USART_Write_Unprotected
 294               	USART_Write_Unprotected:
 295               		.stabd	46,0,0
  93:usart.c       **** 
  94:usart.c       **** /*the send function will put 8bits on the trans line. */
  95:usart.c       **** void USART_Write_Unprotected(uint8_t data) {
 297               	.LM14:
 298               	.LFBB3:
 299 00ba CF93      		push r28
 300 00bc DF93      		push r29
 301 00be 1F92      		push __zero_reg__
 302 00c0 CDB7      		in r28,__SP_L__
 303 00c2 DEB7      		in r29,__SP_H__
 304               	/* prologue: function */
 305               	/* frame size = 1 */
 306               	/* stack size = 3 */
 307               	.L__stack_usage = 3
 308 00c4 8983      		std Y+1,r24
  96:usart.c       **** 	/* Wait for empty transmit buffer */
  97:usart.c       **** 	while ( !( UCSR0A & (1<<UDRE0)) )
 310               	.LM15:
 311 00c6 0000      		nop
 312               	.L5:
 314               	.LM16:
 315 00c8 80EC      		ldi r24,lo8(-64)
 316 00ca 90E0      		ldi r25,0
 317 00cc FC01      		movw r30,r24
 318 00ce 8081      		ld r24,Z
 319 00d0 882F      		mov r24,r24
 320 00d2 90E0      		ldi r25,0
 321 00d4 8072      		andi r24,32
 322 00d6 9927      		clr r25
 323 00d8 0097      		sbiw r24,0
 324 00da 01F0      		breq .L5
  98:usart.c       **** 	;
  99:usart.c       **** 	/* Put data into buffer, sends the data */
 100:usart.c       **** 	UDR0 = data;
 326               	.LM17:
 327 00dc 86EC      		ldi r24,lo8(-58)
 328 00de 90E0      		ldi r25,0
 329 00e0 2981      		ldd r18,Y+1
 330 00e2 FC01      		movw r30,r24
 331 00e4 2083      		st Z,r18
 332               	/* epilogue start */
 101:usart.c       **** }
 334               	.LM18:
 335 00e6 0F90      		pop __tmp_reg__
 336 00e8 DF91      		pop r29
 337 00ea CF91      		pop r28
 338 00ec 0895      		ret
 340               	.Lscope3:
 342               		.stabd	78,0,0
 344               	.global	USART_Read
 346               	USART_Read:
 347               		.stabd	46,0,0
 102:usart.c       **** 
 103:usart.c       **** /* the receive data function. Note that this a blocking call
 104:usart.c       **** Therefore you may not get control back after this is called 
 105:usart.c       **** until a much later time. It may be helpful to use the 
 106:usart.c       **** istheredata() function to check before calling this function
 107:usart.c       ****         @return 8bit data packet from sender
 108:usart.c       **** */
 109:usart.c       **** uint8_t USART_Read(void) {
 349               	.LM19:
 350               	.LFBB4:
 351 00ee CF93      		push r28
 352 00f0 DF93      		push r29
 353 00f2 CDB7      		in r28,__SP_L__
 354 00f4 DEB7      		in r29,__SP_H__
 355               	/* prologue: function */
 356               	/* frame size = 0 */
 357               	/* stack size = 2 */
 358               	.L__stack_usage = 2
 110:usart.c       ****     /* Wait for data to be received */
 111:usart.c       ****     while ( !(UCSR2A & (1<<RXC2)) )
 360               	.LM20:
 361 00f6 0000      		nop
 362               	.L7:
 364               	.LM21:
 365 00f8 80ED      		ldi r24,lo8(-48)
 366 00fa 90E0      		ldi r25,0
 367 00fc FC01      		movw r30,r24
 368 00fe 8081      		ld r24,Z
 369 0100 8823      		tst r24
 370 0102 04F4      		brge .L7
 112:usart.c       ****         ;
 113:usart.c       ****     /* Get and return received data from buffer */
 114:usart.c       ****     return UDR2;
 372               	.LM22:
 373 0104 86ED      		ldi r24,lo8(-42)
 374 0106 90E0      		ldi r25,0
 375 0108 FC01      		movw r30,r24
 376 010a 8081      		ld r24,Z
 377               	/* epilogue start */
 115:usart.c       **** }
 379               	.LM23:
 380 010c DF91      		pop r29
 381 010e CF91      		pop r28
 382 0110 0895      		ret
 384               	.Lscope4:
 386               		.stabd	78,0,0
 388               	.global	__vector_36
 390               	__vector_36:
 391               		.stabd	46,0,0
 116:usart.c       **** 
 117:usart.c       **** 
 118:usart.c       **** ISR(USART1_RX_vect){
 393               	.LM24:
 394               	.LFBB5:
 395 0112 1F92      		push r1
 396 0114 0F92      		push r0
 397 0116 0090 5F00 		lds r0,95
 398 011a 0F92      		push r0
 399 011c 1124      		clr __zero_reg__
 400 011e 0090 5B00 		lds r0,91
 401 0122 0F92      		push r0
 402 0124 8F93      		push r24
 403 0126 9F93      		push r25
 404 0128 EF93      		push r30
 405 012a FF93      		push r31
 406 012c CF93      		push r28
 407 012e DF93      		push r29
 408 0130 1F92      		push __zero_reg__
 409 0132 CDB7      		in r28,__SP_L__
 410 0134 DEB7      		in r29,__SP_H__
 411               	/* prologue: Signal */
 412               	/* frame size = 1 */
 413               	/* stack size = 11 */
 414               	.L__stack_usage = 11
 119:usart.c       ****     uint8_t data;
 120:usart.c       ****     data = UDR1;
 416               	.LM25:
 417 0136 8EEC      		ldi r24,lo8(-50)
 418 0138 90E0      		ldi r25,0
 419 013a FC01      		movw r30,r24
 420 013c 8081      		ld r24,Z
 421 013e 8983      		std Y+1,r24
 422               	/* epilogue start */
 121:usart.c       **** 
 122:usart.c       ****     //while(!(UCSR1A & (1<<UDRE1)));
 123:usart.c       ****     //UDR1 = data;
 124:usart.c       ****     
 125:usart.c       **** 
 126:usart.c       ****   //  USART_AddToQueue(data);
 127:usart.c       ****     //xQueueSendToBackFromISR(USART_ReadQueue,&data,NULL);
 128:usart.c       **** }
 424               	.LM26:
 425 0140 0F90      		pop __tmp_reg__
 426 0142 DF91      		pop r29
 427 0144 CF91      		pop r28
 428 0146 FF91      		pop r31
 429 0148 EF91      		pop r30
 430 014a 9F91      		pop r25
 431 014c 8F91      		pop r24
 432 014e 0F90      		pop r0
 433 0150 0092 5B00 		sts 91,r0
 434 0154 0F90      		pop r0
 435 0156 0092 5F00 		sts 95,r0
 436 015a 0F90      		pop r0
 437 015c 1F90      		pop r1
 438 015e 1895      		reti
 443               	.Lscope5:
 445               		.stabd	78,0,0
 448               	.global	USART_AddToQueue
 450               	USART_AddToQueue:
 451               		.stabd	46,0,0
 129:usart.c       **** 
 130:usart.c       **** void USART_AddToQueue(uint8_t data){
 453               	.LM27:
 454               	.LFBB6:
 455 0160 CF93      		push r28
 456 0162 DF93      		push r29
 457 0164 1F92      		push __zero_reg__
 458 0166 CDB7      		in r28,__SP_L__
 459 0168 DEB7      		in r29,__SP_H__
 460               	/* prologue: function */
 461               	/* frame size = 1 */
 462               	/* stack size = 3 */
 463               	.L__stack_usage = 3
 464 016a 8983      		std Y+1,r24
 131:usart.c       ****     
 132:usart.c       ****     xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);
 466               	.LM28:
 467 016c 8091 0000 		lds r24,USART_WriteQueue
 468 0170 9091 0000 		lds r25,USART_WriteQueue+1
 469 0174 20E0      		ldi r18,0
 470 0176 4FEF      		ldi r20,lo8(-1)
 471 0178 5FEF      		ldi r21,lo8(-1)
 472 017a BE01      		movw r22,r28
 473 017c 6F5F      		subi r22,-1
 474 017e 7F4F      		sbci r23,-1
 475 0180 0E94 0000 		call xQueueGenericSend
 476               	/* epilogue start */
 133:usart.c       **** 
 134:usart.c       **** }
 478               	.LM29:
 479 0184 0F90      		pop __tmp_reg__
 480 0186 DF91      		pop r29
 481 0188 CF91      		pop r28
 482 018a 0895      		ret
 484               	.Lscope6:
 486               		.stabd	78,0,0
 489               	.global	USART_TransmitString
 491               	USART_TransmitString:
 492               		.stabd	46,0,0
 135:usart.c       **** 
 136:usart.c       **** void USART_TransmitString(char* str){
 494               	.LM30:
 495               	.LFBB7:
 496 018c CF93      		push r28
 497 018e DF93      		push r29
 498 0190 1F92      		push __zero_reg__
 499 0192 1F92      		push __zero_reg__
 500 0194 CDB7      		in r28,__SP_L__
 501 0196 DEB7      		in r29,__SP_H__
 502               	/* prologue: function */
 503               	/* frame size = 2 */
 504               	/* stack size = 4 */
 505               	.L__stack_usage = 4
 506 0198 9A83      		std Y+2,r25
 507 019a 8983      		std Y+1,r24
 137:usart.c       ****     while(*str) {
 509               	.LM31:
 510 019c 00C0      		rjmp .L12
 511               	.L13:
 138:usart.c       ****         USART_AddToQueue(*str);
 513               	.LM32:
 514 019e 8981      		ldd r24,Y+1
 515 01a0 9A81      		ldd r25,Y+2
 516 01a2 FC01      		movw r30,r24
 517 01a4 8081      		ld r24,Z
 518 01a6 0E94 0000 		call USART_AddToQueue
 139:usart.c       ****         str++;
 520               	.LM33:
 521 01aa 8981      		ldd r24,Y+1
 522 01ac 9A81      		ldd r25,Y+2
 523 01ae 0196      		adiw r24,1
 524 01b0 9A83      		std Y+2,r25
 525 01b2 8983      		std Y+1,r24
 526               	.L12:
 137:usart.c       ****     while(*str) {
 528               	.LM34:
 529 01b4 8981      		ldd r24,Y+1
 530 01b6 9A81      		ldd r25,Y+2
 531 01b8 FC01      		movw r30,r24
 532 01ba 8081      		ld r24,Z
 533 01bc 8823      		tst r24
 534 01be 01F4      		brne .L13
 535               	/* epilogue start */
 140:usart.c       ****     }
 141:usart.c       **** }
 537               	.LM35:
 538 01c0 0F90      		pop __tmp_reg__
 539 01c2 0F90      		pop __tmp_reg__
 540 01c4 DF91      		pop r29
 541 01c6 CF91      		pop r28
 542 01c8 0895      		ret
 544               	.Lscope7:
 546               		.stabd	78,0,0
 549               	.global	vTaskUSARTWrite
 551               	vTaskUSARTWrite:
 552               		.stabd	46,0,0
 142:usart.c       **** 
 143:usart.c       **** void vTaskUSARTWrite(void *pvParameters){
 554               	.LM36:
 555               	.LFBB8:
 556 01ca CF93      		push r28
 557 01cc DF93      		push r29
 558 01ce 00D0      		rcall .
 559 01d0 CDB7      		in r28,__SP_L__
 560 01d2 DEB7      		in r29,__SP_H__
 561               	/* prologue: function */
 562               	/* frame size = 3 */
 563               	/* stack size = 5 */
 564               	.L__stack_usage = 5
 565 01d4 9B83      		std Y+3,r25
 566 01d6 8A83      		std Y+2,r24
 567               	.L16:
 144:usart.c       ****     uint8_t data;
 145:usart.c       ****     while(1){
 146:usart.c       ****     xQueueReceive(USART_WriteQueue,&data,portMAX_DELAY);
 569               	.LM37:
 570 01d8 8091 0000 		lds r24,USART_WriteQueue
 571 01dc 9091 0000 		lds r25,USART_WriteQueue+1
 572 01e0 20E0      		ldi r18,0
 573 01e2 4FEF      		ldi r20,lo8(-1)
 574 01e4 5FEF      		ldi r21,lo8(-1)
 575 01e6 BE01      		movw r22,r28
 576 01e8 6F5F      		subi r22,-1
 577 01ea 7F4F      		sbci r23,-1
 578 01ec 0E94 0000 		call xQueueGenericReceive
 147:usart.c       **** 
 148:usart.c       ****         while(!(UCSR1A & (1<<UDRE1)));
 580               	.LM38:
 581 01f0 0000      		nop
 582               	.L15:
 584               	.LM39:
 585 01f2 88EC      		ldi r24,lo8(-56)
 586 01f4 90E0      		ldi r25,0
 587 01f6 FC01      		movw r30,r24
 588 01f8 8081      		ld r24,Z
 589 01fa 882F      		mov r24,r24
 590 01fc 90E0      		ldi r25,0
 591 01fe 8072      		andi r24,32
 592 0200 9927      		clr r25
 593 0202 0097      		sbiw r24,0
 594 0204 01F0      		breq .L15
 149:usart.c       ****         UDR1 = data;
 596               	.LM40:
 597 0206 8EEC      		ldi r24,lo8(-50)
 598 0208 90E0      		ldi r25,0
 599 020a 2981      		ldd r18,Y+1
 600 020c FC01      		movw r30,r24
 601 020e 2083      		st Z,r18
 150:usart.c       **** 
 151:usart.c       ****     }
 603               	.LM41:
 604 0210 00C0      		rjmp .L16
 609               	.Lscope8:
 611               		.stabd	78,0,0
 614               	.global	USART_LogChar
 616               	USART_LogChar:
 617               		.stabd	46,0,0
 152:usart.c       **** }
 153:usart.c       **** 
 154:usart.c       **** void USART_LogChar(uint8_t data){
 619               	.LM42:
 620               	.LFBB9:
 621 0212 CF93      		push r28
 622 0214 DF93      		push r29
 623 0216 1F92      		push __zero_reg__
 624 0218 CDB7      		in r28,__SP_L__
 625 021a DEB7      		in r29,__SP_H__
 626               	/* prologue: function */
 627               	/* frame size = 1 */
 628               	/* stack size = 3 */
 629               	.L__stack_usage = 3
 630 021c 8983      		std Y+1,r24
 155:usart.c       ****     xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
 632               	.LM43:
 633 021e 8091 0000 		lds r24,USART_WriteQueueLog
 634 0222 9091 0000 		lds r25,USART_WriteQueueLog+1
 635 0226 20E0      		ldi r18,0
 636 0228 4FEF      		ldi r20,lo8(-1)
 637 022a 5FEF      		ldi r21,lo8(-1)
 638 022c BE01      		movw r22,r28
 639 022e 6F5F      		subi r22,-1
 640 0230 7F4F      		sbci r23,-1
 641 0232 0E94 0000 		call xQueueGenericSend
 642               	/* epilogue start */
 156:usart.c       **** }
 644               	.LM44:
 645 0236 0F90      		pop __tmp_reg__
 646 0238 DF91      		pop r29
 647 023a CF91      		pop r28
 648 023c 0895      		ret
 650               	.Lscope9:
 652               		.stabd	78,0,0
 655               	.global	USART_LogString
 657               	USART_LogString:
 658               		.stabd	46,0,0
 157:usart.c       **** 
 158:usart.c       **** void USART_LogString(char* str){
 660               	.LM45:
 661               	.LFBB10:
 662 023e CF93      		push r28
 663 0240 DF93      		push r29
 664 0242 1F92      		push __zero_reg__
 665 0244 1F92      		push __zero_reg__
 666 0246 CDB7      		in r28,__SP_L__
 667 0248 DEB7      		in r29,__SP_H__
 668               	/* prologue: function */
 669               	/* frame size = 2 */
 670               	/* stack size = 4 */
 671               	.L__stack_usage = 4
 672 024a 9A83      		std Y+2,r25
 673 024c 8983      		std Y+1,r24
 159:usart.c       ****     while(*str){
 675               	.LM46:
 676 024e 00C0      		rjmp .L19
 677               	.L20:
 160:usart.c       ****         USART_LogChar(*str);
 679               	.LM47:
 680 0250 8981      		ldd r24,Y+1
 681 0252 9A81      		ldd r25,Y+2
 682 0254 FC01      		movw r30,r24
 683 0256 8081      		ld r24,Z
 684 0258 0E94 0000 		call USART_LogChar
 161:usart.c       ****         str++;
 686               	.LM48:
 687 025c 8981      		ldd r24,Y+1
 688 025e 9A81      		ldd r25,Y+2
 689 0260 0196      		adiw r24,1
 690 0262 9A83      		std Y+2,r25
 691 0264 8983      		std Y+1,r24
 692               	.L19:
 159:usart.c       ****     while(*str){
 694               	.LM49:
 695 0266 8981      		ldd r24,Y+1
 696 0268 9A81      		ldd r25,Y+2
 697 026a FC01      		movw r30,r24
 698 026c 8081      		ld r24,Z
 699 026e 8823      		tst r24
 700 0270 01F4      		brne .L20
 701               	/* epilogue start */
 162:usart.c       ****     }
 163:usart.c       **** }
 703               	.LM50:
 704 0272 0F90      		pop __tmp_reg__
 705 0274 0F90      		pop __tmp_reg__
 706 0276 DF91      		pop r29
 707 0278 CF91      		pop r28
 708 027a 0895      		ret
 710               	.Lscope10:
 712               		.stabd	78,0,0
 715               	.global	vTaskUSARTLog
 717               	vTaskUSARTLog:
 718               		.stabd	46,0,0
 164:usart.c       **** 
 165:usart.c       **** void vTaskUSARTLog(void *pvParameters){
 720               	.LM51:
 721               	.LFBB11:
 722 027c CF93      		push r28
 723 027e DF93      		push r29
 724 0280 00D0      		rcall .
 725 0282 CDB7      		in r28,__SP_L__
 726 0284 DEB7      		in r29,__SP_H__
 727               	/* prologue: function */
 728               	/* frame size = 3 */
 729               	/* stack size = 5 */
 730               	.L__stack_usage = 5
 731 0286 9B83      		std Y+3,r25
 732 0288 8A83      		std Y+2,r24
 733               	.L23:
 166:usart.c       ****     uint8_t data;
 167:usart.c       ****     while(1){
 168:usart.c       ****         xQueueReceive(USART_WriteQueueLog,&data,portMAX_DELAY);
 735               	.LM52:
 736 028a 8091 0000 		lds r24,USART_WriteQueueLog
 737 028e 9091 0000 		lds r25,USART_WriteQueueLog+1
 738 0292 20E0      		ldi r18,0
 739 0294 4FEF      		ldi r20,lo8(-1)
 740 0296 5FEF      		ldi r21,lo8(-1)
 741 0298 BE01      		movw r22,r28
 742 029a 6F5F      		subi r22,-1
 743 029c 7F4F      		sbci r23,-1
 744 029e 0E94 0000 		call xQueueGenericReceive
 169:usart.c       **** 
 170:usart.c       ****         while(!(UCSR0A & (1<<UDRE0)));
 746               	.LM53:
 747 02a2 0000      		nop
 748               	.L22:
 750               	.LM54:
 751 02a4 80EC      		ldi r24,lo8(-64)
 752 02a6 90E0      		ldi r25,0
 753 02a8 FC01      		movw r30,r24
 754 02aa 8081      		ld r24,Z
 755 02ac 882F      		mov r24,r24
 756 02ae 90E0      		ldi r25,0
 757 02b0 8072      		andi r24,32
 758 02b2 9927      		clr r25
 759 02b4 0097      		sbiw r24,0
 760 02b6 01F0      		breq .L22
 171:usart.c       ****         UDR0 = data;
 762               	.LM55:
 763 02b8 86EC      		ldi r24,lo8(-58)
 764 02ba 90E0      		ldi r25,0
 765 02bc 2981      		ldd r18,Y+1
 766 02be FC01      		movw r30,r24
 767 02c0 2083      		st Z,r18
 172:usart.c       **** 
 173:usart.c       ****     }
 769               	.LM56:
 770 02c2 00C0      		rjmp .L23
 775               	.Lscope11:
 777               		.stabd	78,0,0
 779               	.global	USART_GetChar
 781               	USART_GetChar:
 782               		.stabd	46,0,0
 174:usart.c       **** 
 175:usart.c       **** }
 176:usart.c       **** 
 177:usart.c       **** uint8_t USART_GetChar(){
 784               	.LM57:
 785               	.LFBB12:
 786 02c4 CF93      		push r28
 787 02c6 DF93      		push r29
 788 02c8 1F92      		push __zero_reg__
 789 02ca CDB7      		in r28,__SP_L__
 790 02cc DEB7      		in r29,__SP_H__
 791               	/* prologue: function */
 792               	/* frame size = 1 */
 793               	/* stack size = 3 */
 794               	.L__stack_usage = 3
 178:usart.c       ****     uint8_t data;
 179:usart.c       ****     if(xQueueReceive(USART_ReadQueue,&data,1) == pdTRUE){
 796               	.LM58:
 797 02ce 8091 0000 		lds r24,USART_ReadQueue
 798 02d2 9091 0000 		lds r25,USART_ReadQueue+1
 799 02d6 20E0      		ldi r18,0
 800 02d8 41E0      		ldi r20,lo8(1)
 801 02da 50E0      		ldi r21,0
 802 02dc BE01      		movw r22,r28
 803 02de 6F5F      		subi r22,-1
 804 02e0 7F4F      		sbci r23,-1
 805 02e2 0E94 0000 		call xQueueGenericReceive
 806 02e6 8130      		cpi r24,lo8(1)
 807 02e8 01F4      		brne .L25
 180:usart.c       ****         //USART_AddToQueue('~');
 181:usart.c       ****         return data;
 809               	.LM59:
 810 02ea 8981      		ldd r24,Y+1
 811 02ec 00C0      		rjmp .L27
 812               	.L25:
 182:usart.c       ****     } else {
 183:usart.c       ****         return 255;
 814               	.LM60:
 815 02ee 8FEF      		ldi r24,lo8(-1)
 816               	.L27:
 817               	/* epilogue start */
 184:usart.c       ****     }
 185:usart.c       **** }
 819               	.LM61:
 820 02f0 0F90      		pop __tmp_reg__
 821 02f2 DF91      		pop r29
 822 02f4 CF91      		pop r28
 823 02f6 0895      		ret
 828               	.Lscope12:
 830               		.stabd	78,0,0
 833               	.global	delay
 835               	delay:
 836               		.stabd	46,0,0
 186:usart.c       **** 
 187:usart.c       **** void delay(int a){
 838               	.LM62:
 839               	.LFBB13:
 840 02f8 CF93      		push r28
 841 02fa DF93      		push r29
 842 02fc 00D0      		rcall .
 843 02fe 1F92      		push __zero_reg__
 844 0300 CDB7      		in r28,__SP_L__
 845 0302 DEB7      		in r29,__SP_H__
 846               	/* prologue: function */
 847               	/* frame size = 4 */
 848               	/* stack size = 6 */
 849               	.L__stack_usage = 6
 850 0304 9C83      		std Y+4,r25
 851 0306 8B83      		std Y+3,r24
 188:usart.c       **** 	int i;
 189:usart.c       **** 	for(i = 0;i < a;i++);
 853               	.LM63:
 854 0308 1A82      		std Y+2,__zero_reg__
 855 030a 1982      		std Y+1,__zero_reg__
 856 030c 00C0      		rjmp .L29
 857               	.L30:
 859               	.LM64:
 860 030e 8981      		ldd r24,Y+1
 861 0310 9A81      		ldd r25,Y+2
 862 0312 0196      		adiw r24,1
 863 0314 9A83      		std Y+2,r25
 864 0316 8983      		std Y+1,r24
 865               	.L29:
 867               	.LM65:
 868 0318 2981      		ldd r18,Y+1
 869 031a 3A81      		ldd r19,Y+2
 870 031c 8B81      		ldd r24,Y+3
 871 031e 9C81      		ldd r25,Y+4
 872 0320 2817      		cp r18,r24
 873 0322 3907      		cpc r19,r25
 874 0324 04F0      		brlt .L30
 875               	/* epilogue start */
 190:usart.c       **** }
 877               	.LM66:
 878 0326 0F90      		pop __tmp_reg__
 879 0328 0F90      		pop __tmp_reg__
 880 032a 0F90      		pop __tmp_reg__
 881 032c 0F90      		pop __tmp_reg__
 882 032e DF91      		pop r29
 883 0330 CF91      		pop r28
 884 0332 0895      		ret
 889               	.Lscope13:
 891               		.stabd	78,0,0
 893               	.global	sendACK
 895               	sendACK:
 896               		.stabd	46,0,0
 191:usart.c       **** 
 192:usart.c       **** void sendACK(){
 898               	.LM67:
 899               	.LFBB14:
 900 0334 CF93      		push r28
 901 0336 DF93      		push r29
 902 0338 CDB7      		in r28,__SP_L__
 903 033a DEB7      		in r29,__SP_H__
 904               	/* prologue: function */
 905               	/* frame size = 0 */
 906               	/* stack size = 2 */
 907               	.L__stack_usage = 2
 193:usart.c       ****     USART_Write(ACK_BYTE);
 909               	.LM68:
 910 033c 80E8      		ldi r24,lo8(-128)
 911 033e 0E94 0000 		call USART_Write
 912               	/* epilogue start */
 194:usart.c       **** }
 914               	.LM69:
 915 0342 DF91      		pop r29
 916 0344 CF91      		pop r28
 917 0346 0895      		ret
 919               	.Lscope14:
 921               		.stabd	78,0,0
 923               	.global	sendNACK
 925               	sendNACK:
 926               		.stabd	46,0,0
 195:usart.c       **** 
 196:usart.c       **** void sendNACK(){
 928               	.LM70:
 929               	.LFBB15:
 930 0348 CF93      		push r28
 931 034a DF93      		push r29
 932 034c CDB7      		in r28,__SP_L__
 933 034e DEB7      		in r29,__SP_H__
 934               	/* prologue: function */
 935               	/* frame size = 0 */
 936               	/* stack size = 2 */
 937               	.L__stack_usage = 2
 197:usart.c       ****     USART_Write(NACK_BYTE);
 939               	.LM71:
 940 0350 80E0      		ldi r24,0
 941 0352 0E94 0000 		call USART_Write
 942               	/* epilogue start */
 198:usart.c       **** }
 944               	.LM72:
 945 0356 DF91      		pop r29
 946 0358 CF91      		pop r28
 947 035a 0895      		ret
 949               	.Lscope15:
 951               		.stabd	78,0,0
 955               	.global	recievePayload
 957               	recievePayload:
 958               		.stabd	46,0,0
 199:usart.c       **** 
 200:usart.c       **** int recievePayload(int size,unsigned char *buffer){
 960               	.LM73:
 961               	.LFBB16:
 962 035c CF93      		push r28
 963 035e DF93      		push r29
 964 0360 CDB7      		in r28,__SP_L__
 965 0362 DEB7      		in r29,__SP_H__
 966 0364 2D97      		sbiw r28,13
 967 0366 0FB6      		in __tmp_reg__,__SREG__
 968 0368 F894      		cli
 969 036a DEBF      		out __SP_H__,r29
 970 036c 0FBE      		out __SREG__,__tmp_reg__
 971 036e CDBF      		out __SP_L__,r28
 972               	/* prologue: function */
 973               	/* frame size = 13 */
 974               	/* stack size = 15 */
 975               	.L__stack_usage = 15
 976 0370 9B87      		std Y+11,r25
 977 0372 8A87      		std Y+10,r24
 978 0374 7D87      		std Y+13,r23
 979 0376 6C87      		std Y+12,r22
 201:usart.c       **** 
 202:usart.c       **** 	int bytesRecieved = 0;
 981               	.LM74:
 982 0378 1A82      		std Y+2,__zero_reg__
 983 037a 1982      		std Y+1,__zero_reg__
 203:usart.c       **** 	int numTries = 0;
 985               	.LM75:
 986 037c 1C82      		std Y+4,__zero_reg__
 987 037e 1B82      		std Y+3,__zero_reg__
 204:usart.c       **** 	const int maxNumTries = 3;
 989               	.LM76:
 990 0380 83E0      		ldi r24,lo8(3)
 991 0382 90E0      		ldi r25,0
 992 0384 9887      		std Y+8,r25
 993 0386 8F83      		std Y+7,r24
 205:usart.c       **** 	unsigned char data;
 206:usart.c       **** 	int timeout;
 207:usart.c       **** 
 208:usart.c       **** 	while(numTries < maxNumTries){
 995               	.LM77:
 996 0388 00C0      		rjmp .L34
 997               	.L45:
 209:usart.c       **** 		while(bytesRecieved < size){
 999               	.LM78:
 1000 038a 00C0      		rjmp .L35
 1001               	.L40:
 210:usart.c       **** 			timeout = 50;
 1003               	.LM79:
 1004 038c 82E3      		ldi r24,lo8(50)
 1005 038e 90E0      		ldi r25,0
 1006 0390 9E83      		std Y+6,r25
 1007 0392 8D83      		std Y+5,r24
 211:usart.c       **** 			while ( !(UCSR0A & (1<<RXC0)) ){
 1009               	.LM80:
 1010 0394 00C0      		rjmp .L36
 1011               	.L39:
 1012               	.LBB2:
 212:usart.c       ****   				timeout--;
 1014               	.LM81:
 1015 0396 8D81      		ldd r24,Y+5
 1016 0398 9E81      		ldd r25,Y+6
 1017 039a 0197      		sbiw r24,1
 1018 039c 9E83      		std Y+6,r25
 1019 039e 8D83      		std Y+5,r24
 213:usart.c       ****      			if(timeout == 0){
 1021               	.LM82:
 1022 03a0 8D81      		ldd r24,Y+5
 1023 03a2 9E81      		ldd r25,Y+6
 1024 03a4 0097      		sbiw r24,0
 1025 03a6 01F4      		brne .L37
 214:usart.c       **** 					return -1;
 1027               	.LM83:
 1028 03a8 8FEF      		ldi r24,lo8(-1)
 1029 03aa 9FEF      		ldi r25,lo8(-1)
 1030 03ac 00C0      		rjmp .L38
 1031               	.L37:
 215:usart.c       ****      			}
 216:usart.c       ****      			vTaskDelay(1);
 1033               	.LM84:
 1034 03ae 81E0      		ldi r24,lo8(1)
 1035 03b0 90E0      		ldi r25,0
 1036 03b2 0E94 0000 		call vTaskDelay
 1037               	.L36:
 1038               	.LBE2:
 211:usart.c       ****   				timeout--;
 1040               	.LM85:
 1041 03b6 80EC      		ldi r24,lo8(-64)
 1042 03b8 90E0      		ldi r25,0
 1043 03ba FC01      		movw r30,r24
 1044 03bc 8081      		ld r24,Z
 1045 03be 8823      		tst r24
 1046 03c0 04F4      		brge .L39
 217:usart.c       ****    		}
 218:usart.c       **** 			data = UDR0;
 1048               	.LM86:
 1049 03c2 86EC      		ldi r24,lo8(-58)
 1050 03c4 90E0      		ldi r25,0
 1051 03c6 FC01      		movw r30,r24
 1052 03c8 8081      		ld r24,Z
 1053 03ca 8987      		std Y+9,r24
 219:usart.c       **** 			buffer[bytesRecieved] = data;
 1055               	.LM87:
 1056 03cc 8981      		ldd r24,Y+1
 1057 03ce 9A81      		ldd r25,Y+2
 1058 03d0 2C85      		ldd r18,Y+12
 1059 03d2 3D85      		ldd r19,Y+13
 1060 03d4 820F      		add r24,r18
 1061 03d6 931F      		adc r25,r19
 1062 03d8 2985      		ldd r18,Y+9
 1063 03da FC01      		movw r30,r24
 1064 03dc 2083      		st Z,r18
 220:usart.c       **** 			bytesRecieved++;
 1066               	.LM88:
 1067 03de 8981      		ldd r24,Y+1
 1068 03e0 9A81      		ldd r25,Y+2
 1069 03e2 0196      		adiw r24,1
 1070 03e4 9A83      		std Y+2,r25
 1071 03e6 8983      		std Y+1,r24
 1072               	.L35:
 209:usart.c       **** 			timeout = 50;
 1074               	.LM89:
 1075 03e8 2981      		ldd r18,Y+1
 1076 03ea 3A81      		ldd r19,Y+2
 1077 03ec 8A85      		ldd r24,Y+10
 1078 03ee 9B85      		ldd r25,Y+11
 1079 03f0 2817      		cp r18,r24
 1080 03f2 3907      		cpc r19,r25
 1081 03f4 04F0      		brlt .L40
 221:usart.c       **** 		}
 222:usart.c       **** 		
 223:usart.c       **** 		timeout = 50;
 1083               	.LM90:
 1084 03f6 82E3      		ldi r24,lo8(50)
 1085 03f8 90E0      		ldi r25,0
 1086 03fa 9E83      		std Y+6,r25
 1087 03fc 8D83      		std Y+5,r24
 224:usart.c       **** 		while ( !(UCSR0A & (1<<RXC0)) ){
 1089               	.LM91:
 1090 03fe 00C0      		rjmp .L41
 1091               	.L43:
 1092               	.LBB3:
 225:usart.c       ****   			timeout--;
 1094               	.LM92:
 1095 0400 8D81      		ldd r24,Y+5
 1096 0402 9E81      		ldd r25,Y+6
 1097 0404 0197      		sbiw r24,1
 1098 0406 9E83      		std Y+6,r25
 1099 0408 8D83      		std Y+5,r24
 226:usart.c       ****      		if(timeout == 0){
 1101               	.LM93:
 1102 040a 8D81      		ldd r24,Y+5
 1103 040c 9E81      		ldd r25,Y+6
 1104 040e 0097      		sbiw r24,0
 1105 0410 01F4      		brne .L42
 227:usart.c       **** 				return -1;
 1107               	.LM94:
 1108 0412 8FEF      		ldi r24,lo8(-1)
 1109 0414 9FEF      		ldi r25,lo8(-1)
 1110 0416 00C0      		rjmp .L38
 1111               	.L42:
 228:usart.c       ****      		}
 229:usart.c       ****      		vTaskDelay(1);
 1113               	.LM95:
 1114 0418 81E0      		ldi r24,lo8(1)
 1115 041a 90E0      		ldi r25,0
 1116 041c 0E94 0000 		call vTaskDelay
 1117               	.L41:
 1118               	.LBE3:
 224:usart.c       ****   			timeout--;
 1120               	.LM96:
 1121 0420 80EC      		ldi r24,lo8(-64)
 1122 0422 90E0      		ldi r25,0
 1123 0424 FC01      		movw r30,r24
 1124 0426 8081      		ld r24,Z
 1125 0428 8823      		tst r24
 1126 042a 04F4      		brge .L43
 230:usart.c       ****    	}	
 231:usart.c       **** 		data = UDR0;
 1128               	.LM97:
 1129 042c 86EC      		ldi r24,lo8(-58)
 1130 042e 90E0      		ldi r25,0
 1131 0430 FC01      		movw r30,r24
 1132 0432 8081      		ld r24,Z
 1133 0434 8987      		std Y+9,r24
 232:usart.c       **** 		if(data != calcChecksum(buffer,size)){
 1135               	.LM98:
 1136 0436 2A85      		ldd r18,Y+10
 1137 0438 8C85      		ldd r24,Y+12
 1138 043a 9D85      		ldd r25,Y+13
 1139 043c 622F      		mov r22,r18
 1140 043e 0E94 0000 		call calcChecksum
 1141 0442 982F      		mov r25,r24
 1142 0444 8985      		ldd r24,Y+9
 1143 0446 9817      		cp r25,r24
 1144 0448 01F0      		breq .L44
 233:usart.c       **** 			sendNACK();
 1146               	.LM99:
 1147 044a 0E94 0000 		call sendNACK
 234:usart.c       **** 			numTries++;
 1149               	.LM100:
 1150 044e 8B81      		ldd r24,Y+3
 1151 0450 9C81      		ldd r25,Y+4
 1152 0452 0196      		adiw r24,1
 1153 0454 9C83      		std Y+4,r25
 1154 0456 8B83      		std Y+3,r24
 1155 0458 00C0      		rjmp .L34
 1156               	.L44:
 235:usart.c       **** 		} else {
 236:usart.c       **** 			sendACK();
 1158               	.LM101:
 1159 045a 0E94 0000 		call sendACK
 237:usart.c       **** 			return 0;
 1161               	.LM102:
 1162 045e 80E0      		ldi r24,0
 1163 0460 90E0      		ldi r25,0
 1164 0462 00C0      		rjmp .L38
 1165               	.L34:
 208:usart.c       **** 		while(bytesRecieved < size){
 1167               	.LM103:
 1168 0464 2B81      		ldd r18,Y+3
 1169 0466 3C81      		ldd r19,Y+4
 1170 0468 8F81      		ldd r24,Y+7
 1171 046a 9885      		ldd r25,Y+8
 1172 046c 2817      		cp r18,r24
 1173 046e 3907      		cpc r19,r25
 1174 0470 04F4      		brge .+2
 1175 0472 00C0      		rjmp .L45
 238:usart.c       **** 		}
 239:usart.c       **** 	}
 240:usart.c       **** 	return -1;
 1177               	.LM104:
 1178 0474 8FEF      		ldi r24,lo8(-1)
 1179 0476 9FEF      		ldi r25,lo8(-1)
 1180               	.L38:
 1181               	/* epilogue start */
 241:usart.c       **** }
 1183               	.LM105:
 1184 0478 2D96      		adiw r28,13
 1185 047a 0FB6      		in __tmp_reg__,__SREG__
 1186 047c F894      		cli
 1187 047e DEBF      		out __SP_H__,r29
 1188 0480 0FBE      		out __SREG__,__tmp_reg__
 1189 0482 CDBF      		out __SP_L__,r28
 1190 0484 DF91      		pop r29
 1191 0486 CF91      		pop r28
 1192 0488 0895      		ret
 1201               	.Lscope16:
 1203               		.stabd	78,0,0
 1206               	.global	vTaskUSARTRead
 1208               	vTaskUSARTRead:
 1209               		.stabd	46,0,0
 242:usart.c       **** 
 243:usart.c       **** void vTaskUSARTRead(void *pvParameters){
 1211               	.LM106:
 1212               	.LFBB17:
 1213 048a CF93      		push r28
 1214 048c DF93      		push r29
 1215 048e CDB7      		in r28,__SP_L__
 1216 0490 DEB7      		in r29,__SP_H__
 1217 0492 CC55      		subi r28,92
 1218 0494 D109      		sbc r29,__zero_reg__
 1219 0496 0FB6      		in __tmp_reg__,__SREG__
 1220 0498 F894      		cli
 1221 049a DEBF      		out __SP_H__,r29
 1222 049c 0FBE      		out __SREG__,__tmp_reg__
 1223 049e CDBF      		out __SP_L__,r28
 1224               	/* prologue: function */
 1225               	/* frame size = 92 */
 1226               	/* stack size = 94 */
 1227               	.L__stack_usage = 94
 1228 04a0 9E01      		movw r18,r28
 1229 04a2 255A      		subi r18,-91
 1230 04a4 3F4F      		sbci r19,-1
 1231 04a6 F901      		movw r30,r18
 1232 04a8 9183      		std Z+1,r25
 1233 04aa 8083      		st Z,r24
 244:usart.c       **** 
 245:usart.c       ****     char bytesRecieved;
 246:usart.c       ****     uint8_t rxData;
 247:usart.c       ****     uint8_t data;
 248:usart.c       ****     uint8_t buffer[16];
 249:usart.c       ****     unsigned char size;
 250:usart.c       ****     char groupID;
 251:usart.c       ****     char cmd;
 252:usart.c       ****     unsigned int timeout;
 253:usart.c       **** 
 254:usart.c       **** 	DDRB = 0xFF;
 1235               	.LM107:
 1236 04ac 84E2      		ldi r24,lo8(36)
 1237 04ae 90E0      		ldi r25,0
 1238 04b0 2FEF      		ldi r18,lo8(-1)
 1239 04b2 FC01      		movw r30,r24
 1240 04b4 2083      		st Z,r18
 1241               	.L55:
 1242               	.LBB4:
 255:usart.c       **** 
 256:usart.c       ****     Command command;
 257:usart.c       ****     Response response;
 258:usart.c       ****     while(1){
 259:usart.c       ****         bytesRecieved = 0;
 1244               	.LM108:
 1245 04b6 1982      		std Y+1,__zero_reg__
 260:usart.c       ****         int timeout = 30;
 1247               	.LM109:
 1248 04b8 8EE1      		ldi r24,lo8(30)
 1249 04ba 90E0      		ldi r25,0
 1250 04bc 9B83      		std Y+3,r25
 1251 04be 8A83      		std Y+2,r24
 261:usart.c       ****         while(bytesRecieved < 4){
 1253               	.LM110:
 1254 04c0 00C0      		rjmp .L47
 1255               	.L51:
 262:usart.c       ****             
 263:usart.c       ****             while ( !(UCSR0A & (1<<RXC0)) ){
 1257               	.LM111:
 1258 04c2 00C0      		rjmp .L48
 1259               	.L50:
 1260               	.LBB5:
 264:usart.c       ****                 timeout--;
 1262               	.LM112:
 1263 04c4 8A81      		ldd r24,Y+2
 1264 04c6 9B81      		ldd r25,Y+3
 1265 04c8 0197      		sbiw r24,1
 1266 04ca 9B83      		std Y+3,r25
 1267 04cc 8A83      		std Y+2,r24
 265:usart.c       ****                 if(timeout == 0){
 1269               	.LM113:
 1270 04ce 8A81      		ldd r24,Y+2
 1271 04d0 9B81      		ldd r25,Y+3
 1272 04d2 0097      		sbiw r24,0
 1273 04d4 01F4      		brne .L49
 266:usart.c       ****                     bytesRecieved = 0;
 1275               	.LM114:
 1276 04d6 1982      		std Y+1,__zero_reg__
 267:usart.c       ****                     timeout = 30;
 1278               	.LM115:
 1279 04d8 8EE1      		ldi r24,lo8(30)
 1280 04da 90E0      		ldi r25,0
 1281 04dc 9B83      		std Y+3,r25
 1282 04de 8A83      		std Y+2,r24
 1283               	.L49:
 268:usart.c       ****                 }
 269:usart.c       ****                 vTaskDelay(1);
 1285               	.LM116:
 1286 04e0 81E0      		ldi r24,lo8(1)
 1287 04e2 90E0      		ldi r25,0
 1288 04e4 0E94 0000 		call vTaskDelay
 1289               	.L48:
 1290               	.LBE5:
 263:usart.c       ****                 timeout--;
 1292               	.LM117:
 1293 04e8 80EC      		ldi r24,lo8(-64)
 1294 04ea 90E0      		ldi r25,0
 1295 04ec FC01      		movw r30,r24
 1296 04ee 8081      		ld r24,Z
 1297 04f0 8823      		tst r24
 1298 04f2 04F4      		brge .L50
 270:usart.c       ****             }
 271:usart.c       ****             data = UDR0;
 1300               	.LM118:
 1301 04f4 86EC      		ldi r24,lo8(-58)
 1302 04f6 90E0      		ldi r25,0
 1303 04f8 FC01      		movw r30,r24
 1304 04fa 8081      		ld r24,Z
 1305 04fc 8C83      		std Y+4,r24
 272:usart.c       ****             buffer[bytesRecieved] = data;
 1307               	.LM119:
 1308 04fe 8981      		ldd r24,Y+1
 1309 0500 9927      		clr r25
 1310 0502 87FD      		sbrc r24,7
 1311 0504 9095      		com r25
 1312 0506 9E01      		movw r18,r28
 1313 0508 2A5F      		subi r18,-6
 1314 050a 3F4F      		sbci r19,-1
 1315 050c 820F      		add r24,r18
 1316 050e 931F      		adc r25,r19
 1317 0510 2C81      		ldd r18,Y+4
 1318 0512 FC01      		movw r30,r24
 1319 0514 2083      		st Z,r18
 273:usart.c       ****             bytesRecieved++;        
 1321               	.LM120:
 1322 0516 8981      		ldd r24,Y+1
 1323 0518 8F5F      		subi r24,lo8(-(1))
 1324 051a 8983      		std Y+1,r24
 1325               	.L47:
 261:usart.c       ****             
 1327               	.LM121:
 1328 051c 8981      		ldd r24,Y+1
 1329 051e 8430      		cpi r24,lo8(4)
 1330 0520 04F0      		brlt .L51
 274:usart.c       ****         }
 275:usart.c       **** 
 276:usart.c       ****         if(calcChecksum(buffer,3) != buffer[3]){
 1332               	.LM122:
 1333 0522 CE01      		movw r24,r28
 1334 0524 0696      		adiw r24,6
 1335 0526 63E0      		ldi r22,lo8(3)
 1336 0528 0E94 0000 		call calcChecksum
 1337 052c 982F      		mov r25,r24
 1338 052e 8985      		ldd r24,Y+9
 1339 0530 9817      		cp r25,r24
 1340 0532 01F0      		breq .L52
 277:usart.c       ****             sendNACK();
 1342               	.LM123:
 1343 0534 0E94 0000 		call sendNACK
 278:usart.c       ****             bytesRecieved = 0;
 1345               	.LM124:
 1346 0538 1982      		std Y+1,__zero_reg__
 1347 053a 00C0      		rjmp .L53
 1348               	.L52:
 1349               	.LBB6:
 279:usart.c       ****         } else {
 280:usart.c       ****             sendACK();
 1351               	.LM125:
 1352 053c 0E94 0000 		call sendACK
 281:usart.c       ****             bytesRecieved = 0;
 1354               	.LM126:
 1355 0540 1982      		std Y+1,__zero_reg__
 282:usart.c       **** 				command.groupID = buffer[0];
 1357               	.LM127:
 1358 0542 8E81      		ldd r24,Y+6
 1359 0544 8E8B      		std Y+22,r24
 283:usart.c       **** 				command.cmd = buffer[1];
 1361               	.LM128:
 1362 0546 8F81      		ldd r24,Y+7
 1363 0548 8F8B      		std Y+23,r24
 284:usart.c       **** 				size = buffer[2];
 1365               	.LM129:
 1366 054a 8885      		ldd r24,Y+8
 1367 054c 8D83      		std Y+5,r24
 285:usart.c       **** 
 286:usart.c       **** 				if(size > 0){ //No dynamic memory allocations. 16 is the size of the buffer
 1369               	.LM130:
 1370 054e 8D81      		ldd r24,Y+5
 1371 0550 8823      		tst r24
 1372 0552 01F0      		breq .L54
 287:usart.c       **** 					if(recievePayload(size,command.payload) == -1){
 1374               	.LM131:
 1375 0554 8D81      		ldd r24,Y+5
 1376 0556 882F      		mov r24,r24
 1377 0558 90E0      		ldi r25,0
 1378 055a 9E01      		movw r18,r28
 1379 055c 2A5E      		subi r18,-22
 1380 055e 3F4F      		sbci r19,-1
 1381 0560 2D5F      		subi r18,-3
 1382 0562 3F4F      		sbci r19,-1
 1383 0564 B901      		movw r22,r18
 1384 0566 0E94 0000 		call recievePayload
 1385 056a 8F3F      		cpi r24,-1
 1386 056c FFEF      		ldi r31,-1
 1387 056e 9F07      		cpc r25,r31
 1388 0570 01F4      		brne .L54
 288:usart.c       **** 						continue;	//Restart comms
 1390               	.LM132:
 1391 0572 00C0      		rjmp .L53
 1392               	.L54:
 289:usart.c       **** 					}
 290:usart.c       **** 				}
 291:usart.c       **** 				
 292:usart.c       ****  
 293:usart.c       ****             processCommand(&command,&response);
 1394               	.LM133:
 1395 0574 9E01      		movw r18,r28
 1396 0576 275C      		subi r18,-57
 1397 0578 3F4F      		sbci r19,-1
 1398 057a CE01      		movw r24,r28
 1399 057c 4696      		adiw r24,22
 1400 057e B901      		movw r22,r18
 1401 0580 0E94 0000 		call processCommand
 294:usart.c       ****             sendResponse(&response);
 1403               	.LM134:
 1404 0584 CE01      		movw r24,r28
 1405 0586 C996      		adiw r24,57
 1406 0588 0E94 0000 		call sendResponse
 1407               	.LBE6:
 1408               	.LBE4:
 295:usart.c       **** 
 296:usart.c       ****         }
 297:usart.c       **** 
 298:usart.c       ****     }
 1410               	.LM135:
 1411 058c 00C0      		rjmp .L55
 1412               	.L53:
 1413 058e 00C0      		rjmp .L55
 1426               	.Lscope17:
 1428               		.stabd	78,0,0
 1431               	.global	sendResponse
 1433               	sendResponse:
 1434               		.stabd	46,0,0
 299:usart.c       **** 
 300:usart.c       **** }
 301:usart.c       **** 
 302:usart.c       **** int sendResponse(Response* response){
 1436               	.LM136:
 1437               	.LFBB18:
 1438 0590 CF93      		push r28
 1439 0592 DF93      		push r29
 1440 0594 CDB7      		in r28,__SP_L__
 1441 0596 DEB7      		in r29,__SP_H__
 1442 0598 2897      		sbiw r28,8
 1443 059a 0FB6      		in __tmp_reg__,__SREG__
 1444 059c F894      		cli
 1445 059e DEBF      		out __SP_H__,r29
 1446 05a0 0FBE      		out __SREG__,__tmp_reg__
 1447 05a2 CDBF      		out __SP_L__,r28
 1448               	/* prologue: function */
 1449               	/* frame size = 8 */
 1450               	/* stack size = 10 */
 1451               	.L__stack_usage = 10
 1452 05a4 9887      		std Y+8,r25
 1453 05a6 8F83      		std Y+7,r24
 303:usart.c       ****     char checksumBuffer[2];
 304:usart.c       ****     int i;
 305:usart.c       ****     int timeout = 50;
 1455               	.LM137:
 1456 05a8 82E3      		ldi r24,lo8(50)
 1457 05aa 90E0      		ldi r25,0
 1458 05ac 9C83      		std Y+4,r25
 1459 05ae 8B83      		std Y+3,r24
 1460               	.L63:
 1461               	.LBB7:
 306:usart.c       ****     while(1){
 307:usart.c       ****         	USART_Write(response->commandBack);
 1463               	.LM138:
 1464 05b0 8F81      		ldd r24,Y+7
 1465 05b2 9885      		ldd r25,Y+8
 1466 05b4 FC01      		movw r30,r24
 1467 05b6 8081      		ld r24,Z
 1468 05b8 0E94 0000 		call USART_Write
 308:usart.c       **** 			vTaskDelay(1);
 1470               	.LM139:
 1471 05bc 81E0      		ldi r24,lo8(1)
 1472 05be 90E0      		ldi r25,0
 1473 05c0 0E94 0000 		call vTaskDelay
 309:usart.c       ****         	USART_Write(response->size);
 1475               	.LM140:
 1476 05c4 8F81      		ldd r24,Y+7
 1477 05c6 9885      		ldd r25,Y+8
 1478 05c8 FC01      		movw r30,r24
 1479 05ca 8181      		ldd r24,Z+1
 1480 05cc 0E94 0000 		call USART_Write
 310:usart.c       **** 			vTaskDelay(1);
 1482               	.LM141:
 1483 05d0 81E0      		ldi r24,lo8(1)
 1484 05d2 90E0      		ldi r25,0
 1485 05d4 0E94 0000 		call vTaskDelay
 311:usart.c       ****         	checksumBuffer[0] = response->commandBack;
 1487               	.LM142:
 1488 05d8 8F81      		ldd r24,Y+7
 1489 05da 9885      		ldd r25,Y+8
 1490 05dc FC01      		movw r30,r24
 1491 05de 8081      		ld r24,Z
 1492 05e0 8D83      		std Y+5,r24
 312:usart.c       ****         	checksumBuffer[1] = response->size;
 1494               	.LM143:
 1495 05e2 8F81      		ldd r24,Y+7
 1496 05e4 9885      		ldd r25,Y+8
 1497 05e6 FC01      		movw r30,r24
 1498 05e8 8181      		ldd r24,Z+1
 1499 05ea 8E83      		std Y+6,r24
 313:usart.c       ****         	USART_Write(calcChecksum(checksumBuffer,2));
 1501               	.LM144:
 1502 05ec CE01      		movw r24,r28
 1503 05ee 0596      		adiw r24,5
 1504 05f0 62E0      		ldi r22,lo8(2)
 1505 05f2 0E94 0000 		call calcChecksum
 1506 05f6 0E94 0000 		call USART_Write
 314:usart.c       ****         	switch(waitForAck()){
 1508               	.LM145:
 1509 05fa 0E94 0000 		call waitForAck
 1510 05fe 9927      		clr r25
 1511 0600 87FD      		sbrc r24,7
 1512 0602 9095      		com r25
 1513 0604 0097      		sbiw r24,0
 1514 0606 01F0      		breq .L58
 1515 0608 8130      		cpi r24,1
 1516 060a 9105      		cpc r25,__zero_reg__
 1517 060c 01F0      		breq .L67
 1518 060e 8F3F      		cpi r24,-1
 1519 0610 FFEF      		ldi r31,-1
 1520 0612 9F07      		cpc r25,r31
 1521 0614 01F0      		breq .L60
 1522               	.LBE7:
 315:usart.c       ****         	case 1:
 316:usart.c       ****            	goto outOfWhile;
 317:usart.c       ****         	case -1:
 318:usart.c       ****            	return -1;
 319:usart.c       ****         	case 0:
 320:usart.c       ****            	timeout--;
 321:usart.c       ****            	if(!timeout){
 322:usart.c       ****               	return -1;
 323:usart.c       ****            	}
 324:usart.c       ****         	}
 325:usart.c       ****     }
 1524               	.LM146:
 1525 0616 00C0      		rjmp .L63
 1526               	.L60:
 1527               	.LBB8:
 318:usart.c       ****         	case 0:
 1529               	.LM147:
 1530 0618 8FEF      		ldi r24,lo8(-1)
 1531 061a 9FEF      		ldi r25,lo8(-1)
 1532 061c 00C0      		rjmp .L66
 1533               	.L58:
 320:usart.c       ****            	if(!timeout){
 1535               	.LM148:
 1536 061e 8B81      		ldd r24,Y+3
 1537 0620 9C81      		ldd r25,Y+4
 1538 0622 0197      		sbiw r24,1
 1539 0624 9C83      		std Y+4,r25
 1540 0626 8B83      		std Y+3,r24
 321:usart.c       ****               	return -1;
 1542               	.LM149:
 1543 0628 8B81      		ldd r24,Y+3
 1544 062a 9C81      		ldd r25,Y+4
 1545 062c 0097      		sbiw r24,0
 1546 062e 01F4      		brne .L57
 322:usart.c       ****            	}
 1548               	.LM150:
 1549 0630 8FEF      		ldi r24,lo8(-1)
 1550 0632 9FEF      		ldi r25,lo8(-1)
 1551 0634 00C0      		rjmp .L66
 1552               	.L57:
 1553               	.LBE8:
 1555               	.LM151:
 1556 0636 00C0      		rjmp .L63
 1557               	.L67:
 1558               	.LBB9:
 316:usart.c       ****         	case -1:
 1560               	.LM152:
 1561 0638 0000      		nop
 1562               	.L61:
 1563               	.LBE9:
 326:usart.c       **** 
 327:usart.c       ****     outOfWhile:
 328:usart.c       **** 
 329:usart.c       **** 
 330:usart.c       ****     for(i=0;i<response->size;i++){
 1565               	.LM153:
 1566 063a 1A82      		std Y+2,__zero_reg__
 1567 063c 1982      		std Y+1,__zero_reg__
 1568 063e 00C0      		rjmp .L64
 1569               	.L65:
 1570               	.LBB10:
 331:usart.c       ****         USART_Write(response->payload[i]);
 1572               	.LM154:
 1573 0640 2F81      		ldd r18,Y+7
 1574 0642 3885      		ldd r19,Y+8
 1575 0644 8981      		ldd r24,Y+1
 1576 0646 9A81      		ldd r25,Y+2
 1577 0648 820F      		add r24,r18
 1578 064a 931F      		adc r25,r19
 1579 064c 0296      		adiw r24,2
 1580 064e FC01      		movw r30,r24
 1581 0650 8081      		ld r24,Z
 1582 0652 0E94 0000 		call USART_Write
 332:usart.c       **** 			vTaskDelay(1);
 1584               	.LM155:
 1585 0656 81E0      		ldi r24,lo8(1)
 1586 0658 90E0      		ldi r25,0
 1587 065a 0E94 0000 		call vTaskDelay
 1588               	.LBE10:
 330:usart.c       ****         USART_Write(response->payload[i]);
 1590               	.LM156:
 1591 065e 8981      		ldd r24,Y+1
 1592 0660 9A81      		ldd r25,Y+2
 1593 0662 0196      		adiw r24,1
 1594 0664 9A83      		std Y+2,r25
 1595 0666 8983      		std Y+1,r24
 1596               	.L64:
 330:usart.c       ****         USART_Write(response->payload[i]);
 1598               	.LM157:
 1599 0668 8F81      		ldd r24,Y+7
 1600 066a 9885      		ldd r25,Y+8
 1601 066c FC01      		movw r30,r24
 1602 066e 8181      		ldd r24,Z+1
 1603 0670 282F      		mov r18,r24
 1604 0672 3327      		clr r19
 1605 0674 27FD      		sbrc r18,7
 1606 0676 3095      		com r19
 1607 0678 8981      		ldd r24,Y+1
 1608 067a 9A81      		ldd r25,Y+2
 1609 067c 8217      		cp r24,r18
 1610 067e 9307      		cpc r25,r19
 1611 0680 04F0      		brlt .L65
 333:usart.c       **** 		  //USART_AddToQueue(0x30 | (i + 2));
 334:usart.c       ****         //USART_AddToQueue()
 335:usart.c       ****     }
 336:usart.c       ****     USART_Write(calcChecksum((uint8_t*)response->payload,response->size));
 1613               	.LM158:
 1614 0682 8F81      		ldd r24,Y+7
 1615 0684 9885      		ldd r25,Y+8
 1616 0686 FC01      		movw r30,r24
 1617 0688 8181      		ldd r24,Z+1
 1618 068a 282F      		mov r18,r24
 1619 068c 8F81      		ldd r24,Y+7
 1620 068e 9885      		ldd r25,Y+8
 1621 0690 0296      		adiw r24,2
 1622 0692 622F      		mov r22,r18
 1623 0694 0E94 0000 		call calcChecksum
 1624 0698 0E94 0000 		call USART_Write
 337:usart.c       **** 	 
 338:usart.c       **** 
 339:usart.c       ****     waitForAck();
 1626               	.LM159:
 1627 069c 0E94 0000 		call waitForAck
 340:usart.c       **** 
 341:usart.c       ****     return 0;
 1629               	.LM160:
 1630 06a0 80E0      		ldi r24,0
 1631 06a2 90E0      		ldi r25,0
 1632               	.L66:
 1633               	/* epilogue start */
 342:usart.c       **** 
 343:usart.c       **** }
 1635               	.LM161:
 1636 06a4 2896      		adiw r28,8
 1637 06a6 0FB6      		in __tmp_reg__,__SREG__
 1638 06a8 F894      		cli
 1639 06aa DEBF      		out __SP_H__,r29
 1640 06ac 0FBE      		out __SREG__,__tmp_reg__
 1641 06ae CDBF      		out __SP_L__,r28
 1642 06b0 DF91      		pop r29
 1643 06b2 CF91      		pop r28
 1644 06b4 0895      		ret
 1651               	.Lscope18:
 1653               		.stabd	78,0,0
 1655               	.global	waitForAck
 1657               	waitForAck:
 1658               		.stabd	46,0,0
 344:usart.c       **** 
 345:usart.c       **** char waitForAck(){
 1660               	.LM162:
 1661               	.LFBB19:
 1662 06b6 CF93      		push r28
 1663 06b8 DF93      		push r29
 1664 06ba 1F92      		push __zero_reg__
 1665 06bc 1F92      		push __zero_reg__
 1666 06be CDB7      		in r28,__SP_L__
 1667 06c0 DEB7      		in r29,__SP_H__
 1668               	/* prologue: function */
 1669               	/* frame size = 2 */
 1670               	/* stack size = 4 */
 1671               	.L__stack_usage = 4
 346:usart.c       ****     int timeout = 5000;
 1673               	.LM163:
 1674 06c2 88E8      		ldi r24,lo8(-120)
 1675 06c4 93E1      		ldi r25,lo8(19)
 1676 06c6 9A83      		std Y+2,r25
 1677 06c8 8983      		std Y+1,r24
 347:usart.c       ****     while ( !(UCSR2A & (1<<RXC2)) ){
 1679               	.LM164:
 1680 06ca 00C0      		rjmp .L69
 1681               	.L71:
 348:usart.c       ****         timeout--;
 1683               	.LM165:
 1684 06cc 8981      		ldd r24,Y+1
 1685 06ce 9A81      		ldd r25,Y+2
 1686 06d0 0197      		sbiw r24,1
 1687 06d2 9A83      		std Y+2,r25
 1688 06d4 8983      		std Y+1,r24
 349:usart.c       ****         if(!timeout){
 1690               	.LM166:
 1691 06d6 8981      		ldd r24,Y+1
 1692 06d8 9A81      		ldd r25,Y+2
 1693 06da 0097      		sbiw r24,0
 1694 06dc 01F4      		brne .L69
 350:usart.c       ****             return -1;
 1696               	.LM167:
 1697 06de 8FEF      		ldi r24,lo8(-1)
 1698 06e0 00C0      		rjmp .L70
 1699               	.L69:
 347:usart.c       ****         timeout--;
 1701               	.LM168:
 1702 06e2 80ED      		ldi r24,lo8(-48)
 1703 06e4 90E0      		ldi r25,0
 1704 06e6 FC01      		movw r30,r24
 1705 06e8 8081      		ld r24,Z
 1706 06ea 8823      		tst r24
 1707 06ec 04F4      		brge .L71
 351:usart.c       ****         }
 352:usart.c       ****     }
 353:usart.c       ****     if(UDR2 == ACK_BYTE){
 1709               	.LM169:
 1710 06ee 86ED      		ldi r24,lo8(-42)
 1711 06f0 90E0      		ldi r25,0
 1712 06f2 FC01      		movw r30,r24
 1713 06f4 8081      		ld r24,Z
 1714 06f6 8038      		cpi r24,lo8(-128)
 1715 06f8 01F4      		brne .L72
 354:usart.c       ****         return 1;
 1717               	.LM170:
 1718 06fa 81E0      		ldi r24,lo8(1)
 1719 06fc 00C0      		rjmp .L70
 1720               	.L72:
 355:usart.c       ****     } else {
 356:usart.c       ****         return 0;
 1722               	.LM171:
 1723 06fe 80E0      		ldi r24,0
 1724               	.L70:
 1725               	/* epilogue start */
 357:usart.c       ****     }
 358:usart.c       **** }
 1727               	.LM172:
 1728 0700 0F90      		pop __tmp_reg__
 1729 0702 0F90      		pop __tmp_reg__
 1730 0704 DF91      		pop r29
 1731 0706 CF91      		pop r28
 1732 0708 0895      		ret
 1737               	.Lscope19:
 1739               		.stabd	78,0,0
 1743               	.global	calcChecksum
 1745               	calcChecksum:
 1746               		.stabd	46,0,0
 359:usart.c       **** 
 360:usart.c       **** uint8_t calcChecksum(uint8_t* buffer,uint8_t size){
 1748               	.LM173:
 1749               	.LFBB20:
 1750 070a CF93      		push r28
 1751 070c DF93      		push r29
 1752 070e 00D0      		rcall .
 1753 0710 00D0      		rcall .
 1754 0712 CDB7      		in r28,__SP_L__
 1755 0714 DEB7      		in r29,__SP_H__
 1756               	/* prologue: function */
 1757               	/* frame size = 6 */
 1758               	/* stack size = 8 */
 1759               	.L__stack_usage = 8
 1760 0716 9D83      		std Y+5,r25
 1761 0718 8C83      		std Y+4,r24
 1762 071a 6E83      		std Y+6,r22
 361:usart.c       ****     uint8_t checksum = 0;
 1764               	.LM174:
 1765 071c 1982      		std Y+1,__zero_reg__
 1766               	.LBB11:
 362:usart.c       ****     for(int i = 0; i < size; i++) {
 1768               	.LM175:
 1769 071e 1B82      		std Y+3,__zero_reg__
 1770 0720 1A82      		std Y+2,__zero_reg__
 1771 0722 00C0      		rjmp .L74
 1772               	.L75:
 363:usart.c       ****         checksum += *(buffer++);
 1774               	.LM176:
 1775 0724 8C81      		ldd r24,Y+4
 1776 0726 9D81      		ldd r25,Y+5
 1777 0728 9C01      		movw r18,r24
 1778 072a 2F5F      		subi r18,-1
 1779 072c 3F4F      		sbci r19,-1
 1780 072e 3D83      		std Y+5,r19
 1781 0730 2C83      		std Y+4,r18
 1782 0732 FC01      		movw r30,r24
 1783 0734 8081      		ld r24,Z
 1784 0736 9981      		ldd r25,Y+1
 1785 0738 890F      		add r24,r25
 1786 073a 8983      		std Y+1,r24
 362:usart.c       ****     for(int i = 0; i < size; i++) {
 1788               	.LM177:
 1789 073c 8A81      		ldd r24,Y+2
 1790 073e 9B81      		ldd r25,Y+3
 1791 0740 0196      		adiw r24,1
 1792 0742 9B83      		std Y+3,r25
 1793 0744 8A83      		std Y+2,r24
 1794               	.L74:
 362:usart.c       ****     for(int i = 0; i < size; i++) {
 1796               	.LM178:
 1797 0746 8E81      		ldd r24,Y+6
 1798 0748 282F      		mov r18,r24
 1799 074a 30E0      		ldi r19,0
 1800 074c 8A81      		ldd r24,Y+2
 1801 074e 9B81      		ldd r25,Y+3
 1802 0750 8217      		cp r24,r18
 1803 0752 9307      		cpc r25,r19
 1804 0754 04F0      		brlt .L75
 1805               	.LBE11:
 364:usart.c       ****     }
 365:usart.c       ****     return checksum;
 1807               	.LM179:
 1808 0756 8981      		ldd r24,Y+1
 1809               	/* epilogue start */
 366:usart.c       **** }
 1811               	.LM180:
 1812 0758 2696      		adiw r28,6
 1813 075a 0FB6      		in __tmp_reg__,__SREG__
 1814 075c F894      		cli
 1815 075e DEBF      		out __SP_H__,r29
 1816 0760 0FBE      		out __SREG__,__tmp_reg__
 1817 0762 CDBF      		out __SP_L__,r28
 1818 0764 DF91      		pop r29
 1819 0766 CF91      		pop r28
 1820 0768 0895      		ret
 1828               	.Lscope20:
 1830               		.stabd	78,0,0
 1835               	.Letext0:
 1836               		.ident	"GCC: (GNU) 4.8.2"
 1837               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usart.c
     /tmp/cctUXS4t.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cctUXS4t.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cctUXS4t.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cctUXS4t.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cctUXS4t.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cctUXS4t.s:7      *ABS*:0000000000000001 __zero_reg__
                            *COM*:0000000000000002 USART_WriteQueue
                            *COM*:0000000000000002 USART_ReadQueue
                            *COM*:0000000000000002 USART_WriteQueueLog
     /tmp/cctUXS4t.s:146    .text:0000000000000000 USART_Init
     /tmp/cctUXS4t.s:241    .text:0000000000000086 USART_Write
     /tmp/cctUXS4t.s:294    .text:00000000000000ba USART_Write_Unprotected
     /tmp/cctUXS4t.s:346    .text:00000000000000ee USART_Read
     /tmp/cctUXS4t.s:390    .text:0000000000000112 __vector_36
     /tmp/cctUXS4t.s:450    .text:0000000000000160 USART_AddToQueue
     /tmp/cctUXS4t.s:491    .text:000000000000018c USART_TransmitString
     /tmp/cctUXS4t.s:551    .text:00000000000001ca vTaskUSARTWrite
     /tmp/cctUXS4t.s:616    .text:0000000000000212 USART_LogChar
     /tmp/cctUXS4t.s:657    .text:000000000000023e USART_LogString
     /tmp/cctUXS4t.s:717    .text:000000000000027c vTaskUSARTLog
     /tmp/cctUXS4t.s:781    .text:00000000000002c4 USART_GetChar
     /tmp/cctUXS4t.s:835    .text:00000000000002f8 delay
     /tmp/cctUXS4t.s:895    .text:0000000000000334 sendACK
     /tmp/cctUXS4t.s:925    .text:0000000000000348 sendNACK
     /tmp/cctUXS4t.s:957    .text:000000000000035c recievePayload
     /tmp/cctUXS4t.s:1745   .text:000000000000070a calcChecksum
     /tmp/cctUXS4t.s:1208   .text:000000000000048a vTaskUSARTRead
     /tmp/cctUXS4t.s:1433   .text:0000000000000590 sendResponse
     /tmp/cctUXS4t.s:1657   .text:00000000000006b6 waitForAck

UNDEFINED SYMBOLS
xQueueGenericCreate
xQueueGenericSend
xQueueGenericReceive
vTaskDelay
processCommand
__do_clear_bss
