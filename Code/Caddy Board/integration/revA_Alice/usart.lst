   1               		.file	"usart.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 107               	.global	USART_Init
 109               	USART_Init:
 110               		.stabd	46,0,0
   1:usart.c       **** /***************************
   2:usart.c       **** *
   3:usart.c       **** * Filename: usart.cpp
   4:usart.c       **** *
   5:usart.c       **** * Description: Provides print methods for various
   6:usart.c       **** *  datatypes using USART.
   7:usart.c       **** *
   8:usart.c       **** * Authors: Doug Gallatin and Jason Schray
   9:usart.c       **** * Edited by: Tim Peters & James Humphrey
  10:usart.c       **** *
  11:usart.c       **** ***************************/
  12:usart.c       **** 
  13:usart.c       **** #include "FreeRTOS.h"
  14:usart.c       **** #include "semphr.h" 
  15:usart.c       **** #include "queue.h"
  16:usart.c       **** #include "protocol.h"
  17:usart.c       **** 
  18:usart.c       **** #include <stdlib.h>
  19:usart.c       **** #include <stdint.h>
  20:usart.c       **** #include <avr/io.h>
  21:usart.c       **** #include <avr/interrupt.h>
  22:usart.c       **** 
  23:usart.c       **** 
  24:usart.c       **** #include "usart.h"
  25:usart.c       **** 
  26:usart.c       **** xQueueHandle USART_WriteQueue;
  27:usart.c       **** xQueueHandle USART_ReadQueue;
  28:usart.c       **** xQueueHandle USART_WriteQueueLog;
  29:usart.c       **** 
  30:usart.c       **** 
  31:usart.c       **** 
  32:usart.c       **** /************************************
  33:usart.c       **** * Procedure: usart_init
  34:usart.c       **** *  
  35:usart.c       **** * Description: Initializes the USART module with 
  36:usart.c       **** *  the specified baud rate and clk speed.
  37:usart.c       **** *
  38:usart.c       **** * Param buadin: The desired Baud rate.
  39:usart.c       **** * Param clk_seedin: The clk speed of the ATmega328p
  40:usart.c       **** ************************************/
  41:usart.c       **** void USART_Init(uint16_t baudin, uint32_t clk_speedin) {
 112               	.LM0:
 113               	.LFBB1:
 114 0000 DF93      		push r29
 115 0002 CF93      		push r28
 116 0004 00D0      		rcall .
 117 0006 00D0      		rcall .
 118 0008 CDB7      		in r28,__SP_L__
 119 000a DEB7      		in r29,__SP_H__
 120               	/* prologue: function */
 121               	/* frame size = 6 */
 122 000c 9A83      		std Y+2,r25
 123 000e 8983      		std Y+1,r24
 124 0010 4B83      		std Y+3,r20
 125 0012 5C83      		std Y+4,r21
 126 0014 6D83      		std Y+5,r22
 127 0016 7E83      		std Y+6,r23
  42:usart.c       ****     USART_WriteQueue = xQueueCreate(64,sizeof(uint8_t));
 129               	.LM1:
 130 0018 80E4      		ldi r24,lo8(64)
 131 001a 61E0      		ldi r22,lo8(1)
 132 001c 40E0      		ldi r20,lo8(0)
 133 001e 0E94 0000 		call xQueueGenericCreate
 134 0022 9093 0000 		sts (USART_WriteQueue)+1,r25
 135 0026 8093 0000 		sts USART_WriteQueue,r24
  43:usart.c       ****     USART_ReadQueue = xQueueCreate(8,sizeof(uint8_t));
 137               	.LM2:
 138 002a 88E0      		ldi r24,lo8(8)
 139 002c 61E0      		ldi r22,lo8(1)
 140 002e 40E0      		ldi r20,lo8(0)
 141 0030 0E94 0000 		call xQueueGenericCreate
 142 0034 9093 0000 		sts (USART_ReadQueue)+1,r25
 143 0038 8093 0000 		sts USART_ReadQueue,r24
  44:usart.c       **** 
  45:usart.c       ****     //uint32_t ubrr = clk_speedin/(16UL)/baudin-1;
  46:usart.c       ****     //UBRR1H = (unsigned char)(ubrr>>8) ;// & 0x7F;
  47:usart.c       ****     //UBRR1L = (unsigned char)ubrr;
  48:usart.c       ****     
  49:usart.c       ****     UBRR2H = 0; //115200
 145               	.LM3:
 146 003c E5ED      		ldi r30,lo8(213)
 147 003e F0E0      		ldi r31,hi8(213)
 148 0040 1082      		st Z,__zero_reg__
  50:usart.c       ****     UBRR2L = 8;
 150               	.LM4:
 151 0042 E4ED      		ldi r30,lo8(212)
 152 0044 F0E0      		ldi r31,hi8(212)
 153 0046 88E0      		ldi r24,lo8(8)
 154 0048 8083      		st Z,r24
  51:usart.c       **** 
  52:usart.c       ****     /* Enable receiver and transmitter */
  53:usart.c       ****     UCSR2B = (1<<RXEN2)|(1<<TXEN2);//|(1<<RXCIE1);
 156               	.LM5:
 157 004a E1ED      		ldi r30,lo8(209)
 158 004c F0E0      		ldi r31,hi8(209)
 159 004e 88E1      		ldi r24,lo8(24)
 160 0050 8083      		st Z,r24
  54:usart.c       ****     /* Set frame format: 8data, 1stop bit */
  55:usart.c       ****     UCSR2C = (1<<UCSZ21)|(1<<UCSZ20);
 162               	.LM6:
 163 0052 E2ED      		ldi r30,lo8(210)
 164 0054 F0E0      		ldi r31,hi8(210)
 165 0056 86E0      		ldi r24,lo8(6)
 166 0058 8083      		st Z,r24
  56:usart.c       **** 	 // clear U2X0 for Synchronous operation
  57:usart.c       ****     UCSR2A &= ~(1<<U2X2);
 168               	.LM7:
 169 005a A0ED      		ldi r26,lo8(208)
 170 005c B0E0      		ldi r27,hi8(208)
 171 005e E0ED      		ldi r30,lo8(208)
 172 0060 F0E0      		ldi r31,hi8(208)
 173 0062 8081      		ld r24,Z
 174 0064 8D7F      		andi r24,lo8(-3)
 175 0066 8C93      		st X,r24
 176               	/* epilogue start */
  58:usart.c       **** 
  59:usart.c       ****     //UCSR0B |= (1<<UDRIE0);
  60:usart.c       **** 
  61:usart.c       ****     //PORTB = 0xFF;
  62:usart.c       **** 
  63:usart.c       ****     //UART0 Logging
  64:usart.c       **** 
  65:usart.c       ****     /*USART_WriteQueueLog = xQueueCreate(32,sizeof(uint8_t));
  66:usart.c       **** 
  67:usart.c       ****     ubrr = clk_speedin/(16UL)/baudin-1;
  68:usart.c       ****     UBRR0H = (unsigned char)(ubrr>>8) ;// & 0x7F;
  69:usart.c       ****     UBRR0L = (unsigned char)ubrr;
  70:usart.c       ****     
  71:usart.c       ****     //UBRR0H = 0; //115200
  72:usart.c       ****     //UBRR0L = 8;
  73:usart.c       **** 
  74:usart.c       ****     /* Enable receiver and transmitter */
  75:usart.c       ****     //UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  76:usart.c       ****     /* Set frame format: 8data, 1stop bit */
  77:usart.c       ****     //UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  78:usart.c       ****     // clear U2X0 for Synchronous operation
  79:usart.c       ****     //UCSR0A &= ~(1<<U2X0);*/
  80:usart.c       **** 
  81:usart.c       **** }
 178               	.LM8:
 179 0068 2696      		adiw r28,6
 180 006a 0FB6      		in __tmp_reg__,__SREG__
 181 006c F894      		cli
 182 006e DEBF      		out __SP_H__,r29
 183 0070 0FBE      		out __SREG__,__tmp_reg__
 184 0072 CDBF      		out __SP_L__,r28
 185 0074 CF91      		pop r28
 186 0076 DF91      		pop r29
 187 0078 0895      		ret
 189               	.Lscope1:
 191               		.stabd	78,0,0
 194               	.global	USART_Write
 196               	USART_Write:
 197               		.stabd	46,0,0
  82:usart.c       **** 
  83:usart.c       **** /*the send function will put 8bits on the trans line. */
  84:usart.c       **** void USART_Write(uint8_t data) {
 199               	.LM9:
 200               	.LFBB2:
 201 007a DF93      		push r29
 202 007c CF93      		push r28
 203 007e 0F92      		push __tmp_reg__
 204 0080 CDB7      		in r28,__SP_L__
 205 0082 DEB7      		in r29,__SP_H__
 206               	/* prologue: function */
 207               	/* frame size = 1 */
 208 0084 8983      		std Y+1,r24
 209               	.L4:
  85:usart.c       **** 		/* Wait for empty transmit buffer */
  86:usart.c       **** 		while ( !( UCSR2A & (1<<UDRE2)) )
 211               	.LM10:
 212 0086 E0ED      		ldi r30,lo8(208)
 213 0088 F0E0      		ldi r31,hi8(208)
 214 008a 8081      		ld r24,Z
 215 008c 882F      		mov r24,r24
 216 008e 90E0      		ldi r25,lo8(0)
 217 0090 8072      		andi r24,lo8(32)
 218 0092 9070      		andi r25,hi8(32)
 219 0094 0097      		sbiw r24,0
 220 0096 01F0      		breq .L4
  87:usart.c       **** 		;
  88:usart.c       **** 		/* Put data into buffer, sends the data */
  89:usart.c       **** 		UDR2 = data;
 222               	.LM11:
 223 0098 E6ED      		ldi r30,lo8(214)
 224 009a F0E0      		ldi r31,hi8(214)
 225 009c 8981      		ldd r24,Y+1
 226 009e 8083      		st Z,r24
 227               	/* epilogue start */
  90:usart.c       **** }
 229               	.LM12:
 230 00a0 0F90      		pop __tmp_reg__
 231 00a2 CF91      		pop r28
 232 00a4 DF91      		pop r29
 233 00a6 0895      		ret
 235               	.Lscope2:
 237               		.stabd	78,0,0
 240               	.global	USART_Write_Unprotected
 242               	USART_Write_Unprotected:
 243               		.stabd	46,0,0
  91:usart.c       **** 
  92:usart.c       **** /*the send function will put 8bits on the trans line. */
  93:usart.c       **** void USART_Write_Unprotected(uint8_t data) {
 245               	.LM13:
 246               	.LFBB3:
 247 00a8 DF93      		push r29
 248 00aa CF93      		push r28
 249 00ac 0F92      		push __tmp_reg__
 250 00ae CDB7      		in r28,__SP_L__
 251 00b0 DEB7      		in r29,__SP_H__
 252               	/* prologue: function */
 253               	/* frame size = 1 */
 254 00b2 8983      		std Y+1,r24
 255               	.L7:
  94:usart.c       **** 	/* Wait for empty transmit buffer */
  95:usart.c       **** 	while ( !( UCSR0A & (1<<UDRE0)) )
 257               	.LM14:
 258 00b4 E0EC      		ldi r30,lo8(192)
 259 00b6 F0E0      		ldi r31,hi8(192)
 260 00b8 8081      		ld r24,Z
 261 00ba 882F      		mov r24,r24
 262 00bc 90E0      		ldi r25,lo8(0)
 263 00be 8072      		andi r24,lo8(32)
 264 00c0 9070      		andi r25,hi8(32)
 265 00c2 0097      		sbiw r24,0
 266 00c4 01F0      		breq .L7
  96:usart.c       **** 	;
  97:usart.c       **** 	/* Put data into buffer, sends the data */
  98:usart.c       **** 	UDR0 = data;
 268               	.LM15:
 269 00c6 E6EC      		ldi r30,lo8(198)
 270 00c8 F0E0      		ldi r31,hi8(198)
 271 00ca 8981      		ldd r24,Y+1
 272 00cc 8083      		st Z,r24
 273               	/* epilogue start */
  99:usart.c       **** }
 275               	.LM16:
 276 00ce 0F90      		pop __tmp_reg__
 277 00d0 CF91      		pop r28
 278 00d2 DF91      		pop r29
 279 00d4 0895      		ret
 281               	.Lscope3:
 283               		.stabd	78,0,0
 285               	.global	USART_Read
 287               	USART_Read:
 288               		.stabd	46,0,0
 100:usart.c       **** 
 101:usart.c       **** /* the receive data function. Note that this a blocking call
 102:usart.c       **** Therefore you may not get control back after this is called 
 103:usart.c       **** until a much later time. It may be helpful to use the 
 104:usart.c       **** istheredata() function to check before calling this function
 105:usart.c       ****         @return 8bit data packet from sender
 106:usart.c       **** */
 107:usart.c       **** uint8_t USART_Read(void) {
 290               	.LM17:
 291               	.LFBB4:
 292 00d6 DF93      		push r29
 293 00d8 CF93      		push r28
 294 00da CDB7      		in r28,__SP_L__
 295 00dc DEB7      		in r29,__SP_H__
 296               	/* prologue: function */
 297               	/* frame size = 0 */
 298               	.L10:
 108:usart.c       ****     /* Wait for data to be received */
 109:usart.c       ****     while ( !(UCSR2A & (1<<RXC2)) )
 300               	.LM18:
 301 00de E0ED      		ldi r30,lo8(208)
 302 00e0 F0E0      		ldi r31,hi8(208)
 303 00e2 8081      		ld r24,Z
 304 00e4 8823      		tst r24
 305 00e6 04F4      		brge .L10
 110:usart.c       ****         ;
 111:usart.c       ****     /* Get and return received data from buffer */
 112:usart.c       ****     return UDR2;
 307               	.LM19:
 308 00e8 E6ED      		ldi r30,lo8(214)
 309 00ea F0E0      		ldi r31,hi8(214)
 310 00ec 8081      		ld r24,Z
 311               	/* epilogue start */
 113:usart.c       **** }
 313               	.LM20:
 314 00ee CF91      		pop r28
 315 00f0 DF91      		pop r29
 316 00f2 0895      		ret
 318               	.Lscope4:
 320               		.stabd	78,0,0
 322               	.global	__vector_36
 324               	__vector_36:
 325               		.stabd	46,0,0
 114:usart.c       **** 
 115:usart.c       **** 
 116:usart.c       **** ISR(USART1_RX_vect){
 327               	.LM21:
 328               	.LFBB5:
 329 00f4 1F92      		push __zero_reg__
 330 00f6 0F92      		push r0
 331 00f8 0FB6      		in r0,__SREG__
 332 00fa 0F92      		push r0
 333 00fc 0090 5B00 		lds r0,91
 334 0100 0F92      		push r0
 335 0102 1124      		clr __zero_reg__
 336 0104 8F93      		push r24
 337 0106 9F93      		push r25
 338 0108 AF93      		push r26
 339 010a BF93      		push r27
 340 010c EF93      		push r30
 341 010e FF93      		push r31
 342 0110 DF93      		push r29
 343 0112 CF93      		push r28
 344 0114 0F92      		push __tmp_reg__
 345 0116 CDB7      		in r28,__SP_L__
 346 0118 DEB7      		in r29,__SP_H__
 347               	/* prologue: Signal */
 348               	/* frame size = 1 */
 117:usart.c       ****     uint8_t data;
 118:usart.c       ****     data = UDR1;
 350               	.LM22:
 351 011a EEEC      		ldi r30,lo8(206)
 352 011c F0E0      		ldi r31,hi8(206)
 353 011e 8081      		ld r24,Z
 354 0120 8983      		std Y+1,r24
 119:usart.c       **** 
 120:usart.c       ****     //while(!(UCSR1A & (1<<UDRE1)));
 121:usart.c       ****     PORTB ^= 0x10;
 356               	.LM23:
 357 0122 A5E2      		ldi r26,lo8(37)
 358 0124 B0E0      		ldi r27,hi8(37)
 359 0126 E5E2      		ldi r30,lo8(37)
 360 0128 F0E0      		ldi r31,hi8(37)
 361 012a 9081      		ld r25,Z
 362 012c 80E1      		ldi r24,lo8(16)
 363 012e 8927      		eor r24,r25
 364 0130 8C93      		st X,r24
 365               	/* epilogue start */
 122:usart.c       ****     //UDR1 = data;
 123:usart.c       ****     
 124:usart.c       **** 
 125:usart.c       ****   //  USART_AddToQueue(data);
 126:usart.c       ****     //xQueueSendToBackFromISR(USART_ReadQueue,&data,NULL);
 127:usart.c       **** }
 367               	.LM24:
 368 0132 0F90      		pop __tmp_reg__
 369 0134 CF91      		pop r28
 370 0136 DF91      		pop r29
 371 0138 FF91      		pop r31
 372 013a EF91      		pop r30
 373 013c BF91      		pop r27
 374 013e AF91      		pop r26
 375 0140 9F91      		pop r25
 376 0142 8F91      		pop r24
 377 0144 0F90      		pop r0
 378 0146 0092 5B00 		sts 91,r0
 379 014a 0F90      		pop r0
 380 014c 0FBE      		out __SREG__,r0
 381 014e 0F90      		pop r0
 382 0150 1F90      		pop __zero_reg__
 383 0152 1895      		reti
 388               	.Lscope5:
 390               		.stabd	78,0,0
 393               	.global	USART_AddToQueue
 395               	USART_AddToQueue:
 396               		.stabd	46,0,0
 128:usart.c       **** 
 129:usart.c       **** void USART_AddToQueue(uint8_t data){
 398               	.LM25:
 399               	.LFBB6:
 400 0154 DF93      		push r29
 401 0156 CF93      		push r28
 402 0158 0F92      		push __tmp_reg__
 403 015a CDB7      		in r28,__SP_L__
 404 015c DEB7      		in r29,__SP_H__
 405               	/* prologue: function */
 406               	/* frame size = 1 */
 407 015e 8983      		std Y+1,r24
 130:usart.c       ****     
 131:usart.c       ****     xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);
 409               	.LM26:
 410 0160 8091 0000 		lds r24,USART_WriteQueue
 411 0164 9091 0000 		lds r25,(USART_WriteQueue)+1
 412 0168 9E01      		movw r18,r28
 413 016a 2F5F      		subi r18,lo8(-(1))
 414 016c 3F4F      		sbci r19,hi8(-(1))
 415 016e B901      		movw r22,r18
 416 0170 4FEF      		ldi r20,lo8(-1)
 417 0172 5FEF      		ldi r21,hi8(-1)
 418 0174 20E0      		ldi r18,lo8(0)
 419 0176 0E94 0000 		call xQueueGenericSend
 420               	/* epilogue start */
 132:usart.c       **** 
 133:usart.c       **** }
 422               	.LM27:
 423 017a 0F90      		pop __tmp_reg__
 424 017c CF91      		pop r28
 425 017e DF91      		pop r29
 426 0180 0895      		ret
 428               	.Lscope6:
 430               		.stabd	78,0,0
 433               	.global	USART_TransmitString
 435               	USART_TransmitString:
 436               		.stabd	46,0,0
 134:usart.c       **** 
 135:usart.c       **** void USART_TransmitString(char* str){
 438               	.LM28:
 439               	.LFBB7:
 440 0182 DF93      		push r29
 441 0184 CF93      		push r28
 442 0186 0F92      		push __tmp_reg__
 443 0188 0F92      		push __tmp_reg__
 444 018a CDB7      		in r28,__SP_L__
 445 018c DEB7      		in r29,__SP_H__
 446               	/* prologue: function */
 447               	/* frame size = 2 */
 448 018e 9A83      		std Y+2,r25
 449 0190 8983      		std Y+1,r24
 450 0192 00C0      		rjmp .L17
 451               	.L18:
 136:usart.c       ****     while(*str) {
 137:usart.c       ****         USART_AddToQueue(*str);
 453               	.LM29:
 454 0194 E981      		ldd r30,Y+1
 455 0196 FA81      		ldd r31,Y+2
 456 0198 8081      		ld r24,Z
 457 019a 0E94 0000 		call USART_AddToQueue
 138:usart.c       ****         str++;
 459               	.LM30:
 460 019e 8981      		ldd r24,Y+1
 461 01a0 9A81      		ldd r25,Y+2
 462 01a2 0196      		adiw r24,1
 463 01a4 9A83      		std Y+2,r25
 464 01a6 8983      		std Y+1,r24
 465               	.L17:
 136:usart.c       ****     while(*str) {
 467               	.LM31:
 468 01a8 E981      		ldd r30,Y+1
 469 01aa FA81      		ldd r31,Y+2
 470 01ac 8081      		ld r24,Z
 471 01ae 8823      		tst r24
 472 01b0 01F4      		brne .L18
 473               	/* epilogue start */
 139:usart.c       ****     }
 140:usart.c       **** }
 475               	.LM32:
 476 01b2 0F90      		pop __tmp_reg__
 477 01b4 0F90      		pop __tmp_reg__
 478 01b6 CF91      		pop r28
 479 01b8 DF91      		pop r29
 480 01ba 0895      		ret
 482               	.Lscope7:
 484               		.stabd	78,0,0
 487               	.global	vTaskUSARTWrite
 489               	vTaskUSARTWrite:
 490               		.stabd	46,0,0
 141:usart.c       **** 
 142:usart.c       **** void vTaskUSARTWrite(void *pvParameters){
 492               	.LM33:
 493               	.LFBB8:
 494 01bc DF93      		push r29
 495 01be CF93      		push r28
 496 01c0 00D0      		rcall .
 497 01c2 CDB7      		in r28,__SP_L__
 498 01c4 DEB7      		in r29,__SP_H__
 499               	/* prologue: function */
 500               	/* frame size = 3 */
 501 01c6 9B83      		std Y+3,r25
 502 01c8 8A83      		std Y+2,r24
 503               	.L22:
 143:usart.c       ****     uint8_t data;
 144:usart.c       ****     while(1){
 145:usart.c       ****     xQueueReceive(USART_WriteQueue,&data,portMAX_DELAY);
 505               	.LM34:
 506 01ca 8091 0000 		lds r24,USART_WriteQueue
 507 01ce 9091 0000 		lds r25,(USART_WriteQueue)+1
 508 01d2 9E01      		movw r18,r28
 509 01d4 2F5F      		subi r18,lo8(-(1))
 510 01d6 3F4F      		sbci r19,hi8(-(1))
 511 01d8 B901      		movw r22,r18
 512 01da 4FEF      		ldi r20,lo8(-1)
 513 01dc 5FEF      		ldi r21,hi8(-1)
 514 01de 20E0      		ldi r18,lo8(0)
 515 01e0 0E94 0000 		call xQueueGenericReceive
 516               	.L21:
 146:usart.c       **** 
 147:usart.c       ****         while(!(UCSR1A & (1<<UDRE1)));
 518               	.LM35:
 519 01e4 E8EC      		ldi r30,lo8(200)
 520 01e6 F0E0      		ldi r31,hi8(200)
 521 01e8 8081      		ld r24,Z
 522 01ea 882F      		mov r24,r24
 523 01ec 90E0      		ldi r25,lo8(0)
 524 01ee 8072      		andi r24,lo8(32)
 525 01f0 9070      		andi r25,hi8(32)
 526 01f2 0097      		sbiw r24,0
 527 01f4 01F0      		breq .L21
 148:usart.c       ****         UDR1 = data;
 529               	.LM36:
 530 01f6 EEEC      		ldi r30,lo8(206)
 531 01f8 F0E0      		ldi r31,hi8(206)
 532 01fa 8981      		ldd r24,Y+1
 533 01fc 8083      		st Z,r24
 534 01fe 00C0      		rjmp .L22
 539               	.Lscope8:
 541               		.stabd	78,0,0
 544               	.global	USART_LogChar
 546               	USART_LogChar:
 547               		.stabd	46,0,0
 149:usart.c       **** 
 150:usart.c       ****     }
 151:usart.c       **** }
 152:usart.c       **** 
 153:usart.c       **** void USART_LogChar(uint8_t data){
 549               	.LM37:
 550               	.LFBB9:
 551 0200 DF93      		push r29
 552 0202 CF93      		push r28
 553 0204 0F92      		push __tmp_reg__
 554 0206 CDB7      		in r28,__SP_L__
 555 0208 DEB7      		in r29,__SP_H__
 556               	/* prologue: function */
 557               	/* frame size = 1 */
 558 020a 8983      		std Y+1,r24
 154:usart.c       ****     xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
 560               	.LM38:
 561 020c 8091 0000 		lds r24,USART_WriteQueueLog
 562 0210 9091 0000 		lds r25,(USART_WriteQueueLog)+1
 563 0214 9E01      		movw r18,r28
 564 0216 2F5F      		subi r18,lo8(-(1))
 565 0218 3F4F      		sbci r19,hi8(-(1))
 566 021a B901      		movw r22,r18
 567 021c 4FEF      		ldi r20,lo8(-1)
 568 021e 5FEF      		ldi r21,hi8(-1)
 569 0220 20E0      		ldi r18,lo8(0)
 570 0222 0E94 0000 		call xQueueGenericSend
 571               	/* epilogue start */
 155:usart.c       **** }
 573               	.LM39:
 574 0226 0F90      		pop __tmp_reg__
 575 0228 CF91      		pop r28
 576 022a DF91      		pop r29
 577 022c 0895      		ret
 579               	.Lscope9:
 581               		.stabd	78,0,0
 584               	.global	USART_LogString
 586               	USART_LogString:
 587               		.stabd	46,0,0
 156:usart.c       **** 
 157:usart.c       **** void USART_LogString(char* str){
 589               	.LM40:
 590               	.LFBB10:
 591 022e DF93      		push r29
 592 0230 CF93      		push r28
 593 0232 0F92      		push __tmp_reg__
 594 0234 0F92      		push __tmp_reg__
 595 0236 CDB7      		in r28,__SP_L__
 596 0238 DEB7      		in r29,__SP_H__
 597               	/* prologue: function */
 598               	/* frame size = 2 */
 599 023a 9A83      		std Y+2,r25
 600 023c 8983      		std Y+1,r24
 601 023e 00C0      		rjmp .L27
 602               	.L28:
 158:usart.c       ****     while(*str){
 159:usart.c       ****         USART_LogChar(*str);
 604               	.LM41:
 605 0240 E981      		ldd r30,Y+1
 606 0242 FA81      		ldd r31,Y+2
 607 0244 8081      		ld r24,Z
 608 0246 0E94 0000 		call USART_LogChar
 160:usart.c       ****         str++;
 610               	.LM42:
 611 024a 8981      		ldd r24,Y+1
 612 024c 9A81      		ldd r25,Y+2
 613 024e 0196      		adiw r24,1
 614 0250 9A83      		std Y+2,r25
 615 0252 8983      		std Y+1,r24
 616               	.L27:
 158:usart.c       ****     while(*str){
 618               	.LM43:
 619 0254 E981      		ldd r30,Y+1
 620 0256 FA81      		ldd r31,Y+2
 621 0258 8081      		ld r24,Z
 622 025a 8823      		tst r24
 623 025c 01F4      		brne .L28
 624               	/* epilogue start */
 161:usart.c       ****     }
 162:usart.c       **** }
 626               	.LM44:
 627 025e 0F90      		pop __tmp_reg__
 628 0260 0F90      		pop __tmp_reg__
 629 0262 CF91      		pop r28
 630 0264 DF91      		pop r29
 631 0266 0895      		ret
 633               	.Lscope10:
 635               		.stabd	78,0,0
 638               	.global	vTaskUSARTLog
 640               	vTaskUSARTLog:
 641               		.stabd	46,0,0
 163:usart.c       **** 
 164:usart.c       **** void vTaskUSARTLog(void *pvParameters){
 643               	.LM45:
 644               	.LFBB11:
 645 0268 DF93      		push r29
 646 026a CF93      		push r28
 647 026c 00D0      		rcall .
 648 026e CDB7      		in r28,__SP_L__
 649 0270 DEB7      		in r29,__SP_H__
 650               	/* prologue: function */
 651               	/* frame size = 3 */
 652 0272 9B83      		std Y+3,r25
 653 0274 8A83      		std Y+2,r24
 654               	.L32:
 165:usart.c       ****     uint8_t data;
 166:usart.c       ****     while(1){
 167:usart.c       ****         xQueueReceive(USART_WriteQueueLog,&data,portMAX_DELAY);
 656               	.LM46:
 657 0276 8091 0000 		lds r24,USART_WriteQueueLog
 658 027a 9091 0000 		lds r25,(USART_WriteQueueLog)+1
 659 027e 9E01      		movw r18,r28
 660 0280 2F5F      		subi r18,lo8(-(1))
 661 0282 3F4F      		sbci r19,hi8(-(1))
 662 0284 B901      		movw r22,r18
 663 0286 4FEF      		ldi r20,lo8(-1)
 664 0288 5FEF      		ldi r21,hi8(-1)
 665 028a 20E0      		ldi r18,lo8(0)
 666 028c 0E94 0000 		call xQueueGenericReceive
 667               	.L31:
 168:usart.c       **** 
 169:usart.c       ****         while(!(UCSR0A & (1<<UDRE0)));
 669               	.LM47:
 670 0290 E0EC      		ldi r30,lo8(192)
 671 0292 F0E0      		ldi r31,hi8(192)
 672 0294 8081      		ld r24,Z
 673 0296 882F      		mov r24,r24
 674 0298 90E0      		ldi r25,lo8(0)
 675 029a 8072      		andi r24,lo8(32)
 676 029c 9070      		andi r25,hi8(32)
 677 029e 0097      		sbiw r24,0
 678 02a0 01F0      		breq .L31
 170:usart.c       ****         UDR0 = data;
 680               	.LM48:
 681 02a2 E6EC      		ldi r30,lo8(198)
 682 02a4 F0E0      		ldi r31,hi8(198)
 683 02a6 8981      		ldd r24,Y+1
 684 02a8 8083      		st Z,r24
 685 02aa 00C0      		rjmp .L32
 690               	.Lscope11:
 692               		.stabd	78,0,0
 694               	.global	USART_GetChar
 696               	USART_GetChar:
 697               		.stabd	46,0,0
 171:usart.c       **** 
 172:usart.c       ****     }
 173:usart.c       **** 
 174:usart.c       **** }
 175:usart.c       **** 
 176:usart.c       **** uint8_t USART_GetChar(){
 699               	.LM49:
 700               	.LFBB12:
 701 02ac DF93      		push r29
 702 02ae CF93      		push r28
 703 02b0 0F92      		push __tmp_reg__
 704 02b2 0F92      		push __tmp_reg__
 705 02b4 CDB7      		in r28,__SP_L__
 706 02b6 DEB7      		in r29,__SP_H__
 707               	/* prologue: function */
 708               	/* frame size = 2 */
 177:usart.c       ****     uint8_t data;
 178:usart.c       ****     if(xQueueReceive(USART_ReadQueue,&data,1) == pdTRUE){
 710               	.LM50:
 711 02b8 8091 0000 		lds r24,USART_ReadQueue
 712 02bc 9091 0000 		lds r25,(USART_ReadQueue)+1
 713 02c0 9E01      		movw r18,r28
 714 02c2 2F5F      		subi r18,lo8(-(1))
 715 02c4 3F4F      		sbci r19,hi8(-(1))
 716 02c6 B901      		movw r22,r18
 717 02c8 41E0      		ldi r20,lo8(1)
 718 02ca 50E0      		ldi r21,hi8(1)
 719 02cc 20E0      		ldi r18,lo8(0)
 720 02ce 0E94 0000 		call xQueueGenericReceive
 721 02d2 8130      		cpi r24,lo8(1)
 722 02d4 01F4      		brne .L35
 179:usart.c       ****         //USART_AddToQueue('~');
 180:usart.c       ****         return data;
 724               	.LM51:
 725 02d6 8981      		ldd r24,Y+1
 726 02d8 8A83      		std Y+2,r24
 727 02da 00C0      		rjmp .L36
 728               	.L35:
 181:usart.c       ****     } else {
 182:usart.c       ****         return 255;
 730               	.LM52:
 731 02dc 8FEF      		ldi r24,lo8(-1)
 732 02de 8A83      		std Y+2,r24
 733               	.L36:
 734 02e0 8A81      		ldd r24,Y+2
 735               	/* epilogue start */
 183:usart.c       ****     }
 184:usart.c       **** }
 737               	.LM53:
 738 02e2 0F90      		pop __tmp_reg__
 739 02e4 0F90      		pop __tmp_reg__
 740 02e6 CF91      		pop r28
 741 02e8 DF91      		pop r29
 742 02ea 0895      		ret
 747               	.Lscope12:
 749               		.stabd	78,0,0
 752               	.global	vTaskUSARTRead
 754               	vTaskUSARTRead:
 755               		.stabd	46,0,0
 185:usart.c       **** 
 186:usart.c       **** void vTaskUSARTRead(void *pvParameters){
 757               	.LM54:
 758               	.LFBB13:
 759 02ec DF93      		push r29
 760 02ee CF93      		push r28
 761 02f0 CDB7      		in r28,__SP_L__
 762 02f2 DEB7      		in r29,__SP_H__
 763 02f4 C955      		subi r28,lo8(-(-89))
 764 02f6 D040      		sbci r29,hi8(-(-89))
 765 02f8 0FB6      		in __tmp_reg__,__SREG__
 766 02fa F894      		cli
 767 02fc DEBF      		out __SP_H__,r29
 768 02fe 0FBE      		out __SREG__,__tmp_reg__
 769 0300 CDBF      		out __SP_L__,r28
 770               	/* prologue: function */
 771               	/* frame size = 89 */
 772 0302 FE01      		movw r30,r28
 773 0304 E85A      		subi r30,lo8(-(88))
 774 0306 FF4F      		sbci r31,hi8(-(88))
 775 0308 9183      		std Z+1,r25
 776 030a 8083      		st Z,r24
 187:usart.c       **** 
 188:usart.c       ****     char bytesRecieved;
 189:usart.c       ****     uint8_t rxData;
 190:usart.c       ****     uint8_t data;
 191:usart.c       ****     uint8_t buffer[8];
 192:usart.c       ****     char size;
 193:usart.c       ****     char groupID;
 194:usart.c       ****     char cmd;
 195:usart.c       ****     unsigned int timeout;
 196:usart.c       **** 
 197:usart.c       ****     PORTB = 0;
 778               	.LM55:
 779 030c E5E2      		ldi r30,lo8(37)
 780 030e F0E0      		ldi r31,hi8(37)
 781 0310 1082      		st Z,__zero_reg__
 782               	.L44:
 783               	.LBB2:
 198:usart.c       **** 
 199:usart.c       ****     /*while(1){
 200:usart.c       ****         while ( !(UCSR2A & (1<<RXC2)) );
 201:usart.c       ****         PORTB = 0x10;
 202:usart.c       ****         //USART_AddToQueue(UDR2);
 203:usart.c       ****         USART_Write(UDR2);
 204:usart.c       ****     }*/
 205:usart.c       **** 
 206:usart.c       ****     /*while(1){
 207:usart.c       ****         USART_AddToQueue(USART_GetChar());
 208:usart.c       **** //        USART_AddToQueue(0x96);
 209:usart.c       ****         vTaskDelay(1);
 210:usart.c       ****     }*/
 211:usart.c       **** 
 212:usart.c       ****     Command command;
 213:usart.c       ****     Response response;
 214:usart.c       ****     while(1){
 215:usart.c       ****         bytesRecieved = 0;
 785               	.LM56:
 786 0312 1A86      		std Y+10,__zero_reg__
 216:usart.c       ****         int timeout = 7000;
 788               	.LM57:
 789 0314 88E5      		ldi r24,lo8(7000)
 790 0316 9BE1      		ldi r25,hi8(7000)
 791 0318 9A83      		std Y+2,r25
 792 031a 8983      		std Y+1,r24
 217:usart.c       ****         PORTB = 0x00;
 794               	.LM58:
 795 031c E5E2      		ldi r30,lo8(37)
 796 031e F0E0      		ldi r31,hi8(37)
 797 0320 1082      		st Z,__zero_reg__
 798 0322 00C0      		rjmp .L39
 799               	.L42:
 218:usart.c       ****         while(bytesRecieved < 4){
 219:usart.c       ****             
 220:usart.c       ****             while ( !(UCSR2A & (1<<RXC2)) ){
 221:usart.c       ****                 timeout--;
 801               	.LM59:
 802 0324 8981      		ldd r24,Y+1
 803 0326 9A81      		ldd r25,Y+2
 804 0328 0197      		sbiw r24,1
 805 032a 9A83      		std Y+2,r25
 806 032c 8983      		std Y+1,r24
 222:usart.c       ****                 if(timeout == 0){
 808               	.LM60:
 809 032e 8981      		ldd r24,Y+1
 810 0330 9A81      		ldd r25,Y+2
 811 0332 0097      		sbiw r24,0
 812 0334 01F4      		brne .L41
 223:usart.c       ****                     bytesRecieved = 0;
 814               	.LM61:
 815 0336 1A86      		std Y+10,__zero_reg__
 224:usart.c       ****                     timeout = 7000;
 817               	.LM62:
 818 0338 88E5      		ldi r24,lo8(7000)
 819 033a 9BE1      		ldi r25,hi8(7000)
 820 033c 9A83      		std Y+2,r25
 821 033e 8983      		std Y+1,r24
 822               	.L41:
 225:usart.c       ****                 }
 226:usart.c       ****                 vTaskDelay(1);
 824               	.LM63:
 825 0340 81E0      		ldi r24,lo8(1)
 826 0342 90E0      		ldi r25,hi8(1)
 827 0344 0E94 0000 		call vTaskDelay
 828               	.L40:
 220:usart.c       ****             while ( !(UCSR2A & (1<<RXC2)) ){
 830               	.LM64:
 831 0348 E0ED      		ldi r30,lo8(208)
 832 034a F0E0      		ldi r31,hi8(208)
 833 034c 8081      		ld r24,Z
 834 034e 8823      		tst r24
 835 0350 04F4      		brge .L42
 227:usart.c       ****             }
 228:usart.c       ****             data = UDR2;
 837               	.LM65:
 838 0352 E6ED      		ldi r30,lo8(214)
 839 0354 F0E0      		ldi r31,hi8(214)
 840 0356 8081      		ld r24,Z
 841 0358 8887      		std Y+8,r24
 229:usart.c       ****             buffer[bytesRecieved] = data;
 843               	.LM66:
 844 035a 8A85      		ldd r24,Y+10
 845 035c 282F      		mov r18,r24
 846 035e 3327      		clr r19
 847 0360 27FD      		sbrc r18,7
 848 0362 3095      		com r19
 849 0364 CE01      		movw r24,r28
 850 0366 0B96      		adiw r24,11
 851 0368 FC01      		movw r30,r24
 852 036a E20F      		add r30,r18
 853 036c F31F      		adc r31,r19
 854 036e 8885      		ldd r24,Y+8
 855 0370 8083      		st Z,r24
 230:usart.c       ****             bytesRecieved++;        
 857               	.LM67:
 858 0372 8A85      		ldd r24,Y+10
 859 0374 8F5F      		subi r24,lo8(-(1))
 860 0376 8A87      		std Y+10,r24
 861               	.L39:
 218:usart.c       ****         while(bytesRecieved < 4){
 863               	.LM68:
 864 0378 8A85      		ldd r24,Y+10
 865 037a 8430      		cpi r24,lo8(4)
 866 037c 04F0      		brlt .L40
 231:usart.c       ****             
 232:usart.c       ****         }
 233:usart.c       **** 
 234:usart.c       ****         //if(calcChecksum(buffer,3) != buffer[3]){
 235:usart.c       ****         //    sendNACK();
 236:usart.c       ****         //    bytesRecieved = 0;
 237:usart.c       ****         //} else {
 238:usart.c       ****             PORTB |= 0x10;
 868               	.LM69:
 869 037e A5E2      		ldi r26,lo8(37)
 870 0380 B0E0      		ldi r27,hi8(37)
 871 0382 E5E2      		ldi r30,lo8(37)
 872 0384 F0E0      		ldi r31,hi8(37)
 873 0386 8081      		ld r24,Z
 874 0388 8061      		ori r24,lo8(16)
 875 038a 8C93      		st X,r24
 239:usart.c       ****             sendACK();
 877               	.LM70:
 878 038c 0E94 0000 		call sendACK
 240:usart.c       ****             bytesRecieved = 0;
 880               	.LM71:
 881 0390 1A86      		std Y+10,__zero_reg__
 241:usart.c       ****             buffer[2] = 6;
 883               	.LM72:
 884 0392 86E0      		ldi r24,lo8(6)
 885 0394 8D87      		std Y+13,r24
 242:usart.c       ****             /*if(size != 0){
 243:usart.c       ****                 while(1) {
 244:usart.c       ****                     while((bytesRecieved < size+1) && (timeout < 50)){  //1 for crc
 245:usart.c       ****                         if(UCSR1A & (1<<RXC1)){
 246:usart.c       ****                             rxData = UDR1;
 247:usart.c       **** 
 248:usart.c       ****                             //PORTB = 0xFF;
 249:usart.c       ****                         //if(xQueueReceive(USART_ReadQueue,&rxData,portMAX_DELAY) == pdTRUE){
 250:usart.c       ****                             buffer[bytesRecieved] = rxData;
 251:usart.c       ****                             bytesRecieved++;
 252:usart.c       ****                         } else {
 253:usart.c       ****                             //timeout++;
 254:usart.c       ****                             timeout = 1;
 255:usart.c       ****                         }
 256:usart.c       ****                     } 
 257:usart.c       ****                     if(timeout >= 50){
 258:usart.c       ****                         break;
 259:usart.c       ****                     }
 260:usart.c       ****                     if(calcChecksum(buffer,size) != buffer[size]){
 261:usart.c       ****                         sendNACK();
 262:usart.c       ****                         bytesRecieved = 0;
 263:usart.c       ****                     } else {
 264:usart.c       ****                         //PORTB = buffer[0];
 265:usart.c       ****                         sendACK();
 266:usart.c       ****                         memcpy(command.payload,buffer,size);
 267:usart.c       ****                         break;
 268:usart.c       ****                     }
 269:usart.c       ****                 }
 270:usart.c       ****             }*/
 271:usart.c       ****             processCommand(&command,&response);
 887               	.LM73:
 888 0396 CE01      		movw r24,r28
 889 0398 4396      		adiw r24,19
 890 039a 9E01      		movw r18,r28
 891 039c 2A5C      		subi r18,lo8(-(54))
 892 039e 3F4F      		sbci r19,hi8(-(54))
 893 03a0 B901      		movw r22,r18
 894 03a2 0E94 0000 		call processCommand
 272:usart.c       ****             sendResponse(&response);
 896               	.LM74:
 897 03a6 CE01      		movw r24,r28
 898 03a8 C696      		adiw r24,54
 899 03aa 0E94 0000 		call sendResponse
 900 03ae 00C0      		rjmp .L44
 901               	.LBE2:
 918               	.Lscope13:
 920               		.stabd	78,0,0
 923               	.global	sendResponse
 925               	sendResponse:
 926               		.stabd	46,0,0
 273:usart.c       **** 
 274:usart.c       ****         //}
 275:usart.c       **** 
 276:usart.c       ****     }
 277:usart.c       **** 
 278:usart.c       **** }
 279:usart.c       **** 
 280:usart.c       **** int sendResponse(Response* response){
 928               	.LM75:
 929               	.LFBB14:
 930 03b0 DF93      		push r29
 931 03b2 CF93      		push r28
 932 03b4 CDB7      		in r28,__SP_L__
 933 03b6 DEB7      		in r29,__SP_H__
 934 03b8 2C97      		sbiw r28,12
 935 03ba 0FB6      		in __tmp_reg__,__SREG__
 936 03bc F894      		cli
 937 03be DEBF      		out __SP_H__,r29
 938 03c0 0FBE      		out __SREG__,__tmp_reg__
 939 03c2 CDBF      		out __SP_L__,r28
 940               	/* prologue: function */
 941               	/* frame size = 12 */
 942 03c4 9887      		std Y+8,r25
 943 03c6 8F83      		std Y+7,r24
 281:usart.c       ****     char checksumBuffer[2];
 282:usart.c       ****     int i;
 283:usart.c       ****     int timeout = 1500;
 945               	.LM76:
 946 03c8 8CED      		ldi r24,lo8(1500)
 947 03ca 95E0      		ldi r25,hi8(1500)
 948 03cc 9A83      		std Y+2,r25
 949 03ce 8983      		std Y+1,r24
 950               	.L53:
 284:usart.c       ****     while(1){
 285:usart.c       ****         PORTB = 0x20;
 952               	.LM77:
 953 03d0 E5E2      		ldi r30,lo8(37)
 954 03d2 F0E0      		ldi r31,hi8(37)
 955 03d4 80E2      		ldi r24,lo8(32)
 956 03d6 8083      		st Z,r24
 286:usart.c       ****         USART_Write(response->commandBack);
 958               	.LM78:
 959 03d8 EF81      		ldd r30,Y+7
 960 03da F885      		ldd r31,Y+8
 961 03dc 8081      		ld r24,Z
 962 03de 0E94 0000 		call USART_Write
 287:usart.c       ****         USART_Write(response->size);
 964               	.LM79:
 965 03e2 EF81      		ldd r30,Y+7
 966 03e4 F885      		ldd r31,Y+8
 967 03e6 8181      		ldd r24,Z+1
 968 03e8 0E94 0000 		call USART_Write
 288:usart.c       ****         checksumBuffer[0] = response->commandBack;
 970               	.LM80:
 971 03ec EF81      		ldd r30,Y+7
 972 03ee F885      		ldd r31,Y+8
 973 03f0 8081      		ld r24,Z
 974 03f2 8D83      		std Y+5,r24
 289:usart.c       ****         checksumBuffer[1] = response->size;
 976               	.LM81:
 977 03f4 EF81      		ldd r30,Y+7
 978 03f6 F885      		ldd r31,Y+8
 979 03f8 8181      		ldd r24,Z+1
 980 03fa 8E83      		std Y+6,r24
 290:usart.c       ****         USART_Write(calcChecksum(checksumBuffer,2));
 982               	.LM82:
 983 03fc CE01      		movw r24,r28
 984 03fe 0596      		adiw r24,5
 985 0400 62E0      		ldi r22,lo8(2)
 986 0402 0E94 0000 		call calcChecksum
 987 0406 0E94 0000 		call USART_Write
 291:usart.c       ****         switch(waitForAck()){
 989               	.LM83:
 990 040a 0E94 0000 		call waitForAck
 991 040e 282F      		mov r18,r24
 992 0410 3327      		clr r19
 993 0412 27FD      		sbrc r18,7
 994 0414 3095      		com r19
 995 0416 3C87      		std Y+12,r19
 996 0418 2B87      		std Y+11,r18
 997 041a 8B85      		ldd r24,Y+11
 998 041c 9C85      		ldd r25,Y+12
 999 041e 0097      		sbiw r24,0
 1000 0420 01F0      		breq .L49
 1001 0422 2B85      		ldd r18,Y+11
 1002 0424 3C85      		ldd r19,Y+12
 1003 0426 2130      		cpi r18,1
 1004 0428 3105      		cpc r19,__zero_reg__
 1005 042a 01F0      		breq .L51
 1006 042c 8B85      		ldd r24,Y+11
 1007 042e 9C85      		ldd r25,Y+12
 1008 0430 2FEF      		ldi r18,hi8(-1)
 1009 0432 8F3F      		cpi r24,lo8(-1)
 1010 0434 9207      		cpc r25,r18
 1011 0436 01F4      		brne .L53
 1012               	.L48:
 292:usart.c       ****         case 1:
 293:usart.c       ****             goto outOfWhile;
 294:usart.c       ****         case -1:
 295:usart.c       ****             return -1;
 1014               	.LM84:
 1015 0438 8FEF      		ldi r24,lo8(-1)
 1016 043a 9FEF      		ldi r25,hi8(-1)
 1017 043c 9A87      		std Y+10,r25
 1018 043e 8987      		std Y+9,r24
 1019 0440 00C0      		rjmp .L52
 1020               	.L49:
 296:usart.c       ****         case 0:
 297:usart.c       ****             timeout--;
 1022               	.LM85:
 1023 0442 8981      		ldd r24,Y+1
 1024 0444 9A81      		ldd r25,Y+2
 1025 0446 0197      		sbiw r24,1
 1026 0448 9A83      		std Y+2,r25
 1027 044a 8983      		std Y+1,r24
 298:usart.c       ****             if(!timeout){
 1029               	.LM86:
 1030 044c 8981      		ldd r24,Y+1
 1031 044e 9A81      		ldd r25,Y+2
 1032 0450 0097      		sbiw r24,0
 1033 0452 01F0      		breq .+2
 1034 0454 00C0      		rjmp .L53
 299:usart.c       ****                 return -1;
 1036               	.LM87:
 1037 0456 2FEF      		ldi r18,lo8(-1)
 1038 0458 3FEF      		ldi r19,hi8(-1)
 1039 045a 3A87      		std Y+10,r19
 1040 045c 2987      		std Y+9,r18
 1041 045e 00C0      		rjmp .L52
 1042               	.L51:
 300:usart.c       ****             }
 301:usart.c       ****         }
 302:usart.c       ****     }
 303:usart.c       **** 
 304:usart.c       ****     outOfWhile:
 305:usart.c       **** 
 306:usart.c       ****     PORTB = 0x30;
 1044               	.LM88:
 1045 0460 E5E2      		ldi r30,lo8(37)
 1046 0462 F0E0      		ldi r31,hi8(37)
 1047 0464 80E3      		ldi r24,lo8(48)
 1048 0466 8083      		st Z,r24
 307:usart.c       **** 
 308:usart.c       ****     for(i=0;i<response->size;i++){
 1050               	.LM89:
 1051 0468 1C82      		std Y+4,__zero_reg__
 1052 046a 1B82      		std Y+3,__zero_reg__
 1053 046c 00C0      		rjmp .L54
 1054               	.L55:
 309:usart.c       ****         USART_Write(response->payload[i]);
 1056               	.LM90:
 1057 046e 2B81      		ldd r18,Y+3
 1058 0470 3C81      		ldd r19,Y+4
 1059 0472 8F81      		ldd r24,Y+7
 1060 0474 9885      		ldd r25,Y+8
 1061 0476 820F      		add r24,r18
 1062 0478 931F      		adc r25,r19
 1063 047a FC01      		movw r30,r24
 1064 047c 3296      		adiw r30,2
 1065 047e 8081      		ld r24,Z
 1066 0480 0E94 0000 		call USART_Write
 308:usart.c       ****     for(i=0;i<response->size;i++){
 1068               	.LM91:
 1069 0484 8B81      		ldd r24,Y+3
 1070 0486 9C81      		ldd r25,Y+4
 1071 0488 0196      		adiw r24,1
 1072 048a 9C83      		std Y+4,r25
 1073 048c 8B83      		std Y+3,r24
 1074               	.L54:
 1075 048e EF81      		ldd r30,Y+7
 1076 0490 F885      		ldd r31,Y+8
 1077 0492 8181      		ldd r24,Z+1
 1078 0494 282F      		mov r18,r24
 1079 0496 3327      		clr r19
 1080 0498 27FD      		sbrc r18,7
 1081 049a 3095      		com r19
 1082 049c 8B81      		ldd r24,Y+3
 1083 049e 9C81      		ldd r25,Y+4
 1084 04a0 8217      		cp r24,r18
 1085 04a2 9307      		cpc r25,r19
 1086 04a4 04F0      		brlt .L55
 310:usart.c       ****         //USART_AddToQueue(0x30 | (i + 2));
 311:usart.c       ****         //USART_AddToQueue()
 312:usart.c       ****     }
 313:usart.c       ****     USART_Write(calcChecksum(response->payload,response->size));
 1088               	.LM92:
 1089 04a6 8F81      		ldd r24,Y+7
 1090 04a8 9885      		ldd r25,Y+8
 1091 04aa 0296      		adiw r24,2
 1092 04ac 9C01      		movw r18,r24
 1093 04ae EF81      		ldd r30,Y+7
 1094 04b0 F885      		ldd r31,Y+8
 1095 04b2 8181      		ldd r24,Z+1
 1096 04b4 482F      		mov r20,r24
 1097 04b6 C901      		movw r24,r18
 1098 04b8 642F      		mov r22,r20
 1099 04ba 0E94 0000 		call calcChecksum
 1100 04be 0E94 0000 		call USART_Write
 314:usart.c       **** 
 315:usart.c       ****     waitForAck();
 1102               	.LM93:
 1103 04c2 0E94 0000 		call waitForAck
 316:usart.c       **** 
 317:usart.c       ****     return 0;
 1105               	.LM94:
 1106 04c6 1A86      		std Y+10,__zero_reg__
 1107 04c8 1986      		std Y+9,__zero_reg__
 1108               	.L52:
 1109 04ca 8985      		ldd r24,Y+9
 1110 04cc 9A85      		ldd r25,Y+10
 1111               	/* epilogue start */
 318:usart.c       **** 
 319:usart.c       **** }
 1113               	.LM95:
 1114 04ce 2C96      		adiw r28,12
 1115 04d0 0FB6      		in __tmp_reg__,__SREG__
 1116 04d2 F894      		cli
 1117 04d4 DEBF      		out __SP_H__,r29
 1118 04d6 0FBE      		out __SREG__,__tmp_reg__
 1119 04d8 CDBF      		out __SP_L__,r28
 1120 04da CF91      		pop r28
 1121 04dc DF91      		pop r29
 1122 04de 0895      		ret
 1129               	.Lscope14:
 1131               		.stabd	78,0,0
 1133               	.global	sendACK
 1135               	sendACK:
 1136               		.stabd	46,0,0
 320:usart.c       **** 
 321:usart.c       **** void sendACK(){
 1138               	.LM96:
 1139               	.LFBB15:
 1140 04e0 DF93      		push r29
 1141 04e2 CF93      		push r28
 1142 04e4 CDB7      		in r28,__SP_L__
 1143 04e6 DEB7      		in r29,__SP_H__
 1144               	/* prologue: function */
 1145               	/* frame size = 0 */
 322:usart.c       ****     USART_Write(128);
 1147               	.LM97:
 1148 04e8 80E8      		ldi r24,lo8(-128)
 1149 04ea 0E94 0000 		call USART_Write
 1150               	/* epilogue start */
 323:usart.c       **** }
 1152               	.LM98:
 1153 04ee CF91      		pop r28
 1154 04f0 DF91      		pop r29
 1155 04f2 0895      		ret
 1157               	.Lscope15:
 1159               		.stabd	78,0,0
 1161               	.global	sendNACK
 1163               	sendNACK:
 1164               		.stabd	46,0,0
 324:usart.c       **** 
 325:usart.c       **** void sendNACK(){
 1166               	.LM99:
 1167               	.LFBB16:
 1168 04f4 DF93      		push r29
 1169 04f6 CF93      		push r28
 1170 04f8 CDB7      		in r28,__SP_L__
 1171 04fa DEB7      		in r29,__SP_H__
 1172               	/* prologue: function */
 1173               	/* frame size = 0 */
 326:usart.c       ****     USART_Write(80);
 1175               	.LM100:
 1176 04fc 80E5      		ldi r24,lo8(80)
 1177 04fe 0E94 0000 		call USART_Write
 1178               	/* epilogue start */
 327:usart.c       **** }
 1180               	.LM101:
 1181 0502 CF91      		pop r28
 1182 0504 DF91      		pop r29
 1183 0506 0895      		ret
 1185               	.Lscope16:
 1187               		.stabd	78,0,0
 1189               	.global	waitForAck
 1191               	waitForAck:
 1192               		.stabd	46,0,0
 328:usart.c       **** 
 329:usart.c       **** char waitForAck(){
 1194               	.LM102:
 1195               	.LFBB17:
 1196 0508 DF93      		push r29
 1197 050a CF93      		push r28
 1198 050c 00D0      		rcall .
 1199 050e CDB7      		in r28,__SP_L__
 1200 0510 DEB7      		in r29,__SP_H__
 1201               	/* prologue: function */
 1202               	/* frame size = 3 */
 330:usart.c       ****     int timeout = 1500;
 1204               	.LM103:
 1205 0512 8CED      		ldi r24,lo8(1500)
 1206 0514 95E0      		ldi r25,hi8(1500)
 1207 0516 9A83      		std Y+2,r25
 1208 0518 8983      		std Y+1,r24
 1209 051a 00C0      		rjmp .L62
 1210               	.L64:
 331:usart.c       ****     while ( !(UCSR2A & (1<<RXC2)) ){
 332:usart.c       ****         timeout--;
 1212               	.LM104:
 1213 051c 8981      		ldd r24,Y+1
 1214 051e 9A81      		ldd r25,Y+2
 1215 0520 0197      		sbiw r24,1
 1216 0522 9A83      		std Y+2,r25
 1217 0524 8983      		std Y+1,r24
 333:usart.c       ****         if(!timeout){
 1219               	.LM105:
 1220 0526 8981      		ldd r24,Y+1
 1221 0528 9A81      		ldd r25,Y+2
 1222 052a 0097      		sbiw r24,0
 1223 052c 01F4      		brne .L62
 334:usart.c       ****             return -1;
 1225               	.LM106:
 1226 052e 8FEF      		ldi r24,lo8(-1)
 1227 0530 8B83      		std Y+3,r24
 1228 0532 00C0      		rjmp .L63
 1229               	.L62:
 331:usart.c       ****     while ( !(UCSR2A & (1<<RXC2)) ){
 1231               	.LM107:
 1232 0534 E0ED      		ldi r30,lo8(208)
 1233 0536 F0E0      		ldi r31,hi8(208)
 1234 0538 8081      		ld r24,Z
 1235 053a 8823      		tst r24
 1236 053c 04F4      		brge .L64
 335:usart.c       ****         }
 336:usart.c       ****     }
 337:usart.c       ****     if(UDR2 == 128){
 1238               	.LM108:
 1239 053e E6ED      		ldi r30,lo8(214)
 1240 0540 F0E0      		ldi r31,hi8(214)
 1241 0542 8081      		ld r24,Z
 1242 0544 8038      		cpi r24,lo8(-128)
 1243 0546 01F4      		brne .L65
 338:usart.c       ****         return 1;
 1245               	.LM109:
 1246 0548 81E0      		ldi r24,lo8(1)
 1247 054a 8B83      		std Y+3,r24
 1248 054c 00C0      		rjmp .L63
 1249               	.L65:
 339:usart.c       ****     } else {
 340:usart.c       ****         return 0;
 1251               	.LM110:
 1252 054e 1B82      		std Y+3,__zero_reg__
 1253               	.L63:
 1254 0550 8B81      		ldd r24,Y+3
 1255               	/* epilogue start */
 341:usart.c       ****     }
 342:usart.c       **** }
 1257               	.LM111:
 1258 0552 0F90      		pop __tmp_reg__
 1259 0554 0F90      		pop __tmp_reg__
 1260 0556 0F90      		pop __tmp_reg__
 1261 0558 CF91      		pop r28
 1262 055a DF91      		pop r29
 1263 055c 0895      		ret
 1268               	.Lscope17:
 1270               		.stabd	78,0,0
 1274               	.global	calcChecksum
 1276               	calcChecksum:
 1277               		.stabd	46,0,0
 343:usart.c       **** 
 344:usart.c       **** uint8_t calcChecksum(uint8_t* buffer,uint8_t size){
 1279               	.LM112:
 1280               	.LFBB18:
 1281 055e DF93      		push r29
 1282 0560 CF93      		push r28
 1283 0562 00D0      		rcall .
 1284 0564 00D0      		rcall .
 1285 0566 CDB7      		in r28,__SP_L__
 1286 0568 DEB7      		in r29,__SP_H__
 1287               	/* prologue: function */
 1288               	/* frame size = 6 */
 1289 056a 9D83      		std Y+5,r25
 1290 056c 8C83      		std Y+4,r24
 1291 056e 6E83      		std Y+6,r22
 345:usart.c       ****     uint8_t checksum = 0;
 1293               	.LM113:
 1294 0570 1B82      		std Y+3,__zero_reg__
 1295               	.LBB3:
 346:usart.c       ****     for(int i = 0; i < size; i++) {
 1297               	.LM114:
 1298 0572 1A82      		std Y+2,__zero_reg__
 1299 0574 1982      		std Y+1,__zero_reg__
 1300 0576 00C0      		rjmp .L68
 1301               	.L69:
 347:usart.c       ****         checksum += *(buffer++);
 1303               	.LM115:
 1304 0578 EC81      		ldd r30,Y+4
 1305 057a FD81      		ldd r31,Y+5
 1306 057c 9081      		ld r25,Z
 1307 057e 8B81      		ldd r24,Y+3
 1308 0580 890F      		add r24,r25
 1309 0582 8B83      		std Y+3,r24
 1310 0584 8C81      		ldd r24,Y+4
 1311 0586 9D81      		ldd r25,Y+5
 1312 0588 0196      		adiw r24,1
 1313 058a 9D83      		std Y+5,r25
 1314 058c 8C83      		std Y+4,r24
 346:usart.c       ****     for(int i = 0; i < size; i++) {
 1316               	.LM116:
 1317 058e 8981      		ldd r24,Y+1
 1318 0590 9A81      		ldd r25,Y+2
 1319 0592 0196      		adiw r24,1
 1320 0594 9A83      		std Y+2,r25
 1321 0596 8983      		std Y+1,r24
 1322               	.L68:
 1323 0598 8E81      		ldd r24,Y+6
 1324 059a 282F      		mov r18,r24
 1325 059c 30E0      		ldi r19,lo8(0)
 1326 059e 8981      		ldd r24,Y+1
 1327 05a0 9A81      		ldd r25,Y+2
 1328 05a2 8217      		cp r24,r18
 1329 05a4 9307      		cpc r25,r19
 1330 05a6 04F0      		brlt .L69
 1331               	.LBE3:
 348:usart.c       ****     }
 349:usart.c       ****     return checksum;
 1333               	.LM117:
 1334 05a8 8B81      		ldd r24,Y+3
 1335               	/* epilogue start */
 350:usart.c       **** }
 1337               	.LM118:
 1338 05aa 2696      		adiw r28,6
 1339 05ac 0FB6      		in __tmp_reg__,__SREG__
 1340 05ae F894      		cli
 1341 05b0 DEBF      		out __SP_H__,r29
 1342 05b2 0FBE      		out __SREG__,__tmp_reg__
 1343 05b4 CDBF      		out __SP_L__,r28
 1344 05b6 CF91      		pop r28
 1345 05b8 DF91      		pop r29
 1346 05ba 0895      		ret
 1354               	.Lscope18:
 1356               		.stabd	78,0,0
 1357               		.comm USART_WriteQueue,2,1
 1358               		.comm USART_ReadQueue,2,1
 1359               		.comm USART_WriteQueueLog,2,1
 1364               	.Letext0:
 1365               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 usart.c
     /tmp/ccJ6A7dd.s:2      *ABS*:0000003f __SREG__
     /tmp/ccJ6A7dd.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccJ6A7dd.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccJ6A7dd.s:5      *ABS*:00000034 __CCP__
     /tmp/ccJ6A7dd.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccJ6A7dd.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccJ6A7dd.s:109    .text:00000000 USART_Init
                            *COM*:00000002 USART_WriteQueue
                            *COM*:00000002 USART_ReadQueue
     /tmp/ccJ6A7dd.s:196    .text:0000007a USART_Write
     /tmp/ccJ6A7dd.s:242    .text:000000a8 USART_Write_Unprotected
     /tmp/ccJ6A7dd.s:287    .text:000000d6 USART_Read
     /tmp/ccJ6A7dd.s:324    .text:000000f4 __vector_36
     /tmp/ccJ6A7dd.s:395    .text:00000154 USART_AddToQueue
     /tmp/ccJ6A7dd.s:435    .text:00000182 USART_TransmitString
     /tmp/ccJ6A7dd.s:489    .text:000001bc vTaskUSARTWrite
     /tmp/ccJ6A7dd.s:546    .text:00000200 USART_LogChar
                            *COM*:00000002 USART_WriteQueueLog
     /tmp/ccJ6A7dd.s:586    .text:0000022e USART_LogString
     /tmp/ccJ6A7dd.s:640    .text:00000268 vTaskUSARTLog
     /tmp/ccJ6A7dd.s:696    .text:000002ac USART_GetChar
     /tmp/ccJ6A7dd.s:754    .text:000002ec vTaskUSARTRead
     /tmp/ccJ6A7dd.s:1135   .text:000004e0 sendACK
     /tmp/ccJ6A7dd.s:925    .text:000003b0 sendResponse
     /tmp/ccJ6A7dd.s:1276   .text:0000055e calcChecksum
     /tmp/ccJ6A7dd.s:1191   .text:00000508 waitForAck
     /tmp/ccJ6A7dd.s:1163   .text:000004f4 sendNACK

UNDEFINED SYMBOLS
xQueueGenericCreate
xQueueGenericSend
xQueueGenericReceive
vTaskDelay
processCommand
__do_clear_bss
