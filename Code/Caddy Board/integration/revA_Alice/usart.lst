   1               		.file	"usart.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 107               	.global	USART_Init
 109               	USART_Init:
 110               		.stabd	46,0,0
   1:usart.c       **** /***************************
   2:usart.c       **** *
   3:usart.c       **** * Filename: usart.cpp
   4:usart.c       **** *
   5:usart.c       **** * Description: Provides print methods for various
   6:usart.c       **** *  datatypes using USART.
   7:usart.c       **** *
   8:usart.c       **** * Authors: Doug Gallatin and Jason Schray
   9:usart.c       **** * Edited by: Tim Peters & James Humphrey
  10:usart.c       **** *
  11:usart.c       **** ***************************/
  12:usart.c       **** 
  13:usart.c       **** #include "FreeRTOS.h"
  14:usart.c       **** #include "semphr.h" 
  15:usart.c       **** #include "queue.h"
  16:usart.c       **** #include "protocol.h"
  17:usart.c       **** 
  18:usart.c       **** #include <stdlib.h>
  19:usart.c       **** #include <stdint.h>
  20:usart.c       **** #include <avr/io.h>
  21:usart.c       **** 
  22:usart.c       **** 
  23:usart.c       **** #include "usart.h"
  24:usart.c       **** 
  25:usart.c       **** xQueueHandle USART_WriteQueue;
  26:usart.c       **** xQueueHandle USART_ReadQueue;
  27:usart.c       **** xQueueHandle USART_WriteQueueLog;
  28:usart.c       **** 
  29:usart.c       **** 
  30:usart.c       **** 
  31:usart.c       **** /************************************
  32:usart.c       **** * Procedure: usart_init
  33:usart.c       **** *  
  34:usart.c       **** * Description: Initializes the USART module with 
  35:usart.c       **** *  the specified baud rate and clk speed.
  36:usart.c       **** *
  37:usart.c       **** * Param buadin: The desired Baud rate.
  38:usart.c       **** * Param clk_seedin: The clk speed of the ATmega328p
  39:usart.c       **** ************************************/
  40:usart.c       **** void USART_Init(uint16_t baudin, uint32_t clk_speedin) {
 112               	.LM0:
 113               	.LFBB1:
 114 0000 EF92      		push r14
 115 0002 FF92      		push r15
 116 0004 0F93      		push r16
 117 0006 1F93      		push r17
 118 0008 DF93      		push r29
 119 000a CF93      		push r28
 120 000c CDB7      		in r28,__SP_L__
 121 000e DEB7      		in r29,__SP_H__
 122 0010 2A97      		sbiw r28,10
 123 0012 0FB6      		in __tmp_reg__,__SREG__
 124 0014 F894      		cli
 125 0016 DEBF      		out __SP_H__,r29
 126 0018 0FBE      		out __SREG__,__tmp_reg__
 127 001a CDBF      		out __SP_L__,r28
 128               	/* prologue: function */
 129               	/* frame size = 10 */
 130 001c 9E83      		std Y+6,r25
 131 001e 8D83      		std Y+5,r24
 132 0020 4F83      		std Y+7,r20
 133 0022 5887      		std Y+8,r21
 134 0024 6987      		std Y+9,r22
 135 0026 7A87      		std Y+10,r23
  41:usart.c       ****     USART_WriteQueue = xQueueCreate(64,sizeof(uint8_t));
 137               	.LM1:
 138 0028 80E4      		ldi r24,lo8(64)
 139 002a 61E0      		ldi r22,lo8(1)
 140 002c 40E0      		ldi r20,lo8(0)
 141 002e 0E94 0000 		call xQueueGenericCreate
 142 0032 9093 0000 		sts (USART_WriteQueue)+1,r25
 143 0036 8093 0000 		sts USART_WriteQueue,r24
  42:usart.c       ****     USART_ReadQueue = xQueueCreate(8,sizeof(uint8_t));
 145               	.LM2:
 146 003a 88E0      		ldi r24,lo8(8)
 147 003c 61E0      		ldi r22,lo8(1)
 148 003e 40E0      		ldi r20,lo8(0)
 149 0040 0E94 0000 		call xQueueGenericCreate
 150 0044 9093 0000 		sts (USART_ReadQueue)+1,r25
 151 0048 8093 0000 		sts USART_ReadQueue,r24
  43:usart.c       **** 
  44:usart.c       ****     uint32_t ubrr = clk_speedin/(16UL)/baudin-1;
 153               	.LM3:
 154 004c 8F81      		ldd r24,Y+7
 155 004e 9885      		ldd r25,Y+8
 156 0050 A985      		ldd r26,Y+9
 157 0052 BA85      		ldd r27,Y+10
 158 0054 7C01      		movw r14,r24
 159 0056 8D01      		movw r16,r26
 160 0058 6894      		set
 161 005a 13F8      		bld __zero_reg__,4-1
 162 005c 1695      	1:	lsr r17
 163 005e 0795      		ror r16
 164 0060 F794      		ror r15
 165 0062 E794      		ror r14
 166 0064 1694      		lsr __zero_reg__
 167 0066 01F4      		brne 1b
 168 0068 8D81      		ldd r24,Y+5
 169 006a 9E81      		ldd r25,Y+6
 170 006c 9C01      		movw r18,r24
 171 006e 40E0      		ldi r20,lo8(0)
 172 0070 50E0      		ldi r21,hi8(0)
 173 0072 C801      		movw r24,r16
 174 0074 B701      		movw r22,r14
 175 0076 0E94 0000 		call __udivmodsi4
 176 007a DA01      		movw r26,r20
 177 007c C901      		movw r24,r18
 178 007e 0197      		sbiw r24,1
 179 0080 A109      		sbc r26,__zero_reg__
 180 0082 B109      		sbc r27,__zero_reg__
 181 0084 8983      		std Y+1,r24
 182 0086 9A83      		std Y+2,r25
 183 0088 AB83      		std Y+3,r26
 184 008a BC83      		std Y+4,r27
  45:usart.c       ****     UBRR1H = (unsigned char)(ubrr>>8) ;// & 0x7F;
 186               	.LM4:
 187 008c EDEC      		ldi r30,lo8(205)
 188 008e F0E0      		ldi r31,hi8(205)
 189 0090 8981      		ldd r24,Y+1
 190 0092 9A81      		ldd r25,Y+2
 191 0094 AB81      		ldd r26,Y+3
 192 0096 BC81      		ldd r27,Y+4
 193 0098 892F      		mov r24,r25
 194 009a 9A2F      		mov r25,r26
 195 009c AB2F      		mov r26,r27
 196 009e BB27      		clr r27
 197 00a0 8083      		st Z,r24
  46:usart.c       ****     UBRR1L = (unsigned char)ubrr;
 199               	.LM5:
 200 00a2 ECEC      		ldi r30,lo8(204)
 201 00a4 F0E0      		ldi r31,hi8(204)
 202 00a6 8981      		ldd r24,Y+1
 203 00a8 8083      		st Z,r24
  47:usart.c       ****     
  48:usart.c       ****     //UBRR0H = 0; //115200
  49:usart.c       ****     //UBRR0L = 8;
  50:usart.c       **** 
  51:usart.c       ****     /* Enable receiver and transmitter */
  52:usart.c       ****     UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 205               	.LM6:
 206 00aa E9EC      		ldi r30,lo8(201)
 207 00ac F0E0      		ldi r31,hi8(201)
 208 00ae 88E1      		ldi r24,lo8(24)
 209 00b0 8083      		st Z,r24
  53:usart.c       ****     /* Set frame format: 8data, 1stop bit */
  54:usart.c       ****     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
 211               	.LM7:
 212 00b2 EAEC      		ldi r30,lo8(202)
 213 00b4 F0E0      		ldi r31,hi8(202)
 214 00b6 86E0      		ldi r24,lo8(6)
 215 00b8 8083      		st Z,r24
  55:usart.c       **** 	// clear U2X0 for Synchronous operation
  56:usart.c       ****     UCSR1A &= ~(1<<U2X1);
 217               	.LM8:
 218 00ba A8EC      		ldi r26,lo8(200)
 219 00bc B0E0      		ldi r27,hi8(200)
 220 00be E8EC      		ldi r30,lo8(200)
 221 00c0 F0E0      		ldi r31,hi8(200)
 222 00c2 8081      		ld r24,Z
 223 00c4 8D7F      		andi r24,lo8(-3)
 224 00c6 8C93      		st X,r24
 225               	/* epilogue start */
  57:usart.c       **** 
  58:usart.c       ****     //UCSR0B |= (1<<UDRIE0);
  59:usart.c       **** 
  60:usart.c       **** 
  61:usart.c       ****     //UART0 Logging
  62:usart.c       **** 
  63:usart.c       ****     /*USART_WriteQueueLog = xQueueCreate(32,sizeof(uint8_t));
  64:usart.c       **** 
  65:usart.c       ****     ubrr = clk_speedin/(16UL)/baudin-1;
  66:usart.c       ****     UBRR0H = (unsigned char)(ubrr>>8) ;// & 0x7F;
  67:usart.c       ****     UBRR0L = (unsigned char)ubrr;
  68:usart.c       ****     
  69:usart.c       ****     //UBRR0H = 0; //115200
  70:usart.c       ****     //UBRR0L = 8;
  71:usart.c       **** 
  72:usart.c       ****     /* Enable receiver and transmitter */
  73:usart.c       ****     //UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  74:usart.c       ****     /* Set frame format: 8data, 1stop bit */
  75:usart.c       ****     //UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  76:usart.c       ****     // clear U2X0 for Synchronous operation
  77:usart.c       ****     //UCSR0A &= ~(1<<U2X0);*/
  78:usart.c       **** 
  79:usart.c       **** }
 227               	.LM9:
 228 00c8 2A96      		adiw r28,10
 229 00ca 0FB6      		in __tmp_reg__,__SREG__
 230 00cc F894      		cli
 231 00ce DEBF      		out __SP_H__,r29
 232 00d0 0FBE      		out __SREG__,__tmp_reg__
 233 00d2 CDBF      		out __SP_L__,r28
 234 00d4 CF91      		pop r28
 235 00d6 DF91      		pop r29
 236 00d8 1F91      		pop r17
 237 00da 0F91      		pop r16
 238 00dc FF90      		pop r15
 239 00de EF90      		pop r14
 240 00e0 0895      		ret
 245               	.Lscope1:
 247               		.stabd	78,0,0
 250               	.global	USART_Write
 252               	USART_Write:
 253               		.stabd	46,0,0
  80:usart.c       **** 
  81:usart.c       **** /*the send function will put 8bits on the trans line. */
  82:usart.c       **** void USART_Write(uint8_t data) {
 255               	.LM10:
 256               	.LFBB2:
 257 00e2 DF93      		push r29
 258 00e4 CF93      		push r28
 259 00e6 0F92      		push __tmp_reg__
 260 00e8 CDB7      		in r28,__SP_L__
 261 00ea DEB7      		in r29,__SP_H__
 262               	/* prologue: function */
 263               	/* frame size = 1 */
 264 00ec 8983      		std Y+1,r24
 265               	.L4:
  83:usart.c       **** 		/* Wait for empty transmit buffer */
  84:usart.c       **** 		while ( !( UCSR0A & (1<<UDRE0)) )
 267               	.LM11:
 268 00ee E0EC      		ldi r30,lo8(192)
 269 00f0 F0E0      		ldi r31,hi8(192)
 270 00f2 8081      		ld r24,Z
 271 00f4 882F      		mov r24,r24
 272 00f6 90E0      		ldi r25,lo8(0)
 273 00f8 8072      		andi r24,lo8(32)
 274 00fa 9070      		andi r25,hi8(32)
 275 00fc 0097      		sbiw r24,0
 276 00fe 01F0      		breq .L4
  85:usart.c       **** 		;
  86:usart.c       **** 		/* Put data into buffer, sends the data */
  87:usart.c       **** 		UDR0 = data;
 278               	.LM12:
 279 0100 E6EC      		ldi r30,lo8(198)
 280 0102 F0E0      		ldi r31,hi8(198)
 281 0104 8981      		ldd r24,Y+1
 282 0106 8083      		st Z,r24
 283               	/* epilogue start */
  88:usart.c       **** }
 285               	.LM13:
 286 0108 0F90      		pop __tmp_reg__
 287 010a CF91      		pop r28
 288 010c DF91      		pop r29
 289 010e 0895      		ret
 291               	.Lscope2:
 293               		.stabd	78,0,0
 296               	.global	USART_Write_Unprotected
 298               	USART_Write_Unprotected:
 299               		.stabd	46,0,0
  89:usart.c       **** 
  90:usart.c       **** /*the send function will put 8bits on the trans line. */
  91:usart.c       **** void USART_Write_Unprotected(uint8_t data) {
 301               	.LM14:
 302               	.LFBB3:
 303 0110 DF93      		push r29
 304 0112 CF93      		push r28
 305 0114 0F92      		push __tmp_reg__
 306 0116 CDB7      		in r28,__SP_L__
 307 0118 DEB7      		in r29,__SP_H__
 308               	/* prologue: function */
 309               	/* frame size = 1 */
 310 011a 8983      		std Y+1,r24
 311               	.L7:
  92:usart.c       **** 	/* Wait for empty transmit buffer */
  93:usart.c       **** 	while ( !( UCSR0A & (1<<UDRE0)) )
 313               	.LM15:
 314 011c E0EC      		ldi r30,lo8(192)
 315 011e F0E0      		ldi r31,hi8(192)
 316 0120 8081      		ld r24,Z
 317 0122 882F      		mov r24,r24
 318 0124 90E0      		ldi r25,lo8(0)
 319 0126 8072      		andi r24,lo8(32)
 320 0128 9070      		andi r25,hi8(32)
 321 012a 0097      		sbiw r24,0
 322 012c 01F0      		breq .L7
  94:usart.c       **** 	;
  95:usart.c       **** 	/* Put data into buffer, sends the data */
  96:usart.c       **** 	UDR0 = data;
 324               	.LM16:
 325 012e E6EC      		ldi r30,lo8(198)
 326 0130 F0E0      		ldi r31,hi8(198)
 327 0132 8981      		ldd r24,Y+1
 328 0134 8083      		st Z,r24
 329               	/* epilogue start */
  97:usart.c       **** }
 331               	.LM17:
 332 0136 0F90      		pop __tmp_reg__
 333 0138 CF91      		pop r28
 334 013a DF91      		pop r29
 335 013c 0895      		ret
 337               	.Lscope3:
 339               		.stabd	78,0,0
 341               	.global	USART_Read
 343               	USART_Read:
 344               		.stabd	46,0,0
  98:usart.c       **** 
  99:usart.c       **** /* the receive data function. Note that this a blocking call
 100:usart.c       **** Therefore you may not get control back after this is called 
 101:usart.c       **** until a much later time. It may be helpful to use the 
 102:usart.c       **** istheredata() function to check before calling this function
 103:usart.c       ****         @return 8bit data packet from sender
 104:usart.c       **** */
 105:usart.c       **** uint8_t USART_Read(void) {
 346               	.LM18:
 347               	.LFBB4:
 348 013e DF93      		push r29
 349 0140 CF93      		push r28
 350 0142 CDB7      		in r28,__SP_L__
 351 0144 DEB7      		in r29,__SP_H__
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	.L10:
 106:usart.c       ****     /* Wait for data to be received */
 107:usart.c       ****     while ( !(UCSR0A & (1<<RXC0)) )
 356               	.LM19:
 357 0146 E0EC      		ldi r30,lo8(192)
 358 0148 F0E0      		ldi r31,hi8(192)
 359 014a 8081      		ld r24,Z
 360 014c 8823      		tst r24
 361 014e 04F4      		brge .L10
 108:usart.c       ****         ;
 109:usart.c       ****     /* Get and return received data from buffer */
 110:usart.c       ****     return UDR0;
 363               	.LM20:
 364 0150 E6EC      		ldi r30,lo8(198)
 365 0152 F0E0      		ldi r31,hi8(198)
 366 0154 8081      		ld r24,Z
 367               	/* epilogue start */
 111:usart.c       **** }
 369               	.LM21:
 370 0156 CF91      		pop r28
 371 0158 DF91      		pop r29
 372 015a 0895      		ret
 374               	.Lscope4:
 376               		.stabd	78,0,0
 379               	.global	ISR
 381               	ISR:
 382               		.stabd	46,0,0
 112:usart.c       **** 
 113:usart.c       **** 
 114:usart.c       **** ISR(USART0_RX_vect){
 384               	.LM22:
 385               	.LFBB5:
 386 015c DF93      		push r29
 387 015e CF93      		push r28
 388 0160 00D0      		rcall .
 389 0162 0F92      		push __tmp_reg__
 390 0164 0F92      		push __tmp_reg__
 391 0166 CDB7      		in r28,__SP_L__
 392 0168 DEB7      		in r29,__SP_H__
 393               	/* prologue: function */
 394               	/* frame size = 5 */
 395 016a 9B83      		std Y+3,r25
 396 016c 8A83      		std Y+2,r24
 115:usart.c       ****     uint8_t data;
 116:usart.c       ****     data = UDR1;
 398               	.LM23:
 399 016e EEEC      		ldi r30,lo8(206)
 400 0170 F0E0      		ldi r31,hi8(206)
 401 0172 8081      		ld r24,Z
 402 0174 8983      		std Y+1,r24
 117:usart.c       ****     xQueueSendToBackFromISR(USART_ReadQueue,&data,NULL);
 404               	.LM24:
 405 0176 8091 0000 		lds r24,USART_ReadQueue
 406 017a 9091 0000 		lds r25,(USART_ReadQueue)+1
 407 017e 9E01      		movw r18,r28
 408 0180 2F5F      		subi r18,lo8(-(1))
 409 0182 3F4F      		sbci r19,hi8(-(1))
 410 0184 B901      		movw r22,r18
 411 0186 40E0      		ldi r20,lo8(0)
 412 0188 50E0      		ldi r21,hi8(0)
 413 018a 20E0      		ldi r18,lo8(0)
 414 018c 0E94 0000 		call xQueueGenericSendFromISR
 415               	/* epilogue start */
 118:usart.c       **** }
 417               	.LM25:
 418 0190 0F90      		pop __tmp_reg__
 419 0192 0F90      		pop __tmp_reg__
 420 0194 0F90      		pop __tmp_reg__
 421 0196 0F90      		pop __tmp_reg__
 422 0198 0F90      		pop __tmp_reg__
 423 019a CF91      		pop r28
 424 019c DF91      		pop r29
 425 019e 0895      		ret
 430               	.Lscope5:
 432               		.stabd	78,0,0
 435               	.global	USART_AddToQueue
 437               	USART_AddToQueue:
 438               		.stabd	46,0,0
 119:usart.c       **** 
 120:usart.c       **** void USART_AddToQueue(uint8_t data){
 440               	.LM26:
 441               	.LFBB6:
 442 01a0 DF93      		push r29
 443 01a2 CF93      		push r28
 444 01a4 0F92      		push __tmp_reg__
 445 01a6 CDB7      		in r28,__SP_L__
 446 01a8 DEB7      		in r29,__SP_H__
 447               	/* prologue: function */
 448               	/* frame size = 1 */
 449 01aa 8983      		std Y+1,r24
 121:usart.c       ****     
 122:usart.c       ****     xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);
 451               	.LM27:
 452 01ac 8091 0000 		lds r24,USART_WriteQueue
 453 01b0 9091 0000 		lds r25,(USART_WriteQueue)+1
 454 01b4 9E01      		movw r18,r28
 455 01b6 2F5F      		subi r18,lo8(-(1))
 456 01b8 3F4F      		sbci r19,hi8(-(1))
 457 01ba B901      		movw r22,r18
 458 01bc 4FEF      		ldi r20,lo8(-1)
 459 01be 5FEF      		ldi r21,hi8(-1)
 460 01c0 20E0      		ldi r18,lo8(0)
 461 01c2 0E94 0000 		call xQueueGenericSend
 462               	/* epilogue start */
 123:usart.c       **** 
 124:usart.c       **** }
 464               	.LM28:
 465 01c6 0F90      		pop __tmp_reg__
 466 01c8 CF91      		pop r28
 467 01ca DF91      		pop r29
 468 01cc 0895      		ret
 470               	.Lscope6:
 472               		.stabd	78,0,0
 475               	.global	USART_TransmitString
 477               	USART_TransmitString:
 478               		.stabd	46,0,0
 125:usart.c       **** 
 126:usart.c       **** void USART_TransmitString(char* str){
 480               	.LM29:
 481               	.LFBB7:
 482 01ce DF93      		push r29
 483 01d0 CF93      		push r28
 484 01d2 0F92      		push __tmp_reg__
 485 01d4 0F92      		push __tmp_reg__
 486 01d6 CDB7      		in r28,__SP_L__
 487 01d8 DEB7      		in r29,__SP_H__
 488               	/* prologue: function */
 489               	/* frame size = 2 */
 490 01da 9A83      		std Y+2,r25
 491 01dc 8983      		std Y+1,r24
 492 01de 00C0      		rjmp .L17
 493               	.L18:
 127:usart.c       ****     while(*str) {
 128:usart.c       ****         USART_AddToQueue(*str);
 495               	.LM30:
 496 01e0 E981      		ldd r30,Y+1
 497 01e2 FA81      		ldd r31,Y+2
 498 01e4 8081      		ld r24,Z
 499 01e6 0E94 0000 		call USART_AddToQueue
 129:usart.c       ****         str++;
 501               	.LM31:
 502 01ea 8981      		ldd r24,Y+1
 503 01ec 9A81      		ldd r25,Y+2
 504 01ee 0196      		adiw r24,1
 505 01f0 9A83      		std Y+2,r25
 506 01f2 8983      		std Y+1,r24
 507               	.L17:
 127:usart.c       ****     while(*str) {
 509               	.LM32:
 510 01f4 E981      		ldd r30,Y+1
 511 01f6 FA81      		ldd r31,Y+2
 512 01f8 8081      		ld r24,Z
 513 01fa 8823      		tst r24
 514 01fc 01F4      		brne .L18
 515               	/* epilogue start */
 130:usart.c       ****     }
 131:usart.c       **** }
 517               	.LM33:
 518 01fe 0F90      		pop __tmp_reg__
 519 0200 0F90      		pop __tmp_reg__
 520 0202 CF91      		pop r28
 521 0204 DF91      		pop r29
 522 0206 0895      		ret
 524               	.Lscope7:
 526               		.stabd	78,0,0
 529               	.global	vTaskUSARTWrite
 531               	vTaskUSARTWrite:
 532               		.stabd	46,0,0
 132:usart.c       **** 
 133:usart.c       **** void vTaskUSARTWrite(void *pvParameters){
 534               	.LM34:
 535               	.LFBB8:
 536 0208 DF93      		push r29
 537 020a CF93      		push r28
 538 020c 00D0      		rcall .
 539 020e CDB7      		in r28,__SP_L__
 540 0210 DEB7      		in r29,__SP_H__
 541               	/* prologue: function */
 542               	/* frame size = 3 */
 543 0212 9B83      		std Y+3,r25
 544 0214 8A83      		std Y+2,r24
 545               	.L22:
 134:usart.c       ****     uint8_t data;
 135:usart.c       ****     while(1){
 136:usart.c       ****     xQueueReceive(USART_WriteQueue,&data,portMAX_DELAY);
 547               	.LM35:
 548 0216 8091 0000 		lds r24,USART_WriteQueue
 549 021a 9091 0000 		lds r25,(USART_WriteQueue)+1
 550 021e 9E01      		movw r18,r28
 551 0220 2F5F      		subi r18,lo8(-(1))
 552 0222 3F4F      		sbci r19,hi8(-(1))
 553 0224 B901      		movw r22,r18
 554 0226 4FEF      		ldi r20,lo8(-1)
 555 0228 5FEF      		ldi r21,hi8(-1)
 556 022a 20E0      		ldi r18,lo8(0)
 557 022c 0E94 0000 		call xQueueGenericReceive
 558               	.L21:
 137:usart.c       **** 
 138:usart.c       ****         while(!(UCSR1A & (1<<UDRE1)));
 560               	.LM36:
 561 0230 E8EC      		ldi r30,lo8(200)
 562 0232 F0E0      		ldi r31,hi8(200)
 563 0234 8081      		ld r24,Z
 564 0236 882F      		mov r24,r24
 565 0238 90E0      		ldi r25,lo8(0)
 566 023a 8072      		andi r24,lo8(32)
 567 023c 9070      		andi r25,hi8(32)
 568 023e 0097      		sbiw r24,0
 569 0240 01F0      		breq .L21
 139:usart.c       ****         UDR1 = data;
 571               	.LM37:
 572 0242 EEEC      		ldi r30,lo8(206)
 573 0244 F0E0      		ldi r31,hi8(206)
 574 0246 8981      		ldd r24,Y+1
 575 0248 8083      		st Z,r24
 576 024a 00C0      		rjmp .L22
 581               	.Lscope8:
 583               		.stabd	78,0,0
 586               	.global	USART_LogChar
 588               	USART_LogChar:
 589               		.stabd	46,0,0
 140:usart.c       **** 
 141:usart.c       ****     }
 142:usart.c       **** }
 143:usart.c       **** 
 144:usart.c       **** void USART_LogChar(uint8_t data){
 591               	.LM38:
 592               	.LFBB9:
 593 024c DF93      		push r29
 594 024e CF93      		push r28
 595 0250 0F92      		push __tmp_reg__
 596 0252 CDB7      		in r28,__SP_L__
 597 0254 DEB7      		in r29,__SP_H__
 598               	/* prologue: function */
 599               	/* frame size = 1 */
 600 0256 8983      		std Y+1,r24
 145:usart.c       ****     xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
 602               	.LM39:
 603 0258 8091 0000 		lds r24,USART_WriteQueueLog
 604 025c 9091 0000 		lds r25,(USART_WriteQueueLog)+1
 605 0260 9E01      		movw r18,r28
 606 0262 2F5F      		subi r18,lo8(-(1))
 607 0264 3F4F      		sbci r19,hi8(-(1))
 608 0266 B901      		movw r22,r18
 609 0268 4FEF      		ldi r20,lo8(-1)
 610 026a 5FEF      		ldi r21,hi8(-1)
 611 026c 20E0      		ldi r18,lo8(0)
 612 026e 0E94 0000 		call xQueueGenericSend
 613               	/* epilogue start */
 146:usart.c       **** }
 615               	.LM40:
 616 0272 0F90      		pop __tmp_reg__
 617 0274 CF91      		pop r28
 618 0276 DF91      		pop r29
 619 0278 0895      		ret
 621               	.Lscope9:
 623               		.stabd	78,0,0
 626               	.global	USART_LogString
 628               	USART_LogString:
 629               		.stabd	46,0,0
 147:usart.c       **** 
 148:usart.c       **** void USART_LogString(char* str){
 631               	.LM41:
 632               	.LFBB10:
 633 027a DF93      		push r29
 634 027c CF93      		push r28
 635 027e 0F92      		push __tmp_reg__
 636 0280 0F92      		push __tmp_reg__
 637 0282 CDB7      		in r28,__SP_L__
 638 0284 DEB7      		in r29,__SP_H__
 639               	/* prologue: function */
 640               	/* frame size = 2 */
 641 0286 9A83      		std Y+2,r25
 642 0288 8983      		std Y+1,r24
 643 028a 00C0      		rjmp .L27
 644               	.L28:
 149:usart.c       ****     while(*str){
 150:usart.c       ****         USART_LogChar(*str);
 646               	.LM42:
 647 028c E981      		ldd r30,Y+1
 648 028e FA81      		ldd r31,Y+2
 649 0290 8081      		ld r24,Z
 650 0292 0E94 0000 		call USART_LogChar
 151:usart.c       ****         str++;
 652               	.LM43:
 653 0296 8981      		ldd r24,Y+1
 654 0298 9A81      		ldd r25,Y+2
 655 029a 0196      		adiw r24,1
 656 029c 9A83      		std Y+2,r25
 657 029e 8983      		std Y+1,r24
 658               	.L27:
 149:usart.c       ****     while(*str){
 660               	.LM44:
 661 02a0 E981      		ldd r30,Y+1
 662 02a2 FA81      		ldd r31,Y+2
 663 02a4 8081      		ld r24,Z
 664 02a6 8823      		tst r24
 665 02a8 01F4      		brne .L28
 666               	/* epilogue start */
 152:usart.c       ****     }
 153:usart.c       **** }
 668               	.LM45:
 669 02aa 0F90      		pop __tmp_reg__
 670 02ac 0F90      		pop __tmp_reg__
 671 02ae CF91      		pop r28
 672 02b0 DF91      		pop r29
 673 02b2 0895      		ret
 675               	.Lscope10:
 677               		.stabd	78,0,0
 680               	.global	vTaskUSARTLog
 682               	vTaskUSARTLog:
 683               		.stabd	46,0,0
 154:usart.c       **** 
 155:usart.c       **** void vTaskUSARTLog(void *pvParameters){
 685               	.LM46:
 686               	.LFBB11:
 687 02b4 DF93      		push r29
 688 02b6 CF93      		push r28
 689 02b8 00D0      		rcall .
 690 02ba CDB7      		in r28,__SP_L__
 691 02bc DEB7      		in r29,__SP_H__
 692               	/* prologue: function */
 693               	/* frame size = 3 */
 694 02be 9B83      		std Y+3,r25
 695 02c0 8A83      		std Y+2,r24
 696               	.L32:
 156:usart.c       ****     uint8_t data;
 157:usart.c       ****     while(1){
 158:usart.c       ****     xQueueReceive(USART_WriteQueueLog,&data,portMAX_DELAY);
 698               	.LM47:
 699 02c2 8091 0000 		lds r24,USART_WriteQueueLog
 700 02c6 9091 0000 		lds r25,(USART_WriteQueueLog)+1
 701 02ca 9E01      		movw r18,r28
 702 02cc 2F5F      		subi r18,lo8(-(1))
 703 02ce 3F4F      		sbci r19,hi8(-(1))
 704 02d0 B901      		movw r22,r18
 705 02d2 4FEF      		ldi r20,lo8(-1)
 706 02d4 5FEF      		ldi r21,hi8(-1)
 707 02d6 20E0      		ldi r18,lo8(0)
 708 02d8 0E94 0000 		call xQueueGenericReceive
 709               	.L31:
 159:usart.c       **** 
 160:usart.c       ****         while(!(UCSR0A & (1<<UDRE0)));
 711               	.LM48:
 712 02dc E0EC      		ldi r30,lo8(192)
 713 02de F0E0      		ldi r31,hi8(192)
 714 02e0 8081      		ld r24,Z
 715 02e2 882F      		mov r24,r24
 716 02e4 90E0      		ldi r25,lo8(0)
 717 02e6 8072      		andi r24,lo8(32)
 718 02e8 9070      		andi r25,hi8(32)
 719 02ea 0097      		sbiw r24,0
 720 02ec 01F0      		breq .L31
 161:usart.c       ****         UDR0 = data;
 722               	.LM49:
 723 02ee E6EC      		ldi r30,lo8(198)
 724 02f0 F0E0      		ldi r31,hi8(198)
 725 02f2 8981      		ldd r24,Y+1
 726 02f4 8083      		st Z,r24
 727 02f6 00C0      		rjmp .L32
 732               	.Lscope11:
 734               		.stabd	78,0,0
 737               	.global	vTaskUSARTRead
 739               	vTaskUSARTRead:
 740               		.stabd	46,0,0
 162:usart.c       **** 
 163:usart.c       ****     }
 164:usart.c       **** 
 165:usart.c       **** }
 166:usart.c       **** 
 167:usart.c       **** void vTaskUSARTRead(void *pvParameters){
 742               	.LM50:
 743               	.LFBB12:
 744 02f8 DF93      		push r29
 745 02fa CF93      		push r28
 746 02fc CDB7      		in r28,__SP_L__
 747 02fe DEB7      		in r29,__SP_H__
 748 0300 C655      		subi r28,lo8(-(-86))
 749 0302 D040      		sbci r29,hi8(-(-86))
 750 0304 0FB6      		in __tmp_reg__,__SREG__
 751 0306 F894      		cli
 752 0308 DEBF      		out __SP_H__,r29
 753 030a 0FBE      		out __SREG__,__tmp_reg__
 754 030c CDBF      		out __SP_L__,r28
 755               	/* prologue: function */
 756               	/* frame size = 86 */
 757 030e FE01      		movw r30,r28
 758 0310 EB5A      		subi r30,lo8(-(85))
 759 0312 FF4F      		sbci r31,hi8(-(85))
 760 0314 9183      		std Z+1,r25
 761 0316 8083      		st Z,r24
 168:usart.c       **** 
 169:usart.c       ****     char bytesRecieved;
 170:usart.c       ****     uint8_t rxData;
 171:usart.c       ****     uint8_t buffer[8];
 172:usart.c       ****     char size;
 173:usart.c       ****     char groupID;
 174:usart.c       ****     char cmd;
 175:usart.c       ****     unsigned int timeout;
 176:usart.c       **** 
 177:usart.c       ****     PORTB = 0;
 763               	.LM51:
 764 0318 E5E2      		ldi r30,lo8(37)
 765 031a F0E0      		ldi r31,hi8(37)
 766 031c 1082      		st Z,__zero_reg__
 767               	.L41:
 178:usart.c       **** 
 179:usart.c       ****     Command command;
 180:usart.c       ****     Response response;
 181:usart.c       ****     while(1){
 182:usart.c       ****         PORTB = 0;
 769               	.LM52:
 770 031e E5E2      		ldi r30,lo8(37)
 771 0320 F0E0      		ldi r31,hi8(37)
 772 0322 1082      		st Z,__zero_reg__
 183:usart.c       ****         //Get Header
 184:usart.c       ****         bytesRecieved = 0;
 774               	.LM53:
 775 0324 1F82      		std Y+7,__zero_reg__
 185:usart.c       ****         timeout = 0;
 777               	.LM54:
 778 0326 1A82      		std Y+2,__zero_reg__
 779 0328 1982      		std Y+1,__zero_reg__
 780 032a 00C0      		rjmp .L35
 781               	.L38:
 186:usart.c       ****         while(bytesRecieved < 4){
 187:usart.c       ****             //if there is data to be read...
 188:usart.c       ****             if((UCSR1A & (1<<RXC1))){
 783               	.LM55:
 784 032c E8EC      		ldi r30,lo8(200)
 785 032e F0E0      		ldi r31,hi8(200)
 786 0330 8081      		ld r24,Z
 787 0332 8823      		tst r24
 788 0334 04F4      		brge .L36
 189:usart.c       ****                 rxData = UDR1;
 790               	.LM56:
 791 0336 EEEC      		ldi r30,lo8(206)
 792 0338 F0E0      		ldi r31,hi8(206)
 793 033a 8081      		ld r24,Z
 794 033c 8E83      		std Y+6,r24
 190:usart.c       ****             //if(xQueueReceive(USART_ReadQueue,&rxData,portMAX_DELAY) == pdTRUE){
 191:usart.c       ****                 buffer[bytesRecieved] = rxData;
 796               	.LM57:
 797 033e 8F81      		ldd r24,Y+7
 798 0340 282F      		mov r18,r24
 799 0342 3327      		clr r19
 800 0344 27FD      		sbrc r18,7
 801 0346 3095      		com r19
 802 0348 CE01      		movw r24,r28
 803 034a 0896      		adiw r24,8
 804 034c FC01      		movw r30,r24
 805 034e E20F      		add r30,r18
 806 0350 F31F      		adc r31,r19
 807 0352 8E81      		ldd r24,Y+6
 808 0354 8083      		st Z,r24
 192:usart.c       ****                 //USART_AddToQueue(rxData);
 193:usart.c       ****                 bytesRecieved++;
 810               	.LM58:
 811 0356 8F81      		ldd r24,Y+7
 812 0358 8F5F      		subi r24,lo8(-(1))
 813 035a 8F83      		std Y+7,r24
 814 035c 00C0      		rjmp .L37
 815               	.L36:
 194:usart.c       ****             } else {
 195:usart.c       ****                 timeout++;
 817               	.LM59:
 818 035e 8981      		ldd r24,Y+1
 819 0360 9A81      		ldd r25,Y+2
 820 0362 0196      		adiw r24,1
 821 0364 9A83      		std Y+2,r25
 822 0366 8983      		std Y+1,r24
 823               	.L37:
 196:usart.c       ****             }
 197:usart.c       ****             if(timeout > 50000){
 825               	.LM60:
 826 0368 8981      		ldd r24,Y+1
 827 036a 9A81      		ldd r25,Y+2
 828 036c 23EC      		ldi r18,hi8(-15535)
 829 036e 8135      		cpi r24,lo8(-15535)
 830 0370 9207      		cpc r25,r18
 831 0372 00F0      		brlo .L35
 198:usart.c       ****                 timeout = 0;
 833               	.LM61:
 834 0374 1A82      		std Y+2,__zero_reg__
 835 0376 1982      		std Y+1,__zero_reg__
 199:usart.c       ****                 bytesRecieved = 0;
 837               	.LM62:
 838 0378 1F82      		std Y+7,__zero_reg__
 839               	.L35:
 186:usart.c       ****         while(bytesRecieved < 4){
 841               	.LM63:
 842 037a 8F81      		ldd r24,Y+7
 843 037c 8430      		cpi r24,lo8(4)
 844 037e 04F0      		brlt .L38
 200:usart.c       **** 
 201:usart.c       **** 
 202:usart.c       ****             }
 203:usart.c       ****         }
 204:usart.c       ****         PORTB = 0;
 846               	.LM64:
 847 0380 E5E2      		ldi r30,lo8(37)
 848 0382 F0E0      		ldi r31,hi8(37)
 849 0384 1082      		st Z,__zero_reg__
 205:usart.c       ****         if(calcChecksum(buffer,3) != buffer[3]){
 851               	.LM65:
 852 0386 CE01      		movw r24,r28
 853 0388 0896      		adiw r24,8
 854 038a 63E0      		ldi r22,lo8(3)
 855 038c 0E94 0000 		call calcChecksum
 856 0390 982F      		mov r25,r24
 857 0392 8B85      		ldd r24,Y+11
 858 0394 9817      		cp r25,r24
 859 0396 01F0      		breq .L39
 206:usart.c       ****             sendNACK();
 861               	.LM66:
 862 0398 0E94 0000 		call sendNACK
 863 039c 00C0      		rjmp .L41
 864               	.L39:
 207:usart.c       ****         } else {
 208:usart.c       ****             sendACK();
 866               	.LM67:
 867 039e 0E94 0000 		call sendACK
 209:usart.c       ****             bytesRecieved = 0;
 869               	.LM68:
 870 03a2 1F82      		std Y+7,__zero_reg__
 210:usart.c       ****             command.groupID = buffer[0];
 872               	.LM69:
 873 03a4 8885      		ldd r24,Y+8
 874 03a6 888B      		std Y+16,r24
 211:usart.c       ****             command.cmd = buffer[1];
 876               	.LM70:
 877 03a8 8985      		ldd r24,Y+9
 878 03aa 898B      		std Y+17,r24
 212:usart.c       ****             command.crc = buffer[3];
 880               	.LM71:
 881 03ac 8B85      		ldd r24,Y+11
 882 03ae 8A8B      		std Y+18,r24
 213:usart.c       ****             size = buffer[2];
 884               	.LM72:
 885 03b0 8A85      		ldd r24,Y+10
 886 03b2 8D83      		std Y+5,r24
 214:usart.c       ****             timeout = 0;
 888               	.LM73:
 889 03b4 1A82      		std Y+2,__zero_reg__
 890 03b6 1982      		std Y+1,__zero_reg__
 215:usart.c       ****             /*if(size != 0){
 216:usart.c       ****                 while(1) {
 217:usart.c       ****                     while((bytesRecieved < size+1) && (timeout < 50)){  //1 for crc
 218:usart.c       ****                         if(UCSR1A & (1<<RXC1)){
 219:usart.c       ****                             rxData = UDR1;
 220:usart.c       **** 
 221:usart.c       ****                             //PORTB = 0xFF;
 222:usart.c       ****                         //if(xQueueReceive(USART_ReadQueue,&rxData,portMAX_DELAY) == pdTRUE){
 223:usart.c       ****                             buffer[bytesRecieved] = rxData;
 224:usart.c       ****                             bytesRecieved++;
 225:usart.c       ****                         } else {
 226:usart.c       ****                             //timeout++;
 227:usart.c       ****                             timeout = 1;
 228:usart.c       ****                         }
 229:usart.c       ****                     } 
 230:usart.c       ****                     if(timeout >= 50){
 231:usart.c       ****                         break;
 232:usart.c       ****                     }
 233:usart.c       ****                     if(calcChecksum(buffer,size) != buffer[size]){
 234:usart.c       ****                         sendNACK();
 235:usart.c       ****                         bytesRecieved = 0;
 236:usart.c       ****                     } else {
 237:usart.c       ****                         //PORTB = buffer[0];
 238:usart.c       ****                         sendACK();
 239:usart.c       ****                         memcpy(command.payload,buffer,size);
 240:usart.c       ****                         break;
 241:usart.c       ****                     }
 242:usart.c       ****                 }
 243:usart.c       ****             }*/
 244:usart.c       ****             processCommand(&command,&response);
 892               	.LM74:
 893 03b8 CE01      		movw r24,r28
 894 03ba 4096      		adiw r24,16
 895 03bc 9E01      		movw r18,r28
 896 03be 2D5C      		subi r18,lo8(-(51))
 897 03c0 3F4F      		sbci r19,hi8(-(51))
 898 03c2 B901      		movw r22,r18
 899 03c4 0E94 0000 		call processCommand
 245:usart.c       ****             sendResponse(&response);
 901               	.LM75:
 902 03c8 CE01      		movw r24,r28
 903 03ca C396      		adiw r24,51
 904 03cc 0E94 0000 		call sendResponse
 905 03d0 00C0      		rjmp .L41
 918               	.Lscope12:
 920               		.stabd	78,0,0
 923               	.global	sendResponse
 925               	sendResponse:
 926               		.stabd	46,0,0
 246:usart.c       **** 
 247:usart.c       ****         }
 248:usart.c       **** 
 249:usart.c       ****     }
 250:usart.c       **** 
 251:usart.c       **** }
 252:usart.c       **** 
 253:usart.c       **** void sendResponse(Response* response){
 928               	.LM76:
 929               	.LFBB13:
 930 03d2 DF93      		push r29
 931 03d4 CF93      		push r28
 932 03d6 00D0      		rcall .
 933 03d8 00D0      		rcall .
 934 03da CDB7      		in r28,__SP_L__
 935 03dc DEB7      		in r29,__SP_H__
 936               	/* prologue: function */
 937               	/* frame size = 6 */
 938 03de 9E83      		std Y+6,r25
 939 03e0 8D83      		std Y+5,r24
 940               	.L45:
 254:usart.c       ****     char checksumBuffer[2];
 255:usart.c       ****     int i;
 256:usart.c       ****     while(1){
 257:usart.c       ****         USART_AddToQueue(response->commandBack);
 942               	.LM77:
 943 03e2 ED81      		ldd r30,Y+5
 944 03e4 FE81      		ldd r31,Y+6
 945 03e6 8081      		ld r24,Z
 946 03e8 0E94 0000 		call USART_AddToQueue
 258:usart.c       ****         USART_AddToQueue(response->size);
 948               	.LM78:
 949 03ec ED81      		ldd r30,Y+5
 950 03ee FE81      		ldd r31,Y+6
 951 03f0 8181      		ldd r24,Z+1
 952 03f2 0E94 0000 		call USART_AddToQueue
 259:usart.c       ****         checksumBuffer[0] = response->commandBack;
 954               	.LM79:
 955 03f6 ED81      		ldd r30,Y+5
 956 03f8 FE81      		ldd r31,Y+6
 957 03fa 8081      		ld r24,Z
 958 03fc 8B83      		std Y+3,r24
 260:usart.c       ****         checksumBuffer[1] = response->size;
 960               	.LM80:
 961 03fe ED81      		ldd r30,Y+5
 962 0400 FE81      		ldd r31,Y+6
 963 0402 8181      		ldd r24,Z+1
 964 0404 8C83      		std Y+4,r24
 261:usart.c       ****         USART_AddToQueue(calcChecksum(checksumBuffer,2));
 966               	.LM81:
 967 0406 CE01      		movw r24,r28
 968 0408 0396      		adiw r24,3
 969 040a 62E0      		ldi r22,lo8(2)
 970 040c 0E94 0000 		call calcChecksum
 971 0410 0E94 0000 		call USART_AddToQueue
 262:usart.c       ****         if(waitForChecksum() == 0){
 973               	.LM82:
 974 0414 0E94 0000 		call waitForChecksum
 975 0418 8823      		tst r24
 976 041a 01F4      		brne .L45
 977               	.L44:
 263:usart.c       ****             break;
 264:usart.c       ****         }
 265:usart.c       ****     }
 266:usart.c       **** 
 267:usart.c       ****     for(i=0;i<response->size;i++){
 979               	.LM83:
 980 041c 1A82      		std Y+2,__zero_reg__
 981 041e 1982      		std Y+1,__zero_reg__
 982 0420 00C0      		rjmp .L46
 983               	.L47:
 268:usart.c       ****         USART_AddToQueue(response->payload[i]);
 985               	.LM84:
 986 0422 2981      		ldd r18,Y+1
 987 0424 3A81      		ldd r19,Y+2
 988 0426 8D81      		ldd r24,Y+5
 989 0428 9E81      		ldd r25,Y+6
 990 042a 820F      		add r24,r18
 991 042c 931F      		adc r25,r19
 992 042e FC01      		movw r30,r24
 993 0430 3296      		adiw r30,2
 994 0432 8081      		ld r24,Z
 995 0434 0E94 0000 		call USART_AddToQueue
 267:usart.c       ****     for(i=0;i<response->size;i++){
 997               	.LM85:
 998 0438 8981      		ldd r24,Y+1
 999 043a 9A81      		ldd r25,Y+2
 1000 043c 0196      		adiw r24,1
 1001 043e 9A83      		std Y+2,r25
 1002 0440 8983      		std Y+1,r24
 1003               	.L46:
 1004 0442 ED81      		ldd r30,Y+5
 1005 0444 FE81      		ldd r31,Y+6
 1006 0446 8181      		ldd r24,Z+1
 1007 0448 282F      		mov r18,r24
 1008 044a 3327      		clr r19
 1009 044c 27FD      		sbrc r18,7
 1010 044e 3095      		com r19
 1011 0450 8981      		ldd r24,Y+1
 1012 0452 9A81      		ldd r25,Y+2
 1013 0454 8217      		cp r24,r18
 1014 0456 9307      		cpc r25,r19
 1015 0458 04F0      		brlt .L47
 269:usart.c       ****         //USART_AddToQueue()
 270:usart.c       ****     }
 271:usart.c       ****     USART_AddToQueue(calcChecksum(response->payload,12));
 1017               	.LM86:
 1018 045a 8D81      		ldd r24,Y+5
 1019 045c 9E81      		ldd r25,Y+6
 1020 045e 0296      		adiw r24,2
 1021 0460 6CE0      		ldi r22,lo8(12)
 1022 0462 0E94 0000 		call calcChecksum
 1023 0466 0E94 0000 		call USART_AddToQueue
 1024               	/* epilogue start */
 272:usart.c       **** 
 273:usart.c       **** 
 274:usart.c       **** }
 1026               	.LM87:
 1027 046a 2696      		adiw r28,6
 1028 046c 0FB6      		in __tmp_reg__,__SREG__
 1029 046e F894      		cli
 1030 0470 DEBF      		out __SP_H__,r29
 1031 0472 0FBE      		out __SREG__,__tmp_reg__
 1032 0474 CDBF      		out __SP_L__,r28
 1033 0476 CF91      		pop r28
 1034 0478 DF91      		pop r29
 1035 047a 0895      		ret
 1041               	.Lscope13:
 1043               		.stabd	78,0,0
 1045               	.global	sendACK
 1047               	sendACK:
 1048               		.stabd	46,0,0
 275:usart.c       **** 
 276:usart.c       **** void sendACK(){
 1050               	.LM88:
 1051               	.LFBB14:
 1052 047c DF93      		push r29
 1053 047e CF93      		push r28
 1054 0480 CDB7      		in r28,__SP_L__
 1055 0482 DEB7      		in r29,__SP_H__
 1056               	/* prologue: function */
 1057               	/* frame size = 0 */
 277:usart.c       ****     USART_AddToQueue(128);
 1059               	.LM89:
 1060 0484 80E8      		ldi r24,lo8(-128)
 1061 0486 0E94 0000 		call USART_AddToQueue
 1062               	/* epilogue start */
 278:usart.c       **** }
 1064               	.LM90:
 1065 048a CF91      		pop r28
 1066 048c DF91      		pop r29
 1067 048e 0895      		ret
 1069               	.Lscope14:
 1071               		.stabd	78,0,0
 1073               	.global	sendNACK
 1075               	sendNACK:
 1076               		.stabd	46,0,0
 279:usart.c       **** 
 280:usart.c       **** void sendNACK(){
 1078               	.LM91:
 1079               	.LFBB15:
 1080 0490 DF93      		push r29
 1081 0492 CF93      		push r28
 1082 0494 CDB7      		in r28,__SP_L__
 1083 0496 DEB7      		in r29,__SP_H__
 1084               	/* prologue: function */
 1085               	/* frame size = 0 */
 281:usart.c       ****     USART_AddToQueue(0);
 1087               	.LM92:
 1088 0498 80E0      		ldi r24,lo8(0)
 1089 049a 0E94 0000 		call USART_AddToQueue
 1090               	/* epilogue start */
 282:usart.c       **** }
 1092               	.LM93:
 1093 049e CF91      		pop r28
 1094 04a0 DF91      		pop r29
 1095 04a2 0895      		ret
 1097               	.Lscope15:
 1099               		.stabd	78,0,0
 1101               	.global	waitForChecksum
 1103               	waitForChecksum:
 1104               		.stabd	46,0,0
 283:usart.c       **** 
 284:usart.c       **** char waitForChecksum(){
 1106               	.LM94:
 1107               	.LFBB16:
 1108 04a4 DF93      		push r29
 1109 04a6 CF93      		push r28
 1110 04a8 CDB7      		in r28,__SP_L__
 1111 04aa DEB7      		in r29,__SP_H__
 1112               	/* prologue: function */
 1113               	/* frame size = 0 */
 1114               	.L55:
 285:usart.c       ****     while(1){
 286:usart.c       ****         if(UCSR1A & (1<<RXC1)){
 1116               	.LM95:
 1117 04ac E8EC      		ldi r30,lo8(200)
 1118 04ae F0E0      		ldi r31,hi8(200)
 1119 04b0 8081      		ld r24,Z
 1120 04b2 8823      		tst r24
 1121 04b4 04F4      		brge .L54
 287:usart.c       ****             if(UDR1 = 0xFF) {
 1123               	.LM96:
 1124 04b6 EEEC      		ldi r30,lo8(206)
 1125 04b8 F0E0      		ldi r31,hi8(206)
 1126 04ba 8FEF      		ldi r24,lo8(-1)
 1127 04bc 8083      		st Z,r24
 288:usart.c       ****                 return 0;
 1129               	.LM97:
 1130 04be 80E0      		ldi r24,lo8(0)
 1131               	/* epilogue start */
 289:usart.c       ****             } else {
 290:usart.c       ****                 return -1;
 291:usart.c       ****             }
 292:usart.c       **** 
 293:usart.c       ****         } else {
 294:usart.c       ****             vTaskDelay(1);
 295:usart.c       ****         }
 296:usart.c       **** 
 297:usart.c       ****     }
 298:usart.c       **** }
 1133               	.LM98:
 1134 04c0 CF91      		pop r28
 1135 04c2 DF91      		pop r29
 1136 04c4 0895      		ret
 1137               	.L54:
 294:usart.c       ****             vTaskDelay(1);
 1139               	.LM99:
 1140 04c6 81E0      		ldi r24,lo8(1)
 1141 04c8 90E0      		ldi r25,hi8(1)
 1142 04ca 0E94 0000 		call vTaskDelay
 1143 04ce 00C0      		rjmp .L55
 1145               	.Lscope16:
 1147               		.stabd	78,0,0
 1151               	.global	calcChecksum
 1153               	calcChecksum:
 1154               		.stabd	46,0,0
 299:usart.c       **** 
 300:usart.c       **** uint8_t calcChecksum(uint8_t* buffer,uint8_t size){
 1156               	.LM100:
 1157               	.LFBB17:
 1158 04d0 DF93      		push r29
 1159 04d2 CF93      		push r28
 1160 04d4 00D0      		rcall .
 1161 04d6 0F92      		push __tmp_reg__
 1162 04d8 0F92      		push __tmp_reg__
 1163 04da CDB7      		in r28,__SP_L__
 1164 04dc DEB7      		in r29,__SP_H__
 1165               	/* prologue: function */
 1166               	/* frame size = 5 */
 1167 04de 9B83      		std Y+3,r25
 1168 04e0 8A83      		std Y+2,r24
 1169 04e2 6C83      		std Y+4,r22
 301:usart.c       ****     uint8_t checksum = 0;
 1171               	.LM101:
 1172 04e4 1982      		std Y+1,__zero_reg__
 1173 04e6 00C0      		rjmp .L58
 1174               	.L60:
 302:usart.c       ****     while(size-- > 0){
 303:usart.c       ****         checksum += *(buffer++);
 1176               	.LM102:
 1177 04e8 EA81      		ldd r30,Y+2
 1178 04ea FB81      		ldd r31,Y+3
 1179 04ec 9081      		ld r25,Z
 1180 04ee 8981      		ldd r24,Y+1
 1181 04f0 890F      		add r24,r25
 1182 04f2 8983      		std Y+1,r24
 1183 04f4 8A81      		ldd r24,Y+2
 1184 04f6 9B81      		ldd r25,Y+3
 1185 04f8 0196      		adiw r24,1
 1186 04fa 9B83      		std Y+3,r25
 1187 04fc 8A83      		std Y+2,r24
 1188               	.L58:
 302:usart.c       ****     while(size-- > 0){
 1190               	.LM103:
 1191 04fe 8C81      		ldd r24,Y+4
 1192 0500 8D83      		std Y+5,r24
 1193 0502 8D81      		ldd r24,Y+5
 1194 0504 8823      		tst r24
 1195 0506 01F0      		breq .L59
 1196 0508 81E0      		ldi r24,lo8(1)
 1197 050a 8D83      		std Y+5,r24
 1198               	.L59:
 1199 050c 8D81      		ldd r24,Y+5
 1200 050e 9C81      		ldd r25,Y+4
 1201 0510 9150      		subi r25,lo8(-(-1))
 1202 0512 9C83      		std Y+4,r25
 1203 0514 8823      		tst r24
 1204 0516 01F4      		brne .L60
 304:usart.c       ****     }
 305:usart.c       ****     return checksum;
 1206               	.LM104:
 1207 0518 8981      		ldd r24,Y+1
 1208               	/* epilogue start */
 306:usart.c       **** }...
 1210               	.LM105:
 1211 051a 0F90      		pop __tmp_reg__
 1212 051c 0F90      		pop __tmp_reg__
 1213 051e 0F90      		pop __tmp_reg__
 1214 0520 0F90      		pop __tmp_reg__
 1215 0522 0F90      		pop __tmp_reg__
 1216 0524 CF91      		pop r28
 1217 0526 DF91      		pop r29
 1218 0528 0895      		ret
 1223               	.Lscope17:
 1225               		.stabd	78,0,0
 1226               		.comm USART_WriteQueue,2,1
 1227               		.comm USART_ReadQueue,2,1
 1228               		.comm USART_WriteQueueLog,2,1
 1233               	.Letext0:
 1234               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 usart.c
     /tmp/ccNFl1GK.s:2      *ABS*:0000003f __SREG__
     /tmp/ccNFl1GK.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccNFl1GK.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccNFl1GK.s:5      *ABS*:00000034 __CCP__
     /tmp/ccNFl1GK.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccNFl1GK.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccNFl1GK.s:109    .text:00000000 USART_Init
                            *COM*:00000002 USART_WriteQueue
                            *COM*:00000002 USART_ReadQueue
     /tmp/ccNFl1GK.s:252    .text:000000e2 USART_Write
     /tmp/ccNFl1GK.s:298    .text:00000110 USART_Write_Unprotected
     /tmp/ccNFl1GK.s:343    .text:0000013e USART_Read
     /tmp/ccNFl1GK.s:381    .text:0000015c ISR
     /tmp/ccNFl1GK.s:437    .text:000001a0 USART_AddToQueue
     /tmp/ccNFl1GK.s:477    .text:000001ce USART_TransmitString
     /tmp/ccNFl1GK.s:531    .text:00000208 vTaskUSARTWrite
     /tmp/ccNFl1GK.s:588    .text:0000024c USART_LogChar
                            *COM*:00000002 USART_WriteQueueLog
     /tmp/ccNFl1GK.s:628    .text:0000027a USART_LogString
     /tmp/ccNFl1GK.s:682    .text:000002b4 vTaskUSARTLog
     /tmp/ccNFl1GK.s:739    .text:000002f8 vTaskUSARTRead
     /tmp/ccNFl1GK.s:1153   .text:000004d0 calcChecksum
     /tmp/ccNFl1GK.s:1075   .text:00000490 sendNACK
     /tmp/ccNFl1GK.s:1047   .text:0000047c sendACK
     /tmp/ccNFl1GK.s:925    .text:000003d2 sendResponse
     /tmp/ccNFl1GK.s:1103   .text:000004a4 waitForChecksum

UNDEFINED SYMBOLS
xQueueGenericCreate
__udivmodsi4
xQueueGenericSendFromISR
xQueueGenericSend
xQueueGenericReceive
processCommand
vTaskDelay
__do_clear_bss
