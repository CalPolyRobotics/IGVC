   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 162               	.global	count
 163               		.section .bss
 166               	count:
 167 0000 0000      		.zero	2
 168               		.comm	sonarTime,2,1
 169               		.text
 171               	.global	vApplicationTickHook
 173               	vApplicationTickHook:
 174               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        ****  FreeRTOS V6.1.0
   3:main.c        ****  
   4:main.c        ****  This is a basic RTOS program. It turns on the LEDs.
   5:main.c        ****  Nothing too exciting.
   6:main.c        ****  
   7:main.c        ****  */
   8:main.c        **** 
   9:main.c        **** #include <stdint.h>
  10:main.c        **** #include <avr/io.h>
  11:main.c        **** #include <string.h>
  12:main.c        **** #include <stdlib.h>
  13:main.c        **** #include <stdio.h>
  14:main.c        **** #include <math.h>
  15:main.c        **** #include "FreeRTOS.h"
  16:main.c        **** #include <avr/io.h>
  17:main.c        **** #include <avr/interrupt.h>
  18:main.c        **** #include "task.h"
  19:main.c        **** #include "usart.h"
  20:main.c        **** #include "Components/Sonar/Sonar.h"
  21:main.c        **** #include "queue.h"
  22:main.c        **** #include "spi.h"
  23:main.c        **** #include "ADC.h"
  24:main.c        **** #include "Components/FNR/FNR.h"
  25:main.c        **** #include "Components/Speed/Speed.h"
  26:main.c        **** #include "Components/Steering/Steering.h"
  27:main.c        **** 
  28:main.c        **** void vTaskFunction_1(void *pvParameters);
  29:main.c        **** void vTaskFunction_2(void *pvParameters);
  30:main.c        **** void vTaskFunction_3(void *pvParameters);
  31:main.c        **** void vTaskPot(void *pvParameters);
  32:main.c        **** void vIO_init(void);
  33:main.c        **** void vApplicationTickHook();
  34:main.c        **** void printNum(unsigned char i);
  35:main.c        **** void printHex(int i);
  36:main.c        **** 
  37:main.c        **** int count = 0;
  38:main.c        **** 
  39:main.c        **** int sonarTime;
  40:main.c        **** 
  41:main.c        **** void vApplicationTickHook()
  42:main.c        **** {
 176               	.LM0:
 177               	.LFBB1:
 178 0000 CF93      		push r28
 179 0002 DF93      		push r29
 180 0004 CDB7      		in r28,__SP_L__
 181 0006 DEB7      		in r29,__SP_H__
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 2 */
 185               	.L__stack_usage = 2
  43:main.c        ****     count++;
 187               	.LM1:
 188 0008 8091 0000 		lds r24,count
 189 000c 9091 0000 		lds r25,count+1
 190 0010 0196      		adiw r24,1
 191 0012 9093 0000 		sts count+1,r25
 192 0016 8093 0000 		sts count,r24
 193               	/* epilogue start */
  44:main.c        **** }
 195               	.LM2:
 196 001a DF91      		pop r29
 197 001c CF91      		pop r28
 198 001e 0895      		ret
 200               	.Lscope1:
 202               		.stabd	78,0,0
 204               	.global	vApplicationStackOverflowHook
 206               	vApplicationStackOverflowHook:
 207               		.stabd	46,0,0
  45:main.c        **** 
  46:main.c        **** void vApplicationStackOverflowHook(){
 209               	.LM3:
 210               	.LFBB2:
 211 0020 CF93      		push r28
 212 0022 DF93      		push r29
 213 0024 CDB7      		in r28,__SP_L__
 214 0026 DEB7      		in r29,__SP_H__
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 2 */
 218               	.L__stack_usage = 2
  47:main.c        **** 	return;
 220               	.LM4:
 221 0028 0000      		nop
 222               	/* epilogue start */
  48:main.c        **** }
 224               	.LM5:
 225 002a DF91      		pop r29
 226 002c CF91      		pop r28
 227 002e 0895      		ret
 229               	.Lscope2:
 231               		.stabd	78,0,0
 232               		.section	.rodata
 233               	.LC1:
 234 0000 5430 00   		.string	"T0"
 235               	.LC2:
 236 0003 5434 00   		.string	"T4"
 237               	.LC3:
 238 0006 5453 00   		.string	"TS"
 239               	.LC4:
 240 0009 5433 00   		.string	"T3"
 241               	.LC5:
 242 000c 5435 00   		.string	"T5"
 243               		.text
 245               	.global	main
 247               	main:
 248               		.stabd	46,0,0
  49:main.c        **** /*-----------------------------------------------------------*/
  50:main.c        **** 
  51:main.c        **** int main( void )
  52:main.c        **** {
 250               	.LM6:
 251               	.LFBB3:
 252 0030 AF92      		push r10
 253 0032 BF92      		push r11
 254 0034 CF92      		push r12
 255 0036 DF92      		push r13
 256 0038 EF92      		push r14
 257 003a FF92      		push r15
 258 003c 0F93      		push r16
 259 003e CF93      		push r28
 260 0040 DF93      		push r29
 261 0042 00D0      		rcall .
 262 0044 00D0      		rcall .
 263 0046 CDB7      		in r28,__SP_L__
 264 0048 DEB7      		in r29,__SP_H__
 265               	/* prologue: function */
 266               	/* frame size = 6 */
 267               	/* stack size = 15 */
 268               	.L__stack_usage = 15
  53:main.c        ****     
  54:main.c        ****     //- wimpy variable defs
  55:main.c        **** 	uint8_t val[2] = {0x3F, 0xFE};
 270               	.LM7:
 271 004a 8FE3      		ldi r24,lo8(63)
 272 004c 8D83      		std Y+5,r24
 273 004e 8EEF      		ldi r24,lo8(-2)
 274 0050 8E83      		std Y+6,r24
  56:main.c        ****     uint8_t *val0, *val1;
  57:main.c        ****     
  58:main.c        **** 	//- avoid pesky warnings...
  59:main.c        **** 	val0 = val + 0;
 276               	.LM8:
 277 0052 CE01      		movw r24,r28
 278 0054 0596      		adiw r24,5
 279 0056 9A83      		std Y+2,r25
 280 0058 8983      		std Y+1,r24
  60:main.c        **** 	val1 = val + 1;
 282               	.LM9:
 283 005a CE01      		movw r24,r28
 284 005c 0596      		adiw r24,5
 285 005e 0196      		adiw r24,1
 286 0060 9C83      		std Y+4,r25
 287 0062 8B83      		std Y+3,r24
  61:main.c        ****     
  62:main.c        **** 	DDRA = 0xF7;
 289               	.LM10:
 290 0064 81E2      		ldi r24,lo8(33)
 291 0066 90E0      		ldi r25,0
 292 0068 27EF      		ldi r18,lo8(-9)
 293 006a FC01      		movw r30,r24
 294 006c 2083      		st Z,r18
  63:main.c        **** 	//PORTA = 0;
  64:main.c        **** 	DDRD = 0xFF;
 296               	.LM11:
 297 006e 8AE2      		ldi r24,lo8(42)
 298 0070 90E0      		ldi r25,0
 299 0072 2FEF      		ldi r18,lo8(-1)
 300 0074 FC01      		movw r30,r24
 301 0076 2083      		st Z,r18
  65:main.c        **** 	DDRE = 0xFF;
 303               	.LM12:
 304 0078 8DE2      		ldi r24,lo8(45)
 305 007a 90E0      		ldi r25,0
 306 007c 2FEF      		ldi r18,lo8(-1)
 307 007e FC01      		movw r30,r24
 308 0080 2083      		st Z,r18
  66:main.c        **** 	DDRB = 0xFF; 
 310               	.LM13:
 311 0082 84E2      		ldi r24,lo8(36)
 312 0084 90E0      		ldi r25,0
 313 0086 2FEF      		ldi r18,lo8(-1)
 314 0088 FC01      		movw r30,r24
 315 008a 2083      		st Z,r18
  67:main.c        **** 	DDRK = 0;
 317               	.LM14:
 318 008c 87E0      		ldi r24,lo8(7)
 319 008e 91E0      		ldi r25,lo8(1)
 320 0090 FC01      		movw r30,r24
 321 0092 1082      		st Z,__zero_reg__
  68:main.c        **** 
  69:main.c        **** 	PORTD = 0;
 323               	.LM15:
 324 0094 8BE2      		ldi r24,lo8(43)
 325 0096 90E0      		ldi r25,0
 326 0098 FC01      		movw r30,r24
 327 009a 1082      		st Z,__zero_reg__
  70:main.c        **** 	PORTE = 0;
 329               	.LM16:
 330 009c 8EE2      		ldi r24,lo8(46)
 331 009e 90E0      		ldi r25,0
 332 00a0 FC01      		movw r30,r24
 333 00a2 1082      		st Z,__zero_reg__
  71:main.c        **** 	PORTK = 2;
 335               	.LM17:
 336 00a4 88E0      		ldi r24,lo8(8)
 337 00a6 91E0      		ldi r25,lo8(1)
 338 00a8 22E0      		ldi r18,lo8(2)
 339 00aa FC01      		movw r30,r24
 340 00ac 2083      		st Z,r18
  72:main.c        **** 
  73:main.c        ****     //- init IO with goodness
  74:main.c        **** 	vIO_init();
 342               	.LM18:
 343 00ae 0E94 0000 		call vIO_init
  75:main.c        **** 
  76:main.c        **** 	//- Create a 
  77:main.c        **** 	xTaskCreate( (pdTASK_CODE) vTaskFunction_1, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
 345               	.LM19:
 346 00b2 8B81      		ldd r24,Y+3
 347 00b4 9C81      		ldd r25,Y+4
 348 00b6 A12C      		mov r10,__zero_reg__
 349 00b8 B12C      		mov r11,__zero_reg__
 350 00ba C12C      		mov r12,__zero_reg__
 351 00bc D12C      		mov r13,__zero_reg__
 352 00be E12C      		mov r14,__zero_reg__
 353 00c0 F12C      		mov r15,__zero_reg__
 354 00c2 01E0      		ldi r16,lo8(1)
 355 00c4 9C01      		movw r18,r24
 356 00c6 4DE3      		ldi r20,lo8(61)
 357 00c8 54E0      		ldi r21,lo8(4)
 358 00ca 60E0      		ldi r22,lo8(.LC1)
 359 00cc 70E0      		ldi r23,hi8(.LC1)
 360 00ce 80E0      		ldi r24,lo8(gs(vTaskFunction_1))
 361 00d0 90E0      		ldi r25,hi8(gs(vTaskFunction_1))
 362 00d2 0E94 0000 		call xTaskGenericCreate
  78:main.c        ****                 (void *) val1, 1, NULL );
  79:main.c        ****    /*xTaskCreate( (pdTASK_CODE) vTaskFunction_2, (signed char *) "T1", configMINIMAL_STACK_SIZE+100
  80:main.c        ****                 (void *) val1, 1, NULL );*/
  81:main.c        ****    /*xTaskCreate( (pdTASK_CODE) vTaskFunction_3, (signed char *) "T0", configMINIMAL_STACK_SIZE+100
  82:main.c        ****                 (void *) val1, 1, NULL );
  83:main.c        **** 	xTaskCreate( (pdTASK_CODE) vTaskPot, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
  84:main.c        ****                 (void *) val1, 1, NULL );*/
  85:main.c        **** 
  86:main.c        ****  
  87:main.c        ****   	xTaskCreate( (pdTASK_CODE) vTaskSteer, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
 364               	.LM20:
 365 00d6 8B81      		ldd r24,Y+3
 366 00d8 9C81      		ldd r25,Y+4
 367 00da A12C      		mov r10,__zero_reg__
 368 00dc B12C      		mov r11,__zero_reg__
 369 00de C12C      		mov r12,__zero_reg__
 370 00e0 D12C      		mov r13,__zero_reg__
 371 00e2 E12C      		mov r14,__zero_reg__
 372 00e4 F12C      		mov r15,__zero_reg__
 373 00e6 01E0      		ldi r16,lo8(1)
 374 00e8 9C01      		movw r18,r24
 375 00ea 4DE3      		ldi r20,lo8(61)
 376 00ec 54E0      		ldi r21,lo8(4)
 377 00ee 60E0      		ldi r22,lo8(.LC2)
 378 00f0 70E0      		ldi r23,hi8(.LC2)
 379 00f2 80E0      		ldi r24,lo8(gs(vTaskSteer))
 380 00f4 90E0      		ldi r25,hi8(gs(vTaskSteer))
 381 00f6 0E94 0000 		call xTaskGenericCreate
  88:main.c        ****                 (void *) val1, 1, NULL );
  89:main.c        **** 	xTaskCreate( (pdTASK_CODE) vTaskSonar, (signed char *) "TS", configMINIMAL_STACK_SIZE+1000,
 383               	.LM21:
 384 00fa 8B81      		ldd r24,Y+3
 385 00fc 9C81      		ldd r25,Y+4
 386 00fe A12C      		mov r10,__zero_reg__
 387 0100 B12C      		mov r11,__zero_reg__
 388 0102 C12C      		mov r12,__zero_reg__
 389 0104 D12C      		mov r13,__zero_reg__
 390 0106 E12C      		mov r14,__zero_reg__
 391 0108 F12C      		mov r15,__zero_reg__
 392 010a 01E0      		ldi r16,lo8(1)
 393 010c 9C01      		movw r18,r24
 394 010e 4DE3      		ldi r20,lo8(61)
 395 0110 54E0      		ldi r21,lo8(4)
 396 0112 60E0      		ldi r22,lo8(.LC3)
 397 0114 70E0      		ldi r23,hi8(.LC3)
 398 0116 80E0      		ldi r24,lo8(gs(vTaskSonar))
 399 0118 90E0      		ldi r25,hi8(gs(vTaskSonar))
 400 011a 0E94 0000 		call xTaskGenericCreate
  90:main.c        ****                 (void *) val1, 1, NULL );
  91:main.c        ****  
  92:main.c        ****    /*xTaskCreate( (pdTASK_CODE) vTaskUSARTWrite, (signed char *) "T2", configMINIMAL_STACK_SIZE+100
  93:main.c        ****    				(void *) val1, 1, NULL);*/
  94:main.c        **** 
  95:main.c        ****    xTaskCreate( (pdTASK_CODE) vTaskUSARTRead, (signed char *) "T3", configMINIMAL_STACK_SIZE+1000,
 402               	.LM22:
 403 011e 8B81      		ldd r24,Y+3
 404 0120 9C81      		ldd r25,Y+4
 405 0122 A12C      		mov r10,__zero_reg__
 406 0124 B12C      		mov r11,__zero_reg__
 407 0126 C12C      		mov r12,__zero_reg__
 408 0128 D12C      		mov r13,__zero_reg__
 409 012a E12C      		mov r14,__zero_reg__
 410 012c F12C      		mov r15,__zero_reg__
 411 012e 01E0      		ldi r16,lo8(1)
 412 0130 9C01      		movw r18,r24
 413 0132 4DE3      		ldi r20,lo8(61)
 414 0134 54E0      		ldi r21,lo8(4)
 415 0136 60E0      		ldi r22,lo8(.LC4)
 416 0138 70E0      		ldi r23,hi8(.LC4)
 417 013a 80E0      		ldi r24,lo8(gs(vTaskUSARTRead))
 418 013c 90E0      		ldi r25,hi8(gs(vTaskUSARTRead))
 419 013e 0E94 0000 		call xTaskGenericCreate
  96:main.c        ****    				(void *) val1, 1, NULL);
  97:main.c        **** 
  98:main.c        **** 	
  99:main.c        **** 	xTaskCreate( (pdTASK_CODE) vTaskADC, (signed char *) "T5", configMINIMAL_STACK_SIZE+1000,
 421               	.LM23:
 422 0142 8B81      		ldd r24,Y+3
 423 0144 9C81      		ldd r25,Y+4
 424 0146 A12C      		mov r10,__zero_reg__
 425 0148 B12C      		mov r11,__zero_reg__
 426 014a C12C      		mov r12,__zero_reg__
 427 014c D12C      		mov r13,__zero_reg__
 428 014e E12C      		mov r14,__zero_reg__
 429 0150 F12C      		mov r15,__zero_reg__
 430 0152 01E0      		ldi r16,lo8(1)
 431 0154 9C01      		movw r18,r24
 432 0156 4DE3      		ldi r20,lo8(61)
 433 0158 54E0      		ldi r21,lo8(4)
 434 015a 60E0      		ldi r22,lo8(.LC5)
 435 015c 70E0      		ldi r23,hi8(.LC5)
 436 015e 80E0      		ldi r24,lo8(gs(vTaskADC))
 437 0160 90E0      		ldi r25,hi8(gs(vTaskADC))
 438 0162 0E94 0000 		call xTaskGenericCreate
 100:main.c        ****    				(void *) val1, 1, NULL);
 101:main.c        **** 
 102:main.c        **** //   xTaskCreate( (pdTASK_CODE) vTaskUSARTLog, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
 103:main.c        **** //   				(void *) val1, 1, NULL);
 104:main.c        ****     
 105:main.c        ****     //- kick off the scheduler
 106:main.c        **** 	vTaskStartScheduler();
 440               	.LM24:
 441 0166 0E94 0000 		call vTaskStartScheduler
 107:main.c        ****     
 108:main.c        **** 	return 0;
 443               	.LM25:
 444 016a 80E0      		ldi r24,0
 445 016c 90E0      		ldi r25,0
 446               	/* epilogue start */
 109:main.c        **** }
 448               	.LM26:
 449 016e 2696      		adiw r28,6
 450 0170 0FB6      		in __tmp_reg__,__SREG__
 451 0172 F894      		cli
 452 0174 DEBF      		out __SP_H__,r29
 453 0176 0FBE      		out __SREG__,__tmp_reg__
 454 0178 CDBF      		out __SP_L__,r28
 455 017a DF91      		pop r29
 456 017c CF91      		pop r28
 457 017e 0F91      		pop r16
 458 0180 FF90      		pop r15
 459 0182 EF90      		pop r14
 460 0184 DF90      		pop r13
 461 0186 CF90      		pop r12
 462 0188 BF90      		pop r11
 463 018a AF90      		pop r10
 464 018c 0895      		ret
 471               	.Lscope3:
 473               		.stabd	78,0,0
 474               		.section	.rodata
 475               	.LC0:
 476 000f 30        		.byte	48
 477 0010 31        		.byte	49
 478 0011 32        		.byte	50
 479 0012 33        		.byte	51
 480 0013 34        		.byte	52
 481 0014 35        		.byte	53
 482 0015 36        		.byte	54
 483 0016 37        		.byte	55
 484 0017 38        		.byte	56
 485 0018 39        		.byte	57
 486 0019 41        		.byte	65
 487 001a 42        		.byte	66
 488 001b 43        		.byte	67
 489 001c 44        		.byte	68
 490 001d 45        		.byte	69
 491 001e 46        		.byte	70
 492               		.text
 495               	.global	printHex
 497               	printHex:
 498               		.stabd	46,0,0
 110:main.c        **** /*-----------------------------------------------------------*/
 111:main.c        **** 
 112:main.c        **** void printHex(int i){
 500               	.LM27:
 501               	.LFBB4:
 502 018e CF93      		push r28
 503 0190 DF93      		push r29
 504 0192 CDB7      		in r28,__SP_L__
 505 0194 DEB7      		in r29,__SP_H__
 506 0196 6297      		sbiw r28,18
 507 0198 0FB6      		in __tmp_reg__,__SREG__
 508 019a F894      		cli
 509 019c DEBF      		out __SP_H__,r29
 510 019e 0FBE      		out __SREG__,__tmp_reg__
 511 01a0 CDBF      		out __SP_L__,r28
 512               	/* prologue: function */
 513               	/* frame size = 18 */
 514               	/* stack size = 20 */
 515               	.L__stack_usage = 20
 516 01a2 9A8B      		std Y+18,r25
 517 01a4 898B      		std Y+17,r24
 113:main.c        **** 	char hex[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 519               	.LM28:
 520 01a6 20E1      		ldi r18,lo8(16)
 521 01a8 E0E0      		ldi r30,lo8(.LC0)
 522 01aa F0E0      		ldi r31,hi8(.LC0)
 523 01ac CE01      		movw r24,r28
 524 01ae 0196      		adiw r24,1
 525 01b0 DC01      		movw r26,r24
 526               		0:
 527 01b2 0190      		ld r0,Z+
 528 01b4 0D92      		st X+,r0
 529 01b6 2A95      		dec r18
 530 01b8 01F4      		brne 0b
 114:main.c        **** 
 115:main.c        **** 	USART_Write(hex[(i&0xF000) >> 12]);
 532               	.LM29:
 533 01ba 8989      		ldd r24,Y+17
 534 01bc 9A89      		ldd r25,Y+18
 535 01be 892F      		mov r24,r25
 536 01c0 9927      		clr r25
 537 01c2 8295      		swap r24
 538 01c4 8F70      		andi r24,0x0f
 539 01c6 9E01      		movw r18,r28
 540 01c8 2F5F      		subi r18,-1
 541 01ca 3F4F      		sbci r19,-1
 542 01cc 820F      		add r24,r18
 543 01ce 931F      		adc r25,r19
 544 01d0 FC01      		movw r30,r24
 545 01d2 8081      		ld r24,Z
 546 01d4 0E94 0000 		call USART_Write
 116:main.c        **** 	USART_Write(hex[(i&0xF00) >> 8]);
 548               	.LM30:
 549 01d8 8989      		ldd r24,Y+17
 550 01da 9A89      		ldd r25,Y+18
 551 01dc 8827      		clr r24
 552 01de 9F70      		andi r25,15
 553 01e0 892F      		mov r24,r25
 554 01e2 990F      		lsl r25
 555 01e4 990B      		sbc r25,r25
 556 01e6 9E01      		movw r18,r28
 557 01e8 2F5F      		subi r18,-1
 558 01ea 3F4F      		sbci r19,-1
 559 01ec 820F      		add r24,r18
 560 01ee 931F      		adc r25,r19
 561 01f0 FC01      		movw r30,r24
 562 01f2 8081      		ld r24,Z
 563 01f4 0E94 0000 		call USART_Write
 117:main.c        **** 	USART_Write(hex[(i&0xF0) >> 4]);
 565               	.LM31:
 566 01f8 8989      		ldd r24,Y+17
 567 01fa 9A89      		ldd r25,Y+18
 568 01fc 807F      		andi r24,240
 569 01fe 9927      		clr r25
 570 0200 9595      		asr r25
 571 0202 8795      		ror r24
 572 0204 9595      		asr r25
 573 0206 8795      		ror r24
 574 0208 9595      		asr r25
 575 020a 8795      		ror r24
 576 020c 9595      		asr r25
 577 020e 8795      		ror r24
 578 0210 9E01      		movw r18,r28
 579 0212 2F5F      		subi r18,-1
 580 0214 3F4F      		sbci r19,-1
 581 0216 820F      		add r24,r18
 582 0218 931F      		adc r25,r19
 583 021a FC01      		movw r30,r24
 584 021c 8081      		ld r24,Z
 585 021e 0E94 0000 		call USART_Write
 118:main.c        **** 	USART_Write(hex[i&0xF]);
 587               	.LM32:
 588 0222 8989      		ldd r24,Y+17
 589 0224 9A89      		ldd r25,Y+18
 590 0226 8F70      		andi r24,15
 591 0228 9927      		clr r25
 592 022a 9E01      		movw r18,r28
 593 022c 2F5F      		subi r18,-1
 594 022e 3F4F      		sbci r19,-1
 595 0230 820F      		add r24,r18
 596 0232 931F      		adc r25,r19
 597 0234 FC01      		movw r30,r24
 598 0236 8081      		ld r24,Z
 599 0238 0E94 0000 		call USART_Write
 600               	/* epilogue start */
 119:main.c        **** 
 120:main.c        **** }
 602               	.LM33:
 603 023c 6296      		adiw r28,18
 604 023e 0FB6      		in __tmp_reg__,__SREG__
 605 0240 F894      		cli
 606 0242 DEBF      		out __SP_H__,r29
 607 0244 0FBE      		out __SREG__,__tmp_reg__
 608 0246 CDBF      		out __SP_L__,r28
 609 0248 DF91      		pop r29
 610 024a CF91      		pop r28
 611 024c 0895      		ret
 616               	.Lscope4:
 618               		.stabd	78,0,0
 621               	.global	printNum
 623               	printNum:
 624               		.stabd	46,0,0
 121:main.c        **** 
 122:main.c        **** void printNum(unsigned char i){
 626               	.LM34:
 627               	.LFBB5:
 628 024e CF93      		push r28
 629 0250 DF93      		push r29
 630 0252 CDB7      		in r28,__SP_L__
 631 0254 DEB7      		in r29,__SP_H__
 632 0256 2D97      		sbiw r28,13
 633 0258 0FB6      		in __tmp_reg__,__SREG__
 634 025a F894      		cli
 635 025c DEBF      		out __SP_H__,r29
 636 025e 0FBE      		out __SREG__,__tmp_reg__
 637 0260 CDBF      		out __SP_L__,r28
 638               	/* prologue: function */
 639               	/* frame size = 13 */
 640               	/* stack size = 15 */
 641               	.L__stack_usage = 15
 642 0262 8D87      		std Y+13,r24
 123:main.c        ****     
 124:main.c        ****     char str[10];
 125:main.c        ****     memset(str,0,10);
 644               	.LM35:
 645 0264 CE01      		movw r24,r28
 646 0266 0396      		adiw r24,3
 647 0268 4AE0      		ldi r20,lo8(10)
 648 026a 50E0      		ldi r21,0
 649 026c 60E0      		ldi r22,0
 650 026e 70E0      		ldi r23,0
 651 0270 0E94 0000 		call memset
 126:main.c        ****     itoa(i,str,10);
 653               	.LM36:
 654 0274 8D85      		ldd r24,Y+13
 655 0276 882F      		mov r24,r24
 656 0278 90E0      		ldi r25,0
 657 027a 9E01      		movw r18,r28
 658 027c 2D5F      		subi r18,-3
 659 027e 3F4F      		sbci r19,-1
 660 0280 4AE0      		ldi r20,lo8(10)
 661 0282 50E0      		ldi r21,0
 662 0284 B901      		movw r22,r18
 663 0286 0E94 0000 		call itoa
 127:main.c        ****     char * irr = str;
 665               	.LM37:
 666 028a CE01      		movw r24,r28
 667 028c 0396      		adiw r24,3
 668 028e 9A83      		std Y+2,r25
 669 0290 8983      		std Y+1,r24
 128:main.c        ****     while(*irr){
 671               	.LM38:
 672 0292 00C0      		rjmp .L8
 673               	.L9:
 129:main.c        ****         USART_AddToQueue((unsigned char )*irr);
 675               	.LM39:
 676 0294 8981      		ldd r24,Y+1
 677 0296 9A81      		ldd r25,Y+2
 678 0298 FC01      		movw r30,r24
 679 029a 8081      		ld r24,Z
 680 029c 0E94 0000 		call USART_AddToQueue
 130:main.c        ****         irr++;
 682               	.LM40:
 683 02a0 8981      		ldd r24,Y+1
 684 02a2 9A81      		ldd r25,Y+2
 685 02a4 0196      		adiw r24,1
 686 02a6 9A83      		std Y+2,r25
 687 02a8 8983      		std Y+1,r24
 688               	.L8:
 128:main.c        ****     while(*irr){
 690               	.LM41:
 691 02aa 8981      		ldd r24,Y+1
 692 02ac 9A81      		ldd r25,Y+2
 693 02ae FC01      		movw r30,r24
 694 02b0 8081      		ld r24,Z
 695 02b2 8823      		tst r24
 696 02b4 01F4      		brne .L9
 697               	/* epilogue start */
 131:main.c        ****     }
 132:main.c        ****     
 133:main.c        **** }
 699               	.LM42:
 700 02b6 2D96      		adiw r28,13
 701 02b8 0FB6      		in __tmp_reg__,__SREG__
 702 02ba F894      		cli
 703 02bc DEBF      		out __SP_H__,r29
 704 02be 0FBE      		out __SREG__,__tmp_reg__
 705 02c0 CDBF      		out __SP_L__,r28
 706 02c2 DF91      		pop r29
 707 02c4 CF91      		pop r28
 708 02c6 0895      		ret
 714               	.Lscope5:
 716               		.stabd	78,0,0
 718               	.global	__vector_50
 720               	__vector_50:
 721               		.stabd	46,0,0
 134:main.c        **** 
 135:main.c        **** ISR(TIMER5_OVF_vect){
 723               	.LM43:
 724               	.LFBB6:
 725 02c8 1F92      		push r1
 726 02ca 0F92      		push r0
 727 02cc 0090 5F00 		lds r0,95
 728 02d0 0F92      		push r0
 729 02d2 1124      		clr __zero_reg__
 730 02d4 0090 5B00 		lds r0,91
 731 02d8 0F92      		push r0
 732 02da 2F93      		push r18
 733 02dc 3F93      		push r19
 734 02de 8F93      		push r24
 735 02e0 9F93      		push r25
 736 02e2 EF93      		push r30
 737 02e4 FF93      		push r31
 738 02e6 CF93      		push r28
 739 02e8 DF93      		push r29
 740 02ea CDB7      		in r28,__SP_L__
 741 02ec DEB7      		in r29,__SP_H__
 742               	/* prologue: Signal */
 743               	/* frame size = 0 */
 744               	/* stack size = 12 */
 745               	.L__stack_usage = 12
 136:main.c        **** 
 137:main.c        **** 	PORTB ^= 0xFF;
 747               	.LM44:
 748 02ee 85E2      		ldi r24,lo8(37)
 749 02f0 90E0      		ldi r25,0
 750 02f2 25E2      		ldi r18,lo8(37)
 751 02f4 30E0      		ldi r19,0
 752 02f6 F901      		movw r30,r18
 753 02f8 2081      		ld r18,Z
 754 02fa 2095      		com r18
 755 02fc FC01      		movw r30,r24
 756 02fe 2083      		st Z,r18
 138:main.c        **** 	TCNT3L = 0;
 758               	.LM45:
 759 0300 84E9      		ldi r24,lo8(-108)
 760 0302 90E0      		ldi r25,0
 761 0304 FC01      		movw r30,r24
 762 0306 1082      		st Z,__zero_reg__
 139:main.c        **** 	TCNT3H = 0;
 764               	.LM46:
 765 0308 85E9      		ldi r24,lo8(-107)
 766 030a 90E0      		ldi r25,0
 767 030c FC01      		movw r30,r24
 768 030e 1082      		st Z,__zero_reg__
 769               	/* epilogue start */
 140:main.c        **** 
 141:main.c        **** }
 771               	.LM47:
 772 0310 DF91      		pop r29
 773 0312 CF91      		pop r28
 774 0314 FF91      		pop r31
 775 0316 EF91      		pop r30
 776 0318 9F91      		pop r25
 777 031a 8F91      		pop r24
 778 031c 3F91      		pop r19
 779 031e 2F91      		pop r18
 780 0320 0F90      		pop r0
 781 0322 0092 5B00 		sts 91,r0
 782 0326 0F90      		pop r0
 783 0328 0092 5F00 		sts 95,r0
 784 032c 0F90      		pop r0
 785 032e 1F90      		pop r1
 786 0330 1895      		reti
 788               	.Lscope6:
 790               		.stabd	78,0,0
 792               	.global	getTimerCount2
 794               	getTimerCount2:
 795               		.stabd	46,0,0
 142:main.c        **** 
 143:main.c        **** unsigned int getTimerCount2(){
 797               	.LM48:
 798               	.LFBB7:
 799 0332 CF93      		push r28
 800 0334 DF93      		push r29
 801 0336 CDB7      		in r28,__SP_L__
 802 0338 DEB7      		in r29,__SP_H__
 803               	/* prologue: function */
 804               	/* frame size = 0 */
 805               	/* stack size = 2 */
 806               	.L__stack_usage = 2
 144:main.c        **** 
 145:main.c        **** 	//volatile char timerLow = TCNT3L;
 146:main.c        **** 
 147:main.c        **** 	return TCNT0;
 808               	.LM49:
 809 033a 86E4      		ldi r24,lo8(70)
 810 033c 90E0      		ldi r25,0
 811 033e FC01      		movw r30,r24
 812 0340 8081      		ld r24,Z
 813 0342 882F      		mov r24,r24
 814 0344 90E0      		ldi r25,0
 815               	/* epilogue start */
 148:main.c        **** 
 149:main.c        **** }
 817               	.LM50:
 818 0346 DF91      		pop r29
 819 0348 CF91      		pop r28
 820 034a 0895      		ret
 822               	.Lscope7:
 824               		.stabd	78,0,0
 831               	.global	potValue
 833               	potValue:
 834               		.stabd	46,0,0
 150:main.c        **** 
 151:main.c        **** 
 152:main.c        **** int potValue(int sonarMax,int sonarMin,int potMax,int potMin,int x){
 836               	.LM51:
 837               	.LFBB8:
 838 034c 0F93      		push r16
 839 034e 1F93      		push r17
 840 0350 CF93      		push r28
 841 0352 DF93      		push r29
 842 0354 CDB7      		in r28,__SP_L__
 843 0356 DEB7      		in r29,__SP_H__
 844 0358 2C97      		sbiw r28,12
 845 035a 0FB6      		in __tmp_reg__,__SREG__
 846 035c F894      		cli
 847 035e DEBF      		out __SP_H__,r29
 848 0360 0FBE      		out __SREG__,__tmp_reg__
 849 0362 CDBF      		out __SP_L__,r28
 850               	/* prologue: function */
 851               	/* frame size = 12 */
 852               	/* stack size = 16 */
 853               	.L__stack_usage = 16
 854 0364 9C83      		std Y+4,r25
 855 0366 8B83      		std Y+3,r24
 856 0368 7E83      		std Y+6,r23
 857 036a 6D83      		std Y+5,r22
 858 036c 5887      		std Y+8,r21
 859 036e 4F83      		std Y+7,r20
 860 0370 3A87      		std Y+10,r19
 861 0372 2987      		std Y+9,r18
 862 0374 1C87      		std Y+12,r17
 863 0376 0B87      		std Y+11,r16
 153:main.c        **** 	int value;	
 154:main.c        **** 	if(x < sonarMin){
 865               	.LM52:
 866 0378 2B85      		ldd r18,Y+11
 867 037a 3C85      		ldd r19,Y+12
 868 037c 8D81      		ldd r24,Y+5
 869 037e 9E81      		ldd r25,Y+6
 870 0380 2817      		cp r18,r24
 871 0382 3907      		cpc r19,r25
 872 0384 04F4      		brge .L14
 155:main.c        **** 		return potMin;
 874               	.LM53:
 875 0386 8985      		ldd r24,Y+9
 876 0388 9A85      		ldd r25,Y+10
 877 038a 00C0      		rjmp .L15
 878               	.L14:
 156:main.c        **** 	} else if (x > sonarMax){
 880               	.LM54:
 881 038c 2B85      		ldd r18,Y+11
 882 038e 3C85      		ldd r19,Y+12
 883 0390 8B81      		ldd r24,Y+3
 884 0392 9C81      		ldd r25,Y+4
 885 0394 8217      		cp r24,r18
 886 0396 9307      		cpc r25,r19
 887 0398 04F4      		brge .L16
 157:main.c        **** 		return potMax;
 889               	.LM55:
 890 039a 8F81      		ldd r24,Y+7
 891 039c 9885      		ldd r25,Y+8
 892 039e 00C0      		rjmp .L15
 893               	.L16:
 158:main.c        **** 	} else {
 159:main.c        **** 		value = x / 4 - 140;
 895               	.LM56:
 896 03a0 8B85      		ldd r24,Y+11
 897 03a2 9C85      		ldd r25,Y+12
 898 03a4 9923      		tst r25
 899 03a6 04F4      		brge .L17
 900 03a8 0396      		adiw r24,3
 901               	.L17:
 902 03aa 9595      		asr r25
 903 03ac 8795      		ror r24
 904 03ae 9595      		asr r25
 905 03b0 8795      		ror r24
 906 03b2 8C58      		subi r24,-116
 907 03b4 9109      		sbc r25,__zero_reg__
 908 03b6 9A83      		std Y+2,r25
 909 03b8 8983      		std Y+1,r24
 160:main.c        **** 		return value > potMax?potMax:value < potMin?potMin:value;
 911               	.LM57:
 912 03ba 2981      		ldd r18,Y+1
 913 03bc 3A81      		ldd r19,Y+2
 914 03be 8F81      		ldd r24,Y+7
 915 03c0 9885      		ldd r25,Y+8
 916 03c2 8217      		cp r24,r18
 917 03c4 9307      		cpc r25,r19
 918 03c6 04F0      		brlt .L18
 920               	.LM58:
 921 03c8 2985      		ldd r18,Y+9
 922 03ca 3A85      		ldd r19,Y+10
 923 03cc 8981      		ldd r24,Y+1
 924 03ce 9A81      		ldd r25,Y+2
 925 03d0 8217      		cp r24,r18
 926 03d2 9307      		cpc r25,r19
 927 03d4 04F4      		brge .L20
 928 03d6 C901      		movw r24,r18
 929 03d8 00C0      		rjmp .L15
 930               	.L18:
 932               	.LM59:
 933 03da 8F81      		ldd r24,Y+7
 934 03dc 9885      		ldd r25,Y+8
 935               	.L20:
 936               	.L15:
 937               	/* epilogue start */
 161:main.c        **** 	}
 162:main.c        **** } 
 939               	.LM60:
 940 03de 2C96      		adiw r28,12
 941 03e0 0FB6      		in __tmp_reg__,__SREG__
 942 03e2 F894      		cli
 943 03e4 DEBF      		out __SP_H__,r29
 944 03e6 0FBE      		out __SREG__,__tmp_reg__
 945 03e8 CDBF      		out __SP_L__,r28
 946 03ea DF91      		pop r29
 947 03ec CF91      		pop r28
 948 03ee 1F91      		pop r17
 949 03f0 0F91      		pop r16
 950 03f2 0895      		ret
 955               	.Lscope8:
 957               		.stabd	78,0,0
 960               	.global	vTaskFunction_1
 962               	vTaskFunction_1:
 963               		.stabd	46,0,0
 163:main.c        **** 
 164:main.c        **** void vTaskFunction_1(void *pvParameters)
 165:main.c        **** {	
 965               	.LM61:
 966               	.LFBB9:
 967 03f4 CF93      		push r28
 968 03f6 DF93      		push r29
 969 03f8 CDB7      		in r28,__SP_L__
 970 03fa DEB7      		in r29,__SP_H__
 971 03fc 6597      		sbiw r28,21
 972 03fe 0FB6      		in __tmp_reg__,__SREG__
 973 0400 F894      		cli
 974 0402 DEBF      		out __SP_H__,r29
 975 0404 0FBE      		out __SREG__,__tmp_reg__
 976 0406 CDBF      		out __SP_L__,r28
 977               	/* prologue: function */
 978               	/* frame size = 21 */
 979               	/* stack size = 23 */
 980               	.L__stack_usage = 23
 981 0408 9D8B      		std Y+21,r25
 982 040a 8C8B      		std Y+20,r24
 166:main.c        **** 	int sonarResult;
 167:main.c        **** 	int movingForward = 1;
 984               	.LM62:
 985 040c 81E0      		ldi r24,lo8(1)
 986 040e 90E0      		ldi r25,0
 987 0410 9A83      		std Y+2,r25
 988 0412 8983      		std Y+1,r24
 168:main.c        **** 
 169:main.c        **** 	int sonarMax = 0x31C;
 990               	.LM63:
 991 0414 8CE1      		ldi r24,lo8(28)
 992 0416 93E0      		ldi r25,lo8(3)
 993 0418 9C83      		std Y+4,r25
 994 041a 8B83      		std Y+3,r24
 170:main.c        **** 	int sonarMin = 0xE0;
 996               	.LM64:
 997 041c 80EE      		ldi r24,lo8(-32)
 998 041e 90E0      		ldi r25,0
 999 0420 9E83      		std Y+6,r25
 1000 0422 8D83      		std Y+5,r24
 171:main.c        **** 	int potMin = 0x18;
 1002               	.LM65:
 1003 0424 88E1      		ldi r24,lo8(24)
 1004 0426 90E0      		ldi r25,0
 1005 0428 9887      		std Y+8,r25
 1006 042a 8F83      		std Y+7,r24
 172:main.c        **** 	int potMax = 0x40;;
 1008               	.LM66:
 1009 042c 80E4      		ldi r24,lo8(64)
 1010 042e 90E0      		ldi r25,0
 1011 0430 9A87      		std Y+10,r25
 1012 0432 8987      		std Y+9,r24
 173:main.c        **** 	int backwardSwitch = 0x100;
 1014               	.LM67:
 1015 0434 80E0      		ldi r24,0
 1016 0436 91E0      		ldi r25,lo8(1)
 1017 0438 9C87      		std Y+12,r25
 1018 043a 8B87      		std Y+11,r24
 174:main.c        **** 	int neutralSwitch = 0x140;
 1020               	.LM68:
 1021 043c 80E4      		ldi r24,lo8(64)
 1022 043e 91E0      		ldi r25,lo8(1)
 1023 0440 9E87      		std Y+14,r25
 1024 0442 8D87      		std Y+13,r24
 175:main.c        **** 	int forwardSwitch = 0x160;
 1026               	.LM69:
 1027 0444 80E6      		ldi r24,lo8(96)
 1028 0446 91E0      		ldi r25,lo8(1)
 1029 0448 988B      		std Y+16,r25
 1030 044a 8F87      		std Y+15,r24
 176:main.c        **** 	int minTicks = 450;
 1032               	.LM70:
 1033 044c 82EC      		ldi r24,lo8(-62)
 1034 044e 91E0      		ldi r25,lo8(1)
 1035 0450 9A8B      		std Y+18,r25
 1036 0452 898B      		std Y+17,r24
 177:main.c        **** 
 178:main.c        **** 	int tickCount;
 179:main.c        **** 
 180:main.c        **** 	char a = 'a';
 1038               	.LM71:
 1039 0454 81E6      		ldi r24,lo8(97)
 1040 0456 8B8B      		std Y+19,r24
 181:main.c        **** 
 182:main.c        **** 	PORTA = 4;
 1042               	.LM72:
 1043 0458 82E2      		ldi r24,lo8(34)
 1044 045a 90E0      		ldi r25,0
 1045 045c 24E0      		ldi r18,lo8(4)
 1046 045e FC01      		movw r30,r24
 1047 0460 2083      		st Z,r18
 183:main.c        **** 
 184:main.c        ****    USART_Init(9600, 16000000);
 1049               	.LM73:
 1050 0462 40E0      		ldi r20,0
 1051 0464 54E2      		ldi r21,lo8(36)
 1052 0466 64EF      		ldi r22,lo8(-12)
 1053 0468 70E0      		ldi r23,0
 1054 046a 80E8      		ldi r24,lo8(-128)
 1055 046c 95E2      		ldi r25,lo8(37)
 1056 046e 0E94 0000 		call USART_Init
 185:main.c        **** 
 186:main.c        **** 	initializeSteeringTimer();
 1058               	.LM74:
 1059 0472 0E94 0000 		call initializeSteeringTimer
 187:main.c        **** 
 188:main.c        **** 	initializeSPI();
 1061               	.LM75:
 1062 0476 0E94 0000 		call initializeSPI
 189:main.c        **** 	initSpeedController();
 1064               	.LM76:
 1065 047a 0E94 0000 		call initSpeedController
 190:main.c        **** 	setSteeringPWMSpeed(0xB0);
 1067               	.LM77:
 1068 047e 80EB      		ldi r24,lo8(-80)
 1069 0480 90E0      		ldi r25,0
 1070 0482 0E94 0000 		call setSteeringPWMSpeed
 1071               	.L22:
 191:main.c        **** 
 192:main.c        **** 	//setPot(0x20);
 193:main.c        **** 	for(;;){
 194:main.c        **** 		vTaskDelay(200);
 1073               	.LM78:
 1074 0486 88EC      		ldi r24,lo8(-56)
 1075 0488 90E0      		ldi r25,0
 1076 048a 0E94 0000 		call vTaskDelay
 195:main.c        **** 	}
 1078               	.LM79:
 1079 048e 00C0      		rjmp .L22
 1093               	.Lscope9:
 1095               		.stabd	78,0,0
 1098               	.global	vTaskFunction_2
 1100               	vTaskFunction_2:
 1101               		.stabd	46,0,0
 196:main.c        **** 	for(;;){
 197:main.c        **** 		int sonarData = getSonarData(0);
 198:main.c        **** 		if(sonarData > 0x300){
 199:main.c        **** 			setSteeringDirection(1);
 200:main.c        **** 			USART_Write('F');
 201:main.c        **** 		} else if(sonarData < 0x50){
 202:main.c        **** 			setSteeringDirection(-1);
 203:main.c        **** 			USART_Write('R');
 204:main.c        **** 		} else {
 205:main.c        **** 			setSteeringDirection(0);
 206:main.c        **** 			USART_Write('N');
 207:main.c        **** 		}
 208:main.c        **** 		vTaskDelay(10);	
 209:main.c        **** 	}
 210:main.c        **** 	
 211:main.c        **** 	//PORTC = 0x2;
 212:main.c        **** 	setFNR(1);
 213:main.c        **** 	
 214:main.c        **** 	for(;;){
 215:main.c        **** 
 216:main.c        **** 		sonarResult = getSonarResult();
 217:main.c        **** 		if(movingForward == 1){
 218:main.c        **** 			if(sonarResult < backwardSwitch) {
 219:main.c        **** 				movingForward = -1;
 220:main.c        **** 				setFNR(-1);
 221:main.c        **** 				tickCount = 0;
 222:main.c        **** 			} else if(sonarResult < neutralSwitch){
 223:main.c        **** 				setFNR(0);
 224:main.c        **** 				movingForward = 0;
 225:main.c        **** 				tickCount = 0;
 226:main.c        **** 			}
 227:main.c        **** 			setPot(potValue(sonarMax,sonarMin,potMax,potMin,sonarResult));
 228:main.c        **** 		} else if(movingForward == 0){
 229:main.c        **** 			if(sonarResult < backwardSwitch){
 230:main.c        **** 				movingForward = -1;
 231:main.c        **** 				setFNR(-1);
 232:main.c        **** 				tickCount = 0;
 233:main.c        **** 			} if(tickCount > minTicks){
 234:main.c        **** 				movingForward = 1;
 235:main.c        **** 				setFNR(1);
 236:main.c        **** 			}	
 237:main.c        **** 		} else {
 238:main.c        **** 			if(sonarResult > forwardSwitch && tickCount > minTicks){
 239:main.c        **** 				movingForward = 1;
 240:main.c        **** 				setFNR(0);
 241:main.c        **** 				vTaskDelay(100);
 242:main.c        **** 				setFNR(1);
 243:main.c        **** 			}
 244:main.c        **** 			setPot(potValue(sonarMax,sonarMin,potMax,potMin,sonarResult));
 245:main.c        **** 		}
 246:main.c        **** 		/*printHex(potValue(sonarMax,sonarMin,potMax,potMin,sonarResult));
 247:main.c        **** 		USART_Write('\n');
 248:main.c        **** 		USART_Write('\r');*/
 249:main.c        **** 		vTaskDelay(1);
 250:main.c        **** 		tickCount++;
 251:main.c        **** 	}
 252:main.c        **** 
 253:main.c        **** 	for(;;){
 254:main.c        **** 		PORTL = 0x10;
 255:main.c        **** 		vTaskDelay(200);
 256:main.c        **** 		PORTL = 0x20;
 257:main.c        **** 		vTaskDelay(200);
 258:main.c        **** 		PORTL = 0x40;
 259:main.c        **** 		vTaskDelay(200);
 260:main.c        **** 		PORTL = 0x80;
 261:main.c        **** 		vTaskDelay(200);
 262:main.c        **** 	}
 263:main.c        **** }
 264:main.c        **** 
 265:main.c        **** void vTaskFunction_2(void *pvParameters){
 1103               	.LM80:
 1104               	.LFBB10:
 1105 0490 CF93      		push r28
 1106 0492 DF93      		push r29
 1107 0494 1F92      		push __zero_reg__
 1108 0496 1F92      		push __zero_reg__
 1109 0498 CDB7      		in r28,__SP_L__
 1110 049a DEB7      		in r29,__SP_H__
 1111               	/* prologue: function */
 1112               	/* frame size = 2 */
 1113               	/* stack size = 4 */
 1114               	.L__stack_usage = 4
 1115 049c 9A83      		std Y+2,r25
 1116 049e 8983      		std Y+1,r24
 266:main.c        **** 	DDRL = 0xF0;
 1118               	.LM81:
 1119 04a0 8AE0      		ldi r24,lo8(10)
 1120 04a2 91E0      		ldi r25,lo8(1)
 1121 04a4 20EF      		ldi r18,lo8(-16)
 1122 04a6 FC01      		movw r30,r24
 1123 04a8 2083      		st Z,r18
 267:main.c        **** 	PORTL = 0xC0;
 1125               	.LM82:
 1126 04aa 8BE0      		ldi r24,lo8(11)
 1127 04ac 91E0      		ldi r25,lo8(1)
 1128 04ae 20EC      		ldi r18,lo8(-64)
 1129 04b0 FC01      		movw r30,r24
 1130 04b2 2083      		st Z,r18
 1131               	.L24:
 268:main.c        **** 	for(;;){
 269:main.c        **** 		vTaskDelay(300);
 1133               	.LM83:
 1134 04b4 8CE2      		ldi r24,lo8(44)
 1135 04b6 91E0      		ldi r25,lo8(1)
 1136 04b8 0E94 0000 		call vTaskDelay
 270:main.c        **** 	}	
 1138               	.LM84:
 1139 04bc 00C0      		rjmp .L24
 1141               	.Lscope10:
 1143               		.stabd	78,0,0
 1146               	.global	vTaskPot
 1148               	vTaskPot:
 1149               		.stabd	46,0,0
 271:main.c        **** }
 272:main.c        **** 
 273:main.c        **** void vTaskPot(void *pvParameters){
 1151               	.LM85:
 1152               	.LFBB11:
 1153 04be CF93      		push r28
 1154 04c0 DF93      		push r29
 1155 04c2 00D0      		rcall .
 1156 04c4 1F92      		push __zero_reg__
 1157 04c6 CDB7      		in r28,__SP_L__
 1158 04c8 DEB7      		in r29,__SP_H__
 1159               	/* prologue: function */
 1160               	/* frame size = 4 */
 1161               	/* stack size = 6 */
 1162               	.L__stack_usage = 6
 1163 04ca 9C83      		std Y+4,r25
 1164 04cc 8B83      		std Y+3,r24
 274:main.c        **** 	initializeSPI();
 1166               	.LM86:
 1167 04ce 0E94 0000 		call initializeSPI
 275:main.c        **** 	int a = 0;
 1169               	.LM87:
 1170 04d2 1A82      		std Y+2,__zero_reg__
 1171 04d4 1982      		std Y+1,__zero_reg__
 276:main.c        **** 	initSpeedController();
 1173               	.LM88:
 1174 04d6 0E94 0000 		call initSpeedController
 1175               	.L26:
 277:main.c        **** 	/*for(;;){
 278:main.c        **** 		setPot(a);
 279:main.c        **** 		vTaskDelay(80);
 280:main.c        **** 		a++;
 281:main.c        **** 	}*/
 282:main.c        **** 	for(;;){
 283:main.c        **** 		setPot(1);
 1177               	.LM89:
 1178 04da 81E0      		ldi r24,lo8(1)
 1179 04dc 90E0      		ldi r25,0
 1180 04de 0E94 0000 		call setPot
 284:main.c        **** 		vTaskDelay(500);
 1182               	.LM90:
 1183 04e2 84EF      		ldi r24,lo8(-12)
 1184 04e4 91E0      		ldi r25,lo8(1)
 1185 04e6 0E94 0000 		call vTaskDelay
 285:main.c        **** 		setPot(0x40);
 1187               	.LM91:
 1188 04ea 80E4      		ldi r24,lo8(64)
 1189 04ec 90E0      		ldi r25,0
 1190 04ee 0E94 0000 		call setPot
 286:main.c        **** 		vTaskDelay(500);
 1192               	.LM92:
 1193 04f2 84EF      		ldi r24,lo8(-12)
 1194 04f4 91E0      		ldi r25,lo8(1)
 1195 04f6 0E94 0000 		call vTaskDelay
 287:main.c        **** 		setPot(0x7F);
 1197               	.LM93:
 1198 04fa 8FE7      		ldi r24,lo8(127)
 1199 04fc 90E0      		ldi r25,0
 1200 04fe 0E94 0000 		call setPot
 288:main.c        **** 		vTaskDelay(500);
 1202               	.LM94:
 1203 0502 84EF      		ldi r24,lo8(-12)
 1204 0504 91E0      		ldi r25,lo8(1)
 1205 0506 0E94 0000 		call vTaskDelay
 289:main.c        **** 		setPot(0x40);
 1207               	.LM95:
 1208 050a 80E4      		ldi r24,lo8(64)
 1209 050c 90E0      		ldi r25,0
 1210 050e 0E94 0000 		call setPot
 290:main.c        **** 		vTaskDelay(500);
 1212               	.LM96:
 1213 0512 84EF      		ldi r24,lo8(-12)
 1214 0514 91E0      		ldi r25,lo8(1)
 1215 0516 0E94 0000 		call vTaskDelay
 291:main.c        **** 	}
 1217               	.LM97:
 1218 051a 00C0      		rjmp .L26
 1223               	.Lscope11:
 1225               		.stabd	78,0,0
 1227               	.global	vIO_init
 1229               	vIO_init:
 1230               		.stabd	46,0,0
 292:main.c        **** }
 293:main.c        **** 
 294:main.c        **** 
 295:main.c        **** void vIO_init(void)
 296:main.c        **** {
 1232               	.LM98:
 1233               	.LFBB12:
 1234 051c CF93      		push r28
 1235 051e DF93      		push r29
 1236 0520 CDB7      		in r28,__SP_L__
 1237 0522 DEB7      		in r29,__SP_H__
 1238               	/* prologue: function */
 1239               	/* frame size = 0 */
 1240               	/* stack size = 2 */
 1241               	.L__stack_usage = 2
 297:main.c        ****     //- set PortB as output
 298:main.c        **** 	DDRB = 0xFF; 
 1243               	.LM99:
 1244 0524 84E2      		ldi r24,lo8(36)
 1245 0526 90E0      		ldi r25,0
 1246 0528 2FEF      		ldi r18,lo8(-1)
 1247 052a FC01      		movw r30,r24
 1248 052c 2083      		st Z,r18
 299:main.c        ****     PORTB = 0; 
 1250               	.LM100:
 1251 052e 85E2      		ldi r24,lo8(37)
 1252 0530 90E0      		ldi r25,0
 1253 0532 FC01      		movw r30,r24
 1254 0534 1082      		st Z,__zero_reg__
 1255               	/* epilogue start */
 300:main.c        **** }
 1257               	.LM101:
 1258 0536 DF91      		pop r29
 1259 0538 CF91      		pop r28
 1260 053a 0895      		ret
 1262               	.Lscope12:
 1264               		.stabd	78,0,0
 1268               	.Letext0:
 1269               		.ident	"GCC: (GNU) 4.8.2"
 1270               	.global __do_copy_data
 1271               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccSltdiO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccSltdiO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccSltdiO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccSltdiO.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccSltdiO.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccSltdiO.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccSltdiO.s:166    .bss:0000000000000000 count
                            *COM*:0000000000000002 sonarTime
     /tmp/ccSltdiO.s:173    .text:0000000000000000 vApplicationTickHook
     /tmp/ccSltdiO.s:206    .text:0000000000000020 vApplicationStackOverflowHook
     /tmp/ccSltdiO.s:247    .text:0000000000000030 main
     /tmp/ccSltdiO.s:1229   .text:000000000000051c vIO_init
     /tmp/ccSltdiO.s:962    .text:00000000000003f4 vTaskFunction_1
     /tmp/ccSltdiO.s:497    .text:000000000000018e printHex
     /tmp/ccSltdiO.s:623    .text:000000000000024e printNum
     /tmp/ccSltdiO.s:720    .text:00000000000002c8 __vector_50
     /tmp/ccSltdiO.s:794    .text:0000000000000332 getTimerCount2
     /tmp/ccSltdiO.s:833    .text:000000000000034c potValue
     /tmp/ccSltdiO.s:1100   .text:0000000000000490 vTaskFunction_2
     /tmp/ccSltdiO.s:1148   .text:00000000000004be vTaskPot

UNDEFINED SYMBOLS
xTaskGenericCreate
vTaskSteer
vTaskSonar
vTaskUSARTRead
vTaskADC
vTaskStartScheduler
USART_Write
memset
itoa
USART_AddToQueue
USART_Init
initializeSteeringTimer
initializeSPI
initSpeedController
setSteeringPWMSpeed
vTaskDelay
setPot
__do_copy_data
__do_clear_bss
