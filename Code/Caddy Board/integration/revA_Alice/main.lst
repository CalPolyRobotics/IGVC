   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 162               	.global	RTOScount
 163               		.section .bss
 166               	RTOScount:
 167 0000 0000      		.zero	2
 168               		.comm	sonarTime,2,1
 169               		.text
 171               	.global	vApplicationTickHook
 173               	vApplicationTickHook:
 174               		.stabd	46,0,0
   1:main.c        **** #include <stdint.h>
   2:main.c        **** #include <string.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <math.h>
   6:main.c        **** #include "FreeRTOS.h"
   7:main.c        **** #include <avr/io.h>
   8:main.c        **** #include <avr/interrupt.h>
   9:main.c        **** #include "task.h"
  10:main.c        **** #include "usart.h"
  11:main.c        **** #include "queue.h"
  12:main.c        **** #include "spi.h"
  13:main.c        **** #include "ADC.h"
  14:main.c        **** #include "Components/FNR/FNR.h"
  15:main.c        **** #include "Components/Speed/Speed.h"
  16:main.c        **** #include "Components/Sonar/Sonar.h"
  17:main.c        **** #include "Components/Battery/Battery.h"
  18:main.c        **** #include "Components/Steering/Steering.h"
  19:main.c        **** 
  20:main.c        **** void vTaskFunction_1(void);
  21:main.c        **** void vTaskFunction_2(void);
  22:main.c        **** void vTaskFunction_3(void);
  23:main.c        **** void vTaskPot(void);
  24:main.c        **** void vIO_init(void);
  25:main.c        **** int potValue(int sonarMax,int sonarMin,int potMax,int potMin,int x);
  26:main.c        **** void vApplicationTickHook(void);
  27:main.c        **** void vApplicationStackOverflowHook(void);
  28:main.c        **** void printNum(unsigned int i);
  29:main.c        **** void printHex(int i);
  30:main.c        **** 
  31:main.c        **** int RTOScount = 0;
  32:main.c        **** 
  33:main.c        **** int sonarTime;
  34:main.c        **** 
  35:main.c        **** void vApplicationTickHook()
  36:main.c        **** {
 176               	.LM0:
 177               	.LFBB1:
 178 0000 CF93      		push r28
 179 0002 DF93      		push r29
 180 0004 CDB7      		in r28,__SP_L__
 181 0006 DEB7      		in r29,__SP_H__
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 2 */
 185               	.L__stack_usage = 2
  37:main.c        ****     RTOScount++;
 187               	.LM1:
 188 0008 8091 0000 		lds r24,RTOScount
 189 000c 9091 0000 		lds r25,RTOScount+1
 190 0010 0196      		adiw r24,1
 191 0012 9093 0000 		sts RTOScount+1,r25
 192 0016 8093 0000 		sts RTOScount,r24
 193               	/* epilogue start */
  38:main.c        **** }
 195               	.LM2:
 196 001a DF91      		pop r29
 197 001c CF91      		pop r28
 198 001e 0895      		ret
 200               	.Lscope1:
 202               		.stabd	78,0,0
 204               	.global	vApplicationStackOverflowHook
 206               	vApplicationStackOverflowHook:
 207               		.stabd	46,0,0
  39:main.c        **** 
  40:main.c        **** void vApplicationStackOverflowHook(){
 209               	.LM3:
 210               	.LFBB2:
 211 0020 CF93      		push r28
 212 0022 DF93      		push r29
 213 0024 CDB7      		in r28,__SP_L__
 214 0026 DEB7      		in r29,__SP_H__
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 2 */
 218               	.L__stack_usage = 2
  41:main.c        **** 	return;
 220               	.LM4:
 221 0028 0000      		nop
 222               	/* epilogue start */
  42:main.c        **** }
 224               	.LM5:
 225 002a DF91      		pop r29
 226 002c CF91      		pop r28
 227 002e 0895      		ret
 229               	.Lscope2:
 231               		.stabd	78,0,0
 232               		.section	.rodata
 233               	.LC1:
 234 0000 5430 00   		.string	"T0"
 235               	.LC2:
 236 0003 5434 00   		.string	"T4"
 237               	.LC3:
 238 0006 5435 00   		.string	"T5"
 239               		.text
 241               	.global	main
 243               	main:
 244               		.stabd	46,0,0
  43:main.c        **** /*-----------------------------------------------------------*/
  44:main.c        **** 
  45:main.c        **** int main( void )
  46:main.c        **** {
 246               	.LM6:
 247               	.LFBB3:
 248 0030 AF92      		push r10
 249 0032 BF92      		push r11
 250 0034 CF92      		push r12
 251 0036 DF92      		push r13
 252 0038 EF92      		push r14
 253 003a FF92      		push r15
 254 003c 0F93      		push r16
 255 003e CF93      		push r28
 256 0040 DF93      		push r29
 257 0042 CDB7      		in r28,__SP_L__
 258 0044 DEB7      		in r29,__SP_H__
 259               	/* prologue: function */
 260               	/* frame size = 0 */
 261               	/* stack size = 9 */
 262               	.L__stack_usage = 9
  47:main.c        ****     
  48:main.c        **** 	DDRA = 0xF7;
 264               	.LM7:
 265 0046 81E2      		ldi r24,lo8(33)
 266 0048 90E0      		ldi r25,0
 267 004a 27EF      		ldi r18,lo8(-9)
 268 004c FC01      		movw r30,r24
 269 004e 2083      		st Z,r18
  49:main.c        **** 	//PORTA = 0;
  50:main.c        **** 	DDRD = 0xFF;
 271               	.LM8:
 272 0050 8AE2      		ldi r24,lo8(42)
 273 0052 90E0      		ldi r25,0
 274 0054 2FEF      		ldi r18,lo8(-1)
 275 0056 FC01      		movw r30,r24
 276 0058 2083      		st Z,r18
  51:main.c        **** 	DDRE = 0xFF;
 278               	.LM9:
 279 005a 8DE2      		ldi r24,lo8(45)
 280 005c 90E0      		ldi r25,0
 281 005e 2FEF      		ldi r18,lo8(-1)
 282 0060 FC01      		movw r30,r24
 283 0062 2083      		st Z,r18
  52:main.c        **** 	DDRB = 0xFF; 
 285               	.LM10:
 286 0064 84E2      		ldi r24,lo8(36)
 287 0066 90E0      		ldi r25,0
 288 0068 2FEF      		ldi r18,lo8(-1)
 289 006a FC01      		movw r30,r24
 290 006c 2083      		st Z,r18
  53:main.c        ****    DDRF = 0;
 292               	.LM11:
 293 006e 80E3      		ldi r24,lo8(48)
 294 0070 90E0      		ldi r25,0
 295 0072 FC01      		movw r30,r24
 296 0074 1082      		st Z,__zero_reg__
  54:main.c        **** 	DDRK = 0;
 298               	.LM12:
 299 0076 87E0      		ldi r24,lo8(7)
 300 0078 91E0      		ldi r25,lo8(1)
 301 007a FC01      		movw r30,r24
 302 007c 1082      		st Z,__zero_reg__
  55:main.c        **** 	DDRJ = 0;
 304               	.LM13:
 305 007e 84E0      		ldi r24,lo8(4)
 306 0080 91E0      		ldi r25,lo8(1)
 307 0082 FC01      		movw r30,r24
 308 0084 1082      		st Z,__zero_reg__
  56:main.c        **** 
  57:main.c        **** 	PORTD = 0;
 310               	.LM14:
 311 0086 8BE2      		ldi r24,lo8(43)
 312 0088 90E0      		ldi r25,0
 313 008a FC01      		movw r30,r24
 314 008c 1082      		st Z,__zero_reg__
  58:main.c        **** 	PORTE = 0;
 316               	.LM15:
 317 008e 8EE2      		ldi r24,lo8(46)
 318 0090 90E0      		ldi r25,0
 319 0092 FC01      		movw r30,r24
 320 0094 1082      		st Z,__zero_reg__
  59:main.c        **** 	PORTK = 2;
 322               	.LM16:
 323 0096 88E0      		ldi r24,lo8(8)
 324 0098 91E0      		ldi r25,lo8(1)
 325 009a 22E0      		ldi r18,lo8(2)
 326 009c FC01      		movw r30,r24
 327 009e 2083      		st Z,r18
  60:main.c        **** 
  61:main.c        ****     //- init IO with goodness
  62:main.c        **** 	vIO_init();
 329               	.LM17:
 330 00a0 0E94 0000 		call vIO_init
  63:main.c        **** 
  64:main.c        **** 	//- Create a 
  65:main.c        **** 	xTaskCreate( (pdTASK_CODE) vTaskFunction_1, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
 332               	.LM18:
 333 00a4 A12C      		mov r10,__zero_reg__
 334 00a6 B12C      		mov r11,__zero_reg__
 335 00a8 C12C      		mov r12,__zero_reg__
 336 00aa D12C      		mov r13,__zero_reg__
 337 00ac E12C      		mov r14,__zero_reg__
 338 00ae F12C      		mov r15,__zero_reg__
 339 00b0 01E0      		ldi r16,lo8(1)
 340 00b2 20E0      		ldi r18,0
 341 00b4 30E0      		ldi r19,0
 342 00b6 4DE3      		ldi r20,lo8(61)
 343 00b8 54E0      		ldi r21,lo8(4)
 344 00ba 60E0      		ldi r22,lo8(.LC1)
 345 00bc 70E0      		ldi r23,hi8(.LC1)
 346 00be 80E0      		ldi r24,lo8(gs(vTaskFunction_1))
 347 00c0 90E0      		ldi r25,hi8(gs(vTaskFunction_1))
 348 00c2 0E94 0000 		call xTaskGenericCreate
  66:main.c        ****                 NULL, 1, NULL );
  67:main.c        ****    /*xTaskCreate( (pdTASK_CODE) vTaskFunction_2, (signed char *) "T1", configMINIMAL_STACK_SIZE+100
  68:main.c        ****                 NULL, 1, NULL );*/
  69:main.c        ****    /*xTaskCreate( (pdTASK_CODE) vTaskFunction_3, (signed char *) "T0", configMINIMAL_STACK_SIZE+100
  70:main.c        ****                 NULL, 1, NULL );
  71:main.c        **** 	xTaskCreate( (pdTASK_CODE) vTaskPot, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
  72:main.c        ****                 NULL, 1, NULL );*/
  73:main.c        **** 
  74:main.c        ****  
  75:main.c        ****   	xTaskCreate( (pdTASK_CODE) vTaskSteer, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
 350               	.LM19:
 351 00c6 A12C      		mov r10,__zero_reg__
 352 00c8 B12C      		mov r11,__zero_reg__
 353 00ca C12C      		mov r12,__zero_reg__
 354 00cc D12C      		mov r13,__zero_reg__
 355 00ce E12C      		mov r14,__zero_reg__
 356 00d0 F12C      		mov r15,__zero_reg__
 357 00d2 01E0      		ldi r16,lo8(1)
 358 00d4 20E0      		ldi r18,0
 359 00d6 30E0      		ldi r19,0
 360 00d8 4DE3      		ldi r20,lo8(61)
 361 00da 54E0      		ldi r21,lo8(4)
 362 00dc 60E0      		ldi r22,lo8(.LC2)
 363 00de 70E0      		ldi r23,hi8(.LC2)
 364 00e0 80E0      		ldi r24,lo8(gs(vTaskSteer))
 365 00e2 90E0      		ldi r25,hi8(gs(vTaskSteer))
 366 00e4 0E94 0000 		call xTaskGenericCreate
  76:main.c        ****                 NULL, 1, NULL );
  77:main.c        ****  
  78:main.c        ****    /*xTaskCreate( (pdTASK_CODE) vTaskUSARTWrite, (signed char *) "T2", configMINIMAL_STACK_SIZE+100
  79:main.c        ****    				 NULL, 1, NULL);*/
  80:main.c        **** 
  81:main.c        ****    /*xTaskCreate( (pdTASK_CODE) vTaskUSARTRead, (signed char *) "T3", configMINIMAL_STACK_SIZE+1000
  82:main.c        ****    			/NULL, 1, NULL);*/
  83:main.c        **** 
  84:main.c        **** 	
  85:main.c        **** 	xTaskCreate( (pdTASK_CODE) vTaskADC, (signed char *) "T5", configMINIMAL_STACK_SIZE+1000,
 368               	.LM20:
 369 00e8 A12C      		mov r10,__zero_reg__
 370 00ea B12C      		mov r11,__zero_reg__
 371 00ec C12C      		mov r12,__zero_reg__
 372 00ee D12C      		mov r13,__zero_reg__
 373 00f0 E12C      		mov r14,__zero_reg__
 374 00f2 F12C      		mov r15,__zero_reg__
 375 00f4 01E0      		ldi r16,lo8(1)
 376 00f6 20E0      		ldi r18,0
 377 00f8 30E0      		ldi r19,0
 378 00fa 4DE3      		ldi r20,lo8(61)
 379 00fc 54E0      		ldi r21,lo8(4)
 380 00fe 60E0      		ldi r22,lo8(.LC3)
 381 0100 70E0      		ldi r23,hi8(.LC3)
 382 0102 80E0      		ldi r24,lo8(gs(vTaskADC))
 383 0104 90E0      		ldi r25,hi8(gs(vTaskADC))
 384 0106 0E94 0000 		call xTaskGenericCreate
  86:main.c        ****    				NULL, 1, NULL);
  87:main.c        **** 
  88:main.c        **** //   xTaskCreate( (pdTASK_CODE) vTaskUSARTLog, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
  89:main.c        **** //   				NULL, 1, NULL);
  90:main.c        ****     
  91:main.c        ****     //- kick off the scheduler
  92:main.c        **** 	vTaskStartScheduler();
 386               	.LM21:
 387 010a 0E94 0000 		call vTaskStartScheduler
  93:main.c        ****     
  94:main.c        **** 	return 0;
 389               	.LM22:
 390 010e 80E0      		ldi r24,0
 391 0110 90E0      		ldi r25,0
 392               	/* epilogue start */
  95:main.c        **** }
 394               	.LM23:
 395 0112 DF91      		pop r29
 396 0114 CF91      		pop r28
 397 0116 0F91      		pop r16
 398 0118 FF90      		pop r15
 399 011a EF90      		pop r14
 400 011c DF90      		pop r13
 401 011e CF90      		pop r12
 402 0120 BF90      		pop r11
 403 0122 AF90      		pop r10
 404 0124 0895      		ret
 406               	.Lscope3:
 408               		.stabd	78,0,0
 409               		.section	.rodata
 410               	.LC0:
 411 0009 30        		.byte	48
 412 000a 31        		.byte	49
 413 000b 32        		.byte	50
 414 000c 33        		.byte	51
 415 000d 34        		.byte	52
 416 000e 35        		.byte	53
 417 000f 36        		.byte	54
 418 0010 37        		.byte	55
 419 0011 38        		.byte	56
 420 0012 39        		.byte	57
 421 0013 41        		.byte	65
 422 0014 42        		.byte	66
 423 0015 43        		.byte	67
 424 0016 44        		.byte	68
 425 0017 45        		.byte	69
 426 0018 46        		.byte	70
 427               		.text
 430               	.global	printHex
 432               	printHex:
 433               		.stabd	46,0,0
  96:main.c        **** /*-----------------------------------------------------------*/
  97:main.c        **** 
  98:main.c        **** void printHex(int i){
 435               	.LM24:
 436               	.LFBB4:
 437 0126 CF93      		push r28
 438 0128 DF93      		push r29
 439 012a CDB7      		in r28,__SP_L__
 440 012c DEB7      		in r29,__SP_H__
 441 012e 6297      		sbiw r28,18
 442 0130 0FB6      		in __tmp_reg__,__SREG__
 443 0132 F894      		cli
 444 0134 DEBF      		out __SP_H__,r29
 445 0136 0FBE      		out __SREG__,__tmp_reg__
 446 0138 CDBF      		out __SP_L__,r28
 447               	/* prologue: function */
 448               	/* frame size = 18 */
 449               	/* stack size = 20 */
 450               	.L__stack_usage = 20
 451 013a 9A8B      		std Y+18,r25
 452 013c 898B      		std Y+17,r24
  99:main.c        **** 	char hex[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 454               	.LM25:
 455 013e 20E1      		ldi r18,lo8(16)
 456 0140 E0E0      		ldi r30,lo8(.LC0)
 457 0142 F0E0      		ldi r31,hi8(.LC0)
 458 0144 CE01      		movw r24,r28
 459 0146 0196      		adiw r24,1
 460 0148 DC01      		movw r26,r24
 461               		0:
 462 014a 0190      		ld r0,Z+
 463 014c 0D92      		st X+,r0
 464 014e 2A95      		dec r18
 465 0150 01F4      		brne 0b
 100:main.c        **** 
 101:main.c        **** 	USART_Write(hex[(i&0xF000) >> 12]);
 467               	.LM26:
 468 0152 8989      		ldd r24,Y+17
 469 0154 9A89      		ldd r25,Y+18
 470 0156 892F      		mov r24,r25
 471 0158 9927      		clr r25
 472 015a 8295      		swap r24
 473 015c 8F70      		andi r24,0x0f
 474 015e 9E01      		movw r18,r28
 475 0160 2F5F      		subi r18,-1
 476 0162 3F4F      		sbci r19,-1
 477 0164 820F      		add r24,r18
 478 0166 931F      		adc r25,r19
 479 0168 FC01      		movw r30,r24
 480 016a 8081      		ld r24,Z
 481 016c 0E94 0000 		call USART_Write
 102:main.c        **** 	USART_Write(hex[(i&0xF00) >> 8]);
 483               	.LM27:
 484 0170 8989      		ldd r24,Y+17
 485 0172 9A89      		ldd r25,Y+18
 486 0174 8827      		clr r24
 487 0176 9F70      		andi r25,15
 488 0178 892F      		mov r24,r25
 489 017a 990F      		lsl r25
 490 017c 990B      		sbc r25,r25
 491 017e 9E01      		movw r18,r28
 492 0180 2F5F      		subi r18,-1
 493 0182 3F4F      		sbci r19,-1
 494 0184 820F      		add r24,r18
 495 0186 931F      		adc r25,r19
 496 0188 FC01      		movw r30,r24
 497 018a 8081      		ld r24,Z
 498 018c 0E94 0000 		call USART_Write
 103:main.c        **** 	USART_Write(hex[(i&0xF0) >> 4]);
 500               	.LM28:
 501 0190 8989      		ldd r24,Y+17
 502 0192 9A89      		ldd r25,Y+18
 503 0194 807F      		andi r24,240
 504 0196 9927      		clr r25
 505 0198 9595      		asr r25
 506 019a 8795      		ror r24
 507 019c 9595      		asr r25
 508 019e 8795      		ror r24
 509 01a0 9595      		asr r25
 510 01a2 8795      		ror r24
 511 01a4 9595      		asr r25
 512 01a6 8795      		ror r24
 513 01a8 9E01      		movw r18,r28
 514 01aa 2F5F      		subi r18,-1
 515 01ac 3F4F      		sbci r19,-1
 516 01ae 820F      		add r24,r18
 517 01b0 931F      		adc r25,r19
 518 01b2 FC01      		movw r30,r24
 519 01b4 8081      		ld r24,Z
 520 01b6 0E94 0000 		call USART_Write
 104:main.c        **** 	USART_Write(hex[i&0xF]);
 522               	.LM29:
 523 01ba 8989      		ldd r24,Y+17
 524 01bc 9A89      		ldd r25,Y+18
 525 01be 8F70      		andi r24,15
 526 01c0 9927      		clr r25
 527 01c2 9E01      		movw r18,r28
 528 01c4 2F5F      		subi r18,-1
 529 01c6 3F4F      		sbci r19,-1
 530 01c8 820F      		add r24,r18
 531 01ca 931F      		adc r25,r19
 532 01cc FC01      		movw r30,r24
 533 01ce 8081      		ld r24,Z
 534 01d0 0E94 0000 		call USART_Write
 535               	/* epilogue start */
 105:main.c        **** 
 106:main.c        **** }
 537               	.LM30:
 538 01d4 6296      		adiw r28,18
 539 01d6 0FB6      		in __tmp_reg__,__SREG__
 540 01d8 F894      		cli
 541 01da DEBF      		out __SP_H__,r29
 542 01dc 0FBE      		out __SREG__,__tmp_reg__
 543 01de CDBF      		out __SP_L__,r28
 544 01e0 DF91      		pop r29
 545 01e2 CF91      		pop r28
 546 01e4 0895      		ret
 551               	.Lscope4:
 553               		.stabd	78,0,0
 556               	.global	printNum
 558               	printNum:
 559               		.stabd	46,0,0
 107:main.c        **** 
 108:main.c        **** void printNum(unsigned int i){
 561               	.LM31:
 562               	.LFBB5:
 563 01e6 CF93      		push r28
 564 01e8 DF93      		push r29
 565 01ea 1F92      		push __zero_reg__
 566 01ec 1F92      		push __zero_reg__
 567 01ee CDB7      		in r28,__SP_L__
 568 01f0 DEB7      		in r29,__SP_H__
 569               	/* prologue: function */
 570               	/* frame size = 2 */
 571               	/* stack size = 4 */
 572               	.L__stack_usage = 4
 573 01f2 9A83      		std Y+2,r25
 574 01f4 8983      		std Y+1,r24
 109:main.c        ****     
 110:main.c        **** 	USART_Write(i / 10000 + '0');
 576               	.LM32:
 577 01f6 8981      		ldd r24,Y+1
 578 01f8 9A81      		ldd r25,Y+2
 579 01fa 9295      		swap r25
 580 01fc 8295      		swap r24
 581 01fe 8F70      		andi r24,0x0f
 582 0200 8927      		eor r24,r25
 583 0202 9F70      		andi r25,0x0f
 584 0204 8927      		eor r24,r25
 585 0206 9C01      		movw r18,r24
 586 0208 A7E4      		ldi r26,lo8(71)
 587 020a B3E0      		ldi r27,lo8(3)
 588 020c 0E94 0000 		call __umulhisi3
 589 0210 9695      		lsr r25
 590 0212 8795      		ror r24
 591 0214 9695      		lsr r25
 592 0216 8795      		ror r24
 593 0218 9695      		lsr r25
 594 021a 8795      		ror r24
 595 021c 805D      		subi r24,lo8(-(48))
 596 021e 0E94 0000 		call USART_Write
 111:main.c        **** 	USART_Write((i % 10000) / 1000 + '0');
 598               	.LM33:
 599 0222 4981      		ldd r20,Y+1
 600 0224 5A81      		ldd r21,Y+2
 601 0226 CA01      		movw r24,r20
 602 0228 9295      		swap r25
 603 022a 8295      		swap r24
 604 022c 8F70      		andi r24,0x0f
 605 022e 8927      		eor r24,r25
 606 0230 9F70      		andi r25,0x0f
 607 0232 8927      		eor r24,r25
 608 0234 9C01      		movw r18,r24
 609 0236 A7E4      		ldi r26,lo8(71)
 610 0238 B3E0      		ldi r27,lo8(3)
 611 023a 0E94 0000 		call __umulhisi3
 612 023e 9695      		lsr r25
 613 0240 8795      		ror r24
 614 0242 9695      		lsr r25
 615 0244 8795      		ror r24
 616 0246 9695      		lsr r25
 617 0248 8795      		ror r24
 618 024a 60E1      		ldi r22,lo8(16)
 619 024c 77E2      		ldi r23,lo8(39)
 620 024e 869F      		mul r24,r22
 621 0250 9001      		movw r18,r0
 622 0252 879F      		mul r24,r23
 623 0254 300D      		add r19,r0
 624 0256 969F      		mul r25,r22
 625 0258 300D      		add r19,r0
 626 025a 1124      		clr r1
 627 025c CA01      		movw r24,r20
 628 025e 821B      		sub r24,r18
 629 0260 930B      		sbc r25,r19
 630 0262 9695      		lsr r25
 631 0264 8795      		ror r24
 632 0266 9695      		lsr r25
 633 0268 8795      		ror r24
 634 026a 9695      		lsr r25
 635 026c 8795      		ror r24
 636 026e 9C01      		movw r18,r24
 637 0270 A5EC      		ldi r26,lo8(-59)
 638 0272 B0E2      		ldi r27,lo8(32)
 639 0274 0E94 0000 		call __umulhisi3
 640 0278 9295      		swap r25
 641 027a 8295      		swap r24
 642 027c 8F70      		andi r24,0x0f
 643 027e 8927      		eor r24,r25
 644 0280 9F70      		andi r25,0x0f
 645 0282 8927      		eor r24,r25
 646 0284 805D      		subi r24,lo8(-(48))
 647 0286 0E94 0000 		call USART_Write
 112:main.c        **** 	USART_Write((i % 1000) / 100 + '0');
 649               	.LM34:
 650 028a 4981      		ldd r20,Y+1
 651 028c 5A81      		ldd r21,Y+2
 652 028e CA01      		movw r24,r20
 653 0290 9695      		lsr r25
 654 0292 8795      		ror r24
 655 0294 9695      		lsr r25
 656 0296 8795      		ror r24
 657 0298 9695      		lsr r25
 658 029a 8795      		ror r24
 659 029c 9C01      		movw r18,r24
 660 029e A5EC      		ldi r26,lo8(-59)
 661 02a0 B0E2      		ldi r27,lo8(32)
 662 02a2 0E94 0000 		call __umulhisi3
 663 02a6 9295      		swap r25
 664 02a8 8295      		swap r24
 665 02aa 8F70      		andi r24,0x0f
 666 02ac 8927      		eor r24,r25
 667 02ae 9F70      		andi r25,0x0f
 668 02b0 8927      		eor r24,r25
 669 02b2 68EE      		ldi r22,lo8(-24)
 670 02b4 73E0      		ldi r23,lo8(3)
 671 02b6 869F      		mul r24,r22
 672 02b8 9001      		movw r18,r0
 673 02ba 879F      		mul r24,r23
 674 02bc 300D      		add r19,r0
 675 02be 969F      		mul r25,r22
 676 02c0 300D      		add r19,r0
 677 02c2 1124      		clr r1
 678 02c4 CA01      		movw r24,r20
 679 02c6 821B      		sub r24,r18
 680 02c8 930B      		sbc r25,r19
 681 02ca 9695      		lsr r25
 682 02cc 8795      		ror r24
 683 02ce 9695      		lsr r25
 684 02d0 8795      		ror r24
 685 02d2 9C01      		movw r18,r24
 686 02d4 ABE7      		ldi r26,lo8(123)
 687 02d6 B4E1      		ldi r27,lo8(20)
 688 02d8 0E94 0000 		call __umulhisi3
 689 02dc 9695      		lsr r25
 690 02de 8795      		ror r24
 691 02e0 805D      		subi r24,lo8(-(48))
 692 02e2 0E94 0000 		call USART_Write
 113:main.c        **** 	USART_Write((i % 100) / 10 + '0');
 694               	.LM35:
 695 02e6 4981      		ldd r20,Y+1
 696 02e8 5A81      		ldd r21,Y+2
 697 02ea CA01      		movw r24,r20
 698 02ec 9695      		lsr r25
 699 02ee 8795      		ror r24
 700 02f0 9695      		lsr r25
 701 02f2 8795      		ror r24
 702 02f4 9C01      		movw r18,r24
 703 02f6 ABE7      		ldi r26,lo8(123)
 704 02f8 B4E1      		ldi r27,lo8(20)
 705 02fa 0E94 0000 		call __umulhisi3
 706 02fe 9695      		lsr r25
 707 0300 8795      		ror r24
 708 0302 64E6      		ldi r22,lo8(100)
 709 0304 689F      		mul r22,r24
 710 0306 9001      		movw r18,r0
 711 0308 699F      		mul r22,r25
 712 030a 300D      		add r19,r0
 713 030c 1124      		clr __zero_reg__
 714 030e CA01      		movw r24,r20
 715 0310 821B      		sub r24,r18
 716 0312 930B      		sbc r25,r19
 717 0314 9C01      		movw r18,r24
 718 0316 ADEC      		ldi r26,lo8(-51)
 719 0318 BCEC      		ldi r27,lo8(-52)
 720 031a 0E94 0000 		call __umulhisi3
 721 031e 9695      		lsr r25
 722 0320 8795      		ror r24
 723 0322 9695      		lsr r25
 724 0324 8795      		ror r24
 725 0326 9695      		lsr r25
 726 0328 8795      		ror r24
 727 032a 805D      		subi r24,lo8(-(48))
 728 032c 0E94 0000 		call USART_Write
 114:main.c        ****    USART_Write((i % 10) + '0');
 730               	.LM36:
 731 0330 4981      		ldd r20,Y+1
 732 0332 5A81      		ldd r21,Y+2
 733 0334 9A01      		movw r18,r20
 734 0336 ADEC      		ldi r26,lo8(-51)
 735 0338 BCEC      		ldi r27,lo8(-52)
 736 033a 0E94 0000 		call __umulhisi3
 737 033e 9695      		lsr r25
 738 0340 8795      		ror r24
 739 0342 9695      		lsr r25
 740 0344 8795      		ror r24
 741 0346 9695      		lsr r25
 742 0348 8795      		ror r24
 743 034a 880F      		lsl r24
 744 034c 991F      		rol r25
 745 034e 9C01      		movw r18,r24
 746 0350 220F      		lsl r18
 747 0352 331F      		rol r19
 748 0354 220F      		lsl r18
 749 0356 331F      		rol r19
 750 0358 820F      		add r24,r18
 751 035a 931F      		adc r25,r19
 752 035c 9A01      		movw r18,r20
 753 035e 281B      		sub r18,r24
 754 0360 390B      		sbc r19,r25
 755 0362 C901      		movw r24,r18
 756 0364 805D      		subi r24,lo8(-(48))
 757 0366 0E94 0000 		call USART_Write
 758               	/* epilogue start */
 115:main.c        **** }
 760               	.LM37:
 761 036a 0F90      		pop __tmp_reg__
 762 036c 0F90      		pop __tmp_reg__
 763 036e DF91      		pop r29
 764 0370 CF91      		pop r28
 765 0372 0895      		ret
 767               	.Lscope5:
 769               		.stabd	78,0,0
 776               	.global	potValue
 778               	potValue:
 779               		.stabd	46,0,0
 116:main.c        **** 
 117:main.c        **** int potValue(int sonarMax,int sonarMin,int potMax,int potMin,int x){
 781               	.LM38:
 782               	.LFBB6:
 783 0374 0F93      		push r16
 784 0376 1F93      		push r17
 785 0378 CF93      		push r28
 786 037a DF93      		push r29
 787 037c CDB7      		in r28,__SP_L__
 788 037e DEB7      		in r29,__SP_H__
 789 0380 2C97      		sbiw r28,12
 790 0382 0FB6      		in __tmp_reg__,__SREG__
 791 0384 F894      		cli
 792 0386 DEBF      		out __SP_H__,r29
 793 0388 0FBE      		out __SREG__,__tmp_reg__
 794 038a CDBF      		out __SP_L__,r28
 795               	/* prologue: function */
 796               	/* frame size = 12 */
 797               	/* stack size = 16 */
 798               	.L__stack_usage = 16
 799 038c 9C83      		std Y+4,r25
 800 038e 8B83      		std Y+3,r24
 801 0390 7E83      		std Y+6,r23
 802 0392 6D83      		std Y+5,r22
 803 0394 5887      		std Y+8,r21
 804 0396 4F83      		std Y+7,r20
 805 0398 3A87      		std Y+10,r19
 806 039a 2987      		std Y+9,r18
 807 039c 1C87      		std Y+12,r17
 808 039e 0B87      		std Y+11,r16
 118:main.c        **** 	int value;	
 119:main.c        **** 	if(x < sonarMin){
 810               	.LM39:
 811 03a0 2B85      		ldd r18,Y+11
 812 03a2 3C85      		ldd r19,Y+12
 813 03a4 8D81      		ldd r24,Y+5
 814 03a6 9E81      		ldd r25,Y+6
 815 03a8 2817      		cp r18,r24
 816 03aa 3907      		cpc r19,r25
 817 03ac 04F4      		brge .L9
 120:main.c        **** 		return potMin;
 819               	.LM40:
 820 03ae 8985      		ldd r24,Y+9
 821 03b0 9A85      		ldd r25,Y+10
 822 03b2 00C0      		rjmp .L10
 823               	.L9:
 121:main.c        **** 	} else if (x > sonarMax){
 825               	.LM41:
 826 03b4 2B85      		ldd r18,Y+11
 827 03b6 3C85      		ldd r19,Y+12
 828 03b8 8B81      		ldd r24,Y+3
 829 03ba 9C81      		ldd r25,Y+4
 830 03bc 8217      		cp r24,r18
 831 03be 9307      		cpc r25,r19
 832 03c0 04F4      		brge .L11
 122:main.c        **** 		return potMax;
 834               	.LM42:
 835 03c2 8F81      		ldd r24,Y+7
 836 03c4 9885      		ldd r25,Y+8
 837 03c6 00C0      		rjmp .L10
 838               	.L11:
 123:main.c        **** 	} else {
 124:main.c        **** 		value = x / 4 - 140;
 840               	.LM43:
 841 03c8 8B85      		ldd r24,Y+11
 842 03ca 9C85      		ldd r25,Y+12
 843 03cc 9923      		tst r25
 844 03ce 04F4      		brge .L12
 845 03d0 0396      		adiw r24,3
 846               	.L12:
 847 03d2 9595      		asr r25
 848 03d4 8795      		ror r24
 849 03d6 9595      		asr r25
 850 03d8 8795      		ror r24
 851 03da 8C58      		subi r24,-116
 852 03dc 9109      		sbc r25,__zero_reg__
 853 03de 9A83      		std Y+2,r25
 854 03e0 8983      		std Y+1,r24
 125:main.c        **** 		return value > potMax?potMax:value < potMin?potMin:value;
 856               	.LM44:
 857 03e2 2981      		ldd r18,Y+1
 858 03e4 3A81      		ldd r19,Y+2
 859 03e6 8F81      		ldd r24,Y+7
 860 03e8 9885      		ldd r25,Y+8
 861 03ea 8217      		cp r24,r18
 862 03ec 9307      		cpc r25,r19
 863 03ee 04F0      		brlt .L13
 865               	.LM45:
 866 03f0 2985      		ldd r18,Y+9
 867 03f2 3A85      		ldd r19,Y+10
 868 03f4 8981      		ldd r24,Y+1
 869 03f6 9A81      		ldd r25,Y+2
 870 03f8 8217      		cp r24,r18
 871 03fa 9307      		cpc r25,r19
 872 03fc 04F4      		brge .L15
 873 03fe C901      		movw r24,r18
 874 0400 00C0      		rjmp .L16
 875               	.L13:
 877               	.LM46:
 878 0402 8F81      		ldd r24,Y+7
 879 0404 9885      		ldd r25,Y+8
 880 0406 00C0      		rjmp .L16
 881               	.L15:
 882               	.L16:
 884               	.LM47:
 885 0408 0000      		nop
 886               	.L10:
 887               	/* epilogue start */
 126:main.c        **** 	}
 127:main.c        **** } 
 889               	.LM48:
 890 040a 2C96      		adiw r28,12
 891 040c 0FB6      		in __tmp_reg__,__SREG__
 892 040e F894      		cli
 893 0410 DEBF      		out __SP_H__,r29
 894 0412 0FBE      		out __SREG__,__tmp_reg__
 895 0414 CDBF      		out __SP_L__,r28
 896 0416 DF91      		pop r29
 897 0418 CF91      		pop r28
 898 041a 1F91      		pop r17
 899 041c 0F91      		pop r16
 900 041e 0895      		ret
 905               	.Lscope6:
 907               		.stabd	78,0,0
 909               	.global	vTaskFunction_1
 911               	vTaskFunction_1:
 912               		.stabd	46,0,0
 128:main.c        **** 
 129:main.c        **** void vTaskFunction_1()
 130:main.c        **** {	
 914               	.LM49:
 915               	.LFBB7:
 916 0420 CF93      		push r28
 917 0422 DF93      		push r29
 918 0424 CDB7      		in r28,__SP_L__
 919 0426 DEB7      		in r29,__SP_H__
 920 0428 6297      		sbiw r28,18
 921 042a 0FB6      		in __tmp_reg__,__SREG__
 922 042c F894      		cli
 923 042e DEBF      		out __SP_H__,r29
 924 0430 0FBE      		out __SREG__,__tmp_reg__
 925 0432 CDBF      		out __SP_L__,r28
 926               	/* prologue: function */
 927               	/* frame size = 18 */
 928               	/* stack size = 20 */
 929               	.L__stack_usage = 20
 131:main.c        **** 	int sonarResult;
 132:main.c        **** 	int movingForward = 1;
 931               	.LM50:
 932 0434 81E0      		ldi r24,lo8(1)
 933 0436 90E0      		ldi r25,0
 934 0438 9A83      		std Y+2,r25
 935 043a 8983      		std Y+1,r24
 133:main.c        **** 
 134:main.c        **** 	int sonarMax = 0x31C;
 937               	.LM51:
 938 043c 8CE1      		ldi r24,lo8(28)
 939 043e 93E0      		ldi r25,lo8(3)
 940 0440 9C83      		std Y+4,r25
 941 0442 8B83      		std Y+3,r24
 135:main.c        **** 	int sonarMin = 0xE0;
 943               	.LM52:
 944 0444 80EE      		ldi r24,lo8(-32)
 945 0446 90E0      		ldi r25,0
 946 0448 9E83      		std Y+6,r25
 947 044a 8D83      		std Y+5,r24
 136:main.c        **** 	int potMin = 0x18;
 949               	.LM53:
 950 044c 88E1      		ldi r24,lo8(24)
 951 044e 90E0      		ldi r25,0
 952 0450 9887      		std Y+8,r25
 953 0452 8F83      		std Y+7,r24
 137:main.c        **** 	int potMax = 0x40;;
 955               	.LM54:
 956 0454 80E4      		ldi r24,lo8(64)
 957 0456 90E0      		ldi r25,0
 958 0458 9A87      		std Y+10,r25
 959 045a 8987      		std Y+9,r24
 138:main.c        **** 	int backwardSwitch = 0x100;
 961               	.LM55:
 962 045c 80E0      		ldi r24,0
 963 045e 91E0      		ldi r25,lo8(1)
 964 0460 9C87      		std Y+12,r25
 965 0462 8B87      		std Y+11,r24
 139:main.c        **** 	int neutralSwitch = 0x140;
 967               	.LM56:
 968 0464 80E4      		ldi r24,lo8(64)
 969 0466 91E0      		ldi r25,lo8(1)
 970 0468 9E87      		std Y+14,r25
 971 046a 8D87      		std Y+13,r24
 140:main.c        **** 	int forwardSwitch = 0x160;
 973               	.LM57:
 974 046c 80E6      		ldi r24,lo8(96)
 975 046e 91E0      		ldi r25,lo8(1)
 976 0470 988B      		std Y+16,r25
 977 0472 8F87      		std Y+15,r24
 141:main.c        **** 	int minTicks = 450;
 979               	.LM58:
 980 0474 82EC      		ldi r24,lo8(-62)
 981 0476 91E0      		ldi r25,lo8(1)
 982 0478 9A8B      		std Y+18,r25
 983 047a 898B      		std Y+17,r24
 142:main.c        **** 
 143:main.c        **** 	int tickCount;
 144:main.c        **** 
 145:main.c        **** 	PORTA = 0;
 985               	.LM59:
 986 047c 82E2      		ldi r24,lo8(34)
 987 047e 90E0      		ldi r25,0
 988 0480 FC01      		movw r30,r24
 989 0482 1082      		st Z,__zero_reg__
 146:main.c        **** 
 147:main.c        ****    USART_Init();
 991               	.LM60:
 992 0484 0E94 0000 		call USART_Init
 148:main.c        **** 
 149:main.c        **** 	initializeSteeringTimer();
 994               	.LM61:
 995 0488 0E94 0000 		call initializeSteeringTimer
 150:main.c        **** 
 151:main.c        **** 	initializeSPI();
 997               	.LM62:
 998 048c 0E94 0000 		call initializeSPI
 152:main.c        **** 	initSpeedController();
 1000               	.LM63:
 1001 0490 0E94 0000 		call initSpeedController
 153:main.c        ****    initializeBattery();
 1003               	.LM64:
 1004 0494 0E94 0000 		call initializeBattery
 154:main.c        ****    initializeSonarSensors();
 1006               	.LM65:
 1007 0498 0E94 0000 		call initializeSonarSensors
 1008               	.L18:
 155:main.c        **** 	
 156:main.c        ****    for(;;) {
 157:main.c        ****       PORTA ^= 0x80;
 1010               	.LM66:
 1011 049c 82E2      		ldi r24,lo8(34)
 1012 049e 90E0      		ldi r25,0
 1013 04a0 22E2      		ldi r18,lo8(34)
 1014 04a2 30E0      		ldi r19,0
 1015 04a4 F901      		movw r30,r18
 1016 04a6 3081      		ld r19,Z
 1017 04a8 20E8      		ldi r18,lo8(-128)
 1018 04aa 2327      		eor r18,r19
 1019 04ac FC01      		movw r30,r24
 1020 04ae 2083      		st Z,r18
 158:main.c        ****       vTaskDelay(300);
 1022               	.LM67:
 1023 04b0 8CE2      		ldi r24,lo8(44)
 1024 04b2 91E0      		ldi r25,lo8(1)
 1025 04b4 0E94 0000 		call vTaskDelay
 159:main.c        ****    }
 1027               	.LM68:
 1028 04b8 00C0      		rjmp .L18
 1041               	.Lscope7:
 1043               		.stabd	78,0,0
 1045               	.global	vTaskFunction_2
 1047               	vTaskFunction_2:
 1048               		.stabd	46,0,0
 160:main.c        **** 	
 161:main.c        **** 	for(;;){
 162:main.c        **** 		int sonarData = getSonarData(0);
 163:main.c        **** 		if(sonarData > 0x300){
 164:main.c        **** 			setSteeringDirection(1);
 165:main.c        **** 			USART_Write('F');
 166:main.c        **** 		} else if(sonarData < 0x50){
 167:main.c        **** 			setSteeringDirection(-1);
 168:main.c        **** 			USART_Write('R');
 169:main.c        **** 		} else {
 170:main.c        **** 			setSteeringDirection(0);
 171:main.c        **** 			USART_Write('N');
 172:main.c        **** 		}
 173:main.c        **** 		vTaskDelay(10);	
 174:main.c        **** 	}
 175:main.c        **** 	
 176:main.c        **** 	//PORTC = 0x2;
 177:main.c        **** 	setFNR(1);
 178:main.c        **** 	
 179:main.c        **** 	for(;;){
 180:main.c        **** 
 181:main.c        **** 		//sonarResult = getSonarResult();
 182:main.c        **** 		if(movingForward == 1){
 183:main.c        **** 			if(sonarResult < backwardSwitch) {
 184:main.c        **** 				movingForward = -1;
 185:main.c        **** 				setFNR(-1);
 186:main.c        **** 				tickCount = 0;
 187:main.c        **** 			} else if(sonarResult < neutralSwitch){
 188:main.c        **** 				setFNR(0);
 189:main.c        **** 				movingForward = 0;
 190:main.c        **** 				tickCount = 0;
 191:main.c        **** 			}
 192:main.c        **** 			setPot(potValue(sonarMax,sonarMin,potMax,potMin,sonarResult));
 193:main.c        **** 		} else if(movingForward == 0){
 194:main.c        **** 			if(sonarResult < backwardSwitch){
 195:main.c        **** 				movingForward = -1;
 196:main.c        **** 				setFNR(-1);
 197:main.c        **** 				tickCount = 0;
 198:main.c        **** 			} if(tickCount > minTicks){
 199:main.c        **** 				movingForward = 1;
 200:main.c        **** 				setFNR(1);
 201:main.c        **** 			}	
 202:main.c        **** 		} else {
 203:main.c        **** 			if(sonarResult > forwardSwitch && tickCount > minTicks){
 204:main.c        **** 				movingForward = 1;
 205:main.c        **** 				setFNR(0);
 206:main.c        **** 				vTaskDelay(100);
 207:main.c        **** 				setFNR(1);
 208:main.c        **** 			}
 209:main.c        **** 			setPot(potValue(sonarMax,sonarMin,potMax,potMin,sonarResult));
 210:main.c        **** 		}
 211:main.c        **** 		/*printHex(potValue(sonarMax,sonarMin,potMax,potMin,sonarResult));
 212:main.c        **** 		USART_Write('\n');
 213:main.c        **** 		USART_Write('\r');*/
 214:main.c        **** 		vTaskDelay(1);
 215:main.c        **** 		tickCount++;
 216:main.c        **** 	}
 217:main.c        **** 
 218:main.c        **** 	for(;;){
 219:main.c        **** 		PORTL = 0x10;
 220:main.c        **** 		vTaskDelay(200);
 221:main.c        **** 		PORTL = 0x20;
 222:main.c        **** 		vTaskDelay(200);
 223:main.c        **** 		PORTL = 0x40;
 224:main.c        **** 		vTaskDelay(200);
 225:main.c        **** 		PORTL = 0x80;
 226:main.c        **** 		vTaskDelay(200);
 227:main.c        **** 	}
 228:main.c        **** }
 229:main.c        **** 
 230:main.c        **** void vTaskFunction_2(){
 1050               	.LM69:
 1051               	.LFBB8:
 1052 04ba CF93      		push r28
 1053 04bc DF93      		push r29
 1054 04be CDB7      		in r28,__SP_L__
 1055 04c0 DEB7      		in r29,__SP_H__
 1056               	/* prologue: function */
 1057               	/* frame size = 0 */
 1058               	/* stack size = 2 */
 1059               	.L__stack_usage = 2
 231:main.c        **** 	DDRL = 0xF0;
 1061               	.LM70:
 1062 04c2 8AE0      		ldi r24,lo8(10)
 1063 04c4 91E0      		ldi r25,lo8(1)
 1064 04c6 20EF      		ldi r18,lo8(-16)
 1065 04c8 FC01      		movw r30,r24
 1066 04ca 2083      		st Z,r18
 232:main.c        **** 	PORTL = 0xC0;
 1068               	.LM71:
 1069 04cc 8BE0      		ldi r24,lo8(11)
 1070 04ce 91E0      		ldi r25,lo8(1)
 1071 04d0 20EC      		ldi r18,lo8(-64)
 1072 04d2 FC01      		movw r30,r24
 1073 04d4 2083      		st Z,r18
 1074               	.L20:
 233:main.c        **** 	for(;;){
 234:main.c        **** 		vTaskDelay(300);
 1076               	.LM72:
 1077 04d6 8CE2      		ldi r24,lo8(44)
 1078 04d8 91E0      		ldi r25,lo8(1)
 1079 04da 0E94 0000 		call vTaskDelay
 235:main.c        **** 	}	
 1081               	.LM73:
 1082 04de 00C0      		rjmp .L20
 1084               	.Lscope8:
 1086               		.stabd	78,0,0
 1088               	.global	vTaskPot
 1090               	vTaskPot:
 1091               		.stabd	46,0,0
 236:main.c        **** }
 237:main.c        **** 
 238:main.c        **** void vTaskPot(){
 1093               	.LM74:
 1094               	.LFBB9:
 1095 04e0 CF93      		push r28
 1096 04e2 DF93      		push r29
 1097 04e4 CDB7      		in r28,__SP_L__
 1098 04e6 DEB7      		in r29,__SP_H__
 1099               	/* prologue: function */
 1100               	/* frame size = 0 */
 1101               	/* stack size = 2 */
 1102               	.L__stack_usage = 2
 239:main.c        ****    initSpeedController();
 1104               	.LM75:
 1105 04e8 0E94 0000 		call initSpeedController
 1106               	.L22:
 240:main.c        **** 
 241:main.c        **** 	for(;;){
 242:main.c        **** 		setPot(1);
 1108               	.LM76:
 1109 04ec 81E0      		ldi r24,lo8(1)
 1110 04ee 90E0      		ldi r25,0
 1111 04f0 0E94 0000 		call setPot
 243:main.c        **** 		vTaskDelay(500);
 1113               	.LM77:
 1114 04f4 84EF      		ldi r24,lo8(-12)
 1115 04f6 91E0      		ldi r25,lo8(1)
 1116 04f8 0E94 0000 		call vTaskDelay
 244:main.c        **** 		setPot(0x40);
 1118               	.LM78:
 1119 04fc 80E4      		ldi r24,lo8(64)
 1120 04fe 90E0      		ldi r25,0
 1121 0500 0E94 0000 		call setPot
 245:main.c        **** 		vTaskDelay(500);
 1123               	.LM79:
 1124 0504 84EF      		ldi r24,lo8(-12)
 1125 0506 91E0      		ldi r25,lo8(1)
 1126 0508 0E94 0000 		call vTaskDelay
 246:main.c        **** 		setPot(0x7F);
 1128               	.LM80:
 1129 050c 8FE7      		ldi r24,lo8(127)
 1130 050e 90E0      		ldi r25,0
 1131 0510 0E94 0000 		call setPot
 247:main.c        **** 		vTaskDelay(500);
 1133               	.LM81:
 1134 0514 84EF      		ldi r24,lo8(-12)
 1135 0516 91E0      		ldi r25,lo8(1)
 1136 0518 0E94 0000 		call vTaskDelay
 248:main.c        **** 		setPot(0x40);
 1138               	.LM82:
 1139 051c 80E4      		ldi r24,lo8(64)
 1140 051e 90E0      		ldi r25,0
 1141 0520 0E94 0000 		call setPot
 249:main.c        **** 		vTaskDelay(500);
 1143               	.LM83:
 1144 0524 84EF      		ldi r24,lo8(-12)
 1145 0526 91E0      		ldi r25,lo8(1)
 1146 0528 0E94 0000 		call vTaskDelay
 250:main.c        **** 	}
 1148               	.LM84:
 1149 052c 00C0      		rjmp .L22
 1151               	.Lscope9:
 1153               		.stabd	78,0,0
 1155               	.global	vIO_init
 1157               	vIO_init:
 1158               		.stabd	46,0,0
 251:main.c        **** }
 252:main.c        **** 
 253:main.c        **** 
 254:main.c        **** void vIO_init(void)
 255:main.c        **** {
 1160               	.LM85:
 1161               	.LFBB10:
 1162 052e CF93      		push r28
 1163 0530 DF93      		push r29
 1164 0532 CDB7      		in r28,__SP_L__
 1165 0534 DEB7      		in r29,__SP_H__
 1166               	/* prologue: function */
 1167               	/* frame size = 0 */
 1168               	/* stack size = 2 */
 1169               	.L__stack_usage = 2
 256:main.c        ****     //- set PortB as output
 257:main.c        ****    DDRB = 0xFF; 
 1171               	.LM86:
 1172 0536 84E2      		ldi r24,lo8(36)
 1173 0538 90E0      		ldi r25,0
 1174 053a 2FEF      		ldi r18,lo8(-1)
 1175 053c FC01      		movw r30,r24
 1176 053e 2083      		st Z,r18
 258:main.c        ****    PORTB = 0; 
 1178               	.LM87:
 1179 0540 85E2      		ldi r24,lo8(37)
 1180 0542 90E0      		ldi r25,0
 1181 0544 FC01      		movw r30,r24
 1182 0546 1082      		st Z,__zero_reg__
 1183               	/* epilogue start */
 259:main.c        **** }
 1185               	.LM88:
 1186 0548 DF91      		pop r29
 1187 054a CF91      		pop r28
 1188 054c 0895      		ret
 1190               	.Lscope10:
 1192               		.stabd	78,0,0
 1196               	.Letext0:
 1197               		.ident	"GCC: (GNU) 4.9.0"
 1198               	.global __do_copy_data
 1199               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccO5mX3S.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccO5mX3S.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccO5mX3S.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccO5mX3S.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccO5mX3S.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccO5mX3S.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccO5mX3S.s:166    .bss:0000000000000000 RTOScount
                            *COM*:0000000000000002 sonarTime
     /tmp/ccO5mX3S.s:173    .text:0000000000000000 vApplicationTickHook
     /tmp/ccO5mX3S.s:206    .text:0000000000000020 vApplicationStackOverflowHook
     /tmp/ccO5mX3S.s:243    .text:0000000000000030 main
     /tmp/ccO5mX3S.s:1157   .text:000000000000052e vIO_init
     /tmp/ccO5mX3S.s:911    .text:0000000000000420 vTaskFunction_1
     /tmp/ccO5mX3S.s:432    .text:0000000000000126 printHex
     /tmp/ccO5mX3S.s:558    .text:00000000000001e6 printNum
     /tmp/ccO5mX3S.s:778    .text:0000000000000374 potValue
     /tmp/ccO5mX3S.s:1047   .text:00000000000004ba vTaskFunction_2
     /tmp/ccO5mX3S.s:1090   .text:00000000000004e0 vTaskPot

UNDEFINED SYMBOLS
xTaskGenericCreate
vTaskSteer
vTaskADC
vTaskStartScheduler
USART_Write
__umulhisi3
USART_Init
initializeSteeringTimer
initializeSPI
initSpeedController
initializeBattery
initializeSonarSensors
vTaskDelay
setPot
__do_copy_data
__do_clear_bss
