   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 159               	.global	count
 160               		.section .bss
 163               	count:
 164 0000 0000      		.zero	2
 165               		.comm	sonarTime,2,1
 166               		.text
 168               	.global	vApplicationTickHook
 170               	vApplicationTickHook:
 171               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        ****  FreeRTOS V6.1.0
   3:main.c        ****  
   4:main.c        ****  This is a basic RTOS program. It turns on the LEDs.
   5:main.c        ****  Nothing too exciting.
   6:main.c        ****  
   7:main.c        ****  */
   8:main.c        **** 
   9:main.c        **** #include <stdint.h>
  10:main.c        **** #include <avr/io.h>
  11:main.c        **** #include <string.h>
  12:main.c        **** #include <stdlib.h>
  13:main.c        **** #include <stdio.h>
  14:main.c        **** #include <math.h>
  15:main.c        **** #include "FreeRTOS.h"
  16:main.c        **** #include <avr/io.h>
  17:main.c        **** #include <avr/interrupt.h>
  18:main.c        **** #include "task.h"
  19:main.c        **** #include "usart.h"
  20:main.c        **** #include "Components/Sonar/Sonar.h"
  21:main.c        **** #include "queue.h"
  22:main.c        **** 
  23:main.c        **** void vTaskFunction_1(void *pvParameters);
  24:main.c        **** void vIO_init(void);
  25:main.c        **** void vApplicationTickHook();
  26:main.c        **** void printNum(unsigned char i);
  27:main.c        **** void printHex(int i);
  28:main.c        **** 
  29:main.c        **** int count = 0;
  30:main.c        **** 
  31:main.c        **** int sonarTime;
  32:main.c        **** 
  33:main.c        **** void vApplicationTickHook()
  34:main.c        **** {
 173               	.LM0:
 174               	.LFBB1:
 175 0000 CF93      		push r28
 176 0002 DF93      		push r29
 177 0004 CDB7      		in r28,__SP_L__
 178 0006 DEB7      		in r29,__SP_H__
 179               	/* prologue: function */
 180               	/* frame size = 0 */
 181               	/* stack size = 2 */
 182               	.L__stack_usage = 2
  35:main.c        ****     count++;
 184               	.LM1:
 185 0008 8091 0000 		lds r24,count
 186 000c 9091 0000 		lds r25,count+1
 187 0010 0196      		adiw r24,1
 188 0012 9093 0000 		sts count+1,r25
 189 0016 8093 0000 		sts count,r24
 190               	/* epilogue start */
  36:main.c        **** }
 192               	.LM2:
 193 001a DF91      		pop r29
 194 001c CF91      		pop r28
 195 001e 0895      		ret
 197               	.Lscope1:
 199               		.stabd	78,0,0
 201               	.global	vApplicationStackOverflowHook
 203               	vApplicationStackOverflowHook:
 204               		.stabd	46,0,0
  37:main.c        **** 
  38:main.c        **** void vApplicationStackOverflowHook(){
 206               	.LM3:
 207               	.LFBB2:
 208 0020 CF93      		push r28
 209 0022 DF93      		push r29
 210 0024 CDB7      		in r28,__SP_L__
 211 0026 DEB7      		in r29,__SP_H__
 212               	/* prologue: function */
 213               	/* frame size = 0 */
 214               	/* stack size = 2 */
 215               	.L__stack_usage = 2
  39:main.c        **** 	return;
 217               	.LM4:
 218 0028 0000      		nop
 219               	/* epilogue start */
  40:main.c        **** }
 221               	.LM5:
 222 002a DF91      		pop r29
 223 002c CF91      		pop r28
 224 002e 0895      		ret
 226               	.Lscope2:
 228               		.stabd	78,0,0
 229               		.section	.rodata
 230               	.LC1:
 231 0000 5430 00   		.string	"T0"
 232               	.LC2:
 233 0003 5431 00   		.string	"T1"
 234               	.LC3:
 235 0006 5432 00   		.string	"T2"
 236               	.LC4:
 237 0009 5433 00   		.string	"T3"
 238               		.text
 240               	.global	main
 242               	main:
 243               		.stabd	46,0,0
  41:main.c        **** /*-----------------------------------------------------------*/
  42:main.c        **** 
  43:main.c        **** int main( void )
  44:main.c        **** {
 245               	.LM6:
 246               	.LFBB3:
 247 0030 AF92      		push r10
 248 0032 BF92      		push r11
 249 0034 CF92      		push r12
 250 0036 DF92      		push r13
 251 0038 EF92      		push r14
 252 003a FF92      		push r15
 253 003c 0F93      		push r16
 254 003e CF93      		push r28
 255 0040 DF93      		push r29
 256 0042 00D0      		rcall .
 257 0044 00D0      		rcall .
 258 0046 CDB7      		in r28,__SP_L__
 259 0048 DEB7      		in r29,__SP_H__
 260               	/* prologue: function */
 261               	/* frame size = 6 */
 262               	/* stack size = 15 */
 263               	.L__stack_usage = 15
  45:main.c        ****     
  46:main.c        ****     //- wimpy variable defs
  47:main.c        **** 	uint8_t val[2] = {0x3F, 0xFE};
 265               	.LM7:
 266 004a 8FE3      		ldi r24,lo8(63)
 267 004c 8D83      		std Y+5,r24
 268 004e 8EEF      		ldi r24,lo8(-2)
 269 0050 8E83      		std Y+6,r24
  48:main.c        ****     uint8_t *val0, *val1;
  49:main.c        ****     
  50:main.c        **** 	//- avoid pesky warnings...
  51:main.c        **** 	val0 = val + 0;
 271               	.LM8:
 272 0052 CE01      		movw r24,r28
 273 0054 0596      		adiw r24,5
 274 0056 9A83      		std Y+2,r25
 275 0058 8983      		std Y+1,r24
  52:main.c        **** 	val1 = val + 1;
 277               	.LM9:
 278 005a CE01      		movw r24,r28
 279 005c 0596      		adiw r24,5
 280 005e 0196      		adiw r24,1
 281 0060 9C83      		std Y+4,r25
 282 0062 8B83      		std Y+3,r24
  53:main.c        ****     
  54:main.c        **** 	DDRD = 0xFF;
 284               	.LM10:
 285 0064 8AE2      		ldi r24,lo8(42)
 286 0066 90E0      		ldi r25,0
 287 0068 2FEF      		ldi r18,lo8(-1)
 288 006a FC01      		movw r30,r24
 289 006c 2083      		st Z,r18
  55:main.c        **** 	DDRE = 0xFF;
 291               	.LM11:
 292 006e 8DE2      		ldi r24,lo8(45)
 293 0070 90E0      		ldi r25,0
 294 0072 2FEF      		ldi r18,lo8(-1)
 295 0074 FC01      		movw r30,r24
 296 0076 2083      		st Z,r18
  56:main.c        **** 	DDRK = 0;
 298               	.LM12:
 299 0078 87E0      		ldi r24,lo8(7)
 300 007a 91E0      		ldi r25,lo8(1)
 301 007c FC01      		movw r30,r24
 302 007e 1082      		st Z,__zero_reg__
  57:main.c        **** 
  58:main.c        **** 	PORTD = 0;
 304               	.LM13:
 305 0080 8BE2      		ldi r24,lo8(43)
 306 0082 90E0      		ldi r25,0
 307 0084 FC01      		movw r30,r24
 308 0086 1082      		st Z,__zero_reg__
  59:main.c        **** 	PORTE = 0;
 310               	.LM14:
 311 0088 8EE2      		ldi r24,lo8(46)
 312 008a 90E0      		ldi r25,0
 313 008c FC01      		movw r30,r24
 314 008e 1082      		st Z,__zero_reg__
  60:main.c        **** 	PORTK = 2;
 316               	.LM15:
 317 0090 88E0      		ldi r24,lo8(8)
 318 0092 91E0      		ldi r25,lo8(1)
 319 0094 22E0      		ldi r18,lo8(2)
 320 0096 FC01      		movw r30,r24
 321 0098 2083      		st Z,r18
  61:main.c        **** 
  62:main.c        ****     //- init IO with goodness
  63:main.c        **** 	vIO_init();
 323               	.LM16:
 324 009a 0E94 0000 		call vIO_init
  64:main.c        **** 
  65:main.c        **** 	//- Create a 
  66:main.c        **** 	xTaskCreate( (pdTASK_CODE) vTaskFunction_1, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
 326               	.LM17:
 327 009e 8B81      		ldd r24,Y+3
 328 00a0 9C81      		ldd r25,Y+4
 329 00a2 A12C      		mov r10,__zero_reg__
 330 00a4 B12C      		mov r11,__zero_reg__
 331 00a6 C12C      		mov r12,__zero_reg__
 332 00a8 D12C      		mov r13,__zero_reg__
 333 00aa E12C      		mov r14,__zero_reg__
 334 00ac F12C      		mov r15,__zero_reg__
 335 00ae 01E0      		ldi r16,lo8(1)
 336 00b0 9C01      		movw r18,r24
 337 00b2 4DE3      		ldi r20,lo8(61)
 338 00b4 54E0      		ldi r21,lo8(4)
 339 00b6 60E0      		ldi r22,lo8(.LC1)
 340 00b8 70E0      		ldi r23,hi8(.LC1)
 341 00ba 80E0      		ldi r24,lo8(gs(vTaskFunction_1))
 342 00bc 90E0      		ldi r25,hi8(gs(vTaskFunction_1))
 343 00be 0E94 0000 		call xTaskGenericCreate
  67:main.c        ****                 (void *) val1, 1, NULL );
  68:main.c        ****     
  69:main.c        ****    xTaskCreate( (pdTASK_CODE) vTaskSonar, (signed char *) "T1", configMINIMAL_STACK_SIZE+1000,
 345               	.LM18:
 346 00c2 8B81      		ldd r24,Y+3
 347 00c4 9C81      		ldd r25,Y+4
 348 00c6 A12C      		mov r10,__zero_reg__
 349 00c8 B12C      		mov r11,__zero_reg__
 350 00ca C12C      		mov r12,__zero_reg__
 351 00cc D12C      		mov r13,__zero_reg__
 352 00ce E12C      		mov r14,__zero_reg__
 353 00d0 F12C      		mov r15,__zero_reg__
 354 00d2 01E0      		ldi r16,lo8(1)
 355 00d4 9C01      		movw r18,r24
 356 00d6 4DE3      		ldi r20,lo8(61)
 357 00d8 54E0      		ldi r21,lo8(4)
 358 00da 60E0      		ldi r22,lo8(.LC2)
 359 00dc 70E0      		ldi r23,hi8(.LC2)
 360 00de 80E0      		ldi r24,lo8(gs(vTaskSonar))
 361 00e0 90E0      		ldi r25,hi8(gs(vTaskSonar))
 362 00e2 0E94 0000 		call xTaskGenericCreate
  70:main.c        ****                 (void *) val1, 1, NULL );
  71:main.c        **** 
  72:main.c        ****    xTaskCreate( (pdTASK_CODE) vTaskUSARTWrite, (signed char *) "T2", configMINIMAL_STACK_SIZE+1000,
 364               	.LM19:
 365 00e6 8B81      		ldd r24,Y+3
 366 00e8 9C81      		ldd r25,Y+4
 367 00ea A12C      		mov r10,__zero_reg__
 368 00ec B12C      		mov r11,__zero_reg__
 369 00ee C12C      		mov r12,__zero_reg__
 370 00f0 D12C      		mov r13,__zero_reg__
 371 00f2 E12C      		mov r14,__zero_reg__
 372 00f4 F12C      		mov r15,__zero_reg__
 373 00f6 01E0      		ldi r16,lo8(1)
 374 00f8 9C01      		movw r18,r24
 375 00fa 4DE3      		ldi r20,lo8(61)
 376 00fc 54E0      		ldi r21,lo8(4)
 377 00fe 60E0      		ldi r22,lo8(.LC3)
 378 0100 70E0      		ldi r23,hi8(.LC3)
 379 0102 80E0      		ldi r24,lo8(gs(vTaskUSARTWrite))
 380 0104 90E0      		ldi r25,hi8(gs(vTaskUSARTWrite))
 381 0106 0E94 0000 		call xTaskGenericCreate
  73:main.c        ****    				(void *) val1, 1, NULL);
  74:main.c        **** 
  75:main.c        ****    xTaskCreate( (pdTASK_CODE) vTaskUSARTRead, (signed char *) "T3", configMINIMAL_STACK_SIZE+1000,
 383               	.LM20:
 384 010a 8B81      		ldd r24,Y+3
 385 010c 9C81      		ldd r25,Y+4
 386 010e A12C      		mov r10,__zero_reg__
 387 0110 B12C      		mov r11,__zero_reg__
 388 0112 C12C      		mov r12,__zero_reg__
 389 0114 D12C      		mov r13,__zero_reg__
 390 0116 E12C      		mov r14,__zero_reg__
 391 0118 F12C      		mov r15,__zero_reg__
 392 011a 01E0      		ldi r16,lo8(1)
 393 011c 9C01      		movw r18,r24
 394 011e 4DE3      		ldi r20,lo8(61)
 395 0120 54E0      		ldi r21,lo8(4)
 396 0122 60E0      		ldi r22,lo8(.LC4)
 397 0124 70E0      		ldi r23,hi8(.LC4)
 398 0126 80E0      		ldi r24,lo8(gs(vTaskUSARTRead))
 399 0128 90E0      		ldi r25,hi8(gs(vTaskUSARTRead))
 400 012a 0E94 0000 		call xTaskGenericCreate
  76:main.c        ****    				(void *) val1, 1, NULL);
  77:main.c        **** 
  78:main.c        **** //   xTaskCreate( (pdTASK_CODE) vTaskUSARTLog, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
  79:main.c        **** //   				(void *) val1, 1, NULL);
  80:main.c        ****     
  81:main.c        ****     //- kick off the scheduler
  82:main.c        **** 	vTaskStartScheduler();
 402               	.LM21:
 403 012e 0E94 0000 		call vTaskStartScheduler
  83:main.c        ****     
  84:main.c        **** 	return 0;
 405               	.LM22:
 406 0132 80E0      		ldi r24,0
 407 0134 90E0      		ldi r25,0
 408               	/* epilogue start */
  85:main.c        **** }
 410               	.LM23:
 411 0136 2696      		adiw r28,6
 412 0138 0FB6      		in __tmp_reg__,__SREG__
 413 013a F894      		cli
 414 013c DEBF      		out __SP_H__,r29
 415 013e 0FBE      		out __SREG__,__tmp_reg__
 416 0140 CDBF      		out __SP_L__,r28
 417 0142 DF91      		pop r29
 418 0144 CF91      		pop r28
 419 0146 0F91      		pop r16
 420 0148 FF90      		pop r15
 421 014a EF90      		pop r14
 422 014c DF90      		pop r13
 423 014e CF90      		pop r12
 424 0150 BF90      		pop r11
 425 0152 AF90      		pop r10
 426 0154 0895      		ret
 433               	.Lscope3:
 435               		.stabd	78,0,0
 436               		.section	.rodata
 437               	.LC0:
 438 000c 30        		.byte	48
 439 000d 31        		.byte	49
 440 000e 32        		.byte	50
 441 000f 33        		.byte	51
 442 0010 34        		.byte	52
 443 0011 35        		.byte	53
 444 0012 36        		.byte	54
 445 0013 37        		.byte	55
 446 0014 38        		.byte	56
 447 0015 39        		.byte	57
 448 0016 41        		.byte	65
 449 0017 42        		.byte	66
 450 0018 43        		.byte	67
 451 0019 44        		.byte	68
 452 001a 45        		.byte	69
 453 001b 46        		.byte	70
 454               		.text
 457               	.global	printHex
 459               	printHex:
 460               		.stabd	46,0,0
  86:main.c        **** /*-----------------------------------------------------------*/
  87:main.c        **** 
  88:main.c        **** void printHex(int i){
 462               	.LM24:
 463               	.LFBB4:
 464 0156 CF93      		push r28
 465 0158 DF93      		push r29
 466 015a CDB7      		in r28,__SP_L__
 467 015c DEB7      		in r29,__SP_H__
 468 015e 6297      		sbiw r28,18
 469 0160 0FB6      		in __tmp_reg__,__SREG__
 470 0162 F894      		cli
 471 0164 DEBF      		out __SP_H__,r29
 472 0166 0FBE      		out __SREG__,__tmp_reg__
 473 0168 CDBF      		out __SP_L__,r28
 474               	/* prologue: function */
 475               	/* frame size = 18 */
 476               	/* stack size = 20 */
 477               	.L__stack_usage = 20
 478 016a 9A8B      		std Y+18,r25
 479 016c 898B      		std Y+17,r24
  89:main.c        **** 	char hex[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 481               	.LM25:
 482 016e 20E1      		ldi r18,lo8(16)
 483 0170 E0E0      		ldi r30,lo8(.LC0)
 484 0172 F0E0      		ldi r31,hi8(.LC0)
 485 0174 CE01      		movw r24,r28
 486 0176 0196      		adiw r24,1
 487 0178 DC01      		movw r26,r24
 488               		0:
 489 017a 0190      		ld r0,Z+
 490 017c 0D92      		st X+,r0
 491 017e 2A95      		dec r18
 492 0180 01F4      		brne 0b
  90:main.c        **** 
  91:main.c        **** 	USART_Write(hex[(i&0xF000) >> 12]);
 494               	.LM26:
 495 0182 8989      		ldd r24,Y+17
 496 0184 9A89      		ldd r25,Y+18
 497 0186 892F      		mov r24,r25
 498 0188 9927      		clr r25
 499 018a 8295      		swap r24
 500 018c 8F70      		andi r24,0x0f
 501 018e 9E01      		movw r18,r28
 502 0190 2F5F      		subi r18,-1
 503 0192 3F4F      		sbci r19,-1
 504 0194 820F      		add r24,r18
 505 0196 931F      		adc r25,r19
 506 0198 FC01      		movw r30,r24
 507 019a 8081      		ld r24,Z
 508 019c 0E94 0000 		call USART_Write
  92:main.c        **** 	USART_Write(hex[(i&0xF00) >> 8]);
 510               	.LM27:
 511 01a0 8989      		ldd r24,Y+17
 512 01a2 9A89      		ldd r25,Y+18
 513 01a4 8827      		clr r24
 514 01a6 9F70      		andi r25,15
 515 01a8 892F      		mov r24,r25
 516 01aa 990F      		lsl r25
 517 01ac 990B      		sbc r25,r25
 518 01ae 9E01      		movw r18,r28
 519 01b0 2F5F      		subi r18,-1
 520 01b2 3F4F      		sbci r19,-1
 521 01b4 820F      		add r24,r18
 522 01b6 931F      		adc r25,r19
 523 01b8 FC01      		movw r30,r24
 524 01ba 8081      		ld r24,Z
 525 01bc 0E94 0000 		call USART_Write
  93:main.c        **** 	USART_Write(hex[(i&0xF0) >> 4]);
 527               	.LM28:
 528 01c0 8989      		ldd r24,Y+17
 529 01c2 9A89      		ldd r25,Y+18
 530 01c4 807F      		andi r24,240
 531 01c6 9927      		clr r25
 532 01c8 9595      		asr r25
 533 01ca 8795      		ror r24
 534 01cc 9595      		asr r25
 535 01ce 8795      		ror r24
 536 01d0 9595      		asr r25
 537 01d2 8795      		ror r24
 538 01d4 9595      		asr r25
 539 01d6 8795      		ror r24
 540 01d8 9E01      		movw r18,r28
 541 01da 2F5F      		subi r18,-1
 542 01dc 3F4F      		sbci r19,-1
 543 01de 820F      		add r24,r18
 544 01e0 931F      		adc r25,r19
 545 01e2 FC01      		movw r30,r24
 546 01e4 8081      		ld r24,Z
 547 01e6 0E94 0000 		call USART_Write
  94:main.c        **** 	USART_Write(hex[i&0xF]);
 549               	.LM29:
 550 01ea 8989      		ldd r24,Y+17
 551 01ec 9A89      		ldd r25,Y+18
 552 01ee 8F70      		andi r24,15
 553 01f0 9927      		clr r25
 554 01f2 9E01      		movw r18,r28
 555 01f4 2F5F      		subi r18,-1
 556 01f6 3F4F      		sbci r19,-1
 557 01f8 820F      		add r24,r18
 558 01fa 931F      		adc r25,r19
 559 01fc FC01      		movw r30,r24
 560 01fe 8081      		ld r24,Z
 561 0200 0E94 0000 		call USART_Write
 562               	/* epilogue start */
  95:main.c        **** 
  96:main.c        **** }
 564               	.LM30:
 565 0204 6296      		adiw r28,18
 566 0206 0FB6      		in __tmp_reg__,__SREG__
 567 0208 F894      		cli
 568 020a DEBF      		out __SP_H__,r29
 569 020c 0FBE      		out __SREG__,__tmp_reg__
 570 020e CDBF      		out __SP_L__,r28
 571 0210 DF91      		pop r29
 572 0212 CF91      		pop r28
 573 0214 0895      		ret
 578               	.Lscope4:
 580               		.stabd	78,0,0
 583               	.global	printNum
 585               	printNum:
 586               		.stabd	46,0,0
  97:main.c        **** 
  98:main.c        **** void printNum(unsigned char i){
 588               	.LM31:
 589               	.LFBB5:
 590 0216 CF93      		push r28
 591 0218 DF93      		push r29
 592 021a CDB7      		in r28,__SP_L__
 593 021c DEB7      		in r29,__SP_H__
 594 021e 2D97      		sbiw r28,13
 595 0220 0FB6      		in __tmp_reg__,__SREG__
 596 0222 F894      		cli
 597 0224 DEBF      		out __SP_H__,r29
 598 0226 0FBE      		out __SREG__,__tmp_reg__
 599 0228 CDBF      		out __SP_L__,r28
 600               	/* prologue: function */
 601               	/* frame size = 13 */
 602               	/* stack size = 15 */
 603               	.L__stack_usage = 15
 604 022a 8D87      		std Y+13,r24
  99:main.c        ****     
 100:main.c        ****     char str[10];
 101:main.c        ****     memset(str,0,10);
 606               	.LM32:
 607 022c CE01      		movw r24,r28
 608 022e 0396      		adiw r24,3
 609 0230 4AE0      		ldi r20,lo8(10)
 610 0232 50E0      		ldi r21,0
 611 0234 60E0      		ldi r22,0
 612 0236 70E0      		ldi r23,0
 613 0238 0E94 0000 		call memset
 102:main.c        ****     itoa(i,str,10);
 615               	.LM33:
 616 023c 8D85      		ldd r24,Y+13
 617 023e 882F      		mov r24,r24
 618 0240 90E0      		ldi r25,0
 619 0242 9E01      		movw r18,r28
 620 0244 2D5F      		subi r18,-3
 621 0246 3F4F      		sbci r19,-1
 622 0248 4AE0      		ldi r20,lo8(10)
 623 024a 50E0      		ldi r21,0
 624 024c B901      		movw r22,r18
 625 024e 0E94 0000 		call itoa
 103:main.c        ****     char * irr = str;
 627               	.LM34:
 628 0252 CE01      		movw r24,r28
 629 0254 0396      		adiw r24,3
 630 0256 9A83      		std Y+2,r25
 631 0258 8983      		std Y+1,r24
 104:main.c        ****     while(*irr){
 633               	.LM35:
 634 025a 00C0      		rjmp .L8
 635               	.L9:
 105:main.c        ****         USART_AddToQueue((unsigned char )*irr);
 637               	.LM36:
 638 025c 8981      		ldd r24,Y+1
 639 025e 9A81      		ldd r25,Y+2
 640 0260 FC01      		movw r30,r24
 641 0262 8081      		ld r24,Z
 642 0264 0E94 0000 		call USART_AddToQueue
 106:main.c        ****         irr++;
 644               	.LM37:
 645 0268 8981      		ldd r24,Y+1
 646 026a 9A81      		ldd r25,Y+2
 647 026c 0196      		adiw r24,1
 648 026e 9A83      		std Y+2,r25
 649 0270 8983      		std Y+1,r24
 650               	.L8:
 104:main.c        ****     while(*irr){
 652               	.LM38:
 653 0272 8981      		ldd r24,Y+1
 654 0274 9A81      		ldd r25,Y+2
 655 0276 FC01      		movw r30,r24
 656 0278 8081      		ld r24,Z
 657 027a 8823      		tst r24
 658 027c 01F4      		brne .L9
 659               	/* epilogue start */
 107:main.c        ****     }
 108:main.c        ****     
 109:main.c        **** }
 661               	.LM39:
 662 027e 2D96      		adiw r28,13
 663 0280 0FB6      		in __tmp_reg__,__SREG__
 664 0282 F894      		cli
 665 0284 DEBF      		out __SP_H__,r29
 666 0286 0FBE      		out __SREG__,__tmp_reg__
 667 0288 CDBF      		out __SP_L__,r28
 668 028a DF91      		pop r29
 669 028c CF91      		pop r28
 670 028e 0895      		ret
 676               	.Lscope5:
 678               		.stabd	78,0,0
 680               	.global	__vector_50
 682               	__vector_50:
 683               		.stabd	46,0,0
 110:main.c        **** 
 111:main.c        **** ISR(TIMER5_OVF_vect){
 685               	.LM40:
 686               	.LFBB6:
 687 0290 1F92      		push r1
 688 0292 0F92      		push r0
 689 0294 0090 5F00 		lds r0,95
 690 0298 0F92      		push r0
 691 029a 1124      		clr __zero_reg__
 692 029c 0090 5B00 		lds r0,91
 693 02a0 0F92      		push r0
 694 02a2 2F93      		push r18
 695 02a4 3F93      		push r19
 696 02a6 8F93      		push r24
 697 02a8 9F93      		push r25
 698 02aa EF93      		push r30
 699 02ac FF93      		push r31
 700 02ae CF93      		push r28
 701 02b0 DF93      		push r29
 702 02b2 CDB7      		in r28,__SP_L__
 703 02b4 DEB7      		in r29,__SP_H__
 704               	/* prologue: Signal */
 705               	/* frame size = 0 */
 706               	/* stack size = 12 */
 707               	.L__stack_usage = 12
 112:main.c        **** 
 113:main.c        **** 	PORTB ^= 0xFF;
 709               	.LM41:
 710 02b6 85E2      		ldi r24,lo8(37)
 711 02b8 90E0      		ldi r25,0
 712 02ba 25E2      		ldi r18,lo8(37)
 713 02bc 30E0      		ldi r19,0
 714 02be F901      		movw r30,r18
 715 02c0 2081      		ld r18,Z
 716 02c2 2095      		com r18
 717 02c4 FC01      		movw r30,r24
 718 02c6 2083      		st Z,r18
 114:main.c        **** 	TCNT3L = 0;
 720               	.LM42:
 721 02c8 84E9      		ldi r24,lo8(-108)
 722 02ca 90E0      		ldi r25,0
 723 02cc FC01      		movw r30,r24
 724 02ce 1082      		st Z,__zero_reg__
 115:main.c        **** 	TCNT3H = 0;
 726               	.LM43:
 727 02d0 85E9      		ldi r24,lo8(-107)
 728 02d2 90E0      		ldi r25,0
 729 02d4 FC01      		movw r30,r24
 730 02d6 1082      		st Z,__zero_reg__
 731               	/* epilogue start */
 116:main.c        **** 
 117:main.c        **** }
 733               	.LM44:
 734 02d8 DF91      		pop r29
 735 02da CF91      		pop r28
 736 02dc FF91      		pop r31
 737 02de EF91      		pop r30
 738 02e0 9F91      		pop r25
 739 02e2 8F91      		pop r24
 740 02e4 3F91      		pop r19
 741 02e6 2F91      		pop r18
 742 02e8 0F90      		pop r0
 743 02ea 0092 5B00 		sts 91,r0
 744 02ee 0F90      		pop r0
 745 02f0 0092 5F00 		sts 95,r0
 746 02f4 0F90      		pop r0
 747 02f6 1F90      		pop r1
 748 02f8 1895      		reti
 750               	.Lscope6:
 752               		.stabd	78,0,0
 754               	.global	getTimerCount2
 756               	getTimerCount2:
 757               		.stabd	46,0,0
 118:main.c        **** 
 119:main.c        **** unsigned int getTimerCount2(){
 759               	.LM45:
 760               	.LFBB7:
 761 02fa CF93      		push r28
 762 02fc DF93      		push r29
 763 02fe CDB7      		in r28,__SP_L__
 764 0300 DEB7      		in r29,__SP_H__
 765               	/* prologue: function */
 766               	/* frame size = 0 */
 767               	/* stack size = 2 */
 768               	.L__stack_usage = 2
 120:main.c        **** 
 121:main.c        **** 	//volatile char timerLow = TCNT3L;
 122:main.c        **** 
 123:main.c        **** 	return TCNT0;
 770               	.LM46:
 771 0302 86E4      		ldi r24,lo8(70)
 772 0304 90E0      		ldi r25,0
 773 0306 FC01      		movw r30,r24
 774 0308 8081      		ld r24,Z
 775 030a 882F      		mov r24,r24
 776 030c 90E0      		ldi r25,0
 777               	/* epilogue start */
 124:main.c        **** 
 125:main.c        **** }
 779               	.LM47:
 780 030e DF91      		pop r29
 781 0310 CF91      		pop r28
 782 0312 0895      		ret
 784               	.Lscope7:
 786               		.stabd	78,0,0
 789               	.global	vTaskFunction_1
 791               	vTaskFunction_1:
 792               		.stabd	46,0,0
 126:main.c        **** 
 127:main.c        **** void vTaskFunction_1(void *pvParameters)
 128:main.c        **** {	
 794               	.LM48:
 795               	.LFBB8:
 796 0314 CF93      		push r28
 797 0316 DF93      		push r29
 798 0318 1F92      		push __zero_reg__
 799 031a 1F92      		push __zero_reg__
 800 031c CDB7      		in r28,__SP_L__
 801 031e DEB7      		in r29,__SP_H__
 802               	/* prologue: function */
 803               	/* frame size = 2 */
 804               	/* stack size = 4 */
 805               	.L__stack_usage = 4
 806 0320 9A83      		std Y+2,r25
 807 0322 8983      		std Y+1,r24
 129:main.c        ****     USART_Init(9600, 16000000);
 809               	.LM49:
 810 0324 40E0      		ldi r20,0
 811 0326 54E2      		ldi r21,lo8(36)
 812 0328 64EF      		ldi r22,lo8(-12)
 813 032a 70E0      		ldi r23,0
 814 032c 80E8      		ldi r24,lo8(-128)
 815 032e 95E2      		ldi r25,lo8(37)
 816 0330 0E94 0000 		call USART_Init
 817               	.L14:
 130:main.c        ****     for(;;);
 819               	.LM50:
 820 0334 00C0      		rjmp .L14
 822               	.Lscope8:
 824               		.stabd	78,0,0
 826               	.global	vIO_init
 828               	vIO_init:
 829               		.stabd	46,0,0
 131:main.c        **** 	//static const char* str = "Hello World\n";
 132:main.c        **** 	//for(;;){
 133:main.c        **** 		//PORTB = 0;
 134:main.c        **** 
 135:main.c        **** 		//USART_TransmitString("Hello World!\n");
 136:main.c        **** 	//	USART_AddToQueue('I');
 137:main.c        **** 		//USART_TransmitString("H\n");
 138:main.c        **** 	//	vTaskDelay(25);
 139:main.c        **** 	//}
 140:main.c        **** 	/*for(;;){
 141:main.c        **** 		printNum(getTimerCount2());
 142:main.c        **** 		USART_Write('\n');
 143:main.c        **** 	}*/
 144:main.c        **** 
 145:main.c        ****     for (;;)  {
 146:main.c        **** //        PORTB ^=  0xff;j
 147:main.c        **** 		//PCMSK2 = 1;
 148:main.c        ****     	printNum(getSonarData(0));
 149:main.c        **** 		USART_AddToQueue(' ');
 150:main.c        **** 		//printNum(getSonarData(1));
 151:main.c        **** 		//USART_Write('\n');
 152:main.c        ****       	vTaskDelay(25);
 153:main.c        ****         /* Get and return received data from buffer */
 154:main.c        ****         // UDR0;
 155:main.c        ****     }
 156:main.c        **** }
 157:main.c        **** 
 158:main.c        **** void vIO_init(void)
 159:main.c        **** {
 831               	.LM51:
 832               	.LFBB9:
 833 0336 CF93      		push r28
 834 0338 DF93      		push r29
 835 033a CDB7      		in r28,__SP_L__
 836 033c DEB7      		in r29,__SP_H__
 837               	/* prologue: function */
 838               	/* frame size = 0 */
 839               	/* stack size = 2 */
 840               	.L__stack_usage = 2
 160:main.c        ****     //- set PortB as output
 161:main.c        **** 	DDRB = 0xFF; 
 842               	.LM52:
 843 033e 84E2      		ldi r24,lo8(36)
 844 0340 90E0      		ldi r25,0
 845 0342 2FEF      		ldi r18,lo8(-1)
 846 0344 FC01      		movw r30,r24
 847 0346 2083      		st Z,r18
 162:main.c        ****     PORTB = 0; 
 849               	.LM53:
 850 0348 85E2      		ldi r24,lo8(37)
 851 034a 90E0      		ldi r25,0
 852 034c FC01      		movw r30,r24
 853 034e 1082      		st Z,__zero_reg__
 854               	/* epilogue start */
 163:main.c        **** }
 856               	.LM54:
 857 0350 DF91      		pop r29
 858 0352 CF91      		pop r28
 859 0354 0895      		ret
 861               	.Lscope9:
 863               		.stabd	78,0,0
 867               	.Letext0:
 868               		.ident	"GCC: (GNU) 4.8.2"
 869               	.global __do_copy_data
 870               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccBq5SrB.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccBq5SrB.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccBq5SrB.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccBq5SrB.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccBq5SrB.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccBq5SrB.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccBq5SrB.s:163    .bss:0000000000000000 count
                            *COM*:0000000000000002 sonarTime
     /tmp/ccBq5SrB.s:170    .text:0000000000000000 vApplicationTickHook
     /tmp/ccBq5SrB.s:203    .text:0000000000000020 vApplicationStackOverflowHook
     /tmp/ccBq5SrB.s:242    .text:0000000000000030 main
     /tmp/ccBq5SrB.s:828    .text:0000000000000336 vIO_init
     /tmp/ccBq5SrB.s:791    .text:0000000000000314 vTaskFunction_1
     /tmp/ccBq5SrB.s:459    .text:0000000000000156 printHex
     /tmp/ccBq5SrB.s:585    .text:0000000000000216 printNum
     /tmp/ccBq5SrB.s:682    .text:0000000000000290 __vector_50
     /tmp/ccBq5SrB.s:756    .text:00000000000002fa getTimerCount2

UNDEFINED SYMBOLS
xTaskGenericCreate
vTaskSonar
vTaskUSARTWrite
vTaskUSARTRead
vTaskStartScheduler
USART_Write
memset
itoa
USART_AddToQueue
USART_Init
__do_copy_data
__do_clear_bss
