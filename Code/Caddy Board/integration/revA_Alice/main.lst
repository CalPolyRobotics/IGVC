   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 125               	.global	count
 126               	.global	count
 127               		.section .bss
 130               	count:
 131 0000 0000      		.skip 2,0
 132               		.text
 134               	.global	vApplicationTickHook
 136               	vApplicationTickHook:
 137               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        ****  FreeRTOS V6.1.0
   3:main.c        ****  
   4:main.c        ****  This is a basic RTOS program. It turns on the LEDs.
   5:main.c        ****  Nothing too exciting.
   6:main.c        ****  
   7:main.c        ****  */
   8:main.c        **** 
   9:main.c        **** #include <stdint.h>
  10:main.c        **** #include <avr/io.h>
  11:main.c        **** #include <string.h>
  12:main.c        **** #include <stdlib.h>
  13:main.c        **** #include <stdio.h>
  14:main.c        **** #include <math.h>
  15:main.c        **** #include "FreeRTOS.h"
  16:main.c        **** #include <avr/io.h>
  17:main.c        **** #include <avr/interrupt.h>
  18:main.c        **** #include "task.h"
  19:main.c        **** #include "usart.h"
  20:main.c        **** #include "Components/Sonar/Sonar.h"
  21:main.c        **** #include "queue.h"
  22:main.c        **** 
  23:main.c        **** void vTaskFunction_1(void *pvParameters);
  24:main.c        **** void vIO_init(void);
  25:main.c        **** void vApplicationTickHook();
  26:main.c        **** void printNum(unsigned char i);
  27:main.c        **** void printHex(int i);
  28:main.c        **** 
  29:main.c        **** int count = 0;
  30:main.c        **** 
  31:main.c        **** int sonarTime;
  32:main.c        **** 
  33:main.c        **** void vApplicationTickHook()
  34:main.c        **** {
 139               	.LM0:
 140               	.LFBB1:
 141 0000 DF93      		push r29
 142 0002 CF93      		push r28
 143 0004 CDB7      		in r28,__SP_L__
 144 0006 DEB7      		in r29,__SP_H__
 145               	/* prologue: function */
 146               	/* frame size = 0 */
  35:main.c        ****     count++;
 148               	.LM1:
 149 0008 8091 0000 		lds r24,count
 150 000c 9091 0000 		lds r25,(count)+1
 151 0010 0196      		adiw r24,1
 152 0012 9093 0000 		sts (count)+1,r25
 153 0016 8093 0000 		sts count,r24
 154               	/* epilogue start */
  36:main.c        **** }
 156               	.LM2:
 157 001a CF91      		pop r28
 158 001c DF91      		pop r29
 159 001e 0895      		ret
 161               	.Lscope1:
 163               		.stabd	78,0,0
 165               	.global	vApplicationStackOverflowHook
 167               	vApplicationStackOverflowHook:
 168               		.stabd	46,0,0
  37:main.c        **** 
  38:main.c        **** void vApplicationStackOverflowHook(){
 170               	.LM3:
 171               	.LFBB2:
 172 0020 DF93      		push r29
 173 0022 CF93      		push r28
 174 0024 CDB7      		in r28,__SP_L__
 175 0026 DEB7      		in r29,__SP_H__
 176               	/* prologue: function */
 177               	/* frame size = 0 */
 178               	/* epilogue start */
  39:main.c        **** 	return;
  40:main.c        **** }
 180               	.LM4:
 181 0028 CF91      		pop r28
 182 002a DF91      		pop r29
 183 002c 0895      		ret
 185               	.Lscope2:
 187               		.stabd	78,0,0
 188               		.data
 189               	.LC0:
 190 0000 5430 00   		.string	"T0"
 191               	.LC1:
 192 0003 5431 00   		.string	"T1"
 193               	.LC2:
 194 0006 5432 00   		.string	"T2"
 195               	.LC3:
 196 0009 5433 00   		.string	"T3"
 197               		.text
 199               	.global	main
 201               	main:
 202               		.stabd	46,0,0
  41:main.c        **** /*-----------------------------------------------------------*/
  42:main.c        **** 
  43:main.c        **** int main( void )
  44:main.c        **** {
 204               	.LM5:
 205               	.LFBB3:
 206 002e AF92      		push r10
 207 0030 BF92      		push r11
 208 0032 CF92      		push r12
 209 0034 DF92      		push r13
 210 0036 EF92      		push r14
 211 0038 FF92      		push r15
 212 003a 0F93      		push r16
 213 003c DF93      		push r29
 214 003e CF93      		push r28
 215 0040 00D0      		rcall .
 216 0042 00D0      		rcall .
 217 0044 CDB7      		in r28,__SP_L__
 218 0046 DEB7      		in r29,__SP_H__
 219               	/* prologue: function */
 220               	/* frame size = 6 */
  45:main.c        ****     
  46:main.c        ****     //- wimpy variable defs
  47:main.c        **** 	uint8_t val[2] = {0x3F, 0xFE};
 222               	.LM6:
 223 0048 8FE3      		ldi r24,lo8(63)
 224 004a 8D83      		std Y+5,r24
 225 004c 8EEF      		ldi r24,lo8(-2)
 226 004e 8E83      		std Y+6,r24
  48:main.c        ****     uint8_t *val0, *val1;
  49:main.c        ****     
  50:main.c        **** 	//- avoid pesky warnings...
  51:main.c        **** 	val0 = val + 0;
 228               	.LM7:
 229 0050 CE01      		movw r24,r28
 230 0052 0596      		adiw r24,5
 231 0054 9C83      		std Y+4,r25
 232 0056 8B83      		std Y+3,r24
  52:main.c        **** 	val1 = val + 1;
 234               	.LM8:
 235 0058 CE01      		movw r24,r28
 236 005a 0596      		adiw r24,5
 237 005c 0196      		adiw r24,1
 238 005e 9A83      		std Y+2,r25
 239 0060 8983      		std Y+1,r24
  53:main.c        ****     
  54:main.c        **** 	DDRD = 0xFF;
 241               	.LM9:
 242 0062 EAE2      		ldi r30,lo8(42)
 243 0064 F0E0      		ldi r31,hi8(42)
 244 0066 8FEF      		ldi r24,lo8(-1)
 245 0068 8083      		st Z,r24
  55:main.c        **** 	DDRE = 0xFF;
 247               	.LM10:
 248 006a EDE2      		ldi r30,lo8(45)
 249 006c F0E0      		ldi r31,hi8(45)
 250 006e 8FEF      		ldi r24,lo8(-1)
 251 0070 8083      		st Z,r24
  56:main.c        **** 	DDRB = 0xFF; 
 253               	.LM11:
 254 0072 E4E2      		ldi r30,lo8(36)
 255 0074 F0E0      		ldi r31,hi8(36)
 256 0076 8FEF      		ldi r24,lo8(-1)
 257 0078 8083      		st Z,r24
  57:main.c        **** 	DDRK = 0;
 259               	.LM12:
 260 007a E7E0      		ldi r30,lo8(263)
 261 007c F1E0      		ldi r31,hi8(263)
 262 007e 1082      		st Z,__zero_reg__
  58:main.c        **** 
  59:main.c        **** 	PORTD = 0;
 264               	.LM13:
 265 0080 EBE2      		ldi r30,lo8(43)
 266 0082 F0E0      		ldi r31,hi8(43)
 267 0084 1082      		st Z,__zero_reg__
  60:main.c        **** 	PORTE = 0;
 269               	.LM14:
 270 0086 EEE2      		ldi r30,lo8(46)
 271 0088 F0E0      		ldi r31,hi8(46)
 272 008a 1082      		st Z,__zero_reg__
  61:main.c        **** 	PORTK = 2;
 274               	.LM15:
 275 008c E8E0      		ldi r30,lo8(264)
 276 008e F1E0      		ldi r31,hi8(264)
 277 0090 82E0      		ldi r24,lo8(2)
 278 0092 8083      		st Z,r24
  62:main.c        **** 
  63:main.c        ****     //- init IO with goodness
  64:main.c        **** 	vIO_init();
 280               	.LM16:
 281 0094 0E94 0000 		call vIO_init
  65:main.c        **** 
  66:main.c        **** 	//- Create a 
  67:main.c        **** 	xTaskCreate( (pdTASK_CODE) vTaskFunction_1, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
 283               	.LM17:
 284 0098 80E0      		ldi r24,lo8(gs(vTaskFunction_1))
 285 009a 90E0      		ldi r25,hi8(gs(vTaskFunction_1))
 286 009c 20E0      		ldi r18,lo8(.LC0)
 287 009e 30E0      		ldi r19,hi8(.LC0)
 288 00a0 E981      		ldd r30,Y+1
 289 00a2 FA81      		ldd r31,Y+2
 290 00a4 B901      		movw r22,r18
 291 00a6 4DE3      		ldi r20,lo8(1085)
 292 00a8 54E0      		ldi r21,hi8(1085)
 293 00aa 9F01      		movw r18,r30
 294 00ac 01E0      		ldi r16,lo8(1)
 295 00ae EE24      		clr r14
 296 00b0 FF24      		clr r15
 297 00b2 CC24      		clr r12
 298 00b4 DD24      		clr r13
 299 00b6 AA24      		clr r10
 300 00b8 BB24      		clr r11
 301 00ba 0E94 0000 		call xTaskGenericCreate
  68:main.c        ****                 (void *) val1, 1, NULL );
  69:main.c        ****     
  70:main.c        ****    xTaskCreate( (pdTASK_CODE) vTaskSonar, (signed char *) "T1", configMINIMAL_STACK_SIZE+1000,
 303               	.LM18:
 304 00be 80E0      		ldi r24,lo8(gs(vTaskSonar))
 305 00c0 90E0      		ldi r25,hi8(gs(vTaskSonar))
 306 00c2 20E0      		ldi r18,lo8(.LC1)
 307 00c4 30E0      		ldi r19,hi8(.LC1)
 308 00c6 E981      		ldd r30,Y+1
 309 00c8 FA81      		ldd r31,Y+2
 310 00ca B901      		movw r22,r18
 311 00cc 4DE3      		ldi r20,lo8(1085)
 312 00ce 54E0      		ldi r21,hi8(1085)
 313 00d0 9F01      		movw r18,r30
 314 00d2 01E0      		ldi r16,lo8(1)
 315 00d4 EE24      		clr r14
 316 00d6 FF24      		clr r15
 317 00d8 CC24      		clr r12
 318 00da DD24      		clr r13
 319 00dc AA24      		clr r10
 320 00de BB24      		clr r11
 321 00e0 0E94 0000 		call xTaskGenericCreate
  71:main.c        ****                 (void *) val1, 1, NULL );
  72:main.c        **** 
  73:main.c        ****    xTaskCreate( (pdTASK_CODE) vTaskUSARTWrite, (signed char *) "T2", configMINIMAL_STACK_SIZE+1000,
 323               	.LM19:
 324 00e4 80E0      		ldi r24,lo8(gs(vTaskUSARTWrite))
 325 00e6 90E0      		ldi r25,hi8(gs(vTaskUSARTWrite))
 326 00e8 20E0      		ldi r18,lo8(.LC2)
 327 00ea 30E0      		ldi r19,hi8(.LC2)
 328 00ec E981      		ldd r30,Y+1
 329 00ee FA81      		ldd r31,Y+2
 330 00f0 B901      		movw r22,r18
 331 00f2 4DE3      		ldi r20,lo8(1085)
 332 00f4 54E0      		ldi r21,hi8(1085)
 333 00f6 9F01      		movw r18,r30
 334 00f8 01E0      		ldi r16,lo8(1)
 335 00fa EE24      		clr r14
 336 00fc FF24      		clr r15
 337 00fe CC24      		clr r12
 338 0100 DD24      		clr r13
 339 0102 AA24      		clr r10
 340 0104 BB24      		clr r11
 341 0106 0E94 0000 		call xTaskGenericCreate
  74:main.c        ****    				(void *) val1, 1, NULL);
  75:main.c        **** 
  76:main.c        ****    xTaskCreate( (pdTASK_CODE) vTaskUSARTRead, (signed char *) "T3", configMINIMAL_STACK_SIZE+1000,
 343               	.LM20:
 344 010a 80E0      		ldi r24,lo8(gs(vTaskUSARTRead))
 345 010c 90E0      		ldi r25,hi8(gs(vTaskUSARTRead))
 346 010e 20E0      		ldi r18,lo8(.LC3)
 347 0110 30E0      		ldi r19,hi8(.LC3)
 348 0112 E981      		ldd r30,Y+1
 349 0114 FA81      		ldd r31,Y+2
 350 0116 B901      		movw r22,r18
 351 0118 4DE3      		ldi r20,lo8(1085)
 352 011a 54E0      		ldi r21,hi8(1085)
 353 011c 9F01      		movw r18,r30
 354 011e 01E0      		ldi r16,lo8(1)
 355 0120 EE24      		clr r14
 356 0122 FF24      		clr r15
 357 0124 CC24      		clr r12
 358 0126 DD24      		clr r13
 359 0128 AA24      		clr r10
 360 012a BB24      		clr r11
 361 012c 0E94 0000 		call xTaskGenericCreate
  77:main.c        ****    				(void *) val1, 1, NULL);
  78:main.c        **** 
  79:main.c        **** //   xTaskCreate( (pdTASK_CODE) vTaskUSARTLog, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
  80:main.c        **** //   				(void *) val1, 1, NULL);
  81:main.c        ****     
  82:main.c        ****     //- kick off the scheduler
  83:main.c        **** 	vTaskStartScheduler();
 363               	.LM21:
 364 0130 0E94 0000 		call vTaskStartScheduler
  84:main.c        ****     
  85:main.c        **** 	return 0;
 366               	.LM22:
 367 0134 80E0      		ldi r24,lo8(0)
 368 0136 90E0      		ldi r25,hi8(0)
 369               	/* epilogue start */
  86:main.c        **** }
 371               	.LM23:
 372 0138 2696      		adiw r28,6
 373 013a 0FB6      		in __tmp_reg__,__SREG__
 374 013c F894      		cli
 375 013e DEBF      		out __SP_H__,r29
 376 0140 0FBE      		out __SREG__,__tmp_reg__
 377 0142 CDBF      		out __SP_L__,r28
 378 0144 CF91      		pop r28
 379 0146 DF91      		pop r29
 380 0148 0F91      		pop r16
 381 014a FF90      		pop r15
 382 014c EF90      		pop r14
 383 014e DF90      		pop r13
 384 0150 CF90      		pop r12
 385 0152 BF90      		pop r11
 386 0154 AF90      		pop r10
 387 0156 0895      		ret
 394               	.Lscope3:
 396               		.stabd	78,0,0
 397               		.data
 400               	C.2.2033:
 401 000c 30        		.byte	48
 402 000d 31        		.byte	49
 403 000e 32        		.byte	50
 404 000f 33        		.byte	51
 405 0010 34        		.byte	52
 406 0011 35        		.byte	53
 407 0012 36        		.byte	54
 408 0013 37        		.byte	55
 409 0014 38        		.byte	56
 410 0015 39        		.byte	57
 411 0016 41        		.byte	65
 412 0017 42        		.byte	66
 413 0018 43        		.byte	67
 414 0019 44        		.byte	68
 415 001a 45        		.byte	69
 416 001b 46        		.byte	70
 417               		.text
 420               	.global	printHex
 422               	printHex:
 423               		.stabd	46,0,0
  87:main.c        **** /*-----------------------------------------------------------*/
  88:main.c        **** 
  89:main.c        **** void printHex(int i){
 425               	.LM24:
 426               	.LFBB4:
 427 0158 DF93      		push r29
 428 015a CF93      		push r28
 429 015c CDB7      		in r28,__SP_L__
 430 015e DEB7      		in r29,__SP_H__
 431 0160 6797      		sbiw r28,23
 432 0162 0FB6      		in __tmp_reg__,__SREG__
 433 0164 F894      		cli
 434 0166 DEBF      		out __SP_H__,r29
 435 0168 0FBE      		out __SREG__,__tmp_reg__
 436 016a CDBF      		out __SP_L__,r28
 437               	/* prologue: function */
 438               	/* frame size = 23 */
 439 016c 9A8B      		std Y+18,r25
 440 016e 898B      		std Y+17,r24
  90:main.c        **** 	char hex[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 442               	.LM25:
 443 0170 CE01      		movw r24,r28
 444 0172 0196      		adiw r24,1
 445 0174 9C8B      		std Y+20,r25
 446 0176 8B8B      		std Y+19,r24
 447 0178 E0E0      		ldi r30,lo8(C.2.2033)
 448 017a F0E0      		ldi r31,hi8(C.2.2033)
 449 017c FE8B      		std Y+22,r31
 450 017e ED8B      		std Y+21,r30
 451 0180 F0E1      		ldi r31,lo8(16)
 452 0182 FF8B      		std Y+23,r31
 453               	.L8:
 454 0184 ED89      		ldd r30,Y+21
 455 0186 FE89      		ldd r31,Y+22
 456 0188 0080      		ld r0,Z
 457 018a 8D89      		ldd r24,Y+21
 458 018c 9E89      		ldd r25,Y+22
 459 018e 0196      		adiw r24,1
 460 0190 9E8B      		std Y+22,r25
 461 0192 8D8B      		std Y+21,r24
 462 0194 EB89      		ldd r30,Y+19
 463 0196 FC89      		ldd r31,Y+20
 464 0198 0082      		st Z,r0
 465 019a 8B89      		ldd r24,Y+19
 466 019c 9C89      		ldd r25,Y+20
 467 019e 0196      		adiw r24,1
 468 01a0 9C8B      		std Y+20,r25
 469 01a2 8B8B      		std Y+19,r24
 470 01a4 9F89      		ldd r25,Y+23
 471 01a6 9150      		subi r25,lo8(-(-1))
 472 01a8 9F8B      		std Y+23,r25
 473 01aa EF89      		ldd r30,Y+23
 474 01ac EE23      		tst r30
 475 01ae 01F4      		brne .L8
  91:main.c        **** 
  92:main.c        **** 	USART_Write(hex[(i&0xF000) >> 12]);
 477               	.LM26:
 478 01b0 8989      		ldd r24,Y+17
 479 01b2 9A89      		ldd r25,Y+18
 480 01b4 9C01      		movw r18,r24
 481 01b6 232F      		mov r18,r19
 482 01b8 3327      		clr r19
 483 01ba 2295      		swap r18
 484 01bc 2F70      		andi r18,0x0f
 485 01be CE01      		movw r24,r28
 486 01c0 0196      		adiw r24,1
 487 01c2 FC01      		movw r30,r24
 488 01c4 E20F      		add r30,r18
 489 01c6 F31F      		adc r31,r19
 490 01c8 8081      		ld r24,Z
 491 01ca 0E94 0000 		call USART_Write
  93:main.c        **** 	USART_Write(hex[(i&0xF00) >> 8]);
 493               	.LM27:
 494 01ce 8989      		ldd r24,Y+17
 495 01d0 9A89      		ldd r25,Y+18
 496 01d2 8070      		andi r24,lo8(3840)
 497 01d4 9F70      		andi r25,hi8(3840)
 498 01d6 292F      		mov r18,r25
 499 01d8 3327      		clr r19
 500 01da 27FD      		sbrc r18,7
 501 01dc 3A95      		dec r19
 502 01de CE01      		movw r24,r28
 503 01e0 0196      		adiw r24,1
 504 01e2 FC01      		movw r30,r24
 505 01e4 E20F      		add r30,r18
 506 01e6 F31F      		adc r31,r19
 507 01e8 8081      		ld r24,Z
 508 01ea 0E94 0000 		call USART_Write
  94:main.c        **** 	USART_Write(hex[(i&0xF0) >> 4]);
 510               	.LM28:
 511 01ee 8989      		ldd r24,Y+17
 512 01f0 9A89      		ldd r25,Y+18
 513 01f2 807F      		andi r24,lo8(240)
 514 01f4 9070      		andi r25,hi8(240)
 515 01f6 9C01      		movw r18,r24
 516 01f8 3595      		asr r19
 517 01fa 2795      		ror r18
 518 01fc 3595      		asr r19
 519 01fe 2795      		ror r18
 520 0200 3595      		asr r19
 521 0202 2795      		ror r18
 522 0204 3595      		asr r19
 523 0206 2795      		ror r18
 524 0208 CE01      		movw r24,r28
 525 020a 0196      		adiw r24,1
 526 020c FC01      		movw r30,r24
 527 020e E20F      		add r30,r18
 528 0210 F31F      		adc r31,r19
 529 0212 8081      		ld r24,Z
 530 0214 0E94 0000 		call USART_Write
  95:main.c        **** 	USART_Write(hex[i&0xF]);
 532               	.LM29:
 533 0218 8989      		ldd r24,Y+17
 534 021a 9A89      		ldd r25,Y+18
 535 021c 9C01      		movw r18,r24
 536 021e 2F70      		andi r18,lo8(15)
 537 0220 3070      		andi r19,hi8(15)
 538 0222 CE01      		movw r24,r28
 539 0224 0196      		adiw r24,1
 540 0226 FC01      		movw r30,r24
 541 0228 E20F      		add r30,r18
 542 022a F31F      		adc r31,r19
 543 022c 8081      		ld r24,Z
 544 022e 0E94 0000 		call USART_Write
 545               	/* epilogue start */
  96:main.c        **** 
  97:main.c        **** }
 547               	.LM30:
 548 0232 6796      		adiw r28,23
 549 0234 0FB6      		in __tmp_reg__,__SREG__
 550 0236 F894      		cli
 551 0238 DEBF      		out __SP_H__,r29
 552 023a 0FBE      		out __SREG__,__tmp_reg__
 553 023c CDBF      		out __SP_L__,r28
 554 023e CF91      		pop r28
 555 0240 DF91      		pop r29
 556 0242 0895      		ret
 561               	.Lscope4:
 563               		.stabd	78,0,0
 566               	.global	printNum
 568               	printNum:
 569               		.stabd	46,0,0
  98:main.c        **** 
  99:main.c        **** void printNum(unsigned char i){
 571               	.LM31:
 572               	.LFBB5:
 573 0244 DF93      		push r29
 574 0246 CF93      		push r28
 575 0248 CDB7      		in r28,__SP_L__
 576 024a DEB7      		in r29,__SP_H__
 577 024c 2D97      		sbiw r28,13
 578 024e 0FB6      		in __tmp_reg__,__SREG__
 579 0250 F894      		cli
 580 0252 DEBF      		out __SP_H__,r29
 581 0254 0FBE      		out __SREG__,__tmp_reg__
 582 0256 CDBF      		out __SP_L__,r28
 583               	/* prologue: function */
 584               	/* frame size = 13 */
 585 0258 8D87      		std Y+13,r24
 100:main.c        ****     
 101:main.c        ****     char str[10];
 102:main.c        ****     memset(str,0,10);
 587               	.LM32:
 588 025a CE01      		movw r24,r28
 589 025c 0396      		adiw r24,3
 590 025e 60E0      		ldi r22,lo8(0)
 591 0260 70E0      		ldi r23,hi8(0)
 592 0262 4AE0      		ldi r20,lo8(10)
 593 0264 50E0      		ldi r21,hi8(10)
 594 0266 0E94 0000 		call memset
 103:main.c        ****     itoa(i,str,10);
 596               	.LM33:
 597 026a 8D85      		ldd r24,Y+13
 598 026c 882F      		mov r24,r24
 599 026e 90E0      		ldi r25,lo8(0)
 600 0270 9E01      		movw r18,r28
 601 0272 2D5F      		subi r18,lo8(-(3))
 602 0274 3F4F      		sbci r19,hi8(-(3))
 603 0276 B901      		movw r22,r18
 604 0278 4AE0      		ldi r20,lo8(10)
 605 027a 50E0      		ldi r21,hi8(10)
 606 027c 0E94 0000 		call itoa
 104:main.c        ****     char * irr = str;
 608               	.LM34:
 609 0280 CE01      		movw r24,r28
 610 0282 0396      		adiw r24,3
 611 0284 9A83      		std Y+2,r25
 612 0286 8983      		std Y+1,r24
 613 0288 00C0      		rjmp .L11
 614               	.L12:
 105:main.c        ****     while(*irr){
 106:main.c        ****         USART_AddToQueue((unsigned char )*irr);
 616               	.LM35:
 617 028a E981      		ldd r30,Y+1
 618 028c FA81      		ldd r31,Y+2
 619 028e 8081      		ld r24,Z
 620 0290 0E94 0000 		call USART_AddToQueue
 107:main.c        ****         irr++;
 622               	.LM36:
 623 0294 8981      		ldd r24,Y+1
 624 0296 9A81      		ldd r25,Y+2
 625 0298 0196      		adiw r24,1
 626 029a 9A83      		std Y+2,r25
 627 029c 8983      		std Y+1,r24
 628               	.L11:
 105:main.c        ****     while(*irr){
 630               	.LM37:
 631 029e E981      		ldd r30,Y+1
 632 02a0 FA81      		ldd r31,Y+2
 633 02a2 8081      		ld r24,Z
 634 02a4 8823      		tst r24
 635 02a6 01F4      		brne .L12
 636               	/* epilogue start */
 108:main.c        ****     }
 109:main.c        ****     
 110:main.c        **** }
 638               	.LM38:
 639 02a8 2D96      		adiw r28,13
 640 02aa 0FB6      		in __tmp_reg__,__SREG__
 641 02ac F894      		cli
 642 02ae DEBF      		out __SP_H__,r29
 643 02b0 0FBE      		out __SREG__,__tmp_reg__
 644 02b2 CDBF      		out __SP_L__,r28
 645 02b4 CF91      		pop r28
 646 02b6 DF91      		pop r29
 647 02b8 0895      		ret
 653               	.Lscope5:
 655               		.stabd	78,0,0
 657               	.global	__vector_50
 659               	__vector_50:
 660               		.stabd	46,0,0
 111:main.c        **** 
 112:main.c        **** ISR(TIMER5_OVF_vect){
 662               	.LM39:
 663               	.LFBB6:
 664 02ba 1F92      		push __zero_reg__
 665 02bc 0F92      		push r0
 666 02be 0FB6      		in r0,__SREG__
 667 02c0 0F92      		push r0
 668 02c2 0090 5B00 		lds r0,91
 669 02c6 0F92      		push r0
 670 02c8 1124      		clr __zero_reg__
 671 02ca 8F93      		push r24
 672 02cc AF93      		push r26
 673 02ce BF93      		push r27
 674 02d0 EF93      		push r30
 675 02d2 FF93      		push r31
 676 02d4 DF93      		push r29
 677 02d6 CF93      		push r28
 678 02d8 CDB7      		in r28,__SP_L__
 679 02da DEB7      		in r29,__SP_H__
 680               	/* prologue: Signal */
 681               	/* frame size = 0 */
 113:main.c        **** 
 114:main.c        **** 	PORTB ^= 0xFF;
 683               	.LM40:
 684 02dc A5E2      		ldi r26,lo8(37)
 685 02de B0E0      		ldi r27,hi8(37)
 686 02e0 E5E2      		ldi r30,lo8(37)
 687 02e2 F0E0      		ldi r31,hi8(37)
 688 02e4 8081      		ld r24,Z
 689 02e6 8095      		com r24
 690 02e8 8C93      		st X,r24
 115:main.c        **** 	TCNT3L = 0;
 692               	.LM41:
 693 02ea E4E9      		ldi r30,lo8(148)
 694 02ec F0E0      		ldi r31,hi8(148)
 695 02ee 1082      		st Z,__zero_reg__
 116:main.c        **** 	TCNT3H = 0;
 697               	.LM42:
 698 02f0 E5E9      		ldi r30,lo8(149)
 699 02f2 F0E0      		ldi r31,hi8(149)
 700 02f4 1082      		st Z,__zero_reg__
 701               	/* epilogue start */
 117:main.c        **** 
 118:main.c        **** }
 703               	.LM43:
 704 02f6 CF91      		pop r28
 705 02f8 DF91      		pop r29
 706 02fa FF91      		pop r31
 707 02fc EF91      		pop r30
 708 02fe BF91      		pop r27
 709 0300 AF91      		pop r26
 710 0302 8F91      		pop r24
 711 0304 0F90      		pop r0
 712 0306 0092 5B00 		sts 91,r0
 713 030a 0F90      		pop r0
 714 030c 0FBE      		out __SREG__,r0
 715 030e 0F90      		pop r0
 716 0310 1F90      		pop __zero_reg__
 717 0312 1895      		reti
 719               	.Lscope6:
 721               		.stabd	78,0,0
 723               	.global	getTimerCount2
 725               	getTimerCount2:
 726               		.stabd	46,0,0
 119:main.c        **** 
 120:main.c        **** unsigned int getTimerCount2(){
 728               	.LM44:
 729               	.LFBB7:
 730 0314 DF93      		push r29
 731 0316 CF93      		push r28
 732 0318 CDB7      		in r28,__SP_L__
 733 031a DEB7      		in r29,__SP_H__
 734               	/* prologue: function */
 735               	/* frame size = 0 */
 121:main.c        **** 
 122:main.c        **** 	//volatile char timerLow = TCNT3L;
 123:main.c        **** 
 124:main.c        **** 	return TCNT0;
 737               	.LM45:
 738 031c E6E4      		ldi r30,lo8(70)
 739 031e F0E0      		ldi r31,hi8(70)
 740 0320 8081      		ld r24,Z
 741 0322 882F      		mov r24,r24
 742 0324 90E0      		ldi r25,lo8(0)
 743               	/* epilogue start */
 125:main.c        **** 
 126:main.c        **** }
 745               	.LM46:
 746 0326 CF91      		pop r28
 747 0328 DF91      		pop r29
 748 032a 0895      		ret
 750               	.Lscope7:
 752               		.stabd	78,0,0
 755               	.global	vTaskFunction_1
 757               	vTaskFunction_1:
 758               		.stabd	46,0,0
 127:main.c        **** 
 128:main.c        **** void vTaskFunction_1(void *pvParameters)
 129:main.c        **** {	
 760               	.LM47:
 761               	.LFBB8:
 762 032c DF93      		push r29
 763 032e CF93      		push r28
 764 0330 0F92      		push __tmp_reg__
 765 0332 0F92      		push __tmp_reg__
 766 0334 CDB7      		in r28,__SP_L__
 767 0336 DEB7      		in r29,__SP_H__
 768               	/* prologue: function */
 769               	/* frame size = 2 */
 770 0338 9A83      		std Y+2,r25
 771 033a 8983      		std Y+1,r24
 130:main.c        ****     USART_Init(9600, 16000000);
 773               	.LM48:
 774 033c 80E8      		ldi r24,lo8(9600)
 775 033e 95E2      		ldi r25,hi8(9600)
 776 0340 40E0      		ldi r20,lo8(16000000)
 777 0342 54E2      		ldi r21,hi8(16000000)
 778 0344 64EF      		ldi r22,hlo8(16000000)
 779 0346 70E0      		ldi r23,hhi8(16000000)
 780 0348 0E94 0000 		call USART_Init
 781               	.L19:
 782 034c 00C0      		rjmp .L19
 784               	.Lscope8:
 786               		.stabd	78,0,0
 788               	.global	vIO_init
 790               	vIO_init:
 791               		.stabd	46,0,0
 131:main.c        ****     for(;;);
 132:main.c        **** 	//static const char* str = "Hello World\n";
 133:main.c        **** 	//for(;;){
 134:main.c        **** 		//PORTB = 0;
 135:main.c        **** 
 136:main.c        **** 		//USART_TransmitString("Hello World!\n");
 137:main.c        **** 	//	USART_AddToQueue('I');
 138:main.c        **** 		//USART_TransmitString("H\n");
 139:main.c        **** 	//	vTaskDelay(25);
 140:main.c        **** 	//}
 141:main.c        **** 	/*for(;;){
 142:main.c        **** 		printNum(getTimerCount2());
 143:main.c        **** 		USART_Write('\n');
 144:main.c        **** 	}*/
 145:main.c        **** 
 146:main.c        ****     for (;;)  {
 147:main.c        **** //        PORTB ^=  0xff;j
 148:main.c        **** 		//PCMSK2 = 1;
 149:main.c        ****     	printNum(getSonarData(0));
 150:main.c        **** 		USART_AddToQueue(' ');
 151:main.c        **** 		//printNum(getSonarData(1));
 152:main.c        **** 		//USART_Write('\n');
 153:main.c        ****       	vTaskDelay(25);
 154:main.c        ****         /* Get and return received data from buffer */
 155:main.c        ****         // UDR0;
 156:main.c        ****     }
 157:main.c        **** }
 158:main.c        **** 
 159:main.c        **** void vIO_init(void)
 160:main.c        **** {
 793               	.LM49:
 794               	.LFBB9:
 795 034e DF93      		push r29
 796 0350 CF93      		push r28
 797 0352 CDB7      		in r28,__SP_L__
 798 0354 DEB7      		in r29,__SP_H__
 799               	/* prologue: function */
 800               	/* frame size = 0 */
 161:main.c        ****     //- set PortB as output
 162:main.c        **** 	DDRB = 0xFF; 
 802               	.LM50:
 803 0356 E4E2      		ldi r30,lo8(36)
 804 0358 F0E0      		ldi r31,hi8(36)
 805 035a 8FEF      		ldi r24,lo8(-1)
 806 035c 8083      		st Z,r24
 163:main.c        ****     PORTB = 0; 
 808               	.LM51:
 809 035e E5E2      		ldi r30,lo8(37)
 810 0360 F0E0      		ldi r31,hi8(37)
 811 0362 1082      		st Z,__zero_reg__
 812               	/* epilogue start */
 164:main.c        **** }
 814               	.LM52:
 815 0364 CF91      		pop r28
 816 0366 DF91      		pop r29
 817 0368 0895      		ret
 819               	.Lscope9:
 821               		.stabd	78,0,0
 822               		.comm sonarTime,2,1
 826               	.Letext0:
 827               	.global __do_copy_data
 828               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccqc97Nt.s:2      *ABS*:0000003f __SREG__
     /tmp/ccqc97Nt.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccqc97Nt.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccqc97Nt.s:5      *ABS*:00000034 __CCP__
     /tmp/ccqc97Nt.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccqc97Nt.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccqc97Nt.s:130    .bss:00000000 count
     /tmp/ccqc97Nt.s:136    .text:00000000 vApplicationTickHook
     /tmp/ccqc97Nt.s:167    .text:00000020 vApplicationStackOverflowHook
     /tmp/ccqc97Nt.s:201    .text:0000002e main
     /tmp/ccqc97Nt.s:790    .text:0000034e vIO_init
     /tmp/ccqc97Nt.s:757    .text:0000032c vTaskFunction_1
     /tmp/ccqc97Nt.s:400    .data:0000000c C.2.2033
     /tmp/ccqc97Nt.s:422    .text:00000158 printHex
     /tmp/ccqc97Nt.s:568    .text:00000244 printNum
     /tmp/ccqc97Nt.s:659    .text:000002ba __vector_50
     /tmp/ccqc97Nt.s:725    .text:00000314 getTimerCount2
                            *COM*:00000002 sonarTime

UNDEFINED SYMBOLS
xTaskGenericCreate
vTaskSonar
vTaskUSARTWrite
vTaskUSARTRead
vTaskStartScheduler
USART_Write
memset
itoa
USART_AddToQueue
USART_Init
__do_copy_data
__do_clear_bss
