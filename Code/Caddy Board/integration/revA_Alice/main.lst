   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 159               	.global	count
 160               		.section .bss
 163               	count:
 164 0000 0000      		.zero	2
 165               		.comm	sonarTime,2,1
 166               		.text
 168               	.global	vApplicationTickHook
 170               	vApplicationTickHook:
 171               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        ****  FreeRTOS V6.1.0
   3:main.c        ****  
   4:main.c        ****  This is a basic RTOS program. It turns on the LEDs.
   5:main.c        ****  Nothing too exciting.
   6:main.c        ****  
   7:main.c        ****  */
   8:main.c        **** 
   9:main.c        **** #include <stdint.h>
  10:main.c        **** #include <avr/io.h>
  11:main.c        **** #include <string.h>
  12:main.c        **** #include <stdlib.h>
  13:main.c        **** #include <stdio.h>
  14:main.c        **** #include <math.h>
  15:main.c        **** #include "FreeRTOS.h"
  16:main.c        **** #include <avr/io.h>
  17:main.c        **** #include <avr/interrupt.h>
  18:main.c        **** #include "task.h"
  19:main.c        **** #include "usart.h"
  20:main.c        **** #include "Components/Sonar/Sonar.h"
  21:main.c        **** #include "queue.h"
  22:main.c        **** #include "spi.h"
  23:main.c        **** #include "ADC.h"
  24:main.c        **** #include "Components/FNR/FNR.h"
  25:main.c        **** #include "Components/Speed/Speed.h"
  26:main.c        **** 
  27:main.c        **** void vTaskFunction_1(void *pvParameters);
  28:main.c        **** void vTaskFunction_2(void *pvParameters);
  29:main.c        **** void vTaskFunction_3(void *pvParameters);
  30:main.c        **** void vTaskPot(void *pvParameters);
  31:main.c        **** void vIO_init(void);
  32:main.c        **** void vApplicationTickHook();
  33:main.c        **** void printNum(unsigned char i);
  34:main.c        **** void printHex(int i);
  35:main.c        **** 
  36:main.c        **** int count = 0;
  37:main.c        **** 
  38:main.c        **** int sonarTime;
  39:main.c        **** 
  40:main.c        **** void vApplicationTickHook()
  41:main.c        **** {
 173               	.LM0:
 174               	.LFBB1:
 175 0000 CF93      		push r28
 176 0002 DF93      		push r29
 177 0004 CDB7      		in r28,__SP_L__
 178 0006 DEB7      		in r29,__SP_H__
 179               	/* prologue: function */
 180               	/* frame size = 0 */
 181               	/* stack size = 2 */
 182               	.L__stack_usage = 2
  42:main.c        ****     count++;
 184               	.LM1:
 185 0008 8091 0000 		lds r24,count
 186 000c 9091 0000 		lds r25,count+1
 187 0010 0196      		adiw r24,1
 188 0012 9093 0000 		sts count+1,r25
 189 0016 8093 0000 		sts count,r24
 190               	/* epilogue start */
  43:main.c        **** }
 192               	.LM2:
 193 001a DF91      		pop r29
 194 001c CF91      		pop r28
 195 001e 0895      		ret
 197               	.Lscope1:
 199               		.stabd	78,0,0
 201               	.global	vApplicationStackOverflowHook
 203               	vApplicationStackOverflowHook:
 204               		.stabd	46,0,0
  44:main.c        **** 
  45:main.c        **** void vApplicationStackOverflowHook(){
 206               	.LM3:
 207               	.LFBB2:
 208 0020 CF93      		push r28
 209 0022 DF93      		push r29
 210 0024 CDB7      		in r28,__SP_L__
 211 0026 DEB7      		in r29,__SP_H__
 212               	/* prologue: function */
 213               	/* frame size = 0 */
 214               	/* stack size = 2 */
 215               	.L__stack_usage = 2
  46:main.c        **** 	return;
 217               	.LM4:
 218 0028 0000      		nop
 219               	/* epilogue start */
  47:main.c        **** }
 221               	.LM5:
 222 002a DF91      		pop r29
 223 002c CF91      		pop r28
 224 002e 0895      		ret
 226               	.Lscope2:
 228               		.stabd	78,0,0
 229               		.section	.rodata
 230               	.LC1:
 231 0000 5430 00   		.string	"T0"
 232               	.LC2:
 233 0003 5432 00   		.string	"T2"
 234               	.LC3:
 235 0006 5433 00   		.string	"T3"
 236               		.text
 238               	.global	main
 240               	main:
 241               		.stabd	46,0,0
  48:main.c        **** /*-----------------------------------------------------------*/
  49:main.c        **** 
  50:main.c        **** int main( void )
  51:main.c        **** {
 243               	.LM6:
 244               	.LFBB3:
 245 0030 AF92      		push r10
 246 0032 BF92      		push r11
 247 0034 CF92      		push r12
 248 0036 DF92      		push r13
 249 0038 EF92      		push r14
 250 003a FF92      		push r15
 251 003c 0F93      		push r16
 252 003e CF93      		push r28
 253 0040 DF93      		push r29
 254 0042 00D0      		rcall .
 255 0044 00D0      		rcall .
 256 0046 CDB7      		in r28,__SP_L__
 257 0048 DEB7      		in r29,__SP_H__
 258               	/* prologue: function */
 259               	/* frame size = 6 */
 260               	/* stack size = 15 */
 261               	.L__stack_usage = 15
  52:main.c        ****     
  53:main.c        ****     //- wimpy variable defs
  54:main.c        **** 	uint8_t val[2] = {0x3F, 0xFE};
 263               	.LM7:
 264 004a 8FE3      		ldi r24,lo8(63)
 265 004c 8D83      		std Y+5,r24
 266 004e 8EEF      		ldi r24,lo8(-2)
 267 0050 8E83      		std Y+6,r24
  55:main.c        ****     uint8_t *val0, *val1;
  56:main.c        ****     
  57:main.c        **** 	//- avoid pesky warnings...
  58:main.c        **** 	val0 = val + 0;
 269               	.LM8:
 270 0052 CE01      		movw r24,r28
 271 0054 0596      		adiw r24,5
 272 0056 9A83      		std Y+2,r25
 273 0058 8983      		std Y+1,r24
  59:main.c        **** 	val1 = val + 1;
 275               	.LM9:
 276 005a CE01      		movw r24,r28
 277 005c 0596      		adiw r24,5
 278 005e 0196      		adiw r24,1
 279 0060 9C83      		std Y+4,r25
 280 0062 8B83      		std Y+3,r24
  60:main.c        ****     
  61:main.c        **** 	DDRA = 0xF7;
 282               	.LM10:
 283 0064 81E2      		ldi r24,lo8(33)
 284 0066 90E0      		ldi r25,0
 285 0068 27EF      		ldi r18,lo8(-9)
 286 006a FC01      		movw r30,r24
 287 006c 2083      		st Z,r18
  62:main.c        **** 	PORTA = 0;
 289               	.LM11:
 290 006e 82E2      		ldi r24,lo8(34)
 291 0070 90E0      		ldi r25,0
 292 0072 FC01      		movw r30,r24
 293 0074 1082      		st Z,__zero_reg__
  63:main.c        **** 	DDRD = 0xFF;
 295               	.LM12:
 296 0076 8AE2      		ldi r24,lo8(42)
 297 0078 90E0      		ldi r25,0
 298 007a 2FEF      		ldi r18,lo8(-1)
 299 007c FC01      		movw r30,r24
 300 007e 2083      		st Z,r18
  64:main.c        **** 	DDRE = 0xFF;
 302               	.LM13:
 303 0080 8DE2      		ldi r24,lo8(45)
 304 0082 90E0      		ldi r25,0
 305 0084 2FEF      		ldi r18,lo8(-1)
 306 0086 FC01      		movw r30,r24
 307 0088 2083      		st Z,r18
  65:main.c        **** 	DDRB = 0xFF; 
 309               	.LM14:
 310 008a 84E2      		ldi r24,lo8(36)
 311 008c 90E0      		ldi r25,0
 312 008e 2FEF      		ldi r18,lo8(-1)
 313 0090 FC01      		movw r30,r24
 314 0092 2083      		st Z,r18
  66:main.c        **** 	DDRK = 0;
 316               	.LM15:
 317 0094 87E0      		ldi r24,lo8(7)
 318 0096 91E0      		ldi r25,lo8(1)
 319 0098 FC01      		movw r30,r24
 320 009a 1082      		st Z,__zero_reg__
  67:main.c        **** 
  68:main.c        **** 	PORTD = 0;
 322               	.LM16:
 323 009c 8BE2      		ldi r24,lo8(43)
 324 009e 90E0      		ldi r25,0
 325 00a0 FC01      		movw r30,r24
 326 00a2 1082      		st Z,__zero_reg__
  69:main.c        **** 	PORTE = 0;
 328               	.LM17:
 329 00a4 8EE2      		ldi r24,lo8(46)
 330 00a6 90E0      		ldi r25,0
 331 00a8 FC01      		movw r30,r24
 332 00aa 1082      		st Z,__zero_reg__
  70:main.c        **** 	PORTK = 2;
 334               	.LM18:
 335 00ac 88E0      		ldi r24,lo8(8)
 336 00ae 91E0      		ldi r25,lo8(1)
 337 00b0 22E0      		ldi r18,lo8(2)
 338 00b2 FC01      		movw r30,r24
 339 00b4 2083      		st Z,r18
  71:main.c        **** 
  72:main.c        ****     //- init IO with goodness
  73:main.c        **** 	vIO_init();
 341               	.LM19:
 342 00b6 0E94 0000 		call vIO_init
  74:main.c        **** 
  75:main.c        **** 	//- Create a 
  76:main.c        **** 	xTaskCreate( (pdTASK_CODE) vTaskFunction_1, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
 344               	.LM20:
 345 00ba 8B81      		ldd r24,Y+3
 346 00bc 9C81      		ldd r25,Y+4
 347 00be A12C      		mov r10,__zero_reg__
 348 00c0 B12C      		mov r11,__zero_reg__
 349 00c2 C12C      		mov r12,__zero_reg__
 350 00c4 D12C      		mov r13,__zero_reg__
 351 00c6 E12C      		mov r14,__zero_reg__
 352 00c8 F12C      		mov r15,__zero_reg__
 353 00ca 01E0      		ldi r16,lo8(1)
 354 00cc 9C01      		movw r18,r24
 355 00ce 4DE3      		ldi r20,lo8(61)
 356 00d0 54E0      		ldi r21,lo8(4)
 357 00d2 60E0      		ldi r22,lo8(.LC1)
 358 00d4 70E0      		ldi r23,hi8(.LC1)
 359 00d6 80E0      		ldi r24,lo8(gs(vTaskFunction_1))
 360 00d8 90E0      		ldi r25,hi8(gs(vTaskFunction_1))
 361 00da 0E94 0000 		call xTaskGenericCreate
  77:main.c        ****                 (void *) val1, 1, NULL );
  78:main.c        ****    xTaskCreate( (pdTASK_CODE) vTaskFunction_2, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
 363               	.LM21:
 364 00de 8B81      		ldd r24,Y+3
 365 00e0 9C81      		ldd r25,Y+4
 366 00e2 A12C      		mov r10,__zero_reg__
 367 00e4 B12C      		mov r11,__zero_reg__
 368 00e6 C12C      		mov r12,__zero_reg__
 369 00e8 D12C      		mov r13,__zero_reg__
 370 00ea E12C      		mov r14,__zero_reg__
 371 00ec F12C      		mov r15,__zero_reg__
 372 00ee 01E0      		ldi r16,lo8(1)
 373 00f0 9C01      		movw r18,r24
 374 00f2 4DE3      		ldi r20,lo8(61)
 375 00f4 54E0      		ldi r21,lo8(4)
 376 00f6 60E0      		ldi r22,lo8(.LC1)
 377 00f8 70E0      		ldi r23,hi8(.LC1)
 378 00fa 80E0      		ldi r24,lo8(gs(vTaskFunction_2))
 379 00fc 90E0      		ldi r25,hi8(gs(vTaskFunction_2))
 380 00fe 0E94 0000 		call xTaskGenericCreate
  79:main.c        ****                 (void *) val1, 1, NULL );
  80:main.c        ****    /*xTaskCreate( (pdTASK_CODE) vTaskFunction_3, (signed char *) "T0", configMINIMAL_STACK_SIZE+100
  81:main.c        ****                 (void *) val1, 1, NULL );
  82:main.c        **** 	xTaskCreate( (pdTASK_CODE) vTaskPot, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
  83:main.c        ****                 (void *) val1, 1, NULL );*/
  84:main.c        **** 
  85:main.c        ****  
  86:main.c        ****    /*xTaskCreate( (pdTASK_CODE) vTaskSonar, (signed char *) "T1", configMINIMAL_STACK_SIZE+1000,
  87:main.c        ****                 (void *) val1, 1, NULL );*/
  88:main.c        **** 
  89:main.c        ****    xTaskCreate( (pdTASK_CODE) vTaskUSARTWrite, (signed char *) "T2", configMINIMAL_STACK_SIZE+1000,
 382               	.LM22:
 383 0102 8B81      		ldd r24,Y+3
 384 0104 9C81      		ldd r25,Y+4
 385 0106 A12C      		mov r10,__zero_reg__
 386 0108 B12C      		mov r11,__zero_reg__
 387 010a C12C      		mov r12,__zero_reg__
 388 010c D12C      		mov r13,__zero_reg__
 389 010e E12C      		mov r14,__zero_reg__
 390 0110 F12C      		mov r15,__zero_reg__
 391 0112 01E0      		ldi r16,lo8(1)
 392 0114 9C01      		movw r18,r24
 393 0116 4DE3      		ldi r20,lo8(61)
 394 0118 54E0      		ldi r21,lo8(4)
 395 011a 60E0      		ldi r22,lo8(.LC2)
 396 011c 70E0      		ldi r23,hi8(.LC2)
 397 011e 80E0      		ldi r24,lo8(gs(vTaskUSARTWrite))
 398 0120 90E0      		ldi r25,hi8(gs(vTaskUSARTWrite))
 399 0122 0E94 0000 		call xTaskGenericCreate
  90:main.c        ****    				(void *) val1, 1, NULL);
  91:main.c        **** 
  92:main.c        ****    xTaskCreate( (pdTASK_CODE) vTaskUSARTRead, (signed char *) "T3", configMINIMAL_STACK_SIZE+1000,
 401               	.LM23:
 402 0126 8B81      		ldd r24,Y+3
 403 0128 9C81      		ldd r25,Y+4
 404 012a A12C      		mov r10,__zero_reg__
 405 012c B12C      		mov r11,__zero_reg__
 406 012e C12C      		mov r12,__zero_reg__
 407 0130 D12C      		mov r13,__zero_reg__
 408 0132 E12C      		mov r14,__zero_reg__
 409 0134 F12C      		mov r15,__zero_reg__
 410 0136 01E0      		ldi r16,lo8(1)
 411 0138 9C01      		movw r18,r24
 412 013a 4DE3      		ldi r20,lo8(61)
 413 013c 54E0      		ldi r21,lo8(4)
 414 013e 60E0      		ldi r22,lo8(.LC3)
 415 0140 70E0      		ldi r23,hi8(.LC3)
 416 0142 80E0      		ldi r24,lo8(gs(vTaskUSARTRead))
 417 0144 90E0      		ldi r25,hi8(gs(vTaskUSARTRead))
 418 0146 0E94 0000 		call xTaskGenericCreate
  93:main.c        ****    				(void *) val1, 1, NULL);
  94:main.c        **** 
  95:main.c        **** 	
  96:main.c        **** 	xTaskCreate( (pdTASK_CODE) vTaskADC, (signed char *) "T3", configMINIMAL_STACK_SIZE+1000,
 420               	.LM24:
 421 014a 8B81      		ldd r24,Y+3
 422 014c 9C81      		ldd r25,Y+4
 423 014e A12C      		mov r10,__zero_reg__
 424 0150 B12C      		mov r11,__zero_reg__
 425 0152 C12C      		mov r12,__zero_reg__
 426 0154 D12C      		mov r13,__zero_reg__
 427 0156 E12C      		mov r14,__zero_reg__
 428 0158 F12C      		mov r15,__zero_reg__
 429 015a 01E0      		ldi r16,lo8(1)
 430 015c 9C01      		movw r18,r24
 431 015e 4DE3      		ldi r20,lo8(61)
 432 0160 54E0      		ldi r21,lo8(4)
 433 0162 60E0      		ldi r22,lo8(.LC3)
 434 0164 70E0      		ldi r23,hi8(.LC3)
 435 0166 80E0      		ldi r24,lo8(gs(vTaskADC))
 436 0168 90E0      		ldi r25,hi8(gs(vTaskADC))
 437 016a 0E94 0000 		call xTaskGenericCreate
  97:main.c        ****    				(void *) val1, 1, NULL);
  98:main.c        **** 
  99:main.c        **** //   xTaskCreate( (pdTASK_CODE) vTaskUSARTLog, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
 100:main.c        **** //   				(void *) val1, 1, NULL);
 101:main.c        ****     
 102:main.c        ****     //- kick off the scheduler
 103:main.c        **** 	vTaskStartScheduler();
 439               	.LM25:
 440 016e 0E94 0000 		call vTaskStartScheduler
 104:main.c        ****     
 105:main.c        **** 	return 0;
 442               	.LM26:
 443 0172 80E0      		ldi r24,0
 444 0174 90E0      		ldi r25,0
 445               	/* epilogue start */
 106:main.c        **** }
 447               	.LM27:
 448 0176 2696      		adiw r28,6
 449 0178 0FB6      		in __tmp_reg__,__SREG__
 450 017a F894      		cli
 451 017c DEBF      		out __SP_H__,r29
 452 017e 0FBE      		out __SREG__,__tmp_reg__
 453 0180 CDBF      		out __SP_L__,r28
 454 0182 DF91      		pop r29
 455 0184 CF91      		pop r28
 456 0186 0F91      		pop r16
 457 0188 FF90      		pop r15
 458 018a EF90      		pop r14
 459 018c DF90      		pop r13
 460 018e CF90      		pop r12
 461 0190 BF90      		pop r11
 462 0192 AF90      		pop r10
 463 0194 0895      		ret
 470               	.Lscope3:
 472               		.stabd	78,0,0
 473               		.section	.rodata
 474               	.LC0:
 475 0009 30        		.byte	48
 476 000a 31        		.byte	49
 477 000b 32        		.byte	50
 478 000c 33        		.byte	51
 479 000d 34        		.byte	52
 480 000e 35        		.byte	53
 481 000f 36        		.byte	54
 482 0010 37        		.byte	55
 483 0011 38        		.byte	56
 484 0012 39        		.byte	57
 485 0013 41        		.byte	65
 486 0014 42        		.byte	66
 487 0015 43        		.byte	67
 488 0016 44        		.byte	68
 489 0017 45        		.byte	69
 490 0018 46        		.byte	70
 491               		.text
 494               	.global	printHex
 496               	printHex:
 497               		.stabd	46,0,0
 107:main.c        **** /*-----------------------------------------------------------*/
 108:main.c        **** 
 109:main.c        **** void printHex(int i){
 499               	.LM28:
 500               	.LFBB4:
 501 0196 CF93      		push r28
 502 0198 DF93      		push r29
 503 019a CDB7      		in r28,__SP_L__
 504 019c DEB7      		in r29,__SP_H__
 505 019e 6297      		sbiw r28,18
 506 01a0 0FB6      		in __tmp_reg__,__SREG__
 507 01a2 F894      		cli
 508 01a4 DEBF      		out __SP_H__,r29
 509 01a6 0FBE      		out __SREG__,__tmp_reg__
 510 01a8 CDBF      		out __SP_L__,r28
 511               	/* prologue: function */
 512               	/* frame size = 18 */
 513               	/* stack size = 20 */
 514               	.L__stack_usage = 20
 515 01aa 9A8B      		std Y+18,r25
 516 01ac 898B      		std Y+17,r24
 110:main.c        **** 	char hex[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 518               	.LM29:
 519 01ae 20E1      		ldi r18,lo8(16)
 520 01b0 E0E0      		ldi r30,lo8(.LC0)
 521 01b2 F0E0      		ldi r31,hi8(.LC0)
 522 01b4 CE01      		movw r24,r28
 523 01b6 0196      		adiw r24,1
 524 01b8 DC01      		movw r26,r24
 525               		0:
 526 01ba 0190      		ld r0,Z+
 527 01bc 0D92      		st X+,r0
 528 01be 2A95      		dec r18
 529 01c0 01F4      		brne 0b
 111:main.c        **** 
 112:main.c        **** 	USART_Write(hex[(i&0xF000) >> 12]);
 531               	.LM30:
 532 01c2 8989      		ldd r24,Y+17
 533 01c4 9A89      		ldd r25,Y+18
 534 01c6 892F      		mov r24,r25
 535 01c8 9927      		clr r25
 536 01ca 8295      		swap r24
 537 01cc 8F70      		andi r24,0x0f
 538 01ce 9E01      		movw r18,r28
 539 01d0 2F5F      		subi r18,-1
 540 01d2 3F4F      		sbci r19,-1
 541 01d4 820F      		add r24,r18
 542 01d6 931F      		adc r25,r19
 543 01d8 FC01      		movw r30,r24
 544 01da 8081      		ld r24,Z
 545 01dc 0E94 0000 		call USART_Write
 113:main.c        **** 	USART_Write(hex[(i&0xF00) >> 8]);
 547               	.LM31:
 548 01e0 8989      		ldd r24,Y+17
 549 01e2 9A89      		ldd r25,Y+18
 550 01e4 8827      		clr r24
 551 01e6 9F70      		andi r25,15
 552 01e8 892F      		mov r24,r25
 553 01ea 990F      		lsl r25
 554 01ec 990B      		sbc r25,r25
 555 01ee 9E01      		movw r18,r28
 556 01f0 2F5F      		subi r18,-1
 557 01f2 3F4F      		sbci r19,-1
 558 01f4 820F      		add r24,r18
 559 01f6 931F      		adc r25,r19
 560 01f8 FC01      		movw r30,r24
 561 01fa 8081      		ld r24,Z
 562 01fc 0E94 0000 		call USART_Write
 114:main.c        **** 	USART_Write(hex[(i&0xF0) >> 4]);
 564               	.LM32:
 565 0200 8989      		ldd r24,Y+17
 566 0202 9A89      		ldd r25,Y+18
 567 0204 807F      		andi r24,240
 568 0206 9927      		clr r25
 569 0208 9595      		asr r25
 570 020a 8795      		ror r24
 571 020c 9595      		asr r25
 572 020e 8795      		ror r24
 573 0210 9595      		asr r25
 574 0212 8795      		ror r24
 575 0214 9595      		asr r25
 576 0216 8795      		ror r24
 577 0218 9E01      		movw r18,r28
 578 021a 2F5F      		subi r18,-1
 579 021c 3F4F      		sbci r19,-1
 580 021e 820F      		add r24,r18
 581 0220 931F      		adc r25,r19
 582 0222 FC01      		movw r30,r24
 583 0224 8081      		ld r24,Z
 584 0226 0E94 0000 		call USART_Write
 115:main.c        **** 	USART_Write(hex[i&0xF]);
 586               	.LM33:
 587 022a 8989      		ldd r24,Y+17
 588 022c 9A89      		ldd r25,Y+18
 589 022e 8F70      		andi r24,15
 590 0230 9927      		clr r25
 591 0232 9E01      		movw r18,r28
 592 0234 2F5F      		subi r18,-1
 593 0236 3F4F      		sbci r19,-1
 594 0238 820F      		add r24,r18
 595 023a 931F      		adc r25,r19
 596 023c FC01      		movw r30,r24
 597 023e 8081      		ld r24,Z
 598 0240 0E94 0000 		call USART_Write
 599               	/* epilogue start */
 116:main.c        **** 
 117:main.c        **** }
 601               	.LM34:
 602 0244 6296      		adiw r28,18
 603 0246 0FB6      		in __tmp_reg__,__SREG__
 604 0248 F894      		cli
 605 024a DEBF      		out __SP_H__,r29
 606 024c 0FBE      		out __SREG__,__tmp_reg__
 607 024e CDBF      		out __SP_L__,r28
 608 0250 DF91      		pop r29
 609 0252 CF91      		pop r28
 610 0254 0895      		ret
 615               	.Lscope4:
 617               		.stabd	78,0,0
 620               	.global	printNum
 622               	printNum:
 623               		.stabd	46,0,0
 118:main.c        **** 
 119:main.c        **** void printNum(unsigned char i){
 625               	.LM35:
 626               	.LFBB5:
 627 0256 CF93      		push r28
 628 0258 DF93      		push r29
 629 025a CDB7      		in r28,__SP_L__
 630 025c DEB7      		in r29,__SP_H__
 631 025e 2D97      		sbiw r28,13
 632 0260 0FB6      		in __tmp_reg__,__SREG__
 633 0262 F894      		cli
 634 0264 DEBF      		out __SP_H__,r29
 635 0266 0FBE      		out __SREG__,__tmp_reg__
 636 0268 CDBF      		out __SP_L__,r28
 637               	/* prologue: function */
 638               	/* frame size = 13 */
 639               	/* stack size = 15 */
 640               	.L__stack_usage = 15
 641 026a 8D87      		std Y+13,r24
 120:main.c        ****     
 121:main.c        ****     char str[10];
 122:main.c        ****     memset(str,0,10);
 643               	.LM36:
 644 026c CE01      		movw r24,r28
 645 026e 0396      		adiw r24,3
 646 0270 4AE0      		ldi r20,lo8(10)
 647 0272 50E0      		ldi r21,0
 648 0274 60E0      		ldi r22,0
 649 0276 70E0      		ldi r23,0
 650 0278 0E94 0000 		call memset
 123:main.c        ****     itoa(i,str,10);
 652               	.LM37:
 653 027c 8D85      		ldd r24,Y+13
 654 027e 882F      		mov r24,r24
 655 0280 90E0      		ldi r25,0
 656 0282 9E01      		movw r18,r28
 657 0284 2D5F      		subi r18,-3
 658 0286 3F4F      		sbci r19,-1
 659 0288 4AE0      		ldi r20,lo8(10)
 660 028a 50E0      		ldi r21,0
 661 028c B901      		movw r22,r18
 662 028e 0E94 0000 		call itoa
 124:main.c        ****     char * irr = str;
 664               	.LM38:
 665 0292 CE01      		movw r24,r28
 666 0294 0396      		adiw r24,3
 667 0296 9A83      		std Y+2,r25
 668 0298 8983      		std Y+1,r24
 125:main.c        ****     while(*irr){
 670               	.LM39:
 671 029a 00C0      		rjmp .L8
 672               	.L9:
 126:main.c        ****         USART_AddToQueue((unsigned char )*irr);
 674               	.LM40:
 675 029c 8981      		ldd r24,Y+1
 676 029e 9A81      		ldd r25,Y+2
 677 02a0 FC01      		movw r30,r24
 678 02a2 8081      		ld r24,Z
 679 02a4 0E94 0000 		call USART_AddToQueue
 127:main.c        ****         irr++;
 681               	.LM41:
 682 02a8 8981      		ldd r24,Y+1
 683 02aa 9A81      		ldd r25,Y+2
 684 02ac 0196      		adiw r24,1
 685 02ae 9A83      		std Y+2,r25
 686 02b0 8983      		std Y+1,r24
 687               	.L8:
 125:main.c        ****     while(*irr){
 689               	.LM42:
 690 02b2 8981      		ldd r24,Y+1
 691 02b4 9A81      		ldd r25,Y+2
 692 02b6 FC01      		movw r30,r24
 693 02b8 8081      		ld r24,Z
 694 02ba 8823      		tst r24
 695 02bc 01F4      		brne .L9
 696               	/* epilogue start */
 128:main.c        ****     }
 129:main.c        ****     
 130:main.c        **** }
 698               	.LM43:
 699 02be 2D96      		adiw r28,13
 700 02c0 0FB6      		in __tmp_reg__,__SREG__
 701 02c2 F894      		cli
 702 02c4 DEBF      		out __SP_H__,r29
 703 02c6 0FBE      		out __SREG__,__tmp_reg__
 704 02c8 CDBF      		out __SP_L__,r28
 705 02ca DF91      		pop r29
 706 02cc CF91      		pop r28
 707 02ce 0895      		ret
 713               	.Lscope5:
 715               		.stabd	78,0,0
 717               	.global	__vector_50
 719               	__vector_50:
 720               		.stabd	46,0,0
 131:main.c        **** 
 132:main.c        **** ISR(TIMER5_OVF_vect){
 722               	.LM44:
 723               	.LFBB6:
 724 02d0 1F92      		push r1
 725 02d2 0F92      		push r0
 726 02d4 0090 5F00 		lds r0,95
 727 02d8 0F92      		push r0
 728 02da 1124      		clr __zero_reg__
 729 02dc 0090 5B00 		lds r0,91
 730 02e0 0F92      		push r0
 731 02e2 2F93      		push r18
 732 02e4 3F93      		push r19
 733 02e6 8F93      		push r24
 734 02e8 9F93      		push r25
 735 02ea EF93      		push r30
 736 02ec FF93      		push r31
 737 02ee CF93      		push r28
 738 02f0 DF93      		push r29
 739 02f2 CDB7      		in r28,__SP_L__
 740 02f4 DEB7      		in r29,__SP_H__
 741               	/* prologue: Signal */
 742               	/* frame size = 0 */
 743               	/* stack size = 12 */
 744               	.L__stack_usage = 12
 133:main.c        **** 
 134:main.c        **** 	PORTB ^= 0xFF;
 746               	.LM45:
 747 02f6 85E2      		ldi r24,lo8(37)
 748 02f8 90E0      		ldi r25,0
 749 02fa 25E2      		ldi r18,lo8(37)
 750 02fc 30E0      		ldi r19,0
 751 02fe F901      		movw r30,r18
 752 0300 2081      		ld r18,Z
 753 0302 2095      		com r18
 754 0304 FC01      		movw r30,r24
 755 0306 2083      		st Z,r18
 135:main.c        **** 	TCNT3L = 0;
 757               	.LM46:
 758 0308 84E9      		ldi r24,lo8(-108)
 759 030a 90E0      		ldi r25,0
 760 030c FC01      		movw r30,r24
 761 030e 1082      		st Z,__zero_reg__
 136:main.c        **** 	TCNT3H = 0;
 763               	.LM47:
 764 0310 85E9      		ldi r24,lo8(-107)
 765 0312 90E0      		ldi r25,0
 766 0314 FC01      		movw r30,r24
 767 0316 1082      		st Z,__zero_reg__
 768               	/* epilogue start */
 137:main.c        **** 
 138:main.c        **** }
 770               	.LM48:
 771 0318 DF91      		pop r29
 772 031a CF91      		pop r28
 773 031c FF91      		pop r31
 774 031e EF91      		pop r30
 775 0320 9F91      		pop r25
 776 0322 8F91      		pop r24
 777 0324 3F91      		pop r19
 778 0326 2F91      		pop r18
 779 0328 0F90      		pop r0
 780 032a 0092 5B00 		sts 91,r0
 781 032e 0F90      		pop r0
 782 0330 0092 5F00 		sts 95,r0
 783 0334 0F90      		pop r0
 784 0336 1F90      		pop r1
 785 0338 1895      		reti
 787               	.Lscope6:
 789               		.stabd	78,0,0
 791               	.global	getTimerCount2
 793               	getTimerCount2:
 794               		.stabd	46,0,0
 139:main.c        **** 
 140:main.c        **** unsigned int getTimerCount2(){
 796               	.LM49:
 797               	.LFBB7:
 798 033a CF93      		push r28
 799 033c DF93      		push r29
 800 033e CDB7      		in r28,__SP_L__
 801 0340 DEB7      		in r29,__SP_H__
 802               	/* prologue: function */
 803               	/* frame size = 0 */
 804               	/* stack size = 2 */
 805               	.L__stack_usage = 2
 141:main.c        **** 
 142:main.c        **** 	//volatile char timerLow = TCNT3L;
 143:main.c        **** 
 144:main.c        **** 	return TCNT0;
 807               	.LM50:
 808 0342 86E4      		ldi r24,lo8(70)
 809 0344 90E0      		ldi r25,0
 810 0346 FC01      		movw r30,r24
 811 0348 8081      		ld r24,Z
 812 034a 882F      		mov r24,r24
 813 034c 90E0      		ldi r25,0
 814               	/* epilogue start */
 145:main.c        **** 
 146:main.c        **** }
 816               	.LM51:
 817 034e DF91      		pop r29
 818 0350 CF91      		pop r28
 819 0352 0895      		ret
 821               	.Lscope7:
 823               		.stabd	78,0,0
 830               	.global	potValue
 832               	potValue:
 833               		.stabd	46,0,0
 147:main.c        **** 
 148:main.c        **** 
 149:main.c        **** int potValue(int sonarMax,int sonarMin,int potMax,int potMin,int x){
 835               	.LM52:
 836               	.LFBB8:
 837 0354 0F93      		push r16
 838 0356 1F93      		push r17
 839 0358 CF93      		push r28
 840 035a DF93      		push r29
 841 035c CDB7      		in r28,__SP_L__
 842 035e DEB7      		in r29,__SP_H__
 843 0360 2C97      		sbiw r28,12
 844 0362 0FB6      		in __tmp_reg__,__SREG__
 845 0364 F894      		cli
 846 0366 DEBF      		out __SP_H__,r29
 847 0368 0FBE      		out __SREG__,__tmp_reg__
 848 036a CDBF      		out __SP_L__,r28
 849               	/* prologue: function */
 850               	/* frame size = 12 */
 851               	/* stack size = 16 */
 852               	.L__stack_usage = 16
 853 036c 9C83      		std Y+4,r25
 854 036e 8B83      		std Y+3,r24
 855 0370 7E83      		std Y+6,r23
 856 0372 6D83      		std Y+5,r22
 857 0374 5887      		std Y+8,r21
 858 0376 4F83      		std Y+7,r20
 859 0378 3A87      		std Y+10,r19
 860 037a 2987      		std Y+9,r18
 861 037c 1C87      		std Y+12,r17
 862 037e 0B87      		std Y+11,r16
 150:main.c        **** 	int value;	
 151:main.c        **** 	if(x < sonarMin){
 864               	.LM53:
 865 0380 2B85      		ldd r18,Y+11
 866 0382 3C85      		ldd r19,Y+12
 867 0384 8D81      		ldd r24,Y+5
 868 0386 9E81      		ldd r25,Y+6
 869 0388 2817      		cp r18,r24
 870 038a 3907      		cpc r19,r25
 871 038c 04F4      		brge .L14
 152:main.c        **** 		return 0;
 873               	.LM54:
 874 038e 80E0      		ldi r24,0
 875 0390 90E0      		ldi r25,0
 876 0392 00C0      		rjmp .L15
 877               	.L14:
 153:main.c        **** 	} else if (x > sonarMax){
 879               	.LM55:
 880 0394 2B85      		ldd r18,Y+11
 881 0396 3C85      		ldd r19,Y+12
 882 0398 8B81      		ldd r24,Y+3
 883 039a 9C81      		ldd r25,Y+4
 884 039c 8217      		cp r24,r18
 885 039e 9307      		cpc r25,r19
 886 03a0 04F4      		brge .L16
 154:main.c        **** 		return 0x7F;
 888               	.LM56:
 889 03a2 8FE7      		ldi r24,lo8(127)
 890 03a4 90E0      		ldi r25,0
 891 03a6 00C0      		rjmp .L15
 892               	.L16:
 155:main.c        **** 	} else {
 156:main.c        **** 		value = x / 4;
 894               	.LM57:
 895 03a8 8B85      		ldd r24,Y+11
 896 03aa 9C85      		ldd r25,Y+12
 897 03ac 9923      		tst r25
 898 03ae 04F4      		brge .L17
 899 03b0 0396      		adiw r24,3
 900               	.L17:
 901 03b2 9595      		asr r25
 902 03b4 8795      		ror r24
 903 03b6 9595      		asr r25
 904 03b8 8795      		ror r24
 905 03ba 9A83      		std Y+2,r25
 906 03bc 8983      		std Y+1,r24
 157:main.c        **** 		return value > potMax?potMax:value;
 908               	.LM58:
 909 03be 2F81      		ldd r18,Y+7
 910 03c0 3885      		ldd r19,Y+8
 911 03c2 8981      		ldd r24,Y+1
 912 03c4 9A81      		ldd r25,Y+2
 913 03c6 2817      		cp r18,r24
 914 03c8 3907      		cpc r19,r25
 915 03ca 04F4      		brge .L15
 916 03cc C901      		movw r24,r18
 917               	.L15:
 918               	/* epilogue start */
 158:main.c        **** 	}
 159:main.c        **** } 
 920               	.LM59:
 921 03ce 2C96      		adiw r28,12
 922 03d0 0FB6      		in __tmp_reg__,__SREG__
 923 03d2 F894      		cli
 924 03d4 DEBF      		out __SP_H__,r29
 925 03d6 0FBE      		out __SREG__,__tmp_reg__
 926 03d8 CDBF      		out __SP_L__,r28
 927 03da DF91      		pop r29
 928 03dc CF91      		pop r28
 929 03de 1F91      		pop r17
 930 03e0 0F91      		pop r16
 931 03e2 0895      		ret
 936               	.Lscope8:
 938               		.stabd	78,0,0
 941               	.global	vTaskFunction_1
 943               	vTaskFunction_1:
 944               		.stabd	46,0,0
 160:main.c        **** 
 161:main.c        **** void vTaskFunction_1(void *pvParameters)
 162:main.c        **** {	
 946               	.LM60:
 947               	.LFBB9:
 948 03e4 CF93      		push r28
 949 03e6 DF93      		push r29
 950 03e8 CDB7      		in r28,__SP_L__
 951 03ea DEB7      		in r29,__SP_H__
 952 03ec 6097      		sbiw r28,16
 953 03ee 0FB6      		in __tmp_reg__,__SREG__
 954 03f0 F894      		cli
 955 03f2 DEBF      		out __SP_H__,r29
 956 03f4 0FBE      		out __SREG__,__tmp_reg__
 957 03f6 CDBF      		out __SP_L__,r28
 958               	/* prologue: function */
 959               	/* frame size = 16 */
 960               	/* stack size = 18 */
 961               	.L__stack_usage = 18
 962 03f8 988B      		std Y+16,r25
 963 03fa 8F87      		std Y+15,r24
 163:main.c        **** 	int sonarResult;
 164:main.c        **** 	int movingForward = 1;
 965               	.LM61:
 966 03fc 81E0      		ldi r24,lo8(1)
 967 03fe 90E0      		ldi r25,0
 968 0400 9A83      		std Y+2,r25
 969 0402 8983      		std Y+1,r24
 165:main.c        **** 
 166:main.c        **** 	int sonarMax = 0x31C;
 971               	.LM62:
 972 0404 8CE1      		ldi r24,lo8(28)
 973 0406 93E0      		ldi r25,lo8(3)
 974 0408 9C83      		std Y+4,r25
 975 040a 8B83      		std Y+3,r24
 167:main.c        **** 	int sonarMin = 0xE0;
 977               	.LM63:
 978 040c 80EE      		ldi r24,lo8(-32)
 979 040e 90E0      		ldi r25,0
 980 0410 9E83      		std Y+6,r25
 981 0412 8D83      		std Y+5,r24
 168:main.c        **** 	int potMin = 0x18;
 983               	.LM64:
 984 0414 88E1      		ldi r24,lo8(24)
 985 0416 90E0      		ldi r25,0
 986 0418 9887      		std Y+8,r25
 987 041a 8F83      		std Y+7,r24
 169:main.c        **** 	int potMax = 0x7F;
 989               	.LM65:
 990 041c 8FE7      		ldi r24,lo8(127)
 991 041e 90E0      		ldi r25,0
 992 0420 9A87      		std Y+10,r25
 993 0422 8987      		std Y+9,r24
 170:main.c        **** 	int backwardSwitch = 0xE1;
 995               	.LM66:
 996 0424 81EE      		ldi r24,lo8(-31)
 997 0426 90E0      		ldi r25,0
 998 0428 9C87      		std Y+12,r25
 999 042a 8B87      		std Y+11,r24
 171:main.c        **** 	int forwardSwitch = 0x160;
 1001               	.LM67:
 1002 042c 80E6      		ldi r24,lo8(96)
 1003 042e 91E0      		ldi r25,lo8(1)
 1004 0430 9E87      		std Y+14,r25
 1005 0432 8D87      		std Y+13,r24
 172:main.c        **** 
 173:main.c        **** 	
 174:main.c        **** 
 175:main.c        ****    USART_Init(9600, 16000000);
 1007               	.LM68:
 1008 0434 40E0      		ldi r20,0
 1009 0436 54E2      		ldi r21,lo8(36)
 1010 0438 64EF      		ldi r22,lo8(-12)
 1011 043a 70E0      		ldi r23,0
 1012 043c 80E8      		ldi r24,lo8(-128)
 1013 043e 95E2      		ldi r25,lo8(37)
 1014 0440 0E94 0000 		call USART_Init
 1015               	.L20:
 176:main.c        **** 
 177:main.c        **** 	for(;;);
 1017               	.LM69:
 1018 0444 00C0      		rjmp .L20
 1029               	.Lscope9:
 1031               		.stabd	78,0,0
 1034               	.global	vTaskFunction_2
 1036               	vTaskFunction_2:
 1037               		.stabd	46,0,0
 178:main.c        **** 
 179:main.c        **** 	initializeSPI();
 180:main.c        **** 	initSpeedController();
 181:main.c        **** 	
 182:main.c        **** 	PORTA |= 4;
 183:main.c        **** 	
 184:main.c        **** 	//PORTC = 0x2;
 185:main.c        **** 	setFNR(1);
 186:main.c        **** 	
 187:main.c        **** 	for(;;){
 188:main.c        **** 
 189:main.c        **** 		sonarResult = getSonarResult();
 190:main.c        **** 		if(movingForward == 1){
 191:main.c        **** 			if(sonarResult < backwardSwitch && sonarResult < 0x300){
 192:main.c        **** 				movingForward = -1;
 193:main.c        **** 				setFNR(-1);
 194:main.c        **** 			}
 195:main.c        **** 			setPot(potValue(sonarMax,sonarMin,potMax,potMin,sonarResult));
 196:main.c        **** 		} else {
 197:main.c        **** 			if(sonarResult > forwardSwitch && sonarResult < 0x300){
 198:main.c        **** 				movingForward = 1;
 199:main.c        **** 				setFNR(1);
 200:main.c        **** 			}
 201:main.c        **** 			setPot(potValue(sonarMax,sonarMin,potMax,potMin,sonarResult) + 0x10);
 202:main.c        **** 		}
 203:main.c        **** 		printHex(potValue(sonarMax,sonarMin,potMax,potMin,sonarResult));
 204:main.c        **** 		USART_Write('\n');
 205:main.c        **** 		USART_Write('\r');
 206:main.c        **** 		vTaskDelay(1);
 207:main.c        **** 	}
 208:main.c        **** 
 209:main.c        **** 	for(;;){
 210:main.c        **** 		PORTL = 0x10;
 211:main.c        **** 		vTaskDelay(200);
 212:main.c        **** 		PORTL = 0x20;
 213:main.c        **** 		vTaskDelay(200);
 214:main.c        **** 		PORTL = 0x40;
 215:main.c        **** 		vTaskDelay(200);
 216:main.c        **** 		PORTL = 0x80;
 217:main.c        **** 		vTaskDelay(200);
 218:main.c        **** 	}
 219:main.c        **** }
 220:main.c        **** 
 221:main.c        **** void vTaskFunction_2(void *pvParameters){
 1039               	.LM70:
 1040               	.LFBB10:
 1041 0446 CF93      		push r28
 1042 0448 DF93      		push r29
 1043 044a 1F92      		push __zero_reg__
 1044 044c 1F92      		push __zero_reg__
 1045 044e CDB7      		in r28,__SP_L__
 1046 0450 DEB7      		in r29,__SP_H__
 1047               	/* prologue: function */
 1048               	/* frame size = 2 */
 1049               	/* stack size = 4 */
 1050               	.L__stack_usage = 4
 1051 0452 9A83      		std Y+2,r25
 1052 0454 8983      		std Y+1,r24
 222:main.c        **** 	DDRL = 0xC0;
 1054               	.LM71:
 1055 0456 8AE0      		ldi r24,lo8(10)
 1056 0458 91E0      		ldi r25,lo8(1)
 1057 045a 20EC      		ldi r18,lo8(-64)
 1058 045c FC01      		movw r30,r24
 1059 045e 2083      		st Z,r18
 1060               	.L22:
 223:main.c        **** 	for(;;){
 224:main.c        **** 		PORTL ^= 0xC0;
 1062               	.LM72:
 1063 0460 8BE0      		ldi r24,lo8(11)
 1064 0462 91E0      		ldi r25,lo8(1)
 1065 0464 2BE0      		ldi r18,lo8(11)
 1066 0466 31E0      		ldi r19,lo8(1)
 1067 0468 F901      		movw r30,r18
 1068 046a 3081      		ld r19,Z
 1069 046c 20EC      		ldi r18,lo8(-64)
 1070 046e 2327      		eor r18,r19
 1071 0470 FC01      		movw r30,r24
 1072 0472 2083      		st Z,r18
 225:main.c        **** 		vTaskDelay(300);
 1074               	.LM73:
 1075 0474 8CE2      		ldi r24,lo8(44)
 1076 0476 91E0      		ldi r25,lo8(1)
 1077 0478 0E94 0000 		call vTaskDelay
 226:main.c        **** 	}	
 1079               	.LM74:
 1080 047c 00C0      		rjmp .L22
 1082               	.Lscope10:
 1084               		.stabd	78,0,0
 1087               	.global	vTaskFunction_3
 1089               	vTaskFunction_3:
 1090               		.stabd	46,0,0
 227:main.c        **** }
 228:main.c        **** 
 229:main.c        **** void vTaskFunction_3(void *pvParameters){
 1092               	.LM75:
 1093               	.LFBB11:
 1094 047e CF93      		push r28
 1095 0480 DF93      		push r29
 1096 0482 1F92      		push __zero_reg__
 1097 0484 1F92      		push __zero_reg__
 1098 0486 CDB7      		in r28,__SP_L__
 1099 0488 DEB7      		in r29,__SP_H__
 1100               	/* prologue: function */
 1101               	/* frame size = 2 */
 1102               	/* stack size = 4 */
 1103               	.L__stack_usage = 4
 1104 048a 9A83      		std Y+2,r25
 1105 048c 8983      		std Y+1,r24
 1106               	/* epilogue start */
 230:main.c        **** 	
 231:main.c        **** 	/*for(;;){
 232:main.c        **** 		if(PINA & 0x08){
 233:main.c        **** 			PORTA |= 0x84;
 234:main.c        **** 		} else {
 235:main.c        **** 			PORTA &= ~0x84;
 236:main.c        **** 		}
 237:main.c        **** 		vTaskDelay(5);
 238:main.c        **** 	}*/
 239:main.c        **** 
 240:main.c        **** }
 1108               	.LM76:
 1109 048e 0F90      		pop __tmp_reg__
 1110 0490 0F90      		pop __tmp_reg__
 1111 0492 DF91      		pop r29
 1112 0494 CF91      		pop r28
 1113 0496 0895      		ret
 1115               	.Lscope11:
 1117               		.stabd	78,0,0
 1120               	.global	vTaskPot
 1122               	vTaskPot:
 1123               		.stabd	46,0,0
 241:main.c        **** 
 242:main.c        **** void vTaskPot(void *pvParameters){
 1125               	.LM77:
 1126               	.LFBB12:
 1127 0498 CF93      		push r28
 1128 049a DF93      		push r29
 1129 049c 00D0      		rcall .
 1130 049e 1F92      		push __zero_reg__
 1131 04a0 CDB7      		in r28,__SP_L__
 1132 04a2 DEB7      		in r29,__SP_H__
 1133               	/* prologue: function */
 1134               	/* frame size = 4 */
 1135               	/* stack size = 6 */
 1136               	.L__stack_usage = 6
 1137 04a4 9C83      		std Y+4,r25
 1138 04a6 8B83      		std Y+3,r24
 243:main.c        **** 	initializeSPI();
 1140               	.LM78:
 1141 04a8 0E94 0000 		call initializeSPI
 244:main.c        **** 	int a = 0;
 1143               	.LM79:
 1144 04ac 1A82      		std Y+2,__zero_reg__
 1145 04ae 1982      		std Y+1,__zero_reg__
 245:main.c        **** 	initSpeedController();
 1147               	.LM80:
 1148 04b0 0E94 0000 		call initSpeedController
 1149               	.L25:
 246:main.c        **** 	/*for(;;){
 247:main.c        **** 		setPot(a);
 248:main.c        **** 		vTaskDelay(80);
 249:main.c        **** 		a++;
 250:main.c        **** 	}*/
 251:main.c        **** 	for(;;){
 252:main.c        **** 		setPot(1);
 1151               	.LM81:
 1152 04b4 81E0      		ldi r24,lo8(1)
 1153 04b6 90E0      		ldi r25,0
 1154 04b8 0E94 0000 		call setPot
 253:main.c        **** 		vTaskDelay(500);
 1156               	.LM82:
 1157 04bc 84EF      		ldi r24,lo8(-12)
 1158 04be 91E0      		ldi r25,lo8(1)
 1159 04c0 0E94 0000 		call vTaskDelay
 254:main.c        **** 		setPot(0x40);
 1161               	.LM83:
 1162 04c4 80E4      		ldi r24,lo8(64)
 1163 04c6 90E0      		ldi r25,0
 1164 04c8 0E94 0000 		call setPot
 255:main.c        **** 		vTaskDelay(500);
 1166               	.LM84:
 1167 04cc 84EF      		ldi r24,lo8(-12)
 1168 04ce 91E0      		ldi r25,lo8(1)
 1169 04d0 0E94 0000 		call vTaskDelay
 256:main.c        **** 		setPot(0x7F);
 1171               	.LM85:
 1172 04d4 8FE7      		ldi r24,lo8(127)
 1173 04d6 90E0      		ldi r25,0
 1174 04d8 0E94 0000 		call setPot
 257:main.c        **** 		vTaskDelay(500);
 1176               	.LM86:
 1177 04dc 84EF      		ldi r24,lo8(-12)
 1178 04de 91E0      		ldi r25,lo8(1)
 1179 04e0 0E94 0000 		call vTaskDelay
 258:main.c        **** 		setPot(0x40);
 1181               	.LM87:
 1182 04e4 80E4      		ldi r24,lo8(64)
 1183 04e6 90E0      		ldi r25,0
 1184 04e8 0E94 0000 		call setPot
 259:main.c        **** 		vTaskDelay(500);
 1186               	.LM88:
 1187 04ec 84EF      		ldi r24,lo8(-12)
 1188 04ee 91E0      		ldi r25,lo8(1)
 1189 04f0 0E94 0000 		call vTaskDelay
 260:main.c        **** 	}
 1191               	.LM89:
 1192 04f4 00C0      		rjmp .L25
 1197               	.Lscope12:
 1199               		.stabd	78,0,0
 1201               	.global	vIO_init
 1203               	vIO_init:
 1204               		.stabd	46,0,0
 261:main.c        **** }
 262:main.c        **** 
 263:main.c        **** 
 264:main.c        **** void vIO_init(void)
 265:main.c        **** {
 1206               	.LM90:
 1207               	.LFBB13:
 1208 04f6 CF93      		push r28
 1209 04f8 DF93      		push r29
 1210 04fa CDB7      		in r28,__SP_L__
 1211 04fc DEB7      		in r29,__SP_H__
 1212               	/* prologue: function */
 1213               	/* frame size = 0 */
 1214               	/* stack size = 2 */
 1215               	.L__stack_usage = 2
 266:main.c        ****     //- set PortB as output
 267:main.c        **** 	DDRB = 0xFF; 
 1217               	.LM91:
 1218 04fe 84E2      		ldi r24,lo8(36)
 1219 0500 90E0      		ldi r25,0
 1220 0502 2FEF      		ldi r18,lo8(-1)
 1221 0504 FC01      		movw r30,r24
 1222 0506 2083      		st Z,r18
 268:main.c        ****     PORTB = 0; 
 1224               	.LM92:
 1225 0508 85E2      		ldi r24,lo8(37)
 1226 050a 90E0      		ldi r25,0
 1227 050c FC01      		movw r30,r24
 1228 050e 1082      		st Z,__zero_reg__
 1229               	/* epilogue start */
 269:main.c        **** }
 1231               	.LM93:
 1232 0510 DF91      		pop r29
 1233 0512 CF91      		pop r28
 1234 0514 0895      		ret
 1236               	.Lscope13:
 1238               		.stabd	78,0,0
 1242               	.Letext0:
 1243               		.ident	"GCC: (GNU) 4.8.2"
 1244               	.global __do_copy_data
 1245               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccvj0Zf6.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccvj0Zf6.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccvj0Zf6.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccvj0Zf6.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccvj0Zf6.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccvj0Zf6.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccvj0Zf6.s:163    .bss:0000000000000000 count
                            *COM*:0000000000000002 sonarTime
     /tmp/ccvj0Zf6.s:170    .text:0000000000000000 vApplicationTickHook
     /tmp/ccvj0Zf6.s:203    .text:0000000000000020 vApplicationStackOverflowHook
     /tmp/ccvj0Zf6.s:240    .text:0000000000000030 main
     /tmp/ccvj0Zf6.s:1203   .text:00000000000004f6 vIO_init
     /tmp/ccvj0Zf6.s:943    .text:00000000000003e4 vTaskFunction_1
     /tmp/ccvj0Zf6.s:1036   .text:0000000000000446 vTaskFunction_2
     /tmp/ccvj0Zf6.s:496    .text:0000000000000196 printHex
     /tmp/ccvj0Zf6.s:622    .text:0000000000000256 printNum
     /tmp/ccvj0Zf6.s:719    .text:00000000000002d0 __vector_50
     /tmp/ccvj0Zf6.s:793    .text:000000000000033a getTimerCount2
     /tmp/ccvj0Zf6.s:832    .text:0000000000000354 potValue
     /tmp/ccvj0Zf6.s:1089   .text:000000000000047e vTaskFunction_3
     /tmp/ccvj0Zf6.s:1122   .text:0000000000000498 vTaskPot

UNDEFINED SYMBOLS
xTaskGenericCreate
vTaskUSARTWrite
vTaskUSARTRead
vTaskADC
vTaskStartScheduler
USART_Write
memset
itoa
USART_AddToQueue
USART_Init
vTaskDelay
initializeSPI
initSpeedController
setPot
__do_copy_data
__do_clear_bss
