
rtosdemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  0000514a  000051de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000514a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000193b  00800228  00800228  00005206  2**0
                  ALLOC
  3 .stab         0000c438  00000000  00000000  00005208  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004d09  00000000  00000000  00011640  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00016349  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 94 00 	jmp	0x128	; 0x128 <__ctors_end>
       4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      2c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      34:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      48:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      50:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      54:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      68:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      6c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      70:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      74:	0c 94 8c 26 	jmp	0x4d18	; 0x4d18 <__vector_29>
      78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      7c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      80:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__vector_32>
      84:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      8c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      90:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      94:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      98:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      9c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      a0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      a4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      a8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      ac:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      b0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      b4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      b8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      bc:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__vector_47>
      c0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      c4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      c8:	0c 94 e1 22 	jmp	0x45c2	; 0x45c2 <__vector_50>
      cc:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      d0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      d4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      d8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      dc:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      e0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      e4:	50 1f       	adc	r21, r16
      e6:	60 1f       	adc	r22, r16
      e8:	70 1f       	adc	r23, r16
      ea:	80 1f       	adc	r24, r16
      ec:	b0 1f       	adc	r27, r16
      ee:	90 1f       	adc	r25, r16
      f0:	a0 1f       	adc	r26, r16
      f2:	b0 1f       	adc	r27, r16

000000f4 <__trampolines_start>:
      f4:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <processCommand+0x11a>
      f8:	0c 94 19 27 	jmp	0x4e32	; 0x4e32 <vTaskADC>
      fc:	0c 94 9a 22 	jmp	0x4534	; 0x4534 <getLinearPotCallback>
     100:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <prvIdleTask>
     104:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <processCommand+0x7a>
     108:	0c 94 ce 19 	jmp	0x339c	; 0x339c <vTaskFunction_1>
     10c:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <processCommand+0x5a>
     110:	0c 94 b9 1f 	jmp	0x3f72	; 0x3f72 <getBatteryVoltage12Handler>
     114:	0c 94 90 1f 	jmp	0x3f20	; 0x3f20 <processCommand+0xda>
     118:	0c 94 40 24 	jmp	0x4880	; 0x4880 <vTaskSteer>
     11c:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <processCommand+0xfa>
     120:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <processCommand+0x9a>
     124:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <processCommand+0xba>

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf ef       	ldi	r28, 0xFF	; 255
     12e:	d1 e2       	ldi	r29, 0x21	; 33
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61
     134:	00 e0       	ldi	r16, 0x00	; 0
     136:	0c bf       	out	0x3c, r16	; 60

00000138 <__do_copy_data>:
     138:	12 e0       	ldi	r17, 0x02	; 2
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b2 e0       	ldi	r27, 0x02	; 2
     13e:	ea e4       	ldi	r30, 0x4A	; 74
     140:	f1 e5       	ldi	r31, 0x51	; 81
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	a8 32       	cpi	r26, 0x28	; 40
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	1b e1       	ldi	r17, 0x1B	; 27
     154:	a8 e2       	ldi	r26, 0x28	; 40
     156:	b2 e0       	ldi	r27, 0x02	; 2
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	a3 36       	cpi	r26, 0x63	; 99
     15e:	b1 07       	cpc	r27, r17
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	0e 94 d6 17 	call	0x2fac	; 0x2fac <main>
     166:	0c 94 a3 28 	jmp	0x5146	; 0x5146 <_exit>

0000016a <__bad_interrupt>:
     16a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016e <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
     16e:	af 92       	push	r10
     170:	bf 92       	push	r11
     172:	cf 92       	push	r12
     174:	df 92       	push	r13
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	64 97       	sbiw	r28, 0x14	; 20
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	0f be       	out	0x3f, r0	; 63
     190:	cd bf       	out	0x3d, r28	; 61
     192:	9f 83       	std	Y+7, r25	; 0x07
     194:	8e 83       	std	Y+6, r24	; 0x06
     196:	79 87       	std	Y+9, r23	; 0x09
     198:	68 87       	std	Y+8, r22	; 0x08
     19a:	5b 87       	std	Y+11, r21	; 0x0b
     19c:	4a 87       	std	Y+10, r20	; 0x0a
     19e:	3d 87       	std	Y+13, r19	; 0x0d
     1a0:	2c 87       	std	Y+12, r18	; 0x0c
     1a2:	0e 87       	std	Y+14, r16	; 0x0e
     1a4:	f8 8a       	std	Y+16, r15	; 0x10
     1a6:	ef 86       	std	Y+15, r14	; 0x0f
     1a8:	da 8a       	std	Y+18, r13	; 0x12
     1aa:	c9 8a       	std	Y+17, r12	; 0x11
     1ac:	bc 8a       	std	Y+20, r11	; 0x14
     1ae:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
     1b0:	29 89       	ldd	r18, Y+17	; 0x11
     1b2:	3a 89       	ldd	r19, Y+18	; 0x12
     1b4:	8a 85       	ldd	r24, Y+10	; 0x0a
     1b6:	9b 85       	ldd	r25, Y+11	; 0x0b
     1b8:	b9 01       	movw	r22, r18
     1ba:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <prvAllocateTCBAndStack>
     1be:	9b 83       	std	Y+3, r25	; 0x03
     1c0:	8a 83       	std	Y+2, r24	; 0x02

	if( pxNewTCB != NULL )
     1c2:	8a 81       	ldd	r24, Y+2	; 0x02
     1c4:	9b 81       	ldd	r25, Y+3	; 0x03
     1c6:	00 97       	sbiw	r24, 0x00	; 0
     1c8:	09 f4       	brne	.+2      	; 0x1cc <xTaskGenericCreate+0x5e>
     1ca:	9f c0       	rjmp	.+318    	; 0x30a <xTaskGenericCreate+0x19c>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
     1cc:	8a 81       	ldd	r24, Y+2	; 0x02
     1ce:	9b 81       	ldd	r25, Y+3	; 0x03
     1d0:	fc 01       	movw	r30, r24
     1d2:	27 89       	ldd	r18, Z+23	; 0x17
     1d4:	30 8d       	ldd	r19, Z+24	; 0x18
     1d6:	8a 85       	ldd	r24, Y+10	; 0x0a
     1d8:	9b 85       	ldd	r25, Y+11	; 0x0b
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	82 0f       	add	r24, r18
     1de:	93 1f       	adc	r25, r19
     1e0:	9d 83       	std	Y+5, r25	; 0x05
     1e2:	8c 83       	std	Y+4, r24	; 0x04
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
     1e4:	4a 85       	ldd	r20, Y+10	; 0x0a
     1e6:	5b 85       	ldd	r21, Y+11	; 0x0b
     1e8:	2b 89       	ldd	r18, Y+19	; 0x13
     1ea:	3c 89       	ldd	r19, Y+20	; 0x14
     1ec:	68 85       	ldd	r22, Y+8	; 0x08
     1ee:	79 85       	ldd	r23, Y+9	; 0x09
     1f0:	8a 81       	ldd	r24, Y+2	; 0x02
     1f2:	9b 81       	ldd	r25, Y+3	; 0x03
     1f4:	8a 01       	movw	r16, r20
     1f6:	4e 85       	ldd	r20, Y+14	; 0x0e
     1f8:	0e 94 7c 07 	call	0xef8	; 0xef8 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     1fc:	4c 85       	ldd	r20, Y+12	; 0x0c
     1fe:	5d 85       	ldd	r21, Y+13	; 0x0d
     200:	2e 81       	ldd	r18, Y+6	; 0x06
     202:	3f 81       	ldd	r19, Y+7	; 0x07
     204:	8c 81       	ldd	r24, Y+4	; 0x04
     206:	9d 81       	ldd	r25, Y+5	; 0x05
     208:	b9 01       	movw	r22, r18
     20a:	0e 94 93 14 	call	0x2926	; 0x2926 <pxPortInitialiseStack>
     20e:	9c 01       	movw	r18, r24
     210:	8a 81       	ldd	r24, Y+2	; 0x02
     212:	9b 81       	ldd	r25, Y+3	; 0x03
     214:	fc 01       	movw	r30, r24
     216:	31 83       	std	Z+1, r19	; 0x01
     218:	20 83       	st	Z, r18
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
     21a:	8f 85       	ldd	r24, Y+15	; 0x0f
     21c:	98 89       	ldd	r25, Y+16	; 0x10
     21e:	00 97       	sbiw	r24, 0x00	; 0
     220:	39 f0       	breq	.+14     	; 0x230 <xTaskGenericCreate+0xc2>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
     222:	8f 85       	ldd	r24, Y+15	; 0x0f
     224:	98 89       	ldd	r25, Y+16	; 0x10
     226:	2a 81       	ldd	r18, Y+2	; 0x02
     228:	3b 81       	ldd	r19, Y+3	; 0x03
     22a:	fc 01       	movw	r30, r24
     22c:	31 83       	std	Z+1, r19	; 0x01
     22e:	20 83       	st	Z, r18
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	f8 94       	cli
     234:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
     236:	80 91 76 02 	lds	r24, 0x0276
     23a:	8f 5f       	subi	r24, 0xFF	; 255
     23c:	80 93 76 02 	sts	0x0276, r24
			if( pxCurrentTCB == NULL )
     240:	80 91 28 02 	lds	r24, 0x0228
     244:	90 91 29 02 	lds	r25, 0x0229
     248:	00 97       	sbiw	r24, 0x00	; 0
     24a:	69 f4       	brne	.+26     	; 0x266 <xTaskGenericCreate+0xf8>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
     24c:	8a 81       	ldd	r24, Y+2	; 0x02
     24e:	9b 81       	ldd	r25, Y+3	; 0x03
     250:	90 93 29 02 	sts	0x0229, r25
     254:	80 93 28 02 	sts	0x0228, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
     258:	80 91 76 02 	lds	r24, 0x0276
     25c:	81 30       	cpi	r24, 0x01	; 1
     25e:	b1 f4       	brne	.+44     	; 0x28c <xTaskGenericCreate+0x11e>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
     260:	0e 94 dd 07 	call	0xfba	; 0xfba <prvInitialiseTaskLists>
     264:	13 c0       	rjmp	.+38     	; 0x28c <xTaskGenericCreate+0x11e>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
     266:	80 91 7b 02 	lds	r24, 0x027B
     26a:	88 23       	and	r24, r24
     26c:	79 f4       	brne	.+30     	; 0x28c <xTaskGenericCreate+0x11e>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
     26e:	80 91 28 02 	lds	r24, 0x0228
     272:	90 91 29 02 	lds	r25, 0x0229
     276:	fc 01       	movw	r30, r24
     278:	96 89       	ldd	r25, Z+22	; 0x16
     27a:	8e 85       	ldd	r24, Y+14	; 0x0e
     27c:	89 17       	cp	r24, r25
     27e:	30 f0       	brcs	.+12     	; 0x28c <xTaskGenericCreate+0x11e>
					{
						pxCurrentTCB = pxNewTCB;
     280:	8a 81       	ldd	r24, Y+2	; 0x02
     282:	9b 81       	ldd	r25, Y+3	; 0x03
     284:	90 93 29 02 	sts	0x0229, r25
     288:	80 93 28 02 	sts	0x0228, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
     28c:	8a 81       	ldd	r24, Y+2	; 0x02
     28e:	9b 81       	ldd	r25, Y+3	; 0x03
     290:	fc 01       	movw	r30, r24
     292:	96 89       	ldd	r25, Z+22	; 0x16
     294:	80 91 79 02 	lds	r24, 0x0279
     298:	89 17       	cp	r24, r25
     29a:	30 f4       	brcc	.+12     	; 0x2a8 <xTaskGenericCreate+0x13a>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
     29c:	8a 81       	ldd	r24, Y+2	; 0x02
     29e:	9b 81       	ldd	r25, Y+3	; 0x03
     2a0:	fc 01       	movw	r30, r24
     2a2:	86 89       	ldd	r24, Z+22	; 0x16
     2a4:	80 93 79 02 	sts	0x0279, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
     2a8:	80 91 80 02 	lds	r24, 0x0280
     2ac:	8f 5f       	subi	r24, 0xFF	; 255
     2ae:	80 93 80 02 	sts	0x0280, r24

			prvAddTaskToReadyQueue( pxNewTCB );
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	9b 81       	ldd	r25, Y+3	; 0x03
     2b6:	fc 01       	movw	r30, r24
     2b8:	96 89       	ldd	r25, Z+22	; 0x16
     2ba:	80 91 7a 02 	lds	r24, 0x027A
     2be:	89 17       	cp	r24, r25
     2c0:	30 f4       	brcc	.+12     	; 0x2ce <xTaskGenericCreate+0x160>
     2c2:	8a 81       	ldd	r24, Y+2	; 0x02
     2c4:	9b 81       	ldd	r25, Y+3	; 0x03
     2c6:	fc 01       	movw	r30, r24
     2c8:	86 89       	ldd	r24, Z+22	; 0x16
     2ca:	80 93 7a 02 	sts	0x027A, r24
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	9b 81       	ldd	r25, Y+3	; 0x03
     2d2:	ac 01       	movw	r20, r24
     2d4:	4e 5f       	subi	r20, 0xFE	; 254
     2d6:	5f 4f       	sbci	r21, 0xFF	; 255
     2d8:	8a 81       	ldd	r24, Y+2	; 0x02
     2da:	9b 81       	ldd	r25, Y+3	; 0x03
     2dc:	fc 01       	movw	r30, r24
     2de:	86 89       	ldd	r24, Z+22	; 0x16
     2e0:	28 2f       	mov	r18, r24
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	c9 01       	movw	r24, r18
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	82 0f       	add	r24, r18
     2f4:	93 1f       	adc	r25, r19
     2f6:	86 5d       	subi	r24, 0xD6	; 214
     2f8:	9d 4f       	sbci	r25, 0xFD	; 253
     2fa:	ba 01       	movw	r22, r20
     2fc:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>

			xReturn = pdPASS;
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	89 83       	std	Y+1, r24	; 0x01
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
     304:	0f 90       	pop	r0
     306:	0f be       	out	0x3f, r0	; 63
     308:	02 c0       	rjmp	.+4      	; 0x30e <xTaskGenericCreate+0x1a0>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	89 83       	std	Y+1, r24	; 0x01
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	79 f4       	brne	.+30     	; 0x332 <xTaskGenericCreate+0x1c4>
	{
		if( xSchedulerRunning != pdFALSE )
     314:	80 91 7b 02 	lds	r24, 0x027B
     318:	88 23       	and	r24, r24
     31a:	59 f0       	breq	.+22     	; 0x332 <xTaskGenericCreate+0x1c4>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
     31c:	80 91 28 02 	lds	r24, 0x0228
     320:	90 91 29 02 	lds	r25, 0x0229
     324:	fc 01       	movw	r30, r24
     326:	96 89       	ldd	r25, Z+22	; 0x16
     328:	8e 85       	ldd	r24, Y+14	; 0x0e
     32a:	98 17       	cp	r25, r24
     32c:	10 f4       	brcc	.+4      	; 0x332 <xTaskGenericCreate+0x1c4>
			{
				portYIELD_WITHIN_API();
     32e:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
			}
		}
	}

	return xReturn;
     332:	89 81       	ldd	r24, Y+1	; 0x01
}
     334:	64 96       	adiw	r28, 0x14	; 20
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	df 90       	pop	r13
     34e:	cf 90       	pop	r12
     350:	bf 90       	pop	r11
     352:	af 90       	pop	r10
     354:	08 95       	ret

00000356 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
     35e:	28 97       	sbiw	r28, 0x08	; 8
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	9e 83       	std	Y+6, r25	; 0x06
     36c:	8d 83       	std	Y+5, r24	; 0x05
     36e:	78 87       	std	Y+8, r23	; 0x08
     370:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
     372:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
     374:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
     378:	8d 81       	ldd	r24, Y+5	; 0x05
     37a:	9e 81       	ldd	r25, Y+6	; 0x06
     37c:	fc 01       	movw	r30, r24
     37e:	20 81       	ld	r18, Z
     380:	31 81       	ldd	r19, Z+1	; 0x01
     382:	8f 81       	ldd	r24, Y+7	; 0x07
     384:	98 85       	ldd	r25, Y+8	; 0x08
     386:	82 0f       	add	r24, r18
     388:	93 1f       	adc	r25, r19
     38a:	9b 83       	std	Y+3, r25	; 0x03
     38c:	8a 83       	std	Y+2, r24	; 0x02

			if( xTickCount < *pxPreviousWakeTime )
     38e:	8d 81       	ldd	r24, Y+5	; 0x05
     390:	9e 81       	ldd	r25, Y+6	; 0x06
     392:	fc 01       	movw	r30, r24
     394:	20 81       	ld	r18, Z
     396:	31 81       	ldd	r19, Z+1	; 0x01
     398:	80 91 77 02 	lds	r24, 0x0277
     39c:	90 91 78 02 	lds	r25, 0x0278
     3a0:	82 17       	cp	r24, r18
     3a2:	93 07       	cpc	r25, r19
     3a4:	b0 f4       	brcc	.+44     	; 0x3d2 <vTaskDelayUntil+0x7c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
     3a6:	8d 81       	ldd	r24, Y+5	; 0x05
     3a8:	9e 81       	ldd	r25, Y+6	; 0x06
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 81       	ld	r18, Z
     3ae:	31 81       	ldd	r19, Z+1	; 0x01
     3b0:	8a 81       	ldd	r24, Y+2	; 0x02
     3b2:	9b 81       	ldd	r25, Y+3	; 0x03
     3b4:	82 17       	cp	r24, r18
     3b6:	93 07       	cpc	r25, r19
     3b8:	08 f5       	brcc	.+66     	; 0x3fc <vTaskDelayUntil+0xa6>
     3ba:	80 91 77 02 	lds	r24, 0x0277
     3be:	90 91 78 02 	lds	r25, 0x0278
     3c2:	2a 81       	ldd	r18, Y+2	; 0x02
     3c4:	3b 81       	ldd	r19, Y+3	; 0x03
     3c6:	82 17       	cp	r24, r18
     3c8:	93 07       	cpc	r25, r19
     3ca:	c0 f4       	brcc	.+48     	; 0x3fc <vTaskDelayUntil+0xa6>
				{
					xShouldDelay = pdTRUE;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	89 83       	std	Y+1, r24	; 0x01
     3d0:	15 c0       	rjmp	.+42     	; 0x3fc <vTaskDelayUntil+0xa6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
     3d2:	8d 81       	ldd	r24, Y+5	; 0x05
     3d4:	9e 81       	ldd	r25, Y+6	; 0x06
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 81       	ld	r18, Z
     3da:	31 81       	ldd	r19, Z+1	; 0x01
     3dc:	8a 81       	ldd	r24, Y+2	; 0x02
     3de:	9b 81       	ldd	r25, Y+3	; 0x03
     3e0:	82 17       	cp	r24, r18
     3e2:	93 07       	cpc	r25, r19
     3e4:	48 f0       	brcs	.+18     	; 0x3f8 <vTaskDelayUntil+0xa2>
     3e6:	80 91 77 02 	lds	r24, 0x0277
     3ea:	90 91 78 02 	lds	r25, 0x0278
     3ee:	2a 81       	ldd	r18, Y+2	; 0x02
     3f0:	3b 81       	ldd	r19, Y+3	; 0x03
     3f2:	82 17       	cp	r24, r18
     3f4:	93 07       	cpc	r25, r19
     3f6:	10 f4       	brcc	.+4      	; 0x3fc <vTaskDelayUntil+0xa6>
				{
					xShouldDelay = pdTRUE;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
     3fc:	8d 81       	ldd	r24, Y+5	; 0x05
     3fe:	9e 81       	ldd	r25, Y+6	; 0x06
     400:	2a 81       	ldd	r18, Y+2	; 0x02
     402:	3b 81       	ldd	r19, Y+3	; 0x03
     404:	fc 01       	movw	r30, r24
     406:	31 83       	std	Z+1, r19	; 0x01
     408:	20 83       	st	Z, r18

			if( xShouldDelay != pdFALSE )
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	88 23       	and	r24, r24
     40e:	59 f0       	breq	.+22     	; 0x426 <vTaskDelayUntil+0xd0>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     410:	80 91 28 02 	lds	r24, 0x0228
     414:	90 91 29 02 	lds	r25, 0x0229
     418:	02 96       	adiw	r24, 0x02	; 2
     41a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
     41e:	8a 81       	ldd	r24, Y+2	; 0x02
     420:	9b 81       	ldd	r25, Y+3	; 0x03
     422:	0e 94 21 08 	call	0x1042	; 0x1042 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
     426:	0e 94 04 04 	call	0x808	; 0x808 <xTaskResumeAll>
     42a:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     42c:	8c 81       	ldd	r24, Y+4	; 0x04
     42e:	88 23       	and	r24, r24
     430:	11 f4       	brne	.+4      	; 0x436 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
     432:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
		}
	}
     436:	28 96       	adiw	r28, 0x08	; 8
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	00 d0       	rcall	.+0      	; 0x44e <vTaskDelay+0x6>
     44e:	1f 92       	push	r1
     450:	1f 92       	push	r1
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	9d 83       	std	Y+5, r25	; 0x05
     458:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     45a:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     45c:	8c 81       	ldd	r24, Y+4	; 0x04
     45e:	9d 81       	ldd	r25, Y+5	; 0x05
     460:	00 97       	sbiw	r24, 0x00	; 0
     462:	d1 f0       	breq	.+52     	; 0x498 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
     464:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     468:	20 91 77 02 	lds	r18, 0x0277
     46c:	30 91 78 02 	lds	r19, 0x0278
     470:	8c 81       	ldd	r24, Y+4	; 0x04
     472:	9d 81       	ldd	r25, Y+5	; 0x05
     474:	82 0f       	add	r24, r18
     476:	93 1f       	adc	r25, r19
     478:	9b 83       	std	Y+3, r25	; 0x03
     47a:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     47c:	80 91 28 02 	lds	r24, 0x0228
     480:	90 91 29 02 	lds	r25, 0x0229
     484:	02 96       	adiw	r24, 0x02	; 2
     486:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     48a:	8a 81       	ldd	r24, Y+2	; 0x02
     48c:	9b 81       	ldd	r25, Y+3	; 0x03
     48e:	0e 94 21 08 	call	0x1042	; 0x1042 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     492:	0e 94 04 04 	call	0x808	; 0x808 <xTaskResumeAll>
     496:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	88 23       	and	r24, r24
     49c:	11 f4       	brne	.+4      	; 0x4a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
     49e:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
		}
	}
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <vTaskSuspend+0x6>
     4b8:	1f 92       	push	r1
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	9c 83       	std	Y+4, r25	; 0x04
     4c0:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
     4c8:	80 91 28 02 	lds	r24, 0x0228
     4cc:	90 91 29 02 	lds	r25, 0x0229
     4d0:	2b 81       	ldd	r18, Y+3	; 0x03
     4d2:	3c 81       	ldd	r19, Y+4	; 0x04
     4d4:	28 17       	cp	r18, r24
     4d6:	39 07       	cpc	r19, r25
     4d8:	11 f4       	brne	.+4      	; 0x4de <vTaskSuspend+0x2c>
			{
				pxTaskToSuspend = NULL;
     4da:	1c 82       	std	Y+4, r1	; 0x04
     4dc:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
     4e0:	9c 81       	ldd	r25, Y+4	; 0x04
     4e2:	00 97       	sbiw	r24, 0x00	; 0
     4e4:	29 f4       	brne	.+10     	; 0x4f0 <vTaskSuspend+0x3e>
     4e6:	80 91 28 02 	lds	r24, 0x0228
     4ea:	90 91 29 02 	lds	r25, 0x0229
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <vTaskSuspend+0x42>
     4f0:	8b 81       	ldd	r24, Y+3	; 0x03
     4f2:	9c 81       	ldd	r25, Y+4	; 0x04
     4f4:	9a 83       	std	Y+2, r25	; 0x02
     4f6:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	02 96       	adiw	r24, 0x02	; 2
     4fe:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	9a 81       	ldd	r25, Y+2	; 0x02
     506:	fc 01       	movw	r30, r24
     508:	84 89       	ldd	r24, Z+20	; 0x14
     50a:	95 89       	ldd	r25, Z+21	; 0x15
     50c:	00 97       	sbiw	r24, 0x00	; 0
     50e:	29 f0       	breq	.+10     	; 0x51a <vTaskSuspend+0x68>
			{
				uxListRemove( &( pxTCB->xEventListItem ) );
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	9a 81       	ldd	r25, Y+2	; 0x02
     514:	0c 96       	adiw	r24, 0x0c	; 12
     516:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	9a 81       	ldd	r25, Y+2	; 0x02
     51e:	02 96       	adiw	r24, 0x02	; 2
     520:	bc 01       	movw	r22, r24
     522:	8d e6       	ldi	r24, 0x6D	; 109
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
     52e:	8b 81       	ldd	r24, Y+3	; 0x03
     530:	9c 81       	ldd	r25, Y+4	; 0x04
     532:	00 97       	sbiw	r24, 0x00	; 0
     534:	a1 f4       	brne	.+40     	; 0x55e <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
     536:	80 91 7b 02 	lds	r24, 0x027B
     53a:	88 23       	and	r24, r24
     53c:	19 f0       	breq	.+6      	; 0x544 <vTaskSuspend+0x92>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
     53e:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
     542:	0d c0       	rjmp	.+26     	; 0x55e <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
     544:	90 91 6d 02 	lds	r25, 0x026D
     548:	80 91 76 02 	lds	r24, 0x0276
     54c:	98 17       	cp	r25, r24
     54e:	29 f4       	brne	.+10     	; 0x55a <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
     550:	10 92 29 02 	sts	0x0229, r1
     554:	10 92 28 02 	sts	0x0228, r1
     558:	02 c0       	rjmp	.+4      	; 0x55e <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
     55a:	0e 94 9a 05 	call	0xb34	; 0xb34 <vTaskSwitchContext>
				}
			}
		}
	}
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	00 d0       	rcall	.+0      	; 0x572 <xTaskIsTaskSuspended+0x6>
     572:	1f 92       	push	r1
     574:	1f 92       	push	r1
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	9d 83       	std	Y+5, r25	; 0x05
     57c:	8c 83       	std	Y+4, r24	; 0x04
	portBASE_TYPE xReturn = pdFALSE;
     57e:	19 82       	std	Y+1, r1	; 0x01
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
     580:	8c 81       	ldd	r24, Y+4	; 0x04
     582:	9d 81       	ldd	r25, Y+5	; 0x05
     584:	9b 83       	std	Y+3, r25	; 0x03
     586:	8a 83       	std	Y+2, r24	; 0x02
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
     588:	8a 81       	ldd	r24, Y+2	; 0x02
     58a:	9b 81       	ldd	r25, Y+3	; 0x03
     58c:	fc 01       	movw	r30, r24
     58e:	82 85       	ldd	r24, Z+10	; 0x0a
     590:	93 85       	ldd	r25, Z+11	; 0x0b
     592:	f2 e0       	ldi	r31, 0x02	; 2
     594:	8d 36       	cpi	r24, 0x6D	; 109
     596:	9f 07       	cpc	r25, r31
     598:	91 f4       	brne	.+36     	; 0x5be <xTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	9b 81       	ldd	r25, Y+3	; 0x03
     59e:	fc 01       	movw	r30, r24
     5a0:	84 89       	ldd	r24, Z+20	; 0x14
     5a2:	95 89       	ldd	r25, Z+21	; 0x15
     5a4:	f2 e0       	ldi	r31, 0x02	; 2
     5a6:	84 36       	cpi	r24, 0x64	; 100
     5a8:	9f 07       	cpc	r25, r31
     5aa:	49 f0       	breq	.+18     	; 0x5be <xTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	9b 81       	ldd	r25, Y+3	; 0x03
     5b0:	fc 01       	movw	r30, r24
     5b2:	84 89       	ldd	r24, Z+20	; 0x14
     5b4:	95 89       	ldd	r25, Z+21	; 0x15
     5b6:	00 97       	sbiw	r24, 0x00	; 0
     5b8:	11 f4       	brne	.+4      	; 0x5be <xTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}

		return xReturn;
     5be:	89 81       	ldd	r24, Y+1	; 0x01
	}
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <vTaskResume+0x6>
     5d6:	1f 92       	push	r1
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
     5dc:	9c 83       	std	Y+4, r25	; 0x04
     5de:	8b 83       	std	Y+3, r24	; 0x03
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	9a 83       	std	Y+2, r25	; 0x02
     5e6:	89 83       	std	Y+1, r24	; 0x01

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	9a 81       	ldd	r25, Y+2	; 0x02
     5ec:	00 97       	sbiw	r24, 0x00	; 0
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <vTaskResume+0x22>
     5f0:	4f c0       	rjmp	.+158    	; 0x690 <vTaskResume+0xc0>
     5f2:	80 91 28 02 	lds	r24, 0x0228
     5f6:	90 91 29 02 	lds	r25, 0x0229
     5fa:	29 81       	ldd	r18, Y+1	; 0x01
     5fc:	3a 81       	ldd	r19, Y+2	; 0x02
     5fe:	28 17       	cp	r18, r24
     600:	39 07       	cpc	r19, r25
     602:	09 f4       	brne	.+2      	; 0x606 <vTaskResume+0x36>
     604:	45 c0       	rjmp	.+138    	; 0x690 <vTaskResume+0xc0>
		{
			taskENTER_CRITICAL();
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	0f 92       	push	r0
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	9a 81       	ldd	r25, Y+2	; 0x02
     610:	0e 94 b6 02 	call	0x56c	; 0x56c <xTaskIsTaskSuspended>
     614:	81 30       	cpi	r24, 0x01	; 1
     616:	d1 f5       	brne	.+116    	; 0x68c <vTaskResume+0xbc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					uxListRemove(  &( pxTCB->xGenericListItem ) );
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	9a 81       	ldd	r25, Y+2	; 0x02
     61c:	02 96       	adiw	r24, 0x02	; 2
     61e:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	fc 01       	movw	r30, r24
     628:	96 89       	ldd	r25, Z+22	; 0x16
     62a:	80 91 7a 02 	lds	r24, 0x027A
     62e:	89 17       	cp	r24, r25
     630:	30 f4       	brcc	.+12     	; 0x63e <vTaskResume+0x6e>
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	fc 01       	movw	r30, r24
     638:	86 89       	ldd	r24, Z+22	; 0x16
     63a:	80 93 7a 02 	sts	0x027A, r24
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	ac 01       	movw	r20, r24
     644:	4e 5f       	subi	r20, 0xFE	; 254
     646:	5f 4f       	sbci	r21, 0xFF	; 255
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	9a 81       	ldd	r25, Y+2	; 0x02
     64c:	fc 01       	movw	r30, r24
     64e:	86 89       	ldd	r24, Z+22	; 0x16
     650:	28 2f       	mov	r18, r24
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	c9 01       	movw	r24, r18
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	82 0f       	add	r24, r18
     664:	93 1f       	adc	r25, r19
     666:	86 5d       	subi	r24, 0xD6	; 214
     668:	9d 4f       	sbci	r25, 0xFD	; 253
     66a:	ba 01       	movw	r22, r20
     66c:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	fc 01       	movw	r30, r24
     676:	26 89       	ldd	r18, Z+22	; 0x16
     678:	80 91 28 02 	lds	r24, 0x0228
     67c:	90 91 29 02 	lds	r25, 0x0229
     680:	fc 01       	movw	r30, r24
     682:	86 89       	ldd	r24, Z+22	; 0x16
     684:	28 17       	cp	r18, r24
     686:	10 f0       	brcs	.+4      	; 0x68c <vTaskResume+0xbc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
     688:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
		}
	}
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <xTaskResumeFromISR+0x6>
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <xTaskResumeFromISR+0x8>
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
     6aa:	9e 83       	std	Y+6, r25	; 0x06
     6ac:	8d 83       	std	Y+5, r24	; 0x05
	portBASE_TYPE xYieldRequired = pdFALSE;
     6ae:	19 82       	std	Y+1, r1	; 0x01
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
     6b0:	8d 81       	ldd	r24, Y+5	; 0x05
     6b2:	9e 81       	ldd	r25, Y+6	; 0x06
     6b4:	9b 83       	std	Y+3, r25	; 0x03
     6b6:	8a 83       	std	Y+2, r24	; 0x02

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     6b8:	1c 82       	std	Y+4, r1	; 0x04
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
     6ba:	8a 81       	ldd	r24, Y+2	; 0x02
     6bc:	9b 81       	ldd	r25, Y+3	; 0x03
     6be:	0e 94 b6 02 	call	0x56c	; 0x56c <xTaskIsTaskSuspended>
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <xTaskResumeFromISR+0x2a>
     6c6:	48 c0       	rjmp	.+144    	; 0x758 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     6c8:	80 91 7c 02 	lds	r24, 0x027C
     6cc:	88 23       	and	r24, r24
     6ce:	e1 f5       	brne	.+120    	; 0x748 <xTaskResumeFromISR+0xaa>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
     6d0:	8a 81       	ldd	r24, Y+2	; 0x02
     6d2:	9b 81       	ldd	r25, Y+3	; 0x03
     6d4:	fc 01       	movw	r30, r24
     6d6:	26 89       	ldd	r18, Z+22	; 0x16
     6d8:	80 91 28 02 	lds	r24, 0x0228
     6dc:	90 91 29 02 	lds	r25, 0x0229
     6e0:	fc 01       	movw	r30, r24
     6e2:	96 89       	ldd	r25, Z+22	; 0x16
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	29 17       	cp	r18, r25
     6e8:	08 f4       	brcc	.+2      	; 0x6ec <xTaskResumeFromISR+0x4e>
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	89 83       	std	Y+1, r24	; 0x01
					uxListRemove(  &( pxTCB->xGenericListItem ) );
     6ee:	8a 81       	ldd	r24, Y+2	; 0x02
     6f0:	9b 81       	ldd	r25, Y+3	; 0x03
     6f2:	02 96       	adiw	r24, 0x02	; 2
     6f4:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	9b 81       	ldd	r25, Y+3	; 0x03
     6fc:	fc 01       	movw	r30, r24
     6fe:	96 89       	ldd	r25, Z+22	; 0x16
     700:	80 91 7a 02 	lds	r24, 0x027A
     704:	89 17       	cp	r24, r25
     706:	30 f4       	brcc	.+12     	; 0x714 <xTaskResumeFromISR+0x76>
     708:	8a 81       	ldd	r24, Y+2	; 0x02
     70a:	9b 81       	ldd	r25, Y+3	; 0x03
     70c:	fc 01       	movw	r30, r24
     70e:	86 89       	ldd	r24, Z+22	; 0x16
     710:	80 93 7a 02 	sts	0x027A, r24
     714:	8a 81       	ldd	r24, Y+2	; 0x02
     716:	9b 81       	ldd	r25, Y+3	; 0x03
     718:	ac 01       	movw	r20, r24
     71a:	4e 5f       	subi	r20, 0xFE	; 254
     71c:	5f 4f       	sbci	r21, 0xFF	; 255
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	9b 81       	ldd	r25, Y+3	; 0x03
     722:	fc 01       	movw	r30, r24
     724:	86 89       	ldd	r24, Z+22	; 0x16
     726:	28 2f       	mov	r18, r24
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	c9 01       	movw	r24, r18
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	82 0f       	add	r24, r18
     73a:	93 1f       	adc	r25, r19
     73c:	86 5d       	subi	r24, 0xD6	; 214
     73e:	9d 4f       	sbci	r25, 0xFD	; 253
     740:	ba 01       	movw	r22, r20
     742:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>
     746:	08 c0       	rjmp	.+16     	; 0x758 <xTaskResumeFromISR+0xba>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	9b 81       	ldd	r25, Y+3	; 0x03
     74c:	0c 96       	adiw	r24, 0x0c	; 12
     74e:	bc 01       	movw	r22, r24
     750:	84 e6       	ldi	r24, 0x64	; 100
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
     758:	89 81       	ldd	r24, Y+1	; 0x01
	}
     75a:	26 96       	adiw	r28, 0x06	; 6
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
     76c:	af 92       	push	r10
     76e:	bf 92       	push	r11
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	1f 92       	push	r1
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
     784:	a1 2c       	mov	r10, r1
     786:	b1 2c       	mov	r11, r1
     788:	c1 2c       	mov	r12, r1
     78a:	d1 2c       	mov	r13, r1
     78c:	e1 2c       	mov	r14, r1
     78e:	f1 2c       	mov	r15, r1
     790:	00 e0       	ldi	r16, 0x00	; 0
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	45 e5       	ldi	r20, 0x55	; 85
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	62 e0       	ldi	r22, 0x02	; 2
     79c:	72 e0       	ldi	r23, 0x02	; 2
     79e:	8b e6       	ldi	r24, 0x6B	; 107
     7a0:	97 e0       	ldi	r25, 0x07	; 7
     7a2:	0e 94 b7 00 	call	0x16e	; 0x16e <xTaskGenericCreate>
     7a6:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	51 f4       	brne	.+20     	; 0x7c2 <vTaskStartScheduler+0x56>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
     7ae:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	80 93 7b 02 	sts	0x027B, r24
		xTickCount = ( portTickType ) 0U;
     7b6:	10 92 78 02 	sts	0x0278, r1
     7ba:	10 92 77 02 	sts	0x0277, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     7be:	0e 94 57 16 	call	0x2cae	; 0x2cae <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	bf 90       	pop	r11
     7d4:	af 90       	pop	r10
     7d6:	08 95       	ret

000007d8 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
     7e0:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
     7e2:	10 92 7b 02 	sts	0x027B, r1
	vPortEndScheduler();
     7e6:	0e 94 90 16 	call	0x2d20	; 0x2d20 <vPortEndScheduler>
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
     7f8:	80 91 7c 02 	lds	r24, 0x027C
     7fc:	8f 5f       	subi	r24, 0xFF	; 255
     7fe:	80 93 7c 02 	sts	0x027C, r24
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	1f 92       	push	r1
     812:	1f 92       	push	r1
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     818:	19 82       	std	Y+1, r1	; 0x01
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
     820:	80 91 7c 02 	lds	r24, 0x027C
     824:	81 50       	subi	r24, 0x01	; 1
     826:	80 93 7c 02 	sts	0x027C, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     82a:	80 91 7c 02 	lds	r24, 0x027C
     82e:	88 23       	and	r24, r24
     830:	09 f0       	breq	.+2      	; 0x834 <xTaskResumeAll+0x2c>
     832:	64 c0       	rjmp	.+200    	; 0x8fc <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
     834:	80 91 76 02 	lds	r24, 0x0276
     838:	88 23       	and	r24, r24
     83a:	09 f4       	brne	.+2      	; 0x83e <xTaskResumeAll+0x36>
     83c:	5f c0       	rjmp	.+190    	; 0x8fc <xTaskResumeAll+0xf4>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
     83e:	1a 82       	std	Y+2, r1	; 0x02

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     840:	3a c0       	rjmp	.+116    	; 0x8b6 <xTaskResumeAll+0xae>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
     842:	80 91 69 02 	lds	r24, 0x0269
     846:	90 91 6a 02 	lds	r25, 0x026A
     84a:	fc 01       	movw	r30, r24
     84c:	06 81       	ldd	r16, Z+6	; 0x06
     84e:	17 81       	ldd	r17, Z+7	; 0x07
					uxListRemove( &( pxTCB->xEventListItem ) );
     850:	c8 01       	movw	r24, r16
     852:	0c 96       	adiw	r24, 0x0c	; 12
     854:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
					uxListRemove( &( pxTCB->xGenericListItem ) );
     858:	c8 01       	movw	r24, r16
     85a:	02 96       	adiw	r24, 0x02	; 2
     85c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     860:	f8 01       	movw	r30, r16
     862:	96 89       	ldd	r25, Z+22	; 0x16
     864:	80 91 7a 02 	lds	r24, 0x027A
     868:	89 17       	cp	r24, r25
     86a:	20 f4       	brcc	.+8      	; 0x874 <xTaskResumeAll+0x6c>
     86c:	f8 01       	movw	r30, r16
     86e:	86 89       	ldd	r24, Z+22	; 0x16
     870:	80 93 7a 02 	sts	0x027A, r24
     874:	a8 01       	movw	r20, r16
     876:	4e 5f       	subi	r20, 0xFE	; 254
     878:	5f 4f       	sbci	r21, 0xFF	; 255
     87a:	f8 01       	movw	r30, r16
     87c:	86 89       	ldd	r24, Z+22	; 0x16
     87e:	28 2f       	mov	r18, r24
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	c9 01       	movw	r24, r18
     884:	88 0f       	add	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	88 0f       	add	r24, r24
     88e:	99 1f       	adc	r25, r25
     890:	82 0f       	add	r24, r18
     892:	93 1f       	adc	r25, r19
     894:	86 5d       	subi	r24, 0xD6	; 214
     896:	9d 4f       	sbci	r25, 0xFD	; 253
     898:	ba 01       	movw	r22, r20
     89a:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     89e:	f8 01       	movw	r30, r16
     8a0:	26 89       	ldd	r18, Z+22	; 0x16
     8a2:	80 91 28 02 	lds	r24, 0x0228
     8a6:	90 91 29 02 	lds	r25, 0x0229
     8aa:	fc 01       	movw	r30, r24
     8ac:	86 89       	ldd	r24, Z+22	; 0x16
     8ae:	28 17       	cp	r18, r24
     8b0:	10 f0       	brcs	.+4      	; 0x8b6 <xTaskResumeAll+0xae>
					{
						xYieldRequired = pdTRUE;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	8a 83       	std	Y+2, r24	; 0x02
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     8b6:	80 91 64 02 	lds	r24, 0x0264
     8ba:	88 23       	and	r24, r24
     8bc:	11 f6       	brne	.-124    	; 0x842 <xTaskResumeAll+0x3a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     8be:	80 91 7d 02 	lds	r24, 0x027D
     8c2:	88 23       	and	r24, r24
     8c4:	71 f0       	breq	.+28     	; 0x8e2 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <xTaskResumeAll+0xce>
					{
						vTaskIncrementTick();
     8c8:	0e 94 bd 04 	call	0x97a	; 0x97a <vTaskIncrementTick>
						--uxMissedTicks;
     8cc:	80 91 7d 02 	lds	r24, 0x027D
     8d0:	81 50       	subi	r24, 0x01	; 1
     8d2:	80 93 7d 02 	sts	0x027D, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     8d6:	80 91 7d 02 	lds	r24, 0x027D
     8da:	88 23       	and	r24, r24
     8dc:	a9 f7       	brne	.-22     	; 0x8c8 <xTaskResumeAll+0xc0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	21 f0       	breq	.+8      	; 0x8f0 <xTaskResumeAll+0xe8>
     8e8:	80 91 7e 02 	lds	r24, 0x027E
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	31 f4       	brne	.+12     	; 0x8fc <xTaskResumeAll+0xf4>
				{
					xAlreadyYielded = pdTRUE;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	89 83       	std	Y+1, r24	; 0x01
					xMissedYield = pdFALSE;
     8f4:	10 92 7e 02 	sts	0x027E, r1
					portYIELD_WITHIN_API();
     8f8:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
     8fc:	0f 90       	pop	r0
     8fe:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
     900:	89 81       	ldd	r24, Y+1	; 0x01
}
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	08 95       	ret

00000910 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	1f 92       	push	r1
     916:	1f 92       	push	r1
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	0f 92       	push	r0
	{
		xTicks = xTickCount;
     922:	80 91 77 02 	lds	r24, 0x0277
     926:	90 91 78 02 	lds	r25, 0x0278
     92a:	9a 83       	std	Y+2, r25	; 0x02
     92c:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63

	return xTicks;
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	9a 81       	ldd	r25, Y+2	; 0x02
}
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	00 d0       	rcall	.+0      	; 0x946 <xTaskGetTickCountFromISR+0x6>
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     94a:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
     94c:	80 91 77 02 	lds	r24, 0x0277
     950:	90 91 78 02 	lds	r25, 0x0278
     954:	9b 83       	std	Y+3, r25	; 0x03
     956:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
     958:	8a 81       	ldd	r24, Y+2	; 0x02
     95a:	9b 81       	ldd	r25, Y+3	; 0x03
}
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
     970:	80 91 76 02 	lds	r24, 0x0276
}
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	00 d0       	rcall	.+0      	; 0x980 <vTaskIncrementTick+0x6>
     980:	00 d0       	rcall	.+0      	; 0x982 <vTaskIncrementTick+0x8>
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     986:	80 91 7c 02 	lds	r24, 0x027C
     98a:	88 23       	and	r24, r24
     98c:	09 f0       	breq	.+2      	; 0x990 <vTaskIncrementTick+0x16>
     98e:	c4 c0       	rjmp	.+392    	; 0xb18 <vTaskIncrementTick+0x19e>
	{
		++xTickCount;
     990:	80 91 77 02 	lds	r24, 0x0277
     994:	90 91 78 02 	lds	r25, 0x0278
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	90 93 78 02 	sts	0x0278, r25
     99e:	80 93 77 02 	sts	0x0277, r24
		if( xTickCount == ( portTickType ) 0U )
     9a2:	80 91 77 02 	lds	r24, 0x0277
     9a6:	90 91 78 02 	lds	r25, 0x0278
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	e9 f5       	brne	.+122    	; 0xa28 <vTaskIncrementTick+0xae>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
     9ae:	80 91 60 02 	lds	r24, 0x0260
     9b2:	90 91 61 02 	lds	r25, 0x0261
     9b6:	9a 83       	std	Y+2, r25	; 0x02
     9b8:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedTaskList = pxOverflowDelayedTaskList;
     9ba:	80 91 62 02 	lds	r24, 0x0262
     9be:	90 91 63 02 	lds	r25, 0x0263
     9c2:	90 93 61 02 	sts	0x0261, r25
     9c6:	80 93 60 02 	sts	0x0260, r24
			pxOverflowDelayedTaskList = pxTemp;
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	9a 81       	ldd	r25, Y+2	; 0x02
     9ce:	90 93 63 02 	sts	0x0263, r25
     9d2:	80 93 62 02 	sts	0x0262, r24
			xNumOfOverflows++;
     9d6:	80 91 7f 02 	lds	r24, 0x027F
     9da:	8f 5f       	subi	r24, 0xFF	; 255
     9dc:	80 93 7f 02 	sts	0x027F, r24

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     9e0:	80 91 60 02 	lds	r24, 0x0260
     9e4:	90 91 61 02 	lds	r25, 0x0261
     9e8:	fc 01       	movw	r30, r24
     9ea:	80 81       	ld	r24, Z
     9ec:	88 23       	and	r24, r24
     9ee:	39 f4       	brne	.+14     	; 0x9fe <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	9f ef       	ldi	r25, 0xFF	; 255
     9f4:	90 93 01 02 	sts	0x0201, r25
     9f8:	80 93 00 02 	sts	0x0200, r24
     9fc:	15 c0       	rjmp	.+42     	; 0xa28 <vTaskIncrementTick+0xae>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     9fe:	80 91 60 02 	lds	r24, 0x0260
     a02:	90 91 61 02 	lds	r25, 0x0261
     a06:	fc 01       	movw	r30, r24
     a08:	85 81       	ldd	r24, Z+5	; 0x05
     a0a:	96 81       	ldd	r25, Z+6	; 0x06
     a0c:	fc 01       	movw	r30, r24
     a0e:	86 81       	ldd	r24, Z+6	; 0x06
     a10:	97 81       	ldd	r25, Z+7	; 0x07
     a12:	9c 83       	std	Y+4, r25	; 0x04
     a14:	8b 83       	std	Y+3, r24	; 0x03
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	fc 01       	movw	r30, r24
     a1c:	82 81       	ldd	r24, Z+2	; 0x02
     a1e:	93 81       	ldd	r25, Z+3	; 0x03
     a20:	90 93 01 02 	sts	0x0201, r25
     a24:	80 93 00 02 	sts	0x0200, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
     a28:	20 91 77 02 	lds	r18, 0x0277
     a2c:	30 91 78 02 	lds	r19, 0x0278
     a30:	80 91 00 02 	lds	r24, 0x0200
     a34:	90 91 01 02 	lds	r25, 0x0201
     a38:	28 17       	cp	r18, r24
     a3a:	39 07       	cpc	r19, r25
     a3c:	08 f4       	brcc	.+2      	; 0xa40 <vTaskIncrementTick+0xc6>
     a3e:	6b c0       	rjmp	.+214    	; 0xb16 <vTaskIncrementTick+0x19c>
     a40:	80 91 60 02 	lds	r24, 0x0260
     a44:	90 91 61 02 	lds	r25, 0x0261
     a48:	fc 01       	movw	r30, r24
     a4a:	80 81       	ld	r24, Z
     a4c:	88 23       	and	r24, r24
     a4e:	39 f4       	brne	.+14     	; 0xa5e <vTaskIncrementTick+0xe4>
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	9f ef       	ldi	r25, 0xFF	; 255
     a54:	90 93 01 02 	sts	0x0201, r25
     a58:	80 93 00 02 	sts	0x0200, r24
     a5c:	5c c0       	rjmp	.+184    	; 0xb16 <vTaskIncrementTick+0x19c>
     a5e:	80 91 60 02 	lds	r24, 0x0260
     a62:	90 91 61 02 	lds	r25, 0x0261
     a66:	fc 01       	movw	r30, r24
     a68:	85 81       	ldd	r24, Z+5	; 0x05
     a6a:	96 81       	ldd	r25, Z+6	; 0x06
     a6c:	fc 01       	movw	r30, r24
     a6e:	86 81       	ldd	r24, Z+6	; 0x06
     a70:	97 81       	ldd	r25, Z+7	; 0x07
     a72:	9c 83       	std	Y+4, r25	; 0x04
     a74:	8b 83       	std	Y+3, r24	; 0x03
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	9c 81       	ldd	r25, Y+4	; 0x04
     a7a:	fc 01       	movw	r30, r24
     a7c:	82 81       	ldd	r24, Z+2	; 0x02
     a7e:	93 81       	ldd	r25, Z+3	; 0x03
     a80:	9e 83       	std	Y+6, r25	; 0x06
     a82:	8d 83       	std	Y+5, r24	; 0x05
     a84:	20 91 77 02 	lds	r18, 0x0277
     a88:	30 91 78 02 	lds	r19, 0x0278
     a8c:	8d 81       	ldd	r24, Y+5	; 0x05
     a8e:	9e 81       	ldd	r25, Y+6	; 0x06
     a90:	28 17       	cp	r18, r24
     a92:	39 07       	cpc	r19, r25
     a94:	38 f4       	brcc	.+14     	; 0xaa4 <vTaskIncrementTick+0x12a>
     a96:	8d 81       	ldd	r24, Y+5	; 0x05
     a98:	9e 81       	ldd	r25, Y+6	; 0x06
     a9a:	90 93 01 02 	sts	0x0201, r25
     a9e:	80 93 00 02 	sts	0x0200, r24
     aa2:	39 c0       	rjmp	.+114    	; 0xb16 <vTaskIncrementTick+0x19c>
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	9c 81       	ldd	r25, Y+4	; 0x04
     aa8:	02 96       	adiw	r24, 0x02	; 2
     aaa:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
     aae:	8b 81       	ldd	r24, Y+3	; 0x03
     ab0:	9c 81       	ldd	r25, Y+4	; 0x04
     ab2:	fc 01       	movw	r30, r24
     ab4:	84 89       	ldd	r24, Z+20	; 0x14
     ab6:	95 89       	ldd	r25, Z+21	; 0x15
     ab8:	00 97       	sbiw	r24, 0x00	; 0
     aba:	29 f0       	breq	.+10     	; 0xac6 <vTaskIncrementTick+0x14c>
     abc:	8b 81       	ldd	r24, Y+3	; 0x03
     abe:	9c 81       	ldd	r25, Y+4	; 0x04
     ac0:	0c 96       	adiw	r24, 0x0c	; 12
     ac2:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
     ac6:	8b 81       	ldd	r24, Y+3	; 0x03
     ac8:	9c 81       	ldd	r25, Y+4	; 0x04
     aca:	fc 01       	movw	r30, r24
     acc:	96 89       	ldd	r25, Z+22	; 0x16
     ace:	80 91 7a 02 	lds	r24, 0x027A
     ad2:	89 17       	cp	r24, r25
     ad4:	30 f4       	brcc	.+12     	; 0xae2 <vTaskIncrementTick+0x168>
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	9c 81       	ldd	r25, Y+4	; 0x04
     ada:	fc 01       	movw	r30, r24
     adc:	86 89       	ldd	r24, Z+22	; 0x16
     ade:	80 93 7a 02 	sts	0x027A, r24
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	9c 81       	ldd	r25, Y+4	; 0x04
     ae6:	ac 01       	movw	r20, r24
     ae8:	4e 5f       	subi	r20, 0xFE	; 254
     aea:	5f 4f       	sbci	r21, 0xFF	; 255
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
     aee:	9c 81       	ldd	r25, Y+4	; 0x04
     af0:	fc 01       	movw	r30, r24
     af2:	86 89       	ldd	r24, Z+22	; 0x16
     af4:	28 2f       	mov	r18, r24
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	c9 01       	movw	r24, r18
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	82 0f       	add	r24, r18
     b08:	93 1f       	adc	r25, r19
     b0a:	86 5d       	subi	r24, 0xD6	; 214
     b0c:	9d 4f       	sbci	r25, 0xFD	; 253
     b0e:	ba 01       	movw	r22, r20
     b10:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>
     b14:	95 cf       	rjmp	.-214    	; 0xa40 <vTaskIncrementTick+0xc6>
     b16:	05 c0       	rjmp	.+10     	; 0xb22 <vTaskIncrementTick+0x1a8>
	}
	else
	{
		++uxMissedTicks;
     b18:	80 91 7d 02 	lds	r24, 0x027D
     b1c:	8f 5f       	subi	r24, 0xFF	; 255
     b1e:	80 93 7d 02 	sts	0x027D, r24
		{
			vApplicationTickHook();
		}
	}
	#endif
}
     b22:	26 96       	adiw	r28, 0x06	; 6
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	1f 92       	push	r1
     b3a:	1f 92       	push	r1
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     b40:	80 91 7c 02 	lds	r24, 0x027C
     b44:	88 23       	and	r24, r24
     b46:	21 f0       	breq	.+8      	; 0xb50 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 7e 02 	sts	0x027E, r24
     b4e:	7a c0       	rjmp	.+244    	; 0xc44 <vTaskSwitchContext+0x110>
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTempCounter;
		}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
     b50:	80 91 28 02 	lds	r24, 0x0228
     b54:	90 91 29 02 	lds	r25, 0x0229
     b58:	fc 01       	movw	r30, r24
     b5a:	20 81       	ld	r18, Z
     b5c:	31 81       	ldd	r19, Z+1	; 0x01
     b5e:	80 91 28 02 	lds	r24, 0x0228
     b62:	90 91 29 02 	lds	r25, 0x0229
     b66:	fc 01       	movw	r30, r24
     b68:	87 89       	ldd	r24, Z+23	; 0x17
     b6a:	90 8d       	ldd	r25, Z+24	; 0x18
     b6c:	82 17       	cp	r24, r18
     b6e:	93 07       	cpc	r25, r19
     b70:	70 f0       	brcs	.+28     	; 0xb8e <vTaskSwitchContext+0x5a>
     b72:	80 91 28 02 	lds	r24, 0x0228
     b76:	90 91 29 02 	lds	r25, 0x0229
     b7a:	9c 01       	movw	r18, r24
     b7c:	27 5e       	subi	r18, 0xE7	; 231
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	80 91 28 02 	lds	r24, 0x0228
     b84:	90 91 29 02 	lds	r25, 0x0229
     b88:	b9 01       	movw	r22, r18
     b8a:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <vTaskSwitchContext+0x66>
     b90:	80 91 7a 02 	lds	r24, 0x027A
     b94:	81 50       	subi	r24, 0x01	; 1
     b96:	80 93 7a 02 	sts	0x027A, r24
     b9a:	80 91 7a 02 	lds	r24, 0x027A
     b9e:	28 2f       	mov	r18, r24
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	c9 01       	movw	r24, r18
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	82 0f       	add	r24, r18
     bb2:	93 1f       	adc	r25, r19
     bb4:	86 5d       	subi	r24, 0xD6	; 214
     bb6:	9d 4f       	sbci	r25, 0xFD	; 253
     bb8:	fc 01       	movw	r30, r24
     bba:	80 81       	ld	r24, Z
     bbc:	88 23       	and	r24, r24
     bbe:	41 f3       	breq	.-48     	; 0xb90 <vTaskSwitchContext+0x5c>
     bc0:	80 91 7a 02 	lds	r24, 0x027A
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	c9 01       	movw	r24, r18
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	82 0f       	add	r24, r18
     bd8:	93 1f       	adc	r25, r19
     bda:	86 5d       	subi	r24, 0xD6	; 214
     bdc:	9d 4f       	sbci	r25, 0xFD	; 253
     bde:	9a 83       	std	Y+2, r25	; 0x02
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	fc 01       	movw	r30, r24
     be8:	81 81       	ldd	r24, Z+1	; 0x01
     bea:	92 81       	ldd	r25, Z+2	; 0x02
     bec:	fc 01       	movw	r30, r24
     bee:	22 81       	ldd	r18, Z+2	; 0x02
     bf0:	33 81       	ldd	r19, Z+3	; 0x03
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	9a 81       	ldd	r25, Y+2	; 0x02
     bf6:	fc 01       	movw	r30, r24
     bf8:	32 83       	std	Z+2, r19	; 0x02
     bfa:	21 83       	std	Z+1, r18	; 0x01
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	fc 01       	movw	r30, r24
     c02:	21 81       	ldd	r18, Z+1	; 0x01
     c04:	32 81       	ldd	r19, Z+2	; 0x02
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	03 96       	adiw	r24, 0x03	; 3
     c0c:	28 17       	cp	r18, r24
     c0e:	39 07       	cpc	r19, r25
     c10:	69 f4       	brne	.+26     	; 0xc2c <vTaskSwitchContext+0xf8>
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	fc 01       	movw	r30, r24
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	92 81       	ldd	r25, Z+2	; 0x02
     c1c:	fc 01       	movw	r30, r24
     c1e:	22 81       	ldd	r18, Z+2	; 0x02
     c20:	33 81       	ldd	r19, Z+3	; 0x03
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	9a 81       	ldd	r25, Y+2	; 0x02
     c26:	fc 01       	movw	r30, r24
     c28:	32 83       	std	Z+2, r19	; 0x02
     c2a:	21 83       	std	Z+1, r18	; 0x01
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	fc 01       	movw	r30, r24
     c32:	81 81       	ldd	r24, Z+1	; 0x01
     c34:	92 81       	ldd	r25, Z+2	; 0x02
     c36:	fc 01       	movw	r30, r24
     c38:	86 81       	ldd	r24, Z+6	; 0x06
     c3a:	97 81       	ldd	r25, Z+7	; 0x07
     c3c:	90 93 29 02 	sts	0x0229, r25
     c40:	80 93 28 02 	sts	0x0228, r24

		traceTASK_SWITCHED_IN();
	}
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	00 d0       	rcall	.+0      	; 0xc54 <vTaskPlaceOnEventList+0x6>
     c54:	00 d0       	rcall	.+0      	; 0xc56 <vTaskPlaceOnEventList+0x8>
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	9c 83       	std	Y+4, r25	; 0x04
     c5c:	8b 83       	std	Y+3, r24	; 0x03
     c5e:	7e 83       	std	Y+6, r23	; 0x06
     c60:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
     c62:	80 91 28 02 	lds	r24, 0x0228
     c66:	90 91 29 02 	lds	r25, 0x0229
     c6a:	9c 01       	movw	r18, r24
     c6c:	24 5f       	subi	r18, 0xF4	; 244
     c6e:	3f 4f       	sbci	r19, 0xFF	; 255
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	9c 81       	ldd	r25, Y+4	; 0x04
     c74:	b9 01       	movw	r22, r18
     c76:	0e 94 5d 10 	call	0x20ba	; 0x20ba <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     c7a:	80 91 28 02 	lds	r24, 0x0228
     c7e:	90 91 29 02 	lds	r25, 0x0229
     c82:	02 96       	adiw	r24, 0x02	; 2
     c84:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
     c8a:	9e 81       	ldd	r25, Y+6	; 0x06
     c8c:	8f 3f       	cpi	r24, 0xFF	; 255
     c8e:	2f ef       	ldi	r18, 0xFF	; 255
     c90:	92 07       	cpc	r25, r18
     c92:	59 f4       	brne	.+22     	; 0xcaa <vTaskPlaceOnEventList+0x5c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     c94:	80 91 28 02 	lds	r24, 0x0228
     c98:	90 91 29 02 	lds	r25, 0x0229
     c9c:	02 96       	adiw	r24, 0x02	; 2
     c9e:	bc 01       	movw	r22, r24
     ca0:	8d e6       	ldi	r24, 0x6D	; 109
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>
     ca8:	0e c0       	rjmp	.+28     	; 0xcc6 <vTaskPlaceOnEventList+0x78>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
     caa:	20 91 77 02 	lds	r18, 0x0277
     cae:	30 91 78 02 	lds	r19, 0x0278
     cb2:	8d 81       	ldd	r24, Y+5	; 0x05
     cb4:	9e 81       	ldd	r25, Y+6	; 0x06
     cb6:	82 0f       	add	r24, r18
     cb8:	93 1f       	adc	r25, r19
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	0e 94 21 08 	call	0x1042	; 0x1042 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
     cc6:	26 96       	adiw	r28, 0x06	; 6
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	00 d0       	rcall	.+0      	; 0xcde <xTaskRemoveFromEventList+0x6>
     cde:	1f 92       	push	r1
     ce0:	1f 92       	push	r1
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	9d 83       	std	Y+5, r25	; 0x05
     ce8:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	fc 01       	movw	r30, r24
     cf0:	85 81       	ldd	r24, Z+5	; 0x05
     cf2:	96 81       	ldd	r25, Z+6	; 0x06
     cf4:	fc 01       	movw	r30, r24
     cf6:	86 81       	ldd	r24, Z+6	; 0x06
     cf8:	97 81       	ldd	r25, Z+7	; 0x07
     cfa:	9b 83       	std	Y+3, r25	; 0x03
     cfc:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	0c 96       	adiw	r24, 0x0c	; 12
     d04:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     d08:	80 91 7c 02 	lds	r24, 0x027C
     d0c:	88 23       	and	r24, r24
     d0e:	69 f5       	brne	.+90     	; 0xd6a <xTaskRemoveFromEventList+0x92>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	9b 81       	ldd	r25, Y+3	; 0x03
     d14:	02 96       	adiw	r24, 0x02	; 2
     d16:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	9b 81       	ldd	r25, Y+3	; 0x03
     d1e:	fc 01       	movw	r30, r24
     d20:	96 89       	ldd	r25, Z+22	; 0x16
     d22:	80 91 7a 02 	lds	r24, 0x027A
     d26:	89 17       	cp	r24, r25
     d28:	30 f4       	brcc	.+12     	; 0xd36 <xTaskRemoveFromEventList+0x5e>
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	9b 81       	ldd	r25, Y+3	; 0x03
     d2e:	fc 01       	movw	r30, r24
     d30:	86 89       	ldd	r24, Z+22	; 0x16
     d32:	80 93 7a 02 	sts	0x027A, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	9b 81       	ldd	r25, Y+3	; 0x03
     d3a:	ac 01       	movw	r20, r24
     d3c:	4e 5f       	subi	r20, 0xFE	; 254
     d3e:	5f 4f       	sbci	r21, 0xFF	; 255
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	9b 81       	ldd	r25, Y+3	; 0x03
     d44:	fc 01       	movw	r30, r24
     d46:	86 89       	ldd	r24, Z+22	; 0x16
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	c9 01       	movw	r24, r18
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	82 0f       	add	r24, r18
     d5c:	93 1f       	adc	r25, r19
     d5e:	86 5d       	subi	r24, 0xD6	; 214
     d60:	9d 4f       	sbci	r25, 0xFD	; 253
     d62:	ba 01       	movw	r22, r20
     d64:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>
     d68:	08 c0       	rjmp	.+16     	; 0xd7a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	9b 81       	ldd	r25, Y+3	; 0x03
     d6e:	0c 96       	adiw	r24, 0x0c	; 12
     d70:	bc 01       	movw	r22, r24
     d72:	84 e6       	ldi	r24, 0x64	; 100
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	9b 81       	ldd	r25, Y+3	; 0x03
     d7e:	fc 01       	movw	r30, r24
     d80:	26 89       	ldd	r18, Z+22	; 0x16
     d82:	80 91 28 02 	lds	r24, 0x0228
     d86:	90 91 29 02 	lds	r25, 0x0229
     d8a:	fc 01       	movw	r30, r24
     d8c:	86 89       	ldd	r24, Z+22	; 0x16
     d8e:	28 17       	cp	r18, r24
     d90:	18 f0       	brcs	.+6      	; 0xd98 <xTaskRemoveFromEventList+0xc0>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <xTaskRemoveFromEventList+0xc2>
	}
	else
	{
		xReturn = pdFALSE;
     d98:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	1f 92       	push	r1
     db2:	1f 92       	push	r1
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     dbc:	20 91 7f 02 	lds	r18, 0x027F
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	fc 01       	movw	r30, r24
     dc6:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
     dc8:	20 91 77 02 	lds	r18, 0x0277
     dcc:	30 91 78 02 	lds	r19, 0x0278
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	fc 01       	movw	r30, r24
     dd6:	32 83       	std	Z+2, r19	; 0x02
     dd8:	21 83       	std	Z+1, r18	; 0x01
}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	00 d0       	rcall	.+0      	; 0xdea <xTaskCheckForTimeOut+0x6>
     dea:	1f 92       	push	r1
     dec:	1f 92       	push	r1
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	9b 83       	std	Y+3, r25	; 0x03
     df4:	8a 83       	std	Y+2, r24	; 0x02
     df6:	7d 83       	std	Y+5, r23	; 0x05
     df8:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	9d 81       	ldd	r25, Y+5	; 0x05
     e04:	fc 01       	movw	r30, r24
     e06:	80 81       	ld	r24, Z
     e08:	91 81       	ldd	r25, Z+1	; 0x01
     e0a:	8f 3f       	cpi	r24, 0xFF	; 255
     e0c:	ff ef       	ldi	r31, 0xFF	; 255
     e0e:	9f 07       	cpc	r25, r31
     e10:	11 f4       	brne	.+4      	; 0xe16 <xTaskCheckForTimeOut+0x32>
			{
				xReturn = pdFALSE;
     e12:	19 82       	std	Y+1, r1	; 0x01
     e14:	4b c0       	rjmp	.+150    	; 0xeac <xTaskCheckForTimeOut+0xc8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	fc 01       	movw	r30, r24
     e1c:	90 81       	ld	r25, Z
     e1e:	80 91 7f 02 	lds	r24, 0x027F
     e22:	98 17       	cp	r25, r24
     e24:	79 f0       	breq	.+30     	; 0xe44 <xTaskCheckForTimeOut+0x60>
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	9b 81       	ldd	r25, Y+3	; 0x03
     e2a:	fc 01       	movw	r30, r24
     e2c:	21 81       	ldd	r18, Z+1	; 0x01
     e2e:	32 81       	ldd	r19, Z+2	; 0x02
     e30:	80 91 77 02 	lds	r24, 0x0277
     e34:	90 91 78 02 	lds	r25, 0x0278
     e38:	82 17       	cp	r24, r18
     e3a:	93 07       	cpc	r25, r19
     e3c:	18 f0       	brcs	.+6      	; 0xe44 <xTaskCheckForTimeOut+0x60>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	34 c0       	rjmp	.+104    	; 0xeac <xTaskCheckForTimeOut+0xc8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
     e44:	20 91 77 02 	lds	r18, 0x0277
     e48:	30 91 78 02 	lds	r19, 0x0278
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	9b 81       	ldd	r25, Y+3	; 0x03
     e50:	fc 01       	movw	r30, r24
     e52:	81 81       	ldd	r24, Z+1	; 0x01
     e54:	92 81       	ldd	r25, Z+2	; 0x02
     e56:	28 1b       	sub	r18, r24
     e58:	39 0b       	sbc	r19, r25
     e5a:	8c 81       	ldd	r24, Y+4	; 0x04
     e5c:	9d 81       	ldd	r25, Y+5	; 0x05
     e5e:	fc 01       	movw	r30, r24
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	28 17       	cp	r18, r24
     e66:	39 07       	cpc	r19, r25
     e68:	f8 f4       	brcc	.+62     	; 0xea8 <xTaskCheckForTimeOut+0xc4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
     e6a:	20 91 77 02 	lds	r18, 0x0277
     e6e:	30 91 78 02 	lds	r19, 0x0278
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	9b 81       	ldd	r25, Y+3	; 0x03
     e76:	fc 01       	movw	r30, r24
     e78:	81 81       	ldd	r24, Z+1	; 0x01
     e7a:	92 81       	ldd	r25, Z+2	; 0x02
     e7c:	a9 01       	movw	r20, r18
     e7e:	48 1b       	sub	r20, r24
     e80:	59 0b       	sbc	r21, r25
     e82:	ca 01       	movw	r24, r20
     e84:	2c 81       	ldd	r18, Y+4	; 0x04
     e86:	3d 81       	ldd	r19, Y+5	; 0x05
     e88:	f9 01       	movw	r30, r18
     e8a:	20 81       	ld	r18, Z
     e8c:	31 81       	ldd	r19, Z+1	; 0x01
     e8e:	28 1b       	sub	r18, r24
     e90:	39 0b       	sbc	r19, r25
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	9d 81       	ldd	r25, Y+5	; 0x05
     e96:	fc 01       	movw	r30, r24
     e98:	31 83       	std	Z+1, r19	; 0x01
     e9a:	20 83       	st	Z, r18
			vTaskSetTimeOutState( pxTimeOut );
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	0e 94 d6 06 	call	0xdac	; 0xdac <vTaskSetTimeOutState>
			xReturn = pdFALSE;
     ea4:	19 82       	std	Y+1, r1	; 0x01
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <xTaskCheckForTimeOut+0xc8>
		}
		else
		{
			xReturn = pdTRUE;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63

	return xReturn;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	80 93 7e 02 	sts	0x027E, r24
}
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	1f 92       	push	r1
     edc:	1f 92       	push	r1
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	9a 83       	std	Y+2, r25	; 0x02
     ee4:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
     ee6:	0e 94 1a 08 	call	0x1034	; 0x1034 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
     eea:	80 91 2a 02 	lds	r24, 0x022A
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	10 f0       	brcs	.+4      	; 0xef6 <prvIdleTask+0x20>
			{
				taskYIELD();
     ef2:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
     ef6:	f7 cf       	rjmp	.-18     	; 0xee6 <prvIdleTask+0x10>

00000ef8 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	29 97       	sbiw	r28, 0x09	; 9
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	7c 83       	std	Y+4, r23	; 0x04
     f16:	6b 83       	std	Y+3, r22	; 0x03
     f18:	4d 83       	std	Y+5, r20	; 0x05
     f1a:	3f 83       	std	Y+7, r19	; 0x07
     f1c:	2e 83       	std	Y+6, r18	; 0x06
     f1e:	19 87       	std	Y+9, r17	; 0x09
     f20:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	49 96       	adiw	r24, 0x19	; 25
     f28:	2b 81       	ldd	r18, Y+3	; 0x03
     f2a:	3c 81       	ldd	r19, Y+4	; 0x04
     f2c:	40 e1       	ldi	r20, 0x10	; 16
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	b9 01       	movw	r22, r18
     f32:	0e 94 94 28 	call	0x5128	; 0x5128 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	fc 01       	movw	r30, r24
     f3c:	10 a6       	std	Z+40, r1	; 0x28

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	84 30       	cpi	r24, 0x04	; 4
     f42:	10 f0       	brcs	.+4      	; 0xf48 <prvInitialiseTCBVariables+0x50>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
     f44:	83 e0       	ldi	r24, 0x03	; 3
     f46:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	2d 81       	ldd	r18, Y+5	; 0x05
     f4e:	fc 01       	movw	r30, r24
     f50:	26 8b       	std	Z+22, r18	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	2d 81       	ldd	r18, Y+5	; 0x05
     f58:	fc 01       	movw	r30, r24
     f5a:	21 a7       	std	Z+41, r18	; 0x29
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	02 96       	adiw	r24, 0x02	; 2
     f62:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	0c 96       	adiw	r24, 0x0c	; 12
     f6c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	29 81       	ldd	r18, Y+1	; 0x01
     f76:	3a 81       	ldd	r19, Y+2	; 0x02
     f78:	fc 01       	movw	r30, r24
     f7a:	31 87       	std	Z+9, r19	; 0x09
     f7c:	20 87       	std	Z+8, r18	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     f7e:	8d 81       	ldd	r24, Y+5	; 0x05
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	24 e0       	ldi	r18, 0x04	; 4
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	28 1b       	sub	r18, r24
     f8a:	39 0b       	sbc	r19, r25
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	fc 01       	movw	r30, r24
     f92:	35 87       	std	Z+13, r19	; 0x0d
     f94:	24 87       	std	Z+12, r18	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	29 81       	ldd	r18, Y+1	; 0x01
     f9c:	3a 81       	ldd	r19, Y+2	; 0x02
     f9e:	fc 01       	movw	r30, r24
     fa0:	33 8b       	std	Z+19, r19	; 0x13
     fa2:	22 8b       	std	Z+18, r18	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
     fa4:	29 96       	adiw	r28, 0x09	; 9
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	08 95       	ret

00000fba <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	1f 92       	push	r1
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	13 c0       	rjmp	.+38     	; 0xfee <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	c9 01       	movw	r24, r18
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	82 0f       	add	r24, r18
     fde:	93 1f       	adc	r25, r19
     fe0:	86 5d       	subi	r24, 0xD6	; 214
     fe2:	9d 4f       	sbci	r25, 0xFD	; 253
     fe4:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	84 30       	cpi	r24, 0x04	; 4
     ff2:	50 f3       	brcs	.-44     	; 0xfc8 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
     ff4:	8e e4       	ldi	r24, 0x4E	; 78
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
     ffc:	87 e5       	ldi	r24, 0x57	; 87
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    1004:	84 e6       	ldi	r24, 0x64	; 100
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    100c:	8d e6       	ldi	r24, 0x6D	; 109
    100e:	92 e0       	ldi	r25, 0x02	; 2
    1010:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1014:	8e e4       	ldi	r24, 0x4E	; 78
    1016:	92 e0       	ldi	r25, 0x02	; 2
    1018:	90 93 61 02 	sts	0x0261, r25
    101c:	80 93 60 02 	sts	0x0260, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1020:	87 e5       	ldi	r24, 0x57	; 87
    1022:	92 e0       	ldi	r25, 0x02	; 2
    1024:	90 93 63 02 	sts	0x0263, r25
    1028:	80 93 62 02 	sts	0x0262, r24
}
    102c:	0f 90       	pop	r0
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	1f 92       	push	r1
    1048:	1f 92       	push	r1
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1052:	80 91 28 02 	lds	r24, 0x0228
    1056:	90 91 29 02 	lds	r25, 0x0229
    105a:	29 81       	ldd	r18, Y+1	; 0x01
    105c:	3a 81       	ldd	r19, Y+2	; 0x02
    105e:	fc 01       	movw	r30, r24
    1060:	33 83       	std	Z+3, r19	; 0x03
    1062:	22 83       	std	Z+2, r18	; 0x02

	if( xTimeToWake < xTickCount )
    1064:	80 91 77 02 	lds	r24, 0x0277
    1068:	90 91 78 02 	lds	r25, 0x0278
    106c:	29 81       	ldd	r18, Y+1	; 0x01
    106e:	3a 81       	ldd	r19, Y+2	; 0x02
    1070:	28 17       	cp	r18, r24
    1072:	39 07       	cpc	r19, r25
    1074:	78 f4       	brcc	.+30     	; 0x1094 <prvAddCurrentTaskToDelayedList+0x52>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1076:	80 91 28 02 	lds	r24, 0x0228
    107a:	90 91 29 02 	lds	r25, 0x0229
    107e:	9c 01       	movw	r18, r24
    1080:	2e 5f       	subi	r18, 0xFE	; 254
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	80 91 62 02 	lds	r24, 0x0262
    1088:	90 91 63 02 	lds	r25, 0x0263
    108c:	b9 01       	movw	r22, r18
    108e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <vListInsert>
    1092:	1d c0       	rjmp	.+58     	; 0x10ce <prvAddCurrentTaskToDelayedList+0x8c>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1094:	80 91 28 02 	lds	r24, 0x0228
    1098:	90 91 29 02 	lds	r25, 0x0229
    109c:	9c 01       	movw	r18, r24
    109e:	2e 5f       	subi	r18, 0xFE	; 254
    10a0:	3f 4f       	sbci	r19, 0xFF	; 255
    10a2:	80 91 60 02 	lds	r24, 0x0260
    10a6:	90 91 61 02 	lds	r25, 0x0261
    10aa:	b9 01       	movw	r22, r18
    10ac:	0e 94 5d 10 	call	0x20ba	; 0x20ba <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    10b0:	80 91 00 02 	lds	r24, 0x0200
    10b4:	90 91 01 02 	lds	r25, 0x0201
    10b8:	29 81       	ldd	r18, Y+1	; 0x01
    10ba:	3a 81       	ldd	r19, Y+2	; 0x02
    10bc:	28 17       	cp	r18, r24
    10be:	39 07       	cpc	r19, r25
    10c0:	30 f4       	brcc	.+12     	; 0x10ce <prvAddCurrentTaskToDelayedList+0x8c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	90 93 01 02 	sts	0x0201, r25
    10ca:	80 93 00 02 	sts	0x0200, r24
		}
	}
}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	00 d0       	rcall	.+0      	; 0x10de <prvAllocateTCBAndStack+0x6>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <prvAllocateTCBAndStack+0x8>
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	9c 83       	std	Y+4, r25	; 0x04
    10e6:	8b 83       	std	Y+3, r24	; 0x03
    10e8:	7e 83       	std	Y+6, r23	; 0x06
    10ea:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    10ec:	8a e2       	ldi	r24, 0x2A	; 42
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 24 14 	call	0x2848	; 0x2848 <pvPortMalloc>
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	51 f1       	breq	.+84     	; 0x1154 <prvAllocateTCBAndStack+0x7c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	29 f4       	brne	.+10     	; 0x1112 <prvAllocateTCBAndStack+0x3a>
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	0e 94 24 14 	call	0x2848	; 0x2848 <pvPortMalloc>
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <prvAllocateTCBAndStack+0x3e>
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	29 81       	ldd	r18, Y+1	; 0x01
    1118:	3a 81       	ldd	r19, Y+2	; 0x02
    111a:	f9 01       	movw	r30, r18
    111c:	90 8f       	std	Z+24, r25	; 0x18
    111e:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	fc 01       	movw	r30, r24
    1126:	87 89       	ldd	r24, Z+23	; 0x17
    1128:	90 8d       	ldd	r25, Z+24	; 0x18
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	39 f4       	brne	.+14     	; 0x113c <prvAllocateTCBAndStack+0x64>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <vPortFree>
			pxNewTCB = NULL;
    1136:	1a 82       	std	Y+2, r1	; 0x02
    1138:	19 82       	std	Y+1, r1	; 0x01
    113a:	0c c0       	rjmp	.+24     	; 0x1154 <prvAllocateTCBAndStack+0x7c>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	9a 81       	ldd	r25, Y+2	; 0x02
    1140:	fc 01       	movw	r30, r24
    1142:	87 89       	ldd	r24, Z+23	; 0x17
    1144:	90 8d       	ldd	r25, Z+24	; 0x18
    1146:	2b 81       	ldd	r18, Y+3	; 0x03
    1148:	3c 81       	ldd	r19, Y+4	; 0x04
    114a:	a9 01       	movw	r20, r18
    114c:	65 ea       	ldi	r22, 0xA5	; 165
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	0e 94 8d 28 	call	0x511a	; 0x511a <memset>
		}
	}

	return pxNewTCB;
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1158:	26 96       	adiw	r28, 0x06	; 6
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	1f 92       	push	r1
    1174:	1f 92       	push	r1
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	89 83       	std	Y+1, r24	; 0x01
	register unsigned short usCount = 0U;
    117e:	00 e0       	ldi	r16, 0x00	; 0
    1180:	10 e0       	ldi	r17, 0x00	; 0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    1182:	09 c0       	rjmp	.+18     	; 0x1196 <usTaskCheckFreeStackSpace+0x2c>
		{
			pucStackByte -= portSTACK_GROWTH;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
			usCount++;
    118e:	c8 01       	movw	r24, r16
    1190:	8c 01       	movw	r16, r24
    1192:	0f 5f       	subi	r16, 0xFF	; 255
    1194:	1f 4f       	sbci	r17, 0xFF	; 255

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	fc 01       	movw	r30, r24
    119c:	80 81       	ld	r24, Z
    119e:	85 3a       	cpi	r24, 0xA5	; 165
    11a0:	89 f3       	breq	.-30     	; 0x1184 <usTaskCheckFreeStackSpace+0x1a>
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );

		return usCount;
    11a2:	c8 01       	movw	r24, r16
	}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	08 95       	ret

000011b2 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	27 97       	sbiw	r28, 0x07	; 7
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	9f 83       	std	Y+7, r25	; 0x07
    11c8:	8e 83       	std	Y+6, r24	; 0x06
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    11ca:	8e 81       	ldd	r24, Y+6	; 0x06
    11cc:	9f 81       	ldd	r25, Y+7	; 0x07
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	29 f4       	brne	.+10     	; 0x11dc <uxTaskGetStackHighWaterMark+0x2a>
    11d2:	80 91 28 02 	lds	r24, 0x0228
    11d6:	90 91 29 02 	lds	r25, 0x0229
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <uxTaskGetStackHighWaterMark+0x2e>
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	fc 01       	movw	r30, r24
    11ea:	87 89       	ldd	r24, Z+23	; 0x17
    11ec:	90 8d       	ldd	r25, Z+24	; 0x18
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	8b 83       	std	Y+3, r24	; 0x03
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	0e 94 b5 08 	call	0x116a	; 0x116a <usTaskCheckFreeStackSpace>
    11fa:	8d 83       	std	Y+5, r24	; 0x05

		return uxReturn;
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
	}
    11fe:	27 96       	adiw	r28, 0x07	; 7
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	1f 92       	push	r1
    1216:	1f 92       	push	r1
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    121c:	80 91 28 02 	lds	r24, 0x0228
    1220:	90 91 29 02 	lds	r25, 0x0229
    1224:	9a 83       	std	Y+2, r25	; 0x02
    1226:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	08 95       	ret

00001236 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	00 d0       	rcall	.+0      	; 0x123c <vTaskPriorityInherit+0x6>
    123c:	1f 92       	push	r1
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	9c 83       	std	Y+4, r25	; 0x04
    1244:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	09 f4       	brne	.+2      	; 0x1258 <vTaskPriorityInherit+0x22>
    1256:	78 c0       	rjmp	.+240    	; 0x1348 <vTaskPriorityInherit+0x112>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	fc 01       	movw	r30, r24
    125e:	26 89       	ldd	r18, Z+22	; 0x16
    1260:	80 91 28 02 	lds	r24, 0x0228
    1264:	90 91 29 02 	lds	r25, 0x0229
    1268:	fc 01       	movw	r30, r24
    126a:	86 89       	ldd	r24, Z+22	; 0x16
    126c:	28 17       	cp	r18, r24
    126e:	08 f0       	brcs	.+2      	; 0x1272 <vTaskPriorityInherit+0x3c>
    1270:	6b c0       	rjmp	.+214    	; 0x1348 <vTaskPriorityInherit+0x112>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    1272:	80 91 28 02 	lds	r24, 0x0228
    1276:	90 91 29 02 	lds	r25, 0x0229
    127a:	fc 01       	movw	r30, r24
    127c:	86 89       	ldd	r24, Z+22	; 0x16
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	24 e0       	ldi	r18, 0x04	; 4
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	28 1b       	sub	r18, r24
    1288:	39 0b       	sbc	r19, r25
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	fc 01       	movw	r30, r24
    1290:	35 87       	std	Z+13, r19	; 0x0d
    1292:	24 87       	std	Z+12, r18	; 0x0c

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	fc 01       	movw	r30, r24
    129a:	42 85       	ldd	r20, Z+10	; 0x0a
    129c:	53 85       	ldd	r21, Z+11	; 0x0b
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	9a 81       	ldd	r25, Y+2	; 0x02
    12a2:	fc 01       	movw	r30, r24
    12a4:	86 89       	ldd	r24, Z+22	; 0x16
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	c9 01       	movw	r24, r18
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	82 0f       	add	r24, r18
    12ba:	93 1f       	adc	r25, r19
    12bc:	86 5d       	subi	r24, 0xD6	; 214
    12be:	9d 4f       	sbci	r25, 0xFD	; 253
    12c0:	48 17       	cp	r20, r24
    12c2:	59 07       	cpc	r21, r25
    12c4:	b9 f5       	brne	.+110    	; 0x1334 <vTaskPriorityInherit+0xfe>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	02 96       	adiw	r24, 0x02	; 2
    12cc:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    12d0:	80 91 28 02 	lds	r24, 0x0228
    12d4:	90 91 29 02 	lds	r25, 0x0229
    12d8:	fc 01       	movw	r30, r24
    12da:	26 89       	ldd	r18, Z+22	; 0x16
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	fc 01       	movw	r30, r24
    12e2:	26 8b       	std	Z+22, r18	; 0x16
					prvAddTaskToReadyQueue( pxTCB );
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	fc 01       	movw	r30, r24
    12ea:	96 89       	ldd	r25, Z+22	; 0x16
    12ec:	80 91 7a 02 	lds	r24, 0x027A
    12f0:	89 17       	cp	r24, r25
    12f2:	30 f4       	brcc	.+12     	; 0x1300 <vTaskPriorityInherit+0xca>
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	fc 01       	movw	r30, r24
    12fa:	86 89       	ldd	r24, Z+22	; 0x16
    12fc:	80 93 7a 02 	sts	0x027A, r24
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	ac 01       	movw	r20, r24
    1306:	4e 5f       	subi	r20, 0xFE	; 254
    1308:	5f 4f       	sbci	r21, 0xFF	; 255
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	fc 01       	movw	r30, r24
    1310:	86 89       	ldd	r24, Z+22	; 0x16
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	c9 01       	movw	r24, r18
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	82 0f       	add	r24, r18
    1326:	93 1f       	adc	r25, r19
    1328:	86 5d       	subi	r24, 0xD6	; 214
    132a:	9d 4f       	sbci	r25, 0xFD	; 253
    132c:	ba 01       	movw	r22, r20
    132e:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>
    1332:	0a c0       	rjmp	.+20     	; 0x1348 <vTaskPriorityInherit+0x112>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1334:	80 91 28 02 	lds	r24, 0x0228
    1338:	90 91 29 02 	lds	r25, 0x0229
    133c:	fc 01       	movw	r30, r24
    133e:	26 89       	ldd	r18, Z+22	; 0x16
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	fc 01       	movw	r30, r24
    1346:	26 8b       	std	Z+22, r18	; 0x16
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	00 d0       	rcall	.+0      	; 0x135c <vTaskPriorityDisinherit+0x6>
    135c:	1f 92       	push	r1
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	9c 83       	std	Y+4, r25	; 0x04
    1364:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01

		if( pxMutexHolder != NULL )
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	09 f4       	brne	.+2      	; 0x1378 <vTaskPriorityDisinherit+0x22>
    1376:	4e c0       	rjmp	.+156    	; 0x1414 <vTaskPriorityDisinherit+0xbe>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	fc 01       	movw	r30, r24
    137e:	26 89       	ldd	r18, Z+22	; 0x16
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	fc 01       	movw	r30, r24
    1386:	81 a5       	ldd	r24, Z+41	; 0x29
    1388:	28 17       	cp	r18, r24
    138a:	09 f4       	brne	.+2      	; 0x138e <vTaskPriorityDisinherit+0x38>
    138c:	43 c0       	rjmp	.+134    	; 0x1414 <vTaskPriorityDisinherit+0xbe>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	9a 81       	ldd	r25, Y+2	; 0x02
    1392:	02 96       	adiw	r24, 0x02	; 2
    1394:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	fc 01       	movw	r30, r24
    139e:	21 a5       	ldd	r18, Z+41	; 0x29
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	fc 01       	movw	r30, r24
    13a6:	26 8b       	std	Z+22, r18	; 0x16
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	fc 01       	movw	r30, r24
    13ae:	86 89       	ldd	r24, Z+22	; 0x16
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	24 e0       	ldi	r18, 0x04	; 4
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	28 1b       	sub	r18, r24
    13ba:	39 0b       	sbc	r19, r25
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	fc 01       	movw	r30, r24
    13c2:	35 87       	std	Z+13, r19	; 0x0d
    13c4:	24 87       	std	Z+12, r18	; 0x0c
				prvAddTaskToReadyQueue( pxTCB );
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	fc 01       	movw	r30, r24
    13cc:	96 89       	ldd	r25, Z+22	; 0x16
    13ce:	80 91 7a 02 	lds	r24, 0x027A
    13d2:	89 17       	cp	r24, r25
    13d4:	30 f4       	brcc	.+12     	; 0x13e2 <vTaskPriorityDisinherit+0x8c>
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	9a 81       	ldd	r25, Y+2	; 0x02
    13da:	fc 01       	movw	r30, r24
    13dc:	86 89       	ldd	r24, Z+22	; 0x16
    13de:	80 93 7a 02 	sts	0x027A, r24
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	ac 01       	movw	r20, r24
    13e8:	4e 5f       	subi	r20, 0xFE	; 254
    13ea:	5f 4f       	sbci	r21, 0xFF	; 255
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	9a 81       	ldd	r25, Y+2	; 0x02
    13f0:	fc 01       	movw	r30, r24
    13f2:	86 89       	ldd	r24, Z+22	; 0x16
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	c9 01       	movw	r24, r18
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	82 0f       	add	r24, r18
    1408:	93 1f       	adc	r25, r19
    140a:	86 5d       	subi	r24, 0xD6	; 214
    140c:	9d 4f       	sbci	r25, 0xFD	; 253
    140e:	ba 01       	movw	r22, r20
    1410:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>
			}
		}
	}
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	00 d0       	rcall	.+0      	; 0x1428 <xQueueGenericReset+0x6>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	6b 83       	std	Y+3, r22	; 0x03
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	fc 01       	movw	r30, r24
    143e:	20 81       	ld	r18, Z
    1440:	31 81       	ldd	r19, Z+1	; 0x01
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	9a 81       	ldd	r25, Y+2	; 0x02
    1446:	fc 01       	movw	r30, r24
    1448:	83 8d       	ldd	r24, Z+27	; 0x1b
    144a:	68 2f       	mov	r22, r24
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	fc 01       	movw	r30, r24
    1454:	84 8d       	ldd	r24, Z+28	; 0x1c
    1456:	48 2f       	mov	r20, r24
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	64 9f       	mul	r22, r20
    145c:	c0 01       	movw	r24, r0
    145e:	65 9f       	mul	r22, r21
    1460:	90 0d       	add	r25, r0
    1462:	74 9f       	mul	r23, r20
    1464:	90 0d       	add	r25, r0
    1466:	11 24       	eor	r1, r1
    1468:	28 0f       	add	r18, r24
    146a:	39 1f       	adc	r19, r25
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	9a 81       	ldd	r25, Y+2	; 0x02
    1470:	fc 01       	movw	r30, r24
    1472:	33 83       	std	Z+3, r19	; 0x03
    1474:	22 83       	std	Z+2, r18	; 0x02
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	fc 01       	movw	r30, r24
    147c:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	fc 01       	movw	r30, r24
    1484:	20 81       	ld	r18, Z
    1486:	31 81       	ldd	r19, Z+1	; 0x01
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	fc 01       	movw	r30, r24
    148e:	35 83       	std	Z+5, r19	; 0x05
    1490:	24 83       	std	Z+4, r18	; 0x04
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	fc 01       	movw	r30, r24
    1498:	20 81       	ld	r18, Z
    149a:	31 81       	ldd	r19, Z+1	; 0x01
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	fc 01       	movw	r30, r24
    14a2:	83 8d       	ldd	r24, Z+27	; 0x1b
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	bc 01       	movw	r22, r24
    14aa:	61 50       	subi	r22, 0x01	; 1
    14ac:	71 09       	sbc	r23, r1
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	9a 81       	ldd	r25, Y+2	; 0x02
    14b2:	fc 01       	movw	r30, r24
    14b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    14b6:	48 2f       	mov	r20, r24
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	64 9f       	mul	r22, r20
    14bc:	c0 01       	movw	r24, r0
    14be:	65 9f       	mul	r22, r21
    14c0:	90 0d       	add	r25, r0
    14c2:	74 9f       	mul	r23, r20
    14c4:	90 0d       	add	r25, r0
    14c6:	11 24       	eor	r1, r1
    14c8:	28 0f       	add	r18, r24
    14ca:	39 1f       	adc	r19, r25
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	fc 01       	movw	r30, r24
    14d2:	37 83       	std	Z+7, r19	; 0x07
    14d4:	26 83       	std	Z+6, r18	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	2f ef       	ldi	r18, 0xFF	; 255
    14dc:	fc 01       	movw	r30, r24
    14de:	25 8f       	std	Z+29, r18	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	2f ef       	ldi	r18, 0xFF	; 255
    14e6:	fc 01       	movw	r30, r24
    14e8:	26 8f       	std	Z+30, r18	; 0x1e

		if( xNewQueue == pdFALSE )
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 23       	and	r24, r24
    14ee:	81 f4       	brne	.+32     	; 0x1510 <xQueueGenericReset+0xee>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	fc 01       	movw	r30, r24
    14f6:	80 85       	ldd	r24, Z+8	; 0x08
    14f8:	88 23       	and	r24, r24
    14fa:	a1 f0       	breq	.+40     	; 0x1524 <xQueueGenericReset+0x102>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	08 96       	adiw	r24, 0x08	; 8
    1502:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <xTaskRemoveFromEventList>
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	69 f4       	brne	.+26     	; 0x1524 <xQueueGenericReset+0x102>
				{
					portYIELD_WITHIN_API();
    150a:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
    150e:	0a c0       	rjmp	.+20     	; 0x1524 <xQueueGenericReset+0x102>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	9a 81       	ldd	r25, Y+2	; 0x02
    1514:	08 96       	adiw	r24, 0x08	; 8
    1516:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	41 96       	adiw	r24, 0x11	; 17
    1520:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    1528:	81 e0       	ldi	r24, 0x01	; 1
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	08 95       	ret

00001536 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	29 97       	sbiw	r28, 0x09	; 9
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	8f 83       	std	Y+7, r24	; 0x07
    154c:	68 87       	std	Y+8, r22	; 0x08
    154e:	49 87       	std	Y+9, r20	; 0x09
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    1550:	1a 82       	std	Y+2, r1	; 0x02
    1552:	19 82       	std	Y+1, r1	; 0x01
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1554:	8f 81       	ldd	r24, Y+7	; 0x07
    1556:	88 23       	and	r24, r24
    1558:	09 f4       	brne	.+2      	; 0x155c <xQueueGenericCreate+0x26>
    155a:	43 c0       	rjmp	.+134    	; 0x15e2 <xQueueGenericCreate+0xac>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    155c:	8f e1       	ldi	r24, 0x1F	; 31
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 24 14 	call	0x2848	; 0x2848 <pvPortMalloc>
    1564:	9c 83       	std	Y+4, r25	; 0x04
    1566:	8b 83       	std	Y+3, r24	; 0x03
		if( pxNewQueue != NULL )
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	c9 f1       	breq	.+114    	; 0x15e2 <xQueueGenericCreate+0xac>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    1570:	8f 81       	ldd	r24, Y+7	; 0x07
    1572:	48 2f       	mov	r20, r24
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	88 85       	ldd	r24, Y+8	; 0x08
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	42 9f       	mul	r20, r18
    157e:	c0 01       	movw	r24, r0
    1580:	43 9f       	mul	r20, r19
    1582:	90 0d       	add	r25, r0
    1584:	52 9f       	mul	r21, r18
    1586:	90 0d       	add	r25, r0
    1588:	11 24       	eor	r1, r1
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	0e 94 24 14 	call	0x2848	; 0x2848 <pvPortMalloc>
    1598:	9c 01       	movw	r18, r24
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	fc 01       	movw	r30, r24
    15a0:	31 83       	std	Z+1, r19	; 0x01
    15a2:	20 83       	st	Z, r18
			if( pxNewQueue->pcHead != NULL )
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	fc 01       	movw	r30, r24
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	a1 f0       	breq	.+40     	; 0x15da <xQueueGenericCreate+0xa4>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	2f 81       	ldd	r18, Y+7	; 0x07
    15b8:	fc 01       	movw	r30, r24
    15ba:	23 8f       	std	Z+27, r18	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	28 85       	ldd	r18, Y+8	; 0x08
    15c2:	fc 01       	movw	r30, r24
    15c4:	24 8f       	std	Z+28, r18	; 0x1c
				xQueueGenericReset( pxNewQueue, pdTRUE );
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	0e 94 11 0a 	call	0x1422	; 0x1422 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	9a 83       	std	Y+2, r25	; 0x02
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <xQueueGenericCreate+0xac>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    15e6:	29 96       	adiw	r28, 0x09	; 9
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	08 95       	ret

000015f8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <xQueueCreateMutex+0x6>
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	8b 83       	std	Y+3, r24	; 0x03
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1604:	8f e1       	ldi	r24, 0x1F	; 31
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 24 14 	call	0x2848	; 0x2848 <pvPortMalloc>
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	f1 f1       	breq	.+124    	; 0x1694 <xQueueCreateMutex+0x9c>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	fc 01       	movw	r30, r24
    161e:	13 82       	std	Z+3, r1	; 0x03
    1620:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	fc 01       	movw	r30, r24
    1628:	11 82       	std	Z+1, r1	; 0x01
    162a:	10 82       	st	Z, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	fc 01       	movw	r30, r24
    1632:	15 82       	std	Z+5, r1	; 0x05
    1634:	14 82       	std	Z+4, r1	; 0x04
			pxNewQueue->pcReadFrom = NULL;
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	fc 01       	movw	r30, r24
    163c:	17 82       	std	Z+7, r1	; 0x07
    163e:	16 82       	std	Z+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	fc 01       	movw	r30, r24
    1646:	12 8e       	std	Z+26, r1	; 0x1a
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	fc 01       	movw	r30, r24
    1650:	23 8f       	std	Z+27, r18	; 0x1b
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	fc 01       	movw	r30, r24
    1658:	14 8e       	std	Z+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	2f ef       	ldi	r18, 0xFF	; 255
    1660:	fc 01       	movw	r30, r24
    1662:	25 8f       	std	Z+29, r18	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	2f ef       	ldi	r18, 0xFF	; 255
    166a:	fc 01       	movw	r30, r24
    166c:	26 8f       	std	Z+30, r18	; 0x1e
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	08 96       	adiw	r24, 0x08	; 8
    1674:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	9a 81       	ldd	r25, Y+2	; 0x02
    167c:	41 96       	adiw	r24, 0x11	; 17
    167e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	9a 81       	ldd	r25, Y+2	; 0x02
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret

000016a4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	2b 97       	sbiw	r28, 0x0b	; 11
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	9e 83       	std	Y+6, r25	; 0x06
    16ba:	8d 83       	std	Y+5, r24	; 0x05
    16bc:	78 87       	std	Y+8, r23	; 0x08
    16be:	6f 83       	std	Y+7, r22	; 0x07
    16c0:	5a 87       	std	Y+10, r21	; 0x0a
    16c2:	49 87       	std	Y+9, r20	; 0x09
    16c4:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    16c6:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	9e 81       	ldd	r25, Y+6	; 0x06
    16d2:	fc 01       	movw	r30, r24
    16d4:	22 8d       	ldd	r18, Z+26	; 0x1a
    16d6:	8d 81       	ldd	r24, Y+5	; 0x05
    16d8:	9e 81       	ldd	r25, Y+6	; 0x06
    16da:	fc 01       	movw	r30, r24
    16dc:	83 8d       	ldd	r24, Z+27	; 0x1b
    16de:	28 17       	cp	r18, r24
    16e0:	d8 f4       	brcc	.+54     	; 0x1718 <xQueueGenericSend+0x74>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    16e2:	2f 81       	ldd	r18, Y+7	; 0x07
    16e4:	38 85       	ldd	r19, Y+8	; 0x08
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	4b 85       	ldd	r20, Y+11	; 0x0b
    16ec:	b9 01       	movw	r22, r18
    16ee:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	fc 01       	movw	r30, r24
    16f8:	81 89       	ldd	r24, Z+17	; 0x11
    16fa:	88 23       	and	r24, r24
    16fc:	49 f0       	breq	.+18     	; 0x1710 <xQueueGenericSend+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	9e 81       	ldd	r25, Y+6	; 0x06
    1702:	41 96       	adiw	r24, 0x11	; 17
    1704:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <xTaskRemoveFromEventList>
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	11 f4       	brne	.+4      	; 0x1710 <xQueueGenericSend+0x6c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    170c:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	61 c0       	rjmp	.+194    	; 0x17da <xQueueGenericSend+0x136>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1718:	89 85       	ldd	r24, Y+9	; 0x09
    171a:	9a 85       	ldd	r25, Y+10	; 0x0a
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	21 f4       	brne	.+8      	; 0x1728 <xQueueGenericSend+0x84>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1720:	0f 90       	pop	r0
    1722:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	59 c0       	rjmp	.+178    	; 0x17da <xQueueGenericSend+0x136>
				}
				else if( xEntryTimeSet == pdFALSE )
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	88 23       	and	r24, r24
    172c:	31 f4       	brne	.+12     	; 0x173a <xQueueGenericSend+0x96>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    172e:	ce 01       	movw	r24, r28
    1730:	02 96       	adiw	r24, 0x02	; 2
    1732:	0e 94 d6 06 	call	0xdac	; 0xdac <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    173a:	0f 90       	pop	r0
    173c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    173e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	0f 92       	push	r0
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	fc 01       	movw	r30, r24
    174e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1750:	8f 3f       	cpi	r24, 0xFF	; 255
    1752:	21 f4       	brne	.+8      	; 0x175c <xQueueGenericSend+0xb8>
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	fc 01       	movw	r30, r24
    175a:	15 8e       	std	Z+29, r1	; 0x1d
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	fc 01       	movw	r30, r24
    1762:	86 8d       	ldd	r24, Z+30	; 0x1e
    1764:	8f 3f       	cpi	r24, 0xFF	; 255
    1766:	21 f4       	brne	.+8      	; 0x1770 <xQueueGenericSend+0xcc>
    1768:	8d 81       	ldd	r24, Y+5	; 0x05
    176a:	9e 81       	ldd	r25, Y+6	; 0x06
    176c:	fc 01       	movw	r30, r24
    176e:	16 8e       	std	Z+30, r1	; 0x1e
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1774:	9e 01       	movw	r18, r28
    1776:	27 5f       	subi	r18, 0xF7	; 247
    1778:	3f 4f       	sbci	r19, 0xFF	; 255
    177a:	ce 01       	movw	r24, r28
    177c:	02 96       	adiw	r24, 0x02	; 2
    177e:	b9 01       	movw	r22, r18
    1780:	0e 94 f2 06 	call	0xde4	; 0xde4 <xTaskCheckForTimeOut>
    1784:	88 23       	and	r24, r24
    1786:	01 f5       	brne	.+64     	; 0x17c8 <xQueueGenericSend+0x124>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	9e 81       	ldd	r25, Y+6	; 0x06
    178c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <prvIsQueueFull>
    1790:	88 23       	and	r24, r24
    1792:	99 f0       	breq	.+38     	; 0x17ba <xQueueGenericSend+0x116>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1794:	29 85       	ldd	r18, Y+9	; 0x09
    1796:	3a 85       	ldd	r19, Y+10	; 0x0a
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	08 96       	adiw	r24, 0x08	; 8
    179e:	b9 01       	movw	r22, r18
    17a0:	0e 94 27 06 	call	0xc4e	; 0xc4e <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    17ac:	0e 94 04 04 	call	0x808	; 0x808 <xTaskResumeAll>
    17b0:	88 23       	and	r24, r24
    17b2:	91 f4       	brne	.+36     	; 0x17d8 <xQueueGenericSend+0x134>
				{
					portYIELD_WITHIN_API();
    17b4:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
    17b8:	0f c0       	rjmp	.+30     	; 0x17d8 <xQueueGenericSend+0x134>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
    17bc:	9e 81       	ldd	r25, Y+6	; 0x06
    17be:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    17c2:	0e 94 04 04 	call	0x808	; 0x808 <xTaskResumeAll>
    17c6:	80 cf       	rjmp	.-256    	; 0x16c8 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    17d0:	0e 94 04 04 	call	0x808	; 0x808 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <xQueueGenericSend+0x136>
		}
	}
    17d8:	77 cf       	rjmp	.-274    	; 0x16c8 <xQueueGenericSend+0x24>
}
    17da:	2b 96       	adiw	r28, 0x0b	; 11
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	08 95       	ret

000017ec <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	29 97       	sbiw	r28, 0x09	; 9
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	9c 83       	std	Y+4, r25	; 0x04
    1802:	8b 83       	std	Y+3, r24	; 0x03
    1804:	7e 83       	std	Y+6, r23	; 0x06
    1806:	6d 83       	std	Y+5, r22	; 0x05
    1808:	58 87       	std	Y+8, r21	; 0x08
    180a:	4f 83       	std	Y+7, r20	; 0x07
    180c:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    180e:	1a 82       	std	Y+2, r1	; 0x02
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	fc 01       	movw	r30, r24
    1816:	22 8d       	ldd	r18, Z+26	; 0x1a
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	fc 01       	movw	r30, r24
    181e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1820:	28 17       	cp	r18, r24
    1822:	90 f5       	brcc	.+100    	; 0x1888 <xQueueGenericSendFromISR+0x9c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1824:	2d 81       	ldd	r18, Y+5	; 0x05
    1826:	3e 81       	ldd	r19, Y+6	; 0x06
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	49 85       	ldd	r20, Y+9	; 0x09
    182e:	b9 01       	movw	r22, r18
    1830:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	fc 01       	movw	r30, r24
    183a:	86 8d       	ldd	r24, Z+30	; 0x1e
    183c:	8f 3f       	cpi	r24, 0xFF	; 255
    183e:	b9 f4       	brne	.+46     	; 0x186e <xQueueGenericSendFromISR+0x82>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	fc 01       	movw	r30, r24
    1846:	81 89       	ldd	r24, Z+17	; 0x11
    1848:	88 23       	and	r24, r24
    184a:	d9 f0       	breq	.+54     	; 0x1882 <xQueueGenericSendFromISR+0x96>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	41 96       	adiw	r24, 0x11	; 17
    1852:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <xTaskRemoveFromEventList>
    1856:	88 23       	and	r24, r24
    1858:	a1 f0       	breq	.+40     	; 0x1882 <xQueueGenericSendFromISR+0x96>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
    185a:	8f 81       	ldd	r24, Y+7	; 0x07
    185c:	98 85       	ldd	r25, Y+8	; 0x08
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	81 f0       	breq	.+32     	; 0x1882 <xQueueGenericSendFromISR+0x96>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1862:	8f 81       	ldd	r24, Y+7	; 0x07
    1864:	98 85       	ldd	r25, Y+8	; 0x08
    1866:	21 e0       	ldi	r18, 0x01	; 1
    1868:	fc 01       	movw	r30, r24
    186a:	20 83       	st	Z, r18
    186c:	0a c0       	rjmp	.+20     	; 0x1882 <xQueueGenericSendFromISR+0x96>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	fc 01       	movw	r30, r24
    1874:	86 8d       	ldd	r24, Z+30	; 0x1e
    1876:	21 e0       	ldi	r18, 0x01	; 1
    1878:	28 0f       	add	r18, r24
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	fc 01       	movw	r30, r24
    1880:	26 8f       	std	Z+30, r18	; 0x1e
			}

			xReturn = pdPASS;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	01 c0       	rjmp	.+2      	; 0x188a <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1888:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    188a:	89 81       	ldd	r24, Y+1	; 0x01
}
    188c:	29 96       	adiw	r28, 0x09	; 9
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	08 95       	ret

0000189e <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	2d 97       	sbiw	r28, 0x0d	; 13
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	98 87       	std	Y+8, r25	; 0x08
    18b4:	8f 83       	std	Y+7, r24	; 0x07
    18b6:	7a 87       	std	Y+10, r23	; 0x0a
    18b8:	69 87       	std	Y+9, r22	; 0x09
    18ba:	5c 87       	std	Y+12, r21	; 0x0c
    18bc:	4b 87       	std	Y+11, r20	; 0x0b
    18be:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    18c0:	19 82       	std	Y+1, r1	; 0x01
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    18c8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ca:	98 85       	ldd	r25, Y+8	; 0x08
    18cc:	fc 01       	movw	r30, r24
    18ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    18d0:	88 23       	and	r24, r24
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <xQueueGenericReceive+0x38>
    18d4:	54 c0       	rjmp	.+168    	; 0x197e <xQueueGenericReceive+0xe0>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    18d6:	8f 81       	ldd	r24, Y+7	; 0x07
    18d8:	98 85       	ldd	r25, Y+8	; 0x08
    18da:	fc 01       	movw	r30, r24
    18dc:	86 81       	ldd	r24, Z+6	; 0x06
    18de:	97 81       	ldd	r25, Z+7	; 0x07
    18e0:	9b 83       	std	Y+3, r25	; 0x03
    18e2:	8a 83       	std	Y+2, r24	; 0x02

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    18e4:	29 85       	ldd	r18, Y+9	; 0x09
    18e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    18e8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ea:	98 85       	ldd	r25, Y+8	; 0x08
    18ec:	b9 01       	movw	r22, r18
    18ee:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    18f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f4:	88 23       	and	r24, r24
    18f6:	49 f5       	brne	.+82     	; 0x194a <xQueueGenericReceive+0xac>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    18f8:	8f 81       	ldd	r24, Y+7	; 0x07
    18fa:	98 85       	ldd	r25, Y+8	; 0x08
    18fc:	fc 01       	movw	r30, r24
    18fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1900:	2f ef       	ldi	r18, 0xFF	; 255
    1902:	28 0f       	add	r18, r24
    1904:	8f 81       	ldd	r24, Y+7	; 0x07
    1906:	98 85       	ldd	r25, Y+8	; 0x08
    1908:	fc 01       	movw	r30, r24
    190a:	22 8f       	std	Z+26, r18	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    190c:	8f 81       	ldd	r24, Y+7	; 0x07
    190e:	98 85       	ldd	r25, Y+8	; 0x08
    1910:	fc 01       	movw	r30, r24
    1912:	80 81       	ld	r24, Z
    1914:	91 81       	ldd	r25, Z+1	; 0x01
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	41 f4       	brne	.+16     	; 0x192a <xQueueGenericReceive+0x8c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    191a:	0e 94 08 09 	call	0x1210	; 0x1210 <xTaskGetCurrentTaskHandle>
    191e:	9c 01       	movw	r18, r24
    1920:	8f 81       	ldd	r24, Y+7	; 0x07
    1922:	98 85       	ldd	r25, Y+8	; 0x08
    1924:	fc 01       	movw	r30, r24
    1926:	33 83       	std	Z+3, r19	; 0x03
    1928:	22 83       	std	Z+2, r18	; 0x02
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    192a:	8f 81       	ldd	r24, Y+7	; 0x07
    192c:	98 85       	ldd	r25, Y+8	; 0x08
    192e:	fc 01       	movw	r30, r24
    1930:	80 85       	ldd	r24, Z+8	; 0x08
    1932:	88 23       	and	r24, r24
    1934:	01 f1       	breq	.+64     	; 0x1976 <xQueueGenericReceive+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1936:	8f 81       	ldd	r24, Y+7	; 0x07
    1938:	98 85       	ldd	r25, Y+8	; 0x08
    193a:	08 96       	adiw	r24, 0x08	; 8
    193c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <xTaskRemoveFromEventList>
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	c9 f4       	brne	.+50     	; 0x1976 <xQueueGenericReceive+0xd8>
						{
							portYIELD_WITHIN_API();
    1944:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
    1948:	16 c0       	rjmp	.+44     	; 0x1976 <xQueueGenericReceive+0xd8>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    194a:	8f 81       	ldd	r24, Y+7	; 0x07
    194c:	98 85       	ldd	r25, Y+8	; 0x08
    194e:	2a 81       	ldd	r18, Y+2	; 0x02
    1950:	3b 81       	ldd	r19, Y+3	; 0x03
    1952:	fc 01       	movw	r30, r24
    1954:	37 83       	std	Z+7, r19	; 0x07
    1956:	26 83       	std	Z+6, r18	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1958:	8f 81       	ldd	r24, Y+7	; 0x07
    195a:	98 85       	ldd	r25, Y+8	; 0x08
    195c:	fc 01       	movw	r30, r24
    195e:	81 89       	ldd	r24, Z+17	; 0x11
    1960:	88 23       	and	r24, r24
    1962:	49 f0       	breq	.+18     	; 0x1976 <xQueueGenericReceive+0xd8>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1964:	8f 81       	ldd	r24, Y+7	; 0x07
    1966:	98 85       	ldd	r25, Y+8	; 0x08
    1968:	41 96       	adiw	r24, 0x11	; 17
    196a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <xTaskRemoveFromEventList>
    196e:	88 23       	and	r24, r24
    1970:	11 f0       	breq	.+4      	; 0x1976 <xQueueGenericReceive+0xd8>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1972:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
    1976:	0f 90       	pop	r0
    1978:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	74 c0       	rjmp	.+232    	; 0x1a66 <xQueueGenericReceive+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    197e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1980:	9c 85       	ldd	r25, Y+12	; 0x0c
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	21 f4       	brne	.+8      	; 0x198e <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1986:	0f 90       	pop	r0
    1988:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	6c c0       	rjmp	.+216    	; 0x1a66 <xQueueGenericReceive+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	88 23       	and	r24, r24
    1992:	31 f4       	brne	.+12     	; 0x19a0 <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1994:	ce 01       	movw	r24, r28
    1996:	04 96       	adiw	r24, 0x04	; 4
    1998:	0e 94 d6 06 	call	0xdac	; 0xdac <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    19a0:	0f 90       	pop	r0
    19a2:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    19a4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	0f 92       	push	r0
    19ae:	8f 81       	ldd	r24, Y+7	; 0x07
    19b0:	98 85       	ldd	r25, Y+8	; 0x08
    19b2:	fc 01       	movw	r30, r24
    19b4:	85 8d       	ldd	r24, Z+29	; 0x1d
    19b6:	8f 3f       	cpi	r24, 0xFF	; 255
    19b8:	21 f4       	brne	.+8      	; 0x19c2 <xQueueGenericReceive+0x124>
    19ba:	8f 81       	ldd	r24, Y+7	; 0x07
    19bc:	98 85       	ldd	r25, Y+8	; 0x08
    19be:	fc 01       	movw	r30, r24
    19c0:	15 8e       	std	Z+29, r1	; 0x1d
    19c2:	8f 81       	ldd	r24, Y+7	; 0x07
    19c4:	98 85       	ldd	r25, Y+8	; 0x08
    19c6:	fc 01       	movw	r30, r24
    19c8:	86 8d       	ldd	r24, Z+30	; 0x1e
    19ca:	8f 3f       	cpi	r24, 0xFF	; 255
    19cc:	21 f4       	brne	.+8      	; 0x19d6 <xQueueGenericReceive+0x138>
    19ce:	8f 81       	ldd	r24, Y+7	; 0x07
    19d0:	98 85       	ldd	r25, Y+8	; 0x08
    19d2:	fc 01       	movw	r30, r24
    19d4:	16 8e       	std	Z+30, r1	; 0x1e
    19d6:	0f 90       	pop	r0
    19d8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    19da:	9e 01       	movw	r18, r28
    19dc:	25 5f       	subi	r18, 0xF5	; 245
    19de:	3f 4f       	sbci	r19, 0xFF	; 255
    19e0:	ce 01       	movw	r24, r28
    19e2:	04 96       	adiw	r24, 0x04	; 4
    19e4:	b9 01       	movw	r22, r18
    19e6:	0e 94 f2 06 	call	0xde4	; 0xde4 <xTaskCheckForTimeOut>
    19ea:	88 23       	and	r24, r24
    19ec:	99 f5       	brne	.+102    	; 0x1a54 <xQueueGenericReceive+0x1b6>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    19ee:	8f 81       	ldd	r24, Y+7	; 0x07
    19f0:	98 85       	ldd	r25, Y+8	; 0x08
    19f2:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <prvIsQueueEmpty>
    19f6:	88 23       	and	r24, r24
    19f8:	31 f1       	breq	.+76     	; 0x1a46 <xQueueGenericReceive+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    19fa:	8f 81       	ldd	r24, Y+7	; 0x07
    19fc:	98 85       	ldd	r25, Y+8	; 0x08
    19fe:	fc 01       	movw	r30, r24
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	61 f4       	brne	.+24     	; 0x1a20 <xQueueGenericReceive+0x182>
					{
						portENTER_CRITICAL();
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1a0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a10:	98 85       	ldd	r25, Y+8	; 0x08
    1a12:	fc 01       	movw	r30, r24
    1a14:	82 81       	ldd	r24, Z+2	; 0x02
    1a16:	93 81       	ldd	r25, Z+3	; 0x03
    1a18:	0e 94 1b 09 	call	0x1236	; 0x1236 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    1a1c:	0f 90       	pop	r0
    1a1e:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a20:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a22:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a24:	8f 81       	ldd	r24, Y+7	; 0x07
    1a26:	98 85       	ldd	r25, Y+8	; 0x08
    1a28:	41 96       	adiw	r24, 0x11	; 17
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	0e 94 27 06 	call	0xc4e	; 0xc4e <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1a30:	8f 81       	ldd	r24, Y+7	; 0x07
    1a32:	98 85       	ldd	r25, Y+8	; 0x08
    1a34:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1a38:	0e 94 04 04 	call	0x808	; 0x808 <xTaskResumeAll>
    1a3c:	88 23       	and	r24, r24
    1a3e:	91 f4       	brne	.+36     	; 0x1a64 <xQueueGenericReceive+0x1c6>
				{
					portYIELD_WITHIN_API();
    1a40:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <vPortYield>
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <xQueueGenericReceive+0x1c6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1a46:	8f 81       	ldd	r24, Y+7	; 0x07
    1a48:	98 85       	ldd	r25, Y+8	; 0x08
    1a4a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1a4e:	0e 94 04 04 	call	0x808	; 0x808 <xTaskResumeAll>
    1a52:	37 cf       	rjmp	.-402    	; 0x18c2 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1a54:	8f 81       	ldd	r24, Y+7	; 0x07
    1a56:	98 85       	ldd	r25, Y+8	; 0x08
    1a58:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1a5c:	0e 94 04 04 	call	0x808	; 0x808 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <xQueueGenericReceive+0x1c8>
		}
	}
    1a64:	2e cf       	rjmp	.-420    	; 0x18c2 <xQueueGenericReceive+0x24>
}
    1a66:	2d 96       	adiw	r28, 0x0d	; 13
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	08 95       	ret

00001a78 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	28 97       	sbiw	r28, 0x08	; 8
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	9c 83       	std	Y+4, r25	; 0x04
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	7e 83       	std	Y+6, r23	; 0x06
    1a92:	6d 83       	std	Y+5, r22	; 0x05
    1a94:	58 87       	std	Y+8, r21	; 0x08
    1a96:	4f 83       	std	Y+7, r20	; 0x07
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1a98:	1a 82       	std	Y+2, r1	; 0x02
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1aa2:	88 23       	and	r24, r24
    1aa4:	d9 f1       	breq	.+118    	; 0x1b1c <xQueueReceiveFromISR+0xa4>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1aa6:	2d 81       	ldd	r18, Y+5	; 0x05
    1aa8:	3e 81       	ldd	r19, Y+6	; 0x06
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	b9 01       	movw	r22, r18
    1ab0:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	fc 01       	movw	r30, r24
    1aba:	82 8d       	ldd	r24, Z+26	; 0x1a
    1abc:	2f ef       	ldi	r18, 0xFF	; 255
    1abe:	28 0f       	add	r18, r24
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	22 8f       	std	Z+26, r18	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	fc 01       	movw	r30, r24
    1ace:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad2:	b9 f4       	brne	.+46     	; 0x1b02 <xQueueReceiveFromISR+0x8a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	fc 01       	movw	r30, r24
    1ada:	80 85       	ldd	r24, Z+8	; 0x08
    1adc:	88 23       	and	r24, r24
    1ade:	d9 f0       	breq	.+54     	; 0x1b16 <xQueueReceiveFromISR+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	08 96       	adiw	r24, 0x08	; 8
    1ae6:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <xTaskRemoveFromEventList>
    1aea:	88 23       	and	r24, r24
    1aec:	a1 f0       	breq	.+40     	; 0x1b16 <xQueueReceiveFromISR+0x9e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1aee:	8f 81       	ldd	r24, Y+7	; 0x07
    1af0:	98 85       	ldd	r25, Y+8	; 0x08
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	81 f0       	breq	.+32     	; 0x1b16 <xQueueReceiveFromISR+0x9e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1af6:	8f 81       	ldd	r24, Y+7	; 0x07
    1af8:	98 85       	ldd	r25, Y+8	; 0x08
    1afa:	21 e0       	ldi	r18, 0x01	; 1
    1afc:	fc 01       	movw	r30, r24
    1afe:	20 83       	st	Z, r18
    1b00:	0a c0       	rjmp	.+20     	; 0x1b16 <xQueueReceiveFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	fc 01       	movw	r30, r24
    1b08:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b0a:	21 e0       	ldi	r18, 0x01	; 1
    1b0c:	28 0f       	add	r18, r24
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	fc 01       	movw	r30, r24
    1b14:	25 8f       	std	Z+29, r18	; 0x1d
			}

			xReturn = pdPASS;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <xQueueReceiveFromISR+0xa6>
		}
		else
		{
			xReturn = pdFAIL;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b20:	28 96       	adiw	r28, 0x08	; 8
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	08 95       	ret

00001b32 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <uxQueueMessagesWaiting+0x6>
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	9b 83       	std	Y+3, r25	; 0x03
    1b3e:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1b50:	0f 90       	pop	r0
    1b52:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	08 95       	ret

00001b62 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <uxQueueMessagesWaitingFromISR+0x6>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	9b 83       	std	Y+3, r25	; 0x03
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	9b 81       	ldd	r25, Y+3	; 0x03
    1b74:	fc 01       	movw	r30, r24
    1b76:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b78:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	1f 92       	push	r1
    1b8e:	1f 92       	push	r1
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <vPortFree>
	vPortFree( pxQueue );
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <vPortFree>
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	08 95       	ret

00001bb8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <prvCopyDataToQueue+0x6>
    1bbe:	1f 92       	push	r1
    1bc0:	1f 92       	push	r1
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	7c 83       	std	Y+4, r23	; 0x04
    1bcc:	6b 83       	std	Y+3, r22	; 0x03
    1bce:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bd8:	88 23       	and	r24, r24
    1bda:	a9 f4       	brne	.+42     	; 0x1c06 <prvCopyDataToQueue+0x4e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	fc 01       	movw	r30, r24
    1be2:	80 81       	ld	r24, Z
    1be4:	91 81       	ldd	r25, Z+1	; 0x01
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	09 f0       	breq	.+2      	; 0x1bec <prvCopyDataToQueue+0x34>
    1bea:	92 c0       	rjmp	.+292    	; 0x1d10 <prvCopyDataToQueue+0x158>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	0e 94 ab 09 	call	0x1356	; 0x1356 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	fc 01       	movw	r30, r24
    1c00:	13 82       	std	Z+3, r1	; 0x03
    1c02:	12 82       	std	Z+2, r1	; 0x02
    1c04:	85 c0       	rjmp	.+266    	; 0x1d10 <prvCopyDataToQueue+0x158>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	88 23       	and	r24, r24
    1c0a:	d9 f5       	brne	.+118    	; 0x1c82 <prvCopyDataToQueue+0xca>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	fc 01       	movw	r30, r24
    1c12:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c14:	48 2f       	mov	r20, r24
    1c16:	50 e0       	ldi	r21, 0x00	; 0
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	84 81       	ldd	r24, Z+4	; 0x04
    1c20:	95 81       	ldd	r25, Z+5	; 0x05
    1c22:	2b 81       	ldd	r18, Y+3	; 0x03
    1c24:	3c 81       	ldd	r19, Y+4	; 0x04
    1c26:	b9 01       	movw	r22, r18
    1c28:	0e 94 84 28 	call	0x5108	; 0x5108 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	fc 01       	movw	r30, r24
    1c32:	24 81       	ldd	r18, Z+4	; 0x04
    1c34:	35 81       	ldd	r19, Z+5	; 0x05
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	28 0f       	add	r18, r24
    1c44:	39 1f       	adc	r19, r25
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	35 83       	std	Z+5, r19	; 0x05
    1c4e:	24 83       	std	Z+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	9a 81       	ldd	r25, Y+2	; 0x02
    1c54:	fc 01       	movw	r30, r24
    1c56:	24 81       	ldd	r18, Z+4	; 0x04
    1c58:	35 81       	ldd	r19, Z+5	; 0x05
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	fc 01       	movw	r30, r24
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	28 17       	cp	r18, r24
    1c66:	39 07       	cpc	r19, r25
    1c68:	08 f4       	brcc	.+2      	; 0x1c6c <prvCopyDataToQueue+0xb4>
    1c6a:	52 c0       	rjmp	.+164    	; 0x1d10 <prvCopyDataToQueue+0x158>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c70:	fc 01       	movw	r30, r24
    1c72:	20 81       	ld	r18, Z
    1c74:	31 81       	ldd	r19, Z+1	; 0x01
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	35 83       	std	Z+5, r19	; 0x05
    1c7e:	24 83       	std	Z+4, r18	; 0x04
    1c80:	47 c0       	rjmp	.+142    	; 0x1d10 <prvCopyDataToQueue+0x158>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	fc 01       	movw	r30, r24
    1c88:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	fc 01       	movw	r30, r24
    1c94:	86 81       	ldd	r24, Z+6	; 0x06
    1c96:	97 81       	ldd	r25, Z+7	; 0x07
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	b9 01       	movw	r22, r18
    1c9e:	0e 94 84 28 	call	0x5108	; 0x5108 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	26 81       	ldd	r18, Z+6	; 0x06
    1caa:	37 81       	ldd	r19, Z+7	; 0x07
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cb4:	88 2f       	mov	r24, r24
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	91 95       	neg	r25
    1cba:	81 95       	neg	r24
    1cbc:	91 09       	sbc	r25, r1
    1cbe:	28 0f       	add	r18, r24
    1cc0:	39 1f       	adc	r19, r25
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	37 83       	std	Z+7, r19	; 0x07
    1cca:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	26 81       	ldd	r18, Z+6	; 0x06
    1cd4:	37 81       	ldd	r19, Z+7	; 0x07
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	fc 01       	movw	r30, r24
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	28 17       	cp	r18, r24
    1ce2:	39 07       	cpc	r19, r25
    1ce4:	a8 f4       	brcc	.+42     	; 0x1d10 <prvCopyDataToQueue+0x158>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	fc 01       	movw	r30, r24
    1cec:	22 81       	ldd	r18, Z+2	; 0x02
    1cee:	33 81       	ldd	r19, Z+3	; 0x03
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	91 95       	neg	r25
    1cfe:	81 95       	neg	r24
    1d00:	91 09       	sbc	r25, r1
    1d02:	28 0f       	add	r18, r24
    1d04:	39 1f       	adc	r19, r25
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	37 83       	std	Z+7, r19	; 0x07
    1d0e:	26 83       	std	Z+6, r18	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	fc 01       	movw	r30, r24
    1d16:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	28 0f       	add	r18, r24
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d20:	fc 01       	movw	r30, r24
    1d22:	22 8f       	std	Z+26, r18	; 0x1a
}
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	08 95       	ret

00001d34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <prvCopyDataFromQueue+0x6>
    1d3a:	1f 92       	push	r1
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	9a 83       	std	Y+2, r25	; 0x02
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	7c 83       	std	Y+4, r23	; 0x04
    1d46:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	c9 f1       	breq	.+114    	; 0x1dc8 <prvCopyDataFromQueue+0x94>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	26 81       	ldd	r18, Z+6	; 0x06
    1d5e:	37 81       	ldd	r19, Z+7	; 0x07
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	9a 81       	ldd	r25, Y+2	; 0x02
    1d64:	fc 01       	movw	r30, r24
    1d66:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	28 0f       	add	r18, r24
    1d6e:	39 1f       	adc	r19, r25
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	9a 81       	ldd	r25, Y+2	; 0x02
    1d74:	fc 01       	movw	r30, r24
    1d76:	37 83       	std	Z+7, r19	; 0x07
    1d78:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	fc 01       	movw	r30, r24
    1d80:	26 81       	ldd	r18, Z+6	; 0x06
    1d82:	37 81       	ldd	r19, Z+7	; 0x07
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	fc 01       	movw	r30, r24
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	28 17       	cp	r18, r24
    1d90:	39 07       	cpc	r19, r25
    1d92:	50 f0       	brcs	.+20     	; 0x1da8 <prvCopyDataFromQueue+0x74>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	fc 01       	movw	r30, r24
    1d9a:	20 81       	ld	r18, Z
    1d9c:	31 81       	ldd	r19, Z+1	; 0x01
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	fc 01       	movw	r30, r24
    1da4:	37 83       	std	Z+7, r19	; 0x07
    1da6:	26 83       	std	Z+6, r18	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dac:	fc 01       	movw	r30, r24
    1dae:	84 8d       	ldd	r24, Z+28	; 0x1c
    1db0:	48 2f       	mov	r20, r24
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	fc 01       	movw	r30, r24
    1dba:	26 81       	ldd	r18, Z+6	; 0x06
    1dbc:	37 81       	ldd	r19, Z+7	; 0x07
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	b9 01       	movw	r22, r18
    1dc4:	0e 94 84 28 	call	0x5108	; 0x5108 <memcpy>
	}
}
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	08 95       	ret

00001dd6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	1f 92       	push	r1
    1ddc:	1f 92       	push	r1
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1dec:	1b c0       	rjmp	.+54     	; 0x1e24 <prvUnlockQueue+0x4e>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	fc 01       	movw	r30, r24
    1df4:	81 89       	ldd	r24, Z+17	; 0x11
    1df6:	88 23       	and	r24, r24
    1df8:	a1 f0       	breq	.+40     	; 0x1e22 <prvUnlockQueue+0x4c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfe:	41 96       	adiw	r24, 0x11	; 17
    1e00:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <xTaskRemoveFromEventList>
    1e04:	88 23       	and	r24, r24
    1e06:	11 f0       	breq	.+4      	; 0x1e0c <prvUnlockQueue+0x36>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    1e08:	0e 94 61 07 	call	0xec2	; 0xec2 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	fc 01       	movw	r30, r24
    1e12:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e14:	2f ef       	ldi	r18, 0xFF	; 255
    1e16:	28 0f       	add	r18, r24
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	26 8f       	std	Z+30, r18	; 0x1e
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <prvUnlockQueue+0x4e>
			}
			else
			{
				break;
    1e22:	06 c0       	rjmp	.+12     	; 0x1e30 <prvUnlockQueue+0x5a>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	9a 81       	ldd	r25, Y+2	; 0x02
    1e28:	fc 01       	movw	r30, r24
    1e2a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e2c:	18 16       	cp	r1, r24
    1e2e:	fc f2       	brlt	.-66     	; 0x1dee <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	2f ef       	ldi	r18, 0xFF	; 255
    1e36:	fc 01       	movw	r30, r24
    1e38:	26 8f       	std	Z+30, r18	; 0x1e
	}
	taskEXIT_CRITICAL();
    1e3a:	0f 90       	pop	r0
    1e3c:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1e44:	1b c0       	rjmp	.+54     	; 0x1e7c <prvUnlockQueue+0xa6>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	80 85       	ldd	r24, Z+8	; 0x08
    1e4e:	88 23       	and	r24, r24
    1e50:	a1 f0       	breq	.+40     	; 0x1e7a <prvUnlockQueue+0xa4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	9a 81       	ldd	r25, Y+2	; 0x02
    1e56:	08 96       	adiw	r24, 0x08	; 8
    1e58:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <xTaskRemoveFromEventList>
    1e5c:	88 23       	and	r24, r24
    1e5e:	11 f0       	breq	.+4      	; 0x1e64 <prvUnlockQueue+0x8e>
				{
					vTaskMissedYield();
    1e60:	0e 94 61 07 	call	0xec2	; 0xec2 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	fc 01       	movw	r30, r24
    1e6a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e6c:	2f ef       	ldi	r18, 0xFF	; 255
    1e6e:	28 0f       	add	r18, r24
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
    1e74:	fc 01       	movw	r30, r24
    1e76:	25 8f       	std	Z+29, r18	; 0x1d
    1e78:	01 c0       	rjmp	.+2      	; 0x1e7c <prvUnlockQueue+0xa6>
			}
			else
			{
				break;
    1e7a:	06 c0       	rjmp	.+12     	; 0x1e88 <prvUnlockQueue+0xb2>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	fc 01       	movw	r30, r24
    1e82:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e84:	18 16       	cp	r1, r24
    1e86:	fc f2       	brlt	.-66     	; 0x1e46 <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	2f ef       	ldi	r18, 0xFF	; 255
    1e8e:	fc 01       	movw	r30, r24
    1e90:	25 8f       	std	Z+29, r18	; 0x1d
	}
	taskEXIT_CRITICAL();
    1e92:	0f 90       	pop	r0
    1e94:	0f be       	out	0x3f, r0	; 63
}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	08 95       	ret

00001ea0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <prvIsQueueEmpty+0x6>
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	9b 83       	std	Y+3, r25	; 0x03
    1eac:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb8:	fc 01       	movw	r30, r24
    1eba:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	99 23       	and	r25, r25
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <prvIsQueueEmpty+0x24>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1ec6:	0f 90       	pop	r0
    1ec8:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	08 95       	ret

00001ed8 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <xQueueIsQueueEmptyFromISR+0x6>
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	9b 83       	std	Y+3, r25	; 0x03
    1ee4:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eea:	fc 01       	movw	r30, r24
    1eec:	92 8d       	ldd	r25, Z+26	; 0x1a
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	99 23       	and	r25, r25
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <xQueueIsQueueEmptyFromISR+0x1e>
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	08 95       	ret

00001f06 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <prvIsQueueFull+0x6>
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	9b 83       	std	Y+3, r25	; 0x03
    1f12:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1e:	fc 01       	movw	r30, r24
    1f20:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	9b 81       	ldd	r25, Y+3	; 0x03
    1f26:	fc 01       	movw	r30, r24
    1f28:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	29 17       	cp	r18, r25
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <prvIsQueueFull+0x2c>
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1f34:	0f 90       	pop	r0
    1f36:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	08 95       	ret

00001f46 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <xQueueIsQueueFullFromISR+0x6>
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	9b 83       	std	Y+3, r25	; 0x03
    1f52:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	9b 81       	ldd	r25, Y+3	; 0x03
    1f58:	fc 01       	movw	r30, r24
    1f5a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f60:	fc 01       	movw	r30, r24
    1f62:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	29 17       	cp	r18, r25
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <xQueueIsQueueFullFromISR+0x26>
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret

00001f7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	1f 92       	push	r1
    1f82:	1f 92       	push	r1
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	9c 01       	movw	r18, r24
    1f92:	2d 5f       	subi	r18, 0xFD	; 253
    1f94:	3f 4f       	sbci	r19, 0xFF	; 255
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	32 83       	std	Z+2, r19	; 0x02
    1f9e:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	2f ef       	ldi	r18, 0xFF	; 255
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	fc 01       	movw	r30, r24
    1faa:	34 83       	std	Z+4, r19	; 0x04
    1fac:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb2:	9c 01       	movw	r18, r24
    1fb4:	2d 5f       	subi	r18, 0xFD	; 253
    1fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	36 83       	std	Z+6, r19	; 0x06
    1fc0:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	9c 01       	movw	r18, r24
    1fc8:	2d 5f       	subi	r18, 0xFD	; 253
    1fca:	3f 4f       	sbci	r19, 0xFF	; 255
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	30 87       	std	Z+8, r19	; 0x08
    1fd4:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	fc 01       	movw	r30, r24
    1fdc:	10 82       	st	Z, r1
}
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	08 95       	ret

00001fe8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	1f 92       	push	r1
    1fee:	1f 92       	push	r1
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	9a 83       	std	Y+2, r25	; 0x02
    1ff6:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	11 86       	std	Z+9, r1	; 0x09
    2000:	10 86       	std	Z+8, r1	; 0x08
}
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	08 95       	ret

0000200c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	00 d0       	rcall	.+0      	; 0x2012 <vListInsertEnd+0x6>
    2012:	00 d0       	rcall	.+0      	; 0x2014 <vListInsertEnd+0x8>
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	9c 83       	std	Y+4, r25	; 0x04
    201a:	8b 83       	std	Y+3, r24	; 0x03
    201c:	7e 83       	std	Y+6, r23	; 0x06
    201e:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	fc 01       	movw	r30, r24
    2026:	81 81       	ldd	r24, Z+1	; 0x01
    2028:	92 81       	ldd	r25, Z+2	; 0x02
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	9a 81       	ldd	r25, Y+2	; 0x02
    2032:	fc 01       	movw	r30, r24
    2034:	22 81       	ldd	r18, Z+2	; 0x02
    2036:	33 81       	ldd	r19, Z+3	; 0x03
    2038:	8d 81       	ldd	r24, Y+5	; 0x05
    203a:	9e 81       	ldd	r25, Y+6	; 0x06
    203c:	fc 01       	movw	r30, r24
    203e:	33 83       	std	Z+3, r19	; 0x03
    2040:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	fc 01       	movw	r30, r24
    2048:	21 81       	ldd	r18, Z+1	; 0x01
    204a:	32 81       	ldd	r19, Z+2	; 0x02
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	fc 01       	movw	r30, r24
    2052:	35 83       	std	Z+5, r19	; 0x05
    2054:	24 83       	std	Z+4, r18	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	9a 81       	ldd	r25, Y+2	; 0x02
    205a:	fc 01       	movw	r30, r24
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	93 81       	ldd	r25, Z+3	; 0x03
    2060:	2d 81       	ldd	r18, Y+5	; 0x05
    2062:	3e 81       	ldd	r19, Y+6	; 0x06
    2064:	fc 01       	movw	r30, r24
    2066:	35 83       	std	Z+5, r19	; 0x05
    2068:	24 83       	std	Z+4, r18	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	9a 81       	ldd	r25, Y+2	; 0x02
    206e:	2d 81       	ldd	r18, Y+5	; 0x05
    2070:	3e 81       	ldd	r19, Y+6	; 0x06
    2072:	fc 01       	movw	r30, r24
    2074:	33 83       	std	Z+3, r19	; 0x03
    2076:	22 83       	std	Z+2, r18	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	2d 81       	ldd	r18, Y+5	; 0x05
    207e:	3e 81       	ldd	r19, Y+6	; 0x06
    2080:	fc 01       	movw	r30, r24
    2082:	32 83       	std	Z+2, r19	; 0x02
    2084:	21 83       	std	Z+1, r18	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	2b 81       	ldd	r18, Y+3	; 0x03
    208c:	3c 81       	ldd	r19, Y+4	; 0x04
    208e:	fc 01       	movw	r30, r24
    2090:	31 87       	std	Z+9, r19	; 0x09
    2092:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	9c 81       	ldd	r25, Y+4	; 0x04
    2098:	fc 01       	movw	r30, r24
    209a:	80 81       	ld	r24, Z
    209c:	21 e0       	ldi	r18, 0x01	; 1
    209e:	28 0f       	add	r18, r24
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	fc 01       	movw	r30, r24
    20a6:	20 83       	st	Z, r18
}
    20a8:	26 96       	adiw	r28, 0x06	; 6
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	28 97       	sbiw	r28, 0x08	; 8
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	78 87       	std	Y+8, r23	; 0x08
    20d4:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    20d6:	8f 81       	ldd	r24, Y+7	; 0x07
    20d8:	98 85       	ldd	r25, Y+8	; 0x08
    20da:	fc 01       	movw	r30, r24
    20dc:	80 81       	ld	r24, Z
    20de:	91 81       	ldd	r25, Z+1	; 0x01
    20e0:	9c 83       	std	Y+4, r25	; 0x04
    20e2:	8b 83       	std	Y+3, r24	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	8f 3f       	cpi	r24, 0xFF	; 255
    20ea:	ff ef       	ldi	r31, 0xFF	; 255
    20ec:	9f 07       	cpc	r25, r31
    20ee:	41 f4       	brne	.+16     	; 0x2100 <vListInsert+0x46>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	9e 81       	ldd	r25, Y+6	; 0x06
    20f4:	fc 01       	movw	r30, r24
    20f6:	87 81       	ldd	r24, Z+7	; 0x07
    20f8:	90 85       	ldd	r25, Z+8	; 0x08
    20fa:	9a 83       	std	Y+2, r25	; 0x02
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	1a c0       	rjmp	.+52     	; 0x2134 <vListInsert+0x7a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	03 96       	adiw	r24, 0x03	; 3
    2106:	9a 83       	std	Y+2, r25	; 0x02
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	07 c0       	rjmp	.+14     	; 0x211a <vListInsert+0x60>
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	fc 01       	movw	r30, r24
    2112:	82 81       	ldd	r24, Z+2	; 0x02
    2114:	93 81       	ldd	r25, Z+3	; 0x03
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	fc 01       	movw	r30, r24
    2120:	82 81       	ldd	r24, Z+2	; 0x02
    2122:	93 81       	ldd	r25, Z+3	; 0x03
    2124:	fc 01       	movw	r30, r24
    2126:	20 81       	ld	r18, Z
    2128:	31 81       	ldd	r19, Z+1	; 0x01
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	82 17       	cp	r24, r18
    2130:	93 07       	cpc	r25, r19
    2132:	60 f7       	brcc	.-40     	; 0x210c <vListInsert+0x52>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	9a 81       	ldd	r25, Y+2	; 0x02
    2138:	fc 01       	movw	r30, r24
    213a:	22 81       	ldd	r18, Z+2	; 0x02
    213c:	33 81       	ldd	r19, Z+3	; 0x03
    213e:	8f 81       	ldd	r24, Y+7	; 0x07
    2140:	98 85       	ldd	r25, Y+8	; 0x08
    2142:	fc 01       	movw	r30, r24
    2144:	33 83       	std	Z+3, r19	; 0x03
    2146:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2148:	8f 81       	ldd	r24, Y+7	; 0x07
    214a:	98 85       	ldd	r25, Y+8	; 0x08
    214c:	fc 01       	movw	r30, r24
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	2f 81       	ldd	r18, Y+7	; 0x07
    2154:	38 85       	ldd	r19, Y+8	; 0x08
    2156:	fc 01       	movw	r30, r24
    2158:	35 83       	std	Z+5, r19	; 0x05
    215a:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    215c:	8f 81       	ldd	r24, Y+7	; 0x07
    215e:	98 85       	ldd	r25, Y+8	; 0x08
    2160:	29 81       	ldd	r18, Y+1	; 0x01
    2162:	3a 81       	ldd	r19, Y+2	; 0x02
    2164:	fc 01       	movw	r30, r24
    2166:	35 83       	std	Z+5, r19	; 0x05
    2168:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	2f 81       	ldd	r18, Y+7	; 0x07
    2170:	38 85       	ldd	r19, Y+8	; 0x08
    2172:	fc 01       	movw	r30, r24
    2174:	33 83       	std	Z+3, r19	; 0x03
    2176:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2178:	8f 81       	ldd	r24, Y+7	; 0x07
    217a:	98 85       	ldd	r25, Y+8	; 0x08
    217c:	2d 81       	ldd	r18, Y+5	; 0x05
    217e:	3e 81       	ldd	r19, Y+6	; 0x06
    2180:	fc 01       	movw	r30, r24
    2182:	31 87       	std	Z+9, r19	; 0x09
    2184:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	fc 01       	movw	r30, r24
    218c:	80 81       	ld	r24, Z
    218e:	21 e0       	ldi	r18, 0x01	; 1
    2190:	28 0f       	add	r18, r24
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	fc 01       	movw	r30, r24
    2198:	20 83       	st	Z, r18
}
    219a:	28 96       	adiw	r28, 0x08	; 8
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	08 95       	ret

000021ac <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <uxListRemove+0x6>
    21b2:	1f 92       	push	r1
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	9c 83       	std	Y+4, r25	; 0x04
    21ba:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	fc 01       	movw	r30, r24
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	2b 81       	ldd	r18, Y+3	; 0x03
    21c8:	3c 81       	ldd	r19, Y+4	; 0x04
    21ca:	f9 01       	movw	r30, r18
    21cc:	24 81       	ldd	r18, Z+4	; 0x04
    21ce:	35 81       	ldd	r19, Z+5	; 0x05
    21d0:	fc 01       	movw	r30, r24
    21d2:	35 83       	std	Z+5, r19	; 0x05
    21d4:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	fc 01       	movw	r30, r24
    21dc:	84 81       	ldd	r24, Z+4	; 0x04
    21de:	95 81       	ldd	r25, Z+5	; 0x05
    21e0:	2b 81       	ldd	r18, Y+3	; 0x03
    21e2:	3c 81       	ldd	r19, Y+4	; 0x04
    21e4:	f9 01       	movw	r30, r18
    21e6:	22 81       	ldd	r18, Z+2	; 0x02
    21e8:	33 81       	ldd	r19, Z+3	; 0x03
    21ea:	fc 01       	movw	r30, r24
    21ec:	33 83       	std	Z+3, r19	; 0x03
    21ee:	22 83       	std	Z+2, r18	; 0x02

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	9c 81       	ldd	r25, Y+4	; 0x04
    21f4:	fc 01       	movw	r30, r24
    21f6:	80 85       	ldd	r24, Z+8	; 0x08
    21f8:	91 85       	ldd	r25, Z+9	; 0x09
    21fa:	9a 83       	std	Y+2, r25	; 0x02
    21fc:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	9a 81       	ldd	r25, Y+2	; 0x02
    2202:	fc 01       	movw	r30, r24
    2204:	21 81       	ldd	r18, Z+1	; 0x01
    2206:	32 81       	ldd	r19, Z+2	; 0x02
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	28 17       	cp	r18, r24
    220e:	39 07       	cpc	r19, r25
    2210:	51 f4       	brne	.+20     	; 0x2226 <__stack+0x27>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	9c 81       	ldd	r25, Y+4	; 0x04
    2216:	fc 01       	movw	r30, r24
    2218:	24 81       	ldd	r18, Z+4	; 0x04
    221a:	35 81       	ldd	r19, Z+5	; 0x05
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	fc 01       	movw	r30, r24
    2222:	32 83       	std	Z+2, r19	; 0x02
    2224:	21 83       	std	Z+1, r18	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	fc 01       	movw	r30, r24
    222c:	11 86       	std	Z+9, r1	; 0x09
    222e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	9a 81       	ldd	r25, Y+2	; 0x02
    2234:	fc 01       	movw	r30, r24
    2236:	80 81       	ld	r24, Z
    2238:	2f ef       	ldi	r18, 0xFF	; 255
    223a:	28 0f       	add	r18, r24
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	9a 81       	ldd	r25, Y+2	; 0x02
    2240:	fc 01       	movw	r30, r24
    2242:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	fc 01       	movw	r30, r24
    224a:	80 81       	ld	r24, Z
}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	08 95       	ret

0000225a <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	27 97       	sbiw	r28, 0x07	; 7
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	9d 83       	std	Y+5, r25	; 0x05
    2270:	8c 83       	std	Y+4, r24	; 0x04
    2272:	6e 83       	std	Y+6, r22	; 0x06
    2274:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    2276:	8a e1       	ldi	r24, 0x1A	; 26
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0e 94 24 14 	call	0x2848	; 0x2848 <pvPortMalloc>
    227e:	9b 83       	std	Y+3, r25	; 0x03
    2280:	8a 83       	std	Y+2, r24	; 0x02
	if( pxCoRoutine )
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	9b 81       	ldd	r25, Y+3	; 0x03
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	09 f4       	brne	.+2      	; 0x228c <xCoRoutineCreate+0x32>
    228a:	77 c0       	rjmp	.+238    	; 0x237a <xCoRoutineCreate+0x120>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    228c:	80 91 81 02 	lds	r24, 0x0281
    2290:	90 91 82 02 	lds	r25, 0x0282
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	41 f4       	brne	.+16     	; 0x22a8 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	9b 81       	ldd	r25, Y+3	; 0x03
    229c:	90 93 82 02 	sts	0x0282, r25
    22a0:	80 93 81 02 	sts	0x0281, r24
			prvInitialiseCoRoutineLists();
    22a4:	0e 94 b2 13 	call	0x2764	; 0x2764 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    22a8:	8e 81       	ldd	r24, Y+6	; 0x06
    22aa:	82 30       	cpi	r24, 0x02	; 2
    22ac:	10 f0       	brcs	.+4      	; 0x22b2 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	9b 81       	ldd	r25, Y+3	; 0x03
    22b6:	fc 01       	movw	r30, r24
    22b8:	11 8e       	std	Z+25, r1	; 0x19
    22ba:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	9b 81       	ldd	r25, Y+3	; 0x03
    22c0:	2e 81       	ldd	r18, Y+6	; 0x06
    22c2:	fc 01       	movw	r30, r24
    22c4:	26 8b       	std	Z+22, r18	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ca:	2f 81       	ldd	r18, Y+7	; 0x07
    22cc:	fc 01       	movw	r30, r24
    22ce:	27 8b       	std	Z+23, r18	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	9b 81       	ldd	r25, Y+3	; 0x03
    22d4:	2c 81       	ldd	r18, Y+4	; 0x04
    22d6:	3d 81       	ldd	r19, Y+5	; 0x05
    22d8:	fc 01       	movw	r30, r24
    22da:	31 83       	std	Z+1, r19	; 0x01
    22dc:	20 83       	st	Z, r18

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	9b 81       	ldd	r25, Y+3	; 0x03
    22e2:	02 96       	adiw	r24, 0x02	; 2
    22e4:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	9b 81       	ldd	r25, Y+3	; 0x03
    22ec:	0c 96       	adiw	r24, 0x0c	; 12
    22ee:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	9b 81       	ldd	r25, Y+3	; 0x03
    22f6:	2a 81       	ldd	r18, Y+2	; 0x02
    22f8:	3b 81       	ldd	r19, Y+3	; 0x03
    22fa:	fc 01       	movw	r30, r24
    22fc:	31 87       	std	Z+9, r19	; 0x09
    22fe:	20 87       	std	Z+8, r18	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	9b 81       	ldd	r25, Y+3	; 0x03
    2304:	2a 81       	ldd	r18, Y+2	; 0x02
    2306:	3b 81       	ldd	r19, Y+3	; 0x03
    2308:	fc 01       	movw	r30, r24
    230a:	33 8b       	std	Z+19, r19	; 0x13
    230c:	22 8b       	std	Z+18, r18	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    230e:	8e 81       	ldd	r24, Y+6	; 0x06
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	24 e0       	ldi	r18, 0x04	; 4
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	28 1b       	sub	r18, r24
    231a:	39 0b       	sbc	r19, r25
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	fc 01       	movw	r30, r24
    2322:	35 87       	std	Z+13, r19	; 0x0d
    2324:	24 87       	std	Z+12, r18	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	9b 81       	ldd	r25, Y+3	; 0x03
    232a:	fc 01       	movw	r30, r24
    232c:	96 89       	ldd	r25, Z+22	; 0x16
    232e:	80 91 b4 02 	lds	r24, 0x02B4
    2332:	89 17       	cp	r24, r25
    2334:	30 f4       	brcc	.+12     	; 0x2342 <xCoRoutineCreate+0xe8>
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	9b 81       	ldd	r25, Y+3	; 0x03
    233a:	fc 01       	movw	r30, r24
    233c:	86 89       	ldd	r24, Z+22	; 0x16
    233e:	80 93 b4 02 	sts	0x02B4, r24
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	9b 81       	ldd	r25, Y+3	; 0x03
    2346:	ac 01       	movw	r20, r24
    2348:	4e 5f       	subi	r20, 0xFE	; 254
    234a:	5f 4f       	sbci	r21, 0xFF	; 255
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	9b 81       	ldd	r25, Y+3	; 0x03
    2350:	fc 01       	movw	r30, r24
    2352:	86 89       	ldd	r24, Z+22	; 0x16
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	c9 01       	movw	r24, r18
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	82 0f       	add	r24, r18
    2368:	93 1f       	adc	r25, r19
    236a:	8d 57       	subi	r24, 0x7D	; 125
    236c:	9d 4f       	sbci	r25, 0xFD	; 253
    236e:	ba 01       	movw	r22, r20
    2370:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>

		xReturn = pdPASS;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	02 c0       	rjmp	.+4      	; 0x237e <xCoRoutineCreate+0x124>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    237a:	8f ef       	ldi	r24, 0xFF	; 255
    237c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return xReturn;	
    237e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2380:	27 96       	adiw	r28, 0x07	; 7
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	08 95       	ret

00002392 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	00 d0       	rcall	.+0      	; 0x2398 <vCoRoutineAddToDelayedList+0x6>
    2398:	00 d0       	rcall	.+0      	; 0x239a <vCoRoutineAddToDelayedList+0x8>
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	9c 83       	std	Y+4, r25	; 0x04
    23a0:	8b 83       	std	Y+3, r24	; 0x03
    23a2:	7e 83       	std	Y+6, r23	; 0x06
    23a4:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    23a6:	20 91 b5 02 	lds	r18, 0x02B5
    23aa:	30 91 b6 02 	lds	r19, 0x02B6
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	82 0f       	add	r24, r18
    23b4:	93 1f       	adc	r25, r19
    23b6:	9a 83       	std	Y+2, r25	; 0x02
    23b8:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	uxListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    23ba:	80 91 81 02 	lds	r24, 0x0281
    23be:	90 91 82 02 	lds	r25, 0x0282
    23c2:	02 96       	adiw	r24, 0x02	; 2
    23c4:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    23c8:	80 91 81 02 	lds	r24, 0x0281
    23cc:	90 91 82 02 	lds	r25, 0x0282
    23d0:	29 81       	ldd	r18, Y+1	; 0x01
    23d2:	3a 81       	ldd	r19, Y+2	; 0x02
    23d4:	fc 01       	movw	r30, r24
    23d6:	33 83       	std	Z+3, r19	; 0x03
    23d8:	22 83       	std	Z+2, r18	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    23da:	80 91 b5 02 	lds	r24, 0x02B5
    23de:	90 91 b6 02 	lds	r25, 0x02B6
    23e2:	29 81       	ldd	r18, Y+1	; 0x01
    23e4:	3a 81       	ldd	r19, Y+2	; 0x02
    23e6:	28 17       	cp	r18, r24
    23e8:	39 07       	cpc	r19, r25
    23ea:	78 f4       	brcc	.+30     	; 0x240a <vCoRoutineAddToDelayedList+0x78>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    23ec:	80 91 81 02 	lds	r24, 0x0281
    23f0:	90 91 82 02 	lds	r25, 0x0282
    23f4:	9c 01       	movw	r18, r24
    23f6:	2e 5f       	subi	r18, 0xFE	; 254
    23f8:	3f 4f       	sbci	r19, 0xFF	; 255
    23fa:	80 91 a9 02 	lds	r24, 0x02A9
    23fe:	90 91 aa 02 	lds	r25, 0x02AA
    2402:	b9 01       	movw	r22, r18
    2404:	0e 94 5d 10 	call	0x20ba	; 0x20ba <vListInsert>
    2408:	0e c0       	rjmp	.+28     	; 0x2426 <vCoRoutineAddToDelayedList+0x94>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    240a:	80 91 81 02 	lds	r24, 0x0281
    240e:	90 91 82 02 	lds	r25, 0x0282
    2412:	9c 01       	movw	r18, r24
    2414:	2e 5f       	subi	r18, 0xFE	; 254
    2416:	3f 4f       	sbci	r19, 0xFF	; 255
    2418:	80 91 a7 02 	lds	r24, 0x02A7
    241c:	90 91 a8 02 	lds	r25, 0x02A8
    2420:	b9 01       	movw	r22, r18
    2422:	0e 94 5d 10 	call	0x20ba	; 0x20ba <vListInsert>
	}

	if( pxEventList )
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	61 f0       	breq	.+24     	; 0x2446 <vCoRoutineAddToDelayedList+0xb4>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    242e:	80 91 81 02 	lds	r24, 0x0281
    2432:	90 91 82 02 	lds	r25, 0x0282
    2436:	9c 01       	movw	r18, r24
    2438:	24 5f       	subi	r18, 0xF4	; 244
    243a:	3f 4f       	sbci	r19, 0xFF	; 255
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	b9 01       	movw	r22, r18
    2442:	0e 94 5d 10 	call	0x20ba	; 0x20ba <vListInsert>
	}
}
    2446:	26 96       	adiw	r28, 0x06	; 6
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret

00002458 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	1f 92       	push	r1
    245e:	1f 92       	push	r1
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2464:	3c c0       	rjmp	.+120    	; 0x24de <prvCheckPendingReadyList+0x86>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2466:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2468:	80 91 b0 02 	lds	r24, 0x02B0
    246c:	90 91 b1 02 	lds	r25, 0x02B1
    2470:	fc 01       	movw	r30, r24
    2472:	86 81       	ldd	r24, Z+6	; 0x06
    2474:	97 81       	ldd	r25, Z+7	; 0x07
    2476:	9a 83       	std	Y+2, r25	; 0x02
    2478:	89 83       	std	Y+1, r24	; 0x01
			uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	0c 96       	adiw	r24, 0x0c	; 12
    2480:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
		}
		portENABLE_INTERRUPTS();
    2484:	78 94       	sei

		uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	02 96       	adiw	r24, 0x02	; 2
    248c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	fc 01       	movw	r30, r24
    2496:	96 89       	ldd	r25, Z+22	; 0x16
    2498:	80 91 b4 02 	lds	r24, 0x02B4
    249c:	89 17       	cp	r24, r25
    249e:	30 f4       	brcc	.+12     	; 0x24ac <prvCheckPendingReadyList+0x54>
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	fc 01       	movw	r30, r24
    24a6:	86 89       	ldd	r24, Z+22	; 0x16
    24a8:	80 93 b4 02 	sts	0x02B4, r24
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	ac 01       	movw	r20, r24
    24b2:	4e 5f       	subi	r20, 0xFE	; 254
    24b4:	5f 4f       	sbci	r21, 0xFF	; 255
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	fc 01       	movw	r30, r24
    24bc:	86 89       	ldd	r24, Z+22	; 0x16
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	c9 01       	movw	r24, r18
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	82 0f       	add	r24, r18
    24d2:	93 1f       	adc	r25, r19
    24d4:	8d 57       	subi	r24, 0x7D	; 125
    24d6:	9d 4f       	sbci	r25, 0xFD	; 253
    24d8:	ba 01       	movw	r22, r20
    24da:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    24de:	80 91 ab 02 	lds	r24, 0x02AB
    24e2:	88 23       	and	r24, r24
    24e4:	09 f0       	breq	.+2      	; 0x24e8 <prvCheckPendingReadyList+0x90>
    24e6:	bf cf       	rjmp	.-130    	; 0x2466 <prvCheckPendingReadyList+0xe>
		portENABLE_INTERRUPTS();

		uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <prvCheckDelayedList+0x6>
    24f8:	1f 92       	push	r1
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    24fe:	0e 94 88 04 	call	0x910	; 0x910 <xTaskGetTickCount>
    2502:	9c 01       	movw	r18, r24
    2504:	80 91 b7 02 	lds	r24, 0x02B7
    2508:	90 91 b8 02 	lds	r25, 0x02B8
    250c:	a9 01       	movw	r20, r18
    250e:	48 1b       	sub	r20, r24
    2510:	59 0b       	sbc	r21, r25
    2512:	ca 01       	movw	r24, r20
    2514:	90 93 ba 02 	sts	0x02BA, r25
    2518:	80 93 b9 02 	sts	0x02B9, r24
	while( xPassedTicks )
    251c:	89 c0       	rjmp	.+274    	; 0x2630 <prvCheckDelayedList+0x13e>
	{
		xCoRoutineTickCount++;
    251e:	80 91 b5 02 	lds	r24, 0x02B5
    2522:	90 91 b6 02 	lds	r25, 0x02B6
    2526:	01 96       	adiw	r24, 0x01	; 1
    2528:	90 93 b6 02 	sts	0x02B6, r25
    252c:	80 93 b5 02 	sts	0x02B5, r24
		xPassedTicks--;
    2530:	80 91 b9 02 	lds	r24, 0x02B9
    2534:	90 91 ba 02 	lds	r25, 0x02BA
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	90 93 ba 02 	sts	0x02BA, r25
    253e:	80 93 b9 02 	sts	0x02B9, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2542:	80 91 b5 02 	lds	r24, 0x02B5
    2546:	90 91 b6 02 	lds	r25, 0x02B6
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	a1 f4       	brne	.+40     	; 0x2576 <prvCheckDelayedList+0x84>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    254e:	80 91 a7 02 	lds	r24, 0x02A7
    2552:	90 91 a8 02 	lds	r25, 0x02A8
    2556:	9a 83       	std	Y+2, r25	; 0x02
    2558:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    255a:	80 91 a9 02 	lds	r24, 0x02A9
    255e:	90 91 aa 02 	lds	r25, 0x02AA
    2562:	90 93 a8 02 	sts	0x02A8, r25
    2566:	80 93 a7 02 	sts	0x02A7, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	9a 81       	ldd	r25, Y+2	; 0x02
    256e:	90 93 aa 02 	sts	0x02AA, r25
    2572:	80 93 a9 02 	sts	0x02A9, r24
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2576:	53 c0       	rjmp	.+166    	; 0x261e <prvCheckDelayedList+0x12c>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    2578:	80 91 a7 02 	lds	r24, 0x02A7
    257c:	90 91 a8 02 	lds	r25, 0x02A8
    2580:	fc 01       	movw	r30, r24
    2582:	85 81       	ldd	r24, Z+5	; 0x05
    2584:	96 81       	ldd	r25, Z+6	; 0x06
    2586:	fc 01       	movw	r30, r24
    2588:	86 81       	ldd	r24, Z+6	; 0x06
    258a:	97 81       	ldd	r25, Z+7	; 0x07
    258c:	9c 83       	std	Y+4, r25	; 0x04
    258e:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	9c 81       	ldd	r25, Y+4	; 0x04
    2594:	fc 01       	movw	r30, r24
    2596:	22 81       	ldd	r18, Z+2	; 0x02
    2598:	33 81       	ldd	r19, Z+3	; 0x03
    259a:	80 91 b5 02 	lds	r24, 0x02B5
    259e:	90 91 b6 02 	lds	r25, 0x02B6
    25a2:	82 17       	cp	r24, r18
    25a4:	93 07       	cpc	r25, r19
    25a6:	08 f4       	brcc	.+2      	; 0x25aa <prvCheckDelayedList+0xb8>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    25a8:	43 c0       	rjmp	.+134    	; 0x2630 <prvCheckDelayedList+0x13e>
			}																						

			portDISABLE_INTERRUPTS();
    25aa:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				uxListRemove( &( pxCRCB->xGenericListItem ) );											
    25ac:	8b 81       	ldd	r24, Y+3	; 0x03
    25ae:	9c 81       	ldd	r25, Y+4	; 0x04
    25b0:	02 96       	adiw	r24, 0x02	; 2
    25b2:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ba:	fc 01       	movw	r30, r24
    25bc:	84 89       	ldd	r24, Z+20	; 0x14
    25be:	95 89       	ldd	r25, Z+21	; 0x15
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	29 f0       	breq	.+10     	; 0x25ce <prvCheckDelayedList+0xdc>
				{															
					uxListRemove( &( pxCRCB->xEventListItem ) );											
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	0c 96       	adiw	r24, 0x0c	; 12
    25ca:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    25ce:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	9c 81       	ldd	r25, Y+4	; 0x04
    25d4:	fc 01       	movw	r30, r24
    25d6:	96 89       	ldd	r25, Z+22	; 0x16
    25d8:	80 91 b4 02 	lds	r24, 0x02B4
    25dc:	89 17       	cp	r24, r25
    25de:	30 f4       	brcc	.+12     	; 0x25ec <prvCheckDelayedList+0xfa>
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	fc 01       	movw	r30, r24
    25e6:	86 89       	ldd	r24, Z+22	; 0x16
    25e8:	80 93 b4 02 	sts	0x02B4, r24
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	9c 81       	ldd	r25, Y+4	; 0x04
    25f0:	ac 01       	movw	r20, r24
    25f2:	4e 5f       	subi	r20, 0xFE	; 254
    25f4:	5f 4f       	sbci	r21, 0xFF	; 255
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	fc 01       	movw	r30, r24
    25fc:	86 89       	ldd	r24, Z+22	; 0x16
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	c9 01       	movw	r24, r18
    2604:	88 0f       	add	r24, r24
    2606:	99 1f       	adc	r25, r25
    2608:	88 0f       	add	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	82 0f       	add	r24, r18
    2612:	93 1f       	adc	r25, r19
    2614:	8d 57       	subi	r24, 0x7D	; 125
    2616:	9d 4f       	sbci	r25, 0xFD	; 253
    2618:	ba 01       	movw	r22, r20
    261a:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    261e:	80 91 a7 02 	lds	r24, 0x02A7
    2622:	90 91 a8 02 	lds	r25, 0x02A8
    2626:	fc 01       	movw	r30, r24
    2628:	80 81       	ld	r24, Z
    262a:	88 23       	and	r24, r24
    262c:	09 f0       	breq	.+2      	; 0x2630 <prvCheckDelayedList+0x13e>
    262e:	a4 cf       	rjmp	.-184    	; 0x2578 <prvCheckDelayedList+0x86>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2630:	80 91 b9 02 	lds	r24, 0x02B9
    2634:	90 91 ba 02 	lds	r25, 0x02BA
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	09 f0       	breq	.+2      	; 0x263e <prvCheckDelayedList+0x14c>
    263c:	70 cf       	rjmp	.-288    	; 0x251e <prvCheckDelayedList+0x2c>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    263e:	80 91 b5 02 	lds	r24, 0x02B5
    2642:	90 91 b6 02 	lds	r25, 0x02B6
    2646:	90 93 b8 02 	sts	0x02B8, r25
    264a:	80 93 b7 02 	sts	0x02B7, r24
}
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	08 95       	ret

0000265c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	1f 92       	push	r1
    2662:	1f 92       	push	r1
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2668:	0e 94 2c 12 	call	0x2458	; 0x2458 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    266c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2670:	0a c0       	rjmp	.+20     	; 0x2686 <vCoRoutineSchedule+0x2a>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    2672:	80 91 b4 02 	lds	r24, 0x02B4
    2676:	88 23       	and	r24, r24
    2678:	09 f4       	brne	.+2      	; 0x267c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    267a:	6f c0       	rjmp	.+222    	; 0x275a <vCoRoutineSchedule+0xfe>
		}
		--uxTopCoRoutineReadyPriority;
    267c:	80 91 b4 02 	lds	r24, 0x02B4
    2680:	81 50       	subi	r24, 0x01	; 1
    2682:	80 93 b4 02 	sts	0x02B4, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2686:	80 91 b4 02 	lds	r24, 0x02B4
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	c9 01       	movw	r24, r18
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	82 0f       	add	r24, r18
    269e:	93 1f       	adc	r25, r19
    26a0:	8d 57       	subi	r24, 0x7D	; 125
    26a2:	9d 4f       	sbci	r25, 0xFD	; 253
    26a4:	fc 01       	movw	r30, r24
    26a6:	80 81       	ld	r24, Z
    26a8:	88 23       	and	r24, r24
    26aa:	19 f3       	breq	.-58     	; 0x2672 <vCoRoutineSchedule+0x16>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    26ac:	80 91 b4 02 	lds	r24, 0x02B4
    26b0:	28 2f       	mov	r18, r24
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	c9 01       	movw	r24, r18
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	88 0f       	add	r24, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	88 0f       	add	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	82 0f       	add	r24, r18
    26c4:	93 1f       	adc	r25, r19
    26c6:	8d 57       	subi	r24, 0x7D	; 125
    26c8:	9d 4f       	sbci	r25, 0xFD	; 253
    26ca:	9a 83       	std	Y+2, r25	; 0x02
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	fc 01       	movw	r30, r24
    26d4:	81 81       	ldd	r24, Z+1	; 0x01
    26d6:	92 81       	ldd	r25, Z+2	; 0x02
    26d8:	fc 01       	movw	r30, r24
    26da:	22 81       	ldd	r18, Z+2	; 0x02
    26dc:	33 81       	ldd	r19, Z+3	; 0x03
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	fc 01       	movw	r30, r24
    26e4:	32 83       	std	Z+2, r19	; 0x02
    26e6:	21 83       	std	Z+1, r18	; 0x01
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	fc 01       	movw	r30, r24
    26ee:	21 81       	ldd	r18, Z+1	; 0x01
    26f0:	32 81       	ldd	r19, Z+2	; 0x02
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	03 96       	adiw	r24, 0x03	; 3
    26f8:	28 17       	cp	r18, r24
    26fa:	39 07       	cpc	r19, r25
    26fc:	69 f4       	brne	.+26     	; 0x2718 <vCoRoutineSchedule+0xbc>
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	9a 81       	ldd	r25, Y+2	; 0x02
    2702:	fc 01       	movw	r30, r24
    2704:	81 81       	ldd	r24, Z+1	; 0x01
    2706:	92 81       	ldd	r25, Z+2	; 0x02
    2708:	fc 01       	movw	r30, r24
    270a:	22 81       	ldd	r18, Z+2	; 0x02
    270c:	33 81       	ldd	r19, Z+3	; 0x03
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	9a 81       	ldd	r25, Y+2	; 0x02
    2712:	fc 01       	movw	r30, r24
    2714:	32 83       	std	Z+2, r19	; 0x02
    2716:	21 83       	std	Z+1, r18	; 0x01
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	9a 81       	ldd	r25, Y+2	; 0x02
    271c:	fc 01       	movw	r30, r24
    271e:	81 81       	ldd	r24, Z+1	; 0x01
    2720:	92 81       	ldd	r25, Z+2	; 0x02
    2722:	fc 01       	movw	r30, r24
    2724:	86 81       	ldd	r24, Z+6	; 0x06
    2726:	97 81       	ldd	r25, Z+7	; 0x07
    2728:	90 93 82 02 	sts	0x0282, r25
    272c:	80 93 81 02 	sts	0x0281, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2730:	80 91 81 02 	lds	r24, 0x0281
    2734:	90 91 82 02 	lds	r25, 0x0282
    2738:	fc 01       	movw	r30, r24
    273a:	20 81       	ld	r18, Z
    273c:	31 81       	ldd	r19, Z+1	; 0x01
    273e:	80 91 81 02 	lds	r24, 0x0281
    2742:	90 91 82 02 	lds	r25, 0x0282
    2746:	fc 01       	movw	r30, r24
    2748:	47 89       	ldd	r20, Z+23	; 0x17
    274a:	80 91 81 02 	lds	r24, 0x0281
    274e:	90 91 82 02 	lds	r25, 0x0282
    2752:	64 2f       	mov	r22, r20
    2754:	f9 01       	movw	r30, r18
    2756:	19 95       	eicall

	return;
    2758:	00 00       	nop
}
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	08 95       	ret

00002764 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	1f 92       	push	r1
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    276e:	19 82       	std	Y+1, r1	; 0x01
    2770:	13 c0       	rjmp	.+38     	; 0x2798 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	c9 01       	movw	r24, r18
    277a:	88 0f       	add	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	82 0f       	add	r24, r18
    2788:	93 1f       	adc	r25, r19
    278a:	8d 57       	subi	r24, 0x7D	; 125
    278c:	9d 4f       	sbci	r25, 0xFD	; 253
    278e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	8f 5f       	subi	r24, 0xFF	; 255
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	82 30       	cpi	r24, 0x02	; 2
    279c:	50 f3       	brcs	.-44     	; 0x2772 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    279e:	85 e9       	ldi	r24, 0x95	; 149
    27a0:	92 e0       	ldi	r25, 0x02	; 2
    27a2:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    27a6:	8e e9       	ldi	r24, 0x9E	; 158
    27a8:	92 e0       	ldi	r25, 0x02	; 2
    27aa:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    27ae:	8b ea       	ldi	r24, 0xAB	; 171
    27b0:	92 e0       	ldi	r25, 0x02	; 2
    27b2:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    27b6:	85 e9       	ldi	r24, 0x95	; 149
    27b8:	92 e0       	ldi	r25, 0x02	; 2
    27ba:	90 93 a8 02 	sts	0x02A8, r25
    27be:	80 93 a7 02 	sts	0x02A7, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    27c2:	8e e9       	ldi	r24, 0x9E	; 158
    27c4:	92 e0       	ldi	r25, 0x02	; 2
    27c6:	90 93 aa 02 	sts	0x02AA, r25
    27ca:	80 93 a9 02 	sts	0x02A9, r24
}
    27ce:	0f 90       	pop	r0
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	08 95       	ret

000027d6 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	00 d0       	rcall	.+0      	; 0x27dc <xCoRoutineRemoveFromEventList+0x6>
    27dc:	1f 92       	push	r1
    27de:	1f 92       	push	r1
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	9d 83       	std	Y+5, r25	; 0x05
    27e6:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    27e8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ea:	9d 81       	ldd	r25, Y+5	; 0x05
    27ec:	fc 01       	movw	r30, r24
    27ee:	85 81       	ldd	r24, Z+5	; 0x05
    27f0:	96 81       	ldd	r25, Z+6	; 0x06
    27f2:	fc 01       	movw	r30, r24
    27f4:	86 81       	ldd	r24, Z+6	; 0x06
    27f6:	97 81       	ldd	r25, Z+7	; 0x07
    27f8:	9b 83       	std	Y+3, r25	; 0x03
    27fa:	8a 83       	std	Y+2, r24	; 0x02
	uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    27fc:	8a 81       	ldd	r24, Y+2	; 0x02
    27fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2800:	0c 96       	adiw	r24, 0x0c	; 12
    2802:	0e 94 d6 10 	call	0x21ac	; 0x21ac <uxListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	9b 81       	ldd	r25, Y+3	; 0x03
    280a:	0c 96       	adiw	r24, 0x0c	; 12
    280c:	bc 01       	movw	r22, r24
    280e:	8b ea       	ldi	r24, 0xAB	; 171
    2810:	92 e0       	ldi	r25, 0x02	; 2
    2812:	0e 94 06 10 	call	0x200c	; 0x200c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2816:	8a 81       	ldd	r24, Y+2	; 0x02
    2818:	9b 81       	ldd	r25, Y+3	; 0x03
    281a:	fc 01       	movw	r30, r24
    281c:	26 89       	ldd	r18, Z+22	; 0x16
    281e:	80 91 81 02 	lds	r24, 0x0281
    2822:	90 91 82 02 	lds	r25, 0x0282
    2826:	fc 01       	movw	r30, r24
    2828:	86 89       	ldd	r24, Z+22	; 0x16
    282a:	28 17       	cp	r18, r24
    282c:	18 f0       	brcs	.+6      	; 0x2834 <xCoRoutineRemoveFromEventList+0x5e>
	{
		xReturn = pdTRUE;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	01 c0       	rjmp	.+2      	; 0x2836 <xCoRoutineRemoveFromEventList+0x60>
	}
	else
	{
		xReturn = pdFALSE;
    2834:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2836:	89 81       	ldd	r24, Y+1	; 0x01
}
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	08 95       	ret

00002848 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	00 d0       	rcall	.+0      	; 0x284e <pvPortMalloc+0x6>
    284e:	1f 92       	push	r1
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	9c 83       	std	Y+4, r25	; 0x04
    2856:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    2858:	1a 82       	std	Y+2, r1	; 0x02
    285a:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    285c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    2860:	20 91 bb 1a 	lds	r18, 0x1ABB
    2864:	30 91 bc 1a 	lds	r19, 0x1ABC
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	9c 81       	ldd	r25, Y+4	; 0x04
    286c:	82 0f       	add	r24, r18
    286e:	93 1f       	adc	r25, r19
    2870:	81 15       	cp	r24, r1
    2872:	28 e1       	ldi	r18, 0x18	; 24
    2874:	92 07       	cpc	r25, r18
    2876:	18 f5       	brcc	.+70     	; 0x28be <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    2878:	20 91 bb 1a 	lds	r18, 0x1ABB
    287c:	30 91 bc 1a 	lds	r19, 0x1ABC
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	9c 81       	ldd	r25, Y+4	; 0x04
    2884:	28 0f       	add	r18, r24
    2886:	39 1f       	adc	r19, r25
    2888:	80 91 bb 1a 	lds	r24, 0x1ABB
    288c:	90 91 bc 1a 	lds	r25, 0x1ABC
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    2890:	82 17       	cp	r24, r18
    2892:	93 07       	cpc	r25, r19
    2894:	a0 f4       	brcc	.+40     	; 0x28be <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    2896:	80 91 bb 1a 	lds	r24, 0x1ABB
    289a:	90 91 bc 1a 	lds	r25, 0x1ABC
    289e:	85 54       	subi	r24, 0x45	; 69
    28a0:	9d 4f       	sbci	r25, 0xFD	; 253
    28a2:	9a 83       	std	Y+2, r25	; 0x02
    28a4:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    28a6:	20 91 bb 1a 	lds	r18, 0x1ABB
    28aa:	30 91 bc 1a 	lds	r19, 0x1ABC
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	82 0f       	add	r24, r18
    28b4:	93 1f       	adc	r25, r19
    28b6:	90 93 bc 1a 	sts	0x1ABC, r25
    28ba:	80 93 bb 1a 	sts	0x1ABB, r24
		}
	}
	xTaskResumeAll();
    28be:	0e 94 04 04 	call	0x808	; 0x808 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	df 91       	pop	r29
    28d0:	cf 91       	pop	r28
    28d2:	08 95       	ret

000028d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
    28d8:	1f 92       	push	r1
    28da:	1f 92       	push	r1
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	08 95       	ret

000028ee <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    28ee:	cf 93       	push	r28
    28f0:	df 93       	push	r29
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    28f6:	10 92 bc 1a 	sts	0x1ABC, r1
    28fa:	10 92 bb 1a 	sts	0x1ABB, r1
}
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	08 95       	ret

00002904 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    290c:	80 91 bb 1a 	lds	r24, 0x1ABB
    2910:	90 91 bc 1a 	lds	r25, 0x1ABC
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	38 e1       	ldi	r19, 0x18	; 24
    2918:	a9 01       	movw	r20, r18
    291a:	48 1b       	sub	r20, r24
    291c:	59 0b       	sbc	r21, r25
    291e:	ca 01       	movw	r24, r20
}
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	08 95       	ret

00002926 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    2926:	cf 93       	push	r28
    2928:	df 93       	push	r29
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	28 97       	sbiw	r28, 0x08	; 8
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	9c 83       	std	Y+4, r25	; 0x04
    293c:	8b 83       	std	Y+3, r24	; 0x03
    293e:	7e 83       	std	Y+6, r23	; 0x06
    2940:	6d 83       	std	Y+5, r22	; 0x05
    2942:	58 87       	std	Y+8, r21	; 0x08
    2944:	4f 83       	std	Y+7, r20	; 0x07
#endif

	/* Place a few bytes of known values on the bottom of the stack.
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	9c 81       	ldd	r25, Y+4	; 0x04
    294a:	21 e1       	ldi	r18, 0x11	; 17
    294c:	fc 01       	movw	r30, r24
    294e:	20 83       	st	Z, r18
	pxTopOfStack--;
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	9c 81       	ldd	r25, Y+4	; 0x04
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	9c 83       	std	Y+4, r25	; 0x04
    2958:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	9c 81       	ldd	r25, Y+4	; 0x04
    295e:	22 e2       	ldi	r18, 0x22	; 34
    2960:	fc 01       	movw	r30, r24
    2962:	20 83       	st	Z, r18
	pxTopOfStack--;
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	9c 81       	ldd	r25, Y+4	; 0x04
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	9c 83       	std	Y+4, r25	; 0x04
    296c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	23 e3       	ldi	r18, 0x33	; 51
    2974:	fc 01       	movw	r30, r24
    2976:	20 83       	st	Z, r18
	pxTopOfStack--;
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	9c 81       	ldd	r25, Y+4	; 0x04
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	9c 83       	std	Y+4, r25	; 0x04
    2980:	8b 83       	std	Y+3, r24	; 0x03
	 * of flash. We do this by adding the .task label in the linker script.
	 *
	 * In order to do this properly, we would need to get a full 3-byte pointer to
	 * pxCode.  That requires a change to GCC.  Not likely to happen any time soon.
	 */
	usAddress = ( unsigned portSHORT ) pxCode;
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	9a 83       	std	Y+2, r25	; 0x02
    2988:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
    298a:	29 81       	ldd	r18, Y+1	; 0x01
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	9c 81       	ldd	r25, Y+4	; 0x04
    2990:	fc 01       	movw	r30, r24
    2992:	20 83       	st	Z, r18
	pxTopOfStack--;
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	9c 81       	ldd	r25, Y+4	; 0x04
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	9c 83       	std	Y+4, r25	; 0x04
    299c:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	9a 81       	ldd	r25, Y+2	; 0x02
    29a2:	89 2f       	mov	r24, r25
    29a4:	99 27       	eor	r25, r25
    29a6:	9a 83       	std	Y+2, r25	; 0x02
    29a8:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
    29aa:	29 81       	ldd	r18, Y+1	; 0x01
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	9c 81       	ldd	r25, Y+4	; 0x04
    29b0:	fc 01       	movw	r30, r24
    29b2:	20 83       	st	Z, r18
	pxTopOfStack--;
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	9c 81       	ldd	r25, Y+4	; 0x04
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9c 83       	std	Y+4, r25	; 0x04
    29bc:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = 0;
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	9c 81       	ldd	r25, Y+4	; 0x04
    29c2:	fc 01       	movw	r30, r24
    29c4:	10 82       	st	Z, r1
	pxTopOfStack--;
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	9c 83       	std	Y+4, r25	; 0x04
    29ce:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	9c 81       	ldd	r25, Y+4	; 0x04
    29d4:	fc 01       	movw	r30, r24
    29d6:	10 82       	st	Z, r1
	pxTopOfStack--;
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	9c 81       	ldd	r25, Y+4	; 0x04
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	9c 83       	std	Y+4, r25	; 0x04
    29e0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	9c 81       	ldd	r25, Y+4	; 0x04
    29e6:	20 e8       	ldi	r18, 0x80	; 128
    29e8:	fc 01       	movw	r30, r24
    29ea:	20 83       	st	Z, r18
	pxTopOfStack--;
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	9c 81       	ldd	r25, Y+4	; 0x04
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	9c 83       	std	Y+4, r25	; 0x04
    29f4:	8b 83       	std	Y+3, r24	; 0x03
#if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

	/* If we have an ATmega256x, we are also saving the RAMPZ and EIND registers.
	 * We should default those to 0.
	 */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* EIND */
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	fc 01       	movw	r30, r24
    29fc:	10 82       	st	Z, r1
	pxTopOfStack--;
    29fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2a00:	9c 81       	ldd	r25, Y+4	; 0x04
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	9c 83       	std	Y+4, r25	; 0x04
    2a06:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* RAMPZ */
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	10 82       	st	Z, r1
	pxTopOfStack--;
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	9c 83       	std	Y+4, r25	; 0x04
    2a18:	8b 83       	std	Y+3, r24	; 0x03

#endif

	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1e:	fc 01       	movw	r30, r24
    2a20:	10 82       	st	Z, r1
	pxTopOfStack--;
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	9c 81       	ldd	r25, Y+4	; 0x04
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	9c 83       	std	Y+4, r25	; 0x04
    2a2a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a30:	22 e0       	ldi	r18, 0x02	; 2
    2a32:	fc 01       	movw	r30, r24
    2a34:	20 83       	st	Z, r18
	pxTopOfStack--;
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	9c 83       	std	Y+4, r25	; 0x04
    2a3e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    2a40:	8b 81       	ldd	r24, Y+3	; 0x03
    2a42:	9c 81       	ldd	r25, Y+4	; 0x04
    2a44:	23 e0       	ldi	r18, 0x03	; 3
    2a46:	fc 01       	movw	r30, r24
    2a48:	20 83       	st	Z, r18
	pxTopOfStack--;
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	9c 83       	std	Y+4, r25	; 0x04
    2a52:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	24 e0       	ldi	r18, 0x04	; 4
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	20 83       	st	Z, r18
	pxTopOfStack--;
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	9c 83       	std	Y+4, r25	; 0x04
    2a66:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	25 e0       	ldi	r18, 0x05	; 5
    2a6e:	fc 01       	movw	r30, r24
    2a70:	20 83       	st	Z, r18
	pxTopOfStack--;
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	9c 81       	ldd	r25, Y+4	; 0x04
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	9c 83       	std	Y+4, r25	; 0x04
    2a7a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	26 e0       	ldi	r18, 0x06	; 6
    2a82:	fc 01       	movw	r30, r24
    2a84:	20 83       	st	Z, r18
	pxTopOfStack--;
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	9c 83       	std	Y+4, r25	; 0x04
    2a8e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	9c 81       	ldd	r25, Y+4	; 0x04
    2a94:	27 e0       	ldi	r18, 0x07	; 7
    2a96:	fc 01       	movw	r30, r24
    2a98:	20 83       	st	Z, r18
	pxTopOfStack--;
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	9c 83       	std	Y+4, r25	; 0x04
    2aa2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    2aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa8:	28 e0       	ldi	r18, 0x08	; 8
    2aaa:	fc 01       	movw	r30, r24
    2aac:	20 83       	st	Z, r18
	pxTopOfStack--;
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	9c 83       	std	Y+4, r25	; 0x04
    2ab6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	9c 81       	ldd	r25, Y+4	; 0x04
    2abc:	29 e0       	ldi	r18, 0x09	; 9
    2abe:	fc 01       	movw	r30, r24
    2ac0:	20 83       	st	Z, r18
	pxTopOfStack--;
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	20 e1       	ldi	r18, 0x10	; 16
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	20 83       	st	Z, r18
	pxTopOfStack--;
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	9c 83       	std	Y+4, r25	; 0x04
    2ade:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae4:	21 e1       	ldi	r18, 0x11	; 17
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	20 83       	st	Z, r18
	pxTopOfStack--;
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
    2aec:	9c 81       	ldd	r25, Y+4	; 0x04
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	9c 83       	std	Y+4, r25	; 0x04
    2af2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	22 e1       	ldi	r18, 0x12	; 18
    2afa:	fc 01       	movw	r30, r24
    2afc:	20 83       	st	Z, r18
	pxTopOfStack--;
    2afe:	8b 81       	ldd	r24, Y+3	; 0x03
    2b00:	9c 81       	ldd	r25, Y+4	; 0x04
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	9c 83       	std	Y+4, r25	; 0x04
    2b06:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0c:	23 e1       	ldi	r18, 0x13	; 19
    2b0e:	fc 01       	movw	r30, r24
    2b10:	20 83       	st	Z, r18
	pxTopOfStack--;
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	9c 81       	ldd	r25, Y+4	; 0x04
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	9c 83       	std	Y+4, r25	; 0x04
    2b1a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b20:	24 e1       	ldi	r18, 0x14	; 20
    2b22:	fc 01       	movw	r30, r24
    2b24:	20 83       	st	Z, r18
	pxTopOfStack--;
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9c 83       	std	Y+4, r25	; 0x04
    2b2e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    2b30:	8b 81       	ldd	r24, Y+3	; 0x03
    2b32:	9c 81       	ldd	r25, Y+4	; 0x04
    2b34:	25 e1       	ldi	r18, 0x15	; 21
    2b36:	fc 01       	movw	r30, r24
    2b38:	20 83       	st	Z, r18
	pxTopOfStack--;
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	9c 83       	std	Y+4, r25	; 0x04
    2b42:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	9c 81       	ldd	r25, Y+4	; 0x04
    2b48:	26 e1       	ldi	r18, 0x16	; 22
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	20 83       	st	Z, r18
	pxTopOfStack--;
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	9c 81       	ldd	r25, Y+4	; 0x04
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	9c 83       	std	Y+4, r25	; 0x04
    2b56:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5c:	27 e1       	ldi	r18, 0x17	; 23
    2b5e:	fc 01       	movw	r30, r24
    2b60:	20 83       	st	Z, r18
	pxTopOfStack--;
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	9c 81       	ldd	r25, Y+4	; 0x04
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	9c 83       	std	Y+4, r25	; 0x04
    2b6a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b70:	28 e1       	ldi	r18, 0x18	; 24
    2b72:	fc 01       	movw	r30, r24
    2b74:	20 83       	st	Z, r18
	pxTopOfStack--;
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	9c 83       	std	Y+4, r25	; 0x04
    2b7e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	9c 81       	ldd	r25, Y+4	; 0x04
    2b84:	29 e1       	ldi	r18, 0x19	; 25
    2b86:	fc 01       	movw	r30, r24
    2b88:	20 83       	st	Z, r18
	pxTopOfStack--;
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	9c 83       	std	Y+4, r25	; 0x04
    2b92:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	9c 81       	ldd	r25, Y+4	; 0x04
    2b98:	20 e2       	ldi	r18, 0x20	; 32
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	20 83       	st	Z, r18
	pxTopOfStack--;
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	9c 83       	std	Y+4, r25	; 0x04
    2ba6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bac:	21 e2       	ldi	r18, 0x21	; 33
    2bae:	fc 01       	movw	r30, r24
    2bb0:	20 83       	st	Z, r18
	pxTopOfStack--;
    2bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	9c 83       	std	Y+4, r25	; 0x04
    2bba:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc0:	22 e2       	ldi	r18, 0x22	; 34
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	20 83       	st	Z, r18
	pxTopOfStack--;
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	9c 83       	std	Y+4, r25	; 0x04
    2bce:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd4:	23 e2       	ldi	r18, 0x23	; 35
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	20 83       	st	Z, r18
	pxTopOfStack--;
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	9c 83       	std	Y+4, r25	; 0x04
    2be2:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    2be4:	8f 81       	ldd	r24, Y+7	; 0x07
    2be6:	98 85       	ldd	r25, Y+8	; 0x08
    2be8:	9a 83       	std	Y+2, r25	; 0x02
    2bea:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2bec:	29 81       	ldd	r18, Y+1	; 0x01
    2bee:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	20 83       	st	Z, r18
	pxTopOfStack--;
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	9c 83       	std	Y+4, r25	; 0x04
    2bfe:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	9a 81       	ldd	r25, Y+2	; 0x02
    2c04:	89 2f       	mov	r24, r25
    2c06:	99 27       	eor	r25, r25
    2c08:	9a 83       	std	Y+2, r25	; 0x02
    2c0a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2c0c:	29 81       	ldd	r18, Y+1	; 0x01
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	9c 81       	ldd	r25, Y+4	; 0x04
    2c12:	fc 01       	movw	r30, r24
    2c14:	20 83       	st	Z, r18
	pxTopOfStack--;
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	9c 83       	std	Y+4, r25	; 0x04
    2c1e:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	9c 81       	ldd	r25, Y+4	; 0x04
    2c24:	26 e2       	ldi	r18, 0x26	; 38
    2c26:	fc 01       	movw	r30, r24
    2c28:	20 83       	st	Z, r18
	pxTopOfStack--;
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	9c 83       	std	Y+4, r25	; 0x04
    2c32:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	9c 81       	ldd	r25, Y+4	; 0x04
    2c38:	27 e2       	ldi	r18, 0x27	; 39
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	20 83       	st	Z, r18
	pxTopOfStack--;
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	9c 81       	ldd	r25, Y+4	; 0x04
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4c:	28 e2       	ldi	r18, 0x28	; 40
    2c4e:	fc 01       	movw	r30, r24
    2c50:	20 83       	st	Z, r18
	pxTopOfStack--;
    2c52:	8b 81       	ldd	r24, Y+3	; 0x03
    2c54:	9c 81       	ldd	r25, Y+4	; 0x04
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	9c 83       	std	Y+4, r25	; 0x04
    2c5a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	29 e2       	ldi	r18, 0x29	; 41
    2c62:	fc 01       	movw	r30, r24
    2c64:	20 83       	st	Z, r18
	pxTopOfStack--;
    2c66:	8b 81       	ldd	r24, Y+3	; 0x03
    2c68:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	9c 83       	std	Y+4, r25	; 0x04
    2c6e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	9c 81       	ldd	r25, Y+4	; 0x04
    2c74:	20 e3       	ldi	r18, 0x30	; 48
    2c76:	fc 01       	movw	r30, r24
    2c78:	20 83       	st	Z, r18
	pxTopOfStack--;
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	9c 83       	std	Y+4, r25	; 0x04
    2c82:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	9c 81       	ldd	r25, Y+4	; 0x04
    2c88:	21 e3       	ldi	r18, 0x31	; 49
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	20 83       	st	Z, r18
	pxTopOfStack--;
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	9c 81       	ldd	r25, Y+4	; 0x04
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	9c 83       	std	Y+4, r25	; 0x04
    2c96:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2c9c:	28 96       	adiw	r28, 0x08	; 8
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	08 95       	ret

00002cae <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    2cb6:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2cba:	a0 91 28 02 	lds	r26, 0x0228
    2cbe:	b0 91 29 02 	lds	r27, 0x0229
    2cc2:	cd 91       	ld	r28, X+
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	dd 91       	ld	r29, X+
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	ff 91       	pop	r31
    2ccc:	ef 91       	pop	r30
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	bf 91       	pop	r27
    2cd4:	af 91       	pop	r26
    2cd6:	9f 91       	pop	r25
    2cd8:	8f 91       	pop	r24
    2cda:	7f 91       	pop	r23
    2cdc:	6f 91       	pop	r22
    2cde:	5f 91       	pop	r21
    2ce0:	4f 91       	pop	r20
    2ce2:	3f 91       	pop	r19
    2ce4:	2f 91       	pop	r18
    2ce6:	1f 91       	pop	r17
    2ce8:	0f 91       	pop	r16
    2cea:	ff 90       	pop	r15
    2cec:	ef 90       	pop	r14
    2cee:	df 90       	pop	r13
    2cf0:	cf 90       	pop	r12
    2cf2:	bf 90       	pop	r11
    2cf4:	af 90       	pop	r10
    2cf6:	9f 90       	pop	r9
    2cf8:	8f 90       	pop	r8
    2cfa:	7f 90       	pop	r7
    2cfc:	6f 90       	pop	r6
    2cfe:	5f 90       	pop	r5
    2d00:	4f 90       	pop	r4
    2d02:	3f 90       	pop	r3
    2d04:	2f 90       	pop	r2
    2d06:	1f 90       	pop	r1
    2d08:	0f 90       	pop	r0
    2d0a:	0c be       	out	0x3c, r0	; 60
    2d0c:	0f 90       	pop	r0
    2d0e:	0b be       	out	0x3b, r0	; 59
    2d10:	0f 90       	pop	r0
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2d16:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
}
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	08 95       	ret

00002d20 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2d28:	df 91       	pop	r29
    2d2a:	cf 91       	pop	r28
    2d2c:	08 95       	ret

00002d2e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2d2e:	0f 92       	push	r0
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	0f 92       	push	r0
    2d36:	0b b6       	in	r0, 0x3b	; 59
    2d38:	0f 92       	push	r0
    2d3a:	0c b6       	in	r0, 0x3c	; 60
    2d3c:	0f 92       	push	r0
    2d3e:	1f 92       	push	r1
    2d40:	11 24       	eor	r1, r1
    2d42:	2f 92       	push	r2
    2d44:	3f 92       	push	r3
    2d46:	4f 92       	push	r4
    2d48:	5f 92       	push	r5
    2d4a:	6f 92       	push	r6
    2d4c:	7f 92       	push	r7
    2d4e:	8f 92       	push	r8
    2d50:	9f 92       	push	r9
    2d52:	af 92       	push	r10
    2d54:	bf 92       	push	r11
    2d56:	cf 92       	push	r12
    2d58:	df 92       	push	r13
    2d5a:	ef 92       	push	r14
    2d5c:	ff 92       	push	r15
    2d5e:	0f 93       	push	r16
    2d60:	1f 93       	push	r17
    2d62:	2f 93       	push	r18
    2d64:	3f 93       	push	r19
    2d66:	4f 93       	push	r20
    2d68:	5f 93       	push	r21
    2d6a:	6f 93       	push	r22
    2d6c:	7f 93       	push	r23
    2d6e:	8f 93       	push	r24
    2d70:	9f 93       	push	r25
    2d72:	af 93       	push	r26
    2d74:	bf 93       	push	r27
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	ef 93       	push	r30
    2d7c:	ff 93       	push	r31
    2d7e:	a0 91 28 02 	lds	r26, 0x0228
    2d82:	b0 91 29 02 	lds	r27, 0x0229
    2d86:	0d b6       	in	r0, 0x3d	; 61
    2d88:	0d 92       	st	X+, r0
    2d8a:	0e b6       	in	r0, 0x3e	; 62
    2d8c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2d8e:	0e 94 9a 05 	call	0xb34	; 0xb34 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2d92:	a0 91 28 02 	lds	r26, 0x0228
    2d96:	b0 91 29 02 	lds	r27, 0x0229
    2d9a:	cd 91       	ld	r28, X+
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	dd 91       	ld	r29, X+
    2da0:	de bf       	out	0x3e, r29	; 62
    2da2:	ff 91       	pop	r31
    2da4:	ef 91       	pop	r30
    2da6:	df 91       	pop	r29
    2da8:	cf 91       	pop	r28
    2daa:	bf 91       	pop	r27
    2dac:	af 91       	pop	r26
    2dae:	9f 91       	pop	r25
    2db0:	8f 91       	pop	r24
    2db2:	7f 91       	pop	r23
    2db4:	6f 91       	pop	r22
    2db6:	5f 91       	pop	r21
    2db8:	4f 91       	pop	r20
    2dba:	3f 91       	pop	r19
    2dbc:	2f 91       	pop	r18
    2dbe:	1f 91       	pop	r17
    2dc0:	0f 91       	pop	r16
    2dc2:	ff 90       	pop	r15
    2dc4:	ef 90       	pop	r14
    2dc6:	df 90       	pop	r13
    2dc8:	cf 90       	pop	r12
    2dca:	bf 90       	pop	r11
    2dcc:	af 90       	pop	r10
    2dce:	9f 90       	pop	r9
    2dd0:	8f 90       	pop	r8
    2dd2:	7f 90       	pop	r7
    2dd4:	6f 90       	pop	r6
    2dd6:	5f 90       	pop	r5
    2dd8:	4f 90       	pop	r4
    2dda:	3f 90       	pop	r3
    2ddc:	2f 90       	pop	r2
    2dde:	1f 90       	pop	r1
    2de0:	0f 90       	pop	r0
    2de2:	0c be       	out	0x3c, r0	; 60
    2de4:	0f 90       	pop	r0
    2de6:	0b be       	out	0x3b, r0	; 59
    2de8:	0f 90       	pop	r0
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2dee:	08 95       	ret

00002df0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2df0:	0f 92       	push	r0
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	0f 92       	push	r0
    2df8:	0b b6       	in	r0, 0x3b	; 59
    2dfa:	0f 92       	push	r0
    2dfc:	0c b6       	in	r0, 0x3c	; 60
    2dfe:	0f 92       	push	r0
    2e00:	1f 92       	push	r1
    2e02:	11 24       	eor	r1, r1
    2e04:	2f 92       	push	r2
    2e06:	3f 92       	push	r3
    2e08:	4f 92       	push	r4
    2e0a:	5f 92       	push	r5
    2e0c:	6f 92       	push	r6
    2e0e:	7f 92       	push	r7
    2e10:	8f 92       	push	r8
    2e12:	9f 92       	push	r9
    2e14:	af 92       	push	r10
    2e16:	bf 92       	push	r11
    2e18:	cf 92       	push	r12
    2e1a:	df 92       	push	r13
    2e1c:	ef 92       	push	r14
    2e1e:	ff 92       	push	r15
    2e20:	0f 93       	push	r16
    2e22:	1f 93       	push	r17
    2e24:	2f 93       	push	r18
    2e26:	3f 93       	push	r19
    2e28:	4f 93       	push	r20
    2e2a:	5f 93       	push	r21
    2e2c:	6f 93       	push	r22
    2e2e:	7f 93       	push	r23
    2e30:	8f 93       	push	r24
    2e32:	9f 93       	push	r25
    2e34:	af 93       	push	r26
    2e36:	bf 93       	push	r27
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	ef 93       	push	r30
    2e3e:	ff 93       	push	r31
    2e40:	a0 91 28 02 	lds	r26, 0x0228
    2e44:	b0 91 29 02 	lds	r27, 0x0229
    2e48:	0d b6       	in	r0, 0x3d	; 61
    2e4a:	0d 92       	st	X+, r0
    2e4c:	0e b6       	in	r0, 0x3e	; 62
    2e4e:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2e50:	0e 94 bd 04 	call	0x97a	; 0x97a <vTaskIncrementTick>
	vTaskSwitchContext();
    2e54:	0e 94 9a 05 	call	0xb34	; 0xb34 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2e58:	a0 91 28 02 	lds	r26, 0x0228
    2e5c:	b0 91 29 02 	lds	r27, 0x0229
    2e60:	cd 91       	ld	r28, X+
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	dd 91       	ld	r29, X+
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	ff 91       	pop	r31
    2e6a:	ef 91       	pop	r30
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	bf 91       	pop	r27
    2e72:	af 91       	pop	r26
    2e74:	9f 91       	pop	r25
    2e76:	8f 91       	pop	r24
    2e78:	7f 91       	pop	r23
    2e7a:	6f 91       	pop	r22
    2e7c:	5f 91       	pop	r21
    2e7e:	4f 91       	pop	r20
    2e80:	3f 91       	pop	r19
    2e82:	2f 91       	pop	r18
    2e84:	1f 91       	pop	r17
    2e86:	0f 91       	pop	r16
    2e88:	ff 90       	pop	r15
    2e8a:	ef 90       	pop	r14
    2e8c:	df 90       	pop	r13
    2e8e:	cf 90       	pop	r12
    2e90:	bf 90       	pop	r11
    2e92:	af 90       	pop	r10
    2e94:	9f 90       	pop	r9
    2e96:	8f 90       	pop	r8
    2e98:	7f 90       	pop	r7
    2e9a:	6f 90       	pop	r6
    2e9c:	5f 90       	pop	r5
    2e9e:	4f 90       	pop	r4
    2ea0:	3f 90       	pop	r3
    2ea2:	2f 90       	pop	r2
    2ea4:	1f 90       	pop	r1
    2ea6:	0f 90       	pop	r0
    2ea8:	0c be       	out	0x3c, r0	; 60
    2eaa:	0f 90       	pop	r0
    2eac:	0b be       	out	0x3b, r0	; 59
    2eae:	0f 90       	pop	r0
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2eb4:	08 95       	ret

00002eb6 <prvSetupTimerInterrupt>:

/*
 * Setup timer 0 or 3 or 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <prvSetupTimerInterrupt+0x6>
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <prvSetupTimerInterrupt+0x8>
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62

    /* Using 8bit Timer0 or 16bit Timer1 or Timer3 to generate the tick. */

    // ulCompareMatch 40,000 = 20,000,000 / 500; 20MHz
    // ulCompareMatch 110,592 = 22,118,400 / 200; 22.1184 MHz
    ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	9d e7       	ldi	r25, 0x7D	; 125
    2ec6:	a0 e0       	ldi	r26, 0x00	; 0
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	9a 83       	std	Y+2, r25	; 0x02
    2ece:	ab 83       	std	Y+3, r26	; 0x03
    2ed0:	bc 83       	std	Y+4, r27	; 0x04

    /* We only have 8 or 16 bits so have to scale 64 or 256 to get our required tick rate. */
    //ulCompareMatch = 625 /= portCLOCK_PRESCALER; 20MHz with 64 prescale
    //ulCompareMatch = 108 /= portCLOCK_PRESCALER; 22.1184 MHz with 1024 prescale
    ulCompareMatch /= portCLOCK_PRESCALER;
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed6:	ab 81       	ldd	r26, Y+3	; 0x03
    2ed8:	bc 81       	ldd	r27, Y+4	; 0x04
    2eda:	68 94       	set
    2edc:	15 f8       	bld	r1, 5
    2ede:	b6 95       	lsr	r27
    2ee0:	a7 95       	ror	r26
    2ee2:	97 95       	ror	r25
    2ee4:	87 95       	ror	r24
    2ee6:	16 94       	lsr	r1
    2ee8:	d1 f7       	brne	.-12     	; 0x2ede <prvSetupTimerInterrupt+0x28>
    2eea:	89 83       	std	Y+1, r24	; 0x01
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	ab 83       	std	Y+3, r26	; 0x03
    2ef0:	bc 83       	std	Y+4, r27	; 0x04

    /* Adjust for correct value. */
    ulCompareMatch -= ( unsigned portLONG ) 1;
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef6:	ab 81       	ldd	r26, Y+3	; 0x03
    2ef8:	bc 81       	ldd	r27, Y+4	; 0x04
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	a1 09       	sbc	r26, r1
    2efe:	b1 09       	sbc	r27, r1
    2f00:	89 83       	std	Y+1, r24	; 0x01
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	ab 83       	std	Y+3, r26	; 0x03
    2f06:	bc 83       	std	Y+4, r27	; 0x04

    /* Setup compare match value for compare match A.  Interrupts are disabled
    before this is called so we need not worry here. */
    ucLowByte = ( unsigned portCHAR ) ( ulCompareMatch & ( unsigned portLONG ) 0xff );
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    //  OCR3AL = ucLowByte;

    // the HiByte is only needed, if a 16 Bit counter is being utilized
#ifdef portOCRH

    ulCompareMatch >>= 8;
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f10:	ab 81       	ldd	r26, Y+3	; 0x03
    2f12:	bc 81       	ldd	r27, Y+4	; 0x04
    2f14:	89 2f       	mov	r24, r25
    2f16:	9a 2f       	mov	r25, r26
    2f18:	ab 2f       	mov	r26, r27
    2f1a:	bb 27       	eor	r27, r27
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	9a 83       	std	Y+2, r25	; 0x02
    2f20:	ab 83       	std	Y+3, r26	; 0x03
    2f22:	bc 83       	std	Y+4, r27	; 0x04
    ucHighByte = ( unsigned portCHAR ) ( ulCompareMatch & ( unsigned portLONG ) 0xff );
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	8e 83       	std	Y+6, r24	; 0x06
    portOCRH = ucHighByte;
    2f28:	89 e9       	ldi	r24, 0x99	; 153
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	2e 81       	ldd	r18, Y+6	; 0x06
    2f2e:	fc 01       	movw	r30, r24
    2f30:	20 83       	st	Z, r18

#endif

    portOCRL = ucLowByte;
    2f32:	88 e9       	ldi	r24, 0x98	; 152
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	2d 81       	ldd	r18, Y+5	; 0x05
    2f38:	fc 01       	movw	r30, r24
    2f3a:	20 83       	st	Z, r18
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	portTCCRb = ucLowByte;

#elif defined( portUSE_TIMER3 )
	/* Setup clock source and compare match behaviour. Assuming  640 / 1280 /1281 / 1284p / 2560 / 2561 (with Timer3) */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    2f3c:	8b e0       	ldi	r24, 0x0B	; 11
    2f3e:	8d 83       	std	Y+5, r24	; 0x05
	portTCCRb = ucLowByte;
    2f40:	81 e9       	ldi	r24, 0x91	; 145
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	2d 81       	ldd	r18, Y+5	; 0x05
    2f46:	fc 01       	movw	r30, r24
    2f48:	20 83       	st	Z, r18
#endif

    /* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
    ucLowByte = portTIMSK;
    2f4a:	81 e7       	ldi	r24, 0x71	; 113
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	fc 01       	movw	r30, r24
    2f50:	80 81       	ld	r24, Z
    2f52:	8d 83       	std	Y+5, r24	; 0x05
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2f54:	8d 81       	ldd	r24, Y+5	; 0x05
    2f56:	82 60       	ori	r24, 0x02	; 2
    2f58:	8d 83       	std	Y+5, r24	; 0x05
    portTIMSK = ucLowByte;
    2f5a:	81 e7       	ldi	r24, 0x71	; 113
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	2d 81       	ldd	r18, Y+5	; 0x05
    2f60:	fc 01       	movw	r30, r24
    2f62:	20 83       	st	Z, r18

}
    2f64:	26 96       	adiw	r28, 0x06	; 6
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	08 95       	ret

00002f76 <__vector_32>:

	#elif defined( portUSE_TIMER3 )
		//#warning "Timer3 used for PRE-EMPTIVE scheduler."
		ISR(TIMER3_COMPA_vect, ISR_NAKED)
		{
			vPortYieldFromTick();
    2f76:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <vPortYieldFromTick>
			asm volatile ( "reti" );
    2f7a:	18 95       	reti

00002f7c <vApplicationTickHook>:
int RTOScount = 0;

int sonarTime;

void vApplicationTickHook()
{
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    RTOScount++;
    2f84:	80 91 bd 1a 	lds	r24, 0x1ABD
    2f88:	90 91 be 1a 	lds	r25, 0x1ABE
    2f8c:	01 96       	adiw	r24, 0x01	; 1
    2f8e:	90 93 be 1a 	sts	0x1ABE, r25
    2f92:	80 93 bd 1a 	sts	0x1ABD, r24
}
    2f96:	df 91       	pop	r29
    2f98:	cf 91       	pop	r28
    2f9a:	08 95       	ret

00002f9c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(){
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
	return;
    2fa4:	00 00       	nop
}
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	08 95       	ret

00002fac <main>:
/*-----------------------------------------------------------*/

int main( void )
{
    2fac:	af 92       	push	r10
    2fae:	bf 92       	push	r11
    2fb0:	cf 92       	push	r12
    2fb2:	df 92       	push	r13
    2fb4:	ef 92       	push	r14
    2fb6:	ff 92       	push	r15
    2fb8:	0f 93       	push	r16
    2fba:	cf 93       	push	r28
    2fbc:	df 93       	push	r29
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    
	DDRA = 0xF7;
    2fc2:	81 e2       	ldi	r24, 0x21	; 33
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	27 ef       	ldi	r18, 0xF7	; 247
    2fc8:	fc 01       	movw	r30, r24
    2fca:	20 83       	st	Z, r18
	//PORTA = 0;
	DDRD = 0xFF;
    2fcc:	8a e2       	ldi	r24, 0x2A	; 42
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	2f ef       	ldi	r18, 0xFF	; 255
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	20 83       	st	Z, r18
	DDRE = 0xFF;
    2fd6:	8d e2       	ldi	r24, 0x2D	; 45
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	2f ef       	ldi	r18, 0xFF	; 255
    2fdc:	fc 01       	movw	r30, r24
    2fde:	20 83       	st	Z, r18
	DDRB = 0xFF; 
    2fe0:	84 e2       	ldi	r24, 0x24	; 36
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	2f ef       	ldi	r18, 0xFF	; 255
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	20 83       	st	Z, r18
   DDRF = 0;
    2fea:	80 e3       	ldi	r24, 0x30	; 48
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	fc 01       	movw	r30, r24
    2ff0:	10 82       	st	Z, r1
	DDRK = 0;
    2ff2:	87 e0       	ldi	r24, 0x07	; 7
    2ff4:	91 e0       	ldi	r25, 0x01	; 1
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	10 82       	st	Z, r1
	DDRJ = 0;
    2ffa:	84 e0       	ldi	r24, 0x04	; 4
    2ffc:	91 e0       	ldi	r25, 0x01	; 1
    2ffe:	fc 01       	movw	r30, r24
    3000:	10 82       	st	Z, r1

	PORTD = 0;
    3002:	8b e2       	ldi	r24, 0x2B	; 43
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	fc 01       	movw	r30, r24
    3008:	10 82       	st	Z, r1
	PORTE = 0;
    300a:	8e e2       	ldi	r24, 0x2E	; 46
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	fc 01       	movw	r30, r24
    3010:	10 82       	st	Z, r1
	PORTK = 2;
    3012:	88 e0       	ldi	r24, 0x08	; 8
    3014:	91 e0       	ldi	r25, 0x01	; 1
    3016:	22 e0       	ldi	r18, 0x02	; 2
    3018:	fc 01       	movw	r30, r24
    301a:	20 83       	st	Z, r18

    //- init IO with goodness
	vIO_init();
    301c:	0e 94 55 1a 	call	0x34aa	; 0x34aa <vIO_init>

	//- Create a 
	xTaskCreate( (pdTASK_CODE) vTaskFunction_1, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
    3020:	a1 2c       	mov	r10, r1
    3022:	b1 2c       	mov	r11, r1
    3024:	c1 2c       	mov	r12, r1
    3026:	d1 2c       	mov	r13, r1
    3028:	e1 2c       	mov	r14, r1
    302a:	f1 2c       	mov	r15, r1
    302c:	01 e0       	ldi	r16, 0x01	; 1
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	4d e3       	ldi	r20, 0x3D	; 61
    3034:	54 e0       	ldi	r21, 0x04	; 4
    3036:	67 e0       	ldi	r22, 0x07	; 7
    3038:	72 e0       	ldi	r23, 0x02	; 2
    303a:	8e ec       	ldi	r24, 0xCE	; 206
    303c:	99 e1       	ldi	r25, 0x19	; 25
    303e:	0e 94 b7 00 	call	0x16e	; 0x16e <xTaskGenericCreate>
                NULL, 1, NULL );
	xTaskCreate( (pdTASK_CODE) vTaskPot, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
                NULL, 1, NULL );*/

 
  	xTaskCreate( (pdTASK_CODE) vTaskSteer, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
    3042:	a1 2c       	mov	r10, r1
    3044:	b1 2c       	mov	r11, r1
    3046:	c1 2c       	mov	r12, r1
    3048:	d1 2c       	mov	r13, r1
    304a:	e1 2c       	mov	r14, r1
    304c:	f1 2c       	mov	r15, r1
    304e:	01 e0       	ldi	r16, 0x01	; 1
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4d e3       	ldi	r20, 0x3D	; 61
    3056:	54 e0       	ldi	r21, 0x04	; 4
    3058:	6a e0       	ldi	r22, 0x0A	; 10
    305a:	72 e0       	ldi	r23, 0x02	; 2
    305c:	80 e4       	ldi	r24, 0x40	; 64
    305e:	94 e2       	ldi	r25, 0x24	; 36
    3060:	0e 94 b7 00 	call	0x16e	; 0x16e <xTaskGenericCreate>

   /*xTaskCreate( (pdTASK_CODE) vTaskUSARTRead, (signed char *) "T3", configMINIMAL_STACK_SIZE+1000,
   			/NULL, 1, NULL);*/

	
	xTaskCreate( (pdTASK_CODE) vTaskADC, (signed char *) "T5", configMINIMAL_STACK_SIZE+1000,
    3064:	a1 2c       	mov	r10, r1
    3066:	b1 2c       	mov	r11, r1
    3068:	c1 2c       	mov	r12, r1
    306a:	d1 2c       	mov	r13, r1
    306c:	e1 2c       	mov	r14, r1
    306e:	f1 2c       	mov	r15, r1
    3070:	01 e0       	ldi	r16, 0x01	; 1
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	4d e3       	ldi	r20, 0x3D	; 61
    3078:	54 e0       	ldi	r21, 0x04	; 4
    307a:	6d e0       	ldi	r22, 0x0D	; 13
    307c:	72 e0       	ldi	r23, 0x02	; 2
    307e:	89 e1       	ldi	r24, 0x19	; 25
    3080:	97 e2       	ldi	r25, 0x27	; 39
    3082:	0e 94 b7 00 	call	0x16e	; 0x16e <xTaskGenericCreate>

//   xTaskCreate( (pdTASK_CODE) vTaskUSARTLog, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
//   				NULL, 1, NULL);
    
    //- kick off the scheduler
	vTaskStartScheduler();
    3086:	0e 94 b6 03 	call	0x76c	; 0x76c <vTaskStartScheduler>
    
	return 0;
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	90 e0       	ldi	r25, 0x00	; 0
}
    308e:	df 91       	pop	r29
    3090:	cf 91       	pop	r28
    3092:	0f 91       	pop	r16
    3094:	ff 90       	pop	r15
    3096:	ef 90       	pop	r14
    3098:	df 90       	pop	r13
    309a:	cf 90       	pop	r12
    309c:	bf 90       	pop	r11
    309e:	af 90       	pop	r10
    30a0:	08 95       	ret

000030a2 <printHex>:
/*-----------------------------------------------------------*/

void printHex(int i){
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	62 97       	sbiw	r28, 0x12	; 18
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	cd bf       	out	0x3d, r28	; 61
    30b6:	9a 8b       	std	Y+18, r25	; 0x12
    30b8:	89 8b       	std	Y+17, r24	; 0x11
	char hex[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
    30ba:	20 e1       	ldi	r18, 0x10	; 16
    30bc:	e0 e1       	ldi	r30, 0x10	; 16
    30be:	f2 e0       	ldi	r31, 0x02	; 2
    30c0:	ce 01       	movw	r24, r28
    30c2:	01 96       	adiw	r24, 0x01	; 1
    30c4:	dc 01       	movw	r26, r24
    30c6:	01 90       	ld	r0, Z+
    30c8:	0d 92       	st	X+, r0
    30ca:	2a 95       	dec	r18
    30cc:	e1 f7       	brne	.-8      	; 0x30c6 <printHex+0x24>

	USART_Write(hex[(i&0xF000) >> 12]);
    30ce:	89 89       	ldd	r24, Y+17	; 0x11
    30d0:	9a 89       	ldd	r25, Y+18	; 0x12
    30d2:	89 2f       	mov	r24, r25
    30d4:	99 27       	eor	r25, r25
    30d6:	82 95       	swap	r24
    30d8:	8f 70       	andi	r24, 0x0F	; 15
    30da:	9e 01       	movw	r18, r28
    30dc:	2f 5f       	subi	r18, 0xFF	; 255
    30de:	3f 4f       	sbci	r19, 0xFF	; 255
    30e0:	82 0f       	add	r24, r18
    30e2:	93 1f       	adc	r25, r19
    30e4:	fc 01       	movw	r30, r24
    30e6:	80 81       	ld	r24, Z
    30e8:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
	USART_Write(hex[(i&0xF00) >> 8]);
    30ec:	89 89       	ldd	r24, Y+17	; 0x11
    30ee:	9a 89       	ldd	r25, Y+18	; 0x12
    30f0:	88 27       	eor	r24, r24
    30f2:	9f 70       	andi	r25, 0x0F	; 15
    30f4:	89 2f       	mov	r24, r25
    30f6:	99 0f       	add	r25, r25
    30f8:	99 0b       	sbc	r25, r25
    30fa:	9e 01       	movw	r18, r28
    30fc:	2f 5f       	subi	r18, 0xFF	; 255
    30fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3100:	82 0f       	add	r24, r18
    3102:	93 1f       	adc	r25, r19
    3104:	fc 01       	movw	r30, r24
    3106:	80 81       	ld	r24, Z
    3108:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
	USART_Write(hex[(i&0xF0) >> 4]);
    310c:	89 89       	ldd	r24, Y+17	; 0x11
    310e:	9a 89       	ldd	r25, Y+18	; 0x12
    3110:	80 7f       	andi	r24, 0xF0	; 240
    3112:	99 27       	eor	r25, r25
    3114:	95 95       	asr	r25
    3116:	87 95       	ror	r24
    3118:	95 95       	asr	r25
    311a:	87 95       	ror	r24
    311c:	95 95       	asr	r25
    311e:	87 95       	ror	r24
    3120:	95 95       	asr	r25
    3122:	87 95       	ror	r24
    3124:	9e 01       	movw	r18, r28
    3126:	2f 5f       	subi	r18, 0xFF	; 255
    3128:	3f 4f       	sbci	r19, 0xFF	; 255
    312a:	82 0f       	add	r24, r18
    312c:	93 1f       	adc	r25, r19
    312e:	fc 01       	movw	r30, r24
    3130:	80 81       	ld	r24, Z
    3132:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
	USART_Write(hex[i&0xF]);
    3136:	89 89       	ldd	r24, Y+17	; 0x11
    3138:	9a 89       	ldd	r25, Y+18	; 0x12
    313a:	8f 70       	andi	r24, 0x0F	; 15
    313c:	99 27       	eor	r25, r25
    313e:	9e 01       	movw	r18, r28
    3140:	2f 5f       	subi	r18, 0xFF	; 255
    3142:	3f 4f       	sbci	r19, 0xFF	; 255
    3144:	82 0f       	add	r24, r18
    3146:	93 1f       	adc	r25, r19
    3148:	fc 01       	movw	r30, r24
    314a:	80 81       	ld	r24, Z
    314c:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>

}
    3150:	62 96       	adiw	r28, 0x12	; 18
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	08 95       	ret

00003162 <printNum>:

void printNum(unsigned int i){
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	1f 92       	push	r1
    3168:	1f 92       	push	r1
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	9a 83       	std	Y+2, r25	; 0x02
    3170:	89 83       	std	Y+1, r24	; 0x01
    
	USART_Write(i / 10000 + '0');
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	92 95       	swap	r25
    3178:	82 95       	swap	r24
    317a:	8f 70       	andi	r24, 0x0F	; 15
    317c:	89 27       	eor	r24, r25
    317e:	9f 70       	andi	r25, 0x0F	; 15
    3180:	89 27       	eor	r24, r25
    3182:	9c 01       	movw	r18, r24
    3184:	a7 e4       	ldi	r26, 0x47	; 71
    3186:	b3 e0       	ldi	r27, 0x03	; 3
    3188:	0e 94 6f 28 	call	0x50de	; 0x50de <__umulhisi3>
    318c:	96 95       	lsr	r25
    318e:	87 95       	ror	r24
    3190:	96 95       	lsr	r25
    3192:	87 95       	ror	r24
    3194:	96 95       	lsr	r25
    3196:	87 95       	ror	r24
    3198:	80 5d       	subi	r24, 0xD0	; 208
    319a:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
	USART_Write((i % 10000) / 1000 + '0');
    319e:	49 81       	ldd	r20, Y+1	; 0x01
    31a0:	5a 81       	ldd	r21, Y+2	; 0x02
    31a2:	ca 01       	movw	r24, r20
    31a4:	92 95       	swap	r25
    31a6:	82 95       	swap	r24
    31a8:	8f 70       	andi	r24, 0x0F	; 15
    31aa:	89 27       	eor	r24, r25
    31ac:	9f 70       	andi	r25, 0x0F	; 15
    31ae:	89 27       	eor	r24, r25
    31b0:	9c 01       	movw	r18, r24
    31b2:	a7 e4       	ldi	r26, 0x47	; 71
    31b4:	b3 e0       	ldi	r27, 0x03	; 3
    31b6:	0e 94 6f 28 	call	0x50de	; 0x50de <__umulhisi3>
    31ba:	96 95       	lsr	r25
    31bc:	87 95       	ror	r24
    31be:	96 95       	lsr	r25
    31c0:	87 95       	ror	r24
    31c2:	96 95       	lsr	r25
    31c4:	87 95       	ror	r24
    31c6:	60 e1       	ldi	r22, 0x10	; 16
    31c8:	77 e2       	ldi	r23, 0x27	; 39
    31ca:	86 9f       	mul	r24, r22
    31cc:	90 01       	movw	r18, r0
    31ce:	87 9f       	mul	r24, r23
    31d0:	30 0d       	add	r19, r0
    31d2:	96 9f       	mul	r25, r22
    31d4:	30 0d       	add	r19, r0
    31d6:	11 24       	eor	r1, r1
    31d8:	ca 01       	movw	r24, r20
    31da:	82 1b       	sub	r24, r18
    31dc:	93 0b       	sbc	r25, r19
    31de:	96 95       	lsr	r25
    31e0:	87 95       	ror	r24
    31e2:	96 95       	lsr	r25
    31e4:	87 95       	ror	r24
    31e6:	96 95       	lsr	r25
    31e8:	87 95       	ror	r24
    31ea:	9c 01       	movw	r18, r24
    31ec:	a5 ec       	ldi	r26, 0xC5	; 197
    31ee:	b0 e2       	ldi	r27, 0x20	; 32
    31f0:	0e 94 6f 28 	call	0x50de	; 0x50de <__umulhisi3>
    31f4:	92 95       	swap	r25
    31f6:	82 95       	swap	r24
    31f8:	8f 70       	andi	r24, 0x0F	; 15
    31fa:	89 27       	eor	r24, r25
    31fc:	9f 70       	andi	r25, 0x0F	; 15
    31fe:	89 27       	eor	r24, r25
    3200:	80 5d       	subi	r24, 0xD0	; 208
    3202:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
	USART_Write((i % 1000) / 100 + '0');
    3206:	49 81       	ldd	r20, Y+1	; 0x01
    3208:	5a 81       	ldd	r21, Y+2	; 0x02
    320a:	ca 01       	movw	r24, r20
    320c:	96 95       	lsr	r25
    320e:	87 95       	ror	r24
    3210:	96 95       	lsr	r25
    3212:	87 95       	ror	r24
    3214:	96 95       	lsr	r25
    3216:	87 95       	ror	r24
    3218:	9c 01       	movw	r18, r24
    321a:	a5 ec       	ldi	r26, 0xC5	; 197
    321c:	b0 e2       	ldi	r27, 0x20	; 32
    321e:	0e 94 6f 28 	call	0x50de	; 0x50de <__umulhisi3>
    3222:	92 95       	swap	r25
    3224:	82 95       	swap	r24
    3226:	8f 70       	andi	r24, 0x0F	; 15
    3228:	89 27       	eor	r24, r25
    322a:	9f 70       	andi	r25, 0x0F	; 15
    322c:	89 27       	eor	r24, r25
    322e:	68 ee       	ldi	r22, 0xE8	; 232
    3230:	73 e0       	ldi	r23, 0x03	; 3
    3232:	86 9f       	mul	r24, r22
    3234:	90 01       	movw	r18, r0
    3236:	87 9f       	mul	r24, r23
    3238:	30 0d       	add	r19, r0
    323a:	96 9f       	mul	r25, r22
    323c:	30 0d       	add	r19, r0
    323e:	11 24       	eor	r1, r1
    3240:	ca 01       	movw	r24, r20
    3242:	82 1b       	sub	r24, r18
    3244:	93 0b       	sbc	r25, r19
    3246:	96 95       	lsr	r25
    3248:	87 95       	ror	r24
    324a:	96 95       	lsr	r25
    324c:	87 95       	ror	r24
    324e:	9c 01       	movw	r18, r24
    3250:	ab e7       	ldi	r26, 0x7B	; 123
    3252:	b4 e1       	ldi	r27, 0x14	; 20
    3254:	0e 94 6f 28 	call	0x50de	; 0x50de <__umulhisi3>
    3258:	96 95       	lsr	r25
    325a:	87 95       	ror	r24
    325c:	80 5d       	subi	r24, 0xD0	; 208
    325e:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
	USART_Write((i % 100) / 10 + '0');
    3262:	49 81       	ldd	r20, Y+1	; 0x01
    3264:	5a 81       	ldd	r21, Y+2	; 0x02
    3266:	ca 01       	movw	r24, r20
    3268:	96 95       	lsr	r25
    326a:	87 95       	ror	r24
    326c:	96 95       	lsr	r25
    326e:	87 95       	ror	r24
    3270:	9c 01       	movw	r18, r24
    3272:	ab e7       	ldi	r26, 0x7B	; 123
    3274:	b4 e1       	ldi	r27, 0x14	; 20
    3276:	0e 94 6f 28 	call	0x50de	; 0x50de <__umulhisi3>
    327a:	96 95       	lsr	r25
    327c:	87 95       	ror	r24
    327e:	64 e6       	ldi	r22, 0x64	; 100
    3280:	68 9f       	mul	r22, r24
    3282:	90 01       	movw	r18, r0
    3284:	69 9f       	mul	r22, r25
    3286:	30 0d       	add	r19, r0
    3288:	11 24       	eor	r1, r1
    328a:	ca 01       	movw	r24, r20
    328c:	82 1b       	sub	r24, r18
    328e:	93 0b       	sbc	r25, r19
    3290:	9c 01       	movw	r18, r24
    3292:	ad ec       	ldi	r26, 0xCD	; 205
    3294:	bc ec       	ldi	r27, 0xCC	; 204
    3296:	0e 94 6f 28 	call	0x50de	; 0x50de <__umulhisi3>
    329a:	96 95       	lsr	r25
    329c:	87 95       	ror	r24
    329e:	96 95       	lsr	r25
    32a0:	87 95       	ror	r24
    32a2:	96 95       	lsr	r25
    32a4:	87 95       	ror	r24
    32a6:	80 5d       	subi	r24, 0xD0	; 208
    32a8:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
   USART_Write((i % 10) + '0');
    32ac:	49 81       	ldd	r20, Y+1	; 0x01
    32ae:	5a 81       	ldd	r21, Y+2	; 0x02
    32b0:	9a 01       	movw	r18, r20
    32b2:	ad ec       	ldi	r26, 0xCD	; 205
    32b4:	bc ec       	ldi	r27, 0xCC	; 204
    32b6:	0e 94 6f 28 	call	0x50de	; 0x50de <__umulhisi3>
    32ba:	96 95       	lsr	r25
    32bc:	87 95       	ror	r24
    32be:	96 95       	lsr	r25
    32c0:	87 95       	ror	r24
    32c2:	96 95       	lsr	r25
    32c4:	87 95       	ror	r24
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	9c 01       	movw	r18, r24
    32cc:	22 0f       	add	r18, r18
    32ce:	33 1f       	adc	r19, r19
    32d0:	22 0f       	add	r18, r18
    32d2:	33 1f       	adc	r19, r19
    32d4:	82 0f       	add	r24, r18
    32d6:	93 1f       	adc	r25, r19
    32d8:	9a 01       	movw	r18, r20
    32da:	28 1b       	sub	r18, r24
    32dc:	39 0b       	sbc	r19, r25
    32de:	c9 01       	movw	r24, r18
    32e0:	80 5d       	subi	r24, 0xD0	; 208
    32e2:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
}
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	df 91       	pop	r29
    32ec:	cf 91       	pop	r28
    32ee:	08 95       	ret

000032f0 <potValue>:

int potValue(int sonarMax,int sonarMin,int potMax,int potMin,int x){
    32f0:	0f 93       	push	r16
    32f2:	1f 93       	push	r17
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	2c 97       	sbiw	r28, 0x0c	; 12
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61
    3308:	9c 83       	std	Y+4, r25	; 0x04
    330a:	8b 83       	std	Y+3, r24	; 0x03
    330c:	7e 83       	std	Y+6, r23	; 0x06
    330e:	6d 83       	std	Y+5, r22	; 0x05
    3310:	58 87       	std	Y+8, r21	; 0x08
    3312:	4f 83       	std	Y+7, r20	; 0x07
    3314:	3a 87       	std	Y+10, r19	; 0x0a
    3316:	29 87       	std	Y+9, r18	; 0x09
    3318:	1c 87       	std	Y+12, r17	; 0x0c
    331a:	0b 87       	std	Y+11, r16	; 0x0b
	int value;	
	if(x < sonarMin){
    331c:	2b 85       	ldd	r18, Y+11	; 0x0b
    331e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3320:	8d 81       	ldd	r24, Y+5	; 0x05
    3322:	9e 81       	ldd	r25, Y+6	; 0x06
    3324:	28 17       	cp	r18, r24
    3326:	39 07       	cpc	r19, r25
    3328:	1c f4       	brge	.+6      	; 0x3330 <potValue+0x40>
		return potMin;
    332a:	89 85       	ldd	r24, Y+9	; 0x09
    332c:	9a 85       	ldd	r25, Y+10	; 0x0a
    332e:	2b c0       	rjmp	.+86     	; 0x3386 <potValue+0x96>
	} else if (x > sonarMax){
    3330:	2b 85       	ldd	r18, Y+11	; 0x0b
    3332:	3c 85       	ldd	r19, Y+12	; 0x0c
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	9c 81       	ldd	r25, Y+4	; 0x04
    3338:	82 17       	cp	r24, r18
    333a:	93 07       	cpc	r25, r19
    333c:	1c f4       	brge	.+6      	; 0x3344 <potValue+0x54>
		return potMax;
    333e:	8f 81       	ldd	r24, Y+7	; 0x07
    3340:	98 85       	ldd	r25, Y+8	; 0x08
    3342:	21 c0       	rjmp	.+66     	; 0x3386 <potValue+0x96>
	} else {
		value = x / 4 - 140;
    3344:	8b 85       	ldd	r24, Y+11	; 0x0b
    3346:	9c 85       	ldd	r25, Y+12	; 0x0c
    3348:	99 23       	and	r25, r25
    334a:	0c f4       	brge	.+2      	; 0x334e <potValue+0x5e>
    334c:	03 96       	adiw	r24, 0x03	; 3
    334e:	95 95       	asr	r25
    3350:	87 95       	ror	r24
    3352:	95 95       	asr	r25
    3354:	87 95       	ror	r24
    3356:	8c 58       	subi	r24, 0x8C	; 140
    3358:	91 09       	sbc	r25, r1
    335a:	9a 83       	std	Y+2, r25	; 0x02
    335c:	89 83       	std	Y+1, r24	; 0x01
		return value > potMax?potMax:value < potMin?potMin:value;
    335e:	29 81       	ldd	r18, Y+1	; 0x01
    3360:	3a 81       	ldd	r19, Y+2	; 0x02
    3362:	8f 81       	ldd	r24, Y+7	; 0x07
    3364:	98 85       	ldd	r25, Y+8	; 0x08
    3366:	82 17       	cp	r24, r18
    3368:	93 07       	cpc	r25, r19
    336a:	4c f0       	brlt	.+18     	; 0x337e <potValue+0x8e>
    336c:	29 85       	ldd	r18, Y+9	; 0x09
    336e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	9a 81       	ldd	r25, Y+2	; 0x02
    3374:	82 17       	cp	r24, r18
    3376:	93 07       	cpc	r25, r19
    3378:	2c f4       	brge	.+10     	; 0x3384 <potValue+0x94>
    337a:	c9 01       	movw	r24, r18
    337c:	03 c0       	rjmp	.+6      	; 0x3384 <potValue+0x94>
    337e:	8f 81       	ldd	r24, Y+7	; 0x07
    3380:	98 85       	ldd	r25, Y+8	; 0x08
    3382:	00 c0       	rjmp	.+0      	; 0x3384 <potValue+0x94>
    3384:	00 00       	nop
	}
} 
    3386:	2c 96       	adiw	r28, 0x0c	; 12
    3388:	0f b6       	in	r0, 0x3f	; 63
    338a:	f8 94       	cli
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	cd bf       	out	0x3d, r28	; 61
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	08 95       	ret

0000339c <vTaskFunction_1>:

void vTaskFunction_1()
{	
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	62 97       	sbiw	r28, 0x12	; 18
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
	int sonarResult;
	int movingForward = 1;
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	9a 83       	std	Y+2, r25	; 0x02
    33b6:	89 83       	std	Y+1, r24	; 0x01

	int sonarMax = 0x31C;
    33b8:	8c e1       	ldi	r24, 0x1C	; 28
    33ba:	93 e0       	ldi	r25, 0x03	; 3
    33bc:	9c 83       	std	Y+4, r25	; 0x04
    33be:	8b 83       	std	Y+3, r24	; 0x03
	int sonarMin = 0xE0;
    33c0:	80 ee       	ldi	r24, 0xE0	; 224
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	9e 83       	std	Y+6, r25	; 0x06
    33c6:	8d 83       	std	Y+5, r24	; 0x05
	int potMin = 0x18;
    33c8:	88 e1       	ldi	r24, 0x18	; 24
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	98 87       	std	Y+8, r25	; 0x08
    33ce:	8f 83       	std	Y+7, r24	; 0x07
	int potMax = 0x40;;
    33d0:	80 e4       	ldi	r24, 0x40	; 64
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	9a 87       	std	Y+10, r25	; 0x0a
    33d6:	89 87       	std	Y+9, r24	; 0x09
	int backwardSwitch = 0x100;
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	91 e0       	ldi	r25, 0x01	; 1
    33dc:	9c 87       	std	Y+12, r25	; 0x0c
    33de:	8b 87       	std	Y+11, r24	; 0x0b
	int neutralSwitch = 0x140;
    33e0:	80 e4       	ldi	r24, 0x40	; 64
    33e2:	91 e0       	ldi	r25, 0x01	; 1
    33e4:	9e 87       	std	Y+14, r25	; 0x0e
    33e6:	8d 87       	std	Y+13, r24	; 0x0d
	int forwardSwitch = 0x160;
    33e8:	80 e6       	ldi	r24, 0x60	; 96
    33ea:	91 e0       	ldi	r25, 0x01	; 1
    33ec:	98 8b       	std	Y+16, r25	; 0x10
    33ee:	8f 87       	std	Y+15, r24	; 0x0f
	int minTicks = 450;
    33f0:	82 ec       	ldi	r24, 0xC2	; 194
    33f2:	91 e0       	ldi	r25, 0x01	; 1
    33f4:	9a 8b       	std	Y+18, r25	; 0x12
    33f6:	89 8b       	std	Y+17, r24	; 0x11

	int tickCount;

	PORTA = 0;
    33f8:	82 e2       	ldi	r24, 0x22	; 34
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	fc 01       	movw	r30, r24
    33fe:	10 82       	st	Z, r1

   USART_Init();
    3400:	0e 94 65 1a 	call	0x34ca	; 0x34ca <USART_Init>

	initializeSteeringTimer();
    3404:	0e 94 bd 22 	call	0x457a	; 0x457a <initializeSteeringTimer>

	initializeSPI();
    3408:	0e 94 c0 24 	call	0x4980	; 0x4980 <initializeSPI>
	initSpeedController();
    340c:	0e 94 29 22 	call	0x4452	; 0x4452 <initSpeedController>
   initializeBattery();
    3410:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <initializeBattery>
   initializeSonarSensors();
    3414:	0e 94 69 21 	call	0x42d2	; 0x42d2 <initializeSonarSensors>
	
   for(;;) {
      PORTA ^= 0x80;
    3418:	82 e2       	ldi	r24, 0x22	; 34
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	22 e2       	ldi	r18, 0x22	; 34
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	f9 01       	movw	r30, r18
    3422:	30 81       	ld	r19, Z
    3424:	20 e8       	ldi	r18, 0x80	; 128
    3426:	23 27       	eor	r18, r19
    3428:	fc 01       	movw	r30, r24
    342a:	20 83       	st	Z, r18
      vTaskDelay(300);
    342c:	8c e2       	ldi	r24, 0x2C	; 44
    342e:	91 e0       	ldi	r25, 0x01	; 1
    3430:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
   }
    3434:	f1 cf       	rjmp	.-30     	; 0x3418 <vTaskFunction_1+0x7c>

00003436 <vTaskFunction_2>:
		PORTL = 0x80;
		vTaskDelay(200);
	}
}

void vTaskFunction_2(){
    3436:	cf 93       	push	r28
    3438:	df 93       	push	r29
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
	DDRL = 0xF0;
    343e:	8a e0       	ldi	r24, 0x0A	; 10
    3440:	91 e0       	ldi	r25, 0x01	; 1
    3442:	20 ef       	ldi	r18, 0xF0	; 240
    3444:	fc 01       	movw	r30, r24
    3446:	20 83       	st	Z, r18
	PORTL = 0xC0;
    3448:	8b e0       	ldi	r24, 0x0B	; 11
    344a:	91 e0       	ldi	r25, 0x01	; 1
    344c:	20 ec       	ldi	r18, 0xC0	; 192
    344e:	fc 01       	movw	r30, r24
    3450:	20 83       	st	Z, r18
	for(;;){
		vTaskDelay(300);
    3452:	8c e2       	ldi	r24, 0x2C	; 44
    3454:	91 e0       	ldi	r25, 0x01	; 1
    3456:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
	}	
    345a:	fb cf       	rjmp	.-10     	; 0x3452 <vTaskFunction_2+0x1c>

0000345c <vTaskPot>:
}

void vTaskPot(){
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
   initSpeedController();
    3464:	0e 94 29 22 	call	0x4452	; 0x4452 <initSpeedController>

	for(;;){
		setPot(1);
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	0e 94 34 22 	call	0x4468	; 0x4468 <setPot>
		vTaskDelay(500);
    3470:	84 ef       	ldi	r24, 0xF4	; 244
    3472:	91 e0       	ldi	r25, 0x01	; 1
    3474:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
		setPot(0x40);
    3478:	80 e4       	ldi	r24, 0x40	; 64
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	0e 94 34 22 	call	0x4468	; 0x4468 <setPot>
		vTaskDelay(500);
    3480:	84 ef       	ldi	r24, 0xF4	; 244
    3482:	91 e0       	ldi	r25, 0x01	; 1
    3484:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
		setPot(0x7F);
    3488:	8f e7       	ldi	r24, 0x7F	; 127
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	0e 94 34 22 	call	0x4468	; 0x4468 <setPot>
		vTaskDelay(500);
    3490:	84 ef       	ldi	r24, 0xF4	; 244
    3492:	91 e0       	ldi	r25, 0x01	; 1
    3494:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
		setPot(0x40);
    3498:	80 e4       	ldi	r24, 0x40	; 64
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	0e 94 34 22 	call	0x4468	; 0x4468 <setPot>
		vTaskDelay(500);
    34a0:	84 ef       	ldi	r24, 0xF4	; 244
    34a2:	91 e0       	ldi	r25, 0x01	; 1
    34a4:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
	}
    34a8:	df cf       	rjmp	.-66     	; 0x3468 <vTaskPot+0xc>

000034aa <vIO_init>:
}


void vIO_init(void)
{
    34aa:	cf 93       	push	r28
    34ac:	df 93       	push	r29
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    //- set PortB as output
   DDRB = 0xFF; 
    34b2:	84 e2       	ldi	r24, 0x24	; 36
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	2f ef       	ldi	r18, 0xFF	; 255
    34b8:	fc 01       	movw	r30, r24
    34ba:	20 83       	st	Z, r18
   PORTB = 0; 
    34bc:	85 e2       	ldi	r24, 0x25	; 37
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	fc 01       	movw	r30, r24
    34c2:	10 82       	st	Z, r1
}
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	08 95       	ret

000034ca <USART_Init>:
*  the specified baud rate and clk speed.
*
* Param buadin: The desired Baud rate.
* Param clk_seedin: The clk speed of the ATmega328p
************************************/
void USART_Init() {
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    USART_WriteQueue = xQueueCreate(64,sizeof(uint8_t));
    34d2:	40 e0       	ldi	r20, 0x00	; 0
    34d4:	61 e0       	ldi	r22, 0x01	; 1
    34d6:	80 e4       	ldi	r24, 0x40	; 64
    34d8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <xQueueGenericCreate>
    34dc:	90 93 62 1b 	sts	0x1B62, r25
    34e0:	80 93 61 1b 	sts	0x1B61, r24
    USART_ReadQueue = xQueueCreate(8,sizeof(uint8_t));
    34e4:	40 e0       	ldi	r20, 0x00	; 0
    34e6:	61 e0       	ldi	r22, 0x01	; 1
    34e8:	88 e0       	ldi	r24, 0x08	; 8
    34ea:	0e 94 9b 0a 	call	0x1536	; 0x1536 <xQueueGenericCreate>
    34ee:	90 93 5e 1b 	sts	0x1B5E, r25
    34f2:	80 93 5d 1b 	sts	0x1B5D, r24

    //uint32_t ubrr = clk_speedin/(16UL)/baudin-1;
    //UBRR1H = (unsigned char)(ubrr>>8) ;// & 0x7F;
    //UBRR1L = (unsigned char)ubrr;
    
    UBRR0H = 0; //115200
    34f6:	85 ec       	ldi	r24, 0xC5	; 197
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	fc 01       	movw	r30, r24
    34fc:	10 82       	st	Z, r1
    UBRR0L = 8;
    34fe:	84 ec       	ldi	r24, 0xC4	; 196
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	28 e0       	ldi	r18, 0x08	; 8
    3504:	fc 01       	movw	r30, r24
    3506:	20 83       	st	Z, r18

    /* Enable receiver and transmitter */
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);//|(1<<RXCIE1);
    3508:	81 ec       	ldi	r24, 0xC1	; 193
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	28 e1       	ldi	r18, 0x18	; 24
    350e:	fc 01       	movw	r30, r24
    3510:	20 83       	st	Z, r18
    /* Set frame format: 8data, 1stop bit */
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
    3512:	82 ec       	ldi	r24, 0xC2	; 194
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	26 e0       	ldi	r18, 0x06	; 6
    3518:	fc 01       	movw	r30, r24
    351a:	20 83       	st	Z, r18
	 // clear U2X0 for Synchronous operation
    UCSR0A &= ~(1<<U2X0);
    351c:	80 ec       	ldi	r24, 0xC0	; 192
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	20 ec       	ldi	r18, 0xC0	; 192
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	f9 01       	movw	r30, r18
    3526:	20 81       	ld	r18, Z
    3528:	2d 7f       	andi	r18, 0xFD	; 253
    352a:	fc 01       	movw	r30, r24
    352c:	20 83       	st	Z, r18
    /* Set frame format: 8data, 1stop bit */
    //UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
    // clear U2X0 for Synchronous operation
    //UCSR0A &= ~(1<<U2X0);*/

}
    352e:	df 91       	pop	r29
    3530:	cf 91       	pop	r28
    3532:	08 95       	ret

00003534 <USART_Write>:

/*the send function will put 8bits on the trans line. */
void USART_Write(uint8_t data) {
    3534:	cf 93       	push	r28
    3536:	df 93       	push	r29
    3538:	1f 92       	push	r1
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
    3540:	00 00       	nop
    3542:	80 ec       	ldi	r24, 0xC0	; 192
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	fc 01       	movw	r30, r24
    3548:	80 81       	ld	r24, Z
    354a:	88 2f       	mov	r24, r24
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	80 72       	andi	r24, 0x20	; 32
    3550:	99 27       	eor	r25, r25
    3552:	00 97       	sbiw	r24, 0x00	; 0
    3554:	b1 f3       	breq	.-20     	; 0x3542 <USART_Write+0xe>
		;
		/* Put data into buffer, sends the data */
		UDR0 = data;
    3556:	86 ec       	ldi	r24, 0xC6	; 198
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	29 81       	ldd	r18, Y+1	; 0x01
    355c:	fc 01       	movw	r30, r24
    355e:	20 83       	st	Z, r18
}
    3560:	0f 90       	pop	r0
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	08 95       	ret

00003568 <USART_Read>:


uint8_t USART_Read(void) {
    3568:	cf 93       	push	r28
    356a:	df 93       	push	r29
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62
    /* Wait for data to be received */
    while ( !(UCSR2A & (1<<RXC2)) )
    3570:	00 00       	nop
    3572:	80 ed       	ldi	r24, 0xD0	; 208
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	fc 01       	movw	r30, r24
    3578:	80 81       	ld	r24, Z
    357a:	88 23       	and	r24, r24
    357c:	d4 f7       	brge	.-12     	; 0x3572 <USART_Read+0xa>
        ;
    /* Get and return received data from buffer */
    return UDR2;
    357e:	86 ed       	ldi	r24, 0xD6	; 214
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	fc 01       	movw	r30, r24
    3584:	80 81       	ld	r24, Z
}
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	08 95       	ret

0000358c <USART_AddToQueue>:

  //  USART_AddToQueue(data);
    //xQueueSendToBackFromISR(USART_ReadQueue,&data,NULL);
}*/

void USART_AddToQueue(uint8_t data){
    358c:	cf 93       	push	r28
    358e:	df 93       	push	r29
    3590:	1f 92       	push	r1
    3592:	cd b7       	in	r28, 0x3d	; 61
    3594:	de b7       	in	r29, 0x3e	; 62
    3596:	89 83       	std	Y+1, r24	; 0x01
    
    xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);
    3598:	80 91 61 1b 	lds	r24, 0x1B61
    359c:	90 91 62 1b 	lds	r25, 0x1B62
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	4f ef       	ldi	r20, 0xFF	; 255
    35a4:	5f ef       	ldi	r21, 0xFF	; 255
    35a6:	be 01       	movw	r22, r28
    35a8:	6f 5f       	subi	r22, 0xFF	; 255
    35aa:	7f 4f       	sbci	r23, 0xFF	; 255
    35ac:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <xQueueGenericSend>

}
    35b0:	0f 90       	pop	r0
    35b2:	df 91       	pop	r29
    35b4:	cf 91       	pop	r28
    35b6:	08 95       	ret

000035b8 <USART_TransmitString>:

void USART_TransmitString(char* str){
    35b8:	cf 93       	push	r28
    35ba:	df 93       	push	r29
    35bc:	1f 92       	push	r1
    35be:	1f 92       	push	r1
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62
    35c4:	9a 83       	std	Y+2, r25	; 0x02
    35c6:	89 83       	std	Y+1, r24	; 0x01
    while(*str) {
    35c8:	0b c0       	rjmp	.+22     	; 0x35e0 <USART_TransmitString+0x28>
        USART_AddToQueue(*str);
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
    35cc:	9a 81       	ldd	r25, Y+2	; 0x02
    35ce:	fc 01       	movw	r30, r24
    35d0:	80 81       	ld	r24, Z
    35d2:	0e 94 c6 1a 	call	0x358c	; 0x358c <USART_AddToQueue>
        str++;
    35d6:	89 81       	ldd	r24, Y+1	; 0x01
    35d8:	9a 81       	ldd	r25, Y+2	; 0x02
    35da:	01 96       	adiw	r24, 0x01	; 1
    35dc:	9a 83       	std	Y+2, r25	; 0x02
    35de:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);

}

void USART_TransmitString(char* str){
    while(*str) {
    35e0:	89 81       	ldd	r24, Y+1	; 0x01
    35e2:	9a 81       	ldd	r25, Y+2	; 0x02
    35e4:	fc 01       	movw	r30, r24
    35e6:	80 81       	ld	r24, Z
    35e8:	88 23       	and	r24, r24
    35ea:	79 f7       	brne	.-34     	; 0x35ca <USART_TransmitString+0x12>
        USART_AddToQueue(*str);
        str++;
    }
}
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
    35f0:	df 91       	pop	r29
    35f2:	cf 91       	pop	r28
    35f4:	08 95       	ret

000035f6 <vTaskUSARTWrite>:

void vTaskUSARTWrite(){
    35f6:	cf 93       	push	r28
    35f8:	df 93       	push	r29
    35fa:	1f 92       	push	r1
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    while(1){
    xQueueReceive(USART_WriteQueue,&data,portMAX_DELAY);
    3600:	80 91 61 1b 	lds	r24, 0x1B61
    3604:	90 91 62 1b 	lds	r25, 0x1B62
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	4f ef       	ldi	r20, 0xFF	; 255
    360c:	5f ef       	ldi	r21, 0xFF	; 255
    360e:	be 01       	movw	r22, r28
    3610:	6f 5f       	subi	r22, 0xFF	; 255
    3612:	7f 4f       	sbci	r23, 0xFF	; 255
    3614:	0e 94 4f 0c 	call	0x189e	; 0x189e <xQueueGenericReceive>

        while(!(UCSR1A & (1<<UDRE1)));
    3618:	00 00       	nop
    361a:	88 ec       	ldi	r24, 0xC8	; 200
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	fc 01       	movw	r30, r24
    3620:	80 81       	ld	r24, Z
    3622:	88 2f       	mov	r24, r24
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	80 72       	andi	r24, 0x20	; 32
    3628:	99 27       	eor	r25, r25
    362a:	00 97       	sbiw	r24, 0x00	; 0
    362c:	b1 f3       	breq	.-20     	; 0x361a <vTaskUSARTWrite+0x24>
        UDR1 = data;
    362e:	8e ec       	ldi	r24, 0xCE	; 206
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	29 81       	ldd	r18, Y+1	; 0x01
    3634:	fc 01       	movw	r30, r24
    3636:	20 83       	st	Z, r18

    }
    3638:	e3 cf       	rjmp	.-58     	; 0x3600 <vTaskUSARTWrite+0xa>

0000363a <USART_LogChar>:
}

void USART_LogChar(uint8_t data){
    363a:	cf 93       	push	r28
    363c:	df 93       	push	r29
    363e:	1f 92       	push	r1
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
    3644:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
    3646:	80 91 5f 1b 	lds	r24, 0x1B5F
    364a:	90 91 60 1b 	lds	r25, 0x1B60
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	4f ef       	ldi	r20, 0xFF	; 255
    3652:	5f ef       	ldi	r21, 0xFF	; 255
    3654:	be 01       	movw	r22, r28
    3656:	6f 5f       	subi	r22, 0xFF	; 255
    3658:	7f 4f       	sbci	r23, 0xFF	; 255
    365a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <xQueueGenericSend>
}
    365e:	0f 90       	pop	r0
    3660:	df 91       	pop	r29
    3662:	cf 91       	pop	r28
    3664:	08 95       	ret

00003666 <USART_LogString>:

void USART_LogString(char* str){
    3666:	cf 93       	push	r28
    3668:	df 93       	push	r29
    366a:	1f 92       	push	r1
    366c:	1f 92       	push	r1
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	9a 83       	std	Y+2, r25	; 0x02
    3674:	89 83       	std	Y+1, r24	; 0x01
    while(*str){
    3676:	0b c0       	rjmp	.+22     	; 0x368e <USART_LogString+0x28>
        USART_LogChar(*str);
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	9a 81       	ldd	r25, Y+2	; 0x02
    367c:	fc 01       	movw	r30, r24
    367e:	80 81       	ld	r24, Z
    3680:	0e 94 1d 1b 	call	0x363a	; 0x363a <USART_LogChar>
        str++;
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	9a 81       	ldd	r25, Y+2	; 0x02
    3688:	01 96       	adiw	r24, 0x01	; 1
    368a:	9a 83       	std	Y+2, r25	; 0x02
    368c:	89 83       	std	Y+1, r24	; 0x01
void USART_LogChar(uint8_t data){
    xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
}

void USART_LogString(char* str){
    while(*str){
    368e:	89 81       	ldd	r24, Y+1	; 0x01
    3690:	9a 81       	ldd	r25, Y+2	; 0x02
    3692:	fc 01       	movw	r30, r24
    3694:	80 81       	ld	r24, Z
    3696:	88 23       	and	r24, r24
    3698:	79 f7       	brne	.-34     	; 0x3678 <USART_LogString+0x12>
        USART_LogChar(*str);
        str++;
    }
}
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	df 91       	pop	r29
    36a0:	cf 91       	pop	r28
    36a2:	08 95       	ret

000036a4 <vTaskUSARTLog>:

void vTaskUSARTLog(){
    36a4:	cf 93       	push	r28
    36a6:	df 93       	push	r29
    36a8:	1f 92       	push	r1
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    while(1){
        xQueueReceive(USART_WriteQueueLog,&data,portMAX_DELAY);
    36ae:	80 91 5f 1b 	lds	r24, 0x1B5F
    36b2:	90 91 60 1b 	lds	r25, 0x1B60
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	4f ef       	ldi	r20, 0xFF	; 255
    36ba:	5f ef       	ldi	r21, 0xFF	; 255
    36bc:	be 01       	movw	r22, r28
    36be:	6f 5f       	subi	r22, 0xFF	; 255
    36c0:	7f 4f       	sbci	r23, 0xFF	; 255
    36c2:	0e 94 4f 0c 	call	0x189e	; 0x189e <xQueueGenericReceive>

        while(!(UCSR0A & (1<<UDRE0)));
    36c6:	00 00       	nop
    36c8:	80 ec       	ldi	r24, 0xC0	; 192
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	fc 01       	movw	r30, r24
    36ce:	80 81       	ld	r24, Z
    36d0:	88 2f       	mov	r24, r24
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	80 72       	andi	r24, 0x20	; 32
    36d6:	99 27       	eor	r25, r25
    36d8:	00 97       	sbiw	r24, 0x00	; 0
    36da:	b1 f3       	breq	.-20     	; 0x36c8 <vTaskUSARTLog+0x24>
        UDR0 = data;
    36dc:	86 ec       	ldi	r24, 0xC6	; 198
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	29 81       	ldd	r18, Y+1	; 0x01
    36e2:	fc 01       	movw	r30, r24
    36e4:	20 83       	st	Z, r18

    }
    36e6:	e3 cf       	rjmp	.-58     	; 0x36ae <vTaskUSARTLog+0xa>

000036e8 <USART_GetChar>:

}

uint8_t USART_GetChar(){
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
    36ec:	1f 92       	push	r1
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    if(xQueueReceive(USART_ReadQueue,&data,1) == pdTRUE){
    36f2:	80 91 5d 1b 	lds	r24, 0x1B5D
    36f6:	90 91 5e 1b 	lds	r25, 0x1B5E
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	41 e0       	ldi	r20, 0x01	; 1
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	be 01       	movw	r22, r28
    3702:	6f 5f       	subi	r22, 0xFF	; 255
    3704:	7f 4f       	sbci	r23, 0xFF	; 255
    3706:	0e 94 4f 0c 	call	0x189e	; 0x189e <xQueueGenericReceive>
    370a:	81 30       	cpi	r24, 0x01	; 1
    370c:	11 f4       	brne	.+4      	; 0x3712 <USART_GetChar+0x2a>
        //USART_AddToQueue('~');
        return data;
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	01 c0       	rjmp	.+2      	; 0x3714 <USART_GetChar+0x2c>
    } else {
        return 255;
    3712:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
    3714:	0f 90       	pop	r0
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	08 95       	ret

0000371c <sendACK>:

void sendACK(){
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    3720:	cd b7       	in	r28, 0x3d	; 61
    3722:	de b7       	in	r29, 0x3e	; 62
    USART_Write(ACK_BYTE);
    3724:	80 e8       	ldi	r24, 0x80	; 128
    3726:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
}
    372a:	df 91       	pop	r29
    372c:	cf 91       	pop	r28
    372e:	08 95       	ret

00003730 <sendNACK>:

void sendNACK(){
    3730:	cf 93       	push	r28
    3732:	df 93       	push	r29
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
    USART_Write(NACK_BYTE);
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
}
    373e:	df 91       	pop	r29
    3740:	cf 91       	pop	r28
    3742:	08 95       	ret

00003744 <recievePayload>:

int recievePayload(int size,unsigned char *buffer){
    3744:	cf 93       	push	r28
    3746:	df 93       	push	r29
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	2d 97       	sbiw	r28, 0x0d	; 13
    374e:	0f b6       	in	r0, 0x3f	; 63
    3750:	f8 94       	cli
    3752:	de bf       	out	0x3e, r29	; 62
    3754:	0f be       	out	0x3f, r0	; 63
    3756:	cd bf       	out	0x3d, r28	; 61
    3758:	9b 87       	std	Y+11, r25	; 0x0b
    375a:	8a 87       	std	Y+10, r24	; 0x0a
    375c:	7d 87       	std	Y+13, r23	; 0x0d
    375e:	6c 87       	std	Y+12, r22	; 0x0c

	int bytesRecieved = 0;
    3760:	1a 82       	std	Y+2, r1	; 0x02
    3762:	19 82       	std	Y+1, r1	; 0x01
	int numTries = 0;
    3764:	1c 82       	std	Y+4, r1	; 0x04
    3766:	1b 82       	std	Y+3, r1	; 0x03
	const int maxNumTries = 3;
    3768:	83 e0       	ldi	r24, 0x03	; 3
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	98 87       	std	Y+8, r25	; 0x08
    376e:	8f 83       	std	Y+7, r24	; 0x07
	unsigned char data;
	int timeout;

	while(numTries < maxNumTries){
    3770:	6d c0       	rjmp	.+218    	; 0x384c <recievePayload+0x108>
		while(bytesRecieved < size){
    3772:	2e c0       	rjmp	.+92     	; 0x37d0 <recievePayload+0x8c>
			timeout = 50;
    3774:	82 e3       	ldi	r24, 0x32	; 50
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	9e 83       	std	Y+6, r25	; 0x06
    377a:	8d 83       	std	Y+5, r24	; 0x05
			while ( !(UCSR0A & (1<<RXC0)) ){
    377c:	10 c0       	rjmp	.+32     	; 0x379e <recievePayload+0x5a>
  				timeout--;
    377e:	8d 81       	ldd	r24, Y+5	; 0x05
    3780:	9e 81       	ldd	r25, Y+6	; 0x06
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	9e 83       	std	Y+6, r25	; 0x06
    3786:	8d 83       	std	Y+5, r24	; 0x05
     			if(timeout == 0){
    3788:	8d 81       	ldd	r24, Y+5	; 0x05
    378a:	9e 81       	ldd	r25, Y+6	; 0x06
    378c:	00 97       	sbiw	r24, 0x00	; 0
    378e:	19 f4       	brne	.+6      	; 0x3796 <recievePayload+0x52>
					return -1;
    3790:	8f ef       	ldi	r24, 0xFF	; 255
    3792:	9f ef       	ldi	r25, 0xFF	; 255
    3794:	65 c0       	rjmp	.+202    	; 0x3860 <recievePayload+0x11c>
     			}
     			vTaskDelay(1);
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
	int timeout;

	while(numTries < maxNumTries){
		while(bytesRecieved < size){
			timeout = 50;
			while ( !(UCSR0A & (1<<RXC0)) ){
    379e:	80 ec       	ldi	r24, 0xC0	; 192
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	fc 01       	movw	r30, r24
    37a4:	80 81       	ld	r24, Z
    37a6:	88 23       	and	r24, r24
    37a8:	54 f7       	brge	.-44     	; 0x377e <recievePayload+0x3a>
     			if(timeout == 0){
					return -1;
     			}
     			vTaskDelay(1);
   		}
			data = UDR0;
    37aa:	86 ec       	ldi	r24, 0xC6	; 198
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	fc 01       	movw	r30, r24
    37b0:	80 81       	ld	r24, Z
    37b2:	89 87       	std	Y+9, r24	; 0x09
			buffer[bytesRecieved] = data;
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	9a 81       	ldd	r25, Y+2	; 0x02
    37b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    37ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    37bc:	82 0f       	add	r24, r18
    37be:	93 1f       	adc	r25, r19
    37c0:	29 85       	ldd	r18, Y+9	; 0x09
    37c2:	fc 01       	movw	r30, r24
    37c4:	20 83       	st	Z, r18
			bytesRecieved++;
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ca:	01 96       	adiw	r24, 0x01	; 1
    37cc:	9a 83       	std	Y+2, r25	; 0x02
    37ce:	89 83       	std	Y+1, r24	; 0x01
	const int maxNumTries = 3;
	unsigned char data;
	int timeout;

	while(numTries < maxNumTries){
		while(bytesRecieved < size){
    37d0:	29 81       	ldd	r18, Y+1	; 0x01
    37d2:	3a 81       	ldd	r19, Y+2	; 0x02
    37d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    37d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    37d8:	28 17       	cp	r18, r24
    37da:	39 07       	cpc	r19, r25
    37dc:	5c f2       	brlt	.-106    	; 0x3774 <recievePayload+0x30>
			data = UDR0;
			buffer[bytesRecieved] = data;
			bytesRecieved++;
		}
		
		timeout = 50;
    37de:	82 e3       	ldi	r24, 0x32	; 50
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	9e 83       	std	Y+6, r25	; 0x06
    37e4:	8d 83       	std	Y+5, r24	; 0x05
		while ( !(UCSR0A & (1<<RXC0)) ){
    37e6:	10 c0       	rjmp	.+32     	; 0x3808 <recievePayload+0xc4>
  			timeout--;
    37e8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ea:	9e 81       	ldd	r25, Y+6	; 0x06
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	9e 83       	std	Y+6, r25	; 0x06
    37f0:	8d 83       	std	Y+5, r24	; 0x05
     		if(timeout == 0){
    37f2:	8d 81       	ldd	r24, Y+5	; 0x05
    37f4:	9e 81       	ldd	r25, Y+6	; 0x06
    37f6:	00 97       	sbiw	r24, 0x00	; 0
    37f8:	19 f4       	brne	.+6      	; 0x3800 <recievePayload+0xbc>
				return -1;
    37fa:	8f ef       	ldi	r24, 0xFF	; 255
    37fc:	9f ef       	ldi	r25, 0xFF	; 255
    37fe:	30 c0       	rjmp	.+96     	; 0x3860 <recievePayload+0x11c>
     		}
     		vTaskDelay(1);
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
			buffer[bytesRecieved] = data;
			bytesRecieved++;
		}
		
		timeout = 50;
		while ( !(UCSR0A & (1<<RXC0)) ){
    3808:	80 ec       	ldi	r24, 0xC0	; 192
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	fc 01       	movw	r30, r24
    380e:	80 81       	ld	r24, Z
    3810:	88 23       	and	r24, r24
    3812:	54 f7       	brge	.-44     	; 0x37e8 <recievePayload+0xa4>
     		if(timeout == 0){
				return -1;
     		}
     		vTaskDelay(1);
   	}	
		data = UDR0;
    3814:	86 ec       	ldi	r24, 0xC6	; 198
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	fc 01       	movw	r30, r24
    381a:	80 81       	ld	r24, Z
    381c:	89 87       	std	Y+9, r24	; 0x09
		if(data != calcChecksum(buffer,size)){
    381e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3820:	8c 85       	ldd	r24, Y+12	; 0x0c
    3822:	9d 85       	ldd	r25, Y+13	; 0x0d
    3824:	62 2f       	mov	r22, r18
    3826:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <calcChecksum>
    382a:	98 2f       	mov	r25, r24
    382c:	89 85       	ldd	r24, Y+9	; 0x09
    382e:	98 17       	cp	r25, r24
    3830:	41 f0       	breq	.+16     	; 0x3842 <recievePayload+0xfe>
			sendNACK();
    3832:	0e 94 98 1b 	call	0x3730	; 0x3730 <sendNACK>
			numTries++;
    3836:	8b 81       	ldd	r24, Y+3	; 0x03
    3838:	9c 81       	ldd	r25, Y+4	; 0x04
    383a:	01 96       	adiw	r24, 0x01	; 1
    383c:	9c 83       	std	Y+4, r25	; 0x04
    383e:	8b 83       	std	Y+3, r24	; 0x03
    3840:	05 c0       	rjmp	.+10     	; 0x384c <recievePayload+0x108>
		} else {
			sendACK();
    3842:	0e 94 8e 1b 	call	0x371c	; 0x371c <sendACK>
			return 0;
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	0a c0       	rjmp	.+20     	; 0x3860 <recievePayload+0x11c>
	int numTries = 0;
	const int maxNumTries = 3;
	unsigned char data;
	int timeout;

	while(numTries < maxNumTries){
    384c:	2b 81       	ldd	r18, Y+3	; 0x03
    384e:	3c 81       	ldd	r19, Y+4	; 0x04
    3850:	8f 81       	ldd	r24, Y+7	; 0x07
    3852:	98 85       	ldd	r25, Y+8	; 0x08
    3854:	28 17       	cp	r18, r24
    3856:	39 07       	cpc	r19, r25
    3858:	0c f4       	brge	.+2      	; 0x385c <recievePayload+0x118>
    385a:	8b cf       	rjmp	.-234    	; 0x3772 <recievePayload+0x2e>
		} else {
			sendACK();
			return 0;
		}
	}
	return -1;
    385c:	8f ef       	ldi	r24, 0xFF	; 255
    385e:	9f ef       	ldi	r25, 0xFF	; 255
}
    3860:	2d 96       	adiw	r28, 0x0d	; 13
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	f8 94       	cli
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	cd bf       	out	0x3d, r28	; 61
    386c:	df 91       	pop	r29
    386e:	cf 91       	pop	r28
    3870:	08 95       	ret

00003872 <vTaskUSARTRead>:

void vTaskUSARTRead(){
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62
    387a:	ca 55       	subi	r28, 0x5A	; 90
    387c:	d1 09       	sbc	r29, r1
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	f8 94       	cli
    3882:	de bf       	out	0x3e, r29	; 62
    3884:	0f be       	out	0x3f, r0	; 63
    3886:	cd bf       	out	0x3d, r28	; 61
    uint8_t data;
    uint8_t buffer[16];
    unsigned char size;
    unsigned int timeout;

	DDRB = 0xFF;
    3888:	84 e2       	ldi	r24, 0x24	; 36
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	2f ef       	ldi	r18, 0xFF	; 255
    388e:	fc 01       	movw	r30, r24
    3890:	20 83       	st	Z, r18

    Command command;
    Response response;
    while(1){
        bytesRecieved = 0;
    3892:	19 82       	std	Y+1, r1	; 0x01
        timeout = 30;
    3894:	8e e1       	ldi	r24, 0x1E	; 30
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	9b 83       	std	Y+3, r25	; 0x03
    389a:	8a 83       	std	Y+2, r24	; 0x02
        while(bytesRecieved < 4){
    389c:	2c c0       	rjmp	.+88     	; 0x38f6 <vTaskUSARTRead+0x84>
            
            while ( !(UCSR0A & (1<<RXC0)) ){
    389e:	12 c0       	rjmp	.+36     	; 0x38c4 <vTaskUSARTRead+0x52>
                timeout--;
    38a0:	8a 81       	ldd	r24, Y+2	; 0x02
    38a2:	9b 81       	ldd	r25, Y+3	; 0x03
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	9b 83       	std	Y+3, r25	; 0x03
    38a8:	8a 83       	std	Y+2, r24	; 0x02
                if(timeout == 0){
    38aa:	8a 81       	ldd	r24, Y+2	; 0x02
    38ac:	9b 81       	ldd	r25, Y+3	; 0x03
    38ae:	00 97       	sbiw	r24, 0x00	; 0
    38b0:	29 f4       	brne	.+10     	; 0x38bc <vTaskUSARTRead+0x4a>
                    bytesRecieved = 0;
    38b2:	19 82       	std	Y+1, r1	; 0x01
                    timeout = 30;
    38b4:	8e e1       	ldi	r24, 0x1E	; 30
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	9b 83       	std	Y+3, r25	; 0x03
    38ba:	8a 83       	std	Y+2, r24	; 0x02
                }
                vTaskDelay(1);
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
    while(1){
        bytesRecieved = 0;
        timeout = 30;
        while(bytesRecieved < 4){
            
            while ( !(UCSR0A & (1<<RXC0)) ){
    38c4:	80 ec       	ldi	r24, 0xC0	; 192
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	fc 01       	movw	r30, r24
    38ca:	80 81       	ld	r24, Z
    38cc:	88 23       	and	r24, r24
    38ce:	44 f7       	brge	.-48     	; 0x38a0 <vTaskUSARTRead+0x2e>
                    bytesRecieved = 0;
                    timeout = 30;
                }
                vTaskDelay(1);
            }
            data = UDR0;
    38d0:	86 ec       	ldi	r24, 0xC6	; 198
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	fc 01       	movw	r30, r24
    38d6:	80 81       	ld	r24, Z
    38d8:	8d 83       	std	Y+5, r24	; 0x05
            buffer[bytesRecieved] = data;
    38da:	89 81       	ldd	r24, Y+1	; 0x01
    38dc:	88 2f       	mov	r24, r24
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	9e 01       	movw	r18, r28
    38e2:	2a 5f       	subi	r18, 0xFA	; 250
    38e4:	3f 4f       	sbci	r19, 0xFF	; 255
    38e6:	82 0f       	add	r24, r18
    38e8:	93 1f       	adc	r25, r19
    38ea:	2d 81       	ldd	r18, Y+5	; 0x05
    38ec:	fc 01       	movw	r30, r24
    38ee:	20 83       	st	Z, r18
            bytesRecieved++;        
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	8f 5f       	subi	r24, 0xFF	; 255
    38f4:	89 83       	std	Y+1, r24	; 0x01
    Command command;
    Response response;
    while(1){
        bytesRecieved = 0;
        timeout = 30;
        while(bytesRecieved < 4){
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	84 30       	cpi	r24, 0x04	; 4
    38fa:	88 f2       	brcs	.-94     	; 0x389e <vTaskUSARTRead+0x2c>
            data = UDR0;
            buffer[bytesRecieved] = data;
            bytesRecieved++;        
        }

        if(calcChecksum(buffer,3) != buffer[3]){
    38fc:	ce 01       	movw	r24, r28
    38fe:	06 96       	adiw	r24, 0x06	; 6
    3900:	63 e0       	ldi	r22, 0x03	; 3
    3902:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <calcChecksum>
    3906:	98 2f       	mov	r25, r24
    3908:	89 85       	ldd	r24, Y+9	; 0x09
    390a:	98 17       	cp	r25, r24
    390c:	21 f0       	breq	.+8      	; 0x3916 <vTaskUSARTRead+0xa4>
            sendNACK();
    390e:	0e 94 98 1b 	call	0x3730	; 0x3730 <sendNACK>
            bytesRecieved = 0;
    3912:	19 82       	std	Y+1, r1	; 0x01
    3914:	28 c0       	rjmp	.+80     	; 0x3966 <vTaskUSARTRead+0xf4>
        } else {
            sendACK();
    3916:	0e 94 8e 1b 	call	0x371c	; 0x371c <sendACK>
            bytesRecieved = 0;
    391a:	19 82       	std	Y+1, r1	; 0x01
				command.groupID = buffer[0];
    391c:	8e 81       	ldd	r24, Y+6	; 0x06
    391e:	8e 8b       	std	Y+22, r24	; 0x16
				command.cmd = buffer[1];
    3920:	8f 81       	ldd	r24, Y+7	; 0x07
    3922:	8f 8b       	std	Y+23, r24	; 0x17
				size = buffer[2];
    3924:	88 85       	ldd	r24, Y+8	; 0x08
    3926:	8c 83       	std	Y+4, r24	; 0x04

				if(size > 0){ //No dynamic memory allocations. 16 is the size of the buffer
    3928:	8c 81       	ldd	r24, Y+4	; 0x04
    392a:	88 23       	and	r24, r24
    392c:	81 f0       	breq	.+32     	; 0x394e <vTaskUSARTRead+0xdc>
					if(recievePayload(size,command.payload) == -1){
    392e:	8c 81       	ldd	r24, Y+4	; 0x04
    3930:	88 2f       	mov	r24, r24
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	9e 01       	movw	r18, r28
    3936:	2a 5e       	subi	r18, 0xEA	; 234
    3938:	3f 4f       	sbci	r19, 0xFF	; 255
    393a:	2d 5f       	subi	r18, 0xFD	; 253
    393c:	3f 4f       	sbci	r19, 0xFF	; 255
    393e:	b9 01       	movw	r22, r18
    3940:	0e 94 a2 1b 	call	0x3744	; 0x3744 <recievePayload>
    3944:	8f 3f       	cpi	r24, 0xFF	; 255
    3946:	ff ef       	ldi	r31, 0xFF	; 255
    3948:	9f 07       	cpc	r25, r31
    394a:	09 f4       	brne	.+2      	; 0x394e <vTaskUSARTRead+0xdc>
						continue;	//Restart comms
    394c:	0c c0       	rjmp	.+24     	; 0x3966 <vTaskUSARTRead+0xf4>
					}
				}
				
 
            processCommand(&command,&response);
    394e:	9e 01       	movw	r18, r28
    3950:	27 5c       	subi	r18, 0xC7	; 199
    3952:	3f 4f       	sbci	r19, 0xFF	; 255
    3954:	ce 01       	movw	r24, r28
    3956:	46 96       	adiw	r24, 0x16	; 22
    3958:	b9 01       	movw	r22, r18
    395a:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <processCommand>
            sendResponse(&response);
    395e:	ce 01       	movw	r24, r28
    3960:	c9 96       	adiw	r24, 0x39	; 57
    3962:	0e 94 b4 1c 	call	0x3968	; 0x3968 <sendResponse>

        }

    }
    3966:	95 cf       	rjmp	.-214    	; 0x3892 <vTaskUSARTRead+0x20>

00003968 <sendResponse>:

}

int sendResponse(Response* response){
    3968:	cf 93       	push	r28
    396a:	df 93       	push	r29
    396c:	cd b7       	in	r28, 0x3d	; 61
    396e:	de b7       	in	r29, 0x3e	; 62
    3970:	28 97       	sbiw	r28, 0x08	; 8
    3972:	0f b6       	in	r0, 0x3f	; 63
    3974:	f8 94       	cli
    3976:	de bf       	out	0x3e, r29	; 62
    3978:	0f be       	out	0x3f, r0	; 63
    397a:	cd bf       	out	0x3d, r28	; 61
    397c:	98 87       	std	Y+8, r25	; 0x08
    397e:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t checksumBuffer[2];
    int i;
    int timeout = 50;
    3980:	82 e3       	ldi	r24, 0x32	; 50
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	9c 83       	std	Y+4, r25	; 0x04
    3986:	8b 83       	std	Y+3, r24	; 0x03
    while(1){
        	USART_Write(response->commandBack);
    3988:	8f 81       	ldd	r24, Y+7	; 0x07
    398a:	98 85       	ldd	r25, Y+8	; 0x08
    398c:	fc 01       	movw	r30, r24
    398e:	80 81       	ld	r24, Z
    3990:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
			vTaskDelay(1);
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
        	USART_Write(response->size);
    399c:	8f 81       	ldd	r24, Y+7	; 0x07
    399e:	98 85       	ldd	r25, Y+8	; 0x08
    39a0:	fc 01       	movw	r30, r24
    39a2:	81 81       	ldd	r24, Z+1	; 0x01
    39a4:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
			vTaskDelay(1);
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
        	checksumBuffer[0] = response->commandBack;
    39b0:	8f 81       	ldd	r24, Y+7	; 0x07
    39b2:	98 85       	ldd	r25, Y+8	; 0x08
    39b4:	fc 01       	movw	r30, r24
    39b6:	80 81       	ld	r24, Z
    39b8:	8d 83       	std	Y+5, r24	; 0x05
        	checksumBuffer[1] = response->size;
    39ba:	8f 81       	ldd	r24, Y+7	; 0x07
    39bc:	98 85       	ldd	r25, Y+8	; 0x08
    39be:	fc 01       	movw	r30, r24
    39c0:	81 81       	ldd	r24, Z+1	; 0x01
    39c2:	8e 83       	std	Y+6, r24	; 0x06
        	USART_Write((uint8_t)calcChecksum(checksumBuffer,2));
    39c4:	ce 01       	movw	r24, r28
    39c6:	05 96       	adiw	r24, 0x05	; 5
    39c8:	62 e0       	ldi	r22, 0x02	; 2
    39ca:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <calcChecksum>
    39ce:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
        	switch(waitForAck()){
    39d2:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <waitForAck>
    39d6:	99 27       	eor	r25, r25
    39d8:	87 fd       	sbrc	r24, 7
    39da:	90 95       	com	r25
    39dc:	00 97       	sbiw	r24, 0x00	; 0
    39de:	51 f0       	breq	.+20     	; 0x39f4 <sendResponse+0x8c>
    39e0:	81 30       	cpi	r24, 0x01	; 1
    39e2:	91 05       	cpc	r25, r1
    39e4:	a1 f0       	breq	.+40     	; 0x3a0e <sendResponse+0xa6>
    39e6:	8f 3f       	cpi	r24, 0xFF	; 255
    39e8:	ff ef       	ldi	r31, 0xFF	; 255
    39ea:	9f 07       	cpc	r25, r31
    39ec:	79 f4       	brne	.+30     	; 0x3a0c <sendResponse+0xa4>
        	case 1:
           	goto outOfWhile;
        	case -1:
           	return -1;
    39ee:	8f ef       	ldi	r24, 0xFF	; 255
    39f0:	9f ef       	ldi	r25, 0xFF	; 255
    39f2:	43 c0       	rjmp	.+134    	; 0x3a7a <sendResponse+0x112>
        	case 0:
           	timeout--;
    39f4:	8b 81       	ldd	r24, Y+3	; 0x03
    39f6:	9c 81       	ldd	r25, Y+4	; 0x04
    39f8:	01 97       	sbiw	r24, 0x01	; 1
    39fa:	9c 83       	std	Y+4, r25	; 0x04
    39fc:	8b 83       	std	Y+3, r24	; 0x03
           	if(!timeout){
    39fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3a00:	9c 81       	ldd	r25, Y+4	; 0x04
    3a02:	00 97       	sbiw	r24, 0x00	; 0
    3a04:	19 f4       	brne	.+6      	; 0x3a0c <sendResponse+0xa4>
              	return -1;
    3a06:	8f ef       	ldi	r24, 0xFF	; 255
    3a08:	9f ef       	ldi	r25, 0xFF	; 255
    3a0a:	37 c0       	rjmp	.+110    	; 0x3a7a <sendResponse+0x112>
           	}
        	}
    }
    3a0c:	bd cf       	rjmp	.-134    	; 0x3988 <sendResponse+0x20>
        	checksumBuffer[0] = response->commandBack;
        	checksumBuffer[1] = response->size;
        	USART_Write((uint8_t)calcChecksum(checksumBuffer,2));
        	switch(waitForAck()){
        	case 1:
           	goto outOfWhile;
    3a0e:	00 00       	nop
    }

    outOfWhile:


    for(i=0;i<response->size;i++){
    3a10:	1a 82       	std	Y+2, r1	; 0x02
    3a12:	19 82       	std	Y+1, r1	; 0x01
    3a14:	14 c0       	rjmp	.+40     	; 0x3a3e <sendResponse+0xd6>
        USART_Write(response->payload[i]);
    3a16:	2f 81       	ldd	r18, Y+7	; 0x07
    3a18:	38 85       	ldd	r19, Y+8	; 0x08
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1e:	82 0f       	add	r24, r18
    3a20:	93 1f       	adc	r25, r19
    3a22:	02 96       	adiw	r24, 0x02	; 2
    3a24:	fc 01       	movw	r30, r24
    3a26:	80 81       	ld	r24, Z
    3a28:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
			vTaskDelay(1);
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
    }

    outOfWhile:


    for(i=0;i<response->size;i++){
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	9a 81       	ldd	r25, Y+2	; 0x02
    3a38:	01 96       	adiw	r24, 0x01	; 1
    3a3a:	9a 83       	std	Y+2, r25	; 0x02
    3a3c:	89 83       	std	Y+1, r24	; 0x01
    3a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a40:	98 85       	ldd	r25, Y+8	; 0x08
    3a42:	fc 01       	movw	r30, r24
    3a44:	81 81       	ldd	r24, Z+1	; 0x01
    3a46:	28 2f       	mov	r18, r24
    3a48:	33 27       	eor	r19, r19
    3a4a:	27 fd       	sbrc	r18, 7
    3a4c:	30 95       	com	r19
    3a4e:	89 81       	ldd	r24, Y+1	; 0x01
    3a50:	9a 81       	ldd	r25, Y+2	; 0x02
    3a52:	82 17       	cp	r24, r18
    3a54:	93 07       	cpc	r25, r19
    3a56:	fc f2       	brlt	.-66     	; 0x3a16 <sendResponse+0xae>
        USART_Write(response->payload[i]);
			vTaskDelay(1);
		  //USART_AddToQueue(0x30 | (i + 2));
        //USART_AddToQueue()
    }
    USART_Write(calcChecksum((uint8_t*)response->payload,response->size));
    3a58:	8f 81       	ldd	r24, Y+7	; 0x07
    3a5a:	98 85       	ldd	r25, Y+8	; 0x08
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	81 81       	ldd	r24, Z+1	; 0x01
    3a60:	28 2f       	mov	r18, r24
    3a62:	8f 81       	ldd	r24, Y+7	; 0x07
    3a64:	98 85       	ldd	r25, Y+8	; 0x08
    3a66:	02 96       	adiw	r24, 0x02	; 2
    3a68:	62 2f       	mov	r22, r18
    3a6a:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <calcChecksum>
    3a6e:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
	 

    waitForAck();
    3a72:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <waitForAck>

    return 0;
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	90 e0       	ldi	r25, 0x00	; 0

}
    3a7a:	28 96       	adiw	r28, 0x08	; 8
    3a7c:	0f b6       	in	r0, 0x3f	; 63
    3a7e:	f8 94       	cli
    3a80:	de bf       	out	0x3e, r29	; 62
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	cd bf       	out	0x3d, r28	; 61
    3a86:	df 91       	pop	r29
    3a88:	cf 91       	pop	r28
    3a8a:	08 95       	ret

00003a8c <waitForAck>:

char waitForAck(){
    3a8c:	cf 93       	push	r28
    3a8e:	df 93       	push	r29
    3a90:	1f 92       	push	r1
    3a92:	1f 92       	push	r1
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
    int timeout = 5000;
    3a98:	88 e8       	ldi	r24, 0x88	; 136
    3a9a:	93 e1       	ldi	r25, 0x13	; 19
    3a9c:	9a 83       	std	Y+2, r25	; 0x02
    3a9e:	89 83       	std	Y+1, r24	; 0x01
    while ( !(UCSR2A & (1<<RXC2)) ){
    3aa0:	0b c0       	rjmp	.+22     	; 0x3ab8 <waitForAck+0x2c>
        timeout--;
    3aa2:	89 81       	ldd	r24, Y+1	; 0x01
    3aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa6:	01 97       	sbiw	r24, 0x01	; 1
    3aa8:	9a 83       	std	Y+2, r25	; 0x02
    3aaa:	89 83       	std	Y+1, r24	; 0x01
        if(!timeout){
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab0:	00 97       	sbiw	r24, 0x00	; 0
    3ab2:	11 f4       	brne	.+4      	; 0x3ab8 <waitForAck+0x2c>
            return -1;
    3ab4:	8f ef       	ldi	r24, 0xFF	; 255
    3ab6:	0f c0       	rjmp	.+30     	; 0x3ad6 <waitForAck+0x4a>

}

char waitForAck(){
    int timeout = 5000;
    while ( !(UCSR2A & (1<<RXC2)) ){
    3ab8:	80 ed       	ldi	r24, 0xD0	; 208
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	fc 01       	movw	r30, r24
    3abe:	80 81       	ld	r24, Z
    3ac0:	88 23       	and	r24, r24
    3ac2:	7c f7       	brge	.-34     	; 0x3aa2 <waitForAck+0x16>
        timeout--;
        if(!timeout){
            return -1;
        }
    }
    if(UDR2 == ACK_BYTE){
    3ac4:	86 ed       	ldi	r24, 0xD6	; 214
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	fc 01       	movw	r30, r24
    3aca:	80 81       	ld	r24, Z
    3acc:	80 38       	cpi	r24, 0x80	; 128
    3ace:	11 f4       	brne	.+4      	; 0x3ad4 <waitForAck+0x48>
        return 1;
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	01 c0       	rjmp	.+2      	; 0x3ad6 <waitForAck+0x4a>
    } else {
        return 0;
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    3ad6:	0f 90       	pop	r0
    3ad8:	0f 90       	pop	r0
    3ada:	df 91       	pop	r29
    3adc:	cf 91       	pop	r28
    3ade:	08 95       	ret

00003ae0 <calcChecksum>:

uint8_t calcChecksum(uint8_t* buffer, uint8_t size){
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	00 d0       	rcall	.+0      	; 0x3ae6 <calcChecksum+0x6>
    3ae6:	00 d0       	rcall	.+0      	; 0x3ae8 <calcChecksum+0x8>
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	9d 83       	std	Y+5, r25	; 0x05
    3aee:	8c 83       	std	Y+4, r24	; 0x04
    3af0:	6e 83       	std	Y+6, r22	; 0x06
   uint8_t checksum = 0;
    3af2:	19 82       	std	Y+1, r1	; 0x01
   int i;   
   for(i = 0; i < size; i++) {
    3af4:	1b 82       	std	Y+3, r1	; 0x03
    3af6:	1a 82       	std	Y+2, r1	; 0x02
    3af8:	11 c0       	rjmp	.+34     	; 0x3b1c <calcChecksum+0x3c>
       checksum += *(buffer++);
    3afa:	8c 81       	ldd	r24, Y+4	; 0x04
    3afc:	9d 81       	ldd	r25, Y+5	; 0x05
    3afe:	9c 01       	movw	r18, r24
    3b00:	2f 5f       	subi	r18, 0xFF	; 255
    3b02:	3f 4f       	sbci	r19, 0xFF	; 255
    3b04:	3d 83       	std	Y+5, r19	; 0x05
    3b06:	2c 83       	std	Y+4, r18	; 0x04
    3b08:	fc 01       	movw	r30, r24
    3b0a:	80 81       	ld	r24, Z
    3b0c:	99 81       	ldd	r25, Y+1	; 0x01
    3b0e:	89 0f       	add	r24, r25
    3b10:	89 83       	std	Y+1, r24	; 0x01
}

uint8_t calcChecksum(uint8_t* buffer, uint8_t size){
   uint8_t checksum = 0;
   int i;   
   for(i = 0; i < size; i++) {
    3b12:	8a 81       	ldd	r24, Y+2	; 0x02
    3b14:	9b 81       	ldd	r25, Y+3	; 0x03
    3b16:	01 96       	adiw	r24, 0x01	; 1
    3b18:	9b 83       	std	Y+3, r25	; 0x03
    3b1a:	8a 83       	std	Y+2, r24	; 0x02
    3b1c:	8e 81       	ldd	r24, Y+6	; 0x06
    3b1e:	28 2f       	mov	r18, r24
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	8a 81       	ldd	r24, Y+2	; 0x02
    3b24:	9b 81       	ldd	r25, Y+3	; 0x03
    3b26:	82 17       	cp	r24, r18
    3b28:	93 07       	cpc	r25, r19
    3b2a:	3c f3       	brlt	.-50     	; 0x3afa <calcChecksum+0x1a>
       checksum += *(buffer++);
   }
   return checksum;
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b2e:	26 96       	adiw	r28, 0x06	; 6
    3b30:	0f b6       	in	r0, 0x3f	; 63
    3b32:	f8 94       	cli
    3b34:	de bf       	out	0x3e, r29	; 62
    3b36:	0f be       	out	0x3f, r0	; 63
    3b38:	cd bf       	out	0x3d, r28	; 61
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	08 95       	ret

00003b40 <commandIntegCheck>:
char processBatteryCommand(char commandCode, void* commandData, Response* responseData); 
char processLightCommand(char commandCode, void* commandData, Response* responseData); 


//function to CRC the command structure
char commandIntegCheck(Command *command) {
    3b40:	cf 93       	push	r28
    3b42:	df 93       	push	r29
    3b44:	1f 92       	push	r1
    3b46:	1f 92       	push	r1
    3b48:	cd b7       	in	r28, 0x3d	; 61
    3b4a:	de b7       	in	r29, 0x3e	; 62
    3b4c:	9a 83       	std	Y+2, r25	; 0x02
    3b4e:	89 83       	std	Y+1, r24	; 0x01
   //CRC the command with 0x00 in place of the CRC
   //return success for now
   return 1;
    3b50:	81 e0       	ldi	r24, 0x01	; 1
}
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	08 95       	ret

00003b5c <processUltrasonicCommand>:

char processUltrasonicCommand(char commandCode, void* commandData, Response* responseData) {
    3b5c:	cf 93       	push	r28
    3b5e:	df 93       	push	r29
    3b60:	00 d0       	rcall	.+0      	; 0x3b62 <processUltrasonicCommand+0x6>
    3b62:	1f 92       	push	r1
    3b64:	1f 92       	push	r1
    3b66:	cd b7       	in	r28, 0x3d	; 61
    3b68:	de b7       	in	r29, 0x3e	; 62
    3b6a:	89 83       	std	Y+1, r24	; 0x01
    3b6c:	7b 83       	std	Y+3, r23	; 0x03
    3b6e:	6a 83       	std	Y+2, r22	; 0x02
    3b70:	5d 83       	std	Y+5, r21	; 0x05
    3b72:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	99 27       	eor	r25, r25
    3b78:	87 fd       	sbrc	r24, 7
    3b7a:	90 95       	com	r25
    3b7c:	82 30       	cpi	r24, 0x02	; 2
    3b7e:	91 05       	cpc	r25, r1
    3b80:	61 f0       	breq	.+24     	; 0x3b9a <processUltrasonicCommand+0x3e>
    3b82:	83 30       	cpi	r24, 0x03	; 3
    3b84:	91 05       	cpc	r25, r1
    3b86:	a9 f0       	breq	.+42     	; 0x3bb2 <processUltrasonicCommand+0x56>
    3b88:	81 30       	cpi	r24, 0x01	; 1
    3b8a:	91 05       	cpc	r25, r1
    3b8c:	f1 f4       	brne	.+60     	; 0x3bca <processUltrasonicCommand+0x6e>
      case GET_ALL_SENSORS:
         getAllSensors((int*) responseData->payload);
    3b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b90:	9d 81       	ldd	r25, Y+5	; 0x05
    3b92:	02 96       	adiw	r24, 0x02	; 2
    3b94:	0e 94 70 21 	call	0x42e0	; 0x42e0 <getAllSensors>
         break;
    3b98:	18 c0       	rjmp	.+48     	; 0x3bca <processUltrasonicCommand+0x6e>
      case GET_CERTAIN_SENSORS:
         getCertainSensor(((char*)commandData)[0], (int*) responseData->payload);
    3b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b9c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b9e:	02 96       	adiw	r24, 0x02	; 2
    3ba0:	2a 81       	ldd	r18, Y+2	; 0x02
    3ba2:	3b 81       	ldd	r19, Y+3	; 0x03
    3ba4:	f9 01       	movw	r30, r18
    3ba6:	20 81       	ld	r18, Z
    3ba8:	bc 01       	movw	r22, r24
    3baa:	82 2f       	mov	r24, r18
    3bac:	0e 94 9c 21 	call	0x4338	; 0x4338 <getCertainSensor>
         break;
    3bb0:	0c c0       	rjmp	.+24     	; 0x3bca <processUltrasonicCommand+0x6e>
      case GET_SENSOR_GROUP:
         getSensorGroup(((char*)commandData)[0], (int*) responseData->payload);
    3bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    3bb6:	02 96       	adiw	r24, 0x02	; 2
    3bb8:	2a 81       	ldd	r18, Y+2	; 0x02
    3bba:	3b 81       	ldd	r19, Y+3	; 0x03
    3bbc:	f9 01       	movw	r30, r18
    3bbe:	20 81       	ld	r18, Z
    3bc0:	bc 01       	movw	r22, r24
    3bc2:	82 2f       	mov	r24, r18
    3bc4:	0e 94 c4 21 	call	0x4388	; 0x4388 <getSensorGroup>
         break;
    3bc8:	00 00       	nop
   }
   //return success for now...
   return 1;
    3bca:	81 e0       	ldi	r24, 0x01	; 1
}
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	08 95       	ret

00003bdc <processSpeedCommand>:

char processSpeedCommand(char commandCode, void* commandData, Response* responseData) {
    3bdc:	cf 93       	push	r28
    3bde:	df 93       	push	r29
    3be0:	00 d0       	rcall	.+0      	; 0x3be2 <processSpeedCommand+0x6>
    3be2:	1f 92       	push	r1
    3be4:	1f 92       	push	r1
    3be6:	cd b7       	in	r28, 0x3d	; 61
    3be8:	de b7       	in	r29, 0x3e	; 62
    3bea:	89 83       	std	Y+1, r24	; 0x01
    3bec:	7b 83       	std	Y+3, r23	; 0x03
    3bee:	6a 83       	std	Y+2, r22	; 0x02
    3bf0:	5d 83       	std	Y+5, r21	; 0x05
    3bf2:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3bf4:	89 81       	ldd	r24, Y+1	; 0x01
    3bf6:	99 27       	eor	r25, r25
    3bf8:	87 fd       	sbrc	r24, 7
    3bfa:	90 95       	com	r25
    3bfc:	00 97       	sbiw	r24, 0x00	; 0
    3bfe:	21 f0       	breq	.+8      	; 0x3c08 <processSpeedCommand+0x2c>
    3c00:	81 30       	cpi	r24, 0x01	; 1
    3c02:	91 05       	cpc	r25, r1
    3c04:	31 f0       	breq	.+12     	; 0x3c12 <processSpeedCommand+0x36>
    3c06:	10 c0       	rjmp	.+32     	; 0x3c28 <processSpeedCommand+0x4c>
      case GET_SPEED:
         getSpeed((unsigned char*) responseData);
    3c08:	8c 81       	ldd	r24, Y+4	; 0x04
    3c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c0c:	0e 94 62 22 	call	0x44c4	; 0x44c4 <getSpeed>
         break;
    3c10:	0b c0       	rjmp	.+22     	; 0x3c28 <processSpeedCommand+0x4c>
      case SET_SPEED:
			responseData->size = 0;
    3c12:	8c 81       	ldd	r24, Y+4	; 0x04
    3c14:	9d 81       	ldd	r25, Y+5	; 0x05
    3c16:	fc 01       	movw	r30, r24
    3c18:	11 82       	std	Z+1, r1	; 0x01
         setSpeed(((char*)commandData)[0]);
    3c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c1e:	fc 01       	movw	r30, r24
    3c20:	80 81       	ld	r24, Z
    3c22:	0e 94 74 22 	call	0x44e8	; 0x44e8 <setSpeed>
         break;
    3c26:	00 00       	nop
   }
   //return success for now
   return 1;
    3c28:	81 e0       	ldi	r24, 0x01	; 1
}
    3c2a:	0f 90       	pop	r0
    3c2c:	0f 90       	pop	r0
    3c2e:	0f 90       	pop	r0
    3c30:	0f 90       	pop	r0
    3c32:	0f 90       	pop	r0
    3c34:	df 91       	pop	r29
    3c36:	cf 91       	pop	r28
    3c38:	08 95       	ret

00003c3a <processSteeringCommand>:

char processSteeringCommand(char commandCode, void* commandData, Response* responseData) {
    3c3a:	cf 93       	push	r28
    3c3c:	df 93       	push	r29
    3c3e:	00 d0       	rcall	.+0      	; 0x3c40 <processSteeringCommand+0x6>
    3c40:	1f 92       	push	r1
    3c42:	1f 92       	push	r1
    3c44:	cd b7       	in	r28, 0x3d	; 61
    3c46:	de b7       	in	r29, 0x3e	; 62
    3c48:	89 83       	std	Y+1, r24	; 0x01
    3c4a:	7b 83       	std	Y+3, r23	; 0x03
    3c4c:	6a 83       	std	Y+2, r22	; 0x02
    3c4e:	5d 83       	std	Y+5, r21	; 0x05
    3c50:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3c52:	89 81       	ldd	r24, Y+1	; 0x01
    3c54:	99 27       	eor	r25, r25
    3c56:	87 fd       	sbrc	r24, 7
    3c58:	90 95       	com	r25
    3c5a:	82 30       	cpi	r24, 0x02	; 2
    3c5c:	91 05       	cpc	r25, r1
    3c5e:	e1 f0       	breq	.+56     	; 0x3c98 <processSteeringCommand+0x5e>
    3c60:	83 30       	cpi	r24, 0x03	; 3
    3c62:	91 05       	cpc	r25, r1
    3c64:	34 f4       	brge	.+12     	; 0x3c72 <processSteeringCommand+0x38>
    3c66:	00 97       	sbiw	r24, 0x00	; 0
    3c68:	59 f0       	breq	.+22     	; 0x3c80 <processSteeringCommand+0x46>
    3c6a:	81 30       	cpi	r24, 0x01	; 1
    3c6c:	91 05       	cpc	r25, r1
    3c6e:	79 f0       	breq	.+30     	; 0x3c8e <processSteeringCommand+0x54>
    3c70:	38 c0       	rjmp	.+112    	; 0x3ce2 <processSteeringCommand+0xa8>
    3c72:	83 30       	cpi	r24, 0x03	; 3
    3c74:	91 05       	cpc	r25, r1
    3c76:	a9 f0       	breq	.+42     	; 0x3ca2 <processSteeringCommand+0x68>
    3c78:	84 30       	cpi	r24, 0x04	; 4
    3c7a:	91 05       	cpc	r25, r1
    3c7c:	29 f1       	breq	.+74     	; 0x3cc8 <processSteeringCommand+0x8e>
    3c7e:	31 c0       	rjmp	.+98     	; 0x3ce2 <processSteeringCommand+0xa8>
      case SET_ANGLE:
         setAngle(*((char*)commandData));
    3c80:	8a 81       	ldd	r24, Y+2	; 0x02
    3c82:	9b 81       	ldd	r25, Y+3	; 0x03
    3c84:	fc 01       	movw	r30, r24
    3c86:	80 81       	ld	r24, Z
    3c88:	0e 94 b9 23 	call	0x4772	; 0x4772 <setAngle>
         break;
    3c8c:	2a c0       	rjmp	.+84     	; 0x3ce2 <processSteeringCommand+0xa8>
      case GET_ANGLE:
         getAngle((char*) responseData);
    3c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c90:	9d 81       	ldd	r25, Y+5	; 0x05
    3c92:	0e 94 cc 23 	call	0x4798	; 0x4798 <getAngle>
         break;
    3c96:	25 c0       	rjmp	.+74     	; 0x3ce2 <processSteeringCommand+0xa8>
      case GET_DESIRED_ANGLE:
         getDesiredAngle((char*) responseData);
    3c98:	8c 81       	ldd	r24, Y+4	; 0x04
    3c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c9c:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <getDesiredAngle>
         break;
    3ca0:	20 c0       	rjmp	.+64     	; 0x3ce2 <processSteeringCommand+0xa8>
      case CHANGE_PID:
         changePID(((char*)commandData)[0], ((char*)commandData)[1], ((char*)commandData)[2]);
    3ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca6:	02 96       	adiw	r24, 0x02	; 2
    3ca8:	fc 01       	movw	r30, r24
    3caa:	30 81       	ld	r19, Z
    3cac:	8a 81       	ldd	r24, Y+2	; 0x02
    3cae:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb0:	01 96       	adiw	r24, 0x01	; 1
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	20 81       	ld	r18, Z
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    3cba:	fc 01       	movw	r30, r24
    3cbc:	80 81       	ld	r24, Z
    3cbe:	43 2f       	mov	r20, r19
    3cc0:	62 2f       	mov	r22, r18
    3cc2:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <changePID>
         break;
    3cc6:	0d c0       	rjmp	.+26     	; 0x3ce2 <processSteeringCommand+0xa8>
      case SET_LIMITS:
         setLimits(((char*)commandData)[0], ((char*)commandData)[1]);
    3cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cca:	9b 81       	ldd	r25, Y+3	; 0x03
    3ccc:	01 96       	adiw	r24, 0x01	; 1
    3cce:	fc 01       	movw	r30, r24
    3cd0:	20 81       	ld	r18, Z
    3cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd4:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	80 81       	ld	r24, Z
    3cda:	62 2f       	mov	r22, r18
    3cdc:	0e 94 09 24 	call	0x4812	; 0x4812 <setLimits>
         break;
    3ce0:	00 00       	nop
   }
   //return success for now
   return 1;
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
}
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	df 91       	pop	r29
    3cf0:	cf 91       	pop	r28
    3cf2:	08 95       	ret

00003cf4 <processFNRCommand>:

char processFNRCommand(char commandCode, void* commandData, Response* responseData) {
    3cf4:	cf 93       	push	r28
    3cf6:	df 93       	push	r29
    3cf8:	00 d0       	rcall	.+0      	; 0x3cfa <processFNRCommand+0x6>
    3cfa:	1f 92       	push	r1
    3cfc:	1f 92       	push	r1
    3cfe:	cd b7       	in	r28, 0x3d	; 61
    3d00:	de b7       	in	r29, 0x3e	; 62
    3d02:	89 83       	std	Y+1, r24	; 0x01
    3d04:	7b 83       	std	Y+3, r23	; 0x03
    3d06:	6a 83       	std	Y+2, r22	; 0x02
    3d08:	5d 83       	std	Y+5, r21	; 0x05
    3d0a:	4c 83       	std	Y+4, r20	; 0x04
	responseData->size = 0;	
    3d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d10:	fc 01       	movw	r30, r24
    3d12:	11 82       	std	Z+1, r1	; 0x01
   switch(commandCode) {
    3d14:	89 81       	ldd	r24, Y+1	; 0x01
    3d16:	99 27       	eor	r25, r25
    3d18:	87 fd       	sbrc	r24, 7
    3d1a:	90 95       	com	r25
    3d1c:	00 97       	sbiw	r24, 0x00	; 0
    3d1e:	21 f0       	breq	.+8      	; 0x3d28 <processFNRCommand+0x34>
    3d20:	81 30       	cpi	r24, 0x01	; 1
    3d22:	91 05       	cpc	r25, r1
    3d24:	41 f0       	breq	.+16     	; 0x3d36 <processFNRCommand+0x42>
    3d26:	0c c0       	rjmp	.+24     	; 0x3d40 <processFNRCommand+0x4c>
      case SET_FNR:
         setFNR(*((char*)commandData));
    3d28:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	80 81       	ld	r24, Z
    3d30:	0e 94 cd 20 	call	0x419a	; 0x419a <setFNR>
         break;
    3d34:	05 c0       	rjmp	.+10     	; 0x3d40 <processFNRCommand+0x4c>
      case GET_FNR:
         getFNR((char*) responseData);
    3d36:	8c 81       	ldd	r24, Y+4	; 0x04
    3d38:	9d 81       	ldd	r25, Y+5	; 0x05
    3d3a:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <getFNR>
         break;
    3d3e:	00 00       	nop
   }
   return 1;
    3d40:	81 e0       	ldi	r24, 0x01	; 1
}
    3d42:	0f 90       	pop	r0
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
    3d4a:	0f 90       	pop	r0
    3d4c:	df 91       	pop	r29
    3d4e:	cf 91       	pop	r28
    3d50:	08 95       	ret

00003d52 <processBrakeCommand>:

char processBrakeCommand(char commandCode, void* commandData, Response* responseData) {
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    3d56:	00 d0       	rcall	.+0      	; 0x3d58 <processBrakeCommand+0x6>
    3d58:	1f 92       	push	r1
    3d5a:	1f 92       	push	r1
    3d5c:	cd b7       	in	r28, 0x3d	; 61
    3d5e:	de b7       	in	r29, 0x3e	; 62
    3d60:	89 83       	std	Y+1, r24	; 0x01
    3d62:	7b 83       	std	Y+3, r23	; 0x03
    3d64:	6a 83       	std	Y+2, r22	; 0x02
    3d66:	5d 83       	std	Y+5, r21	; 0x05
    3d68:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3d6a:	89 81       	ldd	r24, Y+1	; 0x01
    3d6c:	99 27       	eor	r25, r25
    3d6e:	87 fd       	sbrc	r24, 7
    3d70:	90 95       	com	r25
    3d72:	00 97       	sbiw	r24, 0x00	; 0
    3d74:	21 f0       	breq	.+8      	; 0x3d7e <processBrakeCommand+0x2c>
    3d76:	81 30       	cpi	r24, 0x01	; 1
    3d78:	91 05       	cpc	r25, r1
    3d7a:	41 f0       	breq	.+16     	; 0x3d8c <processBrakeCommand+0x3a>
    3d7c:	0c c0       	rjmp	.+24     	; 0x3d96 <processBrakeCommand+0x44>
      case SET_BRAKE:
	 setBrake(*((char*)commandData));
    3d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d80:	9b 81       	ldd	r25, Y+3	; 0x03
    3d82:	fc 01       	movw	r30, r24
    3d84:	80 81       	ld	r24, Z
    3d86:	0e 94 14 20 	call	0x4028	; 0x4028 <setBrake>
	 break;
    3d8a:	05 c0       	rjmp	.+10     	; 0x3d96 <processBrakeCommand+0x44>
      case GET_BRAKE:
	 getBrake((char*) responseData);
    3d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d90:	0e 94 1f 20 	call	0x403e	; 0x403e <getBrake>
	 break; 
    3d94:	00 00       	nop
   }
   return 1;
    3d96:	81 e0       	ldi	r24, 0x01	; 1
}
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	df 91       	pop	r29
    3da4:	cf 91       	pop	r28
    3da6:	08 95       	ret

00003da8 <processBatteryCommand>:

char processBatteryCommand(char commandCode, void* commandData, Response* responseData) {
    3da8:	cf 93       	push	r28
    3daa:	df 93       	push	r29
    3dac:	00 d0       	rcall	.+0      	; 0x3dae <processBatteryCommand+0x6>
    3dae:	1f 92       	push	r1
    3db0:	1f 92       	push	r1
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
    3db6:	89 83       	std	Y+1, r24	; 0x01
    3db8:	7b 83       	std	Y+3, r23	; 0x03
    3dba:	6a 83       	std	Y+2, r22	; 0x02
    3dbc:	5d 83       	std	Y+5, r21	; 0x05
    3dbe:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	99 27       	eor	r25, r25
    3dc4:	87 fd       	sbrc	r24, 7
    3dc6:	90 95       	com	r25
    3dc8:	00 97       	sbiw	r24, 0x00	; 0
    3dca:	21 f0       	breq	.+8      	; 0x3dd4 <processBatteryCommand+0x2c>
    3dcc:	81 30       	cpi	r24, 0x01	; 1
    3dce:	91 05       	cpc	r25, r1
    3dd0:	31 f0       	breq	.+12     	; 0x3dde <processBatteryCommand+0x36>
    3dd2:	0a c0       	rjmp	.+20     	; 0x3de8 <processBatteryCommand+0x40>
      case GET_BATTERY_VOLTAGE:
         getBatteryVoltage((char*) responseData);
    3dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    3dd8:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <getBatteryVoltage>
         break;
    3ddc:	05 c0       	rjmp	.+10     	; 0x3de8 <processBatteryCommand+0x40>
      case GET_STEERING_VOLTAGE:
         getSteeringVoltage((char*) responseData);
    3dde:	8c 81       	ldd	r24, Y+4	; 0x04
    3de0:	9d 81       	ldd	r25, Y+5	; 0x05
    3de2:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <getSteeringVoltage>
         break;
    3de6:	00 00       	nop
   }
   return 1;
    3de8:	81 e0       	ldi	r24, 0x01	; 1
}
    3dea:	0f 90       	pop	r0
    3dec:	0f 90       	pop	r0
    3dee:	0f 90       	pop	r0
    3df0:	0f 90       	pop	r0
    3df2:	0f 90       	pop	r0
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	08 95       	ret

00003dfa <processLightCommand>:

char processLightCommand(char commandCode, void* commandData, Response* responseData) {
    3dfa:	cf 93       	push	r28
    3dfc:	df 93       	push	r29
    3dfe:	00 d0       	rcall	.+0      	; 0x3e00 <processLightCommand+0x6>
    3e00:	1f 92       	push	r1
    3e02:	1f 92       	push	r1
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	89 83       	std	Y+1, r24	; 0x01
    3e0a:	7b 83       	std	Y+3, r23	; 0x03
    3e0c:	6a 83       	std	Y+2, r22	; 0x02
    3e0e:	5d 83       	std	Y+5, r21	; 0x05
    3e10:	4c 83       	std	Y+4, r20	; 0x04
	responseData->size = 0;
    3e12:	8c 81       	ldd	r24, Y+4	; 0x04
    3e14:	9d 81       	ldd	r25, Y+5	; 0x05
    3e16:	fc 01       	movw	r30, r24
    3e18:	11 82       	std	Z+1, r1	; 0x01
   switch(commandCode) {
    3e1a:	89 81       	ldd	r24, Y+1	; 0x01
    3e1c:	99 27       	eor	r25, r25
    3e1e:	87 fd       	sbrc	r24, 7
    3e20:	90 95       	com	r25
    3e22:	00 97       	sbiw	r24, 0x00	; 0
    3e24:	39 f4       	brne	.+14     	; 0x3e34 <processLightCommand+0x3a>
   case SET_LIGHT:
	 	setLight(*((char*)commandData));
    3e26:	8a 81       	ldd	r24, Y+2	; 0x02
    3e28:	9b 81       	ldd	r25, Y+3	; 0x03
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	80 81       	ld	r24, Z
    3e2e:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <setLight>
      break;
    3e32:	00 00       	nop
   }
   return 1;
    3e34:	81 e0       	ldi	r24, 0x01	; 1
}
    3e36:	0f 90       	pop	r0
    3e38:	0f 90       	pop	r0
    3e3a:	0f 90       	pop	r0
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	df 91       	pop	r29
    3e42:	cf 91       	pop	r28
    3e44:	08 95       	ret

00003e46 <processCommand>:



//Function that will take in a command (as char array) and process it into a
//correct response to be stored into response
char processCommand(Command *command, Response *response) {
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	00 d0       	rcall	.+0      	; 0x3e4c <processCommand+0x6>
    3e4c:	1f 92       	push	r1
    3e4e:	cd b7       	in	r28, 0x3d	; 61
    3e50:	de b7       	in	r29, 0x3e	; 62
    3e52:	9a 83       	std	Y+2, r25	; 0x02
    3e54:	89 83       	std	Y+1, r24	; 0x01
    3e56:	7c 83       	std	Y+4, r23	; 0x04
    3e58:	6b 83       	std	Y+3, r22	; 0x03
	response->commandBack = command->cmd;
    3e5a:	89 81       	ldd	r24, Y+1	; 0x01
    3e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e5e:	dc 01       	movw	r26, r24
    3e60:	11 96       	adiw	r26, 0x01	; 1
    3e62:	2c 91       	ld	r18, X
    3e64:	8b 81       	ldd	r24, Y+3	; 0x03
    3e66:	9c 81       	ldd	r25, Y+4	; 0x04
    3e68:	fc 01       	movw	r30, r24
    3e6a:	20 83       	st	Z, r18
   switch(command->groupID) {
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
    3e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e70:	dc 01       	movw	r26, r24
    3e72:	8c 91       	ld	r24, X
    3e74:	99 27       	eor	r25, r25
    3e76:	87 fd       	sbrc	r24, 7
    3e78:	90 95       	com	r25
    3e7a:	aa 27       	eor	r26, r26
    3e7c:	97 fd       	sbrc	r25, 7
    3e7e:	a0 95       	com	r26
    3e80:	ba 2f       	mov	r27, r26
    3e82:	41 e0       	ldi	r20, 0x01	; 1
    3e84:	50 e0       	ldi	r21, 0x00	; 0
    3e86:	27 e0       	ldi	r18, 0x07	; 7
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	84 1b       	sub	r24, r20
    3e8c:	95 0b       	sbc	r25, r21
    3e8e:	28 17       	cp	r18, r24
    3e90:	39 07       	cpc	r19, r25
    3e92:	08 f4       	brcc	.+2      	; 0x3e96 <processCommand+0x50>
    3e94:	66 c0       	rjmp	.+204    	; 0x3f62 <processCommand+0x11c>
    3e96:	8e 58       	subi	r24, 0x8E	; 142
    3e98:	9f 4f       	sbci	r25, 0xFF	; 255
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	0c 94 7e 28 	jmp	0x50fc	; 0x50fc <__tablejump2__>
      case ULTRASONIC_GROUP:
         processUltrasonicCommand(command->cmd, command->payload, response);
    3ea0:	89 81       	ldd	r24, Y+1	; 0x01
    3ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea4:	03 96       	adiw	r24, 0x03	; 3
    3ea6:	29 81       	ldd	r18, Y+1	; 0x01
    3ea8:	3a 81       	ldd	r19, Y+2	; 0x02
    3eaa:	d9 01       	movw	r26, r18
    3eac:	11 96       	adiw	r26, 0x01	; 1
    3eae:	ec 91       	ld	r30, X
    3eb0:	2b 81       	ldd	r18, Y+3	; 0x03
    3eb2:	3c 81       	ldd	r19, Y+4	; 0x04
    3eb4:	a9 01       	movw	r20, r18
    3eb6:	bc 01       	movw	r22, r24
    3eb8:	8e 2f       	mov	r24, r30
    3eba:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <processUltrasonicCommand>
         break;
    3ebe:	51 c0       	rjmp	.+162    	; 0x3f62 <processCommand+0x11c>
      case SPEED_GROUP:
			processSpeedCommand(command->cmd,command->payload,response);
    3ec0:	89 81       	ldd	r24, Y+1	; 0x01
    3ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec4:	03 96       	adiw	r24, 0x03	; 3
    3ec6:	29 81       	ldd	r18, Y+1	; 0x01
    3ec8:	3a 81       	ldd	r19, Y+2	; 0x02
    3eca:	d9 01       	movw	r26, r18
    3ecc:	11 96       	adiw	r26, 0x01	; 1
    3ece:	ec 91       	ld	r30, X
    3ed0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ed2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ed4:	a9 01       	movw	r20, r18
    3ed6:	bc 01       	movw	r22, r24
    3ed8:	8e 2f       	mov	r24, r30
    3eda:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <processSpeedCommand>
         break;
    3ede:	41 c0       	rjmp	.+130    	; 0x3f62 <processCommand+0x11c>
      case STEERING_GROUP:
         processSteeringCommand(command->cmd,command->payload,response);
    3ee0:	89 81       	ldd	r24, Y+1	; 0x01
    3ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee4:	03 96       	adiw	r24, 0x03	; 3
    3ee6:	29 81       	ldd	r18, Y+1	; 0x01
    3ee8:	3a 81       	ldd	r19, Y+2	; 0x02
    3eea:	d9 01       	movw	r26, r18
    3eec:	11 96       	adiw	r26, 0x01	; 1
    3eee:	ec 91       	ld	r30, X
    3ef0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ef2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ef4:	a9 01       	movw	r20, r18
    3ef6:	bc 01       	movw	r22, r24
    3ef8:	8e 2f       	mov	r24, r30
    3efa:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <processSteeringCommand>
         break;
    3efe:	31 c0       	rjmp	.+98     	; 0x3f62 <processCommand+0x11c>
      case FNR_GROUP:
			processFNRCommand(command->cmd,command->payload,response);
    3f00:	89 81       	ldd	r24, Y+1	; 0x01
    3f02:	9a 81       	ldd	r25, Y+2	; 0x02
    3f04:	03 96       	adiw	r24, 0x03	; 3
    3f06:	29 81       	ldd	r18, Y+1	; 0x01
    3f08:	3a 81       	ldd	r19, Y+2	; 0x02
    3f0a:	d9 01       	movw	r26, r18
    3f0c:	11 96       	adiw	r26, 0x01	; 1
    3f0e:	ec 91       	ld	r30, X
    3f10:	2b 81       	ldd	r18, Y+3	; 0x03
    3f12:	3c 81       	ldd	r19, Y+4	; 0x04
    3f14:	a9 01       	movw	r20, r18
    3f16:	bc 01       	movw	r22, r24
    3f18:	8e 2f       	mov	r24, r30
    3f1a:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <processFNRCommand>
         break;
    3f1e:	21 c0       	rjmp	.+66     	; 0x3f62 <processCommand+0x11c>
      case BRAKES_GROUP:
         /*do brakes things*/
         break;
      case BATTERY_GROUP:
         processBatteryCommand(command->cmd,command->payload,response);
    3f20:	89 81       	ldd	r24, Y+1	; 0x01
    3f22:	9a 81       	ldd	r25, Y+2	; 0x02
    3f24:	03 96       	adiw	r24, 0x03	; 3
    3f26:	29 81       	ldd	r18, Y+1	; 0x01
    3f28:	3a 81       	ldd	r19, Y+2	; 0x02
    3f2a:	d9 01       	movw	r26, r18
    3f2c:	11 96       	adiw	r26, 0x01	; 1
    3f2e:	ec 91       	ld	r30, X
    3f30:	2b 81       	ldd	r18, Y+3	; 0x03
    3f32:	3c 81       	ldd	r19, Y+4	; 0x04
    3f34:	a9 01       	movw	r20, r18
    3f36:	bc 01       	movw	r22, r24
    3f38:	8e 2f       	mov	r24, r30
    3f3a:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <processBatteryCommand>
         break;
    3f3e:	11 c0       	rjmp	.+34     	; 0x3f62 <processCommand+0x11c>
      case LIGHTS_GROUP:
	      processLightCommand(command->cmd,command->payload,response);
    3f40:	89 81       	ldd	r24, Y+1	; 0x01
    3f42:	9a 81       	ldd	r25, Y+2	; 0x02
    3f44:	03 96       	adiw	r24, 0x03	; 3
    3f46:	29 81       	ldd	r18, Y+1	; 0x01
    3f48:	3a 81       	ldd	r19, Y+2	; 0x02
    3f4a:	d9 01       	movw	r26, r18
    3f4c:	11 96       	adiw	r26, 0x01	; 1
    3f4e:	ec 91       	ld	r30, X
    3f50:	2b 81       	ldd	r18, Y+3	; 0x03
    3f52:	3c 81       	ldd	r19, Y+4	; 0x04
    3f54:	a9 01       	movw	r20, r18
    3f56:	bc 01       	movw	r22, r24
    3f58:	8e 2f       	mov	r24, r30
    3f5a:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <processLightCommand>
         break;
    3f5e:	01 c0       	rjmp	.+2      	; 0x3f62 <processCommand+0x11c>
      case ERROR_GROUP:
         /*do error things*/
         break;
    3f60:	00 00       	nop
   }
   //return a dummy success for now
   return 1;
    3f62:	81 e0       	ldi	r24, 0x01	; 1
}
    3f64:	0f 90       	pop	r0
    3f66:	0f 90       	pop	r0
    3f68:	0f 90       	pop	r0
    3f6a:	0f 90       	pop	r0
    3f6c:	df 91       	pop	r29
    3f6e:	cf 91       	pop	r28
    3f70:	08 95       	ret

00003f72 <getBatteryVoltage12Handler>:
void getBatteryVoltage12Handler(int a, void *dummy);


static int batteryVoltage12;

void getBatteryVoltage12Handler(int a, void *dummy){
    3f72:	cf 93       	push	r28
    3f74:	df 93       	push	r29
    3f76:	00 d0       	rcall	.+0      	; 0x3f78 <getBatteryVoltage12Handler+0x6>
    3f78:	1f 92       	push	r1
    3f7a:	cd b7       	in	r28, 0x3d	; 61
    3f7c:	de b7       	in	r29, 0x3e	; 62
    3f7e:	9a 83       	std	Y+2, r25	; 0x02
    3f80:	89 83       	std	Y+1, r24	; 0x01
    3f82:	7c 83       	std	Y+4, r23	; 0x04
    3f84:	6b 83       	std	Y+3, r22	; 0x03
   batteryVoltage12 = (a - 218) / 4 - 3;
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8a:	8a 5d       	subi	r24, 0xDA	; 218
    3f8c:	91 09       	sbc	r25, r1
    3f8e:	99 23       	and	r25, r25
    3f90:	0c f4       	brge	.+2      	; 0x3f94 <getBatteryVoltage12Handler+0x22>
    3f92:	03 96       	adiw	r24, 0x03	; 3
    3f94:	95 95       	asr	r25
    3f96:	87 95       	ror	r24
    3f98:	95 95       	asr	r25
    3f9a:	87 95       	ror	r24
    3f9c:	03 97       	sbiw	r24, 0x03	; 3
    3f9e:	90 93 c0 1a 	sts	0x1AC0, r25
    3fa2:	80 93 bf 1a 	sts	0x1ABF, r24
}
    3fa6:	0f 90       	pop	r0
    3fa8:	0f 90       	pop	r0
    3faa:	0f 90       	pop	r0
    3fac:	0f 90       	pop	r0
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	08 95       	ret

00003fb4 <initializeBattery>:

void initializeBattery(){
    3fb4:	cf 93       	push	r28
    3fb6:	df 93       	push	r29
    3fb8:	cd b7       	in	r28, 0x3d	; 61
    3fba:	de b7       	in	r29, 0x3e	; 62
   addADCDevice(3, ADC_OPT_PRECISION_HIGH, getBatteryVoltage12Handler, NULL);
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	49 eb       	ldi	r20, 0xB9	; 185
    3fc2:	5f e1       	ldi	r21, 0x1F	; 31
    3fc4:	60 e0       	ldi	r22, 0x00	; 0
    3fc6:	70 e0       	ldi	r23, 0x00	; 0
    3fc8:	83 e0       	ldi	r24, 0x03	; 3
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <addADCDevice>
}
    3fd0:	df 91       	pop	r29
    3fd2:	cf 91       	pop	r28
    3fd4:	08 95       	ret

00003fd6 <getBatteryVoltage>:

//Gets voltage from 36V source
char getBatteryVoltage(char *sensorResponse) {
    3fd6:	cf 93       	push	r28
    3fd8:	df 93       	push	r29
    3fda:	1f 92       	push	r1
    3fdc:	1f 92       	push	r1
    3fde:	cd b7       	in	r28, 0x3d	; 61
    3fe0:	de b7       	in	r29, 0x3e	; 62
    3fe2:	9a 83       	std	Y+2, r25	; 0x02
    3fe4:	89 83       	std	Y+1, r24	; 0x01
   *sensorResponse = 0;
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fea:	fc 01       	movw	r30, r24
    3fec:	10 82       	st	Z, r1
   return 1;
    3fee:	81 e0       	ldi	r24, 0x01	; 1
}
    3ff0:	0f 90       	pop	r0
    3ff2:	0f 90       	pop	r0
    3ff4:	df 91       	pop	r29
    3ff6:	cf 91       	pop	r28
    3ff8:	08 95       	ret

00003ffa <getSteeringVoltage>:

//Gets voltage from 12V source 
char getSteeringVoltage(char *sensorResponse) {
    3ffa:	cf 93       	push	r28
    3ffc:	df 93       	push	r29
    3ffe:	1f 92       	push	r1
    4000:	1f 92       	push	r1
    4002:	cd b7       	in	r28, 0x3d	; 61
    4004:	de b7       	in	r29, 0x3e	; 62
    4006:	9a 83       	std	Y+2, r25	; 0x02
    4008:	89 83       	std	Y+1, r24	; 0x01
   *sensorResponse = batteryVoltage12;
    400a:	80 91 bf 1a 	lds	r24, 0x1ABF
    400e:	90 91 c0 1a 	lds	r25, 0x1AC0
    4012:	28 2f       	mov	r18, r24
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	9a 81       	ldd	r25, Y+2	; 0x02
    4018:	fc 01       	movw	r30, r24
    401a:	20 83       	st	Z, r18
   return 1;
    401c:	81 e0       	ldi	r24, 0x01	; 1
}
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	08 95       	ret

00004028 <setBrake>:
//BRAKE TARGET IN THE SPECS

#include "Brake.h"

//set brake target
char setBrake(char gainTarget) {
    4028:	cf 93       	push	r28
    402a:	df 93       	push	r29
    402c:	1f 92       	push	r1
    402e:	cd b7       	in	r28, 0x3d	; 61
    4030:	de b7       	in	r29, 0x3e	; 62
    4032:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing happens
   //return success
   return 1;
    4034:	81 e0       	ldi	r24, 0x01	; 1
}
    4036:	0f 90       	pop	r0
    4038:	df 91       	pop	r29
    403a:	cf 91       	pop	r28
    403c:	08 95       	ret

0000403e <getBrake>:

//get what is assumed to be the current brake value?
char getBrake(char* sensorResponse) {
    403e:	cf 93       	push	r28
    4040:	df 93       	push	r29
    4042:	1f 92       	push	r1
    4044:	1f 92       	push	r1
    4046:	cd b7       	in	r28, 0x3d	; 61
    4048:	de b7       	in	r29, 0x3e	; 62
    404a:	9a 83       	std	Y+2, r25	; 0x02
    404c:	89 83       	std	Y+1, r24	; 0x01
   //fake brake reading
   *sensorResponse = 0;
    404e:	89 81       	ldd	r24, Y+1	; 0x01
    4050:	9a 81       	ldd	r25, Y+2	; 0x02
    4052:	fc 01       	movw	r30, r24
    4054:	10 82       	st	Z, r1
   //return success
   return 1;
    4056:	81 e0       	ldi	r24, 0x01	; 1
}
    4058:	0f 90       	pop	r0
    405a:	0f 90       	pop	r0
    405c:	df 91       	pop	r29
    405e:	cf 91       	pop	r28
    4060:	08 95       	ret

00004062 <FNRForward>:
void FNRForward(void);
void FNRReverse(void);
void FNRNeutral(void);


void FNRForward(){
    4062:	cf 93       	push	r28
    4064:	df 93       	push	r29
    4066:	cd b7       	in	r28, 0x3d	; 61
    4068:	de b7       	in	r29, 0x3e	; 62
	clearABit(1);
    406a:	82 e2       	ldi	r24, 0x22	; 34
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	22 e2       	ldi	r18, 0x22	; 34
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	f9 01       	movw	r30, r18
    4074:	20 81       	ld	r18, Z
    4076:	2d 7f       	andi	r18, 0xFD	; 253
    4078:	fc 01       	movw	r30, r24
    407a:	20 83       	st	Z, r18
	while((PORTA & 0x2) != 0){
    407c:	0d c0       	rjmp	.+26     	; 0x4098 <FNRForward+0x36>
		clearABit(1);
    407e:	82 e2       	ldi	r24, 0x22	; 34
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	22 e2       	ldi	r18, 0x22	; 34
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	f9 01       	movw	r30, r18
    4088:	20 81       	ld	r18, Z
    408a:	2d 7f       	andi	r18, 0xFD	; 253
    408c:	fc 01       	movw	r30, r24
    408e:	20 83       	st	Z, r18
		vTaskDelay(1);
    4090:	81 e0       	ldi	r24, 0x01	; 1
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
void FNRNeutral(void);


void FNRForward(){
	clearABit(1);
	while((PORTA & 0x2) != 0){
    4098:	82 e2       	ldi	r24, 0x22	; 34
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	fc 01       	movw	r30, r24
    409e:	80 81       	ld	r24, Z
    40a0:	88 2f       	mov	r24, r24
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	82 70       	andi	r24, 0x02	; 2
    40a6:	99 27       	eor	r25, r25
    40a8:	00 97       	sbiw	r24, 0x00	; 0
    40aa:	49 f7       	brne	.-46     	; 0x407e <FNRForward+0x1c>
		clearABit(1);
		vTaskDelay(1);
	}
	setABit(0);
    40ac:	82 e2       	ldi	r24, 0x22	; 34
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	22 e2       	ldi	r18, 0x22	; 34
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	f9 01       	movw	r30, r18
    40b6:	20 81       	ld	r18, Z
    40b8:	21 60       	ori	r18, 0x01	; 1
    40ba:	fc 01       	movw	r30, r24
    40bc:	20 83       	st	Z, r18

	//PORTL &= ~0x30;
}
    40be:	df 91       	pop	r29
    40c0:	cf 91       	pop	r28
    40c2:	08 95       	ret

000040c4 <FNRReverse>:

void FNRReverse(){
    40c4:	cf 93       	push	r28
    40c6:	df 93       	push	r29
    40c8:	cd b7       	in	r28, 0x3d	; 61
    40ca:	de b7       	in	r29, 0x3e	; 62
	clearABit(0);
    40cc:	82 e2       	ldi	r24, 0x22	; 34
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	22 e2       	ldi	r18, 0x22	; 34
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	f9 01       	movw	r30, r18
    40d6:	20 81       	ld	r18, Z
    40d8:	2e 7f       	andi	r18, 0xFE	; 254
    40da:	fc 01       	movw	r30, r24
    40dc:	20 83       	st	Z, r18
	while((PORTA & 0x1) != 0){
    40de:	0d c0       	rjmp	.+26     	; 0x40fa <FNRReverse+0x36>
		clearABit(0);
    40e0:	82 e2       	ldi	r24, 0x22	; 34
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	22 e2       	ldi	r18, 0x22	; 34
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	f9 01       	movw	r30, r18
    40ea:	20 81       	ld	r18, Z
    40ec:	2e 7f       	andi	r18, 0xFE	; 254
    40ee:	fc 01       	movw	r30, r24
    40f0:	20 83       	st	Z, r18
		vTaskDelay(1);
    40f2:	81 e0       	ldi	r24, 0x01	; 1
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
	//PORTL &= ~0x30;
}

void FNRReverse(){
	clearABit(0);
	while((PORTA & 0x1) != 0){
    40fa:	82 e2       	ldi	r24, 0x22	; 34
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	fc 01       	movw	r30, r24
    4100:	80 81       	ld	r24, Z
    4102:	88 2f       	mov	r24, r24
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	81 70       	andi	r24, 0x01	; 1
    4108:	99 27       	eor	r25, r25
    410a:	00 97       	sbiw	r24, 0x00	; 0
    410c:	49 f7       	brne	.-46     	; 0x40e0 <FNRReverse+0x1c>
		clearABit(0);
		vTaskDelay(1);
	}
	setABit(1);
    410e:	82 e2       	ldi	r24, 0x22	; 34
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	22 e2       	ldi	r18, 0x22	; 34
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	f9 01       	movw	r30, r18
    4118:	20 81       	ld	r18, Z
    411a:	22 60       	ori	r18, 0x02	; 2
    411c:	fc 01       	movw	r30, r24
    411e:	20 83       	st	Z, r18

	//PORTL |= 0x30;
}
    4120:	df 91       	pop	r29
    4122:	cf 91       	pop	r28
    4124:	08 95       	ret

00004126 <FNRNeutral>:

void FNRNeutral(){
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	cd b7       	in	r28, 0x3d	; 61
    412c:	de b7       	in	r29, 0x3e	; 62
	clearABit(0);
    412e:	82 e2       	ldi	r24, 0x22	; 34
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	22 e2       	ldi	r18, 0x22	; 34
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	f9 01       	movw	r30, r18
    4138:	20 81       	ld	r18, Z
    413a:	2e 7f       	andi	r18, 0xFE	; 254
    413c:	fc 01       	movw	r30, r24
    413e:	20 83       	st	Z, r18
	clearABit(1);
    4140:	82 e2       	ldi	r24, 0x22	; 34
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	22 e2       	ldi	r18, 0x22	; 34
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	f9 01       	movw	r30, r18
    414a:	20 81       	ld	r18, Z
    414c:	2d 7f       	andi	r18, 0xFD	; 253
    414e:	fc 01       	movw	r30, r24
    4150:	20 83       	st	Z, r18
	while((PORTA & 0x3) != 0){
    4152:	16 c0       	rjmp	.+44     	; 0x4180 <FNRNeutral+0x5a>
		clearABit(0);
    4154:	82 e2       	ldi	r24, 0x22	; 34
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	22 e2       	ldi	r18, 0x22	; 34
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	f9 01       	movw	r30, r18
    415e:	20 81       	ld	r18, Z
    4160:	2e 7f       	andi	r18, 0xFE	; 254
    4162:	fc 01       	movw	r30, r24
    4164:	20 83       	st	Z, r18
		clearABit(1);
    4166:	82 e2       	ldi	r24, 0x22	; 34
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	22 e2       	ldi	r18, 0x22	; 34
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	f9 01       	movw	r30, r18
    4170:	20 81       	ld	r18, Z
    4172:	2d 7f       	andi	r18, 0xFD	; 253
    4174:	fc 01       	movw	r30, r24
    4176:	20 83       	st	Z, r18
		vTaskDelay(1);
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
}

void FNRNeutral(){
	clearABit(0);
	clearABit(1);
	while((PORTA & 0x3) != 0){
    4180:	82 e2       	ldi	r24, 0x22	; 34
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	fc 01       	movw	r30, r24
    4186:	80 81       	ld	r24, Z
    4188:	88 2f       	mov	r24, r24
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	83 70       	andi	r24, 0x03	; 3
    418e:	99 27       	eor	r25, r25
    4190:	00 97       	sbiw	r24, 0x00	; 0
    4192:	01 f7       	brne	.-64     	; 0x4154 <FNRNeutral+0x2e>
		clearABit(0);
		clearABit(1);
		vTaskDelay(1);
	}
	//PORTL &= ~0x30;
}
    4194:	df 91       	pop	r29
    4196:	cf 91       	pop	r28
    4198:	08 95       	ret

0000419a <setFNR>:

//set the FNR controller, inputs are either -1, 0, or 1.
char setFNR(char FNR) {
    419a:	cf 93       	push	r28
    419c:	df 93       	push	r29
    419e:	1f 92       	push	r1
    41a0:	cd b7       	in	r28, 0x3d	; 61
    41a2:	de b7       	in	r29, 0x3e	; 62
    41a4:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing happens
   //return success
	if(FNR == 0){
    41a6:	89 81       	ldd	r24, Y+1	; 0x01
    41a8:	88 23       	and	r24, r24
    41aa:	19 f4       	brne	.+6      	; 0x41b2 <setFNR+0x18>
		FNRNeutral();
    41ac:	0e 94 93 20 	call	0x4126	; 0x4126 <FNRNeutral>
    41b0:	0b c0       	rjmp	.+22     	; 0x41c8 <setFNR+0x2e>
	} else if(FNR == 1){
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
    41b4:	81 30       	cpi	r24, 0x01	; 1
    41b6:	19 f4       	brne	.+6      	; 0x41be <setFNR+0x24>
		FNRForward();
    41b8:	0e 94 31 20 	call	0x4062	; 0x4062 <FNRForward>
    41bc:	05 c0       	rjmp	.+10     	; 0x41c8 <setFNR+0x2e>
	} else if(FNR == -1){
    41be:	89 81       	ldd	r24, Y+1	; 0x01
    41c0:	8f 3f       	cpi	r24, 0xFF	; 255
    41c2:	11 f4       	brne	.+4      	; 0x41c8 <setFNR+0x2e>
		FNRReverse();
    41c4:	0e 94 62 20 	call	0x40c4	; 0x40c4 <FNRReverse>
	}

   return 1;
    41c8:	81 e0       	ldi	r24, 0x01	; 1
}
    41ca:	0f 90       	pop	r0
    41cc:	df 91       	pop	r29
    41ce:	cf 91       	pop	r28
    41d0:	08 95       	ret

000041d2 <getFNR>:

//get the current FNR state. Function follows same format for consistancy
char getFNR(char *sensorResponse) {
    41d2:	cf 93       	push	r28
    41d4:	df 93       	push	r29
    41d6:	1f 92       	push	r1
    41d8:	1f 92       	push	r1
    41da:	cd b7       	in	r28, 0x3d	; 61
    41dc:	de b7       	in	r29, 0x3e	; 62
    41de:	9a 83       	std	Y+2, r25	; 0x02
    41e0:	89 83       	std	Y+1, r24	; 0x01
   //fake reading
   *sensorResponse = 0;
    41e2:	89 81       	ldd	r24, Y+1	; 0x01
    41e4:	9a 81       	ldd	r25, Y+2	; 0x02
    41e6:	fc 01       	movw	r30, r24
    41e8:	10 82       	st	Z, r1
   //return success
   return 1;
    41ea:	81 e0       	ldi	r24, 0x01	; 1
}
    41ec:	0f 90       	pop	r0
    41ee:	0f 90       	pop	r0
    41f0:	df 91       	pop	r29
    41f2:	cf 91       	pop	r28
    41f4:	08 95       	ret

000041f6 <setLight>:
//light controller functions
#include <avr/io.h>
#include "Lights.h"

//turn lights on and off
char setLight(char lightTarget) {
    41f6:	cf 93       	push	r28
    41f8:	df 93       	push	r29
    41fa:	1f 92       	push	r1
    41fc:	cd b7       	in	r28, 0x3d	; 61
    41fe:	de b7       	in	r29, 0x3e	; 62
    4200:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing happens
	//PORTB ^= 0x80;
	if(lightTarget == 1){
    4202:	89 81       	ldd	r24, Y+1	; 0x01
    4204:	81 30       	cpi	r24, 0x01	; 1
    4206:	51 f4       	brne	.+20     	; 0x421c <setLight+0x26>
		PORTB |= 0x80;
    4208:	85 e2       	ldi	r24, 0x25	; 37
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	25 e2       	ldi	r18, 0x25	; 37
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	f9 01       	movw	r30, r18
    4212:	20 81       	ld	r18, Z
    4214:	20 68       	ori	r18, 0x80	; 128
    4216:	fc 01       	movw	r30, r24
    4218:	20 83       	st	Z, r18
    421a:	09 c0       	rjmp	.+18     	; 0x422e <setLight+0x38>
	} else {
		PORTB &= ~0x80;
    421c:	85 e2       	ldi	r24, 0x25	; 37
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	25 e2       	ldi	r18, 0x25	; 37
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	f9 01       	movw	r30, r18
    4226:	20 81       	ld	r18, Z
    4228:	2f 77       	andi	r18, 0x7F	; 127
    422a:	fc 01       	movw	r30, r24
    422c:	20 83       	st	Z, r18
	}
   return 1;
    422e:	81 e0       	ldi	r24, 0x01	; 1
}
    4230:	0f 90       	pop	r0
    4232:	df 91       	pop	r29
    4234:	cf 91       	pop	r28
    4236:	08 95       	ret

00004238 <setSonarData>:

void sonarADCHandler(int result, void *sonarNum);

static int sonarData[6];

void setSonarData(int i,int data){
    4238:	cf 93       	push	r28
    423a:	df 93       	push	r29
    423c:	00 d0       	rcall	.+0      	; 0x423e <setSonarData+0x6>
    423e:	1f 92       	push	r1
    4240:	cd b7       	in	r28, 0x3d	; 61
    4242:	de b7       	in	r29, 0x3e	; 62
    4244:	9a 83       	std	Y+2, r25	; 0x02
    4246:	89 83       	std	Y+1, r24	; 0x01
    4248:	7c 83       	std	Y+4, r23	; 0x04
    424a:	6b 83       	std	Y+3, r22	; 0x03
   //xSemaphoreTake(sonarDataMutex[i],portMAX_DELAY);
   sonarData[i] = data;
    424c:	89 81       	ldd	r24, Y+1	; 0x01
    424e:	9a 81       	ldd	r25, Y+2	; 0x02
    4250:	88 0f       	add	r24, r24
    4252:	99 1f       	adc	r25, r25
    4254:	8f 53       	subi	r24, 0x3F	; 63
    4256:	95 4e       	sbci	r25, 0xE5	; 229
    4258:	2b 81       	ldd	r18, Y+3	; 0x03
    425a:	3c 81       	ldd	r19, Y+4	; 0x04
    425c:	fc 01       	movw	r30, r24
    425e:	31 83       	std	Z+1, r19	; 0x01
    4260:	20 83       	st	Z, r18
   //xSemaphoreGive(sonarDataMutex[i]);
}
    4262:	0f 90       	pop	r0
    4264:	0f 90       	pop	r0
    4266:	0f 90       	pop	r0
    4268:	0f 90       	pop	r0
    426a:	df 91       	pop	r29
    426c:	cf 91       	pop	r28
    426e:	08 95       	ret

00004270 <getSonarData>:

int getSonarData(int i){
    4270:	cf 93       	push	r28
    4272:	df 93       	push	r29
    4274:	1f 92       	push	r1
    4276:	1f 92       	push	r1
    4278:	cd b7       	in	r28, 0x3d	; 61
    427a:	de b7       	in	r29, 0x3e	; 62
    427c:	9a 83       	std	Y+2, r25	; 0x02
    427e:	89 83       	std	Y+1, r24	; 0x01
   //xSemaphoreTake(sonarDataMutex[i],portMAX_DELAY);
   return sonarData[i];
    4280:	89 81       	ldd	r24, Y+1	; 0x01
    4282:	9a 81       	ldd	r25, Y+2	; 0x02
    4284:	88 0f       	add	r24, r24
    4286:	99 1f       	adc	r25, r25
    4288:	8f 53       	subi	r24, 0x3F	; 63
    428a:	95 4e       	sbci	r25, 0xE5	; 229
    428c:	fc 01       	movw	r30, r24
    428e:	80 81       	ld	r24, Z
    4290:	91 81       	ldd	r25, Z+1	; 0x01
   //xSemaphoreGive(sonarDataMutex[i]);
}
    4292:	0f 90       	pop	r0
    4294:	0f 90       	pop	r0
    4296:	df 91       	pop	r29
    4298:	cf 91       	pop	r28
    429a:	08 95       	ret

0000429c <sonarADCHandler>:

void sonarADCHandler(int result,void *sonarNum){
    429c:	cf 93       	push	r28
    429e:	df 93       	push	r29
    42a0:	00 d0       	rcall	.+0      	; 0x42a2 <sonarADCHandler+0x6>
    42a2:	1f 92       	push	r1
    42a4:	cd b7       	in	r28, 0x3d	; 61
    42a6:	de b7       	in	r29, 0x3e	; 62
    42a8:	9a 83       	std	Y+2, r25	; 0x02
    42aa:	89 83       	std	Y+1, r24	; 0x01
    42ac:	7c 83       	std	Y+4, r23	; 0x04
    42ae:	6b 83       	std	Y+3, r22	; 0x03

	setSonarData(*((int *)sonarNum),result);
    42b0:	8b 81       	ldd	r24, Y+3	; 0x03
    42b2:	9c 81       	ldd	r25, Y+4	; 0x04
    42b4:	fc 01       	movw	r30, r24
    42b6:	80 81       	ld	r24, Z
    42b8:	91 81       	ldd	r25, Z+1	; 0x01
    42ba:	29 81       	ldd	r18, Y+1	; 0x01
    42bc:	3a 81       	ldd	r19, Y+2	; 0x02
    42be:	b9 01       	movw	r22, r18
    42c0:	0e 94 1c 21 	call	0x4238	; 0x4238 <setSonarData>

}
    42c4:	0f 90       	pop	r0
    42c6:	0f 90       	pop	r0
    42c8:	0f 90       	pop	r0
    42ca:	0f 90       	pop	r0
    42cc:	df 91       	pop	r29
    42ce:	cf 91       	pop	r28
    42d0:	08 95       	ret

000042d2 <initializeSonarSensors>:

void initializeSonarSensors(){
    42d2:	cf 93       	push	r28
    42d4:	df 93       	push	r29
    42d6:	cd b7       	in	r28, 0x3d	; 61
    42d8:	de b7       	in	r29, 0x3e	; 62

	//addADCDevice(0,ADC_OPT_PRECISION_HIGH,sonarADCHandler,&sonarNum0);			
	//addADCDevice(12,ADC_OPT_PRECISION_HIGH,sonarADCHandler,&sonarNum1);			
	//addADCDevice(15,ADC_OPT_PRECISION_HIGH,sonarADCHandler,&sonarNum2);			

}
    42da:	df 91       	pop	r29
    42dc:	cf 91       	pop	r28
    42de:	08 95       	ret

000042e0 <getAllSensors>:

char getAllSensors(int* responseData){
    42e0:	cf 93       	push	r28
    42e2:	df 93       	push	r29
    42e4:	00 d0       	rcall	.+0      	; 0x42e6 <getAllSensors+0x6>
    42e6:	1f 92       	push	r1
    42e8:	cd b7       	in	r28, 0x3d	; 61
    42ea:	de b7       	in	r29, 0x3e	; 62
    42ec:	9c 83       	std	Y+4, r25	; 0x04
    42ee:	8b 83       	std	Y+3, r24	; 0x03
   unsigned short i;
   for(i=0;i<6;i++){
    42f0:	1a 82       	std	Y+2, r1	; 0x02
    42f2:	19 82       	std	Y+1, r1	; 0x01
    42f4:	14 c0       	rjmp	.+40     	; 0x431e <getAllSensors+0x3e>
      //responseData[i] = getSonarData(i);
      responseData[i] = i+1;
    42f6:	89 81       	ldd	r24, Y+1	; 0x01
    42f8:	9a 81       	ldd	r25, Y+2	; 0x02
    42fa:	88 0f       	add	r24, r24
    42fc:	99 1f       	adc	r25, r25
    42fe:	2b 81       	ldd	r18, Y+3	; 0x03
    4300:	3c 81       	ldd	r19, Y+4	; 0x04
    4302:	82 0f       	add	r24, r18
    4304:	93 1f       	adc	r25, r19
    4306:	29 81       	ldd	r18, Y+1	; 0x01
    4308:	3a 81       	ldd	r19, Y+2	; 0x02
    430a:	2f 5f       	subi	r18, 0xFF	; 255
    430c:	3f 4f       	sbci	r19, 0xFF	; 255
    430e:	fc 01       	movw	r30, r24
    4310:	31 83       	std	Z+1, r19	; 0x01
    4312:	20 83       	st	Z, r18

}

char getAllSensors(int* responseData){
   unsigned short i;
   for(i=0;i<6;i++){
    4314:	89 81       	ldd	r24, Y+1	; 0x01
    4316:	9a 81       	ldd	r25, Y+2	; 0x02
    4318:	01 96       	adiw	r24, 0x01	; 1
    431a:	9a 83       	std	Y+2, r25	; 0x02
    431c:	89 83       	std	Y+1, r24	; 0x01
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	9a 81       	ldd	r25, Y+2	; 0x02
    4322:	86 30       	cpi	r24, 0x06	; 6
    4324:	91 05       	cpc	r25, r1
    4326:	38 f3       	brcs	.-50     	; 0x42f6 <getAllSensors+0x16>
      //responseData[i] = getSonarData(i);
      responseData[i] = i+1;
   }
   return 1;
    4328:	81 e0       	ldi	r24, 0x01	; 1
}
    432a:	0f 90       	pop	r0
    432c:	0f 90       	pop	r0
    432e:	0f 90       	pop	r0
    4330:	0f 90       	pop	r0
    4332:	df 91       	pop	r29
    4334:	cf 91       	pop	r28
    4336:	08 95       	ret

00004338 <getCertainSensor>:

char getCertainSensor(unsigned char commandData,int* responseData){
    4338:	0f 93       	push	r16
    433a:	1f 93       	push	r17
    433c:	cf 93       	push	r28
    433e:	df 93       	push	r29
    4340:	00 d0       	rcall	.+0      	; 0x4342 <getCertainSensor+0xa>
    4342:	cd b7       	in	r28, 0x3d	; 61
    4344:	de b7       	in	r29, 0x3e	; 62
    4346:	89 83       	std	Y+1, r24	; 0x01
    4348:	7b 83       	std	Y+3, r23	; 0x03
    434a:	6a 83       	std	Y+2, r22	; 0x02
   if(commandData < 6){
    434c:	89 81       	ldd	r24, Y+1	; 0x01
    434e:	86 30       	cpi	r24, 0x06	; 6
    4350:	90 f4       	brcc	.+36     	; 0x4376 <getCertainSensor+0x3e>
      responseData[commandData] = getSonarData(commandData);
    4352:	89 81       	ldd	r24, Y+1	; 0x01
    4354:	88 2f       	mov	r24, r24
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	88 0f       	add	r24, r24
    435a:	99 1f       	adc	r25, r25
    435c:	2a 81       	ldd	r18, Y+2	; 0x02
    435e:	3b 81       	ldd	r19, Y+3	; 0x03
    4360:	89 01       	movw	r16, r18
    4362:	08 0f       	add	r16, r24
    4364:	19 1f       	adc	r17, r25
    4366:	89 81       	ldd	r24, Y+1	; 0x01
    4368:	88 2f       	mov	r24, r24
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	0e 94 38 21 	call	0x4270	; 0x4270 <getSonarData>
    4370:	f8 01       	movw	r30, r16
    4372:	91 83       	std	Z+1, r25	; 0x01
    4374:	80 83       	st	Z, r24
   }
   return 1;
    4376:	81 e0       	ldi	r24, 0x01	; 1
}
    4378:	0f 90       	pop	r0
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
    437e:	df 91       	pop	r29
    4380:	cf 91       	pop	r28
    4382:	1f 91       	pop	r17
    4384:	0f 91       	pop	r16
    4386:	08 95       	ret

00004388 <getSensorGroup>:

char getSensorGroup(char commandData,int* responseData){
    4388:	0f 93       	push	r16
    438a:	1f 93       	push	r17
    438c:	cf 93       	push	r28
    438e:	df 93       	push	r29
    4390:	00 d0       	rcall	.+0      	; 0x4392 <getSensorGroup+0xa>
    4392:	cd b7       	in	r28, 0x3d	; 61
    4394:	de b7       	in	r29, 0x3e	; 62
    4396:	89 83       	std	Y+1, r24	; 0x01
    4398:	7b 83       	std	Y+3, r23	; 0x03
    439a:	6a 83       	std	Y+2, r22	; 0x02

   switch(commandData){
    439c:	89 81       	ldd	r24, Y+1	; 0x01
    439e:	99 27       	eor	r25, r25
    43a0:	87 fd       	sbrc	r24, 7
    43a2:	90 95       	com	r25
    43a4:	81 30       	cpi	r24, 0x01	; 1
    43a6:	91 05       	cpc	r25, r1
    43a8:	e9 f0       	breq	.+58     	; 0x43e4 <getSensorGroup+0x5c>
    43aa:	82 30       	cpi	r24, 0x02	; 2
    43ac:	91 05       	cpc	r25, r1
    43ae:	89 f1       	breq	.+98     	; 0x4412 <getSensorGroup+0x8a>
    43b0:	00 97       	sbiw	r24, 0x00	; 0
    43b2:	09 f0       	breq	.+2      	; 0x43b6 <getSensorGroup+0x2e>
    43b4:	45 c0       	rjmp	.+138    	; 0x4440 <getSensorGroup+0xb8>
      case SONAR_GROUP_LEFT:
         responseData[0] = getSonarData(0);
    43b6:	80 e0       	ldi	r24, 0x00	; 0
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	0e 94 38 21 	call	0x4270	; 0x4270 <getSonarData>
    43be:	9c 01       	movw	r18, r24
    43c0:	8a 81       	ldd	r24, Y+2	; 0x02
    43c2:	9b 81       	ldd	r25, Y+3	; 0x03
    43c4:	fc 01       	movw	r30, r24
    43c6:	31 83       	std	Z+1, r19	; 0x01
    43c8:	20 83       	st	Z, r18
         responseData[1] = getSonarData(1);
    43ca:	8a 81       	ldd	r24, Y+2	; 0x02
    43cc:	9b 81       	ldd	r25, Y+3	; 0x03
    43ce:	8c 01       	movw	r16, r24
    43d0:	0e 5f       	subi	r16, 0xFE	; 254
    43d2:	1f 4f       	sbci	r17, 0xFF	; 255
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	0e 94 38 21 	call	0x4270	; 0x4270 <getSonarData>
    43dc:	f8 01       	movw	r30, r16
    43de:	91 83       	std	Z+1, r25	; 0x01
    43e0:	80 83       	st	Z, r24
         break;
    43e2:	2e c0       	rjmp	.+92     	; 0x4440 <getSensorGroup+0xb8>
      case SONAR_GROUP_FRONT:
         responseData[0] = getSonarData(2);
    43e4:	82 e0       	ldi	r24, 0x02	; 2
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	0e 94 38 21 	call	0x4270	; 0x4270 <getSonarData>
    43ec:	9c 01       	movw	r18, r24
    43ee:	8a 81       	ldd	r24, Y+2	; 0x02
    43f0:	9b 81       	ldd	r25, Y+3	; 0x03
    43f2:	fc 01       	movw	r30, r24
    43f4:	31 83       	std	Z+1, r19	; 0x01
    43f6:	20 83       	st	Z, r18
         responseData[1] = getSonarData(3);
    43f8:	8a 81       	ldd	r24, Y+2	; 0x02
    43fa:	9b 81       	ldd	r25, Y+3	; 0x03
    43fc:	8c 01       	movw	r16, r24
    43fe:	0e 5f       	subi	r16, 0xFE	; 254
    4400:	1f 4f       	sbci	r17, 0xFF	; 255
    4402:	83 e0       	ldi	r24, 0x03	; 3
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	0e 94 38 21 	call	0x4270	; 0x4270 <getSonarData>
    440a:	f8 01       	movw	r30, r16
    440c:	91 83       	std	Z+1, r25	; 0x01
    440e:	80 83       	st	Z, r24
         break;
    4410:	17 c0       	rjmp	.+46     	; 0x4440 <getSensorGroup+0xb8>
      case SONAR_GROUP_RIGHT:
         responseData[0] = getSonarData(4);
    4412:	84 e0       	ldi	r24, 0x04	; 4
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	0e 94 38 21 	call	0x4270	; 0x4270 <getSonarData>
    441a:	9c 01       	movw	r18, r24
    441c:	8a 81       	ldd	r24, Y+2	; 0x02
    441e:	9b 81       	ldd	r25, Y+3	; 0x03
    4420:	fc 01       	movw	r30, r24
    4422:	31 83       	std	Z+1, r19	; 0x01
    4424:	20 83       	st	Z, r18
         responseData[1] = getSonarData(5);
    4426:	8a 81       	ldd	r24, Y+2	; 0x02
    4428:	9b 81       	ldd	r25, Y+3	; 0x03
    442a:	8c 01       	movw	r16, r24
    442c:	0e 5f       	subi	r16, 0xFE	; 254
    442e:	1f 4f       	sbci	r17, 0xFF	; 255
    4430:	85 e0       	ldi	r24, 0x05	; 5
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	0e 94 38 21 	call	0x4270	; 0x4270 <getSonarData>
    4438:	f8 01       	movw	r30, r16
    443a:	91 83       	std	Z+1, r25	; 0x01
    443c:	80 83       	st	Z, r24
         break;
    443e:	00 00       	nop
   }
   return 1;
    4440:	81 e0       	ldi	r24, 0x01	; 1

}
    4442:	0f 90       	pop	r0
    4444:	0f 90       	pop	r0
    4446:	0f 90       	pop	r0
    4448:	df 91       	pop	r29
    444a:	cf 91       	pop	r28
    444c:	1f 91       	pop	r17
    444e:	0f 91       	pop	r16
    4450:	08 95       	ret

00004452 <initSpeedController>:
#include <avr/io.h>
#include "spi.h"

#include "Speed.h"

void initSpeedController(){
    4452:	cf 93       	push	r28
    4454:	df 93       	push	r29
    4456:	cd b7       	in	r28, 0x3d	; 61
    4458:	de b7       	in	r29, 0x3e	; 62
	SPIsendShort(0x400F);
    445a:	8f e0       	ldi	r24, 0x0F	; 15
    445c:	90 e4       	ldi	r25, 0x40	; 64
    445e:	0e 94 76 25 	call	0x4aec	; 0x4aec <SPIsendShort>
}
    4462:	df 91       	pop	r29
    4464:	cf 91       	pop	r28
    4466:	08 95       	ret

00004468 <setPot>:

void setPot(int value){
    4468:	cf 93       	push	r28
    446a:	df 93       	push	r29
    446c:	00 d0       	rcall	.+0      	; 0x446e <setPot+0x6>
    446e:	1f 92       	push	r1
    4470:	cd b7       	in	r28, 0x3d	; 61
    4472:	de b7       	in	r29, 0x3e	; 62
    4474:	9c 83       	std	Y+4, r25	; 0x04
    4476:	8b 83       	std	Y+3, r24	; 0x03
	unsigned short data = 0;
    4478:	1a 82       	std	Y+2, r1	; 0x02
    447a:	19 82       	std	Y+1, r1	; 0x01
	data = value & 0xFF;
    447c:	8b 81       	ldd	r24, Y+3	; 0x03
    447e:	9c 81       	ldd	r25, Y+4	; 0x04
    4480:	99 27       	eor	r25, r25
    4482:	9a 83       	std	Y+2, r25	; 0x02
    4484:	89 83       	std	Y+1, r24	; 0x01

	SPIsendShort(data);
    4486:	89 81       	ldd	r24, Y+1	; 0x01
    4488:	9a 81       	ldd	r25, Y+2	; 0x02
    448a:	0e 94 76 25 	call	0x4aec	; 0x4aec <SPIsendShort>
}
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	df 91       	pop	r29
    4498:	cf 91       	pop	r28
    449a:	08 95       	ret

0000449c <decrementPot>:

void decrementPot(){
    449c:	cf 93       	push	r28
    449e:	df 93       	push	r29
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
	SPIsendByte(0x06);
    44a4:	86 e0       	ldi	r24, 0x06	; 6
    44a6:	0e 94 30 25 	call	0x4a60	; 0x4a60 <SPIsendByte>
}
    44aa:	df 91       	pop	r29
    44ac:	cf 91       	pop	r28
    44ae:	08 95       	ret

000044b0 <incrementPot>:

void incrementPot(){
    44b0:	cf 93       	push	r28
    44b2:	df 93       	push	r29
    44b4:	cd b7       	in	r28, 0x3d	; 61
    44b6:	de b7       	in	r29, 0x3e	; 62
	SPIsendByte(0x0A);
    44b8:	8a e0       	ldi	r24, 0x0A	; 10
    44ba:	0e 94 30 25 	call	0x4a60	; 0x4a60 <SPIsendByte>
}
    44be:	df 91       	pop	r29
    44c0:	cf 91       	pop	r28
    44c2:	08 95       	ret

000044c4 <getSpeed>:

//get the speed of the vehicle
char getSpeed(unsigned char* sensorResponse) {
    44c4:	cf 93       	push	r28
    44c6:	df 93       	push	r29
    44c8:	1f 92       	push	r1
    44ca:	1f 92       	push	r1
    44cc:	cd b7       	in	r28, 0x3d	; 61
    44ce:	de b7       	in	r29, 0x3e	; 62
    44d0:	9a 83       	std	Y+2, r25	; 0x02
    44d2:	89 83       	std	Y+1, r24	; 0x01
   //store dummy speed value
   *sensorResponse = 0;
    44d4:	89 81       	ldd	r24, Y+1	; 0x01
    44d6:	9a 81       	ldd	r25, Y+2	; 0x02
    44d8:	fc 01       	movw	r30, r24
    44da:	10 82       	st	Z, r1
   //return success
   return 1;
    44dc:	81 e0       	ldi	r24, 0x01	; 1
}
    44de:	0f 90       	pop	r0
    44e0:	0f 90       	pop	r0
    44e2:	df 91       	pop	r29
    44e4:	cf 91       	pop	r28
    44e6:	08 95       	ret

000044e8 <setSpeed>:

//will set just the speed of the wheels of the car
char setSpeed(unsigned char speedTarget) {
    44e8:	cf 93       	push	r28
    44ea:	df 93       	push	r29
    44ec:	1f 92       	push	r1
    44ee:	cd b7       	in	r28, 0x3d	; 61
    44f0:	de b7       	in	r29, 0x3e	; 62
    44f2:	89 83       	std	Y+1, r24	; 0x01
   //nothing done down here
   //return success
	if(speedTarget == 0){
    44f4:	89 81       	ldd	r24, Y+1	; 0x01
    44f6:	88 23       	and	r24, r24
    44f8:	51 f4       	brne	.+20     	; 0x450e <setSpeed+0x26>
		PORTA &= ~4;
    44fa:	82 e2       	ldi	r24, 0x22	; 34
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	22 e2       	ldi	r18, 0x22	; 34
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	f9 01       	movw	r30, r18
    4504:	20 81       	ld	r18, Z
    4506:	2b 7f       	andi	r18, 0xFB	; 251
    4508:	fc 01       	movw	r30, r24
    450a:	20 83       	st	Z, r18
    450c:	09 c0       	rjmp	.+18     	; 0x4520 <setSpeed+0x38>
	} else {
		PORTA |= 4;
    450e:	82 e2       	ldi	r24, 0x22	; 34
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	22 e2       	ldi	r18, 0x22	; 34
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	f9 01       	movw	r30, r18
    4518:	20 81       	ld	r18, Z
    451a:	24 60       	ori	r18, 0x04	; 4
    451c:	fc 01       	movw	r30, r24
    451e:	20 83       	st	Z, r18
	}
	setPot(speedTarget);
    4520:	89 81       	ldd	r24, Y+1	; 0x01
    4522:	88 2f       	mov	r24, r24
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	0e 94 34 22 	call	0x4468	; 0x4468 <setPot>
   return 1;
    452a:	81 e0       	ldi	r24, 0x01	; 1
}
    452c:	0f 90       	pop	r0
    452e:	df 91       	pop	r29
    4530:	cf 91       	pop	r28
    4532:	08 95       	ret

00004534 <getLinearPotCallback>:
void USART_Write(char a);
void printWheelAngle(void);
void getLinearPotCallback(int data, void *parameters);


void getLinearPotCallback(int data,void *parameters){
    4534:	cf 93       	push	r28
    4536:	df 93       	push	r29
    4538:	00 d0       	rcall	.+0      	; 0x453a <getLinearPotCallback+0x6>
    453a:	1f 92       	push	r1
    453c:	cd b7       	in	r28, 0x3d	; 61
    453e:	de b7       	in	r29, 0x3e	; 62
    4540:	9a 83       	std	Y+2, r25	; 0x02
    4542:	89 83       	std	Y+1, r24	; 0x01
    4544:	7c 83       	std	Y+4, r23	; 0x04
    4546:	6b 83       	std	Y+3, r22	; 0x03
	wheelAngle = data / -4 + 74;
    4548:	89 81       	ldd	r24, Y+1	; 0x01
    454a:	9a 81       	ldd	r25, Y+2	; 0x02
    454c:	99 23       	and	r25, r25
    454e:	0c f4       	brge	.+2      	; 0x4552 <getLinearPotCallback+0x1e>
    4550:	03 96       	adiw	r24, 0x03	; 3
    4552:	95 95       	asr	r25
    4554:	87 95       	ror	r24
    4556:	95 95       	asr	r25
    4558:	87 95       	ror	r24
    455a:	91 95       	neg	r25
    455c:	81 95       	neg	r24
    455e:	91 09       	sbc	r25, r1
    4560:	86 5b       	subi	r24, 0xB6	; 182
    4562:	9f 4f       	sbci	r25, 0xFF	; 255
    4564:	90 93 d0 1a 	sts	0x1AD0, r25
    4568:	80 93 cf 1a 	sts	0x1ACF, r24
   //wheelAngle = data;
}
    456c:	0f 90       	pop	r0
    456e:	0f 90       	pop	r0
    4570:	0f 90       	pop	r0
    4572:	0f 90       	pop	r0
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	08 95       	ret

0000457a <initializeSteeringTimer>:

void initializeSteeringTimer(){
    457a:	cf 93       	push	r28
    457c:	df 93       	push	r29
    457e:	cd b7       	in	r28, 0x3d	; 61
    4580:	de b7       	in	r29, 0x3e	; 62
	
	//TCCR1A = (1 << COM1A1)|(1 << WGM11);
   TCCR5A = (1 << WGM51);
    4582:	80 e2       	ldi	r24, 0x20	; 32
    4584:	91 e0       	ldi	r25, 0x01	; 1
    4586:	22 e0       	ldi	r18, 0x02	; 2
    4588:	fc 01       	movw	r30, r24
    458a:	20 83       	st	Z, r18
	TCCR5B = (1 << WGM52)|(1 << CS50);
    458c:	81 e2       	ldi	r24, 0x21	; 33
    458e:	91 e0       	ldi	r25, 0x01	; 1
    4590:	29 e0       	ldi	r18, 0x09	; 9
    4592:	fc 01       	movw	r30, r24
    4594:	20 83       	st	Z, r18
	TCCR5C = 0;
    4596:	82 e2       	ldi	r24, 0x22	; 34
    4598:	91 e0       	ldi	r25, 0x01	; 1
    459a:	fc 01       	movw	r30, r24
    459c:	10 82       	st	Z, r1

   OCR5AH = 0xFF;
    459e:	89 e2       	ldi	r24, 0x29	; 41
    45a0:	91 e0       	ldi	r25, 0x01	; 1
    45a2:	2f ef       	ldi	r18, 0xFF	; 255
    45a4:	fc 01       	movw	r30, r24
    45a6:	20 83       	st	Z, r18
   OCR5AL = 0xFF;
    45a8:	88 e2       	ldi	r24, 0x28	; 40
    45aa:	91 e0       	ldi	r25, 0x01	; 1
    45ac:	2f ef       	ldi	r18, 0xFF	; 255
    45ae:	fc 01       	movw	r30, r24
    45b0:	20 83       	st	Z, r18

   TIMSK5 = (1 << OCIE5A)|(1 << TOIE5);
    45b2:	83 e7       	ldi	r24, 0x73	; 115
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	23 e0       	ldi	r18, 0x03	; 3
    45b8:	fc 01       	movw	r30, r24
    45ba:	20 83       	st	Z, r18

}
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	08 95       	ret

000045c2 <__vector_50>:

ISR(TIMER5_OVF_vect) {
    45c2:	1f 92       	push	r1
    45c4:	0f 92       	push	r0
    45c6:	00 90 5f 00 	lds	r0, 0x005F
    45ca:	0f 92       	push	r0
    45cc:	11 24       	eor	r1, r1
    45ce:	00 90 5b 00 	lds	r0, 0x005B
    45d2:	0f 92       	push	r0
    45d4:	2f 93       	push	r18
    45d6:	3f 93       	push	r19
    45d8:	8f 93       	push	r24
    45da:	9f 93       	push	r25
    45dc:	ef 93       	push	r30
    45de:	ff 93       	push	r31
    45e0:	cf 93       	push	r28
    45e2:	df 93       	push	r29
    45e4:	cd b7       	in	r28, 0x3d	; 61
    45e6:	de b7       	in	r29, 0x3e	; 62

   if(steeringDir == -1) {
    45e8:	80 91 d1 1a 	lds	r24, 0x1AD1
    45ec:	90 91 d2 1a 	lds	r25, 0x1AD2
    45f0:	8f 3f       	cpi	r24, 0xFF	; 255
    45f2:	2f ef       	ldi	r18, 0xFF	; 255
    45f4:	92 07       	cpc	r25, r18
    45f6:	99 f4       	brne	.+38     	; 0x461e <__vector_50+0x5c>
      PORTB &= ~(1 << PB5);
    45f8:	85 e2       	ldi	r24, 0x25	; 37
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	25 e2       	ldi	r18, 0x25	; 37
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	f9 01       	movw	r30, r18
    4602:	20 81       	ld	r18, Z
    4604:	2f 7d       	andi	r18, 0xDF	; 223
    4606:	fc 01       	movw	r30, r24
    4608:	20 83       	st	Z, r18
      PORTB |= (1 << PB4);
    460a:	85 e2       	ldi	r24, 0x25	; 37
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	25 e2       	ldi	r18, 0x25	; 37
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	f9 01       	movw	r30, r18
    4614:	20 81       	ld	r18, Z
    4616:	20 61       	ori	r18, 0x10	; 16
    4618:	fc 01       	movw	r30, r24
    461a:	20 83       	st	Z, r18
    461c:	23 c0       	rjmp	.+70     	; 0x4664 <__vector_50+0xa2>
   } else if(steeringDir == 1) {
    461e:	80 91 d1 1a 	lds	r24, 0x1AD1
    4622:	90 91 d2 1a 	lds	r25, 0x1AD2
    4626:	81 30       	cpi	r24, 0x01	; 1
    4628:	91 05       	cpc	r25, r1
    462a:	99 f4       	brne	.+38     	; 0x4652 <__vector_50+0x90>
      PORTB &= ~(1 << PB4);
    462c:	85 e2       	ldi	r24, 0x25	; 37
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	25 e2       	ldi	r18, 0x25	; 37
    4632:	30 e0       	ldi	r19, 0x00	; 0
    4634:	f9 01       	movw	r30, r18
    4636:	20 81       	ld	r18, Z
    4638:	2f 7e       	andi	r18, 0xEF	; 239
    463a:	fc 01       	movw	r30, r24
    463c:	20 83       	st	Z, r18
      PORTB |= (1 << PB5);
    463e:	85 e2       	ldi	r24, 0x25	; 37
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	25 e2       	ldi	r18, 0x25	; 37
    4644:	30 e0       	ldi	r19, 0x00	; 0
    4646:	f9 01       	movw	r30, r18
    4648:	20 81       	ld	r18, Z
    464a:	20 62       	ori	r18, 0x20	; 32
    464c:	fc 01       	movw	r30, r24
    464e:	20 83       	st	Z, r18
    4650:	09 c0       	rjmp	.+18     	; 0x4664 <__vector_50+0xa2>
   } else {
      PORTB &= ~((1 << PB4) | (1 << PB5));
    4652:	85 e2       	ldi	r24, 0x25	; 37
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	25 e2       	ldi	r18, 0x25	; 37
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	f9 01       	movw	r30, r18
    465c:	20 81       	ld	r18, Z
    465e:	2f 7c       	andi	r18, 0xCF	; 207
    4660:	fc 01       	movw	r30, r24
    4662:	20 83       	st	Z, r18
   }
}
    4664:	df 91       	pop	r29
    4666:	cf 91       	pop	r28
    4668:	ff 91       	pop	r31
    466a:	ef 91       	pop	r30
    466c:	9f 91       	pop	r25
    466e:	8f 91       	pop	r24
    4670:	3f 91       	pop	r19
    4672:	2f 91       	pop	r18
    4674:	0f 90       	pop	r0
    4676:	00 92 5b 00 	sts	0x005B, r0
    467a:	0f 90       	pop	r0
    467c:	00 92 5f 00 	sts	0x005F, r0
    4680:	0f 90       	pop	r0
    4682:	1f 90       	pop	r1
    4684:	18 95       	reti

00004686 <__vector_47>:

ISR(TIMER5_COMPA_vect) {
    4686:	1f 92       	push	r1
    4688:	0f 92       	push	r0
    468a:	00 90 5f 00 	lds	r0, 0x005F
    468e:	0f 92       	push	r0
    4690:	11 24       	eor	r1, r1
    4692:	00 90 5b 00 	lds	r0, 0x005B
    4696:	0f 92       	push	r0
    4698:	2f 93       	push	r18
    469a:	3f 93       	push	r19
    469c:	8f 93       	push	r24
    469e:	9f 93       	push	r25
    46a0:	ef 93       	push	r30
    46a2:	ff 93       	push	r31
    46a4:	cf 93       	push	r28
    46a6:	df 93       	push	r29
    46a8:	cd b7       	in	r28, 0x3d	; 61
    46aa:	de b7       	in	r29, 0x3e	; 62
   PORTB &= ~((1 << PB4)|(1 << PB5));
    46ac:	85 e2       	ldi	r24, 0x25	; 37
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	25 e2       	ldi	r18, 0x25	; 37
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    46b4:	f9 01       	movw	r30, r18
    46b6:	20 81       	ld	r18, Z
    46b8:	2f 7c       	andi	r18, 0xCF	; 207
    46ba:	fc 01       	movw	r30, r24
    46bc:	20 83       	st	Z, r18
}
    46be:	df 91       	pop	r29
    46c0:	cf 91       	pop	r28
    46c2:	ff 91       	pop	r31
    46c4:	ef 91       	pop	r30
    46c6:	9f 91       	pop	r25
    46c8:	8f 91       	pop	r24
    46ca:	3f 91       	pop	r19
    46cc:	2f 91       	pop	r18
    46ce:	0f 90       	pop	r0
    46d0:	00 92 5b 00 	sts	0x005B, r0
    46d4:	0f 90       	pop	r0
    46d6:	00 92 5f 00 	sts	0x005F, r0
    46da:	0f 90       	pop	r0
    46dc:	1f 90       	pop	r1
    46de:	18 95       	reti

000046e0 <setSteeringPWMSpeed>:

void setSteeringPWMSpeed(int spd){
    46e0:	cf 93       	push	r28
    46e2:	df 93       	push	r29
    46e4:	1f 92       	push	r1
    46e6:	1f 92       	push	r1
    46e8:	cd b7       	in	r28, 0x3d	; 61
    46ea:	de b7       	in	r29, 0x3e	; 62
    46ec:	9a 83       	std	Y+2, r25	; 0x02
    46ee:	89 83       	std	Y+1, r24	; 0x01
   steeringSpd = spd * steeringDir;
    46f0:	40 91 d1 1a 	lds	r20, 0x1AD1
    46f4:	50 91 d2 1a 	lds	r21, 0x1AD2
    46f8:	29 81       	ldd	r18, Y+1	; 0x01
    46fa:	3a 81       	ldd	r19, Y+2	; 0x02
    46fc:	42 9f       	mul	r20, r18
    46fe:	c0 01       	movw	r24, r0
    4700:	43 9f       	mul	r20, r19
    4702:	90 0d       	add	r25, r0
    4704:	52 9f       	mul	r21, r18
    4706:	90 0d       	add	r25, r0
    4708:	11 24       	eor	r1, r1
    470a:	90 93 d4 1a 	sts	0x1AD4, r25
    470e:	80 93 d3 1a 	sts	0x1AD3, r24

   if(spd > 0x1B0) spd = 0x1B0;
    4712:	89 81       	ldd	r24, Y+1	; 0x01
    4714:	9a 81       	ldd	r25, Y+2	; 0x02
    4716:	81 3b       	cpi	r24, 0xB1	; 177
    4718:	21 e0       	ldi	r18, 0x01	; 1
    471a:	92 07       	cpc	r25, r18
    471c:	24 f0       	brlt	.+8      	; 0x4726 <setSteeringPWMSpeed+0x46>
    471e:	80 eb       	ldi	r24, 0xB0	; 176
    4720:	91 e0       	ldi	r25, 0x01	; 1
    4722:	9a 83       	std	Y+2, r25	; 0x02
    4724:	89 83       	std	Y+1, r24	; 0x01
      

   OCR5AH = spd >> 8;
    4726:	89 e2       	ldi	r24, 0x29	; 41
    4728:	91 e0       	ldi	r25, 0x01	; 1
    472a:	29 81       	ldd	r18, Y+1	; 0x01
    472c:	3a 81       	ldd	r19, Y+2	; 0x02
    472e:	23 2f       	mov	r18, r19
    4730:	33 0f       	add	r19, r19
    4732:	33 0b       	sbc	r19, r19
    4734:	fc 01       	movw	r30, r24
    4736:	20 83       	st	Z, r18
   OCR5AL = spd & 0xFF;
    4738:	88 e2       	ldi	r24, 0x28	; 40
    473a:	91 e0       	ldi	r25, 0x01	; 1
    473c:	29 81       	ldd	r18, Y+1	; 0x01
    473e:	fc 01       	movw	r30, r24
    4740:	20 83       	st	Z, r18
      STEERING_LEFT_CMPH = 0;
      STEERING_LEFT_CMPL = 0;
      STEERING_RIGHT_CMPH = 0;
      STEERING_RIGHT_CMPL = 0;
   }*/
}
    4742:	0f 90       	pop	r0
    4744:	0f 90       	pop	r0
    4746:	df 91       	pop	r29
    4748:	cf 91       	pop	r28
    474a:	08 95       	ret

0000474c <setSteeringDirection>:



void setSteeringDirection(int dir){
    474c:	cf 93       	push	r28
    474e:	df 93       	push	r29
    4750:	1f 92       	push	r1
    4752:	1f 92       	push	r1
    4754:	cd b7       	in	r28, 0x3d	; 61
    4756:	de b7       	in	r29, 0x3e	; 62
    4758:	9a 83       	std	Y+2, r25	; 0x02
    475a:	89 83       	std	Y+1, r24	; 0x01
	case -1:
		STEERING_PORT &= ~STEERING_RIGHT;
		STEERING_PORT |= STEERING_LEFT;
		break;
	}*/
   steeringDir = dir;
    475c:	89 81       	ldd	r24, Y+1	; 0x01
    475e:	9a 81       	ldd	r25, Y+2	; 0x02
    4760:	90 93 d2 1a 	sts	0x1AD2, r25
    4764:	80 93 d1 1a 	sts	0x1AD1, r24
}
    4768:	0f 90       	pop	r0
    476a:	0f 90       	pop	r0
    476c:	df 91       	pop	r29
    476e:	cf 91       	pop	r28
    4770:	08 95       	ret

00004772 <setAngle>:

//JUST SETS ANGLE TARGET. Actual angle changing is lower level
char setAngle(char angleTarget) {
    4772:	cf 93       	push	r28
    4774:	df 93       	push	r29
    4776:	1f 92       	push	r1
    4778:	cd b7       	in	r28, 0x3d	; 61
    477a:	de b7       	in	r29, 0x3e	; 62
    477c:	89 83       	std	Y+1, r24	; 0x01
	steeringTarget = angleTarget;
    477e:	89 81       	ldd	r24, Y+1	; 0x01
    4780:	99 27       	eor	r25, r25
    4782:	87 fd       	sbrc	r24, 7
    4784:	90 95       	com	r25
    4786:	90 93 ce 1a 	sts	0x1ACE, r25
    478a:	80 93 cd 1a 	sts	0x1ACD, r24
   return 1;
    478e:	81 e0       	ldi	r24, 0x01	; 1
}
    4790:	0f 90       	pop	r0
    4792:	df 91       	pop	r29
    4794:	cf 91       	pop	r28
    4796:	08 95       	ret

00004798 <getAngle>:

//get the current angle of the steering system
char getAngle(char* sensorResponse) {
    4798:	cf 93       	push	r28
    479a:	df 93       	push	r29
    479c:	1f 92       	push	r1
    479e:	1f 92       	push	r1
    47a0:	cd b7       	in	r28, 0x3d	; 61
    47a2:	de b7       	in	r29, 0x3e	; 62
    47a4:	9a 83       	std	Y+2, r25	; 0x02
    47a6:	89 83       	std	Y+1, r24	; 0x01
   *sensorResponse = wheelAngle;
    47a8:	80 91 cf 1a 	lds	r24, 0x1ACF
    47ac:	90 91 d0 1a 	lds	r25, 0x1AD0
    47b0:	28 2f       	mov	r18, r24
    47b2:	89 81       	ldd	r24, Y+1	; 0x01
    47b4:	9a 81       	ldd	r25, Y+2	; 0x02
    47b6:	fc 01       	movw	r30, r24
    47b8:	20 83       	st	Z, r18
   //return success
   return 1;
    47ba:	81 e0       	ldi	r24, 0x01	; 1
}
    47bc:	0f 90       	pop	r0
    47be:	0f 90       	pop	r0
    47c0:	df 91       	pop	r29
    47c2:	cf 91       	pop	r28
    47c4:	08 95       	ret

000047c6 <getDesiredAngle>:

//get the angle target. argument name is sensorResponse for the sake of consistancy
char getDesiredAngle(char* sensorResponse) {
    47c6:	cf 93       	push	r28
    47c8:	df 93       	push	r29
    47ca:	1f 92       	push	r1
    47cc:	1f 92       	push	r1
    47ce:	cd b7       	in	r28, 0x3d	; 61
    47d0:	de b7       	in	r29, 0x3e	; 62
    47d2:	9a 83       	std	Y+2, r25	; 0x02
    47d4:	89 83       	std	Y+1, r24	; 0x01
   *sensorResponse = steeringTarget;
    47d6:	80 91 cd 1a 	lds	r24, 0x1ACD
    47da:	90 91 ce 1a 	lds	r25, 0x1ACE
    47de:	28 2f       	mov	r18, r24
    47e0:	89 81       	ldd	r24, Y+1	; 0x01
    47e2:	9a 81       	ldd	r25, Y+2	; 0x02
    47e4:	fc 01       	movw	r30, r24
    47e6:	20 83       	st	Z, r18
   //return success
   return 1;
    47e8:	81 e0       	ldi	r24, 0x01	; 1
}
    47ea:	0f 90       	pop	r0
    47ec:	0f 90       	pop	r0
    47ee:	df 91       	pop	r29
    47f0:	cf 91       	pop	r28
    47f2:	08 95       	ret

000047f4 <changePID>:

//change the PID controller
char changePID(char P, char I, char D) {
    47f4:	cf 93       	push	r28
    47f6:	df 93       	push	r29
    47f8:	00 d0       	rcall	.+0      	; 0x47fa <changePID+0x6>
    47fa:	cd b7       	in	r28, 0x3d	; 61
    47fc:	de b7       	in	r29, 0x3e	; 62
    47fe:	89 83       	std	Y+1, r24	; 0x01
    4800:	6a 83       	std	Y+2, r22	; 0x02
    4802:	4b 83       	std	Y+3, r20	; 0x03
   //dummy function, nothing happens
   //return success
   return 1;
    4804:	81 e0       	ldi	r24, 0x01	; 1
}
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	0f 90       	pop	r0
    480c:	df 91       	pop	r29
    480e:	cf 91       	pop	r28
    4810:	08 95       	ret

00004812 <setLimits>:

//not sure what this does. Also not sure why upper and lower are separated
//but its in the specs so...
char setLimits(char upper, char lower) {
    4812:	cf 93       	push	r28
    4814:	df 93       	push	r29
    4816:	1f 92       	push	r1
    4818:	1f 92       	push	r1
    481a:	cd b7       	in	r28, 0x3d	; 61
    481c:	de b7       	in	r29, 0x3e	; 62
    481e:	89 83       	std	Y+1, r24	; 0x01
    4820:	6a 83       	std	Y+2, r22	; 0x02
   //dummy function, nothing happens
   //return success
   return 1;
    4822:	81 e0       	ldi	r24, 0x01	; 1
}
    4824:	0f 90       	pop	r0
    4826:	0f 90       	pop	r0
    4828:	df 91       	pop	r29
    482a:	cf 91       	pop	r28
    482c:	08 95       	ret

0000482e <printWheelAngle>:

void printWheelAngle() {
    482e:	cf 93       	push	r28
    4830:	df 93       	push	r29
    4832:	cd b7       	in	r28, 0x3d	; 61
    4834:	de b7       	in	r29, 0x3e	; 62
   if(wheelAngle & 0x1000) {
    4836:	80 91 cf 1a 	lds	r24, 0x1ACF
    483a:	90 91 d0 1a 	lds	r25, 0x1AD0
    483e:	88 27       	eor	r24, r24
    4840:	90 71       	andi	r25, 0x10	; 16
    4842:	00 97       	sbiw	r24, 0x00	; 0
    4844:	71 f0       	breq	.+28     	; 0x4862 <printWheelAngle+0x34>
      USART_Write('-');
    4846:	8d e2       	ldi	r24, 0x2D	; 45
    4848:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
      wheelAngle *= -1;
    484c:	80 91 cf 1a 	lds	r24, 0x1ACF
    4850:	90 91 d0 1a 	lds	r25, 0x1AD0
    4854:	91 95       	neg	r25
    4856:	81 95       	neg	r24
    4858:	91 09       	sbc	r25, r1
    485a:	90 93 d0 1a 	sts	0x1AD0, r25
    485e:	80 93 cf 1a 	sts	0x1ACF, r24
   }      
   printNum(wheelAngle);
    4862:	80 91 cf 1a 	lds	r24, 0x1ACF
    4866:	90 91 d0 1a 	lds	r25, 0x1AD0
    486a:	0e 94 b1 18 	call	0x3162	; 0x3162 <printNum>
   USART_Write('\r');
    486e:	8d e0       	ldi	r24, 0x0D	; 13
    4870:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
   USART_Write('\n');
    4874:	8a e0       	ldi	r24, 0x0A	; 10
    4876:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
}
    487a:	df 91       	pop	r29
    487c:	cf 91       	pop	r28
    487e:	08 95       	ret

00004880 <vTaskSteer>:

void vTaskSteer(void* parameters){
    4880:	cf 93       	push	r28
    4882:	df 93       	push	r29
    4884:	00 d0       	rcall	.+0      	; 0x4886 <vTaskSteer+0x6>
    4886:	00 d0       	rcall	.+0      	; 0x4888 <vTaskSteer+0x8>
    4888:	cd b7       	in	r28, 0x3d	; 61
    488a:	de b7       	in	r29, 0x3e	; 62
    488c:	9e 83       	std	Y+6, r25	; 0x06
    488e:	8d 83       	std	Y+5, r24	; 0x05


	addADCDevice(0,ADC_OPT_PRECISION_HIGH,getLinearPotCallback,0);
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	4a e9       	ldi	r20, 0x9A	; 154
    4896:	52 e2       	ldi	r21, 0x22	; 34
    4898:	60 e0       	ldi	r22, 0x00	; 0
    489a:	70 e0       	ldi	r23, 0x00	; 0
    489c:	80 e0       	ldi	r24, 0x00	; 0
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <addADCDevice>

	int pConst = 35; 
    48a4:	83 e2       	ldi	r24, 0x23	; 35
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	9c 83       	std	Y+4, r25	; 0x04
    48aa:	8b 83       	std	Y+3, r24	; 0x03
	int adjust;

	steeringTarget = 0;
    48ac:	10 92 ce 1a 	sts	0x1ACE, r1
    48b0:	10 92 cd 1a 	sts	0x1ACD, r1
	while(1){
      
	   adjust = pConst * (steeringTarget - wheelAngle);
    48b4:	20 91 cd 1a 	lds	r18, 0x1ACD
    48b8:	30 91 ce 1a 	lds	r19, 0x1ACE
    48bc:	80 91 cf 1a 	lds	r24, 0x1ACF
    48c0:	90 91 d0 1a 	lds	r25, 0x1AD0
    48c4:	a9 01       	movw	r20, r18
    48c6:	48 1b       	sub	r20, r24
    48c8:	59 0b       	sbc	r21, r25
    48ca:	2b 81       	ldd	r18, Y+3	; 0x03
    48cc:	3c 81       	ldd	r19, Y+4	; 0x04
    48ce:	42 9f       	mul	r20, r18
    48d0:	c0 01       	movw	r24, r0
    48d2:	43 9f       	mul	r20, r19
    48d4:	90 0d       	add	r25, r0
    48d6:	52 9f       	mul	r21, r18
    48d8:	90 0d       	add	r25, r0
    48da:	11 24       	eor	r1, r1
    48dc:	9a 83       	std	Y+2, r25	; 0x02
    48de:	89 83       	std	Y+1, r24	; 0x01
	   if(adjust < steeringTarget - 3*pConst){
    48e0:	2b 81       	ldd	r18, Y+3	; 0x03
    48e2:	3c 81       	ldd	r19, Y+4	; 0x04
    48e4:	c9 01       	movw	r24, r18
    48e6:	88 0f       	add	r24, r24
    48e8:	99 1f       	adc	r25, r25
    48ea:	82 0f       	add	r24, r18
    48ec:	93 1f       	adc	r25, r19
    48ee:	91 95       	neg	r25
    48f0:	81 95       	neg	r24
    48f2:	91 09       	sbc	r25, r1
    48f4:	20 91 cd 1a 	lds	r18, 0x1ACD
    48f8:	30 91 ce 1a 	lds	r19, 0x1ACE
    48fc:	28 0f       	add	r18, r24
    48fe:	39 1f       	adc	r19, r25
    4900:	89 81       	ldd	r24, Y+1	; 0x01
    4902:	9a 81       	ldd	r25, Y+2	; 0x02
    4904:	82 17       	cp	r24, r18
    4906:	93 07       	cpc	r25, r19
    4908:	64 f4       	brge	.+24     	; 0x4922 <vTaskSteer+0xa2>
	      setSteeringDirection(-1);
    490a:	8f ef       	ldi	r24, 0xFF	; 255
    490c:	9f ef       	ldi	r25, 0xFF	; 255
    490e:	0e 94 a6 23 	call	0x474c	; 0x474c <setSteeringDirection>
         adjust *= -1;
    4912:	89 81       	ldd	r24, Y+1	; 0x01
    4914:	9a 81       	ldd	r25, Y+2	; 0x02
    4916:	91 95       	neg	r25
    4918:	81 95       	neg	r24
    491a:	91 09       	sbc	r25, r1
    491c:	9a 83       	std	Y+2, r25	; 0x02
    491e:	89 83       	std	Y+1, r24	; 0x01
    4920:	1b c0       	rjmp	.+54     	; 0x4958 <vTaskSteer+0xd8>
	   } else if (adjust > steeringTarget + 3*pConst){
    4922:	2b 81       	ldd	r18, Y+3	; 0x03
    4924:	3c 81       	ldd	r19, Y+4	; 0x04
    4926:	c9 01       	movw	r24, r18
    4928:	88 0f       	add	r24, r24
    492a:	99 1f       	adc	r25, r25
    492c:	28 0f       	add	r18, r24
    492e:	39 1f       	adc	r19, r25
    4930:	80 91 cd 1a 	lds	r24, 0x1ACD
    4934:	90 91 ce 1a 	lds	r25, 0x1ACE
    4938:	28 0f       	add	r18, r24
    493a:	39 1f       	adc	r19, r25
    493c:	89 81       	ldd	r24, Y+1	; 0x01
    493e:	9a 81       	ldd	r25, Y+2	; 0x02
    4940:	28 17       	cp	r18, r24
    4942:	39 07       	cpc	r19, r25
    4944:	2c f4       	brge	.+10     	; 0x4950 <vTaskSteer+0xd0>
	      setSteeringDirection(1);
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	0e 94 a6 23 	call	0x474c	; 0x474c <setSteeringDirection>
    494e:	04 c0       	rjmp	.+8      	; 0x4958 <vTaskSteer+0xd8>
	   } else {
	      setSteeringDirection(0);
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	0e 94 a6 23 	call	0x474c	; 0x474c <setSteeringDirection>
	      //steeringTarget = wheelAngle;
	   }
      setSteeringPWMSpeed(adjust + 50);
    4958:	89 81       	ldd	r24, Y+1	; 0x01
    495a:	9a 81       	ldd	r25, Y+2	; 0x02
    495c:	c2 96       	adiw	r24, 0x32	; 50
    495e:	0e 94 70 23 	call	0x46e0	; 0x46e0 <setSteeringPWMSpeed>
      printNum(adjust + 50);
    4962:	89 81       	ldd	r24, Y+1	; 0x01
    4964:	9a 81       	ldd	r25, Y+2	; 0x02
    4966:	c2 96       	adiw	r24, 0x32	; 50
    4968:	0e 94 b1 18 	call	0x3162	; 0x3162 <printNum>
      USART_Write(' ');
    496c:	80 e2       	ldi	r24, 0x20	; 32
    496e:	0e 94 9a 1a 	call	0x3534	; 0x3534 <USART_Write>
      printWheelAngle();
    4972:	0e 94 17 24 	call	0x482e	; 0x482e <printWheelAngle>
 
	   vTaskDelay(10);
    4976:	8a e0       	ldi	r24, 0x0A	; 10
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
	}
    497e:	9a cf       	rjmp	.-204    	; 0x48b4 <vTaskSteer+0x34>

00004980 <initializeSPI>:
static const int mosi_pin = 2;
static const int miso_pin = 3;
static const int sck_pin = 1;
static const int ss_pin = 0; 

void initializeSPI(){
    4980:	cf 93       	push	r28
    4982:	df 93       	push	r29
    4984:	cd b7       	in	r28, 0x3d	; 61
    4986:	de b7       	in	r29, 0x3e	; 62
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR1)|(1 << SPR0);
    4988:	8c e4       	ldi	r24, 0x4C	; 76
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	23 e5       	ldi	r18, 0x53	; 83
    498e:	fc 01       	movw	r30, r24
    4990:	20 83       	st	Z, r18
	DDRB |= (1 << ss_pin)|(1 << sck_pin)|(1 << mosi_pin);
    4992:	84 e2       	ldi	r24, 0x24	; 36
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	24 e2       	ldi	r18, 0x24	; 36
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	f9 01       	movw	r30, r18
    499c:	20 81       	ld	r18, Z
    499e:	62 2f       	mov	r22, r18
    49a0:	40 e0       	ldi	r20, 0x00	; 0
    49a2:	50 e0       	ldi	r21, 0x00	; 0
    49a4:	21 e0       	ldi	r18, 0x01	; 1
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	02 c0       	rjmp	.+4      	; 0x49ae <initializeSPI+0x2e>
    49aa:	22 0f       	add	r18, r18
    49ac:	33 1f       	adc	r19, r19
    49ae:	4a 95       	dec	r20
    49b0:	e2 f7       	brpl	.-8      	; 0x49aa <initializeSPI+0x2a>
    49b2:	72 2f       	mov	r23, r18
    49b4:	41 e0       	ldi	r20, 0x01	; 1
    49b6:	50 e0       	ldi	r21, 0x00	; 0
    49b8:	21 e0       	ldi	r18, 0x01	; 1
    49ba:	30 e0       	ldi	r19, 0x00	; 0
    49bc:	02 c0       	rjmp	.+4      	; 0x49c2 <initializeSPI+0x42>
    49be:	22 0f       	add	r18, r18
    49c0:	33 1f       	adc	r19, r19
    49c2:	4a 95       	dec	r20
    49c4:	e2 f7       	brpl	.-8      	; 0x49be <initializeSPI+0x3e>
    49c6:	72 2b       	or	r23, r18
    49c8:	42 e0       	ldi	r20, 0x02	; 2
    49ca:	50 e0       	ldi	r21, 0x00	; 0
    49cc:	21 e0       	ldi	r18, 0x01	; 1
    49ce:	30 e0       	ldi	r19, 0x00	; 0
    49d0:	02 c0       	rjmp	.+4      	; 0x49d6 <initializeSPI+0x56>
    49d2:	22 0f       	add	r18, r18
    49d4:	33 1f       	adc	r19, r19
    49d6:	4a 95       	dec	r20
    49d8:	e2 f7       	brpl	.-8      	; 0x49d2 <initializeSPI+0x52>
    49da:	27 2b       	or	r18, r23
    49dc:	26 2b       	or	r18, r22
    49de:	fc 01       	movw	r30, r24
    49e0:	20 83       	st	Z, r18
	DDRB &= ~(1 << miso_pin);
    49e2:	84 e2       	ldi	r24, 0x24	; 36
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	24 e2       	ldi	r18, 0x24	; 36
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	f9 01       	movw	r30, r18
    49ec:	20 81       	ld	r18, Z
    49ee:	62 2f       	mov	r22, r18
    49f0:	43 e0       	ldi	r20, 0x03	; 3
    49f2:	50 e0       	ldi	r21, 0x00	; 0
    49f4:	21 e0       	ldi	r18, 0x01	; 1
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    49f8:	02 c0       	rjmp	.+4      	; 0x49fe <initializeSPI+0x7e>
    49fa:	22 0f       	add	r18, r18
    49fc:	33 1f       	adc	r19, r19
    49fe:	4a 95       	dec	r20
    4a00:	e2 f7       	brpl	.-8      	; 0x49fa <initializeSPI+0x7a>
    4a02:	20 95       	com	r18
    4a04:	26 23       	and	r18, r22
    4a06:	fc 01       	movw	r30, r24
    4a08:	20 83       	st	Z, r18
	PORTB |= 1 << ss_pin;
    4a0a:	85 e2       	ldi	r24, 0x25	; 37
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	25 e2       	ldi	r18, 0x25	; 37
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	f9 01       	movw	r30, r18
    4a14:	20 81       	ld	r18, Z
    4a16:	62 2f       	mov	r22, r18
    4a18:	40 e0       	ldi	r20, 0x00	; 0
    4a1a:	50 e0       	ldi	r21, 0x00	; 0
    4a1c:	21 e0       	ldi	r18, 0x01	; 1
    4a1e:	30 e0       	ldi	r19, 0x00	; 0
    4a20:	02 c0       	rjmp	.+4      	; 0x4a26 <initializeSPI+0xa6>
    4a22:	22 0f       	add	r18, r18
    4a24:	33 1f       	adc	r19, r19
    4a26:	4a 95       	dec	r20
    4a28:	e2 f7       	brpl	.-8      	; 0x4a22 <initializeSPI+0xa2>
    4a2a:	26 2b       	or	r18, r22
    4a2c:	fc 01       	movw	r30, r24
    4a2e:	20 83       	st	Z, r18
	PORTB &= ~(1 << sck_pin);
    4a30:	85 e2       	ldi	r24, 0x25	; 37
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	25 e2       	ldi	r18, 0x25	; 37
    4a36:	30 e0       	ldi	r19, 0x00	; 0
    4a38:	f9 01       	movw	r30, r18
    4a3a:	20 81       	ld	r18, Z
    4a3c:	62 2f       	mov	r22, r18
    4a3e:	41 e0       	ldi	r20, 0x01	; 1
    4a40:	50 e0       	ldi	r21, 0x00	; 0
    4a42:	21 e0       	ldi	r18, 0x01	; 1
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	04 2e       	mov	r0, r20
    4a48:	02 c0       	rjmp	.+4      	; 0x4a4e <initializeSPI+0xce>
    4a4a:	22 0f       	add	r18, r18
    4a4c:	33 1f       	adc	r19, r19
    4a4e:	0a 94       	dec	r0
    4a50:	e2 f7       	brpl	.-8      	; 0x4a4a <initializeSPI+0xca>
    4a52:	20 95       	com	r18
    4a54:	26 23       	and	r18, r22
    4a56:	fc 01       	movw	r30, r24
    4a58:	20 83       	st	Z, r18
}
    4a5a:	df 91       	pop	r29
    4a5c:	cf 91       	pop	r28
    4a5e:	08 95       	ret

00004a60 <SPIsendByte>:

void SPIsendByte(unsigned char byte){
    4a60:	cf 93       	push	r28
    4a62:	df 93       	push	r29
    4a64:	1f 92       	push	r1
    4a66:	cd b7       	in	r28, 0x3d	; 61
    4a68:	de b7       	in	r29, 0x3e	; 62
    4a6a:	89 83       	std	Y+1, r24	; 0x01
	PORTB &= ~(1 << ss_pin);
    4a6c:	85 e2       	ldi	r24, 0x25	; 37
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	25 e2       	ldi	r18, 0x25	; 37
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	f9 01       	movw	r30, r18
    4a76:	20 81       	ld	r18, Z
    4a78:	62 2f       	mov	r22, r18
    4a7a:	40 e0       	ldi	r20, 0x00	; 0
    4a7c:	50 e0       	ldi	r21, 0x00	; 0
    4a7e:	21 e0       	ldi	r18, 0x01	; 1
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	02 c0       	rjmp	.+4      	; 0x4a88 <SPIsendByte+0x28>
    4a84:	22 0f       	add	r18, r18
    4a86:	33 1f       	adc	r19, r19
    4a88:	4a 95       	dec	r20
    4a8a:	e2 f7       	brpl	.-8      	; 0x4a84 <SPIsendByte+0x24>
    4a8c:	20 95       	com	r18
    4a8e:	26 23       	and	r18, r22
    4a90:	fc 01       	movw	r30, r24
    4a92:	20 83       	st	Z, r18
	vTaskDelay(1);
    4a94:	81 e0       	ldi	r24, 0x01	; 1
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
	SPDR = byte;
    4a9c:	8e e4       	ldi	r24, 0x4E	; 78
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	29 81       	ldd	r18, Y+1	; 0x01
    4aa2:	fc 01       	movw	r30, r24
    4aa4:	20 83       	st	Z, r18
	while((SPSR & (1 << SPIF)) == 0)
    4aa6:	00 00       	nop
    4aa8:	8d e4       	ldi	r24, 0x4D	; 77
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	fc 01       	movw	r30, r24
    4aae:	80 81       	ld	r24, Z
    4ab0:	88 23       	and	r24, r24
    4ab2:	d4 f7       	brge	.-12     	; 0x4aa8 <SPIsendByte+0x48>
	;
	vTaskDelay(1);
    4ab4:	81 e0       	ldi	r24, 0x01	; 1
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
	PORTB |= (1 << ss_pin);
    4abc:	85 e2       	ldi	r24, 0x25	; 37
    4abe:	90 e0       	ldi	r25, 0x00	; 0
    4ac0:	25 e2       	ldi	r18, 0x25	; 37
    4ac2:	30 e0       	ldi	r19, 0x00	; 0
    4ac4:	f9 01       	movw	r30, r18
    4ac6:	20 81       	ld	r18, Z
    4ac8:	62 2f       	mov	r22, r18
    4aca:	40 e0       	ldi	r20, 0x00	; 0
    4acc:	50 e0       	ldi	r21, 0x00	; 0
    4ace:	21 e0       	ldi	r18, 0x01	; 1
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	04 2e       	mov	r0, r20
    4ad4:	02 c0       	rjmp	.+4      	; 0x4ada <SPIsendByte+0x7a>
    4ad6:	22 0f       	add	r18, r18
    4ad8:	33 1f       	adc	r19, r19
    4ada:	0a 94       	dec	r0
    4adc:	e2 f7       	brpl	.-8      	; 0x4ad6 <SPIsendByte+0x76>
    4ade:	26 2b       	or	r18, r22
    4ae0:	fc 01       	movw	r30, r24
    4ae2:	20 83       	st	Z, r18

}
    4ae4:	0f 90       	pop	r0
    4ae6:	df 91       	pop	r29
    4ae8:	cf 91       	pop	r28
    4aea:	08 95       	ret

00004aec <SPIsendShort>:

void SPIsendShort(unsigned short data){
    4aec:	cf 93       	push	r28
    4aee:	df 93       	push	r29
    4af0:	1f 92       	push	r1
    4af2:	1f 92       	push	r1
    4af4:	cd b7       	in	r28, 0x3d	; 61
    4af6:	de b7       	in	r29, 0x3e	; 62
    4af8:	9a 83       	std	Y+2, r25	; 0x02
    4afa:	89 83       	std	Y+1, r24	; 0x01
	PORTB &= ~(1 << ss_pin);
    4afc:	85 e2       	ldi	r24, 0x25	; 37
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	25 e2       	ldi	r18, 0x25	; 37
    4b02:	30 e0       	ldi	r19, 0x00	; 0
    4b04:	f9 01       	movw	r30, r18
    4b06:	20 81       	ld	r18, Z
    4b08:	62 2f       	mov	r22, r18
    4b0a:	40 e0       	ldi	r20, 0x00	; 0
    4b0c:	50 e0       	ldi	r21, 0x00	; 0
    4b0e:	21 e0       	ldi	r18, 0x01	; 1
    4b10:	30 e0       	ldi	r19, 0x00	; 0
    4b12:	02 c0       	rjmp	.+4      	; 0x4b18 <SPIsendShort+0x2c>
    4b14:	22 0f       	add	r18, r18
    4b16:	33 1f       	adc	r19, r19
    4b18:	4a 95       	dec	r20
    4b1a:	e2 f7       	brpl	.-8      	; 0x4b14 <SPIsendShort+0x28>
    4b1c:	20 95       	com	r18
    4b1e:	26 23       	and	r18, r22
    4b20:	fc 01       	movw	r30, r24
    4b22:	20 83       	st	Z, r18
	vTaskDelay(2);
    4b24:	82 e0       	ldi	r24, 0x02	; 2
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
	SPDR = (data >> 8);
    4b2c:	8e e4       	ldi	r24, 0x4E	; 78
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	29 81       	ldd	r18, Y+1	; 0x01
    4b32:	3a 81       	ldd	r19, Y+2	; 0x02
    4b34:	23 2f       	mov	r18, r19
    4b36:	33 27       	eor	r19, r19
    4b38:	fc 01       	movw	r30, r24
    4b3a:	20 83       	st	Z, r18
	while((SPSR & (1 << SPIF)) == 0)
    4b3c:	00 00       	nop
    4b3e:	8d e4       	ldi	r24, 0x4D	; 77
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	fc 01       	movw	r30, r24
    4b44:	80 81       	ld	r24, Z
    4b46:	88 23       	and	r24, r24
    4b48:	d4 f7       	brge	.-12     	; 0x4b3e <SPIsendShort+0x52>
	;
	SPDR = data & 0xFF;
    4b4a:	8e e4       	ldi	r24, 0x4E	; 78
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	29 81       	ldd	r18, Y+1	; 0x01
    4b50:	fc 01       	movw	r30, r24
    4b52:	20 83       	st	Z, r18
	while((SPSR & (1 << SPIF)) == 0)
    4b54:	00 00       	nop
    4b56:	8d e4       	ldi	r24, 0x4D	; 77
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	fc 01       	movw	r30, r24
    4b5c:	80 81       	ld	r24, Z
    4b5e:	88 23       	and	r24, r24
    4b60:	d4 f7       	brge	.-12     	; 0x4b56 <SPIsendShort+0x6a>
	;
	vTaskDelay(2);
    4b62:	82 e0       	ldi	r24, 0x02	; 2
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
	PORTB |= (1 << ss_pin);
    4b6a:	85 e2       	ldi	r24, 0x25	; 37
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	25 e2       	ldi	r18, 0x25	; 37
    4b70:	30 e0       	ldi	r19, 0x00	; 0
    4b72:	f9 01       	movw	r30, r18
    4b74:	20 81       	ld	r18, Z
    4b76:	62 2f       	mov	r22, r18
    4b78:	40 e0       	ldi	r20, 0x00	; 0
    4b7a:	50 e0       	ldi	r21, 0x00	; 0
    4b7c:	21 e0       	ldi	r18, 0x01	; 1
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	04 2e       	mov	r0, r20
    4b82:	02 c0       	rjmp	.+4      	; 0x4b88 <SPIsendShort+0x9c>
    4b84:	22 0f       	add	r18, r18
    4b86:	33 1f       	adc	r19, r19
    4b88:	0a 94       	dec	r0
    4b8a:	e2 f7       	brpl	.-8      	; 0x4b84 <SPIsendShort+0x98>
    4b8c:	26 2b       	or	r18, r22
    4b8e:	fc 01       	movw	r30, r24
    4b90:	20 83       	st	Z, r18
}
    4b92:	0f 90       	pop	r0
    4b94:	0f 90       	pop	r0
    4b96:	df 91       	pop	r29
    4b98:	cf 91       	pop	r28
    4b9a:	08 95       	ret

00004b9c <initADC>:
static ADCDevice devices[16];
static int currDevice = 0;
static int ADCinitialized = 0;

//Initialize ADC registers
void initADC(){
    4b9c:	cf 93       	push	r28
    4b9e:	df 93       	push	r29
    4ba0:	cd b7       	in	r28, 0x3d	; 61
    4ba2:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = _BV(ADEN);
    4ba4:	8a e7       	ldi	r24, 0x7A	; 122
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	20 e8       	ldi	r18, 0x80	; 128
    4baa:	fc 01       	movw	r30, r24
    4bac:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0)|(1);
    4bae:	8c e7       	ldi	r24, 0x7C	; 124
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	21 e4       	ldi	r18, 0x41	; 65
    4bb4:	fc 01       	movw	r30, r24
    4bb6:	20 83       	st	Z, r18

	ADCSRB = (1 << MUX5);
    4bb8:	8b e7       	ldi	r24, 0x7B	; 123
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	28 e0       	ldi	r18, 0x08	; 8
    4bbe:	fc 01       	movw	r30, r24
    4bc0:	20 83       	st	Z, r18
	
	//DIDR2 = 0xFF;
}
    4bc2:	df 91       	pop	r29
    4bc4:	cf 91       	pop	r28
    4bc6:	08 95       	ret

00004bc8 <ADCStart>:

//If the ADC isn't running, start it
void ADCStart(ADCDevice* nextDevice) {
    4bc8:	cf 93       	push	r28
    4bca:	df 93       	push	r29
    4bcc:	1f 92       	push	r1
    4bce:	1f 92       	push	r1
    4bd0:	cd b7       	in	r28, 0x3d	; 61
    4bd2:	de b7       	in	r29, 0x3e	; 62
    4bd4:	9a 83       	std	Y+2, r25	; 0x02
    4bd6:	89 83       	std	Y+1, r24	; 0x01

		
	if(!(ADCSRA & _BV(ADSC))){
    4bd8:	8a e7       	ldi	r24, 0x7A	; 122
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	fc 01       	movw	r30, r24
    4bde:	80 81       	ld	r24, Z
    4be0:	88 2f       	mov	r24, r24
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	80 74       	andi	r24, 0x40	; 64
    4be6:	99 27       	eor	r25, r25
    4be8:	00 97       	sbiw	r24, 0x00	; 0
    4bea:	09 f0       	breq	.+2      	; 0x4bee <ADCStart+0x26>
    4bec:	90 c0       	rjmp	.+288    	; 0x4d0e <ADCStart+0x146>
		ADCSRA &= ~((1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0));
    4bee:	8a e7       	ldi	r24, 0x7A	; 122
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	2a e7       	ldi	r18, 0x7A	; 122
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	f9 01       	movw	r30, r18
    4bf8:	20 81       	ld	r18, Z
    4bfa:	28 7f       	andi	r18, 0xF8	; 248
    4bfc:	fc 01       	movw	r30, r24
    4bfe:	20 83       	st	Z, r18
		switch(nextDevice->options & ADC_OPT_PRECISION_MASK){
    4c00:	89 81       	ldd	r24, Y+1	; 0x01
    4c02:	9a 81       	ldd	r25, Y+2	; 0x02
    4c04:	fc 01       	movw	r30, r24
    4c06:	82 81       	ldd	r24, Z+2	; 0x02
    4c08:	93 81       	ldd	r25, Z+3	; 0x03
    4c0a:	83 70       	andi	r24, 0x03	; 3
    4c0c:	99 27       	eor	r25, r25
    4c0e:	81 30       	cpi	r24, 0x01	; 1
    4c10:	91 05       	cpc	r25, r1
    4c12:	a1 f0       	breq	.+40     	; 0x4c3c <ADCStart+0x74>
    4c14:	82 30       	cpi	r24, 0x02	; 2
    4c16:	91 05       	cpc	r25, r1
    4c18:	1c f4       	brge	.+6      	; 0x4c20 <ADCStart+0x58>
    4c1a:	00 97       	sbiw	r24, 0x00	; 0
    4c1c:	29 f0       	breq	.+10     	; 0x4c28 <ADCStart+0x60>
    4c1e:	22 c0       	rjmp	.+68     	; 0x4c64 <ADCStart+0x9c>
    4c20:	82 30       	cpi	r24, 0x02	; 2
    4c22:	91 05       	cpc	r25, r1
    4c24:	a9 f0       	breq	.+42     	; 0x4c50 <ADCStart+0x88>
			break;
		case ADC_OPT_PRECISION_MED:
			ADCSRA |= (1 << ADPS1)|(1 << ADPS0);
			break;
		case ADC_OPT_PRECISION_LOW:
			break;
    4c26:	1e c0       	rjmp	.+60     	; 0x4c64 <ADCStart+0x9c>
		
	if(!(ADCSRA & _BV(ADSC))){
		ADCSRA &= ~((1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0));
		switch(nextDevice->options & ADC_OPT_PRECISION_MASK){
		case ADC_OPT_PRECISION_HIGH:
			ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
    4c28:	8a e7       	ldi	r24, 0x7A	; 122
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	2a e7       	ldi	r18, 0x7A	; 122
    4c2e:	30 e0       	ldi	r19, 0x00	; 0
    4c30:	f9 01       	movw	r30, r18
    4c32:	20 81       	ld	r18, Z
    4c34:	27 60       	ori	r18, 0x07	; 7
    4c36:	fc 01       	movw	r30, r24
    4c38:	20 83       	st	Z, r18
			break;
    4c3a:	14 c0       	rjmp	.+40     	; 0x4c64 <ADCStart+0x9c>
		case ADC_OPT_PRECISION_MED_HIGH:
			ADCSRA |= (1 << ADPS2)|(1 << ADPS0);
    4c3c:	8a e7       	ldi	r24, 0x7A	; 122
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	2a e7       	ldi	r18, 0x7A	; 122
    4c42:	30 e0       	ldi	r19, 0x00	; 0
    4c44:	f9 01       	movw	r30, r18
    4c46:	20 81       	ld	r18, Z
    4c48:	25 60       	ori	r18, 0x05	; 5
    4c4a:	fc 01       	movw	r30, r24
    4c4c:	20 83       	st	Z, r18
			break;
    4c4e:	0a c0       	rjmp	.+20     	; 0x4c64 <ADCStart+0x9c>
		case ADC_OPT_PRECISION_MED:
			ADCSRA |= (1 << ADPS1)|(1 << ADPS0);
    4c50:	8a e7       	ldi	r24, 0x7A	; 122
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	2a e7       	ldi	r18, 0x7A	; 122
    4c56:	30 e0       	ldi	r19, 0x00	; 0
    4c58:	f9 01       	movw	r30, r18
    4c5a:	20 81       	ld	r18, Z
    4c5c:	23 60       	ori	r18, 0x03	; 3
    4c5e:	fc 01       	movw	r30, r24
    4c60:	20 83       	st	Z, r18
			break;
    4c62:	00 00       	nop
		case ADC_OPT_PRECISION_LOW:
			break;
		}
		ADMUX &= ~((1 << MUX0)|(1 << MUX1)|(1 << MUX2)|(1 << MUX3));
    4c64:	8c e7       	ldi	r24, 0x7C	; 124
    4c66:	90 e0       	ldi	r25, 0x00	; 0
    4c68:	2c e7       	ldi	r18, 0x7C	; 124
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	f9 01       	movw	r30, r18
    4c6e:	20 81       	ld	r18, Z
    4c70:	20 7f       	andi	r18, 0xF0	; 240
    4c72:	fc 01       	movw	r30, r24
    4c74:	20 83       	st	Z, r18
		if(nextDevice->port < 8){
    4c76:	89 81       	ldd	r24, Y+1	; 0x01
    4c78:	9a 81       	ldd	r25, Y+2	; 0x02
    4c7a:	fc 01       	movw	r30, r24
    4c7c:	80 81       	ld	r24, Z
    4c7e:	91 81       	ldd	r25, Z+1	; 0x01
    4c80:	88 30       	cpi	r24, 0x08	; 8
    4c82:	91 05       	cpc	r25, r1
    4c84:	cc f4       	brge	.+50     	; 0x4cb8 <ADCStart+0xf0>
			ADCSRB &= ~(1 << MUX5);
    4c86:	8b e7       	ldi	r24, 0x7B	; 123
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	2b e7       	ldi	r18, 0x7B	; 123
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	f9 01       	movw	r30, r18
    4c90:	20 81       	ld	r18, Z
    4c92:	27 7f       	andi	r18, 0xF7	; 247
    4c94:	fc 01       	movw	r30, r24
    4c96:	20 83       	st	Z, r18
			ADMUX |= nextDevice->port;
    4c98:	8c e7       	ldi	r24, 0x7C	; 124
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	2c e7       	ldi	r18, 0x7C	; 124
    4c9e:	30 e0       	ldi	r19, 0x00	; 0
    4ca0:	f9 01       	movw	r30, r18
    4ca2:	20 81       	ld	r18, Z
    4ca4:	42 2f       	mov	r20, r18
    4ca6:	29 81       	ldd	r18, Y+1	; 0x01
    4ca8:	3a 81       	ldd	r19, Y+2	; 0x02
    4caa:	f9 01       	movw	r30, r18
    4cac:	20 81       	ld	r18, Z
    4cae:	31 81       	ldd	r19, Z+1	; 0x01
    4cb0:	24 2b       	or	r18, r20
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	20 83       	st	Z, r18
    4cb6:	19 c0       	rjmp	.+50     	; 0x4cea <ADCStart+0x122>
		} else {
			ADCSRB |= (1 << MUX5);
    4cb8:	8b e7       	ldi	r24, 0x7B	; 123
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	2b e7       	ldi	r18, 0x7B	; 123
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	f9 01       	movw	r30, r18
    4cc2:	20 81       	ld	r18, Z
    4cc4:	28 60       	ori	r18, 0x08	; 8
    4cc6:	fc 01       	movw	r30, r24
    4cc8:	20 83       	st	Z, r18
			ADMUX |= nextDevice->port - 8;
    4cca:	8c e7       	ldi	r24, 0x7C	; 124
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	2c e7       	ldi	r18, 0x7C	; 124
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	f9 01       	movw	r30, r18
    4cd4:	20 81       	ld	r18, Z
    4cd6:	42 2f       	mov	r20, r18
    4cd8:	29 81       	ldd	r18, Y+1	; 0x01
    4cda:	3a 81       	ldd	r19, Y+2	; 0x02
    4cdc:	f9 01       	movw	r30, r18
    4cde:	20 81       	ld	r18, Z
    4ce0:	31 81       	ldd	r19, Z+1	; 0x01
    4ce2:	28 50       	subi	r18, 0x08	; 8
    4ce4:	24 2b       	or	r18, r20
    4ce6:	fc 01       	movw	r30, r24
    4ce8:	20 83       	st	Z, r18
		}
		
		ADCSRA |= _BV(ADIE);
    4cea:	8a e7       	ldi	r24, 0x7A	; 122
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	2a e7       	ldi	r18, 0x7A	; 122
    4cf0:	30 e0       	ldi	r19, 0x00	; 0
    4cf2:	f9 01       	movw	r30, r18
    4cf4:	20 81       	ld	r18, Z
    4cf6:	28 60       	ori	r18, 0x08	; 8
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	20 83       	st	Z, r18
		ADCSRA |= _BV(ADSC);
    4cfc:	8a e7       	ldi	r24, 0x7A	; 122
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	2a e7       	ldi	r18, 0x7A	; 122
    4d02:	30 e0       	ldi	r19, 0x00	; 0
    4d04:	f9 01       	movw	r30, r18
    4d06:	20 81       	ld	r18, Z
    4d08:	20 64       	ori	r18, 0x40	; 64
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	20 83       	st	Z, r18
	}
}
    4d0e:	0f 90       	pop	r0
    4d10:	0f 90       	pop	r0
    4d12:	df 91       	pop	r29
    4d14:	cf 91       	pop	r28
    4d16:	08 95       	ret

00004d18 <__vector_29>:

//Read the finished value of the ADC and store it
ISR(ADC_vect) {
    4d18:	1f 92       	push	r1
    4d1a:	0f 92       	push	r0
    4d1c:	00 90 5f 00 	lds	r0, 0x005F
    4d20:	0f 92       	push	r0
    4d22:	11 24       	eor	r1, r1
    4d24:	00 90 5b 00 	lds	r0, 0x005B
    4d28:	0f 92       	push	r0
    4d2a:	2f 93       	push	r18
    4d2c:	3f 93       	push	r19
    4d2e:	4f 93       	push	r20
    4d30:	5f 93       	push	r21
    4d32:	6f 93       	push	r22
    4d34:	7f 93       	push	r23
    4d36:	8f 93       	push	r24
    4d38:	9f 93       	push	r25
    4d3a:	af 93       	push	r26
    4d3c:	bf 93       	push	r27
    4d3e:	ef 93       	push	r30
    4d40:	ff 93       	push	r31
    4d42:	cf 93       	push	r28
    4d44:	df 93       	push	r29
    4d46:	00 d0       	rcall	.+0      	; 0x4d48 <__vector_29+0x30>
    4d48:	00 d0       	rcall	.+0      	; 0x4d4a <__vector_29+0x32>
    4d4a:	cd b7       	in	r28, 0x3d	; 61
    4d4c:	de b7       	in	r29, 0x3e	; 62
	int result = ADCL;
    4d4e:	88 e7       	ldi	r24, 0x78	; 120
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	fc 01       	movw	r30, r24
    4d54:	80 81       	ld	r24, Z
    4d56:	88 2f       	mov	r24, r24
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	9a 83       	std	Y+2, r25	; 0x02
    4d5c:	89 83       	std	Y+1, r24	; 0x01
	result |= (ADCH << 8);
    4d5e:	89 e7       	ldi	r24, 0x79	; 121
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	fc 01       	movw	r30, r24
    4d64:	80 81       	ld	r24, Z
    4d66:	88 2f       	mov	r24, r24
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	98 2f       	mov	r25, r24
    4d6c:	88 27       	eor	r24, r24
    4d6e:	29 81       	ldd	r18, Y+1	; 0x01
    4d70:	3a 81       	ldd	r19, Y+2	; 0x02
    4d72:	82 2b       	or	r24, r18
    4d74:	93 2b       	or	r25, r19
    4d76:	9a 83       	std	Y+2, r25	; 0x02
    4d78:	89 83       	std	Y+1, r24	; 0x01
	
	ADCHandler handler = devices[currDevice].handler;
    4d7a:	80 91 57 1b 	lds	r24, 0x1B57
    4d7e:	90 91 58 1b 	lds	r25, 0x1B58
    4d82:	88 0f       	add	r24, r24
    4d84:	99 1f       	adc	r25, r25
    4d86:	88 0f       	add	r24, r24
    4d88:	99 1f       	adc	r25, r25
    4d8a:	88 0f       	add	r24, r24
    4d8c:	99 1f       	adc	r25, r25
    4d8e:	83 52       	subi	r24, 0x23	; 35
    4d90:	95 4e       	sbci	r25, 0xE5	; 229
    4d92:	fc 01       	movw	r30, r24
    4d94:	80 81       	ld	r24, Z
    4d96:	91 81       	ldd	r25, Z+1	; 0x01
    4d98:	9c 83       	std	Y+4, r25	; 0x04
    4d9a:	8b 83       	std	Y+3, r24	; 0x03
	void *parameters = devices[currDevice].parameters;
    4d9c:	80 91 57 1b 	lds	r24, 0x1B57
    4da0:	90 91 58 1b 	lds	r25, 0x1B58
    4da4:	88 0f       	add	r24, r24
    4da6:	99 1f       	adc	r25, r25
    4da8:	88 0f       	add	r24, r24
    4daa:	99 1f       	adc	r25, r25
    4dac:	88 0f       	add	r24, r24
    4dae:	99 1f       	adc	r25, r25
    4db0:	85 52       	subi	r24, 0x25	; 37
    4db2:	95 4e       	sbci	r25, 0xE5	; 229
    4db4:	fc 01       	movw	r30, r24
    4db6:	80 81       	ld	r24, Z
    4db8:	91 81       	ldd	r25, Z+1	; 0x01
    4dba:	9e 83       	std	Y+6, r25	; 0x06
    4dbc:	8d 83       	std	Y+5, r24	; 0x05
	
	handler(result,parameters);
    4dbe:	4d 81       	ldd	r20, Y+5	; 0x05
    4dc0:	5e 81       	ldd	r21, Y+6	; 0x06
    4dc2:	89 81       	ldd	r24, Y+1	; 0x01
    4dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc6:	2b 81       	ldd	r18, Y+3	; 0x03
    4dc8:	3c 81       	ldd	r19, Y+4	; 0x04
    4dca:	ba 01       	movw	r22, r20
    4dcc:	f9 01       	movw	r30, r18
    4dce:	19 95       	eicall
	
	ADCSRA &= ~(_BV(ADIE));
    4dd0:	8a e7       	ldi	r24, 0x7A	; 122
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	2a e7       	ldi	r18, 0x7A	; 122
    4dd6:	30 e0       	ldi	r19, 0x00	; 0
    4dd8:	f9 01       	movw	r30, r18
    4dda:	20 81       	ld	r18, Z
    4ddc:	27 7f       	andi	r18, 0xF7	; 247
    4dde:	fc 01       	movw	r30, r24
    4de0:	20 83       	st	Z, r18
	
	xSemaphoreGiveFromISR(adcSemaphore,0);
    4de2:	80 91 d5 1a 	lds	r24, 0x1AD5
    4de6:	90 91 d6 1a 	lds	r25, 0x1AD6
    4dea:	20 e0       	ldi	r18, 0x00	; 0
    4dec:	40 e0       	ldi	r20, 0x00	; 0
    4dee:	50 e0       	ldi	r21, 0x00	; 0
    4df0:	60 e0       	ldi	r22, 0x00	; 0
    4df2:	70 e0       	ldi	r23, 0x00	; 0
    4df4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <xQueueGenericSendFromISR>
}
    4df8:	26 96       	adiw	r28, 0x06	; 6
    4dfa:	0f b6       	in	r0, 0x3f	; 63
    4dfc:	f8 94       	cli
    4dfe:	de bf       	out	0x3e, r29	; 62
    4e00:	0f be       	out	0x3f, r0	; 63
    4e02:	cd bf       	out	0x3d, r28	; 61
    4e04:	df 91       	pop	r29
    4e06:	cf 91       	pop	r28
    4e08:	ff 91       	pop	r31
    4e0a:	ef 91       	pop	r30
    4e0c:	bf 91       	pop	r27
    4e0e:	af 91       	pop	r26
    4e10:	9f 91       	pop	r25
    4e12:	8f 91       	pop	r24
    4e14:	7f 91       	pop	r23
    4e16:	6f 91       	pop	r22
    4e18:	5f 91       	pop	r21
    4e1a:	4f 91       	pop	r20
    4e1c:	3f 91       	pop	r19
    4e1e:	2f 91       	pop	r18
    4e20:	0f 90       	pop	r0
    4e22:	00 92 5b 00 	sts	0x005B, r0
    4e26:	0f 90       	pop	r0
    4e28:	00 92 5f 00 	sts	0x005F, r0
    4e2c:	0f 90       	pop	r0
    4e2e:	1f 90       	pop	r1
    4e30:	18 95       	reti

00004e32 <vTaskADC>:

void vTaskADC(void *parameters){
    4e32:	cf 93       	push	r28
    4e34:	df 93       	push	r29
    4e36:	00 d0       	rcall	.+0      	; 0x4e38 <vTaskADC+0x6>
    4e38:	1f 92       	push	r1
    4e3a:	cd b7       	in	r28, 0x3d	; 61
    4e3c:	de b7       	in	r29, 0x3e	; 62
    4e3e:	9c 83       	std	Y+4, r25	; 0x04
    4e40:	8b 83       	std	Y+3, r24	; 0x03
	
	int i;

	for(i = 0;i < 16; i++){
    4e42:	1a 82       	std	Y+2, r1	; 0x02
    4e44:	19 82       	std	Y+1, r1	; 0x01
    4e46:	14 c0       	rjmp	.+40     	; 0x4e70 <vTaskADC+0x3e>
		devices[i].port = -1;
    4e48:	89 81       	ldd	r24, Y+1	; 0x01
    4e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e4c:	88 0f       	add	r24, r24
    4e4e:	99 1f       	adc	r25, r25
    4e50:	88 0f       	add	r24, r24
    4e52:	99 1f       	adc	r25, r25
    4e54:	88 0f       	add	r24, r24
    4e56:	99 1f       	adc	r25, r25
    4e58:	89 52       	subi	r24, 0x29	; 41
    4e5a:	95 4e       	sbci	r25, 0xE5	; 229
    4e5c:	2f ef       	ldi	r18, 0xFF	; 255
    4e5e:	3f ef       	ldi	r19, 0xFF	; 255
    4e60:	fc 01       	movw	r30, r24
    4e62:	31 83       	std	Z+1, r19	; 0x01
    4e64:	20 83       	st	Z, r18

void vTaskADC(void *parameters){
	
	int i;

	for(i = 0;i < 16; i++){
    4e66:	89 81       	ldd	r24, Y+1	; 0x01
    4e68:	9a 81       	ldd	r25, Y+2	; 0x02
    4e6a:	01 96       	adiw	r24, 0x01	; 1
    4e6c:	9a 83       	std	Y+2, r25	; 0x02
    4e6e:	89 83       	std	Y+1, r24	; 0x01
    4e70:	89 81       	ldd	r24, Y+1	; 0x01
    4e72:	9a 81       	ldd	r25, Y+2	; 0x02
    4e74:	80 31       	cpi	r24, 0x10	; 16
    4e76:	91 05       	cpc	r25, r1
    4e78:	3c f3       	brlt	.-50     	; 0x4e48 <vTaskADC+0x16>
		devices[i].port = -1;
	}

	initADC();
    4e7a:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <initADC>

	vSemaphoreCreateBinary(adcSemaphore);
    4e7e:	43 e0       	ldi	r20, 0x03	; 3
    4e80:	60 e0       	ldi	r22, 0x00	; 0
    4e82:	81 e0       	ldi	r24, 0x01	; 1
    4e84:	0e 94 9b 0a 	call	0x1536	; 0x1536 <xQueueGenericCreate>
    4e88:	90 93 d6 1a 	sts	0x1AD6, r25
    4e8c:	80 93 d5 1a 	sts	0x1AD5, r24
    4e90:	80 91 d5 1a 	lds	r24, 0x1AD5
    4e94:	90 91 d6 1a 	lds	r25, 0x1AD6
    4e98:	00 97       	sbiw	r24, 0x00	; 0
    4e9a:	59 f0       	breq	.+22     	; 0x4eb2 <vTaskADC+0x80>
    4e9c:	80 91 d5 1a 	lds	r24, 0x1AD5
    4ea0:	90 91 d6 1a 	lds	r25, 0x1AD6
    4ea4:	20 e0       	ldi	r18, 0x00	; 0
    4ea6:	40 e0       	ldi	r20, 0x00	; 0
    4ea8:	50 e0       	ldi	r21, 0x00	; 0
    4eaa:	60 e0       	ldi	r22, 0x00	; 0
    4eac:	70 e0       	ldi	r23, 0x00	; 0
    4eae:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <xQueueGenericSend>
	
	ADCinitialized = 1;
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	90 93 5a 1b 	sts	0x1B5A, r25
    4eba:	80 93 59 1b 	sts	0x1B59, r24
	while(devices[0].port == -1){
    4ebe:	04 c0       	rjmp	.+8      	; 0x4ec8 <vTaskADC+0x96>
		vTaskDelay(10);
    4ec0:	8a e0       	ldi	r24, 0x0A	; 10
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
	initADC();

	vSemaphoreCreateBinary(adcSemaphore);
	
	ADCinitialized = 1;
	while(devices[0].port == -1){
    4ec8:	80 91 d7 1a 	lds	r24, 0x1AD7
    4ecc:	90 91 d8 1a 	lds	r25, 0x1AD8
    4ed0:	8f 3f       	cpi	r24, 0xFF	; 255
    4ed2:	ff ef       	ldi	r31, 0xFF	; 255
    4ed4:	9f 07       	cpc	r25, r31
    4ed6:	a1 f3       	breq	.-24     	; 0x4ec0 <vTaskADC+0x8e>
		vTaskDelay(10);
	}
	
	while(1){
		ADCStart(&devices[currDevice]);
    4ed8:	80 91 57 1b 	lds	r24, 0x1B57
    4edc:	90 91 58 1b 	lds	r25, 0x1B58
    4ee0:	88 0f       	add	r24, r24
    4ee2:	99 1f       	adc	r25, r25
    4ee4:	88 0f       	add	r24, r24
    4ee6:	99 1f       	adc	r25, r25
    4ee8:	88 0f       	add	r24, r24
    4eea:	99 1f       	adc	r25, r25
    4eec:	89 52       	subi	r24, 0x29	; 41
    4eee:	95 4e       	sbci	r25, 0xE5	; 229
    4ef0:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <ADCStart>
		currDevice++;
    4ef4:	80 91 57 1b 	lds	r24, 0x1B57
    4ef8:	90 91 58 1b 	lds	r25, 0x1B58
    4efc:	01 96       	adiw	r24, 0x01	; 1
    4efe:	90 93 58 1b 	sts	0x1B58, r25
    4f02:	80 93 57 1b 	sts	0x1B57, r24
		if(currDevice >= 16 || devices[currDevice].port == -1){
    4f06:	80 91 57 1b 	lds	r24, 0x1B57
    4f0a:	90 91 58 1b 	lds	r25, 0x1B58
    4f0e:	80 31       	cpi	r24, 0x10	; 16
    4f10:	91 05       	cpc	r25, r1
    4f12:	9c f4       	brge	.+38     	; 0x4f3a <vTaskADC+0x108>
    4f14:	80 91 57 1b 	lds	r24, 0x1B57
    4f18:	90 91 58 1b 	lds	r25, 0x1B58
    4f1c:	88 0f       	add	r24, r24
    4f1e:	99 1f       	adc	r25, r25
    4f20:	88 0f       	add	r24, r24
    4f22:	99 1f       	adc	r25, r25
    4f24:	88 0f       	add	r24, r24
    4f26:	99 1f       	adc	r25, r25
    4f28:	89 52       	subi	r24, 0x29	; 41
    4f2a:	95 4e       	sbci	r25, 0xE5	; 229
    4f2c:	fc 01       	movw	r30, r24
    4f2e:	80 81       	ld	r24, Z
    4f30:	91 81       	ldd	r25, Z+1	; 0x01
    4f32:	8f 3f       	cpi	r24, 0xFF	; 255
    4f34:	ff ef       	ldi	r31, 0xFF	; 255
    4f36:	9f 07       	cpc	r25, r31
    4f38:	21 f4       	brne	.+8      	; 0x4f42 <vTaskADC+0x110>
			currDevice = 0;
    4f3a:	10 92 58 1b 	sts	0x1B58, r1
    4f3e:	10 92 57 1b 	sts	0x1B57, r1
		}
		xSemaphoreTake(adcSemaphore,portMAX_DELAY);
    4f42:	80 91 d5 1a 	lds	r24, 0x1AD5
    4f46:	90 91 d6 1a 	lds	r25, 0x1AD6
    4f4a:	20 e0       	ldi	r18, 0x00	; 0
    4f4c:	4f ef       	ldi	r20, 0xFF	; 255
    4f4e:	5f ef       	ldi	r21, 0xFF	; 255
    4f50:	60 e0       	ldi	r22, 0x00	; 0
    4f52:	70 e0       	ldi	r23, 0x00	; 0
    4f54:	0e 94 4f 0c 	call	0x189e	; 0x189e <xQueueGenericReceive>
	}
    4f58:	bf cf       	rjmp	.-130    	; 0x4ed8 <vTaskADC+0xa6>

00004f5a <addADCDevice>:
}

void addADCDevice(int port,int options,ADCHandler handler,void* parameters){
    4f5a:	cf 93       	push	r28
    4f5c:	df 93       	push	r29
    4f5e:	cd b7       	in	r28, 0x3d	; 61
    4f60:	de b7       	in	r29, 0x3e	; 62
    4f62:	2a 97       	sbiw	r28, 0x0a	; 10
    4f64:	0f b6       	in	r0, 0x3f	; 63
    4f66:	f8 94       	cli
    4f68:	de bf       	out	0x3e, r29	; 62
    4f6a:	0f be       	out	0x3f, r0	; 63
    4f6c:	cd bf       	out	0x3d, r28	; 61
    4f6e:	9c 83       	std	Y+4, r25	; 0x04
    4f70:	8b 83       	std	Y+3, r24	; 0x03
    4f72:	7e 83       	std	Y+6, r23	; 0x06
    4f74:	6d 83       	std	Y+5, r22	; 0x05
    4f76:	58 87       	std	Y+8, r21	; 0x08
    4f78:	4f 83       	std	Y+7, r20	; 0x07
    4f7a:	3a 87       	std	Y+10, r19	; 0x0a
    4f7c:	29 87       	std	Y+9, r18	; 0x09
	int i;
	
	//Creating a device before all the structures are initialized
	//could lead to race conditions.
	while(ADCinitialized == 0) vTaskDelay(3);
    4f7e:	04 c0       	rjmp	.+8      	; 0x4f88 <addADCDevice+0x2e>
    4f80:	83 e0       	ldi	r24, 0x03	; 3
    4f82:	90 e0       	ldi	r25, 0x00	; 0
    4f84:	0e 94 24 02 	call	0x448	; 0x448 <vTaskDelay>
    4f88:	80 91 59 1b 	lds	r24, 0x1B59
    4f8c:	90 91 5a 1b 	lds	r25, 0x1B5A
    4f90:	00 97       	sbiw	r24, 0x00	; 0
    4f92:	b1 f3       	breq	.-20     	; 0x4f80 <addADCDevice+0x26>

	for(i = 0; i < 16 && devices[i].port != -1; i++)
    4f94:	1a 82       	std	Y+2, r1	; 0x02
    4f96:	19 82       	std	Y+1, r1	; 0x01
    4f98:	05 c0       	rjmp	.+10     	; 0x4fa4 <addADCDevice+0x4a>
    4f9a:	89 81       	ldd	r24, Y+1	; 0x01
    4f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f9e:	01 96       	adiw	r24, 0x01	; 1
    4fa0:	9a 83       	std	Y+2, r25	; 0x02
    4fa2:	89 83       	std	Y+1, r24	; 0x01
    4fa4:	89 81       	ldd	r24, Y+1	; 0x01
    4fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa8:	80 31       	cpi	r24, 0x10	; 16
    4faa:	91 05       	cpc	r25, r1
    4fac:	8c f4       	brge	.+34     	; 0x4fd0 <addADCDevice+0x76>
    4fae:	89 81       	ldd	r24, Y+1	; 0x01
    4fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb2:	88 0f       	add	r24, r24
    4fb4:	99 1f       	adc	r25, r25
    4fb6:	88 0f       	add	r24, r24
    4fb8:	99 1f       	adc	r25, r25
    4fba:	88 0f       	add	r24, r24
    4fbc:	99 1f       	adc	r25, r25
    4fbe:	89 52       	subi	r24, 0x29	; 41
    4fc0:	95 4e       	sbci	r25, 0xE5	; 229
    4fc2:	fc 01       	movw	r30, r24
    4fc4:	80 81       	ld	r24, Z
    4fc6:	91 81       	ldd	r25, Z+1	; 0x01
    4fc8:	8f 3f       	cpi	r24, 0xFF	; 255
    4fca:	ff ef       	ldi	r31, 0xFF	; 255
    4fcc:	9f 07       	cpc	r25, r31
    4fce:	29 f7       	brne	.-54     	; 0x4f9a <addADCDevice+0x40>
	;
	
	if(port < 8){
    4fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    4fd4:	88 30       	cpi	r24, 0x08	; 8
    4fd6:	91 05       	cpc	r25, r1
    4fd8:	a4 f4       	brge	.+40     	; 0x5002 <addADCDevice+0xa8>
		DIDR0 &= ~(1 << port);
    4fda:	8e e7       	ldi	r24, 0x7E	; 126
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	2e e7       	ldi	r18, 0x7E	; 126
    4fe0:	30 e0       	ldi	r19, 0x00	; 0
    4fe2:	f9 01       	movw	r30, r18
    4fe4:	20 81       	ld	r18, Z
    4fe6:	42 2f       	mov	r20, r18
    4fe8:	21 e0       	ldi	r18, 0x01	; 1
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	0b 80       	ldd	r0, Y+3	; 0x03
    4fee:	02 c0       	rjmp	.+4      	; 0x4ff4 <addADCDevice+0x9a>
    4ff0:	22 0f       	add	r18, r18
    4ff2:	33 1f       	adc	r19, r19
    4ff4:	0a 94       	dec	r0
    4ff6:	e2 f7       	brpl	.-8      	; 0x4ff0 <addADCDevice+0x96>
    4ff8:	20 95       	com	r18
    4ffa:	24 23       	and	r18, r20
    4ffc:	fc 01       	movw	r30, r24
    4ffe:	20 83       	st	Z, r18
    5000:	18 c0       	rjmp	.+48     	; 0x5032 <addADCDevice+0xd8>
	} else {
		DIDR2 &= ~(1 << (port - 8));
    5002:	8d e7       	ldi	r24, 0x7D	; 125
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	2d e7       	ldi	r18, 0x7D	; 125
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	f9 01       	movw	r30, r18
    500c:	20 81       	ld	r18, Z
    500e:	62 2f       	mov	r22, r18
    5010:	2b 81       	ldd	r18, Y+3	; 0x03
    5012:	3c 81       	ldd	r19, Y+4	; 0x04
    5014:	a9 01       	movw	r20, r18
    5016:	48 50       	subi	r20, 0x08	; 8
    5018:	51 09       	sbc	r21, r1
    501a:	21 e0       	ldi	r18, 0x01	; 1
    501c:	30 e0       	ldi	r19, 0x00	; 0
    501e:	04 2e       	mov	r0, r20
    5020:	02 c0       	rjmp	.+4      	; 0x5026 <addADCDevice+0xcc>
    5022:	22 0f       	add	r18, r18
    5024:	33 1f       	adc	r19, r19
    5026:	0a 94       	dec	r0
    5028:	e2 f7       	brpl	.-8      	; 0x5022 <addADCDevice+0xc8>
    502a:	20 95       	com	r18
    502c:	26 23       	and	r18, r22
    502e:	fc 01       	movw	r30, r24
    5030:	20 83       	st	Z, r18
	}

	if(devices[i].port == -1){
    5032:	89 81       	ldd	r24, Y+1	; 0x01
    5034:	9a 81       	ldd	r25, Y+2	; 0x02
    5036:	88 0f       	add	r24, r24
    5038:	99 1f       	adc	r25, r25
    503a:	88 0f       	add	r24, r24
    503c:	99 1f       	adc	r25, r25
    503e:	88 0f       	add	r24, r24
    5040:	99 1f       	adc	r25, r25
    5042:	89 52       	subi	r24, 0x29	; 41
    5044:	95 4e       	sbci	r25, 0xE5	; 229
    5046:	fc 01       	movw	r30, r24
    5048:	80 81       	ld	r24, Z
    504a:	91 81       	ldd	r25, Z+1	; 0x01
    504c:	8f 3f       	cpi	r24, 0xFF	; 255
    504e:	ff ef       	ldi	r31, 0xFF	; 255
    5050:	9f 07       	cpc	r25, r31
    5052:	e1 f5       	brne	.+120    	; 0x50cc <addADCDevice+0x172>
		devices[i].port = port;
    5054:	89 81       	ldd	r24, Y+1	; 0x01
    5056:	9a 81       	ldd	r25, Y+2	; 0x02
    5058:	88 0f       	add	r24, r24
    505a:	99 1f       	adc	r25, r25
    505c:	88 0f       	add	r24, r24
    505e:	99 1f       	adc	r25, r25
    5060:	88 0f       	add	r24, r24
    5062:	99 1f       	adc	r25, r25
    5064:	89 52       	subi	r24, 0x29	; 41
    5066:	95 4e       	sbci	r25, 0xE5	; 229
    5068:	2b 81       	ldd	r18, Y+3	; 0x03
    506a:	3c 81       	ldd	r19, Y+4	; 0x04
    506c:	fc 01       	movw	r30, r24
    506e:	31 83       	std	Z+1, r19	; 0x01
    5070:	20 83       	st	Z, r18
		devices[i].options = options;
    5072:	89 81       	ldd	r24, Y+1	; 0x01
    5074:	9a 81       	ldd	r25, Y+2	; 0x02
    5076:	88 0f       	add	r24, r24
    5078:	99 1f       	adc	r25, r25
    507a:	88 0f       	add	r24, r24
    507c:	99 1f       	adc	r25, r25
    507e:	88 0f       	add	r24, r24
    5080:	99 1f       	adc	r25, r25
    5082:	87 52       	subi	r24, 0x27	; 39
    5084:	95 4e       	sbci	r25, 0xE5	; 229
    5086:	2d 81       	ldd	r18, Y+5	; 0x05
    5088:	3e 81       	ldd	r19, Y+6	; 0x06
    508a:	fc 01       	movw	r30, r24
    508c:	31 83       	std	Z+1, r19	; 0x01
    508e:	20 83       	st	Z, r18
		devices[i].handler = handler;
    5090:	89 81       	ldd	r24, Y+1	; 0x01
    5092:	9a 81       	ldd	r25, Y+2	; 0x02
    5094:	88 0f       	add	r24, r24
    5096:	99 1f       	adc	r25, r25
    5098:	88 0f       	add	r24, r24
    509a:	99 1f       	adc	r25, r25
    509c:	88 0f       	add	r24, r24
    509e:	99 1f       	adc	r25, r25
    50a0:	83 52       	subi	r24, 0x23	; 35
    50a2:	95 4e       	sbci	r25, 0xE5	; 229
    50a4:	2f 81       	ldd	r18, Y+7	; 0x07
    50a6:	38 85       	ldd	r19, Y+8	; 0x08
    50a8:	fc 01       	movw	r30, r24
    50aa:	31 83       	std	Z+1, r19	; 0x01
    50ac:	20 83       	st	Z, r18
		devices[i].parameters = parameters;
    50ae:	89 81       	ldd	r24, Y+1	; 0x01
    50b0:	9a 81       	ldd	r25, Y+2	; 0x02
    50b2:	88 0f       	add	r24, r24
    50b4:	99 1f       	adc	r25, r25
    50b6:	88 0f       	add	r24, r24
    50b8:	99 1f       	adc	r25, r25
    50ba:	88 0f       	add	r24, r24
    50bc:	99 1f       	adc	r25, r25
    50be:	85 52       	subi	r24, 0x25	; 37
    50c0:	95 4e       	sbci	r25, 0xE5	; 229
    50c2:	29 85       	ldd	r18, Y+9	; 0x09
    50c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    50c6:	fc 01       	movw	r30, r24
    50c8:	31 83       	std	Z+1, r19	; 0x01
    50ca:	20 83       	st	Z, r18
	}
}
    50cc:	2a 96       	adiw	r28, 0x0a	; 10
    50ce:	0f b6       	in	r0, 0x3f	; 63
    50d0:	f8 94       	cli
    50d2:	de bf       	out	0x3e, r29	; 62
    50d4:	0f be       	out	0x3f, r0	; 63
    50d6:	cd bf       	out	0x3d, r28	; 61
    50d8:	df 91       	pop	r29
    50da:	cf 91       	pop	r28
    50dc:	08 95       	ret

000050de <__umulhisi3>:
    50de:	a2 9f       	mul	r26, r18
    50e0:	b0 01       	movw	r22, r0
    50e2:	b3 9f       	mul	r27, r19
    50e4:	c0 01       	movw	r24, r0
    50e6:	a3 9f       	mul	r26, r19
    50e8:	70 0d       	add	r23, r0
    50ea:	81 1d       	adc	r24, r1
    50ec:	11 24       	eor	r1, r1
    50ee:	91 1d       	adc	r25, r1
    50f0:	b2 9f       	mul	r27, r18
    50f2:	70 0d       	add	r23, r0
    50f4:	81 1d       	adc	r24, r1
    50f6:	11 24       	eor	r1, r1
    50f8:	91 1d       	adc	r25, r1
    50fa:	08 95       	ret

000050fc <__tablejump2__>:
    50fc:	ee 0f       	add	r30, r30
    50fe:	ff 1f       	adc	r31, r31

00005100 <__tablejump__>:
    5100:	05 90       	lpm	r0, Z+
    5102:	f4 91       	lpm	r31, Z
    5104:	e0 2d       	mov	r30, r0
    5106:	19 94       	eijmp

00005108 <memcpy>:
    5108:	fb 01       	movw	r30, r22
    510a:	dc 01       	movw	r26, r24
    510c:	02 c0       	rjmp	.+4      	; 0x5112 <memcpy+0xa>
    510e:	01 90       	ld	r0, Z+
    5110:	0d 92       	st	X+, r0
    5112:	41 50       	subi	r20, 0x01	; 1
    5114:	50 40       	sbci	r21, 0x00	; 0
    5116:	d8 f7       	brcc	.-10     	; 0x510e <memcpy+0x6>
    5118:	08 95       	ret

0000511a <memset>:
    511a:	dc 01       	movw	r26, r24
    511c:	01 c0       	rjmp	.+2      	; 0x5120 <memset+0x6>
    511e:	6d 93       	st	X+, r22
    5120:	41 50       	subi	r20, 0x01	; 1
    5122:	50 40       	sbci	r21, 0x00	; 0
    5124:	e0 f7       	brcc	.-8      	; 0x511e <memset+0x4>
    5126:	08 95       	ret

00005128 <strncpy>:
    5128:	fb 01       	movw	r30, r22
    512a:	dc 01       	movw	r26, r24
    512c:	41 50       	subi	r20, 0x01	; 1
    512e:	50 40       	sbci	r21, 0x00	; 0
    5130:	48 f0       	brcs	.+18     	; 0x5144 <strncpy+0x1c>
    5132:	01 90       	ld	r0, Z+
    5134:	0d 92       	st	X+, r0
    5136:	00 20       	and	r0, r0
    5138:	c9 f7       	brne	.-14     	; 0x512c <strncpy+0x4>
    513a:	01 c0       	rjmp	.+2      	; 0x513e <strncpy+0x16>
    513c:	1d 92       	st	X+, r1
    513e:	41 50       	subi	r20, 0x01	; 1
    5140:	50 40       	sbci	r21, 0x00	; 0
    5142:	e0 f7       	brcc	.-8      	; 0x513c <strncpy+0x14>
    5144:	08 95       	ret

00005146 <_exit>:
    5146:	f8 94       	cli

00005148 <__stop_program>:
    5148:	ff cf       	rjmp	.-2      	; 0x5148 <__stop_program>
