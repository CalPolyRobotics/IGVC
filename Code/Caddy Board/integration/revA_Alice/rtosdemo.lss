
rtosdemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  000040e0  00004174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000040e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000018b5  00800224  00800224  00004198  2**0
                  ALLOC
  3 .stab         00009030  00000000  00000000  00004198  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004a23  00000000  00000000  0000d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00011beb  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
       4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
       8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
       c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      10:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      14:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      18:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      1c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      20:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      24:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      28:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      2c:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <__vector_11>
      30:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      34:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      38:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      3c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      40:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      44:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      48:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      4c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      50:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      54:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      58:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      5c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      60:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      68:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      6c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      70:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      78:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      7c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      80:	0c 94 28 18 	jmp	0x3050	; 0x3050 <__vector_32>
      84:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      88:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      8c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      90:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      94:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      98:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      9c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      a0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      a4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      a8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      ac:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      b0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      b4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      b8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      bc:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      c0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      c4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      c8:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_50>
      cc:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      d0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      d4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      d8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      dc:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      e0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 df 08 	jmp	0x11be	; 0x11be <prvIdleTask>
      e8:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <vTaskSonar>
      ec:	0c 94 25 19 	jmp	0x324a	; 0x324a <vTaskUSARTWrite>
      f0:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <vTaskUSARTRead>
      f4:	0c 94 29 02 	jmp	0x452	; 0x452 <vTaskFunction_1>

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	12 e0       	ldi	r17, 0x02	; 2
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	e0 ee       	ldi	r30, 0xE0	; 224
     110:	f0 e4       	ldi	r31, 0x40	; 64
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	a4 32       	cpi	r26, 0x24	; 36
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	1a e1       	ldi	r17, 0x1A	; 26
     124:	a4 e2       	ldi	r26, 0x24	; 36
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a9 3d       	cpi	r26, 0xD9	; 217
     12e:	b1 07       	cpc	r27, r17
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
     136:	0c 94 6e 20 	jmp	0x40dc	; 0x40dc <_exit>

0000013a <__bad_interrupt>:
     13a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013e <vApplicationTickHook>:
int count = 0;

int sonarTime;

void vApplicationTickHook()
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
    count++;
     146:	80 91 24 02 	lds	r24, 0x0224
     14a:	90 91 25 02 	lds	r25, 0x0225
     14e:	01 96       	adiw	r24, 0x01	; 1
     150:	90 93 25 02 	sts	0x0225, r25
     154:	80 93 24 02 	sts	0x0224, r24
}
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(){
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
	return;
     166:	00 00       	nop
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret

0000016e <main>:
/*-----------------------------------------------------------*/

int main( void )
{
     16e:	af 92       	push	r10
     170:	bf 92       	push	r11
     172:	cf 92       	push	r12
     174:	df 92       	push	r13
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	00 d0       	rcall	.+0      	; 0x182 <main+0x14>
     182:	00 d0       	rcall	.+0      	; 0x184 <main+0x16>
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
    
    //- wimpy variable defs
	uint8_t val[2] = {0x3F, 0xFE};
     188:	8f e3       	ldi	r24, 0x3F	; 63
     18a:	8d 83       	std	Y+5, r24	; 0x05
     18c:	8e ef       	ldi	r24, 0xFE	; 254
     18e:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t *val0, *val1;
    
	//- avoid pesky warnings...
	val0 = val + 0;
     190:	ce 01       	movw	r24, r28
     192:	05 96       	adiw	r24, 0x05	; 5
     194:	9a 83       	std	Y+2, r25	; 0x02
     196:	89 83       	std	Y+1, r24	; 0x01
	val1 = val + 1;
     198:	ce 01       	movw	r24, r28
     19a:	05 96       	adiw	r24, 0x05	; 5
     19c:	01 96       	adiw	r24, 0x01	; 1
     19e:	9c 83       	std	Y+4, r25	; 0x04
     1a0:	8b 83       	std	Y+3, r24	; 0x03
    
	DDRD = 0xFF;
     1a2:	8a e2       	ldi	r24, 0x2A	; 42
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	2f ef       	ldi	r18, 0xFF	; 255
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 83       	st	Z, r18
	DDRE = 0xFF;
     1ac:	8d e2       	ldi	r24, 0x2D	; 45
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	2f ef       	ldi	r18, 0xFF	; 255
     1b2:	fc 01       	movw	r30, r24
     1b4:	20 83       	st	Z, r18
	DDRK = 0;
     1b6:	87 e0       	ldi	r24, 0x07	; 7
     1b8:	91 e0       	ldi	r25, 0x01	; 1
     1ba:	fc 01       	movw	r30, r24
     1bc:	10 82       	st	Z, r1

	PORTD = 0;
     1be:	8b e2       	ldi	r24, 0x2B	; 43
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	fc 01       	movw	r30, r24
     1c4:	10 82       	st	Z, r1
	PORTE = 0;
     1c6:	8e e2       	ldi	r24, 0x2E	; 46
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	fc 01       	movw	r30, r24
     1cc:	10 82       	st	Z, r1
	PORTK = 2;
     1ce:	88 e0       	ldi	r24, 0x08	; 8
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	22 e0       	ldi	r18, 0x02	; 2
     1d4:	fc 01       	movw	r30, r24
     1d6:	20 83       	st	Z, r18

    //- init IO with goodness
	vIO_init();
     1d8:	0e 94 3a 02 	call	0x474	; 0x474 <vIO_init>

	//- Create a 
	xTaskCreate( (pdTASK_CODE) vTaskFunction_1, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
     1dc:	8b 81       	ldd	r24, Y+3	; 0x03
     1de:	9c 81       	ldd	r25, Y+4	; 0x04
     1e0:	a1 2c       	mov	r10, r1
     1e2:	b1 2c       	mov	r11, r1
     1e4:	c1 2c       	mov	r12, r1
     1e6:	d1 2c       	mov	r13, r1
     1e8:	e1 2c       	mov	r14, r1
     1ea:	f1 2c       	mov	r15, r1
     1ec:	01 e0       	ldi	r16, 0x01	; 1
     1ee:	9c 01       	movw	r18, r24
     1f0:	4d e3       	ldi	r20, 0x3D	; 61
     1f2:	54 e0       	ldi	r21, 0x04	; 4
     1f4:	67 e0       	ldi	r22, 0x07	; 7
     1f6:	72 e0       	ldi	r23, 0x02	; 2
     1f8:	89 e2       	ldi	r24, 0x29	; 41
     1fa:	92 e0       	ldi	r25, 0x02	; 2
     1fc:	0e 94 4a 02 	call	0x494	; 0x494 <xTaskGenericCreate>
                (void *) val1, 1, NULL );
    
   xTaskCreate( (pdTASK_CODE) vTaskSonar, (signed char *) "T1", configMINIMAL_STACK_SIZE+1000,
     200:	8b 81       	ldd	r24, Y+3	; 0x03
     202:	9c 81       	ldd	r25, Y+4	; 0x04
     204:	a1 2c       	mov	r10, r1
     206:	b1 2c       	mov	r11, r1
     208:	c1 2c       	mov	r12, r1
     20a:	d1 2c       	mov	r13, r1
     20c:	e1 2c       	mov	r14, r1
     20e:	f1 2c       	mov	r15, r1
     210:	01 e0       	ldi	r16, 0x01	; 1
     212:	9c 01       	movw	r18, r24
     214:	4d e3       	ldi	r20, 0x3D	; 61
     216:	54 e0       	ldi	r21, 0x04	; 4
     218:	6a e0       	ldi	r22, 0x0A	; 10
     21a:	72 e0       	ldi	r23, 0x02	; 2
     21c:	84 e5       	ldi	r24, 0x54	; 84
     21e:	9e e1       	ldi	r25, 0x1E	; 30
     220:	0e 94 4a 02 	call	0x494	; 0x494 <xTaskGenericCreate>
                (void *) val1, 1, NULL );

   xTaskCreate( (pdTASK_CODE) vTaskUSARTWrite, (signed char *) "T2", configMINIMAL_STACK_SIZE+1000,
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	9c 81       	ldd	r25, Y+4	; 0x04
     228:	a1 2c       	mov	r10, r1
     22a:	b1 2c       	mov	r11, r1
     22c:	c1 2c       	mov	r12, r1
     22e:	d1 2c       	mov	r13, r1
     230:	e1 2c       	mov	r14, r1
     232:	f1 2c       	mov	r15, r1
     234:	01 e0       	ldi	r16, 0x01	; 1
     236:	9c 01       	movw	r18, r24
     238:	4d e3       	ldi	r20, 0x3D	; 61
     23a:	54 e0       	ldi	r21, 0x04	; 4
     23c:	6d e0       	ldi	r22, 0x0D	; 13
     23e:	72 e0       	ldi	r23, 0x02	; 2
     240:	85 e2       	ldi	r24, 0x25	; 37
     242:	99 e1       	ldi	r25, 0x19	; 25
     244:	0e 94 4a 02 	call	0x494	; 0x494 <xTaskGenericCreate>
   				(void *) val1, 1, NULL);

   xTaskCreate( (pdTASK_CODE) vTaskUSARTRead, (signed char *) "T3", configMINIMAL_STACK_SIZE+1000,
     248:	8b 81       	ldd	r24, Y+3	; 0x03
     24a:	9c 81       	ldd	r25, Y+4	; 0x04
     24c:	a1 2c       	mov	r10, r1
     24e:	b1 2c       	mov	r11, r1
     250:	c1 2c       	mov	r12, r1
     252:	d1 2c       	mov	r13, r1
     254:	e1 2c       	mov	r14, r1
     256:	f1 2c       	mov	r15, r1
     258:	01 e0       	ldi	r16, 0x01	; 1
     25a:	9c 01       	movw	r18, r24
     25c:	4d e3       	ldi	r20, 0x3D	; 61
     25e:	54 e0       	ldi	r21, 0x04	; 4
     260:	60 e1       	ldi	r22, 0x10	; 16
     262:	72 e0       	ldi	r23, 0x02	; 2
     264:	82 ea       	ldi	r24, 0xA2	; 162
     266:	99 e1       	ldi	r25, 0x19	; 25
     268:	0e 94 4a 02 	call	0x494	; 0x494 <xTaskGenericCreate>

//   xTaskCreate( (pdTASK_CODE) vTaskUSARTLog, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
//   				(void *) val1, 1, NULL);
    
    //- kick off the scheduler
	vTaskStartScheduler();
     26c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vTaskStartScheduler>
    
	return 0;
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
}
     274:	26 96       	adiw	r28, 0x06	; 6
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	df 90       	pop	r13
     28c:	cf 90       	pop	r12
     28e:	bf 90       	pop	r11
     290:	af 90       	pop	r10
     292:	08 95       	ret

00000294 <printHex>:
/*-----------------------------------------------------------*/

void printHex(int i){
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	62 97       	sbiw	r28, 0x12	; 18
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	9a 8b       	std	Y+18, r25	; 0x12
     2aa:	89 8b       	std	Y+17, r24	; 0x11
	char hex[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
     2ac:	20 e1       	ldi	r18, 0x10	; 16
     2ae:	e3 e1       	ldi	r30, 0x13	; 19
     2b0:	f2 e0       	ldi	r31, 0x02	; 2
     2b2:	ce 01       	movw	r24, r28
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	dc 01       	movw	r26, r24
     2b8:	01 90       	ld	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	2a 95       	dec	r18
     2be:	e1 f7       	brne	.-8      	; 0x2b8 <printHex+0x24>

	USART_Write(hex[(i&0xF000) >> 12]);
     2c0:	89 89       	ldd	r24, Y+17	; 0x11
     2c2:	9a 89       	ldd	r25, Y+18	; 0x12
     2c4:	89 2f       	mov	r24, r25
     2c6:	99 27       	eor	r25, r25
     2c8:	82 95       	swap	r24
     2ca:	8f 70       	andi	r24, 0x0F	; 15
     2cc:	9e 01       	movw	r18, r28
     2ce:	2f 5f       	subi	r18, 0xFF	; 255
     2d0:	3f 4f       	sbci	r19, 0xFF	; 255
     2d2:	82 0f       	add	r24, r18
     2d4:	93 1f       	adc	r25, r19
     2d6:	fc 01       	movw	r30, r24
     2d8:	80 81       	ld	r24, Z
     2da:	0e 94 98 18 	call	0x3130	; 0x3130 <USART_Write>
	USART_Write(hex[(i&0xF00) >> 8]);
     2de:	89 89       	ldd	r24, Y+17	; 0x11
     2e0:	9a 89       	ldd	r25, Y+18	; 0x12
     2e2:	88 27       	eor	r24, r24
     2e4:	9f 70       	andi	r25, 0x0F	; 15
     2e6:	89 2f       	mov	r24, r25
     2e8:	99 0f       	add	r25, r25
     2ea:	99 0b       	sbc	r25, r25
     2ec:	9e 01       	movw	r18, r28
     2ee:	2f 5f       	subi	r18, 0xFF	; 255
     2f0:	3f 4f       	sbci	r19, 0xFF	; 255
     2f2:	82 0f       	add	r24, r18
     2f4:	93 1f       	adc	r25, r19
     2f6:	fc 01       	movw	r30, r24
     2f8:	80 81       	ld	r24, Z
     2fa:	0e 94 98 18 	call	0x3130	; 0x3130 <USART_Write>
	USART_Write(hex[(i&0xF0) >> 4]);
     2fe:	89 89       	ldd	r24, Y+17	; 0x11
     300:	9a 89       	ldd	r25, Y+18	; 0x12
     302:	80 7f       	andi	r24, 0xF0	; 240
     304:	99 27       	eor	r25, r25
     306:	95 95       	asr	r25
     308:	87 95       	ror	r24
     30a:	95 95       	asr	r25
     30c:	87 95       	ror	r24
     30e:	95 95       	asr	r25
     310:	87 95       	ror	r24
     312:	95 95       	asr	r25
     314:	87 95       	ror	r24
     316:	9e 01       	movw	r18, r28
     318:	2f 5f       	subi	r18, 0xFF	; 255
     31a:	3f 4f       	sbci	r19, 0xFF	; 255
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
     320:	fc 01       	movw	r30, r24
     322:	80 81       	ld	r24, Z
     324:	0e 94 98 18 	call	0x3130	; 0x3130 <USART_Write>
	USART_Write(hex[i&0xF]);
     328:	89 89       	ldd	r24, Y+17	; 0x11
     32a:	9a 89       	ldd	r25, Y+18	; 0x12
     32c:	8f 70       	andi	r24, 0x0F	; 15
     32e:	99 27       	eor	r25, r25
     330:	9e 01       	movw	r18, r28
     332:	2f 5f       	subi	r18, 0xFF	; 255
     334:	3f 4f       	sbci	r19, 0xFF	; 255
     336:	82 0f       	add	r24, r18
     338:	93 1f       	adc	r25, r19
     33a:	fc 01       	movw	r30, r24
     33c:	80 81       	ld	r24, Z
     33e:	0e 94 98 18 	call	0x3130	; 0x3130 <USART_Write>

}
     342:	62 96       	adiw	r28, 0x12	; 18
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	08 95       	ret

00000354 <printNum>:

void printNum(unsigned char i){
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	2d 97       	sbiw	r28, 0x0d	; 13
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	8d 87       	std	Y+13, r24	; 0x0d
    
    char str[10];
    memset(str,0,10);
     36a:	ce 01       	movw	r24, r28
     36c:	03 96       	adiw	r24, 0x03	; 3
     36e:	4a e0       	ldi	r20, 0x0A	; 10
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	0e 94 13 20 	call	0x4026	; 0x4026 <memset>
    itoa(i,str,10);
     37a:	8d 85       	ldd	r24, Y+13	; 0x0d
     37c:	88 2f       	mov	r24, r24
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	9e 01       	movw	r18, r28
     382:	2d 5f       	subi	r18, 0xFD	; 253
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	4a e0       	ldi	r20, 0x0A	; 10
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	b9 01       	movw	r22, r18
     38c:	0e 94 29 20 	call	0x4052	; 0x4052 <itoa>
    char * irr = str;
     390:	ce 01       	movw	r24, r28
     392:	03 96       	adiw	r24, 0x03	; 3
     394:	9a 83       	std	Y+2, r25	; 0x02
     396:	89 83       	std	Y+1, r24	; 0x01
    while(*irr){
     398:	0b c0       	rjmp	.+22     	; 0x3b0 <printNum+0x5c>
        USART_AddToQueue((unsigned char )*irr);
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	9a 81       	ldd	r25, Y+2	; 0x02
     39e:	fc 01       	movw	r30, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <USART_AddToQueue>
        irr++;
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	9a 81       	ldd	r25, Y+2	; 0x02
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	9a 83       	std	Y+2, r25	; 0x02
     3ae:	89 83       	std	Y+1, r24	; 0x01
    
    char str[10];
    memset(str,0,10);
    itoa(i,str,10);
    char * irr = str;
    while(*irr){
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	9a 81       	ldd	r25, Y+2	; 0x02
     3b4:	fc 01       	movw	r30, r24
     3b6:	80 81       	ld	r24, Z
     3b8:	88 23       	and	r24, r24
     3ba:	79 f7       	brne	.-34     	; 0x39a <printNum+0x46>
        USART_AddToQueue((unsigned char )*irr);
        irr++;
    }
    
}
     3bc:	2d 96       	adiw	r28, 0x0d	; 13
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <__vector_50>:

ISR(TIMER5_OVF_vect){
     3ce:	1f 92       	push	r1
     3d0:	0f 92       	push	r0
     3d2:	00 90 5f 00 	lds	r0, 0x005F
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	00 90 5b 00 	lds	r0, 0x005B
     3de:	0f 92       	push	r0
     3e0:	2f 93       	push	r18
     3e2:	3f 93       	push	r19
     3e4:	8f 93       	push	r24
     3e6:	9f 93       	push	r25
     3e8:	ef 93       	push	r30
     3ea:	ff 93       	push	r31
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62

	PORTB ^= 0xFF;
     3f4:	85 e2       	ldi	r24, 0x25	; 37
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	25 e2       	ldi	r18, 0x25	; 37
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	f9 01       	movw	r30, r18
     3fe:	20 81       	ld	r18, Z
     400:	20 95       	com	r18
     402:	fc 01       	movw	r30, r24
     404:	20 83       	st	Z, r18
	TCNT3L = 0;
     406:	84 e9       	ldi	r24, 0x94	; 148
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	fc 01       	movw	r30, r24
     40c:	10 82       	st	Z, r1
	TCNT3H = 0;
     40e:	85 e9       	ldi	r24, 0x95	; 149
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	fc 01       	movw	r30, r24
     414:	10 82       	st	Z, r1

}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	ff 91       	pop	r31
     41c:	ef 91       	pop	r30
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	3f 91       	pop	r19
     424:	2f 91       	pop	r18
     426:	0f 90       	pop	r0
     428:	00 92 5b 00 	sts	0x005B, r0
     42c:	0f 90       	pop	r0
     42e:	00 92 5f 00 	sts	0x005F, r0
     432:	0f 90       	pop	r0
     434:	1f 90       	pop	r1
     436:	18 95       	reti

00000438 <getTimerCount2>:

unsigned int getTimerCount2(){
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62

	//volatile char timerLow = TCNT3L;

	return TCNT0;
     440:	86 e4       	ldi	r24, 0x46	; 70
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	fc 01       	movw	r30, r24
     446:	80 81       	ld	r24, Z
     448:	88 2f       	mov	r24, r24
     44a:	90 e0       	ldi	r25, 0x00	; 0

}
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <vTaskFunction_1>:

void vTaskFunction_1(void *pvParameters)
{	
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	1f 92       	push	r1
     458:	1f 92       	push	r1
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	9a 83       	std	Y+2, r25	; 0x02
     460:	89 83       	std	Y+1, r24	; 0x01
    USART_Init(9600, 16000000);
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	54 e2       	ldi	r21, 0x24	; 36
     466:	64 ef       	ldi	r22, 0xF4	; 244
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	80 e8       	ldi	r24, 0x80	; 128
     46c:	95 e2       	ldi	r25, 0x25	; 37
     46e:	0e 94 2b 18 	call	0x3056	; 0x3056 <USART_Init>
    for(;;);
     472:	ff cf       	rjmp	.-2      	; 0x472 <vTaskFunction_1+0x20>

00000474 <vIO_init>:
        // UDR0;
    }
}

void vIO_init(void)
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
    //- set PortB as output
	DDRB = 0xFF; 
     47c:	84 e2       	ldi	r24, 0x24	; 36
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
    PORTB = 0; 
     486:	85 e2       	ldi	r24, 0x25	; 37
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	fc 01       	movw	r30, r24
     48c:	10 82       	st	Z, r1
}
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <xTaskGenericCreate>:
     494:	af 92       	push	r10
     496:	bf 92       	push	r11
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	df 93       	push	r29
     4a6:	cf 93       	push	r28
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	64 97       	sbiw	r28, 0x14	; 20
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	9f 83       	std	Y+7, r25	; 0x07
     4ba:	8e 83       	std	Y+6, r24	; 0x06
     4bc:	79 87       	std	Y+9, r23	; 0x09
     4be:	68 87       	std	Y+8, r22	; 0x08
     4c0:	5b 87       	std	Y+11, r21	; 0x0b
     4c2:	4a 87       	std	Y+10, r20	; 0x0a
     4c4:	3d 87       	std	Y+13, r19	; 0x0d
     4c6:	2c 87       	std	Y+12, r18	; 0x0c
     4c8:	0e 87       	std	Y+14, r16	; 0x0e
     4ca:	f8 8a       	std	Y+16, r15	; 0x10
     4cc:	ef 86       	std	Y+15, r14	; 0x0f
     4ce:	da 8a       	std	Y+18, r13	; 0x12
     4d0:	c9 8a       	std	Y+17, r12	; 0x11
     4d2:	bc 8a       	std	Y+20, r11	; 0x14
     4d4:	ab 8a       	std	Y+19, r10	; 0x13
     4d6:	8a 85       	ldd	r24, Y+10	; 0x0a
     4d8:	9b 85       	ldd	r25, Y+11	; 0x0b
     4da:	29 89       	ldd	r18, Y+17	; 0x11
     4dc:	3a 89       	ldd	r19, Y+18	; 0x12
     4de:	b9 01       	movw	r22, r18
     4e0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <prvAllocateTCBAndStack>
     4e4:	9c 83       	std	Y+4, r25	; 0x04
     4e6:	8b 83       	std	Y+3, r24	; 0x03
     4e8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ea:	9c 81       	ldd	r25, Y+4	; 0x04
     4ec:	00 97       	sbiw	r24, 0x00	; 0
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <xTaskGenericCreate+0x5e>
     4f0:	99 c0       	rjmp	.+306    	; 0x624 <xTaskGenericCreate+0x190>
     4f2:	eb 81       	ldd	r30, Y+3	; 0x03
     4f4:	fc 81       	ldd	r31, Y+4	; 0x04
     4f6:	27 89       	ldd	r18, Z+23	; 0x17
     4f8:	30 8d       	ldd	r19, Z+24	; 0x18
     4fa:	8a 85       	ldd	r24, Y+10	; 0x0a
     4fc:	9b 85       	ldd	r25, Y+11	; 0x0b
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	82 0f       	add	r24, r18
     502:	93 1f       	adc	r25, r19
     504:	9a 83       	std	Y+2, r25	; 0x02
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	8b 81       	ldd	r24, Y+3	; 0x03
     50a:	9c 81       	ldd	r25, Y+4	; 0x04
     50c:	28 85       	ldd	r18, Y+8	; 0x08
     50e:	39 85       	ldd	r19, Y+9	; 0x09
     510:	eb 89       	ldd	r30, Y+19	; 0x13
     512:	fc 89       	ldd	r31, Y+20	; 0x14
     514:	aa 85       	ldd	r26, Y+10	; 0x0a
     516:	bb 85       	ldd	r27, Y+11	; 0x0b
     518:	b9 01       	movw	r22, r18
     51a:	4e 85       	ldd	r20, Y+14	; 0x0e
     51c:	9f 01       	movw	r18, r30
     51e:	8d 01       	movw	r16, r26
     520:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <prvInitialiseTCBVariables>
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	9a 81       	ldd	r25, Y+2	; 0x02
     528:	2e 81       	ldd	r18, Y+6	; 0x06
     52a:	3f 81       	ldd	r19, Y+7	; 0x07
     52c:	4c 85       	ldd	r20, Y+12	; 0x0c
     52e:	5d 85       	ldd	r21, Y+13	; 0x0d
     530:	b9 01       	movw	r22, r18
     532:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <pxPortInitialiseStack>
     536:	eb 81       	ldd	r30, Y+3	; 0x03
     538:	fc 81       	ldd	r31, Y+4	; 0x04
     53a:	91 83       	std	Z+1, r25	; 0x01
     53c:	80 83       	st	Z, r24
     53e:	8f 85       	ldd	r24, Y+15	; 0x0f
     540:	98 89       	ldd	r25, Y+16	; 0x10
     542:	00 97       	sbiw	r24, 0x00	; 0
     544:	31 f0       	breq	.+12     	; 0x552 <xTaskGenericCreate+0xbe>
     546:	ef 85       	ldd	r30, Y+15	; 0x0f
     548:	f8 89       	ldd	r31, Y+16	; 0x10
     54a:	8b 81       	ldd	r24, Y+3	; 0x03
     54c:	9c 81       	ldd	r25, Y+4	; 0x04
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	80 83       	st	Z, r24
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	0f 92       	push	r0
     558:	80 91 28 02 	lds	r24, 0x0228
     55c:	8f 5f       	subi	r24, 0xFF	; 255
     55e:	80 93 28 02 	sts	0x0228, r24
     562:	80 91 26 02 	lds	r24, 0x0226
     566:	90 91 27 02 	lds	r25, 0x0227
     56a:	00 97       	sbiw	r24, 0x00	; 0
     56c:	69 f4       	brne	.+26     	; 0x588 <xTaskGenericCreate+0xf4>
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	90 93 27 02 	sts	0x0227, r25
     576:	80 93 26 02 	sts	0x0226, r24
     57a:	80 91 28 02 	lds	r24, 0x0228
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	a9 f4       	brne	.+42     	; 0x5ac <xTaskGenericCreate+0x118>
     582:	0e 94 4b 09 	call	0x1296	; 0x1296 <prvInitialiseTaskLists>
     586:	12 c0       	rjmp	.+36     	; 0x5ac <xTaskGenericCreate+0x118>
     588:	80 91 2d 02 	lds	r24, 0x022D
     58c:	88 23       	and	r24, r24
     58e:	71 f4       	brne	.+28     	; 0x5ac <xTaskGenericCreate+0x118>
     590:	e0 91 26 02 	lds	r30, 0x0226
     594:	f0 91 27 02 	lds	r31, 0x0227
     598:	96 89       	ldd	r25, Z+22	; 0x16
     59a:	8e 85       	ldd	r24, Y+14	; 0x0e
     59c:	89 17       	cp	r24, r25
     59e:	30 f0       	brcs	.+12     	; 0x5ac <xTaskGenericCreate+0x118>
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	9c 81       	ldd	r25, Y+4	; 0x04
     5a4:	90 93 27 02 	sts	0x0227, r25
     5a8:	80 93 26 02 	sts	0x0226, r24
     5ac:	eb 81       	ldd	r30, Y+3	; 0x03
     5ae:	fc 81       	ldd	r31, Y+4	; 0x04
     5b0:	96 89       	ldd	r25, Z+22	; 0x16
     5b2:	80 91 2b 02 	lds	r24, 0x022B
     5b6:	89 17       	cp	r24, r25
     5b8:	28 f4       	brcc	.+10     	; 0x5c4 <xTaskGenericCreate+0x130>
     5ba:	eb 81       	ldd	r30, Y+3	; 0x03
     5bc:	fc 81       	ldd	r31, Y+4	; 0x04
     5be:	86 89       	ldd	r24, Z+22	; 0x16
     5c0:	80 93 2b 02 	sts	0x022B, r24
     5c4:	80 91 32 02 	lds	r24, 0x0232
     5c8:	8f 5f       	subi	r24, 0xFF	; 255
     5ca:	80 93 32 02 	sts	0x0232, r24
     5ce:	eb 81       	ldd	r30, Y+3	; 0x03
     5d0:	fc 81       	ldd	r31, Y+4	; 0x04
     5d2:	96 89       	ldd	r25, Z+22	; 0x16
     5d4:	80 91 2c 02 	lds	r24, 0x022C
     5d8:	89 17       	cp	r24, r25
     5da:	28 f4       	brcc	.+10     	; 0x5e6 <xTaskGenericCreate+0x152>
     5dc:	eb 81       	ldd	r30, Y+3	; 0x03
     5de:	fc 81       	ldd	r31, Y+4	; 0x04
     5e0:	86 89       	ldd	r24, Z+22	; 0x16
     5e2:	80 93 2c 02 	sts	0x022C, r24
     5e6:	eb 81       	ldd	r30, Y+3	; 0x03
     5e8:	fc 81       	ldd	r31, Y+4	; 0x04
     5ea:	86 89       	ldd	r24, Z+22	; 0x16
     5ec:	28 2f       	mov	r18, r24
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	c9 01       	movw	r24, r18
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	82 0f       	add	r24, r18
     600:	93 1f       	adc	r25, r19
     602:	ac 01       	movw	r20, r24
     604:	4d 5c       	subi	r20, 0xCD	; 205
     606:	5d 4f       	sbci	r21, 0xFD	; 253
     608:	8b 81       	ldd	r24, Y+3	; 0x03
     60a:	9c 81       	ldd	r25, Y+4	; 0x04
     60c:	9c 01       	movw	r18, r24
     60e:	2e 5f       	subi	r18, 0xFE	; 254
     610:	3f 4f       	sbci	r19, 0xFF	; 255
     612:	ca 01       	movw	r24, r20
     614:	b9 01       	movw	r22, r18
     616:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	8d 83       	std	Y+5, r24	; 0x05
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	02 c0       	rjmp	.+4      	; 0x628 <xTaskGenericCreate+0x194>
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	8d 83       	std	Y+5, r24	; 0x05
     628:	8d 81       	ldd	r24, Y+5	; 0x05
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	71 f4       	brne	.+28     	; 0x64a <xTaskGenericCreate+0x1b6>
     62e:	80 91 2d 02 	lds	r24, 0x022D
     632:	88 23       	and	r24, r24
     634:	51 f0       	breq	.+20     	; 0x64a <xTaskGenericCreate+0x1b6>
     636:	e0 91 26 02 	lds	r30, 0x0226
     63a:	f0 91 27 02 	lds	r31, 0x0227
     63e:	96 89       	ldd	r25, Z+22	; 0x16
     640:	8e 85       	ldd	r24, Y+14	; 0x0e
     642:	98 17       	cp	r25, r24
     644:	10 f4       	brcc	.+4      	; 0x64a <xTaskGenericCreate+0x1b6>
     646:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
     64a:	8d 81       	ldd	r24, Y+5	; 0x05
     64c:	64 96       	adiw	r28, 0x14	; 20
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	df 90       	pop	r13
     666:	cf 90       	pop	r12
     668:	bf 90       	pop	r11
     66a:	af 90       	pop	r10
     66c:	08 95       	ret

0000066e <vTaskDelayUntil>:
     66e:	df 93       	push	r29
     670:	cf 93       	push	r28
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	28 97       	sbiw	r28, 0x08	; 8
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	9e 83       	std	Y+6, r25	; 0x06
     684:	8d 83       	std	Y+5, r24	; 0x05
     686:	78 87       	std	Y+8, r23	; 0x08
     688:	6f 83       	std	Y+7, r22	; 0x07
     68a:	19 82       	std	Y+1, r1	; 0x01
     68c:	0e 94 82 05 	call	0xb04	; 0xb04 <vTaskSuspendAll>
     690:	ed 81       	ldd	r30, Y+5	; 0x05
     692:	fe 81       	ldd	r31, Y+6	; 0x06
     694:	20 81       	ld	r18, Z
     696:	31 81       	ldd	r19, Z+1	; 0x01
     698:	8f 81       	ldd	r24, Y+7	; 0x07
     69a:	98 85       	ldd	r25, Y+8	; 0x08
     69c:	82 0f       	add	r24, r18
     69e:	93 1f       	adc	r25, r19
     6a0:	9c 83       	std	Y+4, r25	; 0x04
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	ed 81       	ldd	r30, Y+5	; 0x05
     6a6:	fe 81       	ldd	r31, Y+6	; 0x06
     6a8:	20 81       	ld	r18, Z
     6aa:	31 81       	ldd	r19, Z+1	; 0x01
     6ac:	80 91 29 02 	lds	r24, 0x0229
     6b0:	90 91 2a 02 	lds	r25, 0x022A
     6b4:	82 17       	cp	r24, r18
     6b6:	93 07       	cpc	r25, r19
     6b8:	a8 f4       	brcc	.+42     	; 0x6e4 <vTaskDelayUntil+0x76>
     6ba:	ed 81       	ldd	r30, Y+5	; 0x05
     6bc:	fe 81       	ldd	r31, Y+6	; 0x06
     6be:	20 81       	ld	r18, Z
     6c0:	31 81       	ldd	r19, Z+1	; 0x01
     6c2:	8b 81       	ldd	r24, Y+3	; 0x03
     6c4:	9c 81       	ldd	r25, Y+4	; 0x04
     6c6:	82 17       	cp	r24, r18
     6c8:	93 07       	cpc	r25, r19
     6ca:	00 f5       	brcc	.+64     	; 0x70c <vTaskDelayUntil+0x9e>
     6cc:	20 91 29 02 	lds	r18, 0x0229
     6d0:	30 91 2a 02 	lds	r19, 0x022A
     6d4:	8b 81       	ldd	r24, Y+3	; 0x03
     6d6:	9c 81       	ldd	r25, Y+4	; 0x04
     6d8:	28 17       	cp	r18, r24
     6da:	39 07       	cpc	r19, r25
     6dc:	b8 f4       	brcc	.+46     	; 0x70c <vTaskDelayUntil+0x9e>
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	89 83       	std	Y+1, r24	; 0x01
     6e2:	14 c0       	rjmp	.+40     	; 0x70c <vTaskDelayUntil+0x9e>
     6e4:	ed 81       	ldd	r30, Y+5	; 0x05
     6e6:	fe 81       	ldd	r31, Y+6	; 0x06
     6e8:	20 81       	ld	r18, Z
     6ea:	31 81       	ldd	r19, Z+1	; 0x01
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	9c 81       	ldd	r25, Y+4	; 0x04
     6f0:	82 17       	cp	r24, r18
     6f2:	93 07       	cpc	r25, r19
     6f4:	48 f0       	brcs	.+18     	; 0x708 <vTaskDelayUntil+0x9a>
     6f6:	20 91 29 02 	lds	r18, 0x0229
     6fa:	30 91 2a 02 	lds	r19, 0x022A
     6fe:	8b 81       	ldd	r24, Y+3	; 0x03
     700:	9c 81       	ldd	r25, Y+4	; 0x04
     702:	28 17       	cp	r18, r24
     704:	39 07       	cpc	r19, r25
     706:	10 f4       	brcc	.+4      	; 0x70c <vTaskDelayUntil+0x9e>
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	89 83       	std	Y+1, r24	; 0x01
     70c:	ed 81       	ldd	r30, Y+5	; 0x05
     70e:	fe 81       	ldd	r31, Y+6	; 0x06
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	9c 81       	ldd	r25, Y+4	; 0x04
     714:	91 83       	std	Z+1, r25	; 0x01
     716:	80 83       	st	Z, r24
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	88 23       	and	r24, r24
     71c:	59 f0       	breq	.+22     	; 0x734 <vTaskDelayUntil+0xc6>
     71e:	80 91 26 02 	lds	r24, 0x0226
     722:	90 91 27 02 	lds	r25, 0x0227
     726:	02 96       	adiw	r24, 0x02	; 2
     728:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	9c 81       	ldd	r25, Y+4	; 0x04
     730:	0e 94 8f 09 	call	0x131e	; 0x131e <prvAddCurrentTaskToDelayedList>
     734:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
     738:	8a 83       	std	Y+2, r24	; 0x02
     73a:	8a 81       	ldd	r24, Y+2	; 0x02
     73c:	88 23       	and	r24, r24
     73e:	11 f4       	brne	.+4      	; 0x744 <vTaskDelayUntil+0xd6>
     740:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
     744:	28 96       	adiw	r28, 0x08	; 8
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	08 95       	ret

00000756 <vTaskDelay>:
     756:	df 93       	push	r29
     758:	cf 93       	push	r28
     75a:	00 d0       	rcall	.+0      	; 0x75c <vTaskDelay+0x6>
     75c:	0f 92       	push	r0
     75e:	0f 92       	push	r0
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	9d 83       	std	Y+5, r25	; 0x05
     766:	8c 83       	std	Y+4, r24	; 0x04
     768:	19 82       	std	Y+1, r1	; 0x01
     76a:	8c 81       	ldd	r24, Y+4	; 0x04
     76c:	9d 81       	ldd	r25, Y+5	; 0x05
     76e:	00 97       	sbiw	r24, 0x00	; 0
     770:	d1 f0       	breq	.+52     	; 0x7a6 <vTaskDelay+0x50>
     772:	0e 94 82 05 	call	0xb04	; 0xb04 <vTaskSuspendAll>
     776:	20 91 29 02 	lds	r18, 0x0229
     77a:	30 91 2a 02 	lds	r19, 0x022A
     77e:	8c 81       	ldd	r24, Y+4	; 0x04
     780:	9d 81       	ldd	r25, Y+5	; 0x05
     782:	82 0f       	add	r24, r18
     784:	93 1f       	adc	r25, r19
     786:	9b 83       	std	Y+3, r25	; 0x03
     788:	8a 83       	std	Y+2, r24	; 0x02
     78a:	80 91 26 02 	lds	r24, 0x0226
     78e:	90 91 27 02 	lds	r25, 0x0227
     792:	02 96       	adiw	r24, 0x02	; 2
     794:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     798:	8a 81       	ldd	r24, Y+2	; 0x02
     79a:	9b 81       	ldd	r25, Y+3	; 0x03
     79c:	0e 94 8f 09 	call	0x131e	; 0x131e <prvAddCurrentTaskToDelayedList>
     7a0:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
     7a4:	89 83       	std	Y+1, r24	; 0x01
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	88 23       	and	r24, r24
     7aa:	11 f4       	brne	.+4      	; 0x7b0 <vTaskDelay+0x5a>
     7ac:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	cf 91       	pop	r28
     7bc:	df 91       	pop	r29
     7be:	08 95       	ret

000007c0 <vTaskSuspend>:
     7c0:	df 93       	push	r29
     7c2:	cf 93       	push	r28
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <vTaskSuspend+0x6>
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <vTaskSuspend+0x8>
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	9c 83       	std	Y+4, r25	; 0x04
     7ce:	8b 83       	std	Y+3, r24	; 0x03
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	0f 92       	push	r0
     7d6:	20 91 26 02 	lds	r18, 0x0226
     7da:	30 91 27 02 	lds	r19, 0x0227
     7de:	8b 81       	ldd	r24, Y+3	; 0x03
     7e0:	9c 81       	ldd	r25, Y+4	; 0x04
     7e2:	82 17       	cp	r24, r18
     7e4:	93 07       	cpc	r25, r19
     7e6:	11 f4       	brne	.+4      	; 0x7ec <vTaskSuspend+0x2c>
     7e8:	1c 82       	std	Y+4, r1	; 0x04
     7ea:	1b 82       	std	Y+3, r1	; 0x03
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	9c 81       	ldd	r25, Y+4	; 0x04
     7f0:	00 97       	sbiw	r24, 0x00	; 0
     7f2:	39 f4       	brne	.+14     	; 0x802 <vTaskSuspend+0x42>
     7f4:	80 91 26 02 	lds	r24, 0x0226
     7f8:	90 91 27 02 	lds	r25, 0x0227
     7fc:	9e 83       	std	Y+6, r25	; 0x06
     7fe:	8d 83       	std	Y+5, r24	; 0x05
     800:	04 c0       	rjmp	.+8      	; 0x80a <vTaskSuspend+0x4a>
     802:	8b 81       	ldd	r24, Y+3	; 0x03
     804:	9c 81       	ldd	r25, Y+4	; 0x04
     806:	9e 83       	std	Y+6, r25	; 0x06
     808:	8d 83       	std	Y+5, r24	; 0x05
     80a:	8d 81       	ldd	r24, Y+5	; 0x05
     80c:	9e 81       	ldd	r25, Y+6	; 0x06
     80e:	9a 83       	std	Y+2, r25	; 0x02
     810:	89 83       	std	Y+1, r24	; 0x01
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	02 96       	adiw	r24, 0x02	; 2
     818:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     81c:	e9 81       	ldd	r30, Y+1	; 0x01
     81e:	fa 81       	ldd	r31, Y+2	; 0x02
     820:	84 89       	ldd	r24, Z+20	; 0x14
     822:	95 89       	ldd	r25, Z+21	; 0x15
     824:	00 97       	sbiw	r24, 0x00	; 0
     826:	29 f0       	breq	.+10     	; 0x832 <vTaskSuspend+0x72>
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	0c 96       	adiw	r24, 0x0c	; 12
     82e:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	9a 81       	ldd	r25, Y+2	; 0x02
     836:	9c 01       	movw	r18, r24
     838:	2e 5f       	subi	r18, 0xFE	; 254
     83a:	3f 4f       	sbci	r19, 0xFF	; 255
     83c:	86 e7       	ldi	r24, 0x76	; 118
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	b9 01       	movw	r22, r18
     842:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	8b 81       	ldd	r24, Y+3	; 0x03
     84c:	9c 81       	ldd	r25, Y+4	; 0x04
     84e:	00 97       	sbiw	r24, 0x00	; 0
     850:	a1 f4       	brne	.+40     	; 0x87a <vTaskSuspend+0xba>
     852:	80 91 2d 02 	lds	r24, 0x022D
     856:	88 23       	and	r24, r24
     858:	19 f0       	breq	.+6      	; 0x860 <vTaskSuspend+0xa0>
     85a:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
     85e:	0d c0       	rjmp	.+26     	; 0x87a <vTaskSuspend+0xba>
     860:	90 91 76 02 	lds	r25, 0x0276
     864:	80 91 28 02 	lds	r24, 0x0228
     868:	98 17       	cp	r25, r24
     86a:	29 f4       	brne	.+10     	; 0x876 <vTaskSuspend+0xb6>
     86c:	10 92 27 02 	sts	0x0227, r1
     870:	10 92 26 02 	sts	0x0226, r1
     874:	02 c0       	rjmp	.+4      	; 0x87a <vTaskSuspend+0xba>
     876:	0e 94 21 07 	call	0xe42	; 0xe42 <vTaskSwitchContext>
     87a:	26 96       	adiw	r28, 0x06	; 6
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	cf 91       	pop	r28
     888:	df 91       	pop	r29
     88a:	08 95       	ret

0000088c <xTaskIsTaskSuspended>:
     88c:	df 93       	push	r29
     88e:	cf 93       	push	r28
     890:	00 d0       	rcall	.+0      	; 0x892 <xTaskIsTaskSuspended+0x6>
     892:	0f 92       	push	r0
     894:	0f 92       	push	r0
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	9d 83       	std	Y+5, r25	; 0x05
     89c:	8c 83       	std	Y+4, r24	; 0x04
     89e:	1b 82       	std	Y+3, r1	; 0x03
     8a0:	8c 81       	ldd	r24, Y+4	; 0x04
     8a2:	9d 81       	ldd	r25, Y+5	; 0x05
     8a4:	9a 83       	std	Y+2, r25	; 0x02
     8a6:	89 83       	std	Y+1, r24	; 0x01
     8a8:	e9 81       	ldd	r30, Y+1	; 0x01
     8aa:	fa 81       	ldd	r31, Y+2	; 0x02
     8ac:	82 85       	ldd	r24, Z+10	; 0x0a
     8ae:	93 85       	ldd	r25, Z+11	; 0x0b
     8b0:	22 e0       	ldi	r18, 0x02	; 2
     8b2:	86 37       	cpi	r24, 0x76	; 118
     8b4:	92 07       	cpc	r25, r18
     8b6:	81 f4       	brne	.+32     	; 0x8d8 <xTaskIsTaskSuspended+0x4c>
     8b8:	e9 81       	ldd	r30, Y+1	; 0x01
     8ba:	fa 81       	ldd	r31, Y+2	; 0x02
     8bc:	84 89       	ldd	r24, Z+20	; 0x14
     8be:	95 89       	ldd	r25, Z+21	; 0x15
     8c0:	22 e0       	ldi	r18, 0x02	; 2
     8c2:	8d 36       	cpi	r24, 0x6D	; 109
     8c4:	92 07       	cpc	r25, r18
     8c6:	41 f0       	breq	.+16     	; 0x8d8 <xTaskIsTaskSuspended+0x4c>
     8c8:	e9 81       	ldd	r30, Y+1	; 0x01
     8ca:	fa 81       	ldd	r31, Y+2	; 0x02
     8cc:	84 89       	ldd	r24, Z+20	; 0x14
     8ce:	95 89       	ldd	r25, Z+21	; 0x15
     8d0:	00 97       	sbiw	r24, 0x00	; 0
     8d2:	11 f4       	brne	.+4      	; 0x8d8 <xTaskIsTaskSuspended+0x4c>
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	8b 83       	std	Y+3, r24	; 0x03
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	cf 91       	pop	r28
     8e6:	df 91       	pop	r29
     8e8:	08 95       	ret

000008ea <vTaskResume>:
     8ea:	df 93       	push	r29
     8ec:	cf 93       	push	r28
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <vTaskResume+0x6>
     8f0:	0f 92       	push	r0
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	8b 83       	std	Y+3, r24	; 0x03
     8fa:	8b 81       	ldd	r24, Y+3	; 0x03
     8fc:	9c 81       	ldd	r25, Y+4	; 0x04
     8fe:	9a 83       	std	Y+2, r25	; 0x02
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	9a 81       	ldd	r25, Y+2	; 0x02
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	09 f4       	brne	.+2      	; 0x90c <vTaskResume+0x22>
     90a:	4c c0       	rjmp	.+152    	; 0x9a4 <vTaskResume+0xba>
     90c:	20 91 26 02 	lds	r18, 0x0226
     910:	30 91 27 02 	lds	r19, 0x0227
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	9a 81       	ldd	r25, Y+2	; 0x02
     918:	82 17       	cp	r24, r18
     91a:	93 07       	cpc	r25, r19
     91c:	09 f4       	brne	.+2      	; 0x920 <vTaskResume+0x36>
     91e:	42 c0       	rjmp	.+132    	; 0x9a4 <vTaskResume+0xba>
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	0f 92       	push	r0
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	9a 81       	ldd	r25, Y+2	; 0x02
     92a:	0e 94 46 04 	call	0x88c	; 0x88c <xTaskIsTaskSuspended>
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	b9 f5       	brne	.+110    	; 0x9a0 <vTaskResume+0xb6>
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	9a 81       	ldd	r25, Y+2	; 0x02
     936:	02 96       	adiw	r24, 0x02	; 2
     938:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     93c:	e9 81       	ldd	r30, Y+1	; 0x01
     93e:	fa 81       	ldd	r31, Y+2	; 0x02
     940:	96 89       	ldd	r25, Z+22	; 0x16
     942:	80 91 2c 02 	lds	r24, 0x022C
     946:	89 17       	cp	r24, r25
     948:	28 f4       	brcc	.+10     	; 0x954 <vTaskResume+0x6a>
     94a:	e9 81       	ldd	r30, Y+1	; 0x01
     94c:	fa 81       	ldd	r31, Y+2	; 0x02
     94e:	86 89       	ldd	r24, Z+22	; 0x16
     950:	80 93 2c 02 	sts	0x022C, r24
     954:	e9 81       	ldd	r30, Y+1	; 0x01
     956:	fa 81       	ldd	r31, Y+2	; 0x02
     958:	86 89       	ldd	r24, Z+22	; 0x16
     95a:	28 2f       	mov	r18, r24
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	c9 01       	movw	r24, r18
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	82 0f       	add	r24, r18
     96e:	93 1f       	adc	r25, r19
     970:	ac 01       	movw	r20, r24
     972:	4d 5c       	subi	r20, 0xCD	; 205
     974:	5d 4f       	sbci	r21, 0xFD	; 253
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	9c 01       	movw	r18, r24
     97c:	2e 5f       	subi	r18, 0xFE	; 254
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	ca 01       	movw	r24, r20
     982:	b9 01       	movw	r22, r18
     984:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
     988:	e9 81       	ldd	r30, Y+1	; 0x01
     98a:	fa 81       	ldd	r31, Y+2	; 0x02
     98c:	96 89       	ldd	r25, Z+22	; 0x16
     98e:	e0 91 26 02 	lds	r30, 0x0226
     992:	f0 91 27 02 	lds	r31, 0x0227
     996:	86 89       	ldd	r24, Z+22	; 0x16
     998:	98 17       	cp	r25, r24
     99a:	10 f0       	brcs	.+4      	; 0x9a0 <vTaskResume+0xb6>
     99c:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	cf 91       	pop	r28
     9ae:	df 91       	pop	r29
     9b0:	08 95       	ret

000009b2 <xTaskResumeFromISR>:
     9b2:	df 93       	push	r29
     9b4:	cf 93       	push	r28
     9b6:	00 d0       	rcall	.+0      	; 0x9b8 <xTaskResumeFromISR+0x6>
     9b8:	00 d0       	rcall	.+0      	; 0x9ba <xTaskResumeFromISR+0x8>
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	9e 83       	std	Y+6, r25	; 0x06
     9c0:	8d 83       	std	Y+5, r24	; 0x05
     9c2:	1c 82       	std	Y+4, r1	; 0x04
     9c4:	8d 81       	ldd	r24, Y+5	; 0x05
     9c6:	9e 81       	ldd	r25, Y+6	; 0x06
     9c8:	9b 83       	std	Y+3, r25	; 0x03
     9ca:	8a 83       	std	Y+2, r24	; 0x02
     9cc:	19 82       	std	Y+1, r1	; 0x01
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	9b 81       	ldd	r25, Y+3	; 0x03
     9d2:	0e 94 46 04 	call	0x88c	; 0x88c <xTaskIsTaskSuspended>
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	09 f0       	breq	.+2      	; 0x9dc <xTaskResumeFromISR+0x2a>
     9da:	47 c0       	rjmp	.+142    	; 0xa6a <xTaskResumeFromISR+0xb8>
     9dc:	80 91 2e 02 	lds	r24, 0x022E
     9e0:	88 23       	and	r24, r24
     9e2:	c9 f5       	brne	.+114    	; 0xa56 <xTaskResumeFromISR+0xa4>
     9e4:	ea 81       	ldd	r30, Y+2	; 0x02
     9e6:	fb 81       	ldd	r31, Y+3	; 0x03
     9e8:	96 89       	ldd	r25, Z+22	; 0x16
     9ea:	e0 91 26 02 	lds	r30, 0x0226
     9ee:	f0 91 27 02 	lds	r31, 0x0227
     9f2:	86 89       	ldd	r24, Z+22	; 0x16
     9f4:	1c 82       	std	Y+4, r1	; 0x04
     9f6:	98 17       	cp	r25, r24
     9f8:	10 f0       	brcs	.+4      	; 0x9fe <xTaskResumeFromISR+0x4c>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	8c 83       	std	Y+4, r24	; 0x04
     9fe:	8a 81       	ldd	r24, Y+2	; 0x02
     a00:	9b 81       	ldd	r25, Y+3	; 0x03
     a02:	02 96       	adiw	r24, 0x02	; 2
     a04:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     a08:	ea 81       	ldd	r30, Y+2	; 0x02
     a0a:	fb 81       	ldd	r31, Y+3	; 0x03
     a0c:	96 89       	ldd	r25, Z+22	; 0x16
     a0e:	80 91 2c 02 	lds	r24, 0x022C
     a12:	89 17       	cp	r24, r25
     a14:	28 f4       	brcc	.+10     	; 0xa20 <xTaskResumeFromISR+0x6e>
     a16:	ea 81       	ldd	r30, Y+2	; 0x02
     a18:	fb 81       	ldd	r31, Y+3	; 0x03
     a1a:	86 89       	ldd	r24, Z+22	; 0x16
     a1c:	80 93 2c 02 	sts	0x022C, r24
     a20:	ea 81       	ldd	r30, Y+2	; 0x02
     a22:	fb 81       	ldd	r31, Y+3	; 0x03
     a24:	86 89       	ldd	r24, Z+22	; 0x16
     a26:	28 2f       	mov	r18, r24
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	c9 01       	movw	r24, r18
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	82 0f       	add	r24, r18
     a3a:	93 1f       	adc	r25, r19
     a3c:	ac 01       	movw	r20, r24
     a3e:	4d 5c       	subi	r20, 0xCD	; 205
     a40:	5d 4f       	sbci	r21, 0xFD	; 253
     a42:	8a 81       	ldd	r24, Y+2	; 0x02
     a44:	9b 81       	ldd	r25, Y+3	; 0x03
     a46:	9c 01       	movw	r18, r24
     a48:	2e 5f       	subi	r18, 0xFE	; 254
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	ca 01       	movw	r24, r20
     a4e:	b9 01       	movw	r22, r18
     a50:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
     a54:	0a c0       	rjmp	.+20     	; 0xa6a <xTaskResumeFromISR+0xb8>
     a56:	8a 81       	ldd	r24, Y+2	; 0x02
     a58:	9b 81       	ldd	r25, Y+3	; 0x03
     a5a:	9c 01       	movw	r18, r24
     a5c:	24 5f       	subi	r18, 0xF4	; 244
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	8d e6       	ldi	r24, 0x6D	; 109
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	b9 01       	movw	r22, r18
     a66:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
     a6a:	8c 81       	ldd	r24, Y+4	; 0x04
     a6c:	26 96       	adiw	r28, 0x06	; 6
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	cf 91       	pop	r28
     a7a:	df 91       	pop	r29
     a7c:	08 95       	ret

00000a7e <vTaskStartScheduler>:
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	0f 92       	push	r0
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	8f ed       	ldi	r24, 0xDF	; 223
     a98:	98 e0       	ldi	r25, 0x08	; 8
     a9a:	22 e0       	ldi	r18, 0x02	; 2
     a9c:	32 e0       	ldi	r19, 0x02	; 2
     a9e:	b9 01       	movw	r22, r18
     aa0:	45 e5       	ldi	r20, 0x55	; 85
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	00 e0       	ldi	r16, 0x00	; 0
     aaa:	ee 24       	eor	r14, r14
     aac:	ff 24       	eor	r15, r15
     aae:	cc 24       	eor	r12, r12
     ab0:	dd 24       	eor	r13, r13
     ab2:	aa 24       	eor	r10, r10
     ab4:	bb 24       	eor	r11, r11
     ab6:	0e 94 4a 02 	call	0x494	; 0x494 <xTaskGenericCreate>
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	51 f4       	brne	.+20     	; 0xad6 <vTaskStartScheduler+0x58>
     ac2:	f8 94       	cli
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 2d 02 	sts	0x022D, r24
     aca:	10 92 2a 02 	sts	0x022A, r1
     ace:	10 92 29 02 	sts	0x0229, r1
     ad2:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <xPortStartScheduler>
     ad6:	0f 90       	pop	r0
     ad8:	cf 91       	pop	r28
     ada:	df 91       	pop	r29
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	bf 90       	pop	r11
     ae8:	af 90       	pop	r10
     aea:	08 95       	ret

00000aec <vTaskEndScheduler>:
     aec:	df 93       	push	r29
     aee:	cf 93       	push	r28
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	f8 94       	cli
     af6:	10 92 2d 02 	sts	0x022D, r1
     afa:	0e 94 02 17 	call	0x2e04	; 0x2e04 <vPortEndScheduler>
     afe:	cf 91       	pop	r28
     b00:	df 91       	pop	r29
     b02:	08 95       	ret

00000b04 <vTaskSuspendAll>:
     b04:	df 93       	push	r29
     b06:	cf 93       	push	r28
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	80 91 2e 02 	lds	r24, 0x022E
     b10:	8f 5f       	subi	r24, 0xFF	; 255
     b12:	80 93 2e 02 	sts	0x022E, r24
     b16:	cf 91       	pop	r28
     b18:	df 91       	pop	r29
     b1a:	08 95       	ret

00000b1c <xTaskResumeAll>:
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	00 d0       	rcall	.+0      	; 0xb22 <xTaskResumeAll+0x6>
     b22:	0f 92       	push	r0
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	1a 82       	std	Y+2, r1	; 0x02
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	0f 92       	push	r0
     b30:	80 91 2e 02 	lds	r24, 0x022E
     b34:	81 50       	subi	r24, 0x01	; 1
     b36:	80 93 2e 02 	sts	0x022E, r24
     b3a:	80 91 2e 02 	lds	r24, 0x022E
     b3e:	88 23       	and	r24, r24
     b40:	09 f0       	breq	.+2      	; 0xb44 <xTaskResumeAll+0x28>
     b42:	6c c0       	rjmp	.+216    	; 0xc1c <xTaskResumeAll+0x100>
     b44:	80 91 28 02 	lds	r24, 0x0228
     b48:	88 23       	and	r24, r24
     b4a:	09 f4       	brne	.+2      	; 0xb4e <xTaskResumeAll+0x32>
     b4c:	67 c0       	rjmp	.+206    	; 0xc1c <xTaskResumeAll+0x100>
     b4e:	19 82       	std	Y+1, r1	; 0x01
     b50:	41 c0       	rjmp	.+130    	; 0xbd4 <xTaskResumeAll+0xb8>
     b52:	e0 91 72 02 	lds	r30, 0x0272
     b56:	f0 91 73 02 	lds	r31, 0x0273
     b5a:	86 81       	ldd	r24, Z+6	; 0x06
     b5c:	97 81       	ldd	r25, Z+7	; 0x07
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	8b 83       	std	Y+3, r24	; 0x03
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	0c 96       	adiw	r24, 0x0c	; 12
     b68:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	9c 81       	ldd	r25, Y+4	; 0x04
     b70:	02 96       	adiw	r24, 0x02	; 2
     b72:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     b76:	eb 81       	ldd	r30, Y+3	; 0x03
     b78:	fc 81       	ldd	r31, Y+4	; 0x04
     b7a:	96 89       	ldd	r25, Z+22	; 0x16
     b7c:	80 91 2c 02 	lds	r24, 0x022C
     b80:	89 17       	cp	r24, r25
     b82:	28 f4       	brcc	.+10     	; 0xb8e <xTaskResumeAll+0x72>
     b84:	eb 81       	ldd	r30, Y+3	; 0x03
     b86:	fc 81       	ldd	r31, Y+4	; 0x04
     b88:	86 89       	ldd	r24, Z+22	; 0x16
     b8a:	80 93 2c 02 	sts	0x022C, r24
     b8e:	eb 81       	ldd	r30, Y+3	; 0x03
     b90:	fc 81       	ldd	r31, Y+4	; 0x04
     b92:	86 89       	ldd	r24, Z+22	; 0x16
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	c9 01       	movw	r24, r18
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	82 0f       	add	r24, r18
     ba8:	93 1f       	adc	r25, r19
     baa:	8d 5c       	subi	r24, 0xCD	; 205
     bac:	9d 4f       	sbci	r25, 0xFD	; 253
     bae:	2b 81       	ldd	r18, Y+3	; 0x03
     bb0:	3c 81       	ldd	r19, Y+4	; 0x04
     bb2:	2e 5f       	subi	r18, 0xFE	; 254
     bb4:	3f 4f       	sbci	r19, 0xFF	; 255
     bb6:	b9 01       	movw	r22, r18
     bb8:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
     bbc:	eb 81       	ldd	r30, Y+3	; 0x03
     bbe:	fc 81       	ldd	r31, Y+4	; 0x04
     bc0:	96 89       	ldd	r25, Z+22	; 0x16
     bc2:	e0 91 26 02 	lds	r30, 0x0226
     bc6:	f0 91 27 02 	lds	r31, 0x0227
     bca:	86 89       	ldd	r24, Z+22	; 0x16
     bcc:	98 17       	cp	r25, r24
     bce:	10 f0       	brcs	.+4      	; 0xbd4 <xTaskResumeAll+0xb8>
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	89 83       	std	Y+1, r24	; 0x01
     bd4:	80 91 6d 02 	lds	r24, 0x026D
     bd8:	88 23       	and	r24, r24
     bda:	09 f0       	breq	.+2      	; 0xbde <xTaskResumeAll+0xc2>
     bdc:	ba cf       	rjmp	.-140    	; 0xb52 <xTaskResumeAll+0x36>
     bde:	80 91 2f 02 	lds	r24, 0x022F
     be2:	88 23       	and	r24, r24
     be4:	71 f0       	breq	.+28     	; 0xc02 <xTaskResumeAll+0xe6>
     be6:	07 c0       	rjmp	.+14     	; 0xbf6 <xTaskResumeAll+0xda>
     be8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <vTaskIncrementTick>
     bec:	80 91 2f 02 	lds	r24, 0x022F
     bf0:	81 50       	subi	r24, 0x01	; 1
     bf2:	80 93 2f 02 	sts	0x022F, r24
     bf6:	80 91 2f 02 	lds	r24, 0x022F
     bfa:	88 23       	and	r24, r24
     bfc:	a9 f7       	brne	.-22     	; 0xbe8 <xTaskResumeAll+0xcc>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	89 83       	std	Y+1, r24	; 0x01
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	21 f0       	breq	.+8      	; 0xc10 <xTaskResumeAll+0xf4>
     c08:	80 91 30 02 	lds	r24, 0x0230
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	31 f4       	brne	.+12     	; 0xc1c <xTaskResumeAll+0x100>
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	8a 83       	std	Y+2, r24	; 0x02
     c14:	10 92 30 02 	sts	0x0230, r1
     c18:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <xTaskGetTickCount>:
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	0f 92       	push	r0
     c36:	0f 92       	push	r0
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	0f 92       	push	r0
     c42:	80 91 29 02 	lds	r24, 0x0229
     c46:	90 91 2a 02 	lds	r25, 0x022A
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <xTaskGetTickCountFromISR>:
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	00 d0       	rcall	.+0      	; 0xc66 <xTaskGetTickCountFromISR+0x6>
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	19 82       	std	Y+1, r1	; 0x01
     c6c:	80 91 29 02 	lds	r24, 0x0229
     c70:	90 91 2a 02 	lds	r25, 0x022A
     c74:	9b 83       	std	Y+3, r25	; 0x03
     c76:	8a 83       	std	Y+2, r24	; 0x02
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	9b 81       	ldd	r25, Y+3	; 0x03
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <uxTaskGetNumberOfTasks>:
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	80 91 28 02 	lds	r24, 0x0228
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <vTaskIncrementTick>:
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <vTaskIncrementTick+0x6>
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <vTaskIncrementTick+0x8>
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	80 91 2e 02 	lds	r24, 0x022E
     caa:	88 23       	and	r24, r24
     cac:	09 f0       	breq	.+2      	; 0xcb0 <vTaskIncrementTick+0x16>
     cae:	bb c0       	rjmp	.+374    	; 0xe26 <vTaskIncrementTick+0x18c>
     cb0:	80 91 29 02 	lds	r24, 0x0229
     cb4:	90 91 2a 02 	lds	r25, 0x022A
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	90 93 2a 02 	sts	0x022A, r25
     cbe:	80 93 29 02 	sts	0x0229, r24
     cc2:	80 91 29 02 	lds	r24, 0x0229
     cc6:	90 91 2a 02 	lds	r25, 0x022A
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	d1 f5       	brne	.+116    	; 0xd42 <vTaskIncrementTick+0xa8>
     cce:	80 91 69 02 	lds	r24, 0x0269
     cd2:	90 91 6a 02 	lds	r25, 0x026A
     cd6:	9c 83       	std	Y+4, r25	; 0x04
     cd8:	8b 83       	std	Y+3, r24	; 0x03
     cda:	80 91 6b 02 	lds	r24, 0x026B
     cde:	90 91 6c 02 	lds	r25, 0x026C
     ce2:	90 93 6a 02 	sts	0x026A, r25
     ce6:	80 93 69 02 	sts	0x0269, r24
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	90 93 6c 02 	sts	0x026C, r25
     cf2:	80 93 6b 02 	sts	0x026B, r24
     cf6:	80 91 31 02 	lds	r24, 0x0231
     cfa:	8f 5f       	subi	r24, 0xFF	; 255
     cfc:	80 93 31 02 	sts	0x0231, r24
     d00:	e0 91 69 02 	lds	r30, 0x0269
     d04:	f0 91 6a 02 	lds	r31, 0x026A
     d08:	80 81       	ld	r24, Z
     d0a:	88 23       	and	r24, r24
     d0c:	39 f4       	brne	.+14     	; 0xd1c <vTaskIncrementTick+0x82>
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	9f ef       	ldi	r25, 0xFF	; 255
     d12:	90 93 01 02 	sts	0x0201, r25
     d16:	80 93 00 02 	sts	0x0200, r24
     d1a:	13 c0       	rjmp	.+38     	; 0xd42 <vTaskIncrementTick+0xa8>
     d1c:	e0 91 69 02 	lds	r30, 0x0269
     d20:	f0 91 6a 02 	lds	r31, 0x026A
     d24:	05 80       	ldd	r0, Z+5	; 0x05
     d26:	f6 81       	ldd	r31, Z+6	; 0x06
     d28:	e0 2d       	mov	r30, r0
     d2a:	86 81       	ldd	r24, Z+6	; 0x06
     d2c:	97 81       	ldd	r25, Z+7	; 0x07
     d2e:	9e 83       	std	Y+6, r25	; 0x06
     d30:	8d 83       	std	Y+5, r24	; 0x05
     d32:	ed 81       	ldd	r30, Y+5	; 0x05
     d34:	fe 81       	ldd	r31, Y+6	; 0x06
     d36:	82 81       	ldd	r24, Z+2	; 0x02
     d38:	93 81       	ldd	r25, Z+3	; 0x03
     d3a:	90 93 01 02 	sts	0x0201, r25
     d3e:	80 93 00 02 	sts	0x0200, r24
     d42:	20 91 29 02 	lds	r18, 0x0229
     d46:	30 91 2a 02 	lds	r19, 0x022A
     d4a:	80 91 00 02 	lds	r24, 0x0200
     d4e:	90 91 01 02 	lds	r25, 0x0201
     d52:	28 17       	cp	r18, r24
     d54:	39 07       	cpc	r19, r25
     d56:	08 f4       	brcc	.+2      	; 0xd5a <vTaskIncrementTick+0xc0>
     d58:	6b c0       	rjmp	.+214    	; 0xe30 <vTaskIncrementTick+0x196>
     d5a:	e0 91 69 02 	lds	r30, 0x0269
     d5e:	f0 91 6a 02 	lds	r31, 0x026A
     d62:	80 81       	ld	r24, Z
     d64:	88 23       	and	r24, r24
     d66:	39 f4       	brne	.+14     	; 0xd76 <vTaskIncrementTick+0xdc>
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	9f ef       	ldi	r25, 0xFF	; 255
     d6c:	90 93 01 02 	sts	0x0201, r25
     d70:	80 93 00 02 	sts	0x0200, r24
     d74:	5d c0       	rjmp	.+186    	; 0xe30 <vTaskIncrementTick+0x196>
     d76:	e0 91 69 02 	lds	r30, 0x0269
     d7a:	f0 91 6a 02 	lds	r31, 0x026A
     d7e:	05 80       	ldd	r0, Z+5	; 0x05
     d80:	f6 81       	ldd	r31, Z+6	; 0x06
     d82:	e0 2d       	mov	r30, r0
     d84:	86 81       	ldd	r24, Z+6	; 0x06
     d86:	97 81       	ldd	r25, Z+7	; 0x07
     d88:	9e 83       	std	Y+6, r25	; 0x06
     d8a:	8d 83       	std	Y+5, r24	; 0x05
     d8c:	ed 81       	ldd	r30, Y+5	; 0x05
     d8e:	fe 81       	ldd	r31, Y+6	; 0x06
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	20 91 29 02 	lds	r18, 0x0229
     d9c:	30 91 2a 02 	lds	r19, 0x022A
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	28 17       	cp	r18, r24
     da6:	39 07       	cpc	r19, r25
     da8:	38 f4       	brcc	.+14     	; 0xdb8 <vTaskIncrementTick+0x11e>
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	90 93 01 02 	sts	0x0201, r25
     db2:	80 93 00 02 	sts	0x0200, r24
     db6:	3c c0       	rjmp	.+120    	; 0xe30 <vTaskIncrementTick+0x196>
     db8:	8d 81       	ldd	r24, Y+5	; 0x05
     dba:	9e 81       	ldd	r25, Y+6	; 0x06
     dbc:	02 96       	adiw	r24, 0x02	; 2
     dbe:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     dc2:	ed 81       	ldd	r30, Y+5	; 0x05
     dc4:	fe 81       	ldd	r31, Y+6	; 0x06
     dc6:	84 89       	ldd	r24, Z+20	; 0x14
     dc8:	95 89       	ldd	r25, Z+21	; 0x15
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <vTaskIncrementTick+0x13e>
     dce:	8d 81       	ldd	r24, Y+5	; 0x05
     dd0:	9e 81       	ldd	r25, Y+6	; 0x06
     dd2:	0c 96       	adiw	r24, 0x0c	; 12
     dd4:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     dd8:	ed 81       	ldd	r30, Y+5	; 0x05
     dda:	fe 81       	ldd	r31, Y+6	; 0x06
     ddc:	96 89       	ldd	r25, Z+22	; 0x16
     dde:	80 91 2c 02 	lds	r24, 0x022C
     de2:	89 17       	cp	r24, r25
     de4:	28 f4       	brcc	.+10     	; 0xdf0 <vTaskIncrementTick+0x156>
     de6:	ed 81       	ldd	r30, Y+5	; 0x05
     de8:	fe 81       	ldd	r31, Y+6	; 0x06
     dea:	86 89       	ldd	r24, Z+22	; 0x16
     dec:	80 93 2c 02 	sts	0x022C, r24
     df0:	ed 81       	ldd	r30, Y+5	; 0x05
     df2:	fe 81       	ldd	r31, Y+6	; 0x06
     df4:	86 89       	ldd	r24, Z+22	; 0x16
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	c9 01       	movw	r24, r18
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	82 0f       	add	r24, r18
     e0a:	93 1f       	adc	r25, r19
     e0c:	ac 01       	movw	r20, r24
     e0e:	4d 5c       	subi	r20, 0xCD	; 205
     e10:	5d 4f       	sbci	r21, 0xFD	; 253
     e12:	8d 81       	ldd	r24, Y+5	; 0x05
     e14:	9e 81       	ldd	r25, Y+6	; 0x06
     e16:	9c 01       	movw	r18, r24
     e18:	2e 5f       	subi	r18, 0xFE	; 254
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	ca 01       	movw	r24, r20
     e1e:	b9 01       	movw	r22, r18
     e20:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
     e24:	9a cf       	rjmp	.-204    	; 0xd5a <vTaskIncrementTick+0xc0>
     e26:	80 91 2f 02 	lds	r24, 0x022F
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	80 93 2f 02 	sts	0x022F, r24
     e30:	26 96       	adiw	r28, 0x06	; 6
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <vTaskSwitchContext>:
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	0f 92       	push	r0
     e48:	0f 92       	push	r0
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	80 91 2e 02 	lds	r24, 0x022E
     e52:	88 23       	and	r24, r24
     e54:	21 f0       	breq	.+8      	; 0xe5e <vTaskSwitchContext+0x1c>
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	80 93 30 02 	sts	0x0230, r24
     e5c:	70 c0       	rjmp	.+224    	; 0xf3e <vTaskSwitchContext+0xfc>
     e5e:	e0 91 26 02 	lds	r30, 0x0226
     e62:	f0 91 27 02 	lds	r31, 0x0227
     e66:	20 81       	ld	r18, Z
     e68:	31 81       	ldd	r19, Z+1	; 0x01
     e6a:	e0 91 26 02 	lds	r30, 0x0226
     e6e:	f0 91 27 02 	lds	r31, 0x0227
     e72:	87 89       	ldd	r24, Z+23	; 0x17
     e74:	90 8d       	ldd	r25, Z+24	; 0x18
     e76:	82 17       	cp	r24, r18
     e78:	93 07       	cpc	r25, r19
     e7a:	90 f0       	brcs	.+36     	; 0xea0 <vTaskSwitchContext+0x5e>
     e7c:	80 91 26 02 	lds	r24, 0x0226
     e80:	90 91 27 02 	lds	r25, 0x0227
     e84:	20 91 26 02 	lds	r18, 0x0226
     e88:	30 91 27 02 	lds	r19, 0x0227
     e8c:	27 5e       	subi	r18, 0xE7	; 231
     e8e:	3f 4f       	sbci	r19, 0xFF	; 255
     e90:	b9 01       	movw	r22, r18
     e92:	0e 94 af 00 	call	0x15e	; 0x15e <vApplicationStackOverflowHook>
     e96:	80 91 2c 02 	lds	r24, 0x022C
     e9a:	81 50       	subi	r24, 0x01	; 1
     e9c:	80 93 2c 02 	sts	0x022C, r24
     ea0:	80 91 2c 02 	lds	r24, 0x022C
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	c9 01       	movw	r24, r18
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	fc 01       	movw	r30, r24
     ebc:	ed 5c       	subi	r30, 0xCD	; 205
     ebe:	fd 4f       	sbci	r31, 0xFD	; 253
     ec0:	80 81       	ld	r24, Z
     ec2:	88 23       	and	r24, r24
     ec4:	41 f3       	breq	.-48     	; 0xe96 <vTaskSwitchContext+0x54>
     ec6:	80 91 2c 02 	lds	r24, 0x022C
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	c9 01       	movw	r24, r18
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	82 0f       	add	r24, r18
     ede:	93 1f       	adc	r25, r19
     ee0:	8d 5c       	subi	r24, 0xCD	; 205
     ee2:	9d 4f       	sbci	r25, 0xFD	; 253
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	e9 81       	ldd	r30, Y+1	; 0x01
     eea:	fa 81       	ldd	r31, Y+2	; 0x02
     eec:	01 80       	ldd	r0, Z+1	; 0x01
     eee:	f2 81       	ldd	r31, Z+2	; 0x02
     ef0:	e0 2d       	mov	r30, r0
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	e9 81       	ldd	r30, Y+1	; 0x01
     ef8:	fa 81       	ldd	r31, Y+2	; 0x02
     efa:	92 83       	std	Z+2, r25	; 0x02
     efc:	81 83       	std	Z+1, r24	; 0x01
     efe:	e9 81       	ldd	r30, Y+1	; 0x01
     f00:	fa 81       	ldd	r31, Y+2	; 0x02
     f02:	21 81       	ldd	r18, Z+1	; 0x01
     f04:	32 81       	ldd	r19, Z+2	; 0x02
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	03 96       	adiw	r24, 0x03	; 3
     f0c:	28 17       	cp	r18, r24
     f0e:	39 07       	cpc	r19, r25
     f10:	59 f4       	brne	.+22     	; 0xf28 <vTaskSwitchContext+0xe6>
     f12:	e9 81       	ldd	r30, Y+1	; 0x01
     f14:	fa 81       	ldd	r31, Y+2	; 0x02
     f16:	01 80       	ldd	r0, Z+1	; 0x01
     f18:	f2 81       	ldd	r31, Z+2	; 0x02
     f1a:	e0 2d       	mov	r30, r0
     f1c:	82 81       	ldd	r24, Z+2	; 0x02
     f1e:	93 81       	ldd	r25, Z+3	; 0x03
     f20:	e9 81       	ldd	r30, Y+1	; 0x01
     f22:	fa 81       	ldd	r31, Y+2	; 0x02
     f24:	92 83       	std	Z+2, r25	; 0x02
     f26:	81 83       	std	Z+1, r24	; 0x01
     f28:	e9 81       	ldd	r30, Y+1	; 0x01
     f2a:	fa 81       	ldd	r31, Y+2	; 0x02
     f2c:	01 80       	ldd	r0, Z+1	; 0x01
     f2e:	f2 81       	ldd	r31, Z+2	; 0x02
     f30:	e0 2d       	mov	r30, r0
     f32:	86 81       	ldd	r24, Z+6	; 0x06
     f34:	97 81       	ldd	r25, Z+7	; 0x07
     f36:	90 93 27 02 	sts	0x0227, r25
     f3a:	80 93 26 02 	sts	0x0226, r24
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <vTaskPlaceOnEventList>:
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <vTaskPlaceOnEventList+0x6>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <vTaskPlaceOnEventList+0x8>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	9c 83       	std	Y+4, r25	; 0x04
     f56:	8b 83       	std	Y+3, r24	; 0x03
     f58:	7e 83       	std	Y+6, r23	; 0x06
     f5a:	6d 83       	std	Y+5, r22	; 0x05
     f5c:	4b 81       	ldd	r20, Y+3	; 0x03
     f5e:	5c 81       	ldd	r21, Y+4	; 0x04
     f60:	80 91 26 02 	lds	r24, 0x0226
     f64:	90 91 27 02 	lds	r25, 0x0227
     f68:	9c 01       	movw	r18, r24
     f6a:	24 5f       	subi	r18, 0xF4	; 244
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	ca 01       	movw	r24, r20
     f70:	b9 01       	movw	r22, r18
     f72:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsert>
     f76:	80 91 26 02 	lds	r24, 0x0226
     f7a:	90 91 27 02 	lds	r25, 0x0227
     f7e:	02 96       	adiw	r24, 0x02	; 2
     f80:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	2f ef       	ldi	r18, 0xFF	; 255
     f8a:	8f 3f       	cpi	r24, 0xFF	; 255
     f8c:	92 07       	cpc	r25, r18
     f8e:	69 f4       	brne	.+26     	; 0xfaa <vTaskPlaceOnEventList+0x62>
     f90:	80 91 26 02 	lds	r24, 0x0226
     f94:	90 91 27 02 	lds	r25, 0x0227
     f98:	9c 01       	movw	r18, r24
     f9a:	2e 5f       	subi	r18, 0xFE	; 254
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	86 e7       	ldi	r24, 0x76	; 118
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	b9 01       	movw	r22, r18
     fa4:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
     fa8:	0e c0       	rjmp	.+28     	; 0xfc6 <vTaskPlaceOnEventList+0x7e>
     faa:	20 91 29 02 	lds	r18, 0x0229
     fae:	30 91 2a 02 	lds	r19, 0x022A
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	82 0f       	add	r24, r18
     fb8:	93 1f       	adc	r25, r19
     fba:	9a 83       	std	Y+2, r25	; 0x02
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	9a 81       	ldd	r25, Y+2	; 0x02
     fc2:	0e 94 8f 09 	call	0x131e	; 0x131e <prvAddCurrentTaskToDelayedList>
     fc6:	26 96       	adiw	r28, 0x06	; 6
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <xTaskRemoveFromEventList>:
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	00 d0       	rcall	.+0      	; 0xfde <xTaskRemoveFromEventList+0x6>
     fde:	0f 92       	push	r0
     fe0:	0f 92       	push	r0
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	9d 83       	std	Y+5, r25	; 0x05
     fe8:	8c 83       	std	Y+4, r24	; 0x04
     fea:	ec 81       	ldd	r30, Y+4	; 0x04
     fec:	fd 81       	ldd	r31, Y+5	; 0x05
     fee:	05 80       	ldd	r0, Z+5	; 0x05
     ff0:	f6 81       	ldd	r31, Z+6	; 0x06
     ff2:	e0 2d       	mov	r30, r0
     ff4:	86 81       	ldd	r24, Z+6	; 0x06
     ff6:	97 81       	ldd	r25, Z+7	; 0x07
     ff8:	9b 83       	std	Y+3, r25	; 0x03
     ffa:	8a 83       	std	Y+2, r24	; 0x02
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	0c 96       	adiw	r24, 0x0c	; 12
    1002:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
    1006:	80 91 2e 02 	lds	r24, 0x022E
    100a:	88 23       	and	r24, r24
    100c:	61 f5       	brne	.+88     	; 0x1066 <xTaskRemoveFromEventList+0x8e>
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	02 96       	adiw	r24, 0x02	; 2
    1014:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
    1018:	ea 81       	ldd	r30, Y+2	; 0x02
    101a:	fb 81       	ldd	r31, Y+3	; 0x03
    101c:	96 89       	ldd	r25, Z+22	; 0x16
    101e:	80 91 2c 02 	lds	r24, 0x022C
    1022:	89 17       	cp	r24, r25
    1024:	28 f4       	brcc	.+10     	; 0x1030 <xTaskRemoveFromEventList+0x58>
    1026:	ea 81       	ldd	r30, Y+2	; 0x02
    1028:	fb 81       	ldd	r31, Y+3	; 0x03
    102a:	86 89       	ldd	r24, Z+22	; 0x16
    102c:	80 93 2c 02 	sts	0x022C, r24
    1030:	ea 81       	ldd	r30, Y+2	; 0x02
    1032:	fb 81       	ldd	r31, Y+3	; 0x03
    1034:	86 89       	ldd	r24, Z+22	; 0x16
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	c9 01       	movw	r24, r18
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	ac 01       	movw	r20, r24
    104e:	4d 5c       	subi	r20, 0xCD	; 205
    1050:	5d 4f       	sbci	r21, 0xFD	; 253
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	9c 01       	movw	r18, r24
    1058:	2e 5f       	subi	r18, 0xFE	; 254
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	ca 01       	movw	r24, r20
    105e:	b9 01       	movw	r22, r18
    1060:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
    1064:	0a c0       	rjmp	.+20     	; 0x107a <xTaskRemoveFromEventList+0xa2>
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	9c 01       	movw	r18, r24
    106c:	24 5f       	subi	r18, 0xF4	; 244
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
    1070:	8d e6       	ldi	r24, 0x6D	; 109
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	b9 01       	movw	r22, r18
    1076:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
    107a:	ea 81       	ldd	r30, Y+2	; 0x02
    107c:	fb 81       	ldd	r31, Y+3	; 0x03
    107e:	96 89       	ldd	r25, Z+22	; 0x16
    1080:	e0 91 26 02 	lds	r30, 0x0226
    1084:	f0 91 27 02 	lds	r31, 0x0227
    1088:	86 89       	ldd	r24, Z+22	; 0x16
    108a:	98 17       	cp	r25, r24
    108c:	18 f0       	brcs	.+6      	; 0x1094 <xTaskRemoveFromEventList+0xbc>
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <xTaskRemoveFromEventList+0xbe>
    1094:	19 82       	std	Y+1, r1	; 0x01
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <vTaskSetTimeOutState>:
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	0f 92       	push	r0
    10ae:	0f 92       	push	r0
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	80 91 31 02 	lds	r24, 0x0231
    10bc:	e9 81       	ldd	r30, Y+1	; 0x01
    10be:	fa 81       	ldd	r31, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
    10c2:	80 91 29 02 	lds	r24, 0x0229
    10c6:	90 91 2a 02 	lds	r25, 0x022A
    10ca:	e9 81       	ldd	r30, Y+1	; 0x01
    10cc:	fa 81       	ldd	r31, Y+2	; 0x02
    10ce:	92 83       	std	Z+2, r25	; 0x02
    10d0:	81 83       	std	Z+1, r24	; 0x01
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <xTaskCheckForTimeOut>:
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <xTaskCheckForTimeOut+0x6>
    10e2:	0f 92       	push	r0
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	9b 83       	std	Y+3, r25	; 0x03
    10ec:	8a 83       	std	Y+2, r24	; 0x02
    10ee:	7d 83       	std	Y+5, r23	; 0x05
    10f0:	6c 83       	std	Y+4, r22	; 0x04
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	0f 92       	push	r0
    10f8:	ec 81       	ldd	r30, Y+4	; 0x04
    10fa:	fd 81       	ldd	r31, Y+5	; 0x05
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	2f ef       	ldi	r18, 0xFF	; 255
    1102:	8f 3f       	cpi	r24, 0xFF	; 255
    1104:	92 07       	cpc	r25, r18
    1106:	11 f4       	brne	.+4      	; 0x110c <xTaskCheckForTimeOut+0x30>
    1108:	19 82       	std	Y+1, r1	; 0x01
    110a:	44 c0       	rjmp	.+136    	; 0x1194 <xTaskCheckForTimeOut+0xb8>
    110c:	ea 81       	ldd	r30, Y+2	; 0x02
    110e:	fb 81       	ldd	r31, Y+3	; 0x03
    1110:	90 81       	ld	r25, Z
    1112:	80 91 31 02 	lds	r24, 0x0231
    1116:	98 17       	cp	r25, r24
    1118:	71 f0       	breq	.+28     	; 0x1136 <xTaskCheckForTimeOut+0x5a>
    111a:	ea 81       	ldd	r30, Y+2	; 0x02
    111c:	fb 81       	ldd	r31, Y+3	; 0x03
    111e:	21 81       	ldd	r18, Z+1	; 0x01
    1120:	32 81       	ldd	r19, Z+2	; 0x02
    1122:	80 91 29 02 	lds	r24, 0x0229
    1126:	90 91 2a 02 	lds	r25, 0x022A
    112a:	82 17       	cp	r24, r18
    112c:	93 07       	cpc	r25, r19
    112e:	18 f0       	brcs	.+6      	; 0x1136 <xTaskCheckForTimeOut+0x5a>
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	2f c0       	rjmp	.+94     	; 0x1194 <xTaskCheckForTimeOut+0xb8>
    1136:	20 91 29 02 	lds	r18, 0x0229
    113a:	30 91 2a 02 	lds	r19, 0x022A
    113e:	ea 81       	ldd	r30, Y+2	; 0x02
    1140:	fb 81       	ldd	r31, Y+3	; 0x03
    1142:	81 81       	ldd	r24, Z+1	; 0x01
    1144:	92 81       	ldd	r25, Z+2	; 0x02
    1146:	28 1b       	sub	r18, r24
    1148:	39 0b       	sbc	r19, r25
    114a:	ec 81       	ldd	r30, Y+4	; 0x04
    114c:	fd 81       	ldd	r31, Y+5	; 0x05
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	28 17       	cp	r18, r24
    1154:	39 07       	cpc	r19, r25
    1156:	e0 f4       	brcc	.+56     	; 0x1190 <xTaskCheckForTimeOut+0xb4>
    1158:	ec 81       	ldd	r30, Y+4	; 0x04
    115a:	fd 81       	ldd	r31, Y+5	; 0x05
    115c:	40 81       	ld	r20, Z
    115e:	51 81       	ldd	r21, Z+1	; 0x01
    1160:	ea 81       	ldd	r30, Y+2	; 0x02
    1162:	fb 81       	ldd	r31, Y+3	; 0x03
    1164:	21 81       	ldd	r18, Z+1	; 0x01
    1166:	32 81       	ldd	r19, Z+2	; 0x02
    1168:	80 91 29 02 	lds	r24, 0x0229
    116c:	90 91 2a 02 	lds	r25, 0x022A
    1170:	b9 01       	movw	r22, r18
    1172:	68 1b       	sub	r22, r24
    1174:	79 0b       	sbc	r23, r25
    1176:	cb 01       	movw	r24, r22
    1178:	84 0f       	add	r24, r20
    117a:	95 1f       	adc	r25, r21
    117c:	ec 81       	ldd	r30, Y+4	; 0x04
    117e:	fd 81       	ldd	r31, Y+5	; 0x05
    1180:	91 83       	std	Z+1, r25	; 0x01
    1182:	80 83       	st	Z, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	9b 81       	ldd	r25, Y+3	; 0x03
    1188:	0e 94 54 08 	call	0x10a8	; 0x10a8 <vTaskSetTimeOutState>
    118c:	19 82       	std	Y+1, r1	; 0x01
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <xTaskCheckForTimeOut+0xb8>
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <vTaskMissedYield>:
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 93 30 02 	sts	0x0230, r24
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <prvIdleTask>:
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	0f 92       	push	r0
    11c4:	0f 92       	push	r0
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	0e 94 88 09 	call	0x1310	; 0x1310 <prvCheckTasksWaitingTermination>
    11d2:	80 91 33 02 	lds	r24, 0x0233
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	d0 f3       	brcs	.-12     	; 0x11ce <prvIdleTask+0x10>
    11da:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
    11de:	f7 cf       	rjmp	.-18     	; 0x11ce <prvIdleTask+0x10>

000011e0 <prvInitialiseTCBVariables>:
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	29 97       	sbiw	r28, 0x09	; 9
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	7c 83       	std	Y+4, r23	; 0x04
    11fe:	6b 83       	std	Y+3, r22	; 0x03
    1200:	4d 83       	std	Y+5, r20	; 0x05
    1202:	3f 83       	std	Y+7, r19	; 0x07
    1204:	2e 83       	std	Y+6, r18	; 0x06
    1206:	19 87       	std	Y+9, r17	; 0x09
    1208:	08 87       	std	Y+8, r16	; 0x08
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	49 96       	adiw	r24, 0x19	; 25
    1210:	2b 81       	ldd	r18, Y+3	; 0x03
    1212:	3c 81       	ldd	r19, Y+4	; 0x04
    1214:	b9 01       	movw	r22, r18
    1216:	40 e1       	ldi	r20, 0x10	; 16
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	0e 94 1a 20 	call	0x4034	; 0x4034 <strncpy>
    121e:	e9 81       	ldd	r30, Y+1	; 0x01
    1220:	fa 81       	ldd	r31, Y+2	; 0x02
    1222:	10 a6       	std	Z+40, r1	; 0x28
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	10 f0       	brcs	.+4      	; 0x122e <prvInitialiseTCBVariables+0x4e>
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	8d 83       	std	Y+5, r24	; 0x05
    122e:	e9 81       	ldd	r30, Y+1	; 0x01
    1230:	fa 81       	ldd	r31, Y+2	; 0x02
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	86 8b       	std	Z+22, r24	; 0x16
    1236:	e9 81       	ldd	r30, Y+1	; 0x01
    1238:	fa 81       	ldd	r31, Y+2	; 0x02
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	81 a7       	std	Z+41, r24	; 0x29
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	02 96       	adiw	r24, 0x02	; 2
    1244:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <vListInitialiseItem>
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	0c 96       	adiw	r24, 0x0c	; 12
    124e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <vListInitialiseItem>
    1252:	e9 81       	ldd	r30, Y+1	; 0x01
    1254:	fa 81       	ldd	r31, Y+2	; 0x02
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	91 87       	std	Z+9, r25	; 0x09
    125c:	80 87       	std	Z+8, r24	; 0x08
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	84 e0       	ldi	r24, 0x04	; 4
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	82 1b       	sub	r24, r18
    126a:	93 0b       	sbc	r25, r19
    126c:	e9 81       	ldd	r30, Y+1	; 0x01
    126e:	fa 81       	ldd	r31, Y+2	; 0x02
    1270:	95 87       	std	Z+13, r25	; 0x0d
    1272:	84 87       	std	Z+12, r24	; 0x0c
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	93 8b       	std	Z+19, r25	; 0x13
    127e:	82 8b       	std	Z+18, r24	; 0x12
    1280:	29 96       	adiw	r28, 0x09	; 9
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <prvInitialiseTaskLists>:
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	0f 92       	push	r0
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	19 82       	std	Y+1, r1	; 0x01
    12a2:	13 c0       	rjmp	.+38     	; 0x12ca <prvInitialiseTaskLists+0x34>
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	c9 01       	movw	r24, r18
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	82 0f       	add	r24, r18
    12ba:	93 1f       	adc	r25, r19
    12bc:	8d 5c       	subi	r24, 0xCD	; 205
    12be:	9d 4f       	sbci	r25, 0xFD	; 253
    12c0:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	8f 5f       	subi	r24, 0xFF	; 255
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	84 30       	cpi	r24, 0x04	; 4
    12ce:	50 f3       	brcs	.-44     	; 0x12a4 <prvInitialiseTaskLists+0xe>
    12d0:	87 e5       	ldi	r24, 0x57	; 87
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    12d8:	80 e6       	ldi	r24, 0x60	; 96
    12da:	92 e0       	ldi	r25, 0x02	; 2
    12dc:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    12e0:	8d e6       	ldi	r24, 0x6D	; 109
    12e2:	92 e0       	ldi	r25, 0x02	; 2
    12e4:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    12e8:	86 e7       	ldi	r24, 0x76	; 118
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    12f0:	87 e5       	ldi	r24, 0x57	; 87
    12f2:	92 e0       	ldi	r25, 0x02	; 2
    12f4:	90 93 6a 02 	sts	0x026A, r25
    12f8:	80 93 69 02 	sts	0x0269, r24
    12fc:	80 e6       	ldi	r24, 0x60	; 96
    12fe:	92 e0       	ldi	r25, 0x02	; 2
    1300:	90 93 6c 02 	sts	0x026C, r25
    1304:	80 93 6b 02 	sts	0x026B, r24
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <prvCheckTasksWaitingTermination>:
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <prvAddCurrentTaskToDelayedList>:
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	0f 92       	push	r0
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	9a 83       	std	Y+2, r25	; 0x02
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	e0 91 26 02 	lds	r30, 0x0226
    1332:	f0 91 27 02 	lds	r31, 0x0227
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	9a 81       	ldd	r25, Y+2	; 0x02
    133a:	93 83       	std	Z+3, r25	; 0x03
    133c:	82 83       	std	Z+2, r24	; 0x02
    133e:	20 91 29 02 	lds	r18, 0x0229
    1342:	30 91 2a 02 	lds	r19, 0x022A
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	9a 81       	ldd	r25, Y+2	; 0x02
    134a:	82 17       	cp	r24, r18
    134c:	93 07       	cpc	r25, r19
    134e:	70 f4       	brcc	.+28     	; 0x136c <prvAddCurrentTaskToDelayedList+0x4e>
    1350:	80 91 6b 02 	lds	r24, 0x026B
    1354:	90 91 6c 02 	lds	r25, 0x026C
    1358:	20 91 26 02 	lds	r18, 0x0226
    135c:	30 91 27 02 	lds	r19, 0x0227
    1360:	2e 5f       	subi	r18, 0xFE	; 254
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	b9 01       	movw	r22, r18
    1366:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsert>
    136a:	1e c0       	rjmp	.+60     	; 0x13a8 <prvAddCurrentTaskToDelayedList+0x8a>
    136c:	40 91 69 02 	lds	r20, 0x0269
    1370:	50 91 6a 02 	lds	r21, 0x026A
    1374:	80 91 26 02 	lds	r24, 0x0226
    1378:	90 91 27 02 	lds	r25, 0x0227
    137c:	9c 01       	movw	r18, r24
    137e:	2e 5f       	subi	r18, 0xFE	; 254
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	ca 01       	movw	r24, r20
    1384:	b9 01       	movw	r22, r18
    1386:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsert>
    138a:	20 91 00 02 	lds	r18, 0x0200
    138e:	30 91 01 02 	lds	r19, 0x0201
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	82 17       	cp	r24, r18
    1398:	93 07       	cpc	r25, r19
    139a:	30 f4       	brcc	.+12     	; 0x13a8 <prvAddCurrentTaskToDelayedList+0x8a>
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	90 93 01 02 	sts	0x0201, r25
    13a4:	80 93 00 02 	sts	0x0200, r24
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <prvAllocateTCBAndStack>:
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	28 97       	sbiw	r28, 0x08	; 8
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	9c 83       	std	Y+4, r25	; 0x04
    13c8:	8b 83       	std	Y+3, r24	; 0x03
    13ca:	7e 83       	std	Y+6, r23	; 0x06
    13cc:	6d 83       	std	Y+5, r22	; 0x05
    13ce:	8a e2       	ldi	r24, 0x2A	; 42
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 c1 14 	call	0x2982	; 0x2982 <pvPortMalloc>
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	9a 81       	ldd	r25, Y+2	; 0x02
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	69 f1       	breq	.+90     	; 0x143c <prvAllocateTCBAndStack+0x8a>
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	39 f4       	brne	.+14     	; 0x13f8 <prvAllocateTCBAndStack+0x46>
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	0e 94 c1 14 	call	0x2982	; 0x2982 <pvPortMalloc>
    13f2:	98 87       	std	Y+8, r25	; 0x08
    13f4:	8f 83       	std	Y+7, r24	; 0x07
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <prvAllocateTCBAndStack+0x4e>
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	98 87       	std	Y+8, r25	; 0x08
    13fe:	8f 83       	std	Y+7, r24	; 0x07
    1400:	e9 81       	ldd	r30, Y+1	; 0x01
    1402:	fa 81       	ldd	r31, Y+2	; 0x02
    1404:	8f 81       	ldd	r24, Y+7	; 0x07
    1406:	98 85       	ldd	r25, Y+8	; 0x08
    1408:	90 8f       	std	Z+24, r25	; 0x18
    140a:	87 8b       	std	Z+23, r24	; 0x17
    140c:	e9 81       	ldd	r30, Y+1	; 0x01
    140e:	fa 81       	ldd	r31, Y+2	; 0x02
    1410:	87 89       	ldd	r24, Z+23	; 0x17
    1412:	90 8d       	ldd	r25, Z+24	; 0x18
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	39 f4       	brne	.+14     	; 0x1426 <prvAllocateTCBAndStack+0x74>
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vPortFree>
    1420:	1a 82       	std	Y+2, r1	; 0x02
    1422:	19 82       	std	Y+1, r1	; 0x01
    1424:	0b c0       	rjmp	.+22     	; 0x143c <prvAllocateTCBAndStack+0x8a>
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	87 89       	ldd	r24, Z+23	; 0x17
    142c:	90 8d       	ldd	r25, Z+24	; 0x18
    142e:	2b 81       	ldd	r18, Y+3	; 0x03
    1430:	3c 81       	ldd	r19, Y+4	; 0x04
    1432:	65 ea       	ldi	r22, 0xA5	; 165
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	a9 01       	movw	r20, r18
    1438:	0e 94 13 20 	call	0x4026	; 0x4026 <memset>
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	28 96       	adiw	r28, 0x08	; 8
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <usTaskCheckFreeStackSpace>:
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <usTaskCheckFreeStackSpace+0x6>
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	9a 83       	std	Y+2, r25	; 0x02
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	1c 82       	std	Y+4, r1	; 0x04
    1464:	1b 82       	std	Y+3, r1	; 0x03
    1466:	0a c0       	rjmp	.+20     	; 0x147c <usTaskCheckFreeStackSpace+0x2a>
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	9c 83       	std	Y+4, r25	; 0x04
    147a:	8b 83       	std	Y+3, r24	; 0x03
    147c:	e9 81       	ldd	r30, Y+1	; 0x01
    147e:	fa 81       	ldd	r31, Y+2	; 0x02
    1480:	80 81       	ld	r24, Z
    1482:	85 3a       	cpi	r24, 0xA5	; 165
    1484:	89 f3       	breq	.-30     	; 0x1468 <usTaskCheckFreeStackSpace+0x16>
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	9c 81       	ldd	r25, Y+4	; 0x04
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <uxTaskGetStackHighWaterMark>:
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	29 97       	sbiw	r28, 0x09	; 9
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	9f 83       	std	Y+7, r25	; 0x07
    14ae:	8e 83       	std	Y+6, r24	; 0x06
    14b0:	8e 81       	ldd	r24, Y+6	; 0x06
    14b2:	9f 81       	ldd	r25, Y+7	; 0x07
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	39 f4       	brne	.+14     	; 0x14c6 <uxTaskGetStackHighWaterMark+0x2e>
    14b8:	80 91 26 02 	lds	r24, 0x0226
    14bc:	90 91 27 02 	lds	r25, 0x0227
    14c0:	99 87       	std	Y+9, r25	; 0x09
    14c2:	88 87       	std	Y+8, r24	; 0x08
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <uxTaskGetStackHighWaterMark+0x36>
    14c6:	8e 81       	ldd	r24, Y+6	; 0x06
    14c8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ca:	99 87       	std	Y+9, r25	; 0x09
    14cc:	88 87       	std	Y+8, r24	; 0x08
    14ce:	88 85       	ldd	r24, Y+8	; 0x08
    14d0:	99 85       	ldd	r25, Y+9	; 0x09
    14d2:	9d 83       	std	Y+5, r25	; 0x05
    14d4:	8c 83       	std	Y+4, r24	; 0x04
    14d6:	ec 81       	ldd	r30, Y+4	; 0x04
    14d8:	fd 81       	ldd	r31, Y+5	; 0x05
    14da:	87 89       	ldd	r24, Z+23	; 0x17
    14dc:	90 8d       	ldd	r25, Z+24	; 0x18
    14de:	9b 83       	std	Y+3, r25	; 0x03
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	9b 81       	ldd	r25, Y+3	; 0x03
    14e6:	0e 94 29 0a 	call	0x1452	; 0x1452 <usTaskCheckFreeStackSpace>
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	29 96       	adiw	r28, 0x09	; 9
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <xTaskGetCurrentTaskHandle>:
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	0f 92       	push	r0
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	80 91 26 02 	lds	r24, 0x0226
    1510:	90 91 27 02 	lds	r25, 0x0227
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <vTaskPriorityInherit>:
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <vTaskPriorityInherit+0x6>
    152c:	0f 92       	push	r0
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	9c 83       	std	Y+4, r25	; 0x04
    1534:	8b 83       	std	Y+3, r24	; 0x03
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	09 f4       	brne	.+2      	; 0x1548 <vTaskPriorityInherit+0x22>
    1546:	6d c0       	rjmp	.+218    	; 0x1622 <vTaskPriorityInherit+0xfc>
    1548:	e9 81       	ldd	r30, Y+1	; 0x01
    154a:	fa 81       	ldd	r31, Y+2	; 0x02
    154c:	96 89       	ldd	r25, Z+22	; 0x16
    154e:	e0 91 26 02 	lds	r30, 0x0226
    1552:	f0 91 27 02 	lds	r31, 0x0227
    1556:	86 89       	ldd	r24, Z+22	; 0x16
    1558:	98 17       	cp	r25, r24
    155a:	08 f0       	brcs	.+2      	; 0x155e <vTaskPriorityInherit+0x38>
    155c:	62 c0       	rjmp	.+196    	; 0x1622 <vTaskPriorityInherit+0xfc>
    155e:	e0 91 26 02 	lds	r30, 0x0226
    1562:	f0 91 27 02 	lds	r31, 0x0227
    1566:	86 89       	ldd	r24, Z+22	; 0x16
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	84 e0       	ldi	r24, 0x04	; 4
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	82 1b       	sub	r24, r18
    1572:	93 0b       	sbc	r25, r19
    1574:	e9 81       	ldd	r30, Y+1	; 0x01
    1576:	fa 81       	ldd	r31, Y+2	; 0x02
    1578:	95 87       	std	Z+13, r25	; 0x0d
    157a:	84 87       	std	Z+12, r24	; 0x0c
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	42 85       	ldd	r20, Z+10	; 0x0a
    1582:	53 85       	ldd	r21, Z+11	; 0x0b
    1584:	e9 81       	ldd	r30, Y+1	; 0x01
    1586:	fa 81       	ldd	r31, Y+2	; 0x02
    1588:	86 89       	ldd	r24, Z+22	; 0x16
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	c9 01       	movw	r24, r18
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	82 0f       	add	r24, r18
    159e:	93 1f       	adc	r25, r19
    15a0:	8d 5c       	subi	r24, 0xCD	; 205
    15a2:	9d 4f       	sbci	r25, 0xFD	; 253
    15a4:	48 17       	cp	r20, r24
    15a6:	59 07       	cpc	r21, r25
    15a8:	a1 f5       	brne	.+104    	; 0x1612 <vTaskPriorityInherit+0xec>
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	02 96       	adiw	r24, 0x02	; 2
    15b0:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
    15b4:	e0 91 26 02 	lds	r30, 0x0226
    15b8:	f0 91 27 02 	lds	r31, 0x0227
    15bc:	86 89       	ldd	r24, Z+22	; 0x16
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	86 8b       	std	Z+22, r24	; 0x16
    15c4:	e9 81       	ldd	r30, Y+1	; 0x01
    15c6:	fa 81       	ldd	r31, Y+2	; 0x02
    15c8:	96 89       	ldd	r25, Z+22	; 0x16
    15ca:	80 91 2c 02 	lds	r24, 0x022C
    15ce:	89 17       	cp	r24, r25
    15d0:	28 f4       	brcc	.+10     	; 0x15dc <vTaskPriorityInherit+0xb6>
    15d2:	e9 81       	ldd	r30, Y+1	; 0x01
    15d4:	fa 81       	ldd	r31, Y+2	; 0x02
    15d6:	86 89       	ldd	r24, Z+22	; 0x16
    15d8:	80 93 2c 02 	sts	0x022C, r24
    15dc:	e9 81       	ldd	r30, Y+1	; 0x01
    15de:	fa 81       	ldd	r31, Y+2	; 0x02
    15e0:	86 89       	ldd	r24, Z+22	; 0x16
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	c9 01       	movw	r24, r18
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	82 0f       	add	r24, r18
    15f6:	93 1f       	adc	r25, r19
    15f8:	ac 01       	movw	r20, r24
    15fa:	4d 5c       	subi	r20, 0xCD	; 205
    15fc:	5d 4f       	sbci	r21, 0xFD	; 253
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	9c 01       	movw	r18, r24
    1604:	2e 5f       	subi	r18, 0xFE	; 254
    1606:	3f 4f       	sbci	r19, 0xFF	; 255
    1608:	ca 01       	movw	r24, r20
    160a:	b9 01       	movw	r22, r18
    160c:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
    1610:	08 c0       	rjmp	.+16     	; 0x1622 <vTaskPriorityInherit+0xfc>
    1612:	e0 91 26 02 	lds	r30, 0x0226
    1616:	f0 91 27 02 	lds	r31, 0x0227
    161a:	86 89       	ldd	r24, Z+22	; 0x16
    161c:	e9 81       	ldd	r30, Y+1	; 0x01
    161e:	fa 81       	ldd	r31, Y+2	; 0x02
    1620:	86 8b       	std	Z+22, r24	; 0x16
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <vTaskPriorityDisinherit>:
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <vTaskPriorityDisinherit+0x6>
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	9c 83       	std	Y+4, r25	; 0x04
    163e:	8b 83       	std	Y+3, r24	; 0x03
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	9c 81       	ldd	r25, Y+4	; 0x04
    1644:	9a 83       	std	Y+2, r25	; 0x02
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	09 f4       	brne	.+2      	; 0x1652 <vTaskPriorityDisinherit+0x22>
    1650:	47 c0       	rjmp	.+142    	; 0x16e0 <vTaskPriorityDisinherit+0xb0>
    1652:	e9 81       	ldd	r30, Y+1	; 0x01
    1654:	fa 81       	ldd	r31, Y+2	; 0x02
    1656:	96 89       	ldd	r25, Z+22	; 0x16
    1658:	e9 81       	ldd	r30, Y+1	; 0x01
    165a:	fa 81       	ldd	r31, Y+2	; 0x02
    165c:	81 a5       	ldd	r24, Z+41	; 0x29
    165e:	98 17       	cp	r25, r24
    1660:	09 f4       	brne	.+2      	; 0x1664 <vTaskPriorityDisinherit+0x34>
    1662:	3e c0       	rjmp	.+124    	; 0x16e0 <vTaskPriorityDisinherit+0xb0>
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	02 96       	adiw	r24, 0x02	; 2
    166a:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
    166e:	e9 81       	ldd	r30, Y+1	; 0x01
    1670:	fa 81       	ldd	r31, Y+2	; 0x02
    1672:	81 a5       	ldd	r24, Z+41	; 0x29
    1674:	e9 81       	ldd	r30, Y+1	; 0x01
    1676:	fa 81       	ldd	r31, Y+2	; 0x02
    1678:	86 8b       	std	Z+22, r24	; 0x16
    167a:	e9 81       	ldd	r30, Y+1	; 0x01
    167c:	fa 81       	ldd	r31, Y+2	; 0x02
    167e:	86 89       	ldd	r24, Z+22	; 0x16
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	84 e0       	ldi	r24, 0x04	; 4
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	82 1b       	sub	r24, r18
    168a:	93 0b       	sbc	r25, r19
    168c:	e9 81       	ldd	r30, Y+1	; 0x01
    168e:	fa 81       	ldd	r31, Y+2	; 0x02
    1690:	95 87       	std	Z+13, r25	; 0x0d
    1692:	84 87       	std	Z+12, r24	; 0x0c
    1694:	e9 81       	ldd	r30, Y+1	; 0x01
    1696:	fa 81       	ldd	r31, Y+2	; 0x02
    1698:	96 89       	ldd	r25, Z+22	; 0x16
    169a:	80 91 2c 02 	lds	r24, 0x022C
    169e:	89 17       	cp	r24, r25
    16a0:	28 f4       	brcc	.+10     	; 0x16ac <vTaskPriorityDisinherit+0x7c>
    16a2:	e9 81       	ldd	r30, Y+1	; 0x01
    16a4:	fa 81       	ldd	r31, Y+2	; 0x02
    16a6:	86 89       	ldd	r24, Z+22	; 0x16
    16a8:	80 93 2c 02 	sts	0x022C, r24
    16ac:	e9 81       	ldd	r30, Y+1	; 0x01
    16ae:	fa 81       	ldd	r31, Y+2	; 0x02
    16b0:	86 89       	ldd	r24, Z+22	; 0x16
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	c9 01       	movw	r24, r18
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	82 0f       	add	r24, r18
    16c6:	93 1f       	adc	r25, r19
    16c8:	ac 01       	movw	r20, r24
    16ca:	4d 5c       	subi	r20, 0xCD	; 205
    16cc:	5d 4f       	sbci	r21, 0xFD	; 253
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	9c 01       	movw	r18, r24
    16d4:	2e 5f       	subi	r18, 0xFE	; 254
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
    16d8:	ca 01       	movw	r24, r20
    16da:	b9 01       	movw	r22, r18
    16dc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <xQueueGenericReset>:
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <xQueueGenericReset+0x6>
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	6b 83       	std	Y+3, r22	; 0x03
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	0f 92       	push	r0
    1704:	e9 81       	ldd	r30, Y+1	; 0x01
    1706:	fa 81       	ldd	r31, Y+2	; 0x02
    1708:	40 81       	ld	r20, Z
    170a:	51 81       	ldd	r21, Z+1	; 0x01
    170c:	e9 81       	ldd	r30, Y+1	; 0x01
    170e:	fa 81       	ldd	r31, Y+2	; 0x02
    1710:	83 8d       	ldd	r24, Z+27	; 0x1b
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	e9 81       	ldd	r30, Y+1	; 0x01
    1718:	fa 81       	ldd	r31, Y+2	; 0x02
    171a:	84 8d       	ldd	r24, Z+28	; 0x1c
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	bc 01       	movw	r22, r24
    1722:	26 9f       	mul	r18, r22
    1724:	c0 01       	movw	r24, r0
    1726:	27 9f       	mul	r18, r23
    1728:	90 0d       	add	r25, r0
    172a:	36 9f       	mul	r19, r22
    172c:	90 0d       	add	r25, r0
    172e:	11 24       	eor	r1, r1
    1730:	84 0f       	add	r24, r20
    1732:	95 1f       	adc	r25, r21
    1734:	e9 81       	ldd	r30, Y+1	; 0x01
    1736:	fa 81       	ldd	r31, Y+2	; 0x02
    1738:	93 83       	std	Z+3, r25	; 0x03
    173a:	82 83       	std	Z+2, r24	; 0x02
    173c:	e9 81       	ldd	r30, Y+1	; 0x01
    173e:	fa 81       	ldd	r31, Y+2	; 0x02
    1740:	12 8e       	std	Z+26, r1	; 0x1a
    1742:	e9 81       	ldd	r30, Y+1	; 0x01
    1744:	fa 81       	ldd	r31, Y+2	; 0x02
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	e9 81       	ldd	r30, Y+1	; 0x01
    174c:	fa 81       	ldd	r31, Y+2	; 0x02
    174e:	95 83       	std	Z+5, r25	; 0x05
    1750:	84 83       	std	Z+4, r24	; 0x04
    1752:	e9 81       	ldd	r30, Y+1	; 0x01
    1754:	fa 81       	ldd	r31, Y+2	; 0x02
    1756:	40 81       	ld	r20, Z
    1758:	51 81       	ldd	r21, Z+1	; 0x01
    175a:	e9 81       	ldd	r30, Y+1	; 0x01
    175c:	fa 81       	ldd	r31, Y+2	; 0x02
    175e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c 01       	movw	r18, r24
    1766:	21 50       	subi	r18, 0x01	; 1
    1768:	30 40       	sbci	r19, 0x00	; 0
    176a:	e9 81       	ldd	r30, Y+1	; 0x01
    176c:	fa 81       	ldd	r31, Y+2	; 0x02
    176e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	bc 01       	movw	r22, r24
    1776:	26 9f       	mul	r18, r22
    1778:	c0 01       	movw	r24, r0
    177a:	27 9f       	mul	r18, r23
    177c:	90 0d       	add	r25, r0
    177e:	36 9f       	mul	r19, r22
    1780:	90 0d       	add	r25, r0
    1782:	11 24       	eor	r1, r1
    1784:	84 0f       	add	r24, r20
    1786:	95 1f       	adc	r25, r21
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	97 83       	std	Z+7, r25	; 0x07
    178e:	86 83       	std	Z+6, r24	; 0x06
    1790:	e9 81       	ldd	r30, Y+1	; 0x01
    1792:	fa 81       	ldd	r31, Y+2	; 0x02
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	85 8f       	std	Z+29, r24	; 0x1d
    1798:	e9 81       	ldd	r30, Y+1	; 0x01
    179a:	fa 81       	ldd	r31, Y+2	; 0x02
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	86 8f       	std	Z+30, r24	; 0x1e
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	88 23       	and	r24, r24
    17a4:	79 f4       	brne	.+30     	; 0x17c4 <xQueueGenericReset+0xd6>
    17a6:	e9 81       	ldd	r30, Y+1	; 0x01
    17a8:	fa 81       	ldd	r31, Y+2	; 0x02
    17aa:	80 85       	ldd	r24, Z+8	; 0x08
    17ac:	88 23       	and	r24, r24
    17ae:	a1 f0       	breq	.+40     	; 0x17d8 <xQueueGenericReset+0xea>
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	08 96       	adiw	r24, 0x08	; 8
    17b6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	69 f4       	brne	.+26     	; 0x17d8 <xQueueGenericReset+0xea>
    17be:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
    17c2:	0a c0       	rjmp	.+20     	; 0x17d8 <xQueueGenericReset+0xea>
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	9a 81       	ldd	r25, Y+2	; 0x02
    17c8:	08 96       	adiw	r24, 0x08	; 8
    17ca:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	9a 81       	ldd	r25, Y+2	; 0x02
    17d2:	41 96       	adiw	r24, 0x11	; 17
    17d4:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <xQueueGenericCreate>:
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	29 97       	sbiw	r28, 0x09	; 9
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	8f 83       	std	Y+7, r24	; 0x07
    1800:	68 87       	std	Y+8, r22	; 0x08
    1802:	49 87       	std	Y+9, r20	; 0x09
    1804:	1a 82       	std	Y+2, r1	; 0x02
    1806:	19 82       	std	Y+1, r1	; 0x01
    1808:	8f 81       	ldd	r24, Y+7	; 0x07
    180a:	88 23       	and	r24, r24
    180c:	09 f4       	brne	.+2      	; 0x1810 <xQueueGenericCreate+0x26>
    180e:	3f c0       	rjmp	.+126    	; 0x188e <xQueueGenericCreate+0xa4>
    1810:	8f e1       	ldi	r24, 0x1F	; 31
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 c1 14 	call	0x2982	; 0x2982 <pvPortMalloc>
    1818:	9e 83       	std	Y+6, r25	; 0x06
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	8d 81       	ldd	r24, Y+5	; 0x05
    181e:	9e 81       	ldd	r25, Y+6	; 0x06
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	a9 f1       	breq	.+106    	; 0x188e <xQueueGenericCreate+0xa4>
    1824:	8f 81       	ldd	r24, Y+7	; 0x07
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	88 85       	ldd	r24, Y+8	; 0x08
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	ac 01       	movw	r20, r24
    1832:	24 9f       	mul	r18, r20
    1834:	c0 01       	movw	r24, r0
    1836:	25 9f       	mul	r18, r21
    1838:	90 0d       	add	r25, r0
    183a:	34 9f       	mul	r19, r20
    183c:	90 0d       	add	r25, r0
    183e:	11 24       	eor	r1, r1
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	9c 83       	std	Y+4, r25	; 0x04
    1844:	8b 83       	std	Y+3, r24	; 0x03
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	0e 94 c1 14 	call	0x2982	; 0x2982 <pvPortMalloc>
    184e:	ed 81       	ldd	r30, Y+5	; 0x05
    1850:	fe 81       	ldd	r31, Y+6	; 0x06
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	80 83       	st	Z, r24
    1856:	ed 81       	ldd	r30, Y+5	; 0x05
    1858:	fe 81       	ldd	r31, Y+6	; 0x06
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	91 f0       	breq	.+36     	; 0x1886 <xQueueGenericCreate+0x9c>
    1862:	ed 81       	ldd	r30, Y+5	; 0x05
    1864:	fe 81       	ldd	r31, Y+6	; 0x06
    1866:	8f 81       	ldd	r24, Y+7	; 0x07
    1868:	83 8f       	std	Z+27, r24	; 0x1b
    186a:	ed 81       	ldd	r30, Y+5	; 0x05
    186c:	fe 81       	ldd	r31, Y+6	; 0x06
    186e:	88 85       	ldd	r24, Y+8	; 0x08
    1870:	84 8f       	std	Z+28, r24	; 0x1c
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	0e 94 77 0b 	call	0x16ee	; 0x16ee <xQueueGenericReset>
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	04 c0       	rjmp	.+8      	; 0x188e <xQueueGenericCreate+0xa4>
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	9e 81       	ldd	r25, Y+6	; 0x06
    188a:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vPortFree>
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	9a 81       	ldd	r25, Y+2	; 0x02
    1892:	29 96       	adiw	r28, 0x09	; 9
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <xQueueCreateMutex>:
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <xQueueCreateMutex+0x6>
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	8b 83       	std	Y+3, r24	; 0x03
    18b0:	8f e1       	ldi	r24, 0x1F	; 31
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 c1 14 	call	0x2982	; 0x2982 <pvPortMalloc>
    18b8:	9a 83       	std	Y+2, r25	; 0x02
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	9a 81       	ldd	r25, Y+2	; 0x02
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	a9 f1       	breq	.+106    	; 0x192e <xQueueCreateMutex+0x8a>
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	13 82       	std	Z+3, r1	; 0x03
    18ca:	12 82       	std	Z+2, r1	; 0x02
    18cc:	e9 81       	ldd	r30, Y+1	; 0x01
    18ce:	fa 81       	ldd	r31, Y+2	; 0x02
    18d0:	11 82       	std	Z+1, r1	; 0x01
    18d2:	10 82       	st	Z, r1
    18d4:	e9 81       	ldd	r30, Y+1	; 0x01
    18d6:	fa 81       	ldd	r31, Y+2	; 0x02
    18d8:	15 82       	std	Z+5, r1	; 0x05
    18da:	14 82       	std	Z+4, r1	; 0x04
    18dc:	e9 81       	ldd	r30, Y+1	; 0x01
    18de:	fa 81       	ldd	r31, Y+2	; 0x02
    18e0:	17 82       	std	Z+7, r1	; 0x07
    18e2:	16 82       	std	Z+6, r1	; 0x06
    18e4:	e9 81       	ldd	r30, Y+1	; 0x01
    18e6:	fa 81       	ldd	r31, Y+2	; 0x02
    18e8:	12 8e       	std	Z+26, r1	; 0x1a
    18ea:	e9 81       	ldd	r30, Y+1	; 0x01
    18ec:	fa 81       	ldd	r31, Y+2	; 0x02
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	83 8f       	std	Z+27, r24	; 0x1b
    18f2:	e9 81       	ldd	r30, Y+1	; 0x01
    18f4:	fa 81       	ldd	r31, Y+2	; 0x02
    18f6:	14 8e       	std	Z+28, r1	; 0x1c
    18f8:	e9 81       	ldd	r30, Y+1	; 0x01
    18fa:	fa 81       	ldd	r31, Y+2	; 0x02
    18fc:	8f ef       	ldi	r24, 0xFF	; 255
    18fe:	85 8f       	std	Z+29, r24	; 0x1d
    1900:	e9 81       	ldd	r30, Y+1	; 0x01
    1902:	fa 81       	ldd	r31, Y+2	; 0x02
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	86 8f       	std	Z+30, r24	; 0x1e
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	08 96       	adiw	r24, 0x08	; 8
    190e:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	41 96       	adiw	r24, 0x11	; 17
    1918:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	0e 94 9f 0c 	call	0x193e	; 0x193e <xQueueGenericSend>
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <xQueueGenericSend>:
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	2c 97       	sbiw	r28, 0x0c	; 12
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	78 87       	std	Y+8, r23	; 0x08
    1958:	6f 83       	std	Y+7, r22	; 0x07
    195a:	5a 87       	std	Y+10, r21	; 0x0a
    195c:	49 87       	std	Y+9, r20	; 0x09
    195e:	2b 87       	std	Y+11, r18	; 0x0b
    1960:	19 82       	std	Y+1, r1	; 0x01
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	0f 92       	push	r0
    1968:	ed 81       	ldd	r30, Y+5	; 0x05
    196a:	fe 81       	ldd	r31, Y+6	; 0x06
    196c:	92 8d       	ldd	r25, Z+26	; 0x1a
    196e:	ed 81       	ldd	r30, Y+5	; 0x05
    1970:	fe 81       	ldd	r31, Y+6	; 0x06
    1972:	83 8d       	ldd	r24, Z+27	; 0x1b
    1974:	98 17       	cp	r25, r24
    1976:	d8 f4       	brcc	.+54     	; 0x19ae <xQueueGenericSend+0x70>
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	2f 81       	ldd	r18, Y+7	; 0x07
    197e:	38 85       	ldd	r19, Y+8	; 0x08
    1980:	b9 01       	movw	r22, r18
    1982:	4b 85       	ldd	r20, Y+11	; 0x0b
    1984:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <prvCopyDataToQueue>
    1988:	ed 81       	ldd	r30, Y+5	; 0x05
    198a:	fe 81       	ldd	r31, Y+6	; 0x06
    198c:	81 89       	ldd	r24, Z+17	; 0x11
    198e:	88 23       	and	r24, r24
    1990:	49 f0       	breq	.+18     	; 0x19a4 <xQueueGenericSend+0x66>
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	9e 81       	ldd	r25, Y+6	; 0x06
    1996:	41 96       	adiw	r24, 0x11	; 17
    1998:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	11 f4       	brne	.+4      	; 0x19a4 <xQueueGenericSend+0x66>
    19a0:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	8c 87       	std	Y+12, r24	; 0x0c
    19ac:	5c c0       	rjmp	.+184    	; 0x1a66 <xQueueGenericSend+0x128>
    19ae:	89 85       	ldd	r24, Y+9	; 0x09
    19b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	21 f4       	brne	.+8      	; 0x19be <xQueueGenericSend+0x80>
    19b6:	0f 90       	pop	r0
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	1c 86       	std	Y+12, r1	; 0x0c
    19bc:	54 c0       	rjmp	.+168    	; 0x1a66 <xQueueGenericSend+0x128>
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	88 23       	and	r24, r24
    19c2:	31 f4       	brne	.+12     	; 0x19d0 <xQueueGenericSend+0x92>
    19c4:	ce 01       	movw	r24, r28
    19c6:	02 96       	adiw	r24, 0x02	; 2
    19c8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <vTaskSetTimeOutState>
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	0f 90       	pop	r0
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	0e 94 82 05 	call	0xb04	; 0xb04 <vTaskSuspendAll>
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	0f 92       	push	r0
    19de:	ed 81       	ldd	r30, Y+5	; 0x05
    19e0:	fe 81       	ldd	r31, Y+6	; 0x06
    19e2:	85 8d       	ldd	r24, Z+29	; 0x1d
    19e4:	8f 3f       	cpi	r24, 0xFF	; 255
    19e6:	19 f4       	brne	.+6      	; 0x19ee <xQueueGenericSend+0xb0>
    19e8:	ed 81       	ldd	r30, Y+5	; 0x05
    19ea:	fe 81       	ldd	r31, Y+6	; 0x06
    19ec:	15 8e       	std	Z+29, r1	; 0x1d
    19ee:	ed 81       	ldd	r30, Y+5	; 0x05
    19f0:	fe 81       	ldd	r31, Y+6	; 0x06
    19f2:	86 8d       	ldd	r24, Z+30	; 0x1e
    19f4:	8f 3f       	cpi	r24, 0xFF	; 255
    19f6:	19 f4       	brne	.+6      	; 0x19fe <xQueueGenericSend+0xc0>
    19f8:	ed 81       	ldd	r30, Y+5	; 0x05
    19fa:	fe 81       	ldd	r31, Y+6	; 0x06
    19fc:	16 8e       	std	Z+30, r1	; 0x1e
    19fe:	0f 90       	pop	r0
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	ce 01       	movw	r24, r28
    1a04:	02 96       	adiw	r24, 0x02	; 2
    1a06:	9e 01       	movw	r18, r28
    1a08:	27 5f       	subi	r18, 0xF7	; 247
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	b9 01       	movw	r22, r18
    1a0e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <xTaskCheckForTimeOut>
    1a12:	88 23       	and	r24, r24
    1a14:	09 f5       	brne	.+66     	; 0x1a58 <xQueueGenericSend+0x11a>
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <prvIsQueueFull>
    1a1e:	88 23       	and	r24, r24
    1a20:	a1 f0       	breq	.+40     	; 0x1a4a <xQueueGenericSend+0x10c>
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	9e 81       	ldd	r25, Y+6	; 0x06
    1a26:	08 96       	adiw	r24, 0x08	; 8
    1a28:	29 85       	ldd	r18, Y+9	; 0x09
    1a2a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a2c:	b9 01       	movw	r22, r18
    1a2e:	0e 94 a4 07 	call	0xf48	; 0xf48 <vTaskPlaceOnEventList>
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvUnlockQueue>
    1a3a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
    1a3e:	88 23       	and	r24, r24
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <xQueueGenericSend+0x106>
    1a42:	8f cf       	rjmp	.-226    	; 0x1962 <xQueueGenericSend+0x24>
    1a44:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
    1a48:	8c cf       	rjmp	.-232    	; 0x1962 <xQueueGenericSend+0x24>
    1a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4e:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvUnlockQueue>
    1a52:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
    1a56:	85 cf       	rjmp	.-246    	; 0x1962 <xQueueGenericSend+0x24>
    1a58:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvUnlockQueue>
    1a60:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
    1a64:	1c 86       	std	Y+12, r1	; 0x0c
    1a66:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a68:	2c 96       	adiw	r28, 0x0c	; 12
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <xQueueGenericSendFromISR>:
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	29 97       	sbiw	r28, 0x09	; 9
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	9c 83       	std	Y+4, r25	; 0x04
    1a90:	8b 83       	std	Y+3, r24	; 0x03
    1a92:	7e 83       	std	Y+6, r23	; 0x06
    1a94:	6d 83       	std	Y+5, r22	; 0x05
    1a96:	58 87       	std	Y+8, r21	; 0x08
    1a98:	4f 83       	std	Y+7, r20	; 0x07
    1a9a:	29 87       	std	Y+9, r18	; 0x09
    1a9c:	19 82       	std	Y+1, r1	; 0x01
    1a9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa0:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aa4:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa6:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa8:	83 8d       	ldd	r24, Z+27	; 0x1b
    1aaa:	98 17       	cp	r25, r24
    1aac:	60 f5       	brcc	.+88     	; 0x1b06 <xQueueGenericSendFromISR+0x8c>
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab6:	b9 01       	movw	r22, r18
    1ab8:	49 85       	ldd	r20, Y+9	; 0x09
    1aba:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <prvCopyDataToQueue>
    1abe:	eb 81       	ldd	r30, Y+3	; 0x03
    1ac0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ac2:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ac4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac6:	a9 f4       	brne	.+42     	; 0x1af2 <xQueueGenericSendFromISR+0x78>
    1ac8:	eb 81       	ldd	r30, Y+3	; 0x03
    1aca:	fc 81       	ldd	r31, Y+4	; 0x04
    1acc:	81 89       	ldd	r24, Z+17	; 0x11
    1ace:	88 23       	and	r24, r24
    1ad0:	b9 f0       	breq	.+46     	; 0x1b00 <xQueueGenericSendFromISR+0x86>
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	41 96       	adiw	r24, 0x11	; 17
    1ad8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    1adc:	88 23       	and	r24, r24
    1ade:	81 f0       	breq	.+32     	; 0x1b00 <xQueueGenericSendFromISR+0x86>
    1ae0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae2:	98 85       	ldd	r25, Y+8	; 0x08
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <xQueueGenericSendFromISR+0x86>
    1ae8:	ef 81       	ldd	r30, Y+7	; 0x07
    1aea:	f8 85       	ldd	r31, Y+8	; 0x08
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	80 83       	st	Z, r24
    1af0:	07 c0       	rjmp	.+14     	; 0x1b00 <xQueueGenericSendFromISR+0x86>
    1af2:	eb 81       	ldd	r30, Y+3	; 0x03
    1af4:	fc 81       	ldd	r31, Y+4	; 0x04
    1af6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1af8:	8f 5f       	subi	r24, 0xFF	; 255
    1afa:	eb 81       	ldd	r30, Y+3	; 0x03
    1afc:	fc 81       	ldd	r31, Y+4	; 0x04
    1afe:	86 8f       	std	Z+30, r24	; 0x1e
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	8a 83       	std	Y+2, r24	; 0x02
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <xQueueGenericSendFromISR+0x8e>
    1b06:	1a 82       	std	Y+2, r1	; 0x02
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	29 96       	adiw	r28, 0x09	; 9
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <xQueueGenericReceive>:
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	2e 97       	sbiw	r28, 0x0e	; 14
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	98 87       	std	Y+8, r25	; 0x08
    1b32:	8f 83       	std	Y+7, r24	; 0x07
    1b34:	7a 87       	std	Y+10, r23	; 0x0a
    1b36:	69 87       	std	Y+9, r22	; 0x09
    1b38:	5c 87       	std	Y+12, r21	; 0x0c
    1b3a:	4b 87       	std	Y+11, r20	; 0x0b
    1b3c:	2d 87       	std	Y+13, r18	; 0x0d
    1b3e:	1b 82       	std	Y+3, r1	; 0x03
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	0f 92       	push	r0
    1b46:	ef 81       	ldd	r30, Y+7	; 0x07
    1b48:	f8 85       	ldd	r31, Y+8	; 0x08
    1b4a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b4c:	88 23       	and	r24, r24
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <xQueueGenericReceive+0x36>
    1b50:	4b c0       	rjmp	.+150    	; 0x1be8 <xQueueGenericReceive+0xcc>
    1b52:	ef 81       	ldd	r30, Y+7	; 0x07
    1b54:	f8 85       	ldd	r31, Y+8	; 0x08
    1b56:	86 81       	ldd	r24, Z+6	; 0x06
    1b58:	97 81       	ldd	r25, Z+7	; 0x07
    1b5a:	9a 83       	std	Y+2, r25	; 0x02
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b60:	98 85       	ldd	r25, Y+8	; 0x08
    1b62:	29 85       	ldd	r18, Y+9	; 0x09
    1b64:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b66:	b9 01       	movw	r22, r18
    1b68:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <prvCopyDataFromQueue>
    1b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6e:	88 23       	and	r24, r24
    1b70:	11 f5       	brne	.+68     	; 0x1bb6 <xQueueGenericReceive+0x9a>
    1b72:	ef 81       	ldd	r30, Y+7	; 0x07
    1b74:	f8 85       	ldd	r31, Y+8	; 0x08
    1b76:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b78:	81 50       	subi	r24, 0x01	; 1
    1b7a:	ef 81       	ldd	r30, Y+7	; 0x07
    1b7c:	f8 85       	ldd	r31, Y+8	; 0x08
    1b7e:	82 8f       	std	Z+26, r24	; 0x1a
    1b80:	ef 81       	ldd	r30, Y+7	; 0x07
    1b82:	f8 85       	ldd	r31, Y+8	; 0x08
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	31 f4       	brne	.+12     	; 0x1b98 <xQueueGenericReceive+0x7c>
    1b8c:	0e 94 80 0a 	call	0x1500	; 0x1500 <xTaskGetCurrentTaskHandle>
    1b90:	ef 81       	ldd	r30, Y+7	; 0x07
    1b92:	f8 85       	ldd	r31, Y+8	; 0x08
    1b94:	93 83       	std	Z+3, r25	; 0x03
    1b96:	82 83       	std	Z+2, r24	; 0x02
    1b98:	ef 81       	ldd	r30, Y+7	; 0x07
    1b9a:	f8 85       	ldd	r31, Y+8	; 0x08
    1b9c:	80 85       	ldd	r24, Z+8	; 0x08
    1b9e:	88 23       	and	r24, r24
    1ba0:	f1 f0       	breq	.+60     	; 0x1bde <xQueueGenericReceive+0xc2>
    1ba2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba4:	98 85       	ldd	r25, Y+8	; 0x08
    1ba6:	08 96       	adiw	r24, 0x08	; 8
    1ba8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	b9 f4       	brne	.+46     	; 0x1bde <xQueueGenericReceive+0xc2>
    1bb0:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
    1bb4:	14 c0       	rjmp	.+40     	; 0x1bde <xQueueGenericReceive+0xc2>
    1bb6:	ef 81       	ldd	r30, Y+7	; 0x07
    1bb8:	f8 85       	ldd	r31, Y+8	; 0x08
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	97 83       	std	Z+7, r25	; 0x07
    1bc0:	86 83       	std	Z+6, r24	; 0x06
    1bc2:	ef 81       	ldd	r30, Y+7	; 0x07
    1bc4:	f8 85       	ldd	r31, Y+8	; 0x08
    1bc6:	81 89       	ldd	r24, Z+17	; 0x11
    1bc8:	88 23       	and	r24, r24
    1bca:	49 f0       	breq	.+18     	; 0x1bde <xQueueGenericReceive+0xc2>
    1bcc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bce:	98 85       	ldd	r25, Y+8	; 0x08
    1bd0:	41 96       	adiw	r24, 0x11	; 17
    1bd2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    1bd6:	88 23       	and	r24, r24
    1bd8:	11 f0       	breq	.+4      	; 0x1bde <xQueueGenericReceive+0xc2>
    1bda:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
    1bde:	0f 90       	pop	r0
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	8e 87       	std	Y+14, r24	; 0x0e
    1be6:	6d c0       	rjmp	.+218    	; 0x1cc2 <xQueueGenericReceive+0x1a6>
    1be8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bea:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	21 f4       	brne	.+8      	; 0x1bf8 <xQueueGenericReceive+0xdc>
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	1e 86       	std	Y+14, r1	; 0x0e
    1bf6:	65 c0       	rjmp	.+202    	; 0x1cc2 <xQueueGenericReceive+0x1a6>
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	88 23       	and	r24, r24
    1bfc:	31 f4       	brne	.+12     	; 0x1c0a <xQueueGenericReceive+0xee>
    1bfe:	ce 01       	movw	r24, r28
    1c00:	04 96       	adiw	r24, 0x04	; 4
    1c02:	0e 94 54 08 	call	0x10a8	; 0x10a8 <vTaskSetTimeOutState>
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	0e 94 82 05 	call	0xb04	; 0xb04 <vTaskSuspendAll>
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	0f 92       	push	r0
    1c18:	ef 81       	ldd	r30, Y+7	; 0x07
    1c1a:	f8 85       	ldd	r31, Y+8	; 0x08
    1c1c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <xQueueGenericReceive+0x10c>
    1c22:	ef 81       	ldd	r30, Y+7	; 0x07
    1c24:	f8 85       	ldd	r31, Y+8	; 0x08
    1c26:	15 8e       	std	Z+29, r1	; 0x1d
    1c28:	ef 81       	ldd	r30, Y+7	; 0x07
    1c2a:	f8 85       	ldd	r31, Y+8	; 0x08
    1c2c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c30:	19 f4       	brne	.+6      	; 0x1c38 <xQueueGenericReceive+0x11c>
    1c32:	ef 81       	ldd	r30, Y+7	; 0x07
    1c34:	f8 85       	ldd	r31, Y+8	; 0x08
    1c36:	16 8e       	std	Z+30, r1	; 0x1e
    1c38:	0f 90       	pop	r0
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	04 96       	adiw	r24, 0x04	; 4
    1c40:	9e 01       	movw	r18, r28
    1c42:	25 5f       	subi	r18, 0xF5	; 245
    1c44:	3f 4f       	sbci	r19, 0xFF	; 255
    1c46:	b9 01       	movw	r22, r18
    1c48:	0e 94 6e 08 	call	0x10dc	; 0x10dc <xTaskCheckForTimeOut>
    1c4c:	88 23       	and	r24, r24
    1c4e:	91 f5       	brne	.+100    	; 0x1cb4 <xQueueGenericReceive+0x198>
    1c50:	8f 81       	ldd	r24, Y+7	; 0x07
    1c52:	98 85       	ldd	r25, Y+8	; 0x08
    1c54:	0e 94 41 10 	call	0x2082	; 0x2082 <prvIsQueueEmpty>
    1c58:	88 23       	and	r24, r24
    1c5a:	29 f1       	breq	.+74     	; 0x1ca6 <xQueueGenericReceive+0x18a>
    1c5c:	ef 81       	ldd	r30, Y+7	; 0x07
    1c5e:	f8 85       	ldd	r31, Y+8	; 0x08
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	59 f4       	brne	.+22     	; 0x1c7e <xQueueGenericReceive+0x162>
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	0f 92       	push	r0
    1c6e:	ef 81       	ldd	r30, Y+7	; 0x07
    1c70:	f8 85       	ldd	r31, Y+8	; 0x08
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	0e 94 93 0a 	call	0x1526	; 0x1526 <vTaskPriorityInherit>
    1c7a:	0f 90       	pop	r0
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c80:	98 85       	ldd	r25, Y+8	; 0x08
    1c82:	41 96       	adiw	r24, 0x11	; 17
    1c84:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c86:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c88:	b9 01       	movw	r22, r18
    1c8a:	0e 94 a4 07 	call	0xf48	; 0xf48 <vTaskPlaceOnEventList>
    1c8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c90:	98 85       	ldd	r25, Y+8	; 0x08
    1c92:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvUnlockQueue>
    1c96:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
    1c9a:	88 23       	and	r24, r24
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <xQueueGenericReceive+0x184>
    1c9e:	50 cf       	rjmp	.-352    	; 0x1b40 <xQueueGenericReceive+0x24>
    1ca0:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
    1ca4:	4d cf       	rjmp	.-358    	; 0x1b40 <xQueueGenericReceive+0x24>
    1ca6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca8:	98 85       	ldd	r25, Y+8	; 0x08
    1caa:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvUnlockQueue>
    1cae:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
    1cb2:	46 cf       	rjmp	.-372    	; 0x1b40 <xQueueGenericReceive+0x24>
    1cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb6:	98 85       	ldd	r25, Y+8	; 0x08
    1cb8:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvUnlockQueue>
    1cbc:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
    1cc0:	1e 86       	std	Y+14, r1	; 0x0e
    1cc2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cc4:	2e 96       	adiw	r28, 0x0e	; 14
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <xQueueReceiveFromISR>:
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	28 97       	sbiw	r28, 0x08	; 8
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	9c 83       	std	Y+4, r25	; 0x04
    1cec:	8b 83       	std	Y+3, r24	; 0x03
    1cee:	7e 83       	std	Y+6, r23	; 0x06
    1cf0:	6d 83       	std	Y+5, r22	; 0x05
    1cf2:	58 87       	std	Y+8, r21	; 0x08
    1cf4:	4f 83       	std	Y+7, r20	; 0x07
    1cf6:	19 82       	std	Y+1, r1	; 0x01
    1cf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1cfc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cfe:	88 23       	and	r24, r24
    1d00:	91 f1       	breq	.+100    	; 0x1d66 <xQueueReceiveFromISR+0x90>
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	2d 81       	ldd	r18, Y+5	; 0x05
    1d08:	3e 81       	ldd	r19, Y+6	; 0x06
    1d0a:	b9 01       	movw	r22, r18
    1d0c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <prvCopyDataFromQueue>
    1d10:	eb 81       	ldd	r30, Y+3	; 0x03
    1d12:	fc 81       	ldd	r31, Y+4	; 0x04
    1d14:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d16:	81 50       	subi	r24, 0x01	; 1
    1d18:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1c:	82 8f       	std	Z+26, r24	; 0x1a
    1d1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d20:	fc 81       	ldd	r31, Y+4	; 0x04
    1d22:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d24:	8f 3f       	cpi	r24, 0xFF	; 255
    1d26:	a9 f4       	brne	.+42     	; 0x1d52 <xQueueReceiveFromISR+0x7c>
    1d28:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2c:	80 85       	ldd	r24, Z+8	; 0x08
    1d2e:	88 23       	and	r24, r24
    1d30:	b9 f0       	breq	.+46     	; 0x1d60 <xQueueReceiveFromISR+0x8a>
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	08 96       	adiw	r24, 0x08	; 8
    1d38:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    1d3c:	88 23       	and	r24, r24
    1d3e:	81 f0       	breq	.+32     	; 0x1d60 <xQueueReceiveFromISR+0x8a>
    1d40:	8f 81       	ldd	r24, Y+7	; 0x07
    1d42:	98 85       	ldd	r25, Y+8	; 0x08
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	61 f0       	breq	.+24     	; 0x1d60 <xQueueReceiveFromISR+0x8a>
    1d48:	ef 81       	ldd	r30, Y+7	; 0x07
    1d4a:	f8 85       	ldd	r31, Y+8	; 0x08
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	80 83       	st	Z, r24
    1d50:	07 c0       	rjmp	.+14     	; 0x1d60 <xQueueReceiveFromISR+0x8a>
    1d52:	eb 81       	ldd	r30, Y+3	; 0x03
    1d54:	fc 81       	ldd	r31, Y+4	; 0x04
    1d56:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d58:	8f 5f       	subi	r24, 0xFF	; 255
    1d5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d5e:	85 8f       	std	Z+29, r24	; 0x1d
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	8a 83       	std	Y+2, r24	; 0x02
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <xQueueReceiveFromISR+0x92>
    1d66:	1a 82       	std	Y+2, r1	; 0x02
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 96       	adiw	r28, 0x08	; 8
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <uxQueueMessagesWaiting>:
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <uxQueueMessagesWaiting+0x6>
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	9b 83       	std	Y+3, r25	; 0x03
    1d88:	8a 83       	std	Y+2, r24	; 0x02
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	0f 92       	push	r0
    1d90:	ea 81       	ldd	r30, Y+2	; 0x02
    1d92:	fb 81       	ldd	r31, Y+3	; 0x03
    1d94:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	0f 90       	pop	r0
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <uxQueueMessagesWaitingFromISR>:
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <uxQueueMessagesWaitingFromISR+0x6>
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	9b 83       	std	Y+3, r25	; 0x03
    1db6:	8a 83       	std	Y+2, r24	; 0x02
    1db8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dba:	fb 81       	ldd	r31, Y+3	; 0x03
    1dbc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <vQueueDelete>:
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	0f 92       	push	r0
    1dd4:	0f 92       	push	r0
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	e9 81       	ldd	r30, Y+1	; 0x01
    1de0:	fa 81       	ldd	r31, Y+2	; 0x02
    1de2:	80 81       	ld	r24, Z
    1de4:	91 81       	ldd	r25, Z+1	; 0x01
    1de6:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vPortFree>
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	9a 81       	ldd	r25, Y+2	; 0x02
    1dee:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vPortFree>
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <prvCopyDataToQueue>:
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <prvCopyDataToQueue+0x6>
    1e02:	0f 92       	push	r0
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	7c 83       	std	Y+4, r23	; 0x04
    1e10:	6b 83       	std	Y+3, r22	; 0x03
    1e12:	4d 83       	std	Y+5, r20	; 0x05
    1e14:	e9 81       	ldd	r30, Y+1	; 0x01
    1e16:	fa 81       	ldd	r31, Y+2	; 0x02
    1e18:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e1a:	88 23       	and	r24, r24
    1e1c:	91 f4       	brne	.+36     	; 0x1e42 <prvCopyDataToQueue+0x46>
    1e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e20:	fa 81       	ldd	r31, Y+2	; 0x02
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <prvCopyDataToQueue+0x30>
    1e2a:	7f c0       	rjmp	.+254    	; 0x1f2a <prvCopyDataToQueue+0x12e>
    1e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e30:	82 81       	ldd	r24, Z+2	; 0x02
    1e32:	93 81       	ldd	r25, Z+3	; 0x03
    1e34:	0e 94 18 0b 	call	0x1630	; 0x1630 <vTaskPriorityDisinherit>
    1e38:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3c:	13 82       	std	Z+3, r1	; 0x03
    1e3e:	12 82       	std	Z+2, r1	; 0x02
    1e40:	74 c0       	rjmp	.+232    	; 0x1f2a <prvCopyDataToQueue+0x12e>
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	88 23       	and	r24, r24
    1e46:	99 f5       	brne	.+102    	; 0x1eae <prvCopyDataToQueue+0xb2>
    1e48:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4c:	64 81       	ldd	r22, Z+4	; 0x04
    1e4e:	75 81       	ldd	r23, Z+5	; 0x05
    1e50:	e9 81       	ldd	r30, Y+1	; 0x01
    1e52:	fa 81       	ldd	r31, Y+2	; 0x02
    1e54:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e56:	48 2f       	mov	r20, r24
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	cb 01       	movw	r24, r22
    1e60:	b9 01       	movw	r22, r18
    1e62:	0e 94 0a 20 	call	0x4014	; 0x4014 <memcpy>
    1e66:	e9 81       	ldd	r30, Y+1	; 0x01
    1e68:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6a:	24 81       	ldd	r18, Z+4	; 0x04
    1e6c:	35 81       	ldd	r19, Z+5	; 0x05
    1e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e70:	fa 81       	ldd	r31, Y+2	; 0x02
    1e72:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	82 0f       	add	r24, r18
    1e7a:	93 1f       	adc	r25, r19
    1e7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e80:	95 83       	std	Z+5, r25	; 0x05
    1e82:	84 83       	std	Z+4, r24	; 0x04
    1e84:	e9 81       	ldd	r30, Y+1	; 0x01
    1e86:	fa 81       	ldd	r31, Y+2	; 0x02
    1e88:	24 81       	ldd	r18, Z+4	; 0x04
    1e8a:	35 81       	ldd	r19, Z+5	; 0x05
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	82 81       	ldd	r24, Z+2	; 0x02
    1e92:	93 81       	ldd	r25, Z+3	; 0x03
    1e94:	28 17       	cp	r18, r24
    1e96:	39 07       	cpc	r19, r25
    1e98:	08 f4       	brcc	.+2      	; 0x1e9c <prvCopyDataToQueue+0xa0>
    1e9a:	47 c0       	rjmp	.+142    	; 0x1f2a <prvCopyDataToQueue+0x12e>
    1e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea0:	80 81       	ld	r24, Z
    1ea2:	91 81       	ldd	r25, Z+1	; 0x01
    1ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea8:	95 83       	std	Z+5, r25	; 0x05
    1eaa:	84 83       	std	Z+4, r24	; 0x04
    1eac:	3e c0       	rjmp	.+124    	; 0x1f2a <prvCopyDataToQueue+0x12e>
    1eae:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb2:	66 81       	ldd	r22, Z+6	; 0x06
    1eb4:	77 81       	ldd	r23, Z+7	; 0x07
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	b9 01       	movw	r22, r18
    1ec8:	0e 94 0a 20 	call	0x4014	; 0x4014 <memcpy>
    1ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ece:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed0:	26 81       	ldd	r18, Z+6	; 0x06
    1ed2:	37 81       	ldd	r19, Z+7	; 0x07
    1ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed8:	84 8d       	ldd	r24, Z+28	; 0x1c
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	90 95       	com	r25
    1ee0:	81 95       	neg	r24
    1ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee4:	82 0f       	add	r24, r18
    1ee6:	93 1f       	adc	r25, r19
    1ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eea:	fa 81       	ldd	r31, Y+2	; 0x02
    1eec:	97 83       	std	Z+7, r25	; 0x07
    1eee:	86 83       	std	Z+6, r24	; 0x06
    1ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef4:	26 81       	ldd	r18, Z+6	; 0x06
    1ef6:	37 81       	ldd	r19, Z+7	; 0x07
    1ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    1efa:	fa 81       	ldd	r31, Y+2	; 0x02
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	28 17       	cp	r18, r24
    1f02:	39 07       	cpc	r19, r25
    1f04:	90 f4       	brcc	.+36     	; 0x1f2a <prvCopyDataToQueue+0x12e>
    1f06:	e9 81       	ldd	r30, Y+1	; 0x01
    1f08:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0a:	22 81       	ldd	r18, Z+2	; 0x02
    1f0c:	33 81       	ldd	r19, Z+3	; 0x03
    1f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f10:	fa 81       	ldd	r31, Y+2	; 0x02
    1f12:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	90 95       	com	r25
    1f1a:	81 95       	neg	r24
    1f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1e:	82 0f       	add	r24, r18
    1f20:	93 1f       	adc	r25, r19
    1f22:	e9 81       	ldd	r30, Y+1	; 0x01
    1f24:	fa 81       	ldd	r31, Y+2	; 0x02
    1f26:	97 83       	std	Z+7, r25	; 0x07
    1f28:	86 83       	std	Z+6, r24	; 0x06
    1f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f30:	8f 5f       	subi	r24, 0xFF	; 255
    1f32:	e9 81       	ldd	r30, Y+1	; 0x01
    1f34:	fa 81       	ldd	r31, Y+2	; 0x02
    1f36:	82 8f       	std	Z+26, r24	; 0x1a
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <prvCopyDataFromQueue>:
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <prvCopyDataFromQueue+0x6>
    1f4e:	0f 92       	push	r0
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	7c 83       	std	Y+4, r23	; 0x04
    1f5a:	6b 83       	std	Y+3, r22	; 0x03
    1f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	89 f1       	breq	.+98     	; 0x1fca <prvCopyDataFromQueue+0x82>
    1f68:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6c:	26 81       	ldd	r18, Z+6	; 0x06
    1f6e:	37 81       	ldd	r19, Z+7	; 0x07
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	82 0f       	add	r24, r18
    1f7c:	93 1f       	adc	r25, r19
    1f7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f80:	fa 81       	ldd	r31, Y+2	; 0x02
    1f82:	97 83       	std	Z+7, r25	; 0x07
    1f84:	86 83       	std	Z+6, r24	; 0x06
    1f86:	e9 81       	ldd	r30, Y+1	; 0x01
    1f88:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8a:	26 81       	ldd	r18, Z+6	; 0x06
    1f8c:	37 81       	ldd	r19, Z+7	; 0x07
    1f8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f90:	fa 81       	ldd	r31, Y+2	; 0x02
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	93 81       	ldd	r25, Z+3	; 0x03
    1f96:	28 17       	cp	r18, r24
    1f98:	39 07       	cpc	r19, r25
    1f9a:	40 f0       	brcs	.+16     	; 0x1fac <prvCopyDataFromQueue+0x64>
    1f9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa8:	97 83       	std	Z+7, r25	; 0x07
    1faa:	86 83       	std	Z+6, r24	; 0x06
    1fac:	e9 81       	ldd	r30, Y+1	; 0x01
    1fae:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb0:	46 81       	ldd	r20, Z+6	; 0x06
    1fb2:	57 81       	ldd	r21, Z+7	; 0x07
    1fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb8:	84 8d       	ldd	r24, Z+28	; 0x1c
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	ba 01       	movw	r22, r20
    1fc4:	a9 01       	movw	r20, r18
    1fc6:	0e 94 0a 20 	call	0x4014	; 0x4014 <memcpy>
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <prvUnlockQueue>:
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	0f 92       	push	r0
    1fde:	0f 92       	push	r0
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	0f 92       	push	r0
    1fee:	15 c0       	rjmp	.+42     	; 0x201a <prvUnlockQueue+0x42>
    1ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff4:	81 89       	ldd	r24, Z+17	; 0x11
    1ff6:	88 23       	and	r24, r24
    1ff8:	a9 f0       	breq	.+42     	; 0x2024 <prvUnlockQueue+0x4c>
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	41 96       	adiw	r24, 0x11	; 17
    2000:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    2004:	88 23       	and	r24, r24
    2006:	11 f0       	breq	.+4      	; 0x200c <prvUnlockQueue+0x34>
    2008:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vTaskMissedYield>
    200c:	e9 81       	ldd	r30, Y+1	; 0x01
    200e:	fa 81       	ldd	r31, Y+2	; 0x02
    2010:	86 8d       	ldd	r24, Z+30	; 0x1e
    2012:	81 50       	subi	r24, 0x01	; 1
    2014:	e9 81       	ldd	r30, Y+1	; 0x01
    2016:	fa 81       	ldd	r31, Y+2	; 0x02
    2018:	86 8f       	std	Z+30, r24	; 0x1e
    201a:	e9 81       	ldd	r30, Y+1	; 0x01
    201c:	fa 81       	ldd	r31, Y+2	; 0x02
    201e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2020:	18 16       	cp	r1, r24
    2022:	34 f3       	brlt	.-52     	; 0x1ff0 <prvUnlockQueue+0x18>
    2024:	e9 81       	ldd	r30, Y+1	; 0x01
    2026:	fa 81       	ldd	r31, Y+2	; 0x02
    2028:	8f ef       	ldi	r24, 0xFF	; 255
    202a:	86 8f       	std	Z+30, r24	; 0x1e
    202c:	0f 90       	pop	r0
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	0f 92       	push	r0
    2036:	15 c0       	rjmp	.+42     	; 0x2062 <prvUnlockQueue+0x8a>
    2038:	e9 81       	ldd	r30, Y+1	; 0x01
    203a:	fa 81       	ldd	r31, Y+2	; 0x02
    203c:	80 85       	ldd	r24, Z+8	; 0x08
    203e:	88 23       	and	r24, r24
    2040:	a9 f0       	breq	.+42     	; 0x206c <prvUnlockQueue+0x94>
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	08 96       	adiw	r24, 0x08	; 8
    2048:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    204c:	88 23       	and	r24, r24
    204e:	11 f0       	breq	.+4      	; 0x2054 <prvUnlockQueue+0x7c>
    2050:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vTaskMissedYield>
    2054:	e9 81       	ldd	r30, Y+1	; 0x01
    2056:	fa 81       	ldd	r31, Y+2	; 0x02
    2058:	85 8d       	ldd	r24, Z+29	; 0x1d
    205a:	81 50       	subi	r24, 0x01	; 1
    205c:	e9 81       	ldd	r30, Y+1	; 0x01
    205e:	fa 81       	ldd	r31, Y+2	; 0x02
    2060:	85 8f       	std	Z+29, r24	; 0x1d
    2062:	e9 81       	ldd	r30, Y+1	; 0x01
    2064:	fa 81       	ldd	r31, Y+2	; 0x02
    2066:	85 8d       	ldd	r24, Z+29	; 0x1d
    2068:	18 16       	cp	r1, r24
    206a:	34 f3       	brlt	.-52     	; 0x2038 <prvUnlockQueue+0x60>
    206c:	e9 81       	ldd	r30, Y+1	; 0x01
    206e:	fa 81       	ldd	r31, Y+2	; 0x02
    2070:	8f ef       	ldi	r24, 0xFF	; 255
    2072:	85 8f       	std	Z+29, r24	; 0x1d
    2074:	0f 90       	pop	r0
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <prvIsQueueEmpty>:
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	00 d0       	rcall	.+0      	; 0x2088 <prvIsQueueEmpty+0x6>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	9b 83       	std	Y+3, r25	; 0x03
    208e:	8a 83       	std	Y+2, r24	; 0x02
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	0f 92       	push	r0
    2096:	ea 81       	ldd	r30, Y+2	; 0x02
    2098:	fb 81       	ldd	r31, Y+3	; 0x03
    209a:	82 8d       	ldd	r24, Z+26	; 0x1a
    209c:	19 82       	std	Y+1, r1	; 0x01
    209e:	88 23       	and	r24, r24
    20a0:	11 f4       	brne	.+4      	; 0x20a6 <prvIsQueueEmpty+0x24>
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <xQueueIsQueueEmptyFromISR>:
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <xQueueIsQueueEmptyFromISR+0x6>
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	9b 83       	std	Y+3, r25	; 0x03
    20c4:	8a 83       	std	Y+2, r24	; 0x02
    20c6:	ea 81       	ldd	r30, Y+2	; 0x02
    20c8:	fb 81       	ldd	r31, Y+3	; 0x03
    20ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    20cc:	19 82       	std	Y+1, r1	; 0x01
    20ce:	88 23       	and	r24, r24
    20d0:	11 f4       	brne	.+4      	; 0x20d6 <xQueueIsQueueEmptyFromISR+0x1e>
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <prvIsQueueFull>:
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <prvIsQueueFull+0x6>
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	9b 83       	std	Y+3, r25	; 0x03
    20f0:	8a 83       	std	Y+2, r24	; 0x02
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	0f 92       	push	r0
    20f8:	ea 81       	ldd	r30, Y+2	; 0x02
    20fa:	fb 81       	ldd	r31, Y+3	; 0x03
    20fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    20fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2100:	fb 81       	ldd	r31, Y+3	; 0x03
    2102:	83 8d       	ldd	r24, Z+27	; 0x1b
    2104:	19 82       	std	Y+1, r1	; 0x01
    2106:	98 17       	cp	r25, r24
    2108:	11 f4       	brne	.+4      	; 0x210e <prvIsQueueFull+0x2a>
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	0f 90       	pop	r0
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <xQueueIsQueueFullFromISR>:
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <xQueueIsQueueFullFromISR+0x6>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9b 83       	std	Y+3, r25	; 0x03
    212c:	8a 83       	std	Y+2, r24	; 0x02
    212e:	ea 81       	ldd	r30, Y+2	; 0x02
    2130:	fb 81       	ldd	r31, Y+3	; 0x03
    2132:	92 8d       	ldd	r25, Z+26	; 0x1a
    2134:	ea 81       	ldd	r30, Y+2	; 0x02
    2136:	fb 81       	ldd	r31, Y+3	; 0x03
    2138:	83 8d       	ldd	r24, Z+27	; 0x1b
    213a:	19 82       	std	Y+1, r1	; 0x01
    213c:	98 17       	cp	r25, r24
    213e:	11 f4       	brne	.+4      	; 0x2144 <xQueueIsQueueFullFromISR+0x24>
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <vListInitialise>:
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	0f 92       	push	r0
    2158:	0f 92       	push	r0
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	03 96       	adiw	r24, 0x03	; 3
    2168:	e9 81       	ldd	r30, Y+1	; 0x01
    216a:	fa 81       	ldd	r31, Y+2	; 0x02
    216c:	92 83       	std	Z+2, r25	; 0x02
    216e:	81 83       	std	Z+1, r24	; 0x01
    2170:	e9 81       	ldd	r30, Y+1	; 0x01
    2172:	fa 81       	ldd	r31, Y+2	; 0x02
    2174:	8f ef       	ldi	r24, 0xFF	; 255
    2176:	9f ef       	ldi	r25, 0xFF	; 255
    2178:	94 83       	std	Z+4, r25	; 0x04
    217a:	83 83       	std	Z+3, r24	; 0x03
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
    2180:	03 96       	adiw	r24, 0x03	; 3
    2182:	e9 81       	ldd	r30, Y+1	; 0x01
    2184:	fa 81       	ldd	r31, Y+2	; 0x02
    2186:	96 83       	std	Z+6, r25	; 0x06
    2188:	85 83       	std	Z+5, r24	; 0x05
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	03 96       	adiw	r24, 0x03	; 3
    2190:	e9 81       	ldd	r30, Y+1	; 0x01
    2192:	fa 81       	ldd	r31, Y+2	; 0x02
    2194:	90 87       	std	Z+8, r25	; 0x08
    2196:	87 83       	std	Z+7, r24	; 0x07
    2198:	e9 81       	ldd	r30, Y+1	; 0x01
    219a:	fa 81       	ldd	r31, Y+2	; 0x02
    219c:	10 82       	st	Z, r1
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <vListInitialiseItem>:
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	0f 92       	push	r0
    21ae:	0f 92       	push	r0
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ba:	fa 81       	ldd	r31, Y+2	; 0x02
    21bc:	11 86       	std	Z+9, r1	; 0x09
    21be:	10 86       	std	Z+8, r1	; 0x08
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <vListInsertEnd>:
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <vListInsertEnd+0x6>
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <vListInsertEnd+0x8>
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	9c 83       	std	Y+4, r25	; 0x04
    21d8:	8b 83       	std	Y+3, r24	; 0x03
    21da:	7e 83       	std	Y+6, r23	; 0x06
    21dc:	6d 83       	std	Y+5, r22	; 0x05
    21de:	eb 81       	ldd	r30, Y+3	; 0x03
    21e0:	fc 81       	ldd	r31, Y+4	; 0x04
    21e2:	81 81       	ldd	r24, Z+1	; 0x01
    21e4:	92 81       	ldd	r25, Z+2	; 0x02
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	e9 81       	ldd	r30, Y+1	; 0x01
    21ec:	fa 81       	ldd	r31, Y+2	; 0x02
    21ee:	82 81       	ldd	r24, Z+2	; 0x02
    21f0:	93 81       	ldd	r25, Z+3	; 0x03
    21f2:	ed 81       	ldd	r30, Y+5	; 0x05
    21f4:	fe 81       	ldd	r31, Y+6	; 0x06
    21f6:	93 83       	std	Z+3, r25	; 0x03
    21f8:	82 83       	std	Z+2, r24	; 0x02
    21fa:	eb 81       	ldd	r30, Y+3	; 0x03
    21fc:	fc 81       	ldd	r31, Y+4	; 0x04
    21fe:	81 81       	ldd	r24, Z+1	; 0x01
    2200:	92 81       	ldd	r25, Z+2	; 0x02
    2202:	ed 81       	ldd	r30, Y+5	; 0x05
    2204:	fe 81       	ldd	r31, Y+6	; 0x06
    2206:	95 83       	std	Z+5, r25	; 0x05
    2208:	84 83       	std	Z+4, r24	; 0x04
    220a:	e9 81       	ldd	r30, Y+1	; 0x01
    220c:	fa 81       	ldd	r31, Y+2	; 0x02
    220e:	02 80       	ldd	r0, Z+2	; 0x02
    2210:	f3 81       	ldd	r31, Z+3	; 0x03
    2212:	e0 2d       	mov	r30, r0
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	95 83       	std	Z+5, r25	; 0x05
    221a:	84 83       	std	Z+4, r24	; 0x04
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	e9 81       	ldd	r30, Y+1	; 0x01
    2222:	fa 81       	ldd	r31, Y+2	; 0x02
    2224:	93 83       	std	Z+3, r25	; 0x03
    2226:	82 83       	std	Z+2, r24	; 0x02
    2228:	8d 81       	ldd	r24, Y+5	; 0x05
    222a:	9e 81       	ldd	r25, Y+6	; 0x06
    222c:	eb 81       	ldd	r30, Y+3	; 0x03
    222e:	fc 81       	ldd	r31, Y+4	; 0x04
    2230:	92 83       	std	Z+2, r25	; 0x02
    2232:	81 83       	std	Z+1, r24	; 0x01
    2234:	ed 81       	ldd	r30, Y+5	; 0x05
    2236:	fe 81       	ldd	r31, Y+6	; 0x06
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	91 87       	std	Z+9, r25	; 0x09
    223e:	80 87       	std	Z+8, r24	; 0x08
    2240:	eb 81       	ldd	r30, Y+3	; 0x03
    2242:	fc 81       	ldd	r31, Y+4	; 0x04
    2244:	80 81       	ld	r24, Z
    2246:	8f 5f       	subi	r24, 0xFF	; 255
    2248:	eb 81       	ldd	r30, Y+3	; 0x03
    224a:	fc 81       	ldd	r31, Y+4	; 0x04
    224c:	80 83       	st	Z, r24
    224e:	26 96       	adiw	r28, 0x06	; 6
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <vListInsert>:
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	28 97       	sbiw	r28, 0x08	; 8
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	78 87       	std	Y+8, r23	; 0x08
    227a:	6f 83       	std	Y+7, r22	; 0x07
    227c:	ef 81       	ldd	r30, Y+7	; 0x07
    227e:	f8 85       	ldd	r31, Y+8	; 0x08
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	2f ef       	ldi	r18, 0xFF	; 255
    228e:	8f 3f       	cpi	r24, 0xFF	; 255
    2290:	92 07       	cpc	r25, r18
    2292:	39 f4       	brne	.+14     	; 0x22a2 <vListInsert+0x42>
    2294:	ed 81       	ldd	r30, Y+5	; 0x05
    2296:	fe 81       	ldd	r31, Y+6	; 0x06
    2298:	87 81       	ldd	r24, Z+7	; 0x07
    229a:	90 85       	ldd	r25, Z+8	; 0x08
    229c:	9c 83       	std	Y+4, r25	; 0x04
    229e:	8b 83       	std	Y+3, r24	; 0x03
    22a0:	18 c0       	rjmp	.+48     	; 0x22d2 <vListInsert+0x72>
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	9e 81       	ldd	r25, Y+6	; 0x06
    22a6:	03 96       	adiw	r24, 0x03	; 3
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	8b 83       	std	Y+3, r24	; 0x03
    22ac:	06 c0       	rjmp	.+12     	; 0x22ba <vListInsert+0x5a>
    22ae:	eb 81       	ldd	r30, Y+3	; 0x03
    22b0:	fc 81       	ldd	r31, Y+4	; 0x04
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	93 81       	ldd	r25, Z+3	; 0x03
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	8b 83       	std	Y+3, r24	; 0x03
    22ba:	eb 81       	ldd	r30, Y+3	; 0x03
    22bc:	fc 81       	ldd	r31, Y+4	; 0x04
    22be:	02 80       	ldd	r0, Z+2	; 0x02
    22c0:	f3 81       	ldd	r31, Z+3	; 0x03
    22c2:	e0 2d       	mov	r30, r0
    22c4:	20 81       	ld	r18, Z
    22c6:	31 81       	ldd	r19, Z+1	; 0x01
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	9a 81       	ldd	r25, Y+2	; 0x02
    22cc:	82 17       	cp	r24, r18
    22ce:	93 07       	cpc	r25, r19
    22d0:	70 f7       	brcc	.-36     	; 0x22ae <vListInsert+0x4e>
    22d2:	eb 81       	ldd	r30, Y+3	; 0x03
    22d4:	fc 81       	ldd	r31, Y+4	; 0x04
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	ef 81       	ldd	r30, Y+7	; 0x07
    22dc:	f8 85       	ldd	r31, Y+8	; 0x08
    22de:	93 83       	std	Z+3, r25	; 0x03
    22e0:	82 83       	std	Z+2, r24	; 0x02
    22e2:	ef 81       	ldd	r30, Y+7	; 0x07
    22e4:	f8 85       	ldd	r31, Y+8	; 0x08
    22e6:	02 80       	ldd	r0, Z+2	; 0x02
    22e8:	f3 81       	ldd	r31, Z+3	; 0x03
    22ea:	e0 2d       	mov	r30, r0
    22ec:	8f 81       	ldd	r24, Y+7	; 0x07
    22ee:	98 85       	ldd	r25, Y+8	; 0x08
    22f0:	95 83       	std	Z+5, r25	; 0x05
    22f2:	84 83       	std	Z+4, r24	; 0x04
    22f4:	ef 81       	ldd	r30, Y+7	; 0x07
    22f6:	f8 85       	ldd	r31, Y+8	; 0x08
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	95 83       	std	Z+5, r25	; 0x05
    22fe:	84 83       	std	Z+4, r24	; 0x04
    2300:	8f 81       	ldd	r24, Y+7	; 0x07
    2302:	98 85       	ldd	r25, Y+8	; 0x08
    2304:	eb 81       	ldd	r30, Y+3	; 0x03
    2306:	fc 81       	ldd	r31, Y+4	; 0x04
    2308:	93 83       	std	Z+3, r25	; 0x03
    230a:	82 83       	std	Z+2, r24	; 0x02
    230c:	ef 81       	ldd	r30, Y+7	; 0x07
    230e:	f8 85       	ldd	r31, Y+8	; 0x08
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	91 87       	std	Z+9, r25	; 0x09
    2316:	80 87       	std	Z+8, r24	; 0x08
    2318:	ed 81       	ldd	r30, Y+5	; 0x05
    231a:	fe 81       	ldd	r31, Y+6	; 0x06
    231c:	80 81       	ld	r24, Z
    231e:	8f 5f       	subi	r24, 0xFF	; 255
    2320:	ed 81       	ldd	r30, Y+5	; 0x05
    2322:	fe 81       	ldd	r31, Y+6	; 0x06
    2324:	80 83       	st	Z, r24
    2326:	28 96       	adiw	r28, 0x08	; 8
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <uxListRemove>:
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <uxListRemove+0x6>
    233e:	0f 92       	push	r0
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	9c 83       	std	Y+4, r25	; 0x04
    2346:	8b 83       	std	Y+3, r24	; 0x03
    2348:	eb 81       	ldd	r30, Y+3	; 0x03
    234a:	fc 81       	ldd	r31, Y+4	; 0x04
    234c:	a2 81       	ldd	r26, Z+2	; 0x02
    234e:	b3 81       	ldd	r27, Z+3	; 0x03
    2350:	eb 81       	ldd	r30, Y+3	; 0x03
    2352:	fc 81       	ldd	r31, Y+4	; 0x04
    2354:	84 81       	ldd	r24, Z+4	; 0x04
    2356:	95 81       	ldd	r25, Z+5	; 0x05
    2358:	15 96       	adiw	r26, 0x05	; 5
    235a:	9c 93       	st	X, r25
    235c:	8e 93       	st	-X, r24
    235e:	14 97       	sbiw	r26, 0x04	; 4
    2360:	eb 81       	ldd	r30, Y+3	; 0x03
    2362:	fc 81       	ldd	r31, Y+4	; 0x04
    2364:	a4 81       	ldd	r26, Z+4	; 0x04
    2366:	b5 81       	ldd	r27, Z+5	; 0x05
    2368:	eb 81       	ldd	r30, Y+3	; 0x03
    236a:	fc 81       	ldd	r31, Y+4	; 0x04
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	93 81       	ldd	r25, Z+3	; 0x03
    2370:	13 96       	adiw	r26, 0x03	; 3
    2372:	9c 93       	st	X, r25
    2374:	8e 93       	st	-X, r24
    2376:	12 97       	sbiw	r26, 0x02	; 2
    2378:	eb 81       	ldd	r30, Y+3	; 0x03
    237a:	fc 81       	ldd	r31, Y+4	; 0x04
    237c:	80 85       	ldd	r24, Z+8	; 0x08
    237e:	91 85       	ldd	r25, Z+9	; 0x09
    2380:	9a 83       	std	Y+2, r25	; 0x02
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	e9 81       	ldd	r30, Y+1	; 0x01
    2386:	fa 81       	ldd	r31, Y+2	; 0x02
    2388:	21 81       	ldd	r18, Z+1	; 0x01
    238a:	32 81       	ldd	r19, Z+2	; 0x02
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	28 17       	cp	r18, r24
    2392:	39 07       	cpc	r19, r25
    2394:	41 f4       	brne	.+16     	; 0x23a6 <uxListRemove+0x6e>
    2396:	eb 81       	ldd	r30, Y+3	; 0x03
    2398:	fc 81       	ldd	r31, Y+4	; 0x04
    239a:	84 81       	ldd	r24, Z+4	; 0x04
    239c:	95 81       	ldd	r25, Z+5	; 0x05
    239e:	e9 81       	ldd	r30, Y+1	; 0x01
    23a0:	fa 81       	ldd	r31, Y+2	; 0x02
    23a2:	92 83       	std	Z+2, r25	; 0x02
    23a4:	81 83       	std	Z+1, r24	; 0x01
    23a6:	eb 81       	ldd	r30, Y+3	; 0x03
    23a8:	fc 81       	ldd	r31, Y+4	; 0x04
    23aa:	11 86       	std	Z+9, r1	; 0x09
    23ac:	10 86       	std	Z+8, r1	; 0x08
    23ae:	e9 81       	ldd	r30, Y+1	; 0x01
    23b0:	fa 81       	ldd	r31, Y+2	; 0x02
    23b2:	80 81       	ld	r24, Z
    23b4:	81 50       	subi	r24, 0x01	; 1
    23b6:	e9 81       	ldd	r30, Y+1	; 0x01
    23b8:	fa 81       	ldd	r31, Y+2	; 0x02
    23ba:	80 83       	st	Z, r24
    23bc:	e9 81       	ldd	r30, Y+1	; 0x01
    23be:	fa 81       	ldd	r31, Y+2	; 0x02
    23c0:	80 81       	ld	r24, Z
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <xCoRoutineCreate>:
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	27 97       	sbiw	r28, 0x07	; 7
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	9d 83       	std	Y+5, r25	; 0x05
    23e6:	8c 83       	std	Y+4, r24	; 0x04
    23e8:	6e 83       	std	Y+6, r22	; 0x06
    23ea:	4f 83       	std	Y+7, r20	; 0x07
    23ec:	8a e1       	ldi	r24, 0x1A	; 26
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0e 94 c1 14 	call	0x2982	; 0x2982 <pvPortMalloc>
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	9a 81       	ldd	r25, Y+2	; 0x02
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	09 f4       	brne	.+2      	; 0x2402 <xCoRoutineCreate+0x32>
    2400:	6f c0       	rjmp	.+222    	; 0x24e0 <xCoRoutineCreate+0x110>
    2402:	80 91 7f 02 	lds	r24, 0x027F
    2406:	90 91 80 02 	lds	r25, 0x0280
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	41 f4       	brne	.+16     	; 0x241e <xCoRoutineCreate+0x4e>
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	90 93 80 02 	sts	0x0280, r25
    2416:	80 93 7f 02 	sts	0x027F, r24
    241a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <prvInitialiseCoRoutineLists>
    241e:	8e 81       	ldd	r24, Y+6	; 0x06
    2420:	82 30       	cpi	r24, 0x02	; 2
    2422:	10 f0       	brcs	.+4      	; 0x2428 <xCoRoutineCreate+0x58>
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	8e 83       	std	Y+6, r24	; 0x06
    2428:	e9 81       	ldd	r30, Y+1	; 0x01
    242a:	fa 81       	ldd	r31, Y+2	; 0x02
    242c:	11 8e       	std	Z+25, r1	; 0x19
    242e:	10 8e       	std	Z+24, r1	; 0x18
    2430:	e9 81       	ldd	r30, Y+1	; 0x01
    2432:	fa 81       	ldd	r31, Y+2	; 0x02
    2434:	8e 81       	ldd	r24, Y+6	; 0x06
    2436:	86 8b       	std	Z+22, r24	; 0x16
    2438:	e9 81       	ldd	r30, Y+1	; 0x01
    243a:	fa 81       	ldd	r31, Y+2	; 0x02
    243c:	8f 81       	ldd	r24, Y+7	; 0x07
    243e:	87 8b       	std	Z+23, r24	; 0x17
    2440:	e9 81       	ldd	r30, Y+1	; 0x01
    2442:	fa 81       	ldd	r31, Y+2	; 0x02
    2444:	8c 81       	ldd	r24, Y+4	; 0x04
    2446:	9d 81       	ldd	r25, Y+5	; 0x05
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	80 83       	st	Z, r24
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	02 96       	adiw	r24, 0x02	; 2
    2452:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <vListInitialiseItem>
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	0c 96       	adiw	r24, 0x0c	; 12
    245c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <vListInitialiseItem>
    2460:	e9 81       	ldd	r30, Y+1	; 0x01
    2462:	fa 81       	ldd	r31, Y+2	; 0x02
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	91 87       	std	Z+9, r25	; 0x09
    246a:	80 87       	std	Z+8, r24	; 0x08
    246c:	e9 81       	ldd	r30, Y+1	; 0x01
    246e:	fa 81       	ldd	r31, Y+2	; 0x02
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	93 8b       	std	Z+19, r25	; 0x13
    2476:	82 8b       	std	Z+18, r24	; 0x12
    2478:	8e 81       	ldd	r24, Y+6	; 0x06
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	84 e0       	ldi	r24, 0x04	; 4
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	82 1b       	sub	r24, r18
    2484:	93 0b       	sbc	r25, r19
    2486:	e9 81       	ldd	r30, Y+1	; 0x01
    2488:	fa 81       	ldd	r31, Y+2	; 0x02
    248a:	95 87       	std	Z+13, r25	; 0x0d
    248c:	84 87       	std	Z+12, r24	; 0x0c
    248e:	e9 81       	ldd	r30, Y+1	; 0x01
    2490:	fa 81       	ldd	r31, Y+2	; 0x02
    2492:	96 89       	ldd	r25, Z+22	; 0x16
    2494:	80 91 81 02 	lds	r24, 0x0281
    2498:	89 17       	cp	r24, r25
    249a:	28 f4       	brcc	.+10     	; 0x24a6 <xCoRoutineCreate+0xd6>
    249c:	e9 81       	ldd	r30, Y+1	; 0x01
    249e:	fa 81       	ldd	r31, Y+2	; 0x02
    24a0:	86 89       	ldd	r24, Z+22	; 0x16
    24a2:	80 93 81 02 	sts	0x0281, r24
    24a6:	e9 81       	ldd	r30, Y+1	; 0x01
    24a8:	fa 81       	ldd	r31, Y+2	; 0x02
    24aa:	86 89       	ldd	r24, Z+22	; 0x16
    24ac:	28 2f       	mov	r18, r24
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	c9 01       	movw	r24, r18
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	82 0f       	add	r24, r18
    24c0:	93 1f       	adc	r25, r19
    24c2:	ac 01       	movw	r20, r24
    24c4:	48 57       	subi	r20, 0x78	; 120
    24c6:	5d 4f       	sbci	r21, 0xFD	; 253
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	9c 01       	movw	r18, r24
    24ce:	2e 5f       	subi	r18, 0xFE	; 254
    24d0:	3f 4f       	sbci	r19, 0xFF	; 255
    24d2:	ca 01       	movw	r24, r20
    24d4:	b9 01       	movw	r22, r18
    24d6:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	8b 83       	std	Y+3, r24	; 0x03
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <xCoRoutineCreate+0x114>
    24e0:	8f ef       	ldi	r24, 0xFF	; 255
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	27 96       	adiw	r28, 0x07	; 7
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <vCoRoutineAddToDelayedList>:
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <vCoRoutineAddToDelayedList+0x6>
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <vCoRoutineAddToDelayedList+0x8>
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	9c 83       	std	Y+4, r25	; 0x04
    2506:	8b 83       	std	Y+3, r24	; 0x03
    2508:	7e 83       	std	Y+6, r23	; 0x06
    250a:	6d 83       	std	Y+5, r22	; 0x05
    250c:	20 91 82 02 	lds	r18, 0x0282
    2510:	30 91 83 02 	lds	r19, 0x0283
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	9c 81       	ldd	r25, Y+4	; 0x04
    2518:	82 0f       	add	r24, r18
    251a:	93 1f       	adc	r25, r19
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	80 91 7f 02 	lds	r24, 0x027F
    2524:	90 91 80 02 	lds	r25, 0x0280
    2528:	02 96       	adiw	r24, 0x02	; 2
    252a:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
    252e:	e0 91 7f 02 	lds	r30, 0x027F
    2532:	f0 91 80 02 	lds	r31, 0x0280
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	93 83       	std	Z+3, r25	; 0x03
    253c:	82 83       	std	Z+2, r24	; 0x02
    253e:	20 91 82 02 	lds	r18, 0x0282
    2542:	30 91 83 02 	lds	r19, 0x0283
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	82 17       	cp	r24, r18
    254c:	93 07       	cpc	r25, r19
    254e:	70 f4       	brcc	.+28     	; 0x256c <vCoRoutineAddToDelayedList+0x74>
    2550:	80 91 ae 02 	lds	r24, 0x02AE
    2554:	90 91 af 02 	lds	r25, 0x02AF
    2558:	20 91 7f 02 	lds	r18, 0x027F
    255c:	30 91 80 02 	lds	r19, 0x0280
    2560:	2e 5f       	subi	r18, 0xFE	; 254
    2562:	3f 4f       	sbci	r19, 0xFF	; 255
    2564:	b9 01       	movw	r22, r18
    2566:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsert>
    256a:	0d c0       	rjmp	.+26     	; 0x2586 <vCoRoutineAddToDelayedList+0x8e>
    256c:	80 91 ac 02 	lds	r24, 0x02AC
    2570:	90 91 ad 02 	lds	r25, 0x02AD
    2574:	20 91 7f 02 	lds	r18, 0x027F
    2578:	30 91 80 02 	lds	r19, 0x0280
    257c:	2e 5f       	subi	r18, 0xFE	; 254
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	b9 01       	movw	r22, r18
    2582:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsert>
    2586:	8d 81       	ldd	r24, Y+5	; 0x05
    2588:	9e 81       	ldd	r25, Y+6	; 0x06
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	61 f0       	breq	.+24     	; 0x25a6 <vCoRoutineAddToDelayedList+0xae>
    258e:	80 91 7f 02 	lds	r24, 0x027F
    2592:	90 91 80 02 	lds	r25, 0x0280
    2596:	9c 01       	movw	r18, r24
    2598:	24 5f       	subi	r18, 0xF4	; 244
    259a:	3f 4f       	sbci	r19, 0xFF	; 255
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	b9 01       	movw	r22, r18
    25a2:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsert>
    25a6:	26 96       	adiw	r28, 0x06	; 6
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	de bf       	out	0x3e, r29	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <prvCheckPendingReadyList>:
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	0f 92       	push	r0
    25be:	0f 92       	push	r0
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	3a c0       	rjmp	.+116    	; 0x263a <prvCheckPendingReadyList+0x82>
    25c6:	f8 94       	cli
    25c8:	e0 91 b5 02 	lds	r30, 0x02B5
    25cc:	f0 91 b6 02 	lds	r31, 0x02B6
    25d0:	86 81       	ldd	r24, Z+6	; 0x06
    25d2:	97 81       	ldd	r25, Z+7	; 0x07
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    25d6:	89 83       	std	Y+1, r24	; 0x01
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	0c 96       	adiw	r24, 0x0c	; 12
    25de:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
    25e2:	78 94       	sei
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	02 96       	adiw	r24, 0x02	; 2
    25ea:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
    25ee:	e9 81       	ldd	r30, Y+1	; 0x01
    25f0:	fa 81       	ldd	r31, Y+2	; 0x02
    25f2:	96 89       	ldd	r25, Z+22	; 0x16
    25f4:	80 91 81 02 	lds	r24, 0x0281
    25f8:	89 17       	cp	r24, r25
    25fa:	28 f4       	brcc	.+10     	; 0x2606 <prvCheckPendingReadyList+0x4e>
    25fc:	e9 81       	ldd	r30, Y+1	; 0x01
    25fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2600:	86 89       	ldd	r24, Z+22	; 0x16
    2602:	80 93 81 02 	sts	0x0281, r24
    2606:	e9 81       	ldd	r30, Y+1	; 0x01
    2608:	fa 81       	ldd	r31, Y+2	; 0x02
    260a:	86 89       	ldd	r24, Z+22	; 0x16
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	c9 01       	movw	r24, r18
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	82 0f       	add	r24, r18
    2620:	93 1f       	adc	r25, r19
    2622:	ac 01       	movw	r20, r24
    2624:	48 57       	subi	r20, 0x78	; 120
    2626:	5d 4f       	sbci	r21, 0xFD	; 253
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	9a 81       	ldd	r25, Y+2	; 0x02
    262c:	9c 01       	movw	r18, r24
    262e:	2e 5f       	subi	r18, 0xFE	; 254
    2630:	3f 4f       	sbci	r19, 0xFF	; 255
    2632:	ca 01       	movw	r24, r20
    2634:	b9 01       	movw	r22, r18
    2636:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
    263a:	80 91 b0 02 	lds	r24, 0x02B0
    263e:	88 23       	and	r24, r24
    2640:	09 f0       	breq	.+2      	; 0x2644 <prvCheckPendingReadyList+0x8c>
    2642:	c1 cf       	rjmp	.-126    	; 0x25c6 <prvCheckPendingReadyList+0xe>
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <prvCheckDelayedList>:
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <prvCheckDelayedList+0x6>
    2654:	0f 92       	push	r0
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	0e 94 18 06 	call	0xc30	; 0xc30 <xTaskGetTickCount>
    265e:	20 91 84 02 	lds	r18, 0x0284
    2662:	30 91 85 02 	lds	r19, 0x0285
    2666:	82 1b       	sub	r24, r18
    2668:	93 0b       	sbc	r25, r19
    266a:	90 93 87 02 	sts	0x0287, r25
    266e:	80 93 86 02 	sts	0x0286, r24
    2672:	85 c0       	rjmp	.+266    	; 0x277e <prvCheckDelayedList+0x130>
    2674:	80 91 82 02 	lds	r24, 0x0282
    2678:	90 91 83 02 	lds	r25, 0x0283
    267c:	01 96       	adiw	r24, 0x01	; 1
    267e:	90 93 83 02 	sts	0x0283, r25
    2682:	80 93 82 02 	sts	0x0282, r24
    2686:	80 91 86 02 	lds	r24, 0x0286
    268a:	90 91 87 02 	lds	r25, 0x0287
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	90 93 87 02 	sts	0x0287, r25
    2694:	80 93 86 02 	sts	0x0286, r24
    2698:	80 91 82 02 	lds	r24, 0x0282
    269c:	90 91 83 02 	lds	r25, 0x0283
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	09 f0       	breq	.+2      	; 0x26a6 <prvCheckDelayedList+0x58>
    26a4:	64 c0       	rjmp	.+200    	; 0x276e <prvCheckDelayedList+0x120>
    26a6:	80 91 ac 02 	lds	r24, 0x02AC
    26aa:	90 91 ad 02 	lds	r25, 0x02AD
    26ae:	9a 83       	std	Y+2, r25	; 0x02
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	80 91 ae 02 	lds	r24, 0x02AE
    26b6:	90 91 af 02 	lds	r25, 0x02AF
    26ba:	90 93 ad 02 	sts	0x02AD, r25
    26be:	80 93 ac 02 	sts	0x02AC, r24
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	9a 81       	ldd	r25, Y+2	; 0x02
    26c6:	90 93 af 02 	sts	0x02AF, r25
    26ca:	80 93 ae 02 	sts	0x02AE, r24
    26ce:	4f c0       	rjmp	.+158    	; 0x276e <prvCheckDelayedList+0x120>
    26d0:	e0 91 ac 02 	lds	r30, 0x02AC
    26d4:	f0 91 ad 02 	lds	r31, 0x02AD
    26d8:	05 80       	ldd	r0, Z+5	; 0x05
    26da:	f6 81       	ldd	r31, Z+6	; 0x06
    26dc:	e0 2d       	mov	r30, r0
    26de:	86 81       	ldd	r24, Z+6	; 0x06
    26e0:	97 81       	ldd	r25, Z+7	; 0x07
    26e2:	9c 83       	std	Y+4, r25	; 0x04
    26e4:	8b 83       	std	Y+3, r24	; 0x03
    26e6:	eb 81       	ldd	r30, Y+3	; 0x03
    26e8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ea:	22 81       	ldd	r18, Z+2	; 0x02
    26ec:	33 81       	ldd	r19, Z+3	; 0x03
    26ee:	80 91 82 02 	lds	r24, 0x0282
    26f2:	90 91 83 02 	lds	r25, 0x0283
    26f6:	82 17       	cp	r24, r18
    26f8:	93 07       	cpc	r25, r19
    26fa:	08 f4       	brcc	.+2      	; 0x26fe <prvCheckDelayedList+0xb0>
    26fc:	40 c0       	rjmp	.+128    	; 0x277e <prvCheckDelayedList+0x130>
    26fe:	f8 94       	cli
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	9c 81       	ldd	r25, Y+4	; 0x04
    2704:	02 96       	adiw	r24, 0x02	; 2
    2706:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
    270a:	eb 81       	ldd	r30, Y+3	; 0x03
    270c:	fc 81       	ldd	r31, Y+4	; 0x04
    270e:	84 89       	ldd	r24, Z+20	; 0x14
    2710:	95 89       	ldd	r25, Z+21	; 0x15
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	29 f0       	breq	.+10     	; 0x2720 <prvCheckDelayedList+0xd2>
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	9c 81       	ldd	r25, Y+4	; 0x04
    271a:	0c 96       	adiw	r24, 0x0c	; 12
    271c:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
    2720:	78 94       	sei
    2722:	eb 81       	ldd	r30, Y+3	; 0x03
    2724:	fc 81       	ldd	r31, Y+4	; 0x04
    2726:	96 89       	ldd	r25, Z+22	; 0x16
    2728:	80 91 81 02 	lds	r24, 0x0281
    272c:	89 17       	cp	r24, r25
    272e:	28 f4       	brcc	.+10     	; 0x273a <prvCheckDelayedList+0xec>
    2730:	eb 81       	ldd	r30, Y+3	; 0x03
    2732:	fc 81       	ldd	r31, Y+4	; 0x04
    2734:	86 89       	ldd	r24, Z+22	; 0x16
    2736:	80 93 81 02 	sts	0x0281, r24
    273a:	eb 81       	ldd	r30, Y+3	; 0x03
    273c:	fc 81       	ldd	r31, Y+4	; 0x04
    273e:	86 89       	ldd	r24, Z+22	; 0x16
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	c9 01       	movw	r24, r18
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	82 0f       	add	r24, r18
    2754:	93 1f       	adc	r25, r19
    2756:	ac 01       	movw	r20, r24
    2758:	48 57       	subi	r20, 0x78	; 120
    275a:	5d 4f       	sbci	r21, 0xFD	; 253
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	9c 01       	movw	r18, r24
    2762:	2e 5f       	subi	r18, 0xFE	; 254
    2764:	3f 4f       	sbci	r19, 0xFF	; 255
    2766:	ca 01       	movw	r24, r20
    2768:	b9 01       	movw	r22, r18
    276a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
    276e:	e0 91 ac 02 	lds	r30, 0x02AC
    2772:	f0 91 ad 02 	lds	r31, 0x02AD
    2776:	80 81       	ld	r24, Z
    2778:	88 23       	and	r24, r24
    277a:	09 f0       	breq	.+2      	; 0x277e <prvCheckDelayedList+0x130>
    277c:	a9 cf       	rjmp	.-174    	; 0x26d0 <prvCheckDelayedList+0x82>
    277e:	80 91 86 02 	lds	r24, 0x0286
    2782:	90 91 87 02 	lds	r25, 0x0287
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	09 f0       	breq	.+2      	; 0x278c <prvCheckDelayedList+0x13e>
    278a:	74 cf       	rjmp	.-280    	; 0x2674 <prvCheckDelayedList+0x26>
    278c:	80 91 82 02 	lds	r24, 0x0282
    2790:	90 91 83 02 	lds	r25, 0x0283
    2794:	90 93 85 02 	sts	0x0285, r25
    2798:	80 93 84 02 	sts	0x0284, r24
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <vCoRoutineSchedule>:
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	0f 92       	push	r0
    27b0:	0f 92       	push	r0
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <prvCheckPendingReadyList>
    27ba:	0e 94 27 13 	call	0x264e	; 0x264e <prvCheckDelayedList>
    27be:	0a c0       	rjmp	.+20     	; 0x27d4 <vCoRoutineSchedule+0x2a>
    27c0:	80 91 81 02 	lds	r24, 0x0281
    27c4:	88 23       	and	r24, r24
    27c6:	09 f4       	brne	.+2      	; 0x27ca <vCoRoutineSchedule+0x20>
    27c8:	66 c0       	rjmp	.+204    	; 0x2896 <vCoRoutineSchedule+0xec>
    27ca:	80 91 81 02 	lds	r24, 0x0281
    27ce:	81 50       	subi	r24, 0x01	; 1
    27d0:	80 93 81 02 	sts	0x0281, r24
    27d4:	80 91 81 02 	lds	r24, 0x0281
    27d8:	28 2f       	mov	r18, r24
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	c9 01       	movw	r24, r18
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	82 0f       	add	r24, r18
    27ec:	93 1f       	adc	r25, r19
    27ee:	fc 01       	movw	r30, r24
    27f0:	e8 57       	subi	r30, 0x78	; 120
    27f2:	fd 4f       	sbci	r31, 0xFD	; 253
    27f4:	80 81       	ld	r24, Z
    27f6:	88 23       	and	r24, r24
    27f8:	19 f3       	breq	.-58     	; 0x27c0 <vCoRoutineSchedule+0x16>
    27fa:	80 91 81 02 	lds	r24, 0x0281
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	c9 01       	movw	r24, r18
    2804:	88 0f       	add	r24, r24
    2806:	99 1f       	adc	r25, r25
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	82 0f       	add	r24, r18
    2812:	93 1f       	adc	r25, r19
    2814:	88 57       	subi	r24, 0x78	; 120
    2816:	9d 4f       	sbci	r25, 0xFD	; 253
    2818:	9a 83       	std	Y+2, r25	; 0x02
    281a:	89 83       	std	Y+1, r24	; 0x01
    281c:	e9 81       	ldd	r30, Y+1	; 0x01
    281e:	fa 81       	ldd	r31, Y+2	; 0x02
    2820:	01 80       	ldd	r0, Z+1	; 0x01
    2822:	f2 81       	ldd	r31, Z+2	; 0x02
    2824:	e0 2d       	mov	r30, r0
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	e9 81       	ldd	r30, Y+1	; 0x01
    282c:	fa 81       	ldd	r31, Y+2	; 0x02
    282e:	92 83       	std	Z+2, r25	; 0x02
    2830:	81 83       	std	Z+1, r24	; 0x01
    2832:	e9 81       	ldd	r30, Y+1	; 0x01
    2834:	fa 81       	ldd	r31, Y+2	; 0x02
    2836:	21 81       	ldd	r18, Z+1	; 0x01
    2838:	32 81       	ldd	r19, Z+2	; 0x02
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	03 96       	adiw	r24, 0x03	; 3
    2840:	28 17       	cp	r18, r24
    2842:	39 07       	cpc	r19, r25
    2844:	59 f4       	brne	.+22     	; 0x285c <vCoRoutineSchedule+0xb2>
    2846:	e9 81       	ldd	r30, Y+1	; 0x01
    2848:	fa 81       	ldd	r31, Y+2	; 0x02
    284a:	01 80       	ldd	r0, Z+1	; 0x01
    284c:	f2 81       	ldd	r31, Z+2	; 0x02
    284e:	e0 2d       	mov	r30, r0
    2850:	82 81       	ldd	r24, Z+2	; 0x02
    2852:	93 81       	ldd	r25, Z+3	; 0x03
    2854:	e9 81       	ldd	r30, Y+1	; 0x01
    2856:	fa 81       	ldd	r31, Y+2	; 0x02
    2858:	92 83       	std	Z+2, r25	; 0x02
    285a:	81 83       	std	Z+1, r24	; 0x01
    285c:	e9 81       	ldd	r30, Y+1	; 0x01
    285e:	fa 81       	ldd	r31, Y+2	; 0x02
    2860:	01 80       	ldd	r0, Z+1	; 0x01
    2862:	f2 81       	ldd	r31, Z+2	; 0x02
    2864:	e0 2d       	mov	r30, r0
    2866:	86 81       	ldd	r24, Z+6	; 0x06
    2868:	97 81       	ldd	r25, Z+7	; 0x07
    286a:	90 93 80 02 	sts	0x0280, r25
    286e:	80 93 7f 02 	sts	0x027F, r24
    2872:	e0 91 7f 02 	lds	r30, 0x027F
    2876:	f0 91 80 02 	lds	r31, 0x0280
    287a:	40 81       	ld	r20, Z
    287c:	51 81       	ldd	r21, Z+1	; 0x01
    287e:	80 91 7f 02 	lds	r24, 0x027F
    2882:	90 91 80 02 	lds	r25, 0x0280
    2886:	e0 91 7f 02 	lds	r30, 0x027F
    288a:	f0 91 80 02 	lds	r31, 0x0280
    288e:	27 89       	ldd	r18, Z+23	; 0x17
    2890:	62 2f       	mov	r22, r18
    2892:	fa 01       	movw	r30, r20
    2894:	19 95       	eicall
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <prvInitialiseCoRoutineLists>:
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	0f 92       	push	r0
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	19 82       	std	Y+1, r1	; 0x01
    28ac:	13 c0       	rjmp	.+38     	; 0x28d4 <prvInitialiseCoRoutineLists+0x34>
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	c9 01       	movw	r24, r18
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	88 0f       	add	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	88 0f       	add	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	82 0f       	add	r24, r18
    28c4:	93 1f       	adc	r25, r19
    28c6:	88 57       	subi	r24, 0x78	; 120
    28c8:	9d 4f       	sbci	r25, 0xFD	; 253
    28ca:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	8f 5f       	subi	r24, 0xFF	; 255
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	82 30       	cpi	r24, 0x02	; 2
    28d8:	50 f3       	brcs	.-44     	; 0x28ae <prvInitialiseCoRoutineLists+0xe>
    28da:	8a e9       	ldi	r24, 0x9A	; 154
    28dc:	92 e0       	ldi	r25, 0x02	; 2
    28de:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    28e2:	83 ea       	ldi	r24, 0xA3	; 163
    28e4:	92 e0       	ldi	r25, 0x02	; 2
    28e6:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    28ea:	80 eb       	ldi	r24, 0xB0	; 176
    28ec:	92 e0       	ldi	r25, 0x02	; 2
    28ee:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
    28f2:	8a e9       	ldi	r24, 0x9A	; 154
    28f4:	92 e0       	ldi	r25, 0x02	; 2
    28f6:	90 93 ad 02 	sts	0x02AD, r25
    28fa:	80 93 ac 02 	sts	0x02AC, r24
    28fe:	83 ea       	ldi	r24, 0xA3	; 163
    2900:	92 e0       	ldi	r25, 0x02	; 2
    2902:	90 93 af 02 	sts	0x02AF, r25
    2906:	80 93 ae 02 	sts	0x02AE, r24
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <xCoRoutineRemoveFromEventList>:
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	00 d0       	rcall	.+0      	; 0x2918 <xCoRoutineRemoveFromEventList+0x6>
    2918:	0f 92       	push	r0
    291a:	0f 92       	push	r0
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	9d 83       	std	Y+5, r25	; 0x05
    2922:	8c 83       	std	Y+4, r24	; 0x04
    2924:	ec 81       	ldd	r30, Y+4	; 0x04
    2926:	fd 81       	ldd	r31, Y+5	; 0x05
    2928:	05 80       	ldd	r0, Z+5	; 0x05
    292a:	f6 81       	ldd	r31, Z+6	; 0x06
    292c:	e0 2d       	mov	r30, r0
    292e:	86 81       	ldd	r24, Z+6	; 0x06
    2930:	97 81       	ldd	r25, Z+7	; 0x07
    2932:	9b 83       	std	Y+3, r25	; 0x03
    2934:	8a 83       	std	Y+2, r24	; 0x02
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	9b 81       	ldd	r25, Y+3	; 0x03
    293a:	0c 96       	adiw	r24, 0x0c	; 12
    293c:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	9b 81       	ldd	r25, Y+3	; 0x03
    2944:	9c 01       	movw	r18, r24
    2946:	24 5f       	subi	r18, 0xF4	; 244
    2948:	3f 4f       	sbci	r19, 0xFF	; 255
    294a:	80 eb       	ldi	r24, 0xB0	; 176
    294c:	92 e0       	ldi	r25, 0x02	; 2
    294e:	b9 01       	movw	r22, r18
    2950:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
    2954:	ea 81       	ldd	r30, Y+2	; 0x02
    2956:	fb 81       	ldd	r31, Y+3	; 0x03
    2958:	96 89       	ldd	r25, Z+22	; 0x16
    295a:	e0 91 7f 02 	lds	r30, 0x027F
    295e:	f0 91 80 02 	lds	r31, 0x0280
    2962:	86 89       	ldd	r24, Z+22	; 0x16
    2964:	98 17       	cp	r25, r24
    2966:	18 f0       	brcs	.+6      	; 0x296e <xCoRoutineRemoveFromEventList+0x5c>
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	01 c0       	rjmp	.+2      	; 0x2970 <xCoRoutineRemoveFromEventList+0x5e>
    296e:	19 82       	std	Y+1, r1	; 0x01
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <pvPortMalloc>:
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	00 d0       	rcall	.+0      	; 0x2988 <pvPortMalloc+0x6>
    2988:	0f 92       	push	r0
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	9c 83       	std	Y+4, r25	; 0x04
    2990:	8b 83       	std	Y+3, r24	; 0x03
    2992:	1a 82       	std	Y+2, r1	; 0x02
    2994:	19 82       	std	Y+1, r1	; 0x01
    2996:	0e 94 82 05 	call	0xb04	; 0xb04 <vTaskSuspendAll>
    299a:	80 91 b9 02 	lds	r24, 0x02B9
    299e:	90 91 ba 02 	lds	r25, 0x02BA
    29a2:	2b 81       	ldd	r18, Y+3	; 0x03
    29a4:	3c 81       	ldd	r19, Y+4	; 0x04
    29a6:	82 0f       	add	r24, r18
    29a8:	93 1f       	adc	r25, r19
    29aa:	28 e1       	ldi	r18, 0x18	; 24
    29ac:	80 30       	cpi	r24, 0x00	; 0
    29ae:	92 07       	cpc	r25, r18
    29b0:	18 f5       	brcc	.+70     	; 0x29f8 <pvPortMalloc+0x76>
    29b2:	20 91 b9 02 	lds	r18, 0x02B9
    29b6:	30 91 ba 02 	lds	r19, 0x02BA
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	28 0f       	add	r18, r24
    29c0:	39 1f       	adc	r19, r25
    29c2:	80 91 b9 02 	lds	r24, 0x02B9
    29c6:	90 91 ba 02 	lds	r25, 0x02BA
    29ca:	82 17       	cp	r24, r18
    29cc:	93 07       	cpc	r25, r19
    29ce:	a0 f4       	brcc	.+40     	; 0x29f8 <pvPortMalloc+0x76>
    29d0:	80 91 b9 02 	lds	r24, 0x02B9
    29d4:	90 91 ba 02 	lds	r25, 0x02BA
    29d8:	85 54       	subi	r24, 0x45	; 69
    29da:	9d 4f       	sbci	r25, 0xFD	; 253
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	20 91 b9 02 	lds	r18, 0x02B9
    29e4:	30 91 ba 02 	lds	r19, 0x02BA
    29e8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ea:	9c 81       	ldd	r25, Y+4	; 0x04
    29ec:	82 0f       	add	r24, r18
    29ee:	93 1f       	adc	r25, r19
    29f0:	90 93 ba 02 	sts	0x02BA, r25
    29f4:	80 93 b9 02 	sts	0x02B9, r24
    29f8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <vPortFree>:
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	0f 92       	push	r0
    2a14:	0f 92       	push	r0
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	9a 83       	std	Y+2, r25	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <vPortInitialiseBlocks>:
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	10 92 ba 02 	sts	0x02BA, r1
    2a34:	10 92 b9 02 	sts	0x02B9, r1
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <xPortGetFreeHeapSize>:
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	20 91 b9 02 	lds	r18, 0x02B9
    2a4a:	30 91 ba 02 	lds	r19, 0x02BA
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	98 e1       	ldi	r25, 0x18	; 24
    2a52:	82 1b       	sub	r24, r18
    2a54:	93 0b       	sbc	r25, r19
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <pxPortInitialiseStack>:
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	28 97       	sbiw	r28, 0x08	; 8
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	9c 83       	std	Y+4, r25	; 0x04
    2a72:	8b 83       	std	Y+3, r24	; 0x03
    2a74:	7e 83       	std	Y+6, r23	; 0x06
    2a76:	6d 83       	std	Y+5, r22	; 0x05
    2a78:	58 87       	std	Y+8, r21	; 0x08
    2a7a:	4f 83       	std	Y+7, r20	; 0x07
    2a7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a80:	81 e1       	ldi	r24, 0x11	; 17
    2a82:	80 83       	st	Z, r24
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	9c 81       	ldd	r25, Y+4	; 0x04
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	9c 83       	std	Y+4, r25	; 0x04
    2a8c:	8b 83       	std	Y+3, r24	; 0x03
    2a8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a90:	fc 81       	ldd	r31, Y+4	; 0x04
    2a92:	82 e2       	ldi	r24, 0x22	; 34
    2a94:	80 83       	st	Z, r24
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	9c 83       	std	Y+4, r25	; 0x04
    2a9e:	8b 83       	std	Y+3, r24	; 0x03
    2aa0:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa2:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa4:	83 e3       	ldi	r24, 0x33	; 51
    2aa6:	80 83       	st	Z, r24
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	9c 83       	std	Y+4, r25	; 0x04
    2ab0:	8b 83       	std	Y+3, r24	; 0x03
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab6:	9a 83       	std	Y+2, r25	; 0x02
    2ab8:	89 83       	std	Y+1, r24	; 0x01
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	eb 81       	ldd	r30, Y+3	; 0x03
    2abe:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac0:	80 83       	st	Z, r24
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad0:	89 2f       	mov	r24, r25
    2ad2:	99 27       	eor	r25, r25
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	eb 81       	ldd	r30, Y+3	; 0x03
    2adc:	fc 81       	ldd	r31, Y+4	; 0x04
    2ade:	80 83       	st	Z, r24
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	9c 83       	std	Y+4, r25	; 0x04
    2ae8:	8b 83       	std	Y+3, r24	; 0x03
    2aea:	eb 81       	ldd	r30, Y+3	; 0x03
    2aec:	fc 81       	ldd	r31, Y+4	; 0x04
    2aee:	10 82       	st	Z, r1
    2af0:	8b 81       	ldd	r24, Y+3	; 0x03
    2af2:	9c 81       	ldd	r25, Y+4	; 0x04
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	9c 83       	std	Y+4, r25	; 0x04
    2af8:	8b 83       	std	Y+3, r24	; 0x03
    2afa:	eb 81       	ldd	r30, Y+3	; 0x03
    2afc:	fc 81       	ldd	r31, Y+4	; 0x04
    2afe:	10 82       	st	Z, r1
    2b00:	8b 81       	ldd	r24, Y+3	; 0x03
    2b02:	9c 81       	ldd	r25, Y+4	; 0x04
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	9c 83       	std	Y+4, r25	; 0x04
    2b08:	8b 83       	std	Y+3, r24	; 0x03
    2b0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b0e:	80 e8       	ldi	r24, 0x80	; 128
    2b10:	80 83       	st	Z, r24
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	9c 81       	ldd	r25, Y+4	; 0x04
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	9c 83       	std	Y+4, r25	; 0x04
    2b1a:	8b 83       	std	Y+3, r24	; 0x03
    2b1c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b1e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b20:	10 82       	st	Z, r1
    2b22:	8b 81       	ldd	r24, Y+3	; 0x03
    2b24:	9c 81       	ldd	r25, Y+4	; 0x04
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	9c 83       	std	Y+4, r25	; 0x04
    2b2a:	8b 83       	std	Y+3, r24	; 0x03
    2b2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b30:	10 82       	st	Z, r1
    2b32:	8b 81       	ldd	r24, Y+3	; 0x03
    2b34:	9c 81       	ldd	r25, Y+4	; 0x04
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	9c 83       	std	Y+4, r25	; 0x04
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
    2b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b40:	10 82       	st	Z, r1
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	9c 81       	ldd	r25, Y+4	; 0x04
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	9c 83       	std	Y+4, r25	; 0x04
    2b4a:	8b 83       	std	Y+3, r24	; 0x03
    2b4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	80 83       	st	Z, r24
    2b54:	8b 81       	ldd	r24, Y+3	; 0x03
    2b56:	9c 81       	ldd	r25, Y+4	; 0x04
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	9c 83       	std	Y+4, r25	; 0x04
    2b5c:	8b 83       	std	Y+3, r24	; 0x03
    2b5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b60:	fc 81       	ldd	r31, Y+4	; 0x04
    2b62:	83 e0       	ldi	r24, 0x03	; 3
    2b64:	80 83       	st	Z, r24
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	9c 83       	std	Y+4, r25	; 0x04
    2b6e:	8b 83       	std	Y+3, r24	; 0x03
    2b70:	eb 81       	ldd	r30, Y+3	; 0x03
    2b72:	fc 81       	ldd	r31, Y+4	; 0x04
    2b74:	84 e0       	ldi	r24, 0x04	; 4
    2b76:	80 83       	st	Z, r24
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	9c 83       	std	Y+4, r25	; 0x04
    2b80:	8b 83       	std	Y+3, r24	; 0x03
    2b82:	eb 81       	ldd	r30, Y+3	; 0x03
    2b84:	fc 81       	ldd	r31, Y+4	; 0x04
    2b86:	85 e0       	ldi	r24, 0x05	; 5
    2b88:	80 83       	st	Z, r24
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	9c 83       	std	Y+4, r25	; 0x04
    2b92:	8b 83       	std	Y+3, r24	; 0x03
    2b94:	eb 81       	ldd	r30, Y+3	; 0x03
    2b96:	fc 81       	ldd	r31, Y+4	; 0x04
    2b98:	86 e0       	ldi	r24, 0x06	; 6
    2b9a:	80 83       	st	Z, r24
    2b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	9c 83       	std	Y+4, r25	; 0x04
    2ba4:	8b 83       	std	Y+3, r24	; 0x03
    2ba6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba8:	fc 81       	ldd	r31, Y+4	; 0x04
    2baa:	87 e0       	ldi	r24, 0x07	; 7
    2bac:	80 83       	st	Z, r24
    2bae:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	9c 83       	std	Y+4, r25	; 0x04
    2bb6:	8b 83       	std	Y+3, r24	; 0x03
    2bb8:	eb 81       	ldd	r30, Y+3	; 0x03
    2bba:	fc 81       	ldd	r31, Y+4	; 0x04
    2bbc:	88 e0       	ldi	r24, 0x08	; 8
    2bbe:	80 83       	st	Z, r24
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	9c 83       	std	Y+4, r25	; 0x04
    2bc8:	8b 83       	std	Y+3, r24	; 0x03
    2bca:	eb 81       	ldd	r30, Y+3	; 0x03
    2bcc:	fc 81       	ldd	r31, Y+4	; 0x04
    2bce:	89 e0       	ldi	r24, 0x09	; 9
    2bd0:	80 83       	st	Z, r24
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	9c 83       	std	Y+4, r25	; 0x04
    2bda:	8b 83       	std	Y+3, r24	; 0x03
    2bdc:	eb 81       	ldd	r30, Y+3	; 0x03
    2bde:	fc 81       	ldd	r31, Y+4	; 0x04
    2be0:	80 e1       	ldi	r24, 0x10	; 16
    2be2:	80 83       	st	Z, r24
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	9c 83       	std	Y+4, r25	; 0x04
    2bec:	8b 83       	std	Y+3, r24	; 0x03
    2bee:	eb 81       	ldd	r30, Y+3	; 0x03
    2bf0:	fc 81       	ldd	r31, Y+4	; 0x04
    2bf2:	81 e1       	ldi	r24, 0x11	; 17
    2bf4:	80 83       	st	Z, r24
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	9c 83       	std	Y+4, r25	; 0x04
    2bfe:	8b 83       	std	Y+3, r24	; 0x03
    2c00:	eb 81       	ldd	r30, Y+3	; 0x03
    2c02:	fc 81       	ldd	r31, Y+4	; 0x04
    2c04:	82 e1       	ldi	r24, 0x12	; 18
    2c06:	80 83       	st	Z, r24
    2c08:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	9c 83       	std	Y+4, r25	; 0x04
    2c10:	8b 83       	std	Y+3, r24	; 0x03
    2c12:	eb 81       	ldd	r30, Y+3	; 0x03
    2c14:	fc 81       	ldd	r31, Y+4	; 0x04
    2c16:	83 e1       	ldi	r24, 0x13	; 19
    2c18:	80 83       	st	Z, r24
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	9c 83       	std	Y+4, r25	; 0x04
    2c22:	8b 83       	std	Y+3, r24	; 0x03
    2c24:	eb 81       	ldd	r30, Y+3	; 0x03
    2c26:	fc 81       	ldd	r31, Y+4	; 0x04
    2c28:	84 e1       	ldi	r24, 0x14	; 20
    2c2a:	80 83       	st	Z, r24
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	9c 83       	std	Y+4, r25	; 0x04
    2c34:	8b 83       	std	Y+3, r24	; 0x03
    2c36:	eb 81       	ldd	r30, Y+3	; 0x03
    2c38:	fc 81       	ldd	r31, Y+4	; 0x04
    2c3a:	85 e1       	ldi	r24, 0x15	; 21
    2c3c:	80 83       	st	Z, r24
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	9c 81       	ldd	r25, Y+4	; 0x04
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
    2c48:	eb 81       	ldd	r30, Y+3	; 0x03
    2c4a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c4c:	86 e1       	ldi	r24, 0x16	; 22
    2c4e:	80 83       	st	Z, r24
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	9c 81       	ldd	r25, Y+4	; 0x04
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	9c 83       	std	Y+4, r25	; 0x04
    2c58:	8b 83       	std	Y+3, r24	; 0x03
    2c5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c5e:	87 e1       	ldi	r24, 0x17	; 23
    2c60:	80 83       	st	Z, r24
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	9c 83       	std	Y+4, r25	; 0x04
    2c6a:	8b 83       	std	Y+3, r24	; 0x03
    2c6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c70:	88 e1       	ldi	r24, 0x18	; 24
    2c72:	80 83       	st	Z, r24
    2c74:	8b 81       	ldd	r24, Y+3	; 0x03
    2c76:	9c 81       	ldd	r25, Y+4	; 0x04
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	9c 83       	std	Y+4, r25	; 0x04
    2c7c:	8b 83       	std	Y+3, r24	; 0x03
    2c7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c80:	fc 81       	ldd	r31, Y+4	; 0x04
    2c82:	89 e1       	ldi	r24, 0x19	; 25
    2c84:	80 83       	st	Z, r24
    2c86:	8b 81       	ldd	r24, Y+3	; 0x03
    2c88:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	9c 83       	std	Y+4, r25	; 0x04
    2c8e:	8b 83       	std	Y+3, r24	; 0x03
    2c90:	eb 81       	ldd	r30, Y+3	; 0x03
    2c92:	fc 81       	ldd	r31, Y+4	; 0x04
    2c94:	80 e2       	ldi	r24, 0x20	; 32
    2c96:	80 83       	st	Z, r24
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9c 83       	std	Y+4, r25	; 0x04
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
    2ca2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ca4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca6:	81 e2       	ldi	r24, 0x21	; 33
    2ca8:	80 83       	st	Z, r24
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	9c 81       	ldd	r25, Y+4	; 0x04
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	9c 83       	std	Y+4, r25	; 0x04
    2cb2:	8b 83       	std	Y+3, r24	; 0x03
    2cb4:	eb 81       	ldd	r30, Y+3	; 0x03
    2cb6:	fc 81       	ldd	r31, Y+4	; 0x04
    2cb8:	82 e2       	ldi	r24, 0x22	; 34
    2cba:	80 83       	st	Z, r24
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	9c 83       	std	Y+4, r25	; 0x04
    2cc4:	8b 83       	std	Y+3, r24	; 0x03
    2cc6:	eb 81       	ldd	r30, Y+3	; 0x03
    2cc8:	fc 81       	ldd	r31, Y+4	; 0x04
    2cca:	83 e2       	ldi	r24, 0x23	; 35
    2ccc:	80 83       	st	Z, r24
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	9c 83       	std	Y+4, r25	; 0x04
    2cd6:	8b 83       	std	Y+3, r24	; 0x03
    2cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cda:	98 85       	ldd	r25, Y+8	; 0x08
    2cdc:	9a 83       	std	Y+2, r25	; 0x02
    2cde:	89 83       	std	Y+1, r24	; 0x01
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce6:	80 83       	st	Z, r24
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	9c 81       	ldd	r25, Y+4	; 0x04
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	9c 83       	std	Y+4, r25	; 0x04
    2cf0:	8b 83       	std	Y+3, r24	; 0x03
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	89 2f       	mov	r24, r25
    2cf8:	99 27       	eor	r25, r25
    2cfa:	9a 83       	std	Y+2, r25	; 0x02
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	eb 81       	ldd	r30, Y+3	; 0x03
    2d02:	fc 81       	ldd	r31, Y+4	; 0x04
    2d04:	80 83       	st	Z, r24
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	9c 83       	std	Y+4, r25	; 0x04
    2d0e:	8b 83       	std	Y+3, r24	; 0x03
    2d10:	eb 81       	ldd	r30, Y+3	; 0x03
    2d12:	fc 81       	ldd	r31, Y+4	; 0x04
    2d14:	86 e2       	ldi	r24, 0x26	; 38
    2d16:	80 83       	st	Z, r24
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	9c 83       	std	Y+4, r25	; 0x04
    2d20:	8b 83       	std	Y+3, r24	; 0x03
    2d22:	eb 81       	ldd	r30, Y+3	; 0x03
    2d24:	fc 81       	ldd	r31, Y+4	; 0x04
    2d26:	87 e2       	ldi	r24, 0x27	; 39
    2d28:	80 83       	st	Z, r24
    2d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	9c 83       	std	Y+4, r25	; 0x04
    2d32:	8b 83       	std	Y+3, r24	; 0x03
    2d34:	eb 81       	ldd	r30, Y+3	; 0x03
    2d36:	fc 81       	ldd	r31, Y+4	; 0x04
    2d38:	88 e2       	ldi	r24, 0x28	; 40
    2d3a:	80 83       	st	Z, r24
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	9c 83       	std	Y+4, r25	; 0x04
    2d44:	8b 83       	std	Y+3, r24	; 0x03
    2d46:	eb 81       	ldd	r30, Y+3	; 0x03
    2d48:	fc 81       	ldd	r31, Y+4	; 0x04
    2d4a:	89 e2       	ldi	r24, 0x29	; 41
    2d4c:	80 83       	st	Z, r24
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	9c 81       	ldd	r25, Y+4	; 0x04
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	9c 83       	std	Y+4, r25	; 0x04
    2d56:	8b 83       	std	Y+3, r24	; 0x03
    2d58:	eb 81       	ldd	r30, Y+3	; 0x03
    2d5a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d5c:	80 e3       	ldi	r24, 0x30	; 48
    2d5e:	80 83       	st	Z, r24
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	9c 81       	ldd	r25, Y+4	; 0x04
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	9c 83       	std	Y+4, r25	; 0x04
    2d68:	8b 83       	std	Y+3, r24	; 0x03
    2d6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d6e:	81 e3       	ldi	r24, 0x31	; 49
    2d70:	80 83       	st	Z, r24
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	9c 81       	ldd	r25, Y+4	; 0x04
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	9c 83       	std	Y+4, r25	; 0x04
    2d7a:	8b 83       	std	Y+3, r24	; 0x03
    2d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d80:	28 96       	adiw	r28, 0x08	; 8
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <xPortStartScheduler>:
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <prvSetupTimerInterrupt>
    2d9e:	a0 91 26 02 	lds	r26, 0x0226
    2da2:	b0 91 27 02 	lds	r27, 0x0227
    2da6:	cd 91       	ld	r28, X+
    2da8:	cd bf       	out	0x3d, r28	; 61
    2daa:	dd 91       	ld	r29, X+
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	ff 91       	pop	r31
    2db0:	ef 91       	pop	r30
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	bf 91       	pop	r27
    2db8:	af 91       	pop	r26
    2dba:	9f 91       	pop	r25
    2dbc:	8f 91       	pop	r24
    2dbe:	7f 91       	pop	r23
    2dc0:	6f 91       	pop	r22
    2dc2:	5f 91       	pop	r21
    2dc4:	4f 91       	pop	r20
    2dc6:	3f 91       	pop	r19
    2dc8:	2f 91       	pop	r18
    2dca:	1f 91       	pop	r17
    2dcc:	0f 91       	pop	r16
    2dce:	ff 90       	pop	r15
    2dd0:	ef 90       	pop	r14
    2dd2:	df 90       	pop	r13
    2dd4:	cf 90       	pop	r12
    2dd6:	bf 90       	pop	r11
    2dd8:	af 90       	pop	r10
    2dda:	9f 90       	pop	r9
    2ddc:	8f 90       	pop	r8
    2dde:	7f 90       	pop	r7
    2de0:	6f 90       	pop	r6
    2de2:	5f 90       	pop	r5
    2de4:	4f 90       	pop	r4
    2de6:	3f 90       	pop	r3
    2de8:	2f 90       	pop	r2
    2dea:	1f 90       	pop	r1
    2dec:	0f 90       	pop	r0
    2dee:	0c be       	out	0x3c, r0	; 60
    2df0:	0f 90       	pop	r0
    2df2:	0b be       	out	0x3b, r0	; 59
    2df4:	0f 90       	pop	r0
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	0f 90       	pop	r0
    2dfa:	08 95       	ret
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <vPortEndScheduler>:
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	08 95       	ret

00002e12 <vPortYield>:
    2e12:	0f 92       	push	r0
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	0f 92       	push	r0
    2e1a:	0b b6       	in	r0, 0x3b	; 59
    2e1c:	0f 92       	push	r0
    2e1e:	0c b6       	in	r0, 0x3c	; 60
    2e20:	0f 92       	push	r0
    2e22:	1f 92       	push	r1
    2e24:	11 24       	eor	r1, r1
    2e26:	2f 92       	push	r2
    2e28:	3f 92       	push	r3
    2e2a:	4f 92       	push	r4
    2e2c:	5f 92       	push	r5
    2e2e:	6f 92       	push	r6
    2e30:	7f 92       	push	r7
    2e32:	8f 92       	push	r8
    2e34:	9f 92       	push	r9
    2e36:	af 92       	push	r10
    2e38:	bf 92       	push	r11
    2e3a:	cf 92       	push	r12
    2e3c:	df 92       	push	r13
    2e3e:	ef 92       	push	r14
    2e40:	ff 92       	push	r15
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	2f 93       	push	r18
    2e48:	3f 93       	push	r19
    2e4a:	4f 93       	push	r20
    2e4c:	5f 93       	push	r21
    2e4e:	6f 93       	push	r22
    2e50:	7f 93       	push	r23
    2e52:	8f 93       	push	r24
    2e54:	9f 93       	push	r25
    2e56:	af 93       	push	r26
    2e58:	bf 93       	push	r27
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	ef 93       	push	r30
    2e60:	ff 93       	push	r31
    2e62:	a0 91 26 02 	lds	r26, 0x0226
    2e66:	b0 91 27 02 	lds	r27, 0x0227
    2e6a:	0d b6       	in	r0, 0x3d	; 61
    2e6c:	0d 92       	st	X+, r0
    2e6e:	0e b6       	in	r0, 0x3e	; 62
    2e70:	0d 92       	st	X+, r0
    2e72:	0e 94 21 07 	call	0xe42	; 0xe42 <vTaskSwitchContext>
    2e76:	a0 91 26 02 	lds	r26, 0x0226
    2e7a:	b0 91 27 02 	lds	r27, 0x0227
    2e7e:	cd 91       	ld	r28, X+
    2e80:	cd bf       	out	0x3d, r28	; 61
    2e82:	dd 91       	ld	r29, X+
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	ff 91       	pop	r31
    2e88:	ef 91       	pop	r30
    2e8a:	df 91       	pop	r29
    2e8c:	cf 91       	pop	r28
    2e8e:	bf 91       	pop	r27
    2e90:	af 91       	pop	r26
    2e92:	9f 91       	pop	r25
    2e94:	8f 91       	pop	r24
    2e96:	7f 91       	pop	r23
    2e98:	6f 91       	pop	r22
    2e9a:	5f 91       	pop	r21
    2e9c:	4f 91       	pop	r20
    2e9e:	3f 91       	pop	r19
    2ea0:	2f 91       	pop	r18
    2ea2:	1f 91       	pop	r17
    2ea4:	0f 91       	pop	r16
    2ea6:	ff 90       	pop	r15
    2ea8:	ef 90       	pop	r14
    2eaa:	df 90       	pop	r13
    2eac:	cf 90       	pop	r12
    2eae:	bf 90       	pop	r11
    2eb0:	af 90       	pop	r10
    2eb2:	9f 90       	pop	r9
    2eb4:	8f 90       	pop	r8
    2eb6:	7f 90       	pop	r7
    2eb8:	6f 90       	pop	r6
    2eba:	5f 90       	pop	r5
    2ebc:	4f 90       	pop	r4
    2ebe:	3f 90       	pop	r3
    2ec0:	2f 90       	pop	r2
    2ec2:	1f 90       	pop	r1
    2ec4:	0f 90       	pop	r0
    2ec6:	0c be       	out	0x3c, r0	; 60
    2ec8:	0f 90       	pop	r0
    2eca:	0b be       	out	0x3b, r0	; 59
    2ecc:	0f 90       	pop	r0
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	0f 90       	pop	r0
    2ed2:	08 95       	ret

00002ed4 <vPortYieldFromTick>:
    2ed4:	0f 92       	push	r0
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	0f 92       	push	r0
    2edc:	0b b6       	in	r0, 0x3b	; 59
    2ede:	0f 92       	push	r0
    2ee0:	0c b6       	in	r0, 0x3c	; 60
    2ee2:	0f 92       	push	r0
    2ee4:	1f 92       	push	r1
    2ee6:	11 24       	eor	r1, r1
    2ee8:	2f 92       	push	r2
    2eea:	3f 92       	push	r3
    2eec:	4f 92       	push	r4
    2eee:	5f 92       	push	r5
    2ef0:	6f 92       	push	r6
    2ef2:	7f 92       	push	r7
    2ef4:	8f 92       	push	r8
    2ef6:	9f 92       	push	r9
    2ef8:	af 92       	push	r10
    2efa:	bf 92       	push	r11
    2efc:	cf 92       	push	r12
    2efe:	df 92       	push	r13
    2f00:	ef 92       	push	r14
    2f02:	ff 92       	push	r15
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	2f 93       	push	r18
    2f0a:	3f 93       	push	r19
    2f0c:	4f 93       	push	r20
    2f0e:	5f 93       	push	r21
    2f10:	6f 93       	push	r22
    2f12:	7f 93       	push	r23
    2f14:	8f 93       	push	r24
    2f16:	9f 93       	push	r25
    2f18:	af 93       	push	r26
    2f1a:	bf 93       	push	r27
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	ef 93       	push	r30
    2f22:	ff 93       	push	r31
    2f24:	a0 91 26 02 	lds	r26, 0x0226
    2f28:	b0 91 27 02 	lds	r27, 0x0227
    2f2c:	0d b6       	in	r0, 0x3d	; 61
    2f2e:	0d 92       	st	X+, r0
    2f30:	0e b6       	in	r0, 0x3e	; 62
    2f32:	0d 92       	st	X+, r0
    2f34:	0e 94 4d 06 	call	0xc9a	; 0xc9a <vTaskIncrementTick>
    2f38:	0e 94 21 07 	call	0xe42	; 0xe42 <vTaskSwitchContext>
    2f3c:	a0 91 26 02 	lds	r26, 0x0226
    2f40:	b0 91 27 02 	lds	r27, 0x0227
    2f44:	cd 91       	ld	r28, X+
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	dd 91       	ld	r29, X+
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	ff 91       	pop	r31
    2f4e:	ef 91       	pop	r30
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	bf 91       	pop	r27
    2f56:	af 91       	pop	r26
    2f58:	9f 91       	pop	r25
    2f5a:	8f 91       	pop	r24
    2f5c:	7f 91       	pop	r23
    2f5e:	6f 91       	pop	r22
    2f60:	5f 91       	pop	r21
    2f62:	4f 91       	pop	r20
    2f64:	3f 91       	pop	r19
    2f66:	2f 91       	pop	r18
    2f68:	1f 91       	pop	r17
    2f6a:	0f 91       	pop	r16
    2f6c:	ff 90       	pop	r15
    2f6e:	ef 90       	pop	r14
    2f70:	df 90       	pop	r13
    2f72:	cf 90       	pop	r12
    2f74:	bf 90       	pop	r11
    2f76:	af 90       	pop	r10
    2f78:	9f 90       	pop	r9
    2f7a:	8f 90       	pop	r8
    2f7c:	7f 90       	pop	r7
    2f7e:	6f 90       	pop	r6
    2f80:	5f 90       	pop	r5
    2f82:	4f 90       	pop	r4
    2f84:	3f 90       	pop	r3
    2f86:	2f 90       	pop	r2
    2f88:	1f 90       	pop	r1
    2f8a:	0f 90       	pop	r0
    2f8c:	0c be       	out	0x3c, r0	; 60
    2f8e:	0f 90       	pop	r0
    2f90:	0b be       	out	0x3b, r0	; 59
    2f92:	0f 90       	pop	r0
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	0f 90       	pop	r0
    2f98:	08 95       	ret

00002f9a <prvSetupTimerInterrupt>:
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <prvSetupTimerInterrupt+0x6>
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <prvSetupTimerInterrupt+0x8>
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	9d e7       	ldi	r25, 0x7D	; 125
    2faa:	a0 e0       	ldi	r26, 0x00	; 0
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	8b 83       	std	Y+3, r24	; 0x03
    2fb0:	9c 83       	std	Y+4, r25	; 0x04
    2fb2:	ad 83       	std	Y+5, r26	; 0x05
    2fb4:	be 83       	std	Y+6, r27	; 0x06
    2fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fba:	ad 81       	ldd	r26, Y+5	; 0x05
    2fbc:	be 81       	ldd	r27, Y+6	; 0x06
    2fbe:	68 94       	set
    2fc0:	15 f8       	bld	r1, 5
    2fc2:	b6 95       	lsr	r27
    2fc4:	a7 95       	ror	r26
    2fc6:	97 95       	ror	r25
    2fc8:	87 95       	ror	r24
    2fca:	16 94       	lsr	r1
    2fcc:	d1 f7       	brne	.-12     	; 0x2fc2 <prvSetupTimerInterrupt+0x28>
    2fce:	8b 83       	std	Y+3, r24	; 0x03
    2fd0:	9c 83       	std	Y+4, r25	; 0x04
    2fd2:	ad 83       	std	Y+5, r26	; 0x05
    2fd4:	be 83       	std	Y+6, r27	; 0x06
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fda:	ad 81       	ldd	r26, Y+5	; 0x05
    2fdc:	be 81       	ldd	r27, Y+6	; 0x06
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	a1 09       	sbc	r26, r1
    2fe2:	b1 09       	sbc	r27, r1
    2fe4:	8b 83       	std	Y+3, r24	; 0x03
    2fe6:	9c 83       	std	Y+4, r25	; 0x04
    2fe8:	ad 83       	std	Y+5, r26	; 0x05
    2fea:	be 83       	std	Y+6, r27	; 0x06
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	89 83       	std	Y+1, r24	; 0x01
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff4:	ad 81       	ldd	r26, Y+5	; 0x05
    2ff6:	be 81       	ldd	r27, Y+6	; 0x06
    2ff8:	89 2f       	mov	r24, r25
    2ffa:	9a 2f       	mov	r25, r26
    2ffc:	ab 2f       	mov	r26, r27
    2ffe:	bb 27       	eor	r27, r27
    3000:	8b 83       	std	Y+3, r24	; 0x03
    3002:	9c 83       	std	Y+4, r25	; 0x04
    3004:	ad 83       	std	Y+5, r26	; 0x05
    3006:	be 83       	std	Y+6, r27	; 0x06
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	8a 83       	std	Y+2, r24	; 0x02
    300c:	e9 e9       	ldi	r30, 0x99	; 153
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	80 83       	st	Z, r24
    3014:	e8 e9       	ldi	r30, 0x98	; 152
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	80 83       	st	Z, r24
    301c:	8b e0       	ldi	r24, 0x0B	; 11
    301e:	89 83       	std	Y+1, r24	; 0x01
    3020:	e1 e9       	ldi	r30, 0x91	; 145
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	80 83       	st	Z, r24
    3028:	e1 e7       	ldi	r30, 0x71	; 113
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	89 83       	std	Y+1, r24	; 0x01
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	82 60       	ori	r24, 0x02	; 2
    3034:	89 83       	std	Y+1, r24	; 0x01
    3036:	e1 e7       	ldi	r30, 0x71	; 113
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	80 83       	st	Z, r24
    303e:	26 96       	adiw	r28, 0x06	; 6
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <__vector_32>:
    3050:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <vPortYieldFromTick>
    3054:	18 95       	reti

00003056 <USART_Init>:
*  the specified baud rate and clk speed.
*
* Param buadin: The desired Baud rate.
* Param clk_seedin: The clk speed of the ATmega328p
************************************/
void USART_Init(uint16_t baudin, uint32_t clk_speedin) {
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	2e 97       	sbiw	r28, 0x0e	; 14
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	9e 83       	std	Y+6, r25	; 0x06
    306c:	8d 83       	std	Y+5, r24	; 0x05
    306e:	4f 83       	std	Y+7, r20	; 0x07
    3070:	58 87       	std	Y+8, r21	; 0x08
    3072:	69 87       	std	Y+9, r22	; 0x09
    3074:	7a 87       	std	Y+10, r23	; 0x0a
    USART_WriteQueue = xQueueCreate(64,sizeof(uint8_t));
    3076:	40 e0       	ldi	r20, 0x00	; 0
    3078:	61 e0       	ldi	r22, 0x01	; 1
    307a:	80 e4       	ldi	r24, 0x40	; 64
    307c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <xQueueGenericCreate>
    3080:	90 93 c3 1a 	sts	0x1AC3, r25
    3084:	80 93 c2 1a 	sts	0x1AC2, r24
    USART_ReadQueue = xQueueCreate(8,sizeof(uint8_t));
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	61 e0       	ldi	r22, 0x01	; 1
    308c:	88 e0       	ldi	r24, 0x08	; 8
    308e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <xQueueGenericCreate>
    3092:	90 93 bf 1a 	sts	0x1ABF, r25
    3096:	80 93 be 1a 	sts	0x1ABE, r24

    uint32_t ubrr = clk_speedin/(16UL)/baudin-1;
    309a:	8f 81       	ldd	r24, Y+7	; 0x07
    309c:	98 85       	ldd	r25, Y+8	; 0x08
    309e:	a9 85       	ldd	r26, Y+9	; 0x09
    30a0:	ba 85       	ldd	r27, Y+10	; 0x0a
    30a2:	68 94       	set
    30a4:	13 f8       	bld	r1, 3
    30a6:	b6 95       	lsr	r27
    30a8:	a7 95       	ror	r26
    30aa:	97 95       	ror	r25
    30ac:	87 95       	ror	r24
    30ae:	16 94       	lsr	r1
    30b0:	d1 f7       	brne	.-12     	; 0x30a6 <USART_Init+0x50>
    30b2:	2d 81       	ldd	r18, Y+5	; 0x05
    30b4:	3e 81       	ldd	r19, Y+6	; 0x06
    30b6:	99 01       	movw	r18, r18
    30b8:	40 e0       	ldi	r20, 0x00	; 0
    30ba:	50 e0       	ldi	r21, 0x00	; 0
    30bc:	bc 01       	movw	r22, r24
    30be:	cd 01       	movw	r24, r26
    30c0:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__udivmodsi4>
    30c4:	da 01       	movw	r26, r20
    30c6:	c9 01       	movw	r24, r18
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	a1 09       	sbc	r26, r1
    30cc:	b1 09       	sbc	r27, r1
    30ce:	89 83       	std	Y+1, r24	; 0x01
    30d0:	9a 83       	std	Y+2, r25	; 0x02
    30d2:	ab 83       	std	Y+3, r26	; 0x03
    30d4:	bc 83       	std	Y+4, r27	; 0x04
    UBRR1H = (unsigned char)(ubrr>>8) ;// & 0x7F;
    30d6:	2d ec       	ldi	r18, 0xCD	; 205
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	9a 81       	ldd	r25, Y+2	; 0x02
    30de:	ab 81       	ldd	r26, Y+3	; 0x03
    30e0:	bc 81       	ldd	r27, Y+4	; 0x04
    30e2:	89 2f       	mov	r24, r25
    30e4:	9a 2f       	mov	r25, r26
    30e6:	ab 2f       	mov	r26, r27
    30e8:	bb 27       	eor	r27, r27
    30ea:	f9 01       	movw	r30, r18
    30ec:	80 83       	st	Z, r24
    UBRR1L = (unsigned char)ubrr;
    30ee:	8c ec       	ldi	r24, 0xCC	; 204
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	29 81       	ldd	r18, Y+1	; 0x01
    30f4:	fc 01       	movw	r30, r24
    30f6:	20 83       	st	Z, r18
    
    //UBRR0H = 0; //115200
    //UBRR0L = 8;

    /* Enable receiver and transmitter */
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);//|(1<<RXCIE1);
    30f8:	89 ec       	ldi	r24, 0xC9	; 201
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	28 e1       	ldi	r18, 0x18	; 24
    30fe:	fc 01       	movw	r30, r24
    3100:	20 83       	st	Z, r18
    /* Set frame format: 8data, 1stop bit */
    UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
    3102:	8a ec       	ldi	r24, 0xCA	; 202
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	26 e0       	ldi	r18, 0x06	; 6
    3108:	fc 01       	movw	r30, r24
    310a:	20 83       	st	Z, r18
	// clear U2X0 for Synchronous operation
    UCSR1A &= ~(1<<U2X1);
    310c:	88 ec       	ldi	r24, 0xC8	; 200
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	28 ec       	ldi	r18, 0xC8	; 200
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	f9 01       	movw	r30, r18
    3116:	20 81       	ld	r18, Z
    3118:	2d 7f       	andi	r18, 0xFD	; 253
    311a:	fc 01       	movw	r30, r24
    311c:	20 83       	st	Z, r18
    /* Set frame format: 8data, 1stop bit */
    //UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
    // clear U2X0 for Synchronous operation
    //UCSR0A &= ~(1<<U2X0);*/

}
    311e:	2e 96       	adiw	r28, 0x0e	; 14
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	df 91       	pop	r29
    312c:	cf 91       	pop	r28
    312e:	08 95       	ret

00003130 <USART_Write>:

/*the send function will put 8bits on the trans line. */
void USART_Write(uint8_t data) {
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	1f 92       	push	r1
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
    313c:	00 00       	nop
    313e:	80 ec       	ldi	r24, 0xC0	; 192
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	fc 01       	movw	r30, r24
    3144:	80 81       	ld	r24, Z
    3146:	88 2f       	mov	r24, r24
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	80 72       	andi	r24, 0x20	; 32
    314c:	99 27       	eor	r25, r25
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	b1 f3       	breq	.-20     	; 0x313e <USART_Write+0xe>
		;
		/* Put data into buffer, sends the data */
		UDR0 = data;
    3152:	86 ec       	ldi	r24, 0xC6	; 198
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	29 81       	ldd	r18, Y+1	; 0x01
    3158:	fc 01       	movw	r30, r24
    315a:	20 83       	st	Z, r18
}
    315c:	0f 90       	pop	r0
    315e:	df 91       	pop	r29
    3160:	cf 91       	pop	r28
    3162:	08 95       	ret

00003164 <USART_Write_Unprotected>:

/*the send function will put 8bits on the trans line. */
void USART_Write_Unprotected(uint8_t data) {
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	1f 92       	push	r1
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
    3170:	00 00       	nop
    3172:	80 ec       	ldi	r24, 0xC0	; 192
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	fc 01       	movw	r30, r24
    3178:	80 81       	ld	r24, Z
    317a:	88 2f       	mov	r24, r24
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	80 72       	andi	r24, 0x20	; 32
    3180:	99 27       	eor	r25, r25
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	b1 f3       	breq	.-20     	; 0x3172 <USART_Write_Unprotected+0xe>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    3186:	86 ec       	ldi	r24, 0xC6	; 198
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	29 81       	ldd	r18, Y+1	; 0x01
    318c:	fc 01       	movw	r30, r24
    318e:	20 83       	st	Z, r18
}
    3190:	0f 90       	pop	r0
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	08 95       	ret

00003198 <USART_Read>:
Therefore you may not get control back after this is called 
until a much later time. It may be helpful to use the 
istheredata() function to check before calling this function
        @return 8bit data packet from sender
*/
uint8_t USART_Read(void) {
    3198:	cf 93       	push	r28
    319a:	df 93       	push	r29
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    /* Wait for data to be received */
    while ( !(UCSR0A & (1<<RXC0)) )
    31a0:	00 00       	nop
    31a2:	80 ec       	ldi	r24, 0xC0	; 192
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	fc 01       	movw	r30, r24
    31a8:	80 81       	ld	r24, Z
    31aa:	88 23       	and	r24, r24
    31ac:	d4 f7       	brge	.-12     	; 0x31a2 <USART_Read+0xa>
        ;
    /* Get and return received data from buffer */
    return UDR0;
    31ae:	86 ec       	ldi	r24, 0xC6	; 198
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	fc 01       	movw	r30, r24
    31b4:	80 81       	ld	r24, Z
}
    31b6:	df 91       	pop	r29
    31b8:	cf 91       	pop	r28
    31ba:	08 95       	ret

000031bc <ISR>:


ISR(USART1_RX_vect){
    31bc:	cf 93       	push	r28
    31be:	df 93       	push	r29
    31c0:	1f 92       	push	r1
    31c2:	1f 92       	push	r1
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	9a 83       	std	Y+2, r25	; 0x02
    31ca:	89 83       	std	Y+1, r24	; 0x01
    //uint8_t data;
    //data = UDR1;
    PORTB = 0xFF;
    31cc:	85 e2       	ldi	r24, 0x25	; 37
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	2f ef       	ldi	r18, 0xFF	; 255
    31d2:	fc 01       	movw	r30, r24
    31d4:	20 83       	st	Z, r18
    //xQueueSendToBackFromISR(USART_ReadQueue,&data,NULL);
}
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	08 95       	ret

000031e0 <USART_AddToQueue>:

void USART_AddToQueue(uint8_t data){
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	1f 92       	push	r1
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	89 83       	std	Y+1, r24	; 0x01
    
    xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);
    31ec:	80 91 c2 1a 	lds	r24, 0x1AC2
    31f0:	90 91 c3 1a 	lds	r25, 0x1AC3
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	4f ef       	ldi	r20, 0xFF	; 255
    31f8:	5f ef       	ldi	r21, 0xFF	; 255
    31fa:	be 01       	movw	r22, r28
    31fc:	6f 5f       	subi	r22, 0xFF	; 255
    31fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3200:	0e 94 9f 0c 	call	0x193e	; 0x193e <xQueueGenericSend>

}
    3204:	0f 90       	pop	r0
    3206:	df 91       	pop	r29
    3208:	cf 91       	pop	r28
    320a:	08 95       	ret

0000320c <USART_TransmitString>:

void USART_TransmitString(char* str){
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	1f 92       	push	r1
    3212:	1f 92       	push	r1
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	9a 83       	std	Y+2, r25	; 0x02
    321a:	89 83       	std	Y+1, r24	; 0x01
    while(*str) {
    321c:	0b c0       	rjmp	.+22     	; 0x3234 <USART_TransmitString+0x28>
        USART_AddToQueue(*str);
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	9a 81       	ldd	r25, Y+2	; 0x02
    3222:	fc 01       	movw	r30, r24
    3224:	80 81       	ld	r24, Z
    3226:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <USART_AddToQueue>
        str++;
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	9a 81       	ldd	r25, Y+2	; 0x02
    322e:	01 96       	adiw	r24, 0x01	; 1
    3230:	9a 83       	std	Y+2, r25	; 0x02
    3232:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);

}

void USART_TransmitString(char* str){
    while(*str) {
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	9a 81       	ldd	r25, Y+2	; 0x02
    3238:	fc 01       	movw	r30, r24
    323a:	80 81       	ld	r24, Z
    323c:	88 23       	and	r24, r24
    323e:	79 f7       	brne	.-34     	; 0x321e <USART_TransmitString+0x12>
        USART_AddToQueue(*str);
        str++;
    }
}
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	08 95       	ret

0000324a <vTaskUSARTWrite>:

void vTaskUSARTWrite(void *pvParameters){
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	00 d0       	rcall	.+0      	; 0x3250 <vTaskUSARTWrite+0x6>
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	9b 83       	std	Y+3, r25	; 0x03
    3256:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    while(1){
    xQueueReceive(USART_WriteQueue,&data,portMAX_DELAY);
    3258:	80 91 c2 1a 	lds	r24, 0x1AC2
    325c:	90 91 c3 1a 	lds	r25, 0x1AC3
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	4f ef       	ldi	r20, 0xFF	; 255
    3264:	5f ef       	ldi	r21, 0xFF	; 255
    3266:	be 01       	movw	r22, r28
    3268:	6f 5f       	subi	r22, 0xFF	; 255
    326a:	7f 4f       	sbci	r23, 0xFF	; 255
    326c:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <xQueueGenericReceive>

        while(!(UCSR1A & (1<<UDRE1)));
    3270:	00 00       	nop
    3272:	88 ec       	ldi	r24, 0xC8	; 200
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	fc 01       	movw	r30, r24
    3278:	80 81       	ld	r24, Z
    327a:	88 2f       	mov	r24, r24
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	80 72       	andi	r24, 0x20	; 32
    3280:	99 27       	eor	r25, r25
    3282:	00 97       	sbiw	r24, 0x00	; 0
    3284:	b1 f3       	breq	.-20     	; 0x3272 <vTaskUSARTWrite+0x28>
        UDR1 = data;
    3286:	8e ec       	ldi	r24, 0xCE	; 206
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	29 81       	ldd	r18, Y+1	; 0x01
    328c:	fc 01       	movw	r30, r24
    328e:	20 83       	st	Z, r18

    }
    3290:	e3 cf       	rjmp	.-58     	; 0x3258 <vTaskUSARTWrite+0xe>

00003292 <USART_LogChar>:
}

void USART_LogChar(uint8_t data){
    3292:	cf 93       	push	r28
    3294:	df 93       	push	r29
    3296:	1f 92       	push	r1
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
    329e:	80 91 c0 1a 	lds	r24, 0x1AC0
    32a2:	90 91 c1 1a 	lds	r25, 0x1AC1
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	4f ef       	ldi	r20, 0xFF	; 255
    32aa:	5f ef       	ldi	r21, 0xFF	; 255
    32ac:	be 01       	movw	r22, r28
    32ae:	6f 5f       	subi	r22, 0xFF	; 255
    32b0:	7f 4f       	sbci	r23, 0xFF	; 255
    32b2:	0e 94 9f 0c 	call	0x193e	; 0x193e <xQueueGenericSend>
}
    32b6:	0f 90       	pop	r0
    32b8:	df 91       	pop	r29
    32ba:	cf 91       	pop	r28
    32bc:	08 95       	ret

000032be <USART_LogString>:

void USART_LogString(char* str){
    32be:	cf 93       	push	r28
    32c0:	df 93       	push	r29
    32c2:	1f 92       	push	r1
    32c4:	1f 92       	push	r1
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
    32ca:	9a 83       	std	Y+2, r25	; 0x02
    32cc:	89 83       	std	Y+1, r24	; 0x01
    while(*str){
    32ce:	0b c0       	rjmp	.+22     	; 0x32e6 <USART_LogString+0x28>
        USART_LogChar(*str);
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	9a 81       	ldd	r25, Y+2	; 0x02
    32d4:	fc 01       	movw	r30, r24
    32d6:	80 81       	ld	r24, Z
    32d8:	0e 94 49 19 	call	0x3292	; 0x3292 <USART_LogChar>
        str++;
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	9a 81       	ldd	r25, Y+2	; 0x02
    32e0:	01 96       	adiw	r24, 0x01	; 1
    32e2:	9a 83       	std	Y+2, r25	; 0x02
    32e4:	89 83       	std	Y+1, r24	; 0x01
void USART_LogChar(uint8_t data){
    xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
}

void USART_LogString(char* str){
    while(*str){
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ea:	fc 01       	movw	r30, r24
    32ec:	80 81       	ld	r24, Z
    32ee:	88 23       	and	r24, r24
    32f0:	79 f7       	brne	.-34     	; 0x32d0 <USART_LogString+0x12>
        USART_LogChar(*str);
        str++;
    }
}
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	df 91       	pop	r29
    32f8:	cf 91       	pop	r28
    32fa:	08 95       	ret

000032fc <vTaskUSARTLog>:

void vTaskUSARTLog(void *pvParameters){
    32fc:	cf 93       	push	r28
    32fe:	df 93       	push	r29
    3300:	00 d0       	rcall	.+0      	; 0x3302 <vTaskUSARTLog+0x6>
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	9b 83       	std	Y+3, r25	; 0x03
    3308:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    while(1){
    xQueueReceive(USART_WriteQueueLog,&data,portMAX_DELAY);
    330a:	80 91 c0 1a 	lds	r24, 0x1AC0
    330e:	90 91 c1 1a 	lds	r25, 0x1AC1
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	4f ef       	ldi	r20, 0xFF	; 255
    3316:	5f ef       	ldi	r21, 0xFF	; 255
    3318:	be 01       	movw	r22, r28
    331a:	6f 5f       	subi	r22, 0xFF	; 255
    331c:	7f 4f       	sbci	r23, 0xFF	; 255
    331e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <xQueueGenericReceive>

        while(!(UCSR0A & (1<<UDRE0)));
    3322:	00 00       	nop
    3324:	80 ec       	ldi	r24, 0xC0	; 192
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	fc 01       	movw	r30, r24
    332a:	80 81       	ld	r24, Z
    332c:	88 2f       	mov	r24, r24
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	80 72       	andi	r24, 0x20	; 32
    3332:	99 27       	eor	r25, r25
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	b1 f3       	breq	.-20     	; 0x3324 <vTaskUSARTLog+0x28>
        UDR0 = data;
    3338:	86 ec       	ldi	r24, 0xC6	; 198
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	29 81       	ldd	r18, Y+1	; 0x01
    333e:	fc 01       	movw	r30, r24
    3340:	20 83       	st	Z, r18

    }
    3342:	e3 cf       	rjmp	.-58     	; 0x330a <vTaskUSARTLog+0xe>

00003344 <vTaskUSARTRead>:

}

void vTaskUSARTRead(void *pvParameters){
    3344:	cf 93       	push	r28
    3346:	df 93       	push	r29
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	c4 55       	subi	r28, 0x54	; 84
    334e:	d1 09       	sbc	r29, r1
    3350:	0f b6       	in	r0, 0x3f	; 63
    3352:	f8 94       	cli
    3354:	de bf       	out	0x3e, r29	; 62
    3356:	0f be       	out	0x3f, r0	; 63
    3358:	cd bf       	out	0x3d, r28	; 61
    335a:	9e 01       	movw	r18, r28
    335c:	2d 5a       	subi	r18, 0xAD	; 173
    335e:	3f 4f       	sbci	r19, 0xFF	; 255
    3360:	f9 01       	movw	r30, r18
    3362:	91 83       	std	Z+1, r25	; 0x01
    3364:	80 83       	st	Z, r24
    char size;
    char groupID;
    char cmd;
    unsigned int timeout;

    PORTB = 0;
    3366:	85 e2       	ldi	r24, 0x25	; 37
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	fc 01       	movw	r30, r24
    336c:	10 82       	st	Z, r1
    Command command;
    Response response;
    while(1){
        //PORTB = 0;
        //Get Header
        bytesRecieved = 0;
    336e:	19 82       	std	Y+1, r1	; 0x01
        timeout = 0;
    3370:	1b 82       	std	Y+3, r1	; 0x03
    3372:	1a 82       	std	Y+2, r1	; 0x02
        while(bytesRecieved < 4){
    3374:	2e c0       	rjmp	.+92     	; 0x33d2 <vTaskUSARTRead+0x8e>
            //if there is data to be read...
            if((UCSR1A & (1<<RXC1))){
    3376:	88 ec       	ldi	r24, 0xC8	; 200
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	fc 01       	movw	r30, r24
    337c:	80 81       	ld	r24, Z
    337e:	88 23       	and	r24, r24
    3380:	d4 f4       	brge	.+52     	; 0x33b6 <vTaskUSARTRead+0x72>
                rxData = UDR1;
    3382:	8e ec       	ldi	r24, 0xCE	; 206
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	fc 01       	movw	r30, r24
    3388:	80 81       	ld	r24, Z
    338a:	8c 83       	std	Y+4, r24	; 0x04
            //if(xQueueReceive(USART_ReadQueue,&rxData,portMAX_DELAY) == pdTRUE){
                buffer[bytesRecieved] = rxData;
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	99 27       	eor	r25, r25
    3390:	87 fd       	sbrc	r24, 7
    3392:	90 95       	com	r25
    3394:	9e 01       	movw	r18, r28
    3396:	2a 5f       	subi	r18, 0xFA	; 250
    3398:	3f 4f       	sbci	r19, 0xFF	; 255
    339a:	82 0f       	add	r24, r18
    339c:	93 1f       	adc	r25, r19
    339e:	2c 81       	ldd	r18, Y+4	; 0x04
    33a0:	fc 01       	movw	r30, r24
    33a2:	20 83       	st	Z, r18
                //USART_AddToQueue(rxData);
                bytesRecieved++;
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
    33a6:	8f 5f       	subi	r24, 0xFF	; 255
    33a8:	89 83       	std	Y+1, r24	; 0x01
                PORTB = 0xFF;
    33aa:	85 e2       	ldi	r24, 0x25	; 37
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	2f ef       	ldi	r18, 0xFF	; 255
    33b0:	fc 01       	movw	r30, r24
    33b2:	20 83       	st	Z, r18
    33b4:	05 c0       	rjmp	.+10     	; 0x33c0 <vTaskUSARTRead+0x7c>
                //timeout = 0;
            } else {
                timeout++;
    33b6:	8a 81       	ldd	r24, Y+2	; 0x02
    33b8:	9b 81       	ldd	r25, Y+3	; 0x03
    33ba:	01 96       	adiw	r24, 0x01	; 1
    33bc:	9b 83       	std	Y+3, r25	; 0x03
    33be:	8a 83       	std	Y+2, r24	; 0x02
            }
            if(timeout > 50000){
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	9b 81       	ldd	r25, Y+3	; 0x03
    33c4:	81 35       	cpi	r24, 0x51	; 81
    33c6:	f3 ec       	ldi	r31, 0xC3	; 195
    33c8:	9f 07       	cpc	r25, r31
    33ca:	18 f0       	brcs	.+6      	; 0x33d2 <vTaskUSARTRead+0x8e>
                timeout = 0;
    33cc:	1b 82       	std	Y+3, r1	; 0x03
    33ce:	1a 82       	std	Y+2, r1	; 0x02
                bytesRecieved = 0;
    33d0:	19 82       	std	Y+1, r1	; 0x01
    while(1){
        //PORTB = 0;
        //Get Header
        bytesRecieved = 0;
        timeout = 0;
        while(bytesRecieved < 4){
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	84 30       	cpi	r24, 0x04	; 4
    33d6:	7c f2       	brlt	.-98     	; 0x3376 <vTaskUSARTRead+0x32>
                timeout = 0;
                bytesRecieved = 0;
            }
        }
        //PORTB = 0;
        if(calcChecksum(buffer,3) != buffer[3]){
    33d8:	ce 01       	movw	r24, r28
    33da:	06 96       	adiw	r24, 0x06	; 6
    33dc:	63 e0       	ldi	r22, 0x03	; 3
    33de:	0e 94 00 1b 	call	0x3600	; 0x3600 <calcChecksum>
    33e2:	98 2f       	mov	r25, r24
    33e4:	89 85       	ldd	r24, Y+9	; 0x09
    33e6:	98 17       	cp	r25, r24
    33e8:	19 f0       	breq	.+6      	; 0x33f0 <vTaskUSARTRead+0xac>
            sendNACK();
    33ea:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <sendNACK>
            processCommand(&command,&response);
            sendResponse(&response);

        }

    }
    33ee:	bf cf       	rjmp	.-130    	; 0x336e <vTaskUSARTRead+0x2a>
        }
        //PORTB = 0;
        if(calcChecksum(buffer,3) != buffer[3]){
            sendNACK();
        } else {
            sendACK();
    33f0:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sendACK>
            bytesRecieved = 0;
    33f4:	19 82       	std	Y+1, r1	; 0x01
            command.groupID = buffer[0];
    33f6:	8e 81       	ldd	r24, Y+6	; 0x06
    33f8:	8e 87       	std	Y+14, r24	; 0x0e
            command.cmd = buffer[1];
    33fa:	8f 81       	ldd	r24, Y+7	; 0x07
    33fc:	8f 87       	std	Y+15, r24	; 0x0f
            command.crc = buffer[3];
    33fe:	89 85       	ldd	r24, Y+9	; 0x09
    3400:	88 8b       	std	Y+16, r24	; 0x10
            size = buffer[2];
    3402:	88 85       	ldd	r24, Y+8	; 0x08
    3404:	8d 83       	std	Y+5, r24	; 0x05
            timeout = 0;
    3406:	1b 82       	std	Y+3, r1	; 0x03
    3408:	1a 82       	std	Y+2, r1	; 0x02
            if(size != 0){
    340a:	8d 81       	ldd	r24, Y+5	; 0x05
    340c:	88 23       	and	r24, r24
    340e:	09 f4       	brne	.+2      	; 0x3412 <vTaskUSARTRead+0xce>
    3410:	61 c0       	rjmp	.+194    	; 0x34d4 <vTaskUSARTRead+0x190>
                while(1) {
                    while((bytesRecieved < size+1) && (timeout < 50)){  //1 for crc
    3412:	1f c0       	rjmp	.+62     	; 0x3452 <vTaskUSARTRead+0x10e>
                        if(UCSR1A & (1<<RXC1)){
    3414:	88 ec       	ldi	r24, 0xC8	; 200
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	fc 01       	movw	r30, r24
    341a:	80 81       	ld	r24, Z
    341c:	88 23       	and	r24, r24
    341e:	ac f4       	brge	.+42     	; 0x344a <vTaskUSARTRead+0x106>
                            rxData = UDR1;
    3420:	8e ec       	ldi	r24, 0xCE	; 206
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	fc 01       	movw	r30, r24
    3426:	80 81       	ld	r24, Z
    3428:	8c 83       	std	Y+4, r24	; 0x04

                            //PORTB = 0xFF;
                        //if(xQueueReceive(USART_ReadQueue,&rxData,portMAX_DELAY) == pdTRUE){
                            buffer[bytesRecieved] = rxData;
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	99 27       	eor	r25, r25
    342e:	87 fd       	sbrc	r24, 7
    3430:	90 95       	com	r25
    3432:	9e 01       	movw	r18, r28
    3434:	2a 5f       	subi	r18, 0xFA	; 250
    3436:	3f 4f       	sbci	r19, 0xFF	; 255
    3438:	82 0f       	add	r24, r18
    343a:	93 1f       	adc	r25, r19
    343c:	2c 81       	ldd	r18, Y+4	; 0x04
    343e:	fc 01       	movw	r30, r24
    3440:	20 83       	st	Z, r18
                            bytesRecieved++;
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	8f 5f       	subi	r24, 0xFF	; 255
    3446:	89 83       	std	Y+1, r24	; 0x01
    3448:	04 c0       	rjmp	.+8      	; 0x3452 <vTaskUSARTRead+0x10e>
                        } else {
                            //timeout++;
                            timeout = 1;
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	9b 83       	std	Y+3, r25	; 0x03
    3450:	8a 83       	std	Y+2, r24	; 0x02
            command.crc = buffer[3];
            size = buffer[2];
            timeout = 0;
            if(size != 0){
                while(1) {
                    while((bytesRecieved < size+1) && (timeout < 50)){  //1 for crc
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	28 2f       	mov	r18, r24
    3456:	33 27       	eor	r19, r19
    3458:	27 fd       	sbrc	r18, 7
    345a:	30 95       	com	r19
    345c:	8d 81       	ldd	r24, Y+5	; 0x05
    345e:	99 27       	eor	r25, r25
    3460:	87 fd       	sbrc	r24, 7
    3462:	90 95       	com	r25
    3464:	01 96       	adiw	r24, 0x01	; 1
    3466:	28 17       	cp	r18, r24
    3468:	39 07       	cpc	r19, r25
    346a:	2c f4       	brge	.+10     	; 0x3476 <vTaskUSARTRead+0x132>
    346c:	8a 81       	ldd	r24, Y+2	; 0x02
    346e:	9b 81       	ldd	r25, Y+3	; 0x03
    3470:	82 33       	cpi	r24, 0x32	; 50
    3472:	91 05       	cpc	r25, r1
    3474:	78 f2       	brcs	.-98     	; 0x3414 <vTaskUSARTRead+0xd0>
                        } else {
                            //timeout++;
                            timeout = 1;
                        }
                    } 
                    if(timeout >= 50){
    3476:	8a 81       	ldd	r24, Y+2	; 0x02
    3478:	9b 81       	ldd	r25, Y+3	; 0x03
    347a:	82 33       	cpi	r24, 0x32	; 50
    347c:	91 05       	cpc	r25, r1
    347e:	08 f0       	brcs	.+2      	; 0x3482 <vTaskUSARTRead+0x13e>
                        break;
    3480:	29 c0       	rjmp	.+82     	; 0x34d4 <vTaskUSARTRead+0x190>
                    }
                    if(calcChecksum(buffer,size) != buffer[size]){
    3482:	2d 81       	ldd	r18, Y+5	; 0x05
    3484:	ce 01       	movw	r24, r28
    3486:	06 96       	adiw	r24, 0x06	; 6
    3488:	62 2f       	mov	r22, r18
    348a:	0e 94 00 1b 	call	0x3600	; 0x3600 <calcChecksum>
    348e:	48 2f       	mov	r20, r24
    3490:	8d 81       	ldd	r24, Y+5	; 0x05
    3492:	99 27       	eor	r25, r25
    3494:	87 fd       	sbrc	r24, 7
    3496:	90 95       	com	r25
    3498:	9e 01       	movw	r18, r28
    349a:	2a 5f       	subi	r18, 0xFA	; 250
    349c:	3f 4f       	sbci	r19, 0xFF	; 255
    349e:	82 0f       	add	r24, r18
    34a0:	93 1f       	adc	r25, r19
    34a2:	fc 01       	movw	r30, r24
    34a4:	80 81       	ld	r24, Z
    34a6:	48 17       	cp	r20, r24
    34a8:	21 f0       	breq	.+8      	; 0x34b2 <vTaskUSARTRead+0x16e>
                        sendNACK();
    34aa:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <sendNACK>
                        bytesRecieved = 0;
    34ae:	19 82       	std	Y+1, r1	; 0x01
                        //PORTB = buffer[0];
                        sendACK();
                        memcpy(command.payload,buffer,size);
                        break;
                    }
                }
    34b0:	b0 cf       	rjmp	.-160    	; 0x3412 <vTaskUSARTRead+0xce>
                    if(calcChecksum(buffer,size) != buffer[size]){
                        sendNACK();
                        bytesRecieved = 0;
                    } else {
                        //PORTB = buffer[0];
                        sendACK();
    34b2:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sendACK>
                        memcpy(command.payload,buffer,size);
    34b6:	8d 81       	ldd	r24, Y+5	; 0x05
    34b8:	48 2f       	mov	r20, r24
    34ba:	55 27       	eor	r21, r21
    34bc:	47 fd       	sbrc	r20, 7
    34be:	50 95       	com	r21
    34c0:	9e 01       	movw	r18, r28
    34c2:	2a 5f       	subi	r18, 0xFA	; 250
    34c4:	3f 4f       	sbci	r19, 0xFF	; 255
    34c6:	ce 01       	movw	r24, r28
    34c8:	0e 96       	adiw	r24, 0x0e	; 14
    34ca:	03 96       	adiw	r24, 0x03	; 3
    34cc:	b9 01       	movw	r22, r18
    34ce:	0e 94 0a 20 	call	0x4014	; 0x4014 <memcpy>
                        break;
    34d2:	00 00       	nop
                    }
                }
            }
            processCommand(&command,&response);
    34d4:	9e 01       	movw	r18, r28
    34d6:	2f 5c       	subi	r18, 0xCF	; 207
    34d8:	3f 4f       	sbci	r19, 0xFF	; 255
    34da:	ce 01       	movw	r24, r28
    34dc:	0e 96       	adiw	r24, 0x0e	; 14
    34de:	b9 01       	movw	r22, r18
    34e0:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <processCommand>
            sendResponse(&response);
    34e4:	ce 01       	movw	r24, r28
    34e6:	c1 96       	adiw	r24, 0x31	; 49
    34e8:	0e 94 77 1a 	call	0x34ee	; 0x34ee <sendResponse>

        }

    }
    34ec:	40 cf       	rjmp	.-384    	; 0x336e <vTaskUSARTRead+0x2a>

000034ee <sendResponse>:

}

void sendResponse(Response* response){
    34ee:	cf 93       	push	r28
    34f0:	df 93       	push	r29
    34f2:	00 d0       	rcall	.+0      	; 0x34f4 <sendResponse+0x6>
    34f4:	00 d0       	rcall	.+0      	; 0x34f6 <sendResponse+0x8>
    34f6:	cd b7       	in	r28, 0x3d	; 61
    34f8:	de b7       	in	r29, 0x3e	; 62
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
    char checksumBuffer[2];
    int i;
    while(1){
        USART_AddToQueue(response->commandBack);
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	9e 81       	ldd	r25, Y+6	; 0x06
    3502:	fc 01       	movw	r30, r24
    3504:	80 81       	ld	r24, Z
    3506:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <USART_AddToQueue>
        USART_AddToQueue(response->size);
    350a:	8d 81       	ldd	r24, Y+5	; 0x05
    350c:	9e 81       	ldd	r25, Y+6	; 0x06
    350e:	fc 01       	movw	r30, r24
    3510:	81 81       	ldd	r24, Z+1	; 0x01
    3512:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <USART_AddToQueue>
        checksumBuffer[0] = response->commandBack;
    3516:	8d 81       	ldd	r24, Y+5	; 0x05
    3518:	9e 81       	ldd	r25, Y+6	; 0x06
    351a:	fc 01       	movw	r30, r24
    351c:	80 81       	ld	r24, Z
    351e:	8b 83       	std	Y+3, r24	; 0x03
        checksumBuffer[1] = response->size;
    3520:	8d 81       	ldd	r24, Y+5	; 0x05
    3522:	9e 81       	ldd	r25, Y+6	; 0x06
    3524:	fc 01       	movw	r30, r24
    3526:	81 81       	ldd	r24, Z+1	; 0x01
    3528:	8c 83       	std	Y+4, r24	; 0x04
        USART_AddToQueue(calcChecksum(checksumBuffer,2));
    352a:	ce 01       	movw	r24, r28
    352c:	03 96       	adiw	r24, 0x03	; 3
    352e:	62 e0       	ldi	r22, 0x02	; 2
    3530:	0e 94 00 1b 	call	0x3600	; 0x3600 <calcChecksum>
    3534:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <USART_AddToQueue>
        if(waitForChecksum() == 0){
    3538:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <waitForChecksum>
    353c:	88 23       	and	r24, r24
    353e:	21 f4       	brne	.+8      	; 0x3548 <sendResponse+0x5a>
            break;
    3540:	00 00       	nop
        }
    }

    for(i=0;i<response->size;i++){
    3542:	1a 82       	std	Y+2, r1	; 0x02
    3544:	19 82       	std	Y+1, r1	; 0x01
    3546:	11 c0       	rjmp	.+34     	; 0x356a <sendResponse+0x7c>
        checksumBuffer[1] = response->size;
        USART_AddToQueue(calcChecksum(checksumBuffer,2));
        if(waitForChecksum() == 0){
            break;
        }
    }
    3548:	da cf       	rjmp	.-76     	; 0x34fe <sendResponse+0x10>

    for(i=0;i<response->size;i++){
        USART_AddToQueue(response->payload[i]);
    354a:	2d 81       	ldd	r18, Y+5	; 0x05
    354c:	3e 81       	ldd	r19, Y+6	; 0x06
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	9a 81       	ldd	r25, Y+2	; 0x02
    3552:	82 0f       	add	r24, r18
    3554:	93 1f       	adc	r25, r19
    3556:	02 96       	adiw	r24, 0x02	; 2
    3558:	fc 01       	movw	r30, r24
    355a:	80 81       	ld	r24, Z
    355c:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <USART_AddToQueue>
        if(waitForChecksum() == 0){
            break;
        }
    }

    for(i=0;i<response->size;i++){
    3560:	89 81       	ldd	r24, Y+1	; 0x01
    3562:	9a 81       	ldd	r25, Y+2	; 0x02
    3564:	01 96       	adiw	r24, 0x01	; 1
    3566:	9a 83       	std	Y+2, r25	; 0x02
    3568:	89 83       	std	Y+1, r24	; 0x01
    356a:	8d 81       	ldd	r24, Y+5	; 0x05
    356c:	9e 81       	ldd	r25, Y+6	; 0x06
    356e:	fc 01       	movw	r30, r24
    3570:	81 81       	ldd	r24, Z+1	; 0x01
    3572:	28 2f       	mov	r18, r24
    3574:	33 27       	eor	r19, r19
    3576:	27 fd       	sbrc	r18, 7
    3578:	30 95       	com	r19
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	9a 81       	ldd	r25, Y+2	; 0x02
    357e:	82 17       	cp	r24, r18
    3580:	93 07       	cpc	r25, r19
    3582:	1c f3       	brlt	.-58     	; 0x354a <sendResponse+0x5c>
        USART_AddToQueue(response->payload[i]);
        //USART_AddToQueue()
    }
    USART_AddToQueue(calcChecksum(response->payload,12));
    3584:	8d 81       	ldd	r24, Y+5	; 0x05
    3586:	9e 81       	ldd	r25, Y+6	; 0x06
    3588:	02 96       	adiw	r24, 0x02	; 2
    358a:	6c e0       	ldi	r22, 0x0C	; 12
    358c:	0e 94 00 1b 	call	0x3600	; 0x3600 <calcChecksum>
    3590:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <USART_AddToQueue>


}
    3594:	26 96       	adiw	r28, 0x06	; 6
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	de bf       	out	0x3e, r29	; 62
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	df 91       	pop	r29
    35a2:	cf 91       	pop	r28
    35a4:	08 95       	ret

000035a6 <sendACK>:

void sendACK(){
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    USART_AddToQueue(128);
    35ae:	80 e8       	ldi	r24, 0x80	; 128
    35b0:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <USART_AddToQueue>
}
    35b4:	df 91       	pop	r29
    35b6:	cf 91       	pop	r28
    35b8:	08 95       	ret

000035ba <sendNACK>:

void sendNACK(){
    35ba:	cf 93       	push	r28
    35bc:	df 93       	push	r29
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    USART_AddToQueue(0);
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <USART_AddToQueue>
}
    35c8:	df 91       	pop	r29
    35ca:	cf 91       	pop	r28
    35cc:	08 95       	ret

000035ce <waitForChecksum>:

char waitForChecksum(){
    35ce:	cf 93       	push	r28
    35d0:	df 93       	push	r29
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    while(1){
        if(UCSR1A & (1<<RXC1)){
    35d6:	88 ec       	ldi	r24, 0xC8	; 200
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	fc 01       	movw	r30, r24
    35dc:	80 81       	ld	r24, Z
    35de:	88 23       	and	r24, r24
    35e0:	3c f4       	brge	.+14     	; 0x35f0 <waitForChecksum+0x22>
            if(UDR1 = 0xFF) {
    35e2:	8e ec       	ldi	r24, 0xCE	; 206
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	2f ef       	ldi	r18, 0xFF	; 255
    35e8:	fc 01       	movw	r30, r24
    35ea:	20 83       	st	Z, r18
                return 0;
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	05 c0       	rjmp	.+10     	; 0x35fa <waitForChecksum+0x2c>
            } else {
                return -1;
            }

        } else {
            vTaskDelay(1);
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	0e 94 ab 03 	call	0x756	; 0x756 <vTaskDelay>
        }

    }
    35f8:	ee cf       	rjmp	.-36     	; 0x35d6 <waitForChecksum+0x8>
}
    35fa:	df 91       	pop	r29
    35fc:	cf 91       	pop	r28
    35fe:	08 95       	ret

00003600 <calcChecksum>:

uint8_t calcChecksum(uint8_t* buffer,uint8_t size){
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	00 d0       	rcall	.+0      	; 0x3606 <calcChecksum+0x6>
    3606:	1f 92       	push	r1
    3608:	cd b7       	in	r28, 0x3d	; 61
    360a:	de b7       	in	r29, 0x3e	; 62
    360c:	9b 83       	std	Y+3, r25	; 0x03
    360e:	8a 83       	std	Y+2, r24	; 0x02
    3610:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t checksum = 0;
    3612:	19 82       	std	Y+1, r1	; 0x01
    while(size-- > 0){
    3614:	0c c0       	rjmp	.+24     	; 0x362e <calcChecksum+0x2e>
        checksum += *(buffer++);
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	9b 81       	ldd	r25, Y+3	; 0x03
    361a:	9c 01       	movw	r18, r24
    361c:	2f 5f       	subi	r18, 0xFF	; 255
    361e:	3f 4f       	sbci	r19, 0xFF	; 255
    3620:	3b 83       	std	Y+3, r19	; 0x03
    3622:	2a 83       	std	Y+2, r18	; 0x02
    3624:	fc 01       	movw	r30, r24
    3626:	80 81       	ld	r24, Z
    3628:	99 81       	ldd	r25, Y+1	; 0x01
    362a:	89 0f       	add	r24, r25
    362c:	89 83       	std	Y+1, r24	; 0x01
    }
}

uint8_t calcChecksum(uint8_t* buffer,uint8_t size){
    uint8_t checksum = 0;
    while(size-- > 0){
    362e:	8c 81       	ldd	r24, Y+4	; 0x04
    3630:	9f ef       	ldi	r25, 0xFF	; 255
    3632:	98 0f       	add	r25, r24
    3634:	9c 83       	std	Y+4, r25	; 0x04
    3636:	88 23       	and	r24, r24
    3638:	71 f7       	brne	.-36     	; 0x3616 <calcChecksum+0x16>
        checksum += *(buffer++);
    }
    return checksum;
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	df 91       	pop	r29
    3646:	cf 91       	pop	r28
    3648:	08 95       	ret

0000364a <commandIntegCheck>:
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	0f 92       	push	r0
    3650:	0f 92       	push	r0
    3652:	cd b7       	in	r28, 0x3d	; 61
    3654:	de b7       	in	r29, 0x3e	; 62
    3656:	9a 83       	std	Y+2, r25	; 0x02
    3658:	89 83       	std	Y+1, r24	; 0x01
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	cf 91       	pop	r28
    3662:	df 91       	pop	r29
    3664:	08 95       	ret

00003666 <processUltrasonicCommand>:
    3666:	df 93       	push	r29
    3668:	cf 93       	push	r28
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	29 97       	sbiw	r28, 0x09	; 9
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	de bf       	out	0x3e, r29	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	cd bf       	out	0x3d, r28	; 61
    367a:	89 83       	std	Y+1, r24	; 0x01
    367c:	7b 83       	std	Y+3, r23	; 0x03
    367e:	6a 83       	std	Y+2, r22	; 0x02
    3680:	5d 83       	std	Y+5, r21	; 0x05
    3682:	4c 83       	std	Y+4, r20	; 0x04
    3684:	3f 83       	std	Y+7, r19	; 0x07
    3686:	2e 83       	std	Y+6, r18	; 0x06
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	28 2f       	mov	r18, r24
    368c:	33 27       	eor	r19, r19
    368e:	27 fd       	sbrc	r18, 7
    3690:	30 95       	com	r19
    3692:	39 87       	std	Y+9, r19	; 0x09
    3694:	28 87       	std	Y+8, r18	; 0x08
    3696:	88 85       	ldd	r24, Y+8	; 0x08
    3698:	99 85       	ldd	r25, Y+9	; 0x09
    369a:	82 30       	cpi	r24, 0x02	; 2
    369c:	91 05       	cpc	r25, r1
    369e:	99 f0       	breq	.+38     	; 0x36c6 <processUltrasonicCommand+0x60>
    36a0:	28 85       	ldd	r18, Y+8	; 0x08
    36a2:	39 85       	ldd	r19, Y+9	; 0x09
    36a4:	23 30       	cpi	r18, 0x03	; 3
    36a6:	31 05       	cpc	r19, r1
    36a8:	b9 f0       	breq	.+46     	; 0x36d8 <processUltrasonicCommand+0x72>
    36aa:	88 85       	ldd	r24, Y+8	; 0x08
    36ac:	99 85       	ldd	r25, Y+9	; 0x09
    36ae:	81 30       	cpi	r24, 0x01	; 1
    36b0:	91 05       	cpc	r25, r1
    36b2:	d1 f4       	brne	.+52     	; 0x36e8 <processUltrasonicCommand+0x82>
    36b4:	8e 81       	ldd	r24, Y+6	; 0x06
    36b6:	9f 81       	ldd	r25, Y+7	; 0x07
    36b8:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <getAllSensors>
    36bc:	ec 81       	ldd	r30, Y+4	; 0x04
    36be:	fd 81       	ldd	r31, Y+5	; 0x05
    36c0:	8c e0       	ldi	r24, 0x0C	; 12
    36c2:	80 83       	st	Z, r24
    36c4:	11 c0       	rjmp	.+34     	; 0x36e8 <processUltrasonicCommand+0x82>
    36c6:	ea 81       	ldd	r30, Y+2	; 0x02
    36c8:	fb 81       	ldd	r31, Y+3	; 0x03
    36ca:	80 81       	ld	r24, Z
    36cc:	2e 81       	ldd	r18, Y+6	; 0x06
    36ce:	3f 81       	ldd	r19, Y+7	; 0x07
    36d0:	b9 01       	movw	r22, r18
    36d2:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <getCertainSensor>
    36d6:	08 c0       	rjmp	.+16     	; 0x36e8 <processUltrasonicCommand+0x82>
    36d8:	ea 81       	ldd	r30, Y+2	; 0x02
    36da:	fb 81       	ldd	r31, Y+3	; 0x03
    36dc:	80 81       	ld	r24, Z
    36de:	2e 81       	ldd	r18, Y+6	; 0x06
    36e0:	3f 81       	ldd	r19, Y+7	; 0x07
    36e2:	b9 01       	movw	r22, r18
    36e4:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <getSensorGroup>
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	29 96       	adiw	r28, 0x09	; 9
    36ec:	0f b6       	in	r0, 0x3f	; 63
    36ee:	f8 94       	cli
    36f0:	de bf       	out	0x3e, r29	; 62
    36f2:	0f be       	out	0x3f, r0	; 63
    36f4:	cd bf       	out	0x3d, r28	; 61
    36f6:	cf 91       	pop	r28
    36f8:	df 91       	pop	r29
    36fa:	08 95       	ret

000036fc <processSpeedCommand>:
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
    3704:	27 97       	sbiw	r28, 0x07	; 7
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	f8 94       	cli
    370a:	de bf       	out	0x3e, r29	; 62
    370c:	0f be       	out	0x3f, r0	; 63
    370e:	cd bf       	out	0x3d, r28	; 61
    3710:	89 83       	std	Y+1, r24	; 0x01
    3712:	7b 83       	std	Y+3, r23	; 0x03
    3714:	6a 83       	std	Y+2, r22	; 0x02
    3716:	5d 83       	std	Y+5, r21	; 0x05
    3718:	4c 83       	std	Y+4, r20	; 0x04
    371a:	89 81       	ldd	r24, Y+1	; 0x01
    371c:	28 2f       	mov	r18, r24
    371e:	33 27       	eor	r19, r19
    3720:	27 fd       	sbrc	r18, 7
    3722:	30 95       	com	r19
    3724:	3f 83       	std	Y+7, r19	; 0x07
    3726:	2e 83       	std	Y+6, r18	; 0x06
    3728:	8e 81       	ldd	r24, Y+6	; 0x06
    372a:	9f 81       	ldd	r25, Y+7	; 0x07
    372c:	00 97       	sbiw	r24, 0x00	; 0
    372e:	31 f0       	breq	.+12     	; 0x373c <processSpeedCommand+0x40>
    3730:	2e 81       	ldd	r18, Y+6	; 0x06
    3732:	3f 81       	ldd	r19, Y+7	; 0x07
    3734:	21 30       	cpi	r18, 0x01	; 1
    3736:	31 05       	cpc	r19, r1
    3738:	31 f0       	breq	.+12     	; 0x3746 <processSpeedCommand+0x4a>
    373a:	0d c0       	rjmp	.+26     	; 0x3756 <processSpeedCommand+0x5a>
    373c:	8c 81       	ldd	r24, Y+4	; 0x04
    373e:	9d 81       	ldd	r25, Y+5	; 0x05
    3740:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <getSpeed>
    3744:	08 c0       	rjmp	.+16     	; 0x3756 <processSpeedCommand+0x5a>
    3746:	ea 81       	ldd	r30, Y+2	; 0x02
    3748:	fb 81       	ldd	r31, Y+3	; 0x03
    374a:	80 81       	ld	r24, Z
    374c:	99 27       	eor	r25, r25
    374e:	87 fd       	sbrc	r24, 7
    3750:	90 95       	com	r25
    3752:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <setSpeed>
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	27 96       	adiw	r28, 0x07	; 7
    375a:	0f b6       	in	r0, 0x3f	; 63
    375c:	f8 94       	cli
    375e:	de bf       	out	0x3e, r29	; 62
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	cd bf       	out	0x3d, r28	; 61
    3764:	cf 91       	pop	r28
    3766:	df 91       	pop	r29
    3768:	08 95       	ret

0000376a <processSteeringCommand>:
    376a:	df 93       	push	r29
    376c:	cf 93       	push	r28
    376e:	cd b7       	in	r28, 0x3d	; 61
    3770:	de b7       	in	r29, 0x3e	; 62
    3772:	27 97       	sbiw	r28, 0x07	; 7
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	cd bf       	out	0x3d, r28	; 61
    377e:	89 83       	std	Y+1, r24	; 0x01
    3780:	7b 83       	std	Y+3, r23	; 0x03
    3782:	6a 83       	std	Y+2, r22	; 0x02
    3784:	5d 83       	std	Y+5, r21	; 0x05
    3786:	4c 83       	std	Y+4, r20	; 0x04
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	28 2f       	mov	r18, r24
    378c:	33 27       	eor	r19, r19
    378e:	27 fd       	sbrc	r18, 7
    3790:	30 95       	com	r19
    3792:	3f 83       	std	Y+7, r19	; 0x07
    3794:	2e 83       	std	Y+6, r18	; 0x06
    3796:	8e 81       	ldd	r24, Y+6	; 0x06
    3798:	9f 81       	ldd	r25, Y+7	; 0x07
    379a:	82 30       	cpi	r24, 0x02	; 2
    379c:	91 05       	cpc	r25, r1
    379e:	41 f1       	breq	.+80     	; 0x37f0 <processSteeringCommand+0x86>
    37a0:	2e 81       	ldd	r18, Y+6	; 0x06
    37a2:	3f 81       	ldd	r19, Y+7	; 0x07
    37a4:	23 30       	cpi	r18, 0x03	; 3
    37a6:	31 05       	cpc	r19, r1
    37a8:	54 f4       	brge	.+20     	; 0x37be <processSteeringCommand+0x54>
    37aa:	8e 81       	ldd	r24, Y+6	; 0x06
    37ac:	9f 81       	ldd	r25, Y+7	; 0x07
    37ae:	00 97       	sbiw	r24, 0x00	; 0
    37b0:	89 f0       	breq	.+34     	; 0x37d4 <processSteeringCommand+0x6a>
    37b2:	2e 81       	ldd	r18, Y+6	; 0x06
    37b4:	3f 81       	ldd	r19, Y+7	; 0x07
    37b6:	21 30       	cpi	r18, 0x01	; 1
    37b8:	31 05       	cpc	r19, r1
    37ba:	a9 f0       	breq	.+42     	; 0x37e6 <processSteeringCommand+0x7c>
    37bc:	51 c0       	rjmp	.+162    	; 0x3860 <processSteeringCommand+0xf6>
    37be:	8e 81       	ldd	r24, Y+6	; 0x06
    37c0:	9f 81       	ldd	r25, Y+7	; 0x07
    37c2:	83 30       	cpi	r24, 0x03	; 3
    37c4:	91 05       	cpc	r25, r1
    37c6:	c9 f0       	breq	.+50     	; 0x37fa <processSteeringCommand+0x90>
    37c8:	2e 81       	ldd	r18, Y+6	; 0x06
    37ca:	3f 81       	ldd	r19, Y+7	; 0x07
    37cc:	24 30       	cpi	r18, 0x04	; 4
    37ce:	31 05       	cpc	r19, r1
    37d0:	99 f1       	breq	.+102    	; 0x3838 <processSteeringCommand+0xce>
    37d2:	46 c0       	rjmp	.+140    	; 0x3860 <processSteeringCommand+0xf6>
    37d4:	ea 81       	ldd	r30, Y+2	; 0x02
    37d6:	fb 81       	ldd	r31, Y+3	; 0x03
    37d8:	80 81       	ld	r24, Z
    37da:	99 27       	eor	r25, r25
    37dc:	87 fd       	sbrc	r24, 7
    37de:	90 95       	com	r25
    37e0:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <setAngle>
    37e4:	3d c0       	rjmp	.+122    	; 0x3860 <processSteeringCommand+0xf6>
    37e6:	8c 81       	ldd	r24, Y+4	; 0x04
    37e8:	9d 81       	ldd	r25, Y+5	; 0x05
    37ea:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <getAngle>
    37ee:	38 c0       	rjmp	.+112    	; 0x3860 <processSteeringCommand+0xf6>
    37f0:	8c 81       	ldd	r24, Y+4	; 0x04
    37f2:	9d 81       	ldd	r25, Y+5	; 0x05
    37f4:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <getDesiredAngle>
    37f8:	33 c0       	rjmp	.+102    	; 0x3860 <processSteeringCommand+0xf6>
    37fa:	ea 81       	ldd	r30, Y+2	; 0x02
    37fc:	fb 81       	ldd	r31, Y+3	; 0x03
    37fe:	80 81       	ld	r24, Z
    3800:	68 2f       	mov	r22, r24
    3802:	77 27       	eor	r23, r23
    3804:	67 fd       	sbrc	r22, 7
    3806:	70 95       	com	r23
    3808:	8a 81       	ldd	r24, Y+2	; 0x02
    380a:	9b 81       	ldd	r25, Y+3	; 0x03
    380c:	fc 01       	movw	r30, r24
    380e:	31 96       	adiw	r30, 0x01	; 1
    3810:	80 81       	ld	r24, Z
    3812:	48 2f       	mov	r20, r24
    3814:	55 27       	eor	r21, r21
    3816:	47 fd       	sbrc	r20, 7
    3818:	50 95       	com	r21
    381a:	8a 81       	ldd	r24, Y+2	; 0x02
    381c:	9b 81       	ldd	r25, Y+3	; 0x03
    381e:	fc 01       	movw	r30, r24
    3820:	32 96       	adiw	r30, 0x02	; 2
    3822:	80 81       	ld	r24, Z
    3824:	28 2f       	mov	r18, r24
    3826:	33 27       	eor	r19, r19
    3828:	27 fd       	sbrc	r18, 7
    382a:	30 95       	com	r19
    382c:	cb 01       	movw	r24, r22
    382e:	ba 01       	movw	r22, r20
    3830:	a9 01       	movw	r20, r18
    3832:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <changePID>
    3836:	14 c0       	rjmp	.+40     	; 0x3860 <processSteeringCommand+0xf6>
    3838:	ea 81       	ldd	r30, Y+2	; 0x02
    383a:	fb 81       	ldd	r31, Y+3	; 0x03
    383c:	80 81       	ld	r24, Z
    383e:	48 2f       	mov	r20, r24
    3840:	55 27       	eor	r21, r21
    3842:	47 fd       	sbrc	r20, 7
    3844:	50 95       	com	r21
    3846:	8a 81       	ldd	r24, Y+2	; 0x02
    3848:	9b 81       	ldd	r25, Y+3	; 0x03
    384a:	fc 01       	movw	r30, r24
    384c:	31 96       	adiw	r30, 0x01	; 1
    384e:	80 81       	ld	r24, Z
    3850:	28 2f       	mov	r18, r24
    3852:	33 27       	eor	r19, r19
    3854:	27 fd       	sbrc	r18, 7
    3856:	30 95       	com	r19
    3858:	ca 01       	movw	r24, r20
    385a:	b9 01       	movw	r22, r18
    385c:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <setLimits>
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	27 96       	adiw	r28, 0x07	; 7
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <processFNRCommand>:
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	28 97       	sbiw	r28, 0x08	; 8
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	f8 94       	cli
    3882:	de bf       	out	0x3e, r29	; 62
    3884:	0f be       	out	0x3f, r0	; 63
    3886:	cd bf       	out	0x3d, r28	; 61
    3888:	89 83       	std	Y+1, r24	; 0x01
    388a:	7b 83       	std	Y+3, r23	; 0x03
    388c:	6a 83       	std	Y+2, r22	; 0x02
    388e:	5d 83       	std	Y+5, r21	; 0x05
    3890:	4c 83       	std	Y+4, r20	; 0x04
    3892:	89 81       	ldd	r24, Y+1	; 0x01
    3894:	28 2f       	mov	r18, r24
    3896:	33 27       	eor	r19, r19
    3898:	27 fd       	sbrc	r18, 7
    389a:	30 95       	com	r19
    389c:	3f 83       	std	Y+7, r19	; 0x07
    389e:	2e 83       	std	Y+6, r18	; 0x06
    38a0:	8e 81       	ldd	r24, Y+6	; 0x06
    38a2:	9f 81       	ldd	r25, Y+7	; 0x07
    38a4:	00 97       	sbiw	r24, 0x00	; 0
    38a6:	31 f0       	breq	.+12     	; 0x38b4 <processFNRCommand+0x40>
    38a8:	2e 81       	ldd	r18, Y+6	; 0x06
    38aa:	3f 81       	ldd	r19, Y+7	; 0x07
    38ac:	21 30       	cpi	r18, 0x01	; 1
    38ae:	31 05       	cpc	r19, r1
    38b0:	51 f0       	breq	.+20     	; 0x38c6 <processFNRCommand+0x52>
    38b2:	0d c0       	rjmp	.+26     	; 0x38ce <processFNRCommand+0x5a>
    38b4:	ea 81       	ldd	r30, Y+2	; 0x02
    38b6:	fb 81       	ldd	r31, Y+3	; 0x03
    38b8:	80 81       	ld	r24, Z
    38ba:	99 27       	eor	r25, r25
    38bc:	87 fd       	sbrc	r24, 7
    38be:	90 95       	com	r25
    38c0:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <setFNR>
    38c4:	04 c0       	rjmp	.+8      	; 0x38ce <processFNRCommand+0x5a>
    38c6:	8c 81       	ldd	r24, Y+4	; 0x04
    38c8:	9d 81       	ldd	r25, Y+5	; 0x05
    38ca:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <getFNR>
    38ce:	28 96       	adiw	r28, 0x08	; 8
    38d0:	0f b6       	in	r0, 0x3f	; 63
    38d2:	f8 94       	cli
    38d4:	de bf       	out	0x3e, r29	; 62
    38d6:	0f be       	out	0x3f, r0	; 63
    38d8:	cd bf       	out	0x3d, r28	; 61
    38da:	cf 91       	pop	r28
    38dc:	df 91       	pop	r29
    38de:	08 95       	ret

000038e0 <processBrakeCommand>:
    38e0:	df 93       	push	r29
    38e2:	cf 93       	push	r28
    38e4:	cd b7       	in	r28, 0x3d	; 61
    38e6:	de b7       	in	r29, 0x3e	; 62
    38e8:	28 97       	sbiw	r28, 0x08	; 8
    38ea:	0f b6       	in	r0, 0x3f	; 63
    38ec:	f8 94       	cli
    38ee:	de bf       	out	0x3e, r29	; 62
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	cd bf       	out	0x3d, r28	; 61
    38f4:	89 83       	std	Y+1, r24	; 0x01
    38f6:	7b 83       	std	Y+3, r23	; 0x03
    38f8:	6a 83       	std	Y+2, r22	; 0x02
    38fa:	5d 83       	std	Y+5, r21	; 0x05
    38fc:	4c 83       	std	Y+4, r20	; 0x04
    38fe:	89 81       	ldd	r24, Y+1	; 0x01
    3900:	28 2f       	mov	r18, r24
    3902:	33 27       	eor	r19, r19
    3904:	27 fd       	sbrc	r18, 7
    3906:	30 95       	com	r19
    3908:	3f 83       	std	Y+7, r19	; 0x07
    390a:	2e 83       	std	Y+6, r18	; 0x06
    390c:	8e 81       	ldd	r24, Y+6	; 0x06
    390e:	9f 81       	ldd	r25, Y+7	; 0x07
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	31 f0       	breq	.+12     	; 0x3920 <processBrakeCommand+0x40>
    3914:	2e 81       	ldd	r18, Y+6	; 0x06
    3916:	3f 81       	ldd	r19, Y+7	; 0x07
    3918:	21 30       	cpi	r18, 0x01	; 1
    391a:	31 05       	cpc	r19, r1
    391c:	51 f0       	breq	.+20     	; 0x3932 <processBrakeCommand+0x52>
    391e:	0d c0       	rjmp	.+26     	; 0x393a <processBrakeCommand+0x5a>
    3920:	ea 81       	ldd	r30, Y+2	; 0x02
    3922:	fb 81       	ldd	r31, Y+3	; 0x03
    3924:	80 81       	ld	r24, Z
    3926:	99 27       	eor	r25, r25
    3928:	87 fd       	sbrc	r24, 7
    392a:	90 95       	com	r25
    392c:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <setBrake>
    3930:	04 c0       	rjmp	.+8      	; 0x393a <processBrakeCommand+0x5a>
    3932:	8c 81       	ldd	r24, Y+4	; 0x04
    3934:	9d 81       	ldd	r25, Y+5	; 0x05
    3936:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <getBrake>
    393a:	28 96       	adiw	r28, 0x08	; 8
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	f8 94       	cli
    3940:	de bf       	out	0x3e, r29	; 62
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	cd bf       	out	0x3d, r28	; 61
    3946:	cf 91       	pop	r28
    3948:	df 91       	pop	r29
    394a:	08 95       	ret

0000394c <processBatteryCommand>:
    394c:	df 93       	push	r29
    394e:	cf 93       	push	r28
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
    3954:	28 97       	sbiw	r28, 0x08	; 8
    3956:	0f b6       	in	r0, 0x3f	; 63
    3958:	f8 94       	cli
    395a:	de bf       	out	0x3e, r29	; 62
    395c:	0f be       	out	0x3f, r0	; 63
    395e:	cd bf       	out	0x3d, r28	; 61
    3960:	89 83       	std	Y+1, r24	; 0x01
    3962:	7b 83       	std	Y+3, r23	; 0x03
    3964:	6a 83       	std	Y+2, r22	; 0x02
    3966:	5d 83       	std	Y+5, r21	; 0x05
    3968:	4c 83       	std	Y+4, r20	; 0x04
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	28 2f       	mov	r18, r24
    396e:	33 27       	eor	r19, r19
    3970:	27 fd       	sbrc	r18, 7
    3972:	30 95       	com	r19
    3974:	3f 83       	std	Y+7, r19	; 0x07
    3976:	2e 83       	std	Y+6, r18	; 0x06
    3978:	8e 81       	ldd	r24, Y+6	; 0x06
    397a:	9f 81       	ldd	r25, Y+7	; 0x07
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	31 f0       	breq	.+12     	; 0x398c <processBatteryCommand+0x40>
    3980:	2e 81       	ldd	r18, Y+6	; 0x06
    3982:	3f 81       	ldd	r19, Y+7	; 0x07
    3984:	21 30       	cpi	r18, 0x01	; 1
    3986:	31 05       	cpc	r19, r1
    3988:	31 f0       	breq	.+12     	; 0x3996 <processBatteryCommand+0x4a>
    398a:	09 c0       	rjmp	.+18     	; 0x399e <processBatteryCommand+0x52>
    398c:	8c 81       	ldd	r24, Y+4	; 0x04
    398e:	9d 81       	ldd	r25, Y+5	; 0x05
    3990:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <getBatteryVoltage>
    3994:	04 c0       	rjmp	.+8      	; 0x399e <processBatteryCommand+0x52>
    3996:	8c 81       	ldd	r24, Y+4	; 0x04
    3998:	9d 81       	ldd	r25, Y+5	; 0x05
    399a:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <getSteeringVoltage>
    399e:	28 96       	adiw	r28, 0x08	; 8
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	f8 94       	cli
    39a4:	de bf       	out	0x3e, r29	; 62
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	cd bf       	out	0x3d, r28	; 61
    39aa:	cf 91       	pop	r28
    39ac:	df 91       	pop	r29
    39ae:	08 95       	ret

000039b0 <processLightCommand>:
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	00 d0       	rcall	.+0      	; 0x39b6 <processLightCommand+0x6>
    39b6:	00 d0       	rcall	.+0      	; 0x39b8 <processLightCommand+0x8>
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	89 83       	std	Y+1, r24	; 0x01
    39be:	7b 83       	std	Y+3, r23	; 0x03
    39c0:	6a 83       	std	Y+2, r22	; 0x02
    39c2:	5d 83       	std	Y+5, r21	; 0x05
    39c4:	4c 83       	std	Y+4, r20	; 0x04
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	99 27       	eor	r25, r25
    39ca:	87 fd       	sbrc	r24, 7
    39cc:	90 95       	com	r25
    39ce:	00 97       	sbiw	r24, 0x00	; 0
    39d0:	41 f4       	brne	.+16     	; 0x39e2 <processLightCommand+0x32>
    39d2:	ea 81       	ldd	r30, Y+2	; 0x02
    39d4:	fb 81       	ldd	r31, Y+3	; 0x03
    39d6:	80 81       	ld	r24, Z
    39d8:	99 27       	eor	r25, r25
    39da:	87 fd       	sbrc	r24, 7
    39dc:	90 95       	com	r25
    39de:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <setLight>
    39e2:	26 96       	adiw	r28, 0x06	; 6
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	de bf       	out	0x3e, r29	; 62
    39ea:	0f be       	out	0x3f, r0	; 63
    39ec:	cd bf       	out	0x3d, r28	; 61
    39ee:	cf 91       	pop	r28
    39f0:	df 91       	pop	r29
    39f2:	08 95       	ret

000039f4 <processCommand>:
    39f4:	df 93       	push	r29
    39f6:	cf 93       	push	r28
    39f8:	00 d0       	rcall	.+0      	; 0x39fa <processCommand+0x6>
    39fa:	0f 92       	push	r0
    39fc:	0f 92       	push	r0
    39fe:	cd b7       	in	r28, 0x3d	; 61
    3a00:	de b7       	in	r29, 0x3e	; 62
    3a02:	9a 83       	std	Y+2, r25	; 0x02
    3a04:	89 83       	std	Y+1, r24	; 0x01
    3a06:	7c 83       	std	Y+4, r23	; 0x04
    3a08:	6b 83       	std	Y+3, r22	; 0x03
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0e:	0e 94 25 1b 	call	0x364a	; 0x364a <commandIntegCheck>
    3a12:	88 23       	and	r24, r24
    3a14:	09 f1       	breq	.+66     	; 0x3a58 <processCommand+0x64>
    3a16:	e9 81       	ldd	r30, Y+1	; 0x01
    3a18:	fa 81       	ldd	r31, Y+2	; 0x02
    3a1a:	80 81       	ld	r24, Z
    3a1c:	99 27       	eor	r25, r25
    3a1e:	87 fd       	sbrc	r24, 7
    3a20:	90 95       	com	r25
    3a22:	81 30       	cpi	r24, 0x01	; 1
    3a24:	91 05       	cpc	r25, r1
    3a26:	a9 f4       	brne	.+42     	; 0x3a52 <processCommand+0x5e>
    3a28:	e9 81       	ldd	r30, Y+1	; 0x01
    3a2a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a2c:	e1 81       	ldd	r30, Z+1	; 0x01
    3a2e:	89 81       	ldd	r24, Y+1	; 0x01
    3a30:	9a 81       	ldd	r25, Y+2	; 0x02
    3a32:	bc 01       	movw	r22, r24
    3a34:	6d 5f       	subi	r22, 0xFD	; 253
    3a36:	7f 4f       	sbci	r23, 0xFF	; 255
    3a38:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3c:	ac 01       	movw	r20, r24
    3a3e:	4f 5f       	subi	r20, 0xFF	; 255
    3a40:	5f 4f       	sbci	r21, 0xFF	; 255
    3a42:	8b 81       	ldd	r24, Y+3	; 0x03
    3a44:	9c 81       	ldd	r25, Y+4	; 0x04
    3a46:	9c 01       	movw	r18, r24
    3a48:	2e 5f       	subi	r18, 0xFE	; 254
    3a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a4c:	8e 2f       	mov	r24, r30
    3a4e:	0e 94 33 1b 	call	0x3666	; 0x3666 <processUltrasonicCommand>
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	8d 83       	std	Y+5, r24	; 0x05
    3a56:	01 c0       	rjmp	.+2      	; 0x3a5a <processCommand+0x66>
    3a58:	1d 82       	std	Y+5, r1	; 0x05
    3a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5c:	0f 90       	pop	r0
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	cf 91       	pop	r28
    3a68:	df 91       	pop	r29
    3a6a:	08 95       	ret

00003a6c <getBatteryVoltage>:
    3a6c:	df 93       	push	r29
    3a6e:	cf 93       	push	r28
    3a70:	0f 92       	push	r0
    3a72:	0f 92       	push	r0
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
    3a78:	9a 83       	std	Y+2, r25	; 0x02
    3a7a:	89 83       	std	Y+1, r24	; 0x01
    3a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a80:	10 82       	st	Z, r1
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	0f 90       	pop	r0
    3a86:	0f 90       	pop	r0
    3a88:	cf 91       	pop	r28
    3a8a:	df 91       	pop	r29
    3a8c:	08 95       	ret

00003a8e <getSteeringVoltage>:
    3a8e:	df 93       	push	r29
    3a90:	cf 93       	push	r28
    3a92:	0f 92       	push	r0
    3a94:	0f 92       	push	r0
    3a96:	cd b7       	in	r28, 0x3d	; 61
    3a98:	de b7       	in	r29, 0x3e	; 62
    3a9a:	9a 83       	std	Y+2, r25	; 0x02
    3a9c:	89 83       	std	Y+1, r24	; 0x01
    3a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    3aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    3aa2:	10 82       	st	Z, r1
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	cf 91       	pop	r28
    3aac:	df 91       	pop	r29
    3aae:	08 95       	ret

00003ab0 <setBrake>:
    3ab0:	df 93       	push	r29
    3ab2:	cf 93       	push	r28
    3ab4:	0f 92       	push	r0
    3ab6:	cd b7       	in	r28, 0x3d	; 61
    3ab8:	de b7       	in	r29, 0x3e	; 62
    3aba:	89 83       	std	Y+1, r24	; 0x01
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	0f 90       	pop	r0
    3ac0:	cf 91       	pop	r28
    3ac2:	df 91       	pop	r29
    3ac4:	08 95       	ret

00003ac6 <getBrake>:
    3ac6:	df 93       	push	r29
    3ac8:	cf 93       	push	r28
    3aca:	0f 92       	push	r0
    3acc:	0f 92       	push	r0
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
    3ad2:	9a 83       	std	Y+2, r25	; 0x02
    3ad4:	89 83       	std	Y+1, r24	; 0x01
    3ad6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ad8:	fa 81       	ldd	r31, Y+2	; 0x02
    3ada:	10 82       	st	Z, r1
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	0f 90       	pop	r0
    3ae0:	0f 90       	pop	r0
    3ae2:	cf 91       	pop	r28
    3ae4:	df 91       	pop	r29
    3ae6:	08 95       	ret

00003ae8 <setFNR>:
    3ae8:	df 93       	push	r29
    3aea:	cf 93       	push	r28
    3aec:	0f 92       	push	r0
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
    3af2:	89 83       	std	Y+1, r24	; 0x01
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	0f 90       	pop	r0
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <getFNR>:
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	0f 92       	push	r0
    3b04:	0f 92       	push	r0
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	9a 83       	std	Y+2, r25	; 0x02
    3b0c:	89 83       	std	Y+1, r24	; 0x01
    3b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b10:	fa 81       	ldd	r31, Y+2	; 0x02
    3b12:	10 82       	st	Z, r1
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	0f 90       	pop	r0
    3b18:	0f 90       	pop	r0
    3b1a:	cf 91       	pop	r28
    3b1c:	df 91       	pop	r29
    3b1e:	08 95       	ret

00003b20 <setLight>:
    3b20:	df 93       	push	r29
    3b22:	cf 93       	push	r28
    3b24:	0f 92       	push	r0
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	89 83       	std	Y+1, r24	; 0x01
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	0f 90       	pop	r0
    3b30:	cf 91       	pop	r28
    3b32:	df 91       	pop	r29
    3b34:	08 95       	ret

00003b36 <setSonarData>:
    3b36:	df 93       	push	r29
    3b38:	cf 93       	push	r28
    3b3a:	00 d0       	rcall	.+0      	; 0x3b3c <setSonarData+0x6>
    3b3c:	cd b7       	in	r28, 0x3d	; 61
    3b3e:	de b7       	in	r29, 0x3e	; 62
    3b40:	9a 83       	std	Y+2, r25	; 0x02
    3b42:	89 83       	std	Y+1, r24	; 0x01
    3b44:	6b 83       	std	Y+3, r22	; 0x03
    3b46:	89 81       	ldd	r24, Y+1	; 0x01
    3b48:	9a 81       	ldd	r25, Y+2	; 0x02
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	ec 53       	subi	r30, 0x3C	; 60
    3b4e:	f5 4e       	sbci	r31, 0xE5	; 229
    3b50:	8b 81       	ldd	r24, Y+3	; 0x03
    3b52:	80 83       	st	Z, r24
    3b54:	0f 90       	pop	r0
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	cf 91       	pop	r28
    3b5c:	df 91       	pop	r29
    3b5e:	08 95       	ret

00003b60 <getSonarData>:
    3b60:	df 93       	push	r29
    3b62:	cf 93       	push	r28
    3b64:	0f 92       	push	r0
    3b66:	0f 92       	push	r0
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    3b6c:	9a 83       	std	Y+2, r25	; 0x02
    3b6e:	89 83       	std	Y+1, r24	; 0x01
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
    3b72:	8e 5f       	subi	r24, 0xFE	; 254
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	cf 91       	pop	r28
    3b7a:	df 91       	pop	r29
    3b7c:	08 95       	ret

00003b7e <getTimerCount>:
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
    3b86:	e6 e4       	ldi	r30, 0x46	; 70
    3b88:	f0 e0       	ldi	r31, 0x00	; 0
    3b8a:	80 81       	ld	r24, Z
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <__vector_11>:
    3b92:	1f 92       	push	r1
    3b94:	0f 92       	push	r0
    3b96:	0f b6       	in	r0, 0x3f	; 63
    3b98:	0f 92       	push	r0
    3b9a:	00 90 5b 00 	lds	r0, 0x005B
    3b9e:	0f 92       	push	r0
    3ba0:	11 24       	eor	r1, r1
    3ba2:	2f 93       	push	r18
    3ba4:	3f 93       	push	r19
    3ba6:	4f 93       	push	r20
    3ba8:	5f 93       	push	r21
    3baa:	6f 93       	push	r22
    3bac:	7f 93       	push	r23
    3bae:	8f 93       	push	r24
    3bb0:	9f 93       	push	r25
    3bb2:	af 93       	push	r26
    3bb4:	bf 93       	push	r27
    3bb6:	ef 93       	push	r30
    3bb8:	ff 93       	push	r31
    3bba:	df 93       	push	r29
    3bbc:	cf 93       	push	r28
    3bbe:	00 d0       	rcall	.+0      	; 0x3bc0 <__vector_11+0x2e>
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
    3bc4:	19 82       	std	Y+1, r1	; 0x01
    3bc6:	e6 e0       	ldi	r30, 0x06	; 6
    3bc8:	f1 e0       	ldi	r31, 0x01	; 1
    3bca:	80 81       	ld	r24, Z
    3bcc:	28 2f       	mov	r18, r24
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	80 91 d8 1a 	lds	r24, 0x1AD8
    3bd4:	88 2f       	mov	r24, r24
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	a9 01       	movw	r20, r18
    3bda:	02 c0       	rjmp	.+4      	; 0x3be0 <__vector_11+0x4e>
    3bdc:	55 95       	asr	r21
    3bde:	47 95       	ror	r20
    3be0:	8a 95       	dec	r24
    3be2:	e2 f7       	brpl	.-8      	; 0x3bdc <__vector_11+0x4a>
    3be4:	ca 01       	movw	r24, r20
    3be6:	81 70       	andi	r24, 0x01	; 1
    3be8:	90 70       	andi	r25, 0x00	; 0
    3bea:	88 23       	and	r24, r24
    3bec:	41 f0       	breq	.+16     	; 0x3bfe <__vector_11+0x6c>
    3bee:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <getTimerCount>
    3bf2:	8b 83       	std	Y+3, r24	; 0x03
    3bf4:	ee e2       	ldi	r30, 0x2E	; 46
    3bf6:	f0 e0       	ldi	r31, 0x00	; 0
    3bf8:	8f ef       	ldi	r24, 0xFF	; 255
    3bfa:	80 83       	st	Z, r24
    3bfc:	1a c0       	rjmp	.+52     	; 0x3c32 <__vector_11+0xa0>
    3bfe:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <getTimerCount>
    3c02:	8a 83       	std	Y+2, r24	; 0x02
    3c04:	9a 81       	ldd	r25, Y+2	; 0x02
    3c06:	8b 81       	ldd	r24, Y+3	; 0x03
    3c08:	89 17       	cp	r24, r25
    3c0a:	28 f4       	brcc	.+10     	; 0x3c16 <__vector_11+0x84>
    3c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c10:	89 1b       	sub	r24, r25
    3c12:	80 93 bb 1a 	sts	0x1ABB, r24
    3c16:	ee e2       	ldi	r30, 0x2E	; 46
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	10 82       	st	Z, r1
    3c1c:	80 91 ca 1a 	lds	r24, 0x1ACA
    3c20:	90 91 cb 1a 	lds	r25, 0x1ACB
    3c24:	60 e0       	ldi	r22, 0x00	; 0
    3c26:	70 e0       	ldi	r23, 0x00	; 0
    3c28:	40 e0       	ldi	r20, 0x00	; 0
    3c2a:	50 e0       	ldi	r21, 0x00	; 0
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xQueueGenericSendFromISR>
    3c32:	0f 90       	pop	r0
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	cf 91       	pop	r28
    3c3a:	df 91       	pop	r29
    3c3c:	ff 91       	pop	r31
    3c3e:	ef 91       	pop	r30
    3c40:	bf 91       	pop	r27
    3c42:	af 91       	pop	r26
    3c44:	9f 91       	pop	r25
    3c46:	8f 91       	pop	r24
    3c48:	7f 91       	pop	r23
    3c4a:	6f 91       	pop	r22
    3c4c:	5f 91       	pop	r21
    3c4e:	4f 91       	pop	r20
    3c50:	3f 91       	pop	r19
    3c52:	2f 91       	pop	r18
    3c54:	0f 90       	pop	r0
    3c56:	00 92 5b 00 	sts	0x005B, r0
    3c5a:	0f 90       	pop	r0
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	0f 90       	pop	r0
    3c60:	1f 90       	pop	r1
    3c62:	18 95       	reti

00003c64 <initializeSonarSensors>:
    3c64:	df 93       	push	r29
    3c66:	cf 93       	push	r28
    3c68:	cd b7       	in	r28, 0x3d	; 61
    3c6a:	de b7       	in	r29, 0x3e	; 62
    3c6c:	ed e7       	ldi	r30, 0x7D	; 125
    3c6e:	f0 e0       	ldi	r31, 0x00	; 0
    3c70:	10 82       	st	Z, r1
    3c72:	e7 e0       	ldi	r30, 0x07	; 7
    3c74:	f1 e0       	ldi	r31, 0x01	; 1
    3c76:	10 82       	st	Z, r1
    3c78:	e7 e2       	ldi	r30, 0x27	; 39
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	10 82       	st	Z, r1
    3c7e:	e8 e2       	ldi	r30, 0x28	; 40
    3c80:	f0 e0       	ldi	r31, 0x00	; 0
    3c82:	10 82       	st	Z, r1
    3c84:	ed e6       	ldi	r30, 0x6D	; 109
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	8f ef       	ldi	r24, 0xFF	; 255
    3c8a:	80 83       	st	Z, r24
    3c8c:	e8 e6       	ldi	r30, 0x68	; 104
    3c8e:	f0 e0       	ldi	r31, 0x00	; 0
    3c90:	87 e0       	ldi	r24, 0x07	; 7
    3c92:	80 83       	st	Z, r24
    3c94:	e4 e4       	ldi	r30, 0x44	; 68
    3c96:	f0 e0       	ldi	r31, 0x00	; 0
    3c98:	10 82       	st	Z, r1
    3c9a:	e5 e4       	ldi	r30, 0x45	; 69
    3c9c:	f0 e0       	ldi	r31, 0x00	; 0
    3c9e:	85 e0       	ldi	r24, 0x05	; 5
    3ca0:	80 83       	st	Z, r24
    3ca2:	cf 91       	pop	r28
    3ca4:	df 91       	pop	r29
    3ca6:	08 95       	ret

00003ca8 <vTaskSonar>:
    3ca8:	df 93       	push	r29
    3caa:	cf 93       	push	r28
    3cac:	00 d0       	rcall	.+0      	; 0x3cae <vTaskSonar+0x6>
    3cae:	0f 92       	push	r0
    3cb0:	cd b7       	in	r28, 0x3d	; 61
    3cb2:	de b7       	in	r29, 0x3e	; 62
    3cb4:	9c 83       	std	Y+4, r25	; 0x04
    3cb6:	8b 83       	std	Y+3, r24	; 0x03
    3cb8:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <initializeSonarSensors>
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	60 e0       	ldi	r22, 0x00	; 0
    3cc0:	43 e0       	ldi	r20, 0x03	; 3
    3cc2:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <xQueueGenericCreate>
    3cc6:	90 93 cb 1a 	sts	0x1ACB, r25
    3cca:	80 93 ca 1a 	sts	0x1ACA, r24
    3cce:	80 91 ca 1a 	lds	r24, 0x1ACA
    3cd2:	90 91 cb 1a 	lds	r25, 0x1ACB
    3cd6:	00 97       	sbiw	r24, 0x00	; 0
    3cd8:	59 f0       	breq	.+22     	; 0x3cf0 <vTaskSonar+0x48>
    3cda:	80 91 ca 1a 	lds	r24, 0x1ACA
    3cde:	90 91 cb 1a 	lds	r25, 0x1ACB
    3ce2:	60 e0       	ldi	r22, 0x00	; 0
    3ce4:	70 e0       	ldi	r23, 0x00	; 0
    3ce6:	40 e0       	ldi	r20, 0x00	; 0
    3ce8:	50 e0       	ldi	r21, 0x00	; 0
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	0e 94 9f 0c 	call	0x193e	; 0x193e <xQueueGenericSend>
    3cf0:	10 92 d8 1a 	sts	0x1AD8, r1
    3cf4:	1a 82       	std	Y+2, r1	; 0x02
    3cf6:	19 82       	std	Y+1, r1	; 0x01
    3cf8:	25 c0       	rjmp	.+74     	; 0x3d44 <vTaskSonar+0x9c>
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	80 93 d8 1a 	sts	0x1AD8, r24
    3d00:	e8 e2       	ldi	r30, 0x28	; 40
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	09 80       	ldd	r0, Y+1	; 0x01
    3d0a:	02 c0       	rjmp	.+4      	; 0x3d10 <vTaskSonar+0x68>
    3d0c:	88 0f       	add	r24, r24
    3d0e:	99 1f       	adc	r25, r25
    3d10:	0a 94       	dec	r0
    3d12:	e2 f7       	brpl	.-8      	; 0x3d0c <vTaskSonar+0x64>
    3d14:	80 83       	st	Z, r24
    3d16:	80 91 ca 1a 	lds	r24, 0x1ACA
    3d1a:	90 91 cb 1a 	lds	r25, 0x1ACB
    3d1e:	60 e0       	ldi	r22, 0x00	; 0
    3d20:	70 e0       	ldi	r23, 0x00	; 0
    3d22:	4f ef       	ldi	r20, 0xFF	; 255
    3d24:	5f ef       	ldi	r21, 0xFF	; 255
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <xQueueGenericReceive>
    3d2c:	20 91 bb 1a 	lds	r18, 0x1ABB
    3d30:	89 81       	ldd	r24, Y+1	; 0x01
    3d32:	9a 81       	ldd	r25, Y+2	; 0x02
    3d34:	62 2f       	mov	r22, r18
    3d36:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <setSonarData>
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3e:	01 96       	adiw	r24, 0x01	; 1
    3d40:	9a 83       	std	Y+2, r25	; 0x02
    3d42:	89 83       	std	Y+1, r24	; 0x01
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	9a 81       	ldd	r25, Y+2	; 0x02
    3d48:	82 30       	cpi	r24, 0x02	; 2
    3d4a:	91 05       	cpc	r25, r1
    3d4c:	b4 f2       	brlt	.-84     	; 0x3cfa <vTaskSonar+0x52>
    3d4e:	d2 cf       	rjmp	.-92     	; 0x3cf4 <vTaskSonar+0x4c>

00003d50 <getAllSensors>:
    3d50:	0f 93       	push	r16
    3d52:	1f 93       	push	r17
    3d54:	df 93       	push	r29
    3d56:	cf 93       	push	r28
    3d58:	00 d0       	rcall	.+0      	; 0x3d5a <getAllSensors+0xa>
    3d5a:	0f 92       	push	r0
    3d5c:	0f 92       	push	r0
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
    3d62:	9c 83       	std	Y+4, r25	; 0x04
    3d64:	8b 83       	std	Y+3, r24	; 0x03
    3d66:	1a 82       	std	Y+2, r1	; 0x02
    3d68:	19 82       	std	Y+1, r1	; 0x01
    3d6a:	18 c0       	rjmp	.+48     	; 0x3d9c <getAllSensors+0x4c>
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d70:	9c 01       	movw	r18, r24
    3d72:	22 0f       	add	r18, r18
    3d74:	33 1f       	adc	r19, r19
    3d76:	8b 81       	ldd	r24, Y+3	; 0x03
    3d78:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7a:	8c 01       	movw	r16, r24
    3d7c:	02 0f       	add	r16, r18
    3d7e:	13 1f       	adc	r17, r19
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
    3d82:	9a 81       	ldd	r25, Y+2	; 0x02
    3d84:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <getSonarData>
    3d88:	88 2f       	mov	r24, r24
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	f8 01       	movw	r30, r16
    3d8e:	91 83       	std	Z+1, r25	; 0x01
    3d90:	80 83       	st	Z, r24
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	9a 81       	ldd	r25, Y+2	; 0x02
    3d96:	01 96       	adiw	r24, 0x01	; 1
    3d98:	9a 83       	std	Y+2, r25	; 0x02
    3d9a:	89 83       	std	Y+1, r24	; 0x01
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3da0:	86 30       	cpi	r24, 0x06	; 6
    3da2:	91 05       	cpc	r25, r1
    3da4:	18 f3       	brcs	.-58     	; 0x3d6c <getAllSensors+0x1c>
    3da6:	0f 90       	pop	r0
    3da8:	0f 90       	pop	r0
    3daa:	0f 90       	pop	r0
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	cf 91       	pop	r28
    3db2:	df 91       	pop	r29
    3db4:	1f 91       	pop	r17
    3db6:	0f 91       	pop	r16
    3db8:	08 95       	ret

00003dba <getCertainSensor>:
    3dba:	0f 93       	push	r16
    3dbc:	1f 93       	push	r17
    3dbe:	df 93       	push	r29
    3dc0:	cf 93       	push	r28
    3dc2:	00 d0       	rcall	.+0      	; 0x3dc4 <getCertainSensor+0xa>
    3dc4:	0f 92       	push	r0
    3dc6:	cd b7       	in	r28, 0x3d	; 61
    3dc8:	de b7       	in	r29, 0x3e	; 62
    3dca:	89 83       	std	Y+1, r24	; 0x01
    3dcc:	7b 83       	std	Y+3, r23	; 0x03
    3dce:	6a 83       	std	Y+2, r22	; 0x02
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	86 30       	cpi	r24, 0x06	; 6
    3dd4:	bc f4       	brge	.+46     	; 0x3e04 <getCertainSensor+0x4a>
    3dd6:	89 81       	ldd	r24, Y+1	; 0x01
    3dd8:	99 27       	eor	r25, r25
    3dda:	87 fd       	sbrc	r24, 7
    3ddc:	90 95       	com	r25
    3dde:	9c 01       	movw	r18, r24
    3de0:	22 0f       	add	r18, r18
    3de2:	33 1f       	adc	r19, r19
    3de4:	8a 81       	ldd	r24, Y+2	; 0x02
    3de6:	9b 81       	ldd	r25, Y+3	; 0x03
    3de8:	8c 01       	movw	r16, r24
    3dea:	02 0f       	add	r16, r18
    3dec:	13 1f       	adc	r17, r19
    3dee:	89 81       	ldd	r24, Y+1	; 0x01
    3df0:	99 27       	eor	r25, r25
    3df2:	87 fd       	sbrc	r24, 7
    3df4:	90 95       	com	r25
    3df6:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <getSonarData>
    3dfa:	88 2f       	mov	r24, r24
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	f8 01       	movw	r30, r16
    3e00:	91 83       	std	Z+1, r25	; 0x01
    3e02:	80 83       	st	Z, r24
    3e04:	0f 90       	pop	r0
    3e06:	0f 90       	pop	r0
    3e08:	0f 90       	pop	r0
    3e0a:	0f 90       	pop	r0
    3e0c:	cf 91       	pop	r28
    3e0e:	df 91       	pop	r29
    3e10:	1f 91       	pop	r17
    3e12:	0f 91       	pop	r16
    3e14:	08 95       	ret

00003e16 <getSensorGroup>:
    3e16:	0f 93       	push	r16
    3e18:	1f 93       	push	r17
    3e1a:	df 93       	push	r29
    3e1c:	cf 93       	push	r28
    3e1e:	00 d0       	rcall	.+0      	; 0x3e20 <getSensorGroup+0xa>
    3e20:	00 d0       	rcall	.+0      	; 0x3e22 <getSensorGroup+0xc>
    3e22:	cd b7       	in	r28, 0x3d	; 61
    3e24:	de b7       	in	r29, 0x3e	; 62
    3e26:	89 83       	std	Y+1, r24	; 0x01
    3e28:	7b 83       	std	Y+3, r23	; 0x03
    3e2a:	6a 83       	std	Y+2, r22	; 0x02
    3e2c:	89 81       	ldd	r24, Y+1	; 0x01
    3e2e:	28 2f       	mov	r18, r24
    3e30:	33 27       	eor	r19, r19
    3e32:	27 fd       	sbrc	r18, 7
    3e34:	30 95       	com	r19
    3e36:	3d 83       	std	Y+5, r19	; 0x05
    3e38:	2c 83       	std	Y+4, r18	; 0x04
    3e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e3e:	81 30       	cpi	r24, 0x01	; 1
    3e40:	91 05       	cpc	r25, r1
    3e42:	21 f1       	breq	.+72     	; 0x3e8c <getSensorGroup+0x76>
    3e44:	ec 81       	ldd	r30, Y+4	; 0x04
    3e46:	fd 81       	ldd	r31, Y+5	; 0x05
    3e48:	e2 30       	cpi	r30, 0x02	; 2
    3e4a:	f1 05       	cpc	r31, r1
    3e4c:	c1 f1       	breq	.+112    	; 0x3ebe <getSensorGroup+0xa8>
    3e4e:	2c 81       	ldd	r18, Y+4	; 0x04
    3e50:	3d 81       	ldd	r19, Y+5	; 0x05
    3e52:	21 15       	cp	r18, r1
    3e54:	31 05       	cpc	r19, r1
    3e56:	09 f0       	breq	.+2      	; 0x3e5a <getSensorGroup+0x44>
    3e58:	4a c0       	rjmp	.+148    	; 0x3eee <getSensorGroup+0xd8>
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <getSonarData>
    3e62:	88 2f       	mov	r24, r24
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	ea 81       	ldd	r30, Y+2	; 0x02
    3e68:	fb 81       	ldd	r31, Y+3	; 0x03
    3e6a:	91 83       	std	Z+1, r25	; 0x01
    3e6c:	80 83       	st	Z, r24
    3e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e70:	9b 81       	ldd	r25, Y+3	; 0x03
    3e72:	8c 01       	movw	r16, r24
    3e74:	0e 5f       	subi	r16, 0xFE	; 254
    3e76:	1f 4f       	sbci	r17, 0xFF	; 255
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <getSonarData>
    3e80:	88 2f       	mov	r24, r24
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	f8 01       	movw	r30, r16
    3e86:	91 83       	std	Z+1, r25	; 0x01
    3e88:	80 83       	st	Z, r24
    3e8a:	31 c0       	rjmp	.+98     	; 0x3eee <getSensorGroup+0xd8>
    3e8c:	82 e0       	ldi	r24, 0x02	; 2
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <getSonarData>
    3e94:	88 2f       	mov	r24, r24
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	ea 81       	ldd	r30, Y+2	; 0x02
    3e9a:	fb 81       	ldd	r31, Y+3	; 0x03
    3e9c:	91 83       	std	Z+1, r25	; 0x01
    3e9e:	80 83       	st	Z, r24
    3ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea4:	8c 01       	movw	r16, r24
    3ea6:	0e 5f       	subi	r16, 0xFE	; 254
    3ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eaa:	83 e0       	ldi	r24, 0x03	; 3
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <getSonarData>
    3eb2:	88 2f       	mov	r24, r24
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	f8 01       	movw	r30, r16
    3eb8:	91 83       	std	Z+1, r25	; 0x01
    3eba:	80 83       	st	Z, r24
    3ebc:	18 c0       	rjmp	.+48     	; 0x3eee <getSensorGroup+0xd8>
    3ebe:	84 e0       	ldi	r24, 0x04	; 4
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <getSonarData>
    3ec6:	88 2f       	mov	r24, r24
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	ea 81       	ldd	r30, Y+2	; 0x02
    3ecc:	fb 81       	ldd	r31, Y+3	; 0x03
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	80 83       	st	Z, r24
    3ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed6:	8c 01       	movw	r16, r24
    3ed8:	0e 5f       	subi	r16, 0xFE	; 254
    3eda:	1f 4f       	sbci	r17, 0xFF	; 255
    3edc:	85 e0       	ldi	r24, 0x05	; 5
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <getSonarData>
    3ee4:	88 2f       	mov	r24, r24
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	f8 01       	movw	r30, r16
    3eea:	91 83       	std	Z+1, r25	; 0x01
    3eec:	80 83       	st	Z, r24
    3eee:	26 96       	adiw	r28, 0x06	; 6
    3ef0:	0f b6       	in	r0, 0x3f	; 63
    3ef2:	f8 94       	cli
    3ef4:	de bf       	out	0x3e, r29	; 62
    3ef6:	0f be       	out	0x3f, r0	; 63
    3ef8:	cd bf       	out	0x3d, r28	; 61
    3efa:	cf 91       	pop	r28
    3efc:	df 91       	pop	r29
    3efe:	1f 91       	pop	r17
    3f00:	0f 91       	pop	r16
    3f02:	08 95       	ret

00003f04 <getSpeed>:
    3f04:	df 93       	push	r29
    3f06:	cf 93       	push	r28
    3f08:	0f 92       	push	r0
    3f0a:	0f 92       	push	r0
    3f0c:	cd b7       	in	r28, 0x3d	; 61
    3f0e:	de b7       	in	r29, 0x3e	; 62
    3f10:	9a 83       	std	Y+2, r25	; 0x02
    3f12:	89 83       	std	Y+1, r24	; 0x01
    3f14:	e9 81       	ldd	r30, Y+1	; 0x01
    3f16:	fa 81       	ldd	r31, Y+2	; 0x02
    3f18:	10 82       	st	Z, r1
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	0f 90       	pop	r0
    3f1e:	0f 90       	pop	r0
    3f20:	cf 91       	pop	r28
    3f22:	df 91       	pop	r29
    3f24:	08 95       	ret

00003f26 <setSpeed>:
    3f26:	df 93       	push	r29
    3f28:	cf 93       	push	r28
    3f2a:	0f 92       	push	r0
    3f2c:	cd b7       	in	r28, 0x3d	; 61
    3f2e:	de b7       	in	r29, 0x3e	; 62
    3f30:	89 83       	std	Y+1, r24	; 0x01
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	0f 90       	pop	r0
    3f36:	cf 91       	pop	r28
    3f38:	df 91       	pop	r29
    3f3a:	08 95       	ret

00003f3c <setAngle>:
    3f3c:	df 93       	push	r29
    3f3e:	cf 93       	push	r28
    3f40:	0f 92       	push	r0
    3f42:	cd b7       	in	r28, 0x3d	; 61
    3f44:	de b7       	in	r29, 0x3e	; 62
    3f46:	89 83       	std	Y+1, r24	; 0x01
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	0f 90       	pop	r0
    3f4c:	cf 91       	pop	r28
    3f4e:	df 91       	pop	r29
    3f50:	08 95       	ret

00003f52 <getAngle>:
    3f52:	df 93       	push	r29
    3f54:	cf 93       	push	r28
    3f56:	0f 92       	push	r0
    3f58:	0f 92       	push	r0
    3f5a:	cd b7       	in	r28, 0x3d	; 61
    3f5c:	de b7       	in	r29, 0x3e	; 62
    3f5e:	9a 83       	std	Y+2, r25	; 0x02
    3f60:	89 83       	std	Y+1, r24	; 0x01
    3f62:	e9 81       	ldd	r30, Y+1	; 0x01
    3f64:	fa 81       	ldd	r31, Y+2	; 0x02
    3f66:	10 82       	st	Z, r1
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	0f 90       	pop	r0
    3f6c:	0f 90       	pop	r0
    3f6e:	cf 91       	pop	r28
    3f70:	df 91       	pop	r29
    3f72:	08 95       	ret

00003f74 <getDesiredAngle>:
    3f74:	df 93       	push	r29
    3f76:	cf 93       	push	r28
    3f78:	0f 92       	push	r0
    3f7a:	0f 92       	push	r0
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
    3f80:	9a 83       	std	Y+2, r25	; 0x02
    3f82:	89 83       	std	Y+1, r24	; 0x01
    3f84:	e9 81       	ldd	r30, Y+1	; 0x01
    3f86:	fa 81       	ldd	r31, Y+2	; 0x02
    3f88:	10 82       	st	Z, r1
    3f8a:	81 e0       	ldi	r24, 0x01	; 1
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	cf 91       	pop	r28
    3f92:	df 91       	pop	r29
    3f94:	08 95       	ret

00003f96 <changePID>:
    3f96:	df 93       	push	r29
    3f98:	cf 93       	push	r28
    3f9a:	00 d0       	rcall	.+0      	; 0x3f9c <changePID+0x6>
    3f9c:	cd b7       	in	r28, 0x3d	; 61
    3f9e:	de b7       	in	r29, 0x3e	; 62
    3fa0:	89 83       	std	Y+1, r24	; 0x01
    3fa2:	6a 83       	std	Y+2, r22	; 0x02
    3fa4:	4b 83       	std	Y+3, r20	; 0x03
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	0f 90       	pop	r0
    3faa:	0f 90       	pop	r0
    3fac:	0f 90       	pop	r0
    3fae:	cf 91       	pop	r28
    3fb0:	df 91       	pop	r29
    3fb2:	08 95       	ret

00003fb4 <setLimits>:
    3fb4:	df 93       	push	r29
    3fb6:	cf 93       	push	r28
    3fb8:	0f 92       	push	r0
    3fba:	0f 92       	push	r0
    3fbc:	cd b7       	in	r28, 0x3d	; 61
    3fbe:	de b7       	in	r29, 0x3e	; 62
    3fc0:	89 83       	std	Y+1, r24	; 0x01
    3fc2:	6a 83       	std	Y+2, r22	; 0x02
    3fc4:	81 e0       	ldi	r24, 0x01	; 1
    3fc6:	0f 90       	pop	r0
    3fc8:	0f 90       	pop	r0
    3fca:	cf 91       	pop	r28
    3fcc:	df 91       	pop	r29
    3fce:	08 95       	ret

00003fd0 <__udivmodsi4>:
    3fd0:	a1 e2       	ldi	r26, 0x21	; 33
    3fd2:	1a 2e       	mov	r1, r26
    3fd4:	aa 1b       	sub	r26, r26
    3fd6:	bb 1b       	sub	r27, r27
    3fd8:	fd 01       	movw	r30, r26
    3fda:	0d c0       	rjmp	.+26     	; 0x3ff6 <__udivmodsi4_ep>

00003fdc <__udivmodsi4_loop>:
    3fdc:	aa 1f       	adc	r26, r26
    3fde:	bb 1f       	adc	r27, r27
    3fe0:	ee 1f       	adc	r30, r30
    3fe2:	ff 1f       	adc	r31, r31
    3fe4:	a2 17       	cp	r26, r18
    3fe6:	b3 07       	cpc	r27, r19
    3fe8:	e4 07       	cpc	r30, r20
    3fea:	f5 07       	cpc	r31, r21
    3fec:	20 f0       	brcs	.+8      	; 0x3ff6 <__udivmodsi4_ep>
    3fee:	a2 1b       	sub	r26, r18
    3ff0:	b3 0b       	sbc	r27, r19
    3ff2:	e4 0b       	sbc	r30, r20
    3ff4:	f5 0b       	sbc	r31, r21

00003ff6 <__udivmodsi4_ep>:
    3ff6:	66 1f       	adc	r22, r22
    3ff8:	77 1f       	adc	r23, r23
    3ffa:	88 1f       	adc	r24, r24
    3ffc:	99 1f       	adc	r25, r25
    3ffe:	1a 94       	dec	r1
    4000:	69 f7       	brne	.-38     	; 0x3fdc <__udivmodsi4_loop>
    4002:	60 95       	com	r22
    4004:	70 95       	com	r23
    4006:	80 95       	com	r24
    4008:	90 95       	com	r25
    400a:	9b 01       	movw	r18, r22
    400c:	ac 01       	movw	r20, r24
    400e:	bd 01       	movw	r22, r26
    4010:	cf 01       	movw	r24, r30
    4012:	08 95       	ret

00004014 <memcpy>:
    4014:	fb 01       	movw	r30, r22
    4016:	dc 01       	movw	r26, r24
    4018:	02 c0       	rjmp	.+4      	; 0x401e <memcpy+0xa>
    401a:	01 90       	ld	r0, Z+
    401c:	0d 92       	st	X+, r0
    401e:	41 50       	subi	r20, 0x01	; 1
    4020:	50 40       	sbci	r21, 0x00	; 0
    4022:	d8 f7       	brcc	.-10     	; 0x401a <memcpy+0x6>
    4024:	08 95       	ret

00004026 <memset>:
    4026:	dc 01       	movw	r26, r24
    4028:	01 c0       	rjmp	.+2      	; 0x402c <memset+0x6>
    402a:	6d 93       	st	X+, r22
    402c:	41 50       	subi	r20, 0x01	; 1
    402e:	50 40       	sbci	r21, 0x00	; 0
    4030:	e0 f7       	brcc	.-8      	; 0x402a <memset+0x4>
    4032:	08 95       	ret

00004034 <strncpy>:
    4034:	fb 01       	movw	r30, r22
    4036:	dc 01       	movw	r26, r24
    4038:	41 50       	subi	r20, 0x01	; 1
    403a:	50 40       	sbci	r21, 0x00	; 0
    403c:	48 f0       	brcs	.+18     	; 0x4050 <strncpy+0x1c>
    403e:	01 90       	ld	r0, Z+
    4040:	0d 92       	st	X+, r0
    4042:	00 20       	and	r0, r0
    4044:	c9 f7       	brne	.-14     	; 0x4038 <strncpy+0x4>
    4046:	01 c0       	rjmp	.+2      	; 0x404a <strncpy+0x16>
    4048:	1d 92       	st	X+, r1
    404a:	41 50       	subi	r20, 0x01	; 1
    404c:	50 40       	sbci	r21, 0x00	; 0
    404e:	e0 f7       	brcc	.-8      	; 0x4048 <strncpy+0x14>
    4050:	08 95       	ret

00004052 <itoa>:
    4052:	fb 01       	movw	r30, r22
    4054:	9f 01       	movw	r18, r30
    4056:	e8 94       	clt
    4058:	42 30       	cpi	r20, 0x02	; 2
    405a:	c4 f0       	brlt	.+48     	; 0x408c <itoa+0x3a>
    405c:	45 32       	cpi	r20, 0x25	; 37
    405e:	b4 f4       	brge	.+44     	; 0x408c <itoa+0x3a>
    4060:	4a 30       	cpi	r20, 0x0A	; 10
    4062:	29 f4       	brne	.+10     	; 0x406e <itoa+0x1c>
    4064:	97 fb       	bst	r25, 7
    4066:	1e f4       	brtc	.+6      	; 0x406e <itoa+0x1c>
    4068:	90 95       	com	r25
    406a:	81 95       	neg	r24
    406c:	9f 4f       	sbci	r25, 0xFF	; 255
    406e:	64 2f       	mov	r22, r20
    4070:	77 27       	eor	r23, r23
    4072:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <__udivmodhi4>
    4076:	80 5d       	subi	r24, 0xD0	; 208
    4078:	8a 33       	cpi	r24, 0x3A	; 58
    407a:	0c f0       	brlt	.+2      	; 0x407e <itoa+0x2c>
    407c:	89 5d       	subi	r24, 0xD9	; 217
    407e:	81 93       	st	Z+, r24
    4080:	cb 01       	movw	r24, r22
    4082:	00 97       	sbiw	r24, 0x00	; 0
    4084:	a1 f7       	brne	.-24     	; 0x406e <itoa+0x1c>
    4086:	16 f4       	brtc	.+4      	; 0x408c <itoa+0x3a>
    4088:	5d e2       	ldi	r21, 0x2D	; 45
    408a:	51 93       	st	Z+, r21
    408c:	10 82       	st	Z, r1
    408e:	c9 01       	movw	r24, r18
    4090:	0c 94 4a 20 	jmp	0x4094	; 0x4094 <strrev>

00004094 <strrev>:
    4094:	dc 01       	movw	r26, r24
    4096:	fc 01       	movw	r30, r24
    4098:	67 2f       	mov	r22, r23
    409a:	71 91       	ld	r23, Z+
    409c:	77 23       	and	r23, r23
    409e:	e1 f7       	brne	.-8      	; 0x4098 <strrev+0x4>
    40a0:	32 97       	sbiw	r30, 0x02	; 2
    40a2:	04 c0       	rjmp	.+8      	; 0x40ac <strrev+0x18>
    40a4:	7c 91       	ld	r23, X
    40a6:	6d 93       	st	X+, r22
    40a8:	70 83       	st	Z, r23
    40aa:	62 91       	ld	r22, -Z
    40ac:	ae 17       	cp	r26, r30
    40ae:	bf 07       	cpc	r27, r31
    40b0:	c8 f3       	brcs	.-14     	; 0x40a4 <strrev+0x10>
    40b2:	08 95       	ret

000040b4 <__udivmodhi4>:
    40b4:	aa 1b       	sub	r26, r26
    40b6:	bb 1b       	sub	r27, r27
    40b8:	51 e1       	ldi	r21, 0x11	; 17
    40ba:	07 c0       	rjmp	.+14     	; 0x40ca <__udivmodhi4_ep>

000040bc <__udivmodhi4_loop>:
    40bc:	aa 1f       	adc	r26, r26
    40be:	bb 1f       	adc	r27, r27
    40c0:	a6 17       	cp	r26, r22
    40c2:	b7 07       	cpc	r27, r23
    40c4:	10 f0       	brcs	.+4      	; 0x40ca <__udivmodhi4_ep>
    40c6:	a6 1b       	sub	r26, r22
    40c8:	b7 0b       	sbc	r27, r23

000040ca <__udivmodhi4_ep>:
    40ca:	88 1f       	adc	r24, r24
    40cc:	99 1f       	adc	r25, r25
    40ce:	5a 95       	dec	r21
    40d0:	a9 f7       	brne	.-22     	; 0x40bc <__udivmodhi4_loop>
    40d2:	80 95       	com	r24
    40d4:	90 95       	com	r25
    40d6:	bc 01       	movw	r22, r24
    40d8:	cd 01       	movw	r24, r26
    40da:	08 95       	ret

000040dc <_exit>:
    40dc:	f8 94       	cli

000040de <__stop_program>:
    40de:	ff cf       	rjmp	.-2      	; 0x40de <__stop_program>
