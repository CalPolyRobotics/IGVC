
rtosdemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800200  00004bc8  00004c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004bc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000018c1  0080022c  0080022c  00004c88  2**0
                  ALLOC
  3 .stab         0000b724  00000000  00000000  00004c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004d2a  00000000  00000000  000103ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000150d6  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
       4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
       8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
       c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      10:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      14:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      18:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      1c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      20:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      24:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      28:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      2c:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <__vector_11>
      30:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      34:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      38:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      3c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      40:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      44:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      48:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      4c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      50:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      54:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      58:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      5c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      60:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      64:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      68:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      6c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      70:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      74:	0c 94 e4 24 	jmp	0x49c8	; 0x49c8 <__vector_29>
      78:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      7c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      80:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_32>
      84:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      88:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      8c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      90:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__vector_36>
      94:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      98:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      9c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      a0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      a4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      a8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      ac:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      b0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      b4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      b8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      bc:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      c0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      c4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      c8:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_50>
      cc:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      d0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      d4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      d8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      dc:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      e0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      e4:	12 1f       	adc	r17, r18
      e6:	29 1f       	adc	r18, r25
      e8:	59 1f       	adc	r21, r25
      ea:	39 1f       	adc	r19, r25
      ec:	59 1f       	adc	r21, r25
      ee:	59 1f       	adc	r21, r25
      f0:	49 1f       	adc	r20, r25
      f2:	59 1f       	adc	r21, r25

000000f4 <__trampolines_start>:
      f4:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <prvIdleTask>
      f8:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <processCommand+0xe8>
      fc:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <processCommand+0xc8>
     100:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <processCommand+0xa8>
     104:	0c 94 ad 02 	jmp	0x55a	; 0x55a <vTaskFunction_1>
     108:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <vTaskUSARTRead>
     10c:	0c 94 46 25 	jmp	0x4a8c	; 0x4a8c <vTaskADC>
     110:	0c 94 49 03 	jmp	0x692	; 0x692 <vTaskFunction_2>
     114:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <vTaskUSARTWrite>
     118:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <processCommand+0x88>
     11c:	0c 94 12 1f 	jmp	0x3e24	; 0x3e24 <processCommand+0x5a>

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d1 e2       	ldi	r29, 0x21	; 33
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0c bf       	out	0x3c, r16	; 60

00000130 <__do_copy_data>:
     130:	12 e0       	ldi	r17, 0x02	; 2
     132:	a0 e0       	ldi	r26, 0x00	; 0
     134:	b2 e0       	ldi	r27, 0x02	; 2
     136:	e8 ec       	ldi	r30, 0xC8	; 200
     138:	fb e4       	ldi	r31, 0x4B	; 75
     13a:	00 e0       	ldi	r16, 0x00	; 0
     13c:	0b bf       	out	0x3b, r16	; 59
     13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x14>
     140:	07 90       	elpm	r0, Z+
     142:	0d 92       	st	X+, r0
     144:	ac 32       	cpi	r26, 0x2C	; 44
     146:	b1 07       	cpc	r27, r17
     148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0x10>

0000014a <__do_clear_bss>:
     14a:	1a e1       	ldi	r17, 0x1A	; 26
     14c:	ac e2       	ldi	r26, 0x2C	; 44
     14e:	b2 e0       	ldi	r27, 0x02	; 2
     150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
     152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
     154:	ad 3e       	cpi	r26, 0xED	; 237
     156:	b1 07       	cpc	r27, r17
     158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
     15a:	0e 94 cb 00 	call	0x196	; 0x196 <main>
     15e:	0c 94 e2 25 	jmp	0x4bc4	; 0x4bc4 <_exit>

00000162 <__bad_interrupt>:
     162:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000166 <vApplicationTickHook>:
int count = 0;

int sonarTime;

void vApplicationTickHook()
{
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
    count++;
     16e:	80 91 2c 02 	lds	r24, 0x022C
     172:	90 91 2d 02 	lds	r25, 0x022D
     176:	01 96       	adiw	r24, 0x01	; 1
     178:	90 93 2d 02 	sts	0x022D, r25
     17c:	80 93 2c 02 	sts	0x022C, r24
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(){
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
	return;
     18e:	00 00       	nop
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <main>:
/*-----------------------------------------------------------*/

int main( void )
{
     196:	af 92       	push	r10
     198:	bf 92       	push	r11
     19a:	cf 92       	push	r12
     19c:	df 92       	push	r13
     19e:	ef 92       	push	r14
     1a0:	ff 92       	push	r15
     1a2:	0f 93       	push	r16
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	00 d0       	rcall	.+0      	; 0x1aa <main+0x14>
     1aa:	00 d0       	rcall	.+0      	; 0x1ac <main+0x16>
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
    
    //- wimpy variable defs
	uint8_t val[2] = {0x3F, 0xFE};
     1b0:	8f e3       	ldi	r24, 0x3F	; 63
     1b2:	8d 83       	std	Y+5, r24	; 0x05
     1b4:	8e ef       	ldi	r24, 0xFE	; 254
     1b6:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t *val0, *val1;
    
	//- avoid pesky warnings...
	val0 = val + 0;
     1b8:	ce 01       	movw	r24, r28
     1ba:	05 96       	adiw	r24, 0x05	; 5
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
	val1 = val + 1;
     1c0:	ce 01       	movw	r24, r28
     1c2:	05 96       	adiw	r24, 0x05	; 5
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	9c 83       	std	Y+4, r25	; 0x04
     1c8:	8b 83       	std	Y+3, r24	; 0x03
    
	DDRA = 0xF7;
     1ca:	81 e2       	ldi	r24, 0x21	; 33
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	27 ef       	ldi	r18, 0xF7	; 247
     1d0:	fc 01       	movw	r30, r24
     1d2:	20 83       	st	Z, r18
	//PORTA = 0;
	DDRD = 0xFF;
     1d4:	8a e2       	ldi	r24, 0x2A	; 42
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	2f ef       	ldi	r18, 0xFF	; 255
     1da:	fc 01       	movw	r30, r24
     1dc:	20 83       	st	Z, r18
	DDRE = 0xFF;
     1de:	8d e2       	ldi	r24, 0x2D	; 45
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	2f ef       	ldi	r18, 0xFF	; 255
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 83       	st	Z, r18
	DDRB = 0xFF; 
     1e8:	84 e2       	ldi	r24, 0x24	; 36
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	2f ef       	ldi	r18, 0xFF	; 255
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18
	DDRK = 0;
     1f2:	87 e0       	ldi	r24, 0x07	; 7
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	fc 01       	movw	r30, r24
     1f8:	10 82       	st	Z, r1

	PORTD = 0;
     1fa:	8b e2       	ldi	r24, 0x2B	; 43
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	fc 01       	movw	r30, r24
     200:	10 82       	st	Z, r1
	PORTE = 0;
     202:	8e e2       	ldi	r24, 0x2E	; 46
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	fc 01       	movw	r30, r24
     208:	10 82       	st	Z, r1
	PORTK = 2;
     20a:	88 e0       	ldi	r24, 0x08	; 8
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	fc 01       	movw	r30, r24
     212:	20 83       	st	Z, r18

    //- init IO with goodness
	vIO_init();
     214:	0e 94 98 03 	call	0x730	; 0x730 <vIO_init>

	//- Create a 
	xTaskCreate( (pdTASK_CODE) vTaskFunction_1, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	9c 81       	ldd	r25, Y+4	; 0x04
     21c:	a1 2c       	mov	r10, r1
     21e:	b1 2c       	mov	r11, r1
     220:	c1 2c       	mov	r12, r1
     222:	d1 2c       	mov	r13, r1
     224:	e1 2c       	mov	r14, r1
     226:	f1 2c       	mov	r15, r1
     228:	01 e0       	ldi	r16, 0x01	; 1
     22a:	9c 01       	movw	r18, r24
     22c:	4d e3       	ldi	r20, 0x3D	; 61
     22e:	54 e0       	ldi	r21, 0x04	; 4
     230:	67 e0       	ldi	r22, 0x07	; 7
     232:	72 e0       	ldi	r23, 0x02	; 2
     234:	8d ea       	ldi	r24, 0xAD	; 173
     236:	92 e0       	ldi	r25, 0x02	; 2
     238:	0e 94 a8 03 	call	0x750	; 0x750 <xTaskGenericCreate>
                (void *) val1, 1, NULL );
   xTaskCreate( (pdTASK_CODE) vTaskFunction_2, (signed char *) "T1", configMINIMAL_STACK_SIZE+1000,
     23c:	8b 81       	ldd	r24, Y+3	; 0x03
     23e:	9c 81       	ldd	r25, Y+4	; 0x04
     240:	a1 2c       	mov	r10, r1
     242:	b1 2c       	mov	r11, r1
     244:	c1 2c       	mov	r12, r1
     246:	d1 2c       	mov	r13, r1
     248:	e1 2c       	mov	r14, r1
     24a:	f1 2c       	mov	r15, r1
     24c:	01 e0       	ldi	r16, 0x01	; 1
     24e:	9c 01       	movw	r18, r24
     250:	4d e3       	ldi	r20, 0x3D	; 61
     252:	54 e0       	ldi	r21, 0x04	; 4
     254:	6a e0       	ldi	r22, 0x0A	; 10
     256:	72 e0       	ldi	r23, 0x02	; 2
     258:	89 e4       	ldi	r24, 0x49	; 73
     25a:	93 e0       	ldi	r25, 0x03	; 3
     25c:	0e 94 a8 03 	call	0x750	; 0x750 <xTaskGenericCreate>

 
   /*xTaskCreate( (pdTASK_CODE) vTaskSonar, (signed char *) "T1", configMINIMAL_STACK_SIZE+1000,
                (void *) val1, 1, NULL );*/

   xTaskCreate( (pdTASK_CODE) vTaskUSARTWrite, (signed char *) "T2", configMINIMAL_STACK_SIZE+1000,
     260:	8b 81       	ldd	r24, Y+3	; 0x03
     262:	9c 81       	ldd	r25, Y+4	; 0x04
     264:	a1 2c       	mov	r10, r1
     266:	b1 2c       	mov	r11, r1
     268:	c1 2c       	mov	r12, r1
     26a:	d1 2c       	mov	r13, r1
     26c:	e1 2c       	mov	r14, r1
     26e:	f1 2c       	mov	r15, r1
     270:	01 e0       	ldi	r16, 0x01	; 1
     272:	9c 01       	movw	r18, r24
     274:	4d e3       	ldi	r20, 0x3D	; 61
     276:	54 e0       	ldi	r21, 0x04	; 4
     278:	6d e0       	ldi	r22, 0x0D	; 13
     27a:	72 e0       	ldi	r23, 0x02	; 2
     27c:	8e e6       	ldi	r24, 0x6E	; 110
     27e:	9a e1       	ldi	r25, 0x1A	; 26
     280:	0e 94 a8 03 	call	0x750	; 0x750 <xTaskGenericCreate>
   				(void *) val1, 1, NULL);

   xTaskCreate( (pdTASK_CODE) vTaskUSARTRead, (signed char *) "T3", configMINIMAL_STACK_SIZE+1000,
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	9c 81       	ldd	r25, Y+4	; 0x04
     288:	a1 2c       	mov	r10, r1
     28a:	b1 2c       	mov	r11, r1
     28c:	c1 2c       	mov	r12, r1
     28e:	d1 2c       	mov	r13, r1
     290:	e1 2c       	mov	r14, r1
     292:	f1 2c       	mov	r15, r1
     294:	01 e0       	ldi	r16, 0x01	; 1
     296:	9c 01       	movw	r18, r24
     298:	4d e3       	ldi	r20, 0x3D	; 61
     29a:	54 e0       	ldi	r21, 0x04	; 4
     29c:	60 e1       	ldi	r22, 0x10	; 16
     29e:	72 e0       	ldi	r23, 0x02	; 2
     2a0:	8e ec       	ldi	r24, 0xCE	; 206
     2a2:	9b e1       	ldi	r25, 0x1B	; 27
     2a4:	0e 94 a8 03 	call	0x750	; 0x750 <xTaskGenericCreate>
   				(void *) val1, 1, NULL);

	
	xTaskCreate( (pdTASK_CODE) vTaskADC, (signed char *) "T3", configMINIMAL_STACK_SIZE+1000,
     2a8:	8b 81       	ldd	r24, Y+3	; 0x03
     2aa:	9c 81       	ldd	r25, Y+4	; 0x04
     2ac:	a1 2c       	mov	r10, r1
     2ae:	b1 2c       	mov	r11, r1
     2b0:	c1 2c       	mov	r12, r1
     2b2:	d1 2c       	mov	r13, r1
     2b4:	e1 2c       	mov	r14, r1
     2b6:	f1 2c       	mov	r15, r1
     2b8:	01 e0       	ldi	r16, 0x01	; 1
     2ba:	9c 01       	movw	r18, r24
     2bc:	4d e3       	ldi	r20, 0x3D	; 61
     2be:	54 e0       	ldi	r21, 0x04	; 4
     2c0:	60 e1       	ldi	r22, 0x10	; 16
     2c2:	72 e0       	ldi	r23, 0x02	; 2
     2c4:	86 e4       	ldi	r24, 0x46	; 70
     2c6:	95 e2       	ldi	r25, 0x25	; 37
     2c8:	0e 94 a8 03 	call	0x750	; 0x750 <xTaskGenericCreate>

//   xTaskCreate( (pdTASK_CODE) vTaskUSARTLog, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
//   				(void *) val1, 1, NULL);
    
    //- kick off the scheduler
	vTaskStartScheduler();
     2cc:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vTaskStartScheduler>
    
	return 0;
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
}
     2d4:	26 96       	adiw	r28, 0x06	; 6
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	0f 91       	pop	r16
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	df 90       	pop	r13
     2ec:	cf 90       	pop	r12
     2ee:	bf 90       	pop	r11
     2f0:	af 90       	pop	r10
     2f2:	08 95       	ret

000002f4 <printHex>:
/*-----------------------------------------------------------*/

void printHex(int i){
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	62 97       	sbiw	r28, 0x12	; 18
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
     308:	9a 8b       	std	Y+18, r25	; 0x12
     30a:	89 8b       	std	Y+17, r24	; 0x11
	char hex[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
     30c:	20 e1       	ldi	r18, 0x10	; 16
     30e:	e3 e1       	ldi	r30, 0x13	; 19
     310:	f2 e0       	ldi	r31, 0x02	; 2
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	dc 01       	movw	r26, r24
     318:	01 90       	ld	r0, Z+
     31a:	0d 92       	st	X+, r0
     31c:	2a 95       	dec	r18
     31e:	e1 f7       	brne	.-8      	; 0x318 <printHex+0x24>

	USART_Write(hex[(i&0xF000) >> 12]);
     320:	89 89       	ldd	r24, Y+17	; 0x11
     322:	9a 89       	ldd	r25, Y+18	; 0x12
     324:	89 2f       	mov	r24, r25
     326:	99 27       	eor	r25, r25
     328:	82 95       	swap	r24
     32a:	8f 70       	andi	r24, 0x0F	; 15
     32c:	9e 01       	movw	r18, r28
     32e:	2f 5f       	subi	r18, 0xFF	; 255
     330:	3f 4f       	sbci	r19, 0xFF	; 255
     332:	82 0f       	add	r24, r18
     334:	93 1f       	adc	r25, r19
     336:	fc 01       	movw	r30, r24
     338:	80 81       	ld	r24, Z
     33a:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>
	USART_Write(hex[(i&0xF00) >> 8]);
     33e:	89 89       	ldd	r24, Y+17	; 0x11
     340:	9a 89       	ldd	r25, Y+18	; 0x12
     342:	88 27       	eor	r24, r24
     344:	9f 70       	andi	r25, 0x0F	; 15
     346:	89 2f       	mov	r24, r25
     348:	99 0f       	add	r25, r25
     34a:	99 0b       	sbc	r25, r25
     34c:	9e 01       	movw	r18, r28
     34e:	2f 5f       	subi	r18, 0xFF	; 255
     350:	3f 4f       	sbci	r19, 0xFF	; 255
     352:	82 0f       	add	r24, r18
     354:	93 1f       	adc	r25, r19
     356:	fc 01       	movw	r30, r24
     358:	80 81       	ld	r24, Z
     35a:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>
	USART_Write(hex[(i&0xF0) >> 4]);
     35e:	89 89       	ldd	r24, Y+17	; 0x11
     360:	9a 89       	ldd	r25, Y+18	; 0x12
     362:	80 7f       	andi	r24, 0xF0	; 240
     364:	99 27       	eor	r25, r25
     366:	95 95       	asr	r25
     368:	87 95       	ror	r24
     36a:	95 95       	asr	r25
     36c:	87 95       	ror	r24
     36e:	95 95       	asr	r25
     370:	87 95       	ror	r24
     372:	95 95       	asr	r25
     374:	87 95       	ror	r24
     376:	9e 01       	movw	r18, r28
     378:	2f 5f       	subi	r18, 0xFF	; 255
     37a:	3f 4f       	sbci	r19, 0xFF	; 255
     37c:	82 0f       	add	r24, r18
     37e:	93 1f       	adc	r25, r19
     380:	fc 01       	movw	r30, r24
     382:	80 81       	ld	r24, Z
     384:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>
	USART_Write(hex[i&0xF]);
     388:	89 89       	ldd	r24, Y+17	; 0x11
     38a:	9a 89       	ldd	r25, Y+18	; 0x12
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	99 27       	eor	r25, r25
     390:	9e 01       	movw	r18, r28
     392:	2f 5f       	subi	r18, 0xFF	; 255
     394:	3f 4f       	sbci	r19, 0xFF	; 255
     396:	82 0f       	add	r24, r18
     398:	93 1f       	adc	r25, r19
     39a:	fc 01       	movw	r30, r24
     39c:	80 81       	ld	r24, Z
     39e:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>

}
     3a2:	62 96       	adiw	r28, 0x12	; 18
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <printNum>:

void printNum(unsigned char i){
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	2d 97       	sbiw	r28, 0x0d	; 13
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	8d 87       	std	Y+13, r24	; 0x0d
    
    char str[10];
    memset(str,0,10);
     3ca:	ce 01       	movw	r24, r28
     3cc:	03 96       	adiw	r24, 0x03	; 3
     3ce:	4a e0       	ldi	r20, 0x0A	; 10
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <memset>
    itoa(i,str,10);
     3da:	8d 85       	ldd	r24, Y+13	; 0x0d
     3dc:	88 2f       	mov	r24, r24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	9e 01       	movw	r18, r28
     3e2:	2d 5f       	subi	r18, 0xFD	; 253
     3e4:	3f 4f       	sbci	r19, 0xFF	; 255
     3e6:	4a e0       	ldi	r20, 0x0A	; 10
     3e8:	50 e0       	ldi	r21, 0x00	; 0
     3ea:	b9 01       	movw	r22, r18
     3ec:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <itoa>
    char * irr = str;
     3f0:	ce 01       	movw	r24, r28
     3f2:	03 96       	adiw	r24, 0x03	; 3
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01
    while(*irr){
     3f8:	0b c0       	rjmp	.+22     	; 0x410 <printNum+0x5c>
        USART_AddToQueue((unsigned char )*irr);
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	9a 81       	ldd	r25, Y+2	; 0x02
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	0e 94 39 1a 	call	0x3472	; 0x3472 <USART_AddToQueue>
        irr++;
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	9a 81       	ldd	r25, Y+2	; 0x02
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	9a 83       	std	Y+2, r25	; 0x02
     40e:	89 83       	std	Y+1, r24	; 0x01
    
    char str[10];
    memset(str,0,10);
    itoa(i,str,10);
    char * irr = str;
    while(*irr){
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	fc 01       	movw	r30, r24
     416:	80 81       	ld	r24, Z
     418:	88 23       	and	r24, r24
     41a:	79 f7       	brne	.-34     	; 0x3fa <printNum+0x46>
        USART_AddToQueue((unsigned char )*irr);
        irr++;
    }
    
}
     41c:	2d 96       	adiw	r28, 0x0d	; 13
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <__vector_50>:

ISR(TIMER5_OVF_vect){
     42e:	1f 92       	push	r1
     430:	0f 92       	push	r0
     432:	00 90 5f 00 	lds	r0, 0x005F
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	00 90 5b 00 	lds	r0, 0x005B
     43e:	0f 92       	push	r0
     440:	2f 93       	push	r18
     442:	3f 93       	push	r19
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62

	PORTB ^= 0xFF;
     454:	85 e2       	ldi	r24, 0x25	; 37
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	25 e2       	ldi	r18, 0x25	; 37
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	f9 01       	movw	r30, r18
     45e:	20 81       	ld	r18, Z
     460:	20 95       	com	r18
     462:	fc 01       	movw	r30, r24
     464:	20 83       	st	Z, r18
	TCNT3L = 0;
     466:	84 e9       	ldi	r24, 0x94	; 148
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	fc 01       	movw	r30, r24
     46c:	10 82       	st	Z, r1
	TCNT3H = 0;
     46e:	85 e9       	ldi	r24, 0x95	; 149
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	fc 01       	movw	r30, r24
     474:	10 82       	st	Z, r1

}
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	ff 91       	pop	r31
     47c:	ef 91       	pop	r30
     47e:	9f 91       	pop	r25
     480:	8f 91       	pop	r24
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	00 92 5b 00 	sts	0x005B, r0
     48c:	0f 90       	pop	r0
     48e:	00 92 5f 00 	sts	0x005F, r0
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <getTimerCount2>:

unsigned int getTimerCount2(){
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62

	//volatile char timerLow = TCNT3L;

	return TCNT0;
     4a0:	86 e4       	ldi	r24, 0x46	; 70
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	fc 01       	movw	r30, r24
     4a6:	80 81       	ld	r24, Z
     4a8:	88 2f       	mov	r24, r24
     4aa:	90 e0       	ldi	r25, 0x00	; 0

}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <potValue>:


int potValue(int sonarMax,int sonarMin,int potMax,int potMin,int x){
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	2c 97       	sbiw	r28, 0x0c	; 12
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	9c 83       	std	Y+4, r25	; 0x04
     4cc:	8b 83       	std	Y+3, r24	; 0x03
     4ce:	7e 83       	std	Y+6, r23	; 0x06
     4d0:	6d 83       	std	Y+5, r22	; 0x05
     4d2:	58 87       	std	Y+8, r21	; 0x08
     4d4:	4f 83       	std	Y+7, r20	; 0x07
     4d6:	3a 87       	std	Y+10, r19	; 0x0a
     4d8:	29 87       	std	Y+9, r18	; 0x09
     4da:	1c 87       	std	Y+12, r17	; 0x0c
     4dc:	0b 87       	std	Y+11, r16	; 0x0b
	int value;	
	if(x < sonarMin){
     4de:	2b 85       	ldd	r18, Y+11	; 0x0b
     4e0:	3c 85       	ldd	r19, Y+12	; 0x0c
     4e2:	8d 81       	ldd	r24, Y+5	; 0x05
     4e4:	9e 81       	ldd	r25, Y+6	; 0x06
     4e6:	28 17       	cp	r18, r24
     4e8:	39 07       	cpc	r19, r25
     4ea:	1c f4       	brge	.+6      	; 0x4f2 <potValue+0x40>
		return potMin;
     4ec:	89 85       	ldd	r24, Y+9	; 0x09
     4ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f0:	29 c0       	rjmp	.+82     	; 0x544 <potValue+0x92>
	} else if (x > sonarMax){
     4f2:	2b 85       	ldd	r18, Y+11	; 0x0b
     4f4:	3c 85       	ldd	r19, Y+12	; 0x0c
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	9c 81       	ldd	r25, Y+4	; 0x04
     4fa:	82 17       	cp	r24, r18
     4fc:	93 07       	cpc	r25, r19
     4fe:	1c f4       	brge	.+6      	; 0x506 <potValue+0x54>
		return potMax;
     500:	8f 81       	ldd	r24, Y+7	; 0x07
     502:	98 85       	ldd	r25, Y+8	; 0x08
     504:	1f c0       	rjmp	.+62     	; 0x544 <potValue+0x92>
	} else {
		value = x / 4 - 140;
     506:	8b 85       	ldd	r24, Y+11	; 0x0b
     508:	9c 85       	ldd	r25, Y+12	; 0x0c
     50a:	99 23       	and	r25, r25
     50c:	0c f4       	brge	.+2      	; 0x510 <potValue+0x5e>
     50e:	03 96       	adiw	r24, 0x03	; 3
     510:	95 95       	asr	r25
     512:	87 95       	ror	r24
     514:	95 95       	asr	r25
     516:	87 95       	ror	r24
     518:	8c 58       	subi	r24, 0x8C	; 140
     51a:	91 09       	sbc	r25, r1
     51c:	9a 83       	std	Y+2, r25	; 0x02
     51e:	89 83       	std	Y+1, r24	; 0x01
		return value > potMax?potMax:value < potMin?potMin:value;
     520:	29 81       	ldd	r18, Y+1	; 0x01
     522:	3a 81       	ldd	r19, Y+2	; 0x02
     524:	8f 81       	ldd	r24, Y+7	; 0x07
     526:	98 85       	ldd	r25, Y+8	; 0x08
     528:	82 17       	cp	r24, r18
     52a:	93 07       	cpc	r25, r19
     52c:	4c f0       	brlt	.+18     	; 0x540 <potValue+0x8e>
     52e:	29 85       	ldd	r18, Y+9	; 0x09
     530:	3a 85       	ldd	r19, Y+10	; 0x0a
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	9a 81       	ldd	r25, Y+2	; 0x02
     536:	82 17       	cp	r24, r18
     538:	93 07       	cpc	r25, r19
     53a:	24 f4       	brge	.+8      	; 0x544 <potValue+0x92>
     53c:	c9 01       	movw	r24, r18
     53e:	02 c0       	rjmp	.+4      	; 0x544 <potValue+0x92>
     540:	8f 81       	ldd	r24, Y+7	; 0x07
     542:	98 85       	ldd	r25, Y+8	; 0x08
	}
} 
     544:	2c 96       	adiw	r28, 0x0c	; 12
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	08 95       	ret

0000055a <vTaskFunction_1>:

void vTaskFunction_1(void *pvParameters)
{	
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	62 97       	sbiw	r28, 0x12	; 18
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	9a 8b       	std	Y+18, r25	; 0x12
     574:	89 8b       	std	Y+17, r24	; 0x11
	int sonarResult;
	int movingForward = 1;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	9a 83       	std	Y+2, r25	; 0x02
     57c:	89 83       	std	Y+1, r24	; 0x01

	int sonarMax = 0x31C;
     57e:	8c e1       	ldi	r24, 0x1C	; 28
     580:	93 e0       	ldi	r25, 0x03	; 3
     582:	9c 83       	std	Y+4, r25	; 0x04
     584:	8b 83       	std	Y+3, r24	; 0x03
	int sonarMin = 0xE0;
     586:	80 ee       	ldi	r24, 0xE0	; 224
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	9e 83       	std	Y+6, r25	; 0x06
     58c:	8d 83       	std	Y+5, r24	; 0x05
	int potMin = 0x18;
     58e:	88 e1       	ldi	r24, 0x18	; 24
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	98 87       	std	Y+8, r25	; 0x08
     594:	8f 83       	std	Y+7, r24	; 0x07
	int potMax = 0x40;;
     596:	80 e4       	ldi	r24, 0x40	; 64
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9a 87       	std	Y+10, r25	; 0x0a
     59c:	89 87       	std	Y+9, r24	; 0x09
	int backwardSwitch = 0xE1;
     59e:	81 ee       	ldi	r24, 0xE1	; 225
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	9c 87       	std	Y+12, r25	; 0x0c
     5a4:	8b 87       	std	Y+11, r24	; 0x0b
	int forwardSwitch = 0x160;
     5a6:	80 e6       	ldi	r24, 0x60	; 96
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	9e 87       	std	Y+14, r25	; 0x0e
     5ac:	8d 87       	std	Y+13, r24	; 0x0d

	PORTA = 4;
     5ae:	82 e2       	ldi	r24, 0x22	; 34
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	24 e0       	ldi	r18, 0x04	; 4
     5b4:	fc 01       	movw	r30, r24
     5b6:	20 83       	st	Z, r18

   USART_Init(9600, 16000000);
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	54 e2       	ldi	r21, 0x24	; 36
     5bc:	64 ef       	ldi	r22, 0xF4	; 244
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e8       	ldi	r24, 0x80	; 128
     5c2:	95 e2       	ldi	r25, 0x25	; 37
     5c4:	0e 94 89 19 	call	0x3312	; 0x3312 <USART_Init>


	initializeSPI();
     5c8:	0e 94 33 23 	call	0x4666	; 0x4666 <initializeSPI>
	initSpeedController();
     5cc:	0e 94 89 22 	call	0x4512	; 0x4512 <initSpeedController>
	
	
	//PORTC = 0x2;
	setFNR(1);
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setFNR>
	
	for(;;){

		sonarResult = getSonarResult();
     5d6:	0e 94 41 24 	call	0x4882	; 0x4882 <getSonarResult>
     5da:	98 8b       	std	Y+16, r25	; 0x10
     5dc:	8f 87       	std	Y+15, r24	; 0x0f
		if(movingForward == 1){
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	9a 81       	ldd	r25, Y+2	; 0x02
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	91 05       	cpc	r25, r1
     5e6:	f1 f4       	brne	.+60     	; 0x624 <vTaskFunction_1+0xca>
			if(sonarResult < backwardSwitch) {
     5e8:	2f 85       	ldd	r18, Y+15	; 0x0f
     5ea:	38 89       	ldd	r19, Y+16	; 0x10
     5ec:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ee:	9c 85       	ldd	r25, Y+12	; 0x0c
     5f0:	28 17       	cp	r18, r24
     5f2:	39 07       	cpc	r19, r25
     5f4:	3c f4       	brge	.+14     	; 0x604 <vTaskFunction_1+0xaa>
				movingForward = -1;
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	9f ef       	ldi	r25, 0xFF	; 255
     5fa:	9a 83       	std	Y+2, r25	; 0x02
     5fc:	89 83       	std	Y+1, r24	; 0x01
				setFNR(-1);
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setFNR>
			}
			setPot(potValue(sonarMax,sonarMin,potMax,potMin,sonarResult));
     604:	ef 85       	ldd	r30, Y+15	; 0x0f
     606:	f8 89       	ldd	r31, Y+16	; 0x10
     608:	2f 81       	ldd	r18, Y+7	; 0x07
     60a:	38 85       	ldd	r19, Y+8	; 0x08
     60c:	49 85       	ldd	r20, Y+9	; 0x09
     60e:	5a 85       	ldd	r21, Y+10	; 0x0a
     610:	6d 81       	ldd	r22, Y+5	; 0x05
     612:	7e 81       	ldd	r23, Y+6	; 0x06
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	8f 01       	movw	r16, r30
     61a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <potValue>
     61e:	0e 94 94 22 	call	0x4528	; 0x4528 <setPot>
     622:	1d c0       	rjmp	.+58     	; 0x65e <vTaskFunction_1+0x104>
		} else {
			if(sonarResult > forwardSwitch ){
     624:	2f 85       	ldd	r18, Y+15	; 0x0f
     626:	38 89       	ldd	r19, Y+16	; 0x10
     628:	8d 85       	ldd	r24, Y+13	; 0x0d
     62a:	9e 85       	ldd	r25, Y+14	; 0x0e
     62c:	82 17       	cp	r24, r18
     62e:	93 07       	cpc	r25, r19
     630:	3c f4       	brge	.+14     	; 0x640 <vTaskFunction_1+0xe6>
				movingForward = 1;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	9a 83       	std	Y+2, r25	; 0x02
     638:	89 83       	std	Y+1, r24	; 0x01
				setFNR(1);
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setFNR>
			}
			setPot(potValue(sonarMax,sonarMin,potMax,potMin,sonarResult));
     640:	ef 85       	ldd	r30, Y+15	; 0x0f
     642:	f8 89       	ldd	r31, Y+16	; 0x10
     644:	2f 81       	ldd	r18, Y+7	; 0x07
     646:	38 85       	ldd	r19, Y+8	; 0x08
     648:	49 85       	ldd	r20, Y+9	; 0x09
     64a:	5a 85       	ldd	r21, Y+10	; 0x0a
     64c:	6d 81       	ldd	r22, Y+5	; 0x05
     64e:	7e 81       	ldd	r23, Y+6	; 0x06
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	9c 81       	ldd	r25, Y+4	; 0x04
     654:	8f 01       	movw	r16, r30
     656:	0e 94 59 02 	call	0x4b2	; 0x4b2 <potValue>
     65a:	0e 94 94 22 	call	0x4528	; 0x4528 <setPot>
		}
		printHex(potValue(sonarMax,sonarMin,potMax,potMin,sonarResult));
     65e:	ef 85       	ldd	r30, Y+15	; 0x0f
     660:	f8 89       	ldd	r31, Y+16	; 0x10
     662:	2f 81       	ldd	r18, Y+7	; 0x07
     664:	38 85       	ldd	r19, Y+8	; 0x08
     666:	49 85       	ldd	r20, Y+9	; 0x09
     668:	5a 85       	ldd	r21, Y+10	; 0x0a
     66a:	6d 81       	ldd	r22, Y+5	; 0x05
     66c:	7e 81       	ldd	r23, Y+6	; 0x06
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	9c 81       	ldd	r25, Y+4	; 0x04
     672:	8f 01       	movw	r16, r30
     674:	0e 94 59 02 	call	0x4b2	; 0x4b2 <potValue>
     678:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <printHex>
		USART_Write('\n');
     67c:	8a e0       	ldi	r24, 0x0A	; 10
     67e:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>
		USART_Write('\r');
     682:	8d e0       	ldi	r24, 0x0D	; 13
     684:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>
		vTaskDelay(1);
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
	}
     690:	a2 cf       	rjmp	.-188    	; 0x5d6 <vTaskFunction_1+0x7c>

00000692 <vTaskFunction_2>:
		PORTL = 0x80;
		vTaskDelay(200);
	}
}

void vTaskFunction_2(void *pvParameters){
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	1f 92       	push	r1
     698:	1f 92       	push	r1
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	9a 83       	std	Y+2, r25	; 0x02
     6a0:	89 83       	std	Y+1, r24	; 0x01
	DDRL = 0xF0;
     6a2:	8a e0       	ldi	r24, 0x0A	; 10
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	20 ef       	ldi	r18, 0xF0	; 240
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 83       	st	Z, r18
	PORTL = 0;
     6ac:	8b e0       	ldi	r24, 0x0B	; 11
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	fc 01       	movw	r30, r24
     6b2:	10 82       	st	Z, r1
	for(;;){
		PORTL ^= 0xC0;
     6b4:	8b e0       	ldi	r24, 0x0B	; 11
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	2b e0       	ldi	r18, 0x0B	; 11
     6ba:	31 e0       	ldi	r19, 0x01	; 1
     6bc:	f9 01       	movw	r30, r18
     6be:	30 81       	ld	r19, Z
     6c0:	20 ec       	ldi	r18, 0xC0	; 192
     6c2:	23 27       	eor	r18, r19
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18
		vTaskDelay(300);
     6c8:	8c e2       	ldi	r24, 0x2C	; 44
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
	}	
     6d0:	f1 cf       	rjmp	.-30     	; 0x6b4 <vTaskFunction_2+0x22>

000006d2 <vTaskPot>:
}

void vTaskPot(void *pvParameters){
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	00 d0       	rcall	.+0      	; 0x6d8 <vTaskPot+0x6>
     6d8:	1f 92       	push	r1
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	9c 83       	std	Y+4, r25	; 0x04
     6e0:	8b 83       	std	Y+3, r24	; 0x03
	initializeSPI();
     6e2:	0e 94 33 23 	call	0x4666	; 0x4666 <initializeSPI>
	int a = 0;
     6e6:	1a 82       	std	Y+2, r1	; 0x02
     6e8:	19 82       	std	Y+1, r1	; 0x01
	initSpeedController();
     6ea:	0e 94 89 22 	call	0x4512	; 0x4512 <initSpeedController>
		setPot(a);
		vTaskDelay(80);
		a++;
	}*/
	for(;;){
		setPot(1);
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 94 22 	call	0x4528	; 0x4528 <setPot>
		vTaskDelay(500);
     6f6:	84 ef       	ldi	r24, 0xF4	; 244
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
		setPot(0x40);
     6fe:	80 e4       	ldi	r24, 0x40	; 64
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 94 22 	call	0x4528	; 0x4528 <setPot>
		vTaskDelay(500);
     706:	84 ef       	ldi	r24, 0xF4	; 244
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
		setPot(0x7F);
     70e:	8f e7       	ldi	r24, 0x7F	; 127
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 94 22 	call	0x4528	; 0x4528 <setPot>
		vTaskDelay(500);
     716:	84 ef       	ldi	r24, 0xF4	; 244
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
		setPot(0x40);
     71e:	80 e4       	ldi	r24, 0x40	; 64
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 94 22 	call	0x4528	; 0x4528 <setPot>
		vTaskDelay(500);
     726:	84 ef       	ldi	r24, 0xF4	; 244
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
	}
     72e:	df cf       	rjmp	.-66     	; 0x6ee <vTaskPot+0x1c>

00000730 <vIO_init>:
}


void vIO_init(void)
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
    //- set PortB as output
	DDRB = 0xFF; 
     738:	84 e2       	ldi	r24, 0x24	; 36
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2f ef       	ldi	r18, 0xFF	; 255
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18
    PORTB = 0; 
     742:	85 e2       	ldi	r24, 0x25	; 37
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	fc 01       	movw	r30, r24
     748:	10 82       	st	Z, r1
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <xTaskGenericCreate>:
     750:	af 92       	push	r10
     752:	bf 92       	push	r11
     754:	cf 92       	push	r12
     756:	df 92       	push	r13
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	df 93       	push	r29
     762:	cf 93       	push	r28
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
     768:	64 97       	sbiw	r28, 0x14	; 20
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
     774:	9f 83       	std	Y+7, r25	; 0x07
     776:	8e 83       	std	Y+6, r24	; 0x06
     778:	79 87       	std	Y+9, r23	; 0x09
     77a:	68 87       	std	Y+8, r22	; 0x08
     77c:	5b 87       	std	Y+11, r21	; 0x0b
     77e:	4a 87       	std	Y+10, r20	; 0x0a
     780:	3d 87       	std	Y+13, r19	; 0x0d
     782:	2c 87       	std	Y+12, r18	; 0x0c
     784:	0e 87       	std	Y+14, r16	; 0x0e
     786:	f8 8a       	std	Y+16, r15	; 0x10
     788:	ef 86       	std	Y+15, r14	; 0x0f
     78a:	da 8a       	std	Y+18, r13	; 0x12
     78c:	c9 8a       	std	Y+17, r12	; 0x11
     78e:	bc 8a       	std	Y+20, r11	; 0x14
     790:	ab 8a       	std	Y+19, r10	; 0x13
     792:	8a 85       	ldd	r24, Y+10	; 0x0a
     794:	9b 85       	ldd	r25, Y+11	; 0x0b
     796:	29 89       	ldd	r18, Y+17	; 0x11
     798:	3a 89       	ldd	r19, Y+18	; 0x12
     79a:	b9 01       	movw	r22, r18
     79c:	0e 94 37 0b 	call	0x166e	; 0x166e <prvAllocateTCBAndStack>
     7a0:	9c 83       	std	Y+4, r25	; 0x04
     7a2:	8b 83       	std	Y+3, r24	; 0x03
     7a4:	8b 81       	ldd	r24, Y+3	; 0x03
     7a6:	9c 81       	ldd	r25, Y+4	; 0x04
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	09 f4       	brne	.+2      	; 0x7ae <xTaskGenericCreate+0x5e>
     7ac:	99 c0       	rjmp	.+306    	; 0x8e0 <xTaskGenericCreate+0x190>
     7ae:	eb 81       	ldd	r30, Y+3	; 0x03
     7b0:	fc 81       	ldd	r31, Y+4	; 0x04
     7b2:	27 89       	ldd	r18, Z+23	; 0x17
     7b4:	30 8d       	ldd	r19, Z+24	; 0x18
     7b6:	8a 85       	ldd	r24, Y+10	; 0x0a
     7b8:	9b 85       	ldd	r25, Y+11	; 0x0b
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	82 0f       	add	r24, r18
     7be:	93 1f       	adc	r25, r19
     7c0:	9a 83       	std	Y+2, r25	; 0x02
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	8b 81       	ldd	r24, Y+3	; 0x03
     7c6:	9c 81       	ldd	r25, Y+4	; 0x04
     7c8:	28 85       	ldd	r18, Y+8	; 0x08
     7ca:	39 85       	ldd	r19, Y+9	; 0x09
     7cc:	eb 89       	ldd	r30, Y+19	; 0x13
     7ce:	fc 89       	ldd	r31, Y+20	; 0x14
     7d0:	aa 85       	ldd	r26, Y+10	; 0x0a
     7d2:	bb 85       	ldd	r27, Y+11	; 0x0b
     7d4:	b9 01       	movw	r22, r18
     7d6:	4e 85       	ldd	r20, Y+14	; 0x0e
     7d8:	9f 01       	movw	r18, r30
     7da:	8d 01       	movw	r16, r26
     7dc:	0e 94 4e 0a 	call	0x149c	; 0x149c <prvInitialiseTCBVariables>
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	2e 81       	ldd	r18, Y+6	; 0x06
     7e6:	3f 81       	ldd	r19, Y+7	; 0x07
     7e8:	4c 85       	ldd	r20, Y+12	; 0x0c
     7ea:	5d 85       	ldd	r21, Y+13	; 0x0d
     7ec:	b9 01       	movw	r22, r18
     7ee:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <pxPortInitialiseStack>
     7f2:	eb 81       	ldd	r30, Y+3	; 0x03
     7f4:	fc 81       	ldd	r31, Y+4	; 0x04
     7f6:	91 83       	std	Z+1, r25	; 0x01
     7f8:	80 83       	st	Z, r24
     7fa:	8f 85       	ldd	r24, Y+15	; 0x0f
     7fc:	98 89       	ldd	r25, Y+16	; 0x10
     7fe:	00 97       	sbiw	r24, 0x00	; 0
     800:	31 f0       	breq	.+12     	; 0x80e <xTaskGenericCreate+0xbe>
     802:	ef 85       	ldd	r30, Y+15	; 0x0f
     804:	f8 89       	ldd	r31, Y+16	; 0x10
     806:	8b 81       	ldd	r24, Y+3	; 0x03
     808:	9c 81       	ldd	r25, Y+4	; 0x04
     80a:	91 83       	std	Z+1, r25	; 0x01
     80c:	80 83       	st	Z, r24
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	0f 92       	push	r0
     814:	80 91 30 02 	lds	r24, 0x0230
     818:	8f 5f       	subi	r24, 0xFF	; 255
     81a:	80 93 30 02 	sts	0x0230, r24
     81e:	80 91 2e 02 	lds	r24, 0x022E
     822:	90 91 2f 02 	lds	r25, 0x022F
     826:	00 97       	sbiw	r24, 0x00	; 0
     828:	69 f4       	brne	.+26     	; 0x844 <xTaskGenericCreate+0xf4>
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	9c 81       	ldd	r25, Y+4	; 0x04
     82e:	90 93 2f 02 	sts	0x022F, r25
     832:	80 93 2e 02 	sts	0x022E, r24
     836:	80 91 30 02 	lds	r24, 0x0230
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	a9 f4       	brne	.+42     	; 0x868 <xTaskGenericCreate+0x118>
     83e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <prvInitialiseTaskLists>
     842:	12 c0       	rjmp	.+36     	; 0x868 <xTaskGenericCreate+0x118>
     844:	80 91 35 02 	lds	r24, 0x0235
     848:	88 23       	and	r24, r24
     84a:	71 f4       	brne	.+28     	; 0x868 <xTaskGenericCreate+0x118>
     84c:	e0 91 2e 02 	lds	r30, 0x022E
     850:	f0 91 2f 02 	lds	r31, 0x022F
     854:	96 89       	ldd	r25, Z+22	; 0x16
     856:	8e 85       	ldd	r24, Y+14	; 0x0e
     858:	89 17       	cp	r24, r25
     85a:	30 f0       	brcs	.+12     	; 0x868 <xTaskGenericCreate+0x118>
     85c:	8b 81       	ldd	r24, Y+3	; 0x03
     85e:	9c 81       	ldd	r25, Y+4	; 0x04
     860:	90 93 2f 02 	sts	0x022F, r25
     864:	80 93 2e 02 	sts	0x022E, r24
     868:	eb 81       	ldd	r30, Y+3	; 0x03
     86a:	fc 81       	ldd	r31, Y+4	; 0x04
     86c:	96 89       	ldd	r25, Z+22	; 0x16
     86e:	80 91 33 02 	lds	r24, 0x0233
     872:	89 17       	cp	r24, r25
     874:	28 f4       	brcc	.+10     	; 0x880 <xTaskGenericCreate+0x130>
     876:	eb 81       	ldd	r30, Y+3	; 0x03
     878:	fc 81       	ldd	r31, Y+4	; 0x04
     87a:	86 89       	ldd	r24, Z+22	; 0x16
     87c:	80 93 33 02 	sts	0x0233, r24
     880:	80 91 3a 02 	lds	r24, 0x023A
     884:	8f 5f       	subi	r24, 0xFF	; 255
     886:	80 93 3a 02 	sts	0x023A, r24
     88a:	eb 81       	ldd	r30, Y+3	; 0x03
     88c:	fc 81       	ldd	r31, Y+4	; 0x04
     88e:	96 89       	ldd	r25, Z+22	; 0x16
     890:	80 91 34 02 	lds	r24, 0x0234
     894:	89 17       	cp	r24, r25
     896:	28 f4       	brcc	.+10     	; 0x8a2 <xTaskGenericCreate+0x152>
     898:	eb 81       	ldd	r30, Y+3	; 0x03
     89a:	fc 81       	ldd	r31, Y+4	; 0x04
     89c:	86 89       	ldd	r24, Z+22	; 0x16
     89e:	80 93 34 02 	sts	0x0234, r24
     8a2:	eb 81       	ldd	r30, Y+3	; 0x03
     8a4:	fc 81       	ldd	r31, Y+4	; 0x04
     8a6:	86 89       	ldd	r24, Z+22	; 0x16
     8a8:	28 2f       	mov	r18, r24
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	c9 01       	movw	r24, r18
     8ae:	88 0f       	add	r24, r24
     8b0:	99 1f       	adc	r25, r25
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	82 0f       	add	r24, r18
     8bc:	93 1f       	adc	r25, r19
     8be:	ac 01       	movw	r20, r24
     8c0:	45 5c       	subi	r20, 0xC5	; 197
     8c2:	5d 4f       	sbci	r21, 0xFD	; 253
     8c4:	8b 81       	ldd	r24, Y+3	; 0x03
     8c6:	9c 81       	ldd	r25, Y+4	; 0x04
     8c8:	9c 01       	movw	r18, r24
     8ca:	2e 5f       	subi	r18, 0xFE	; 254
     8cc:	3f 4f       	sbci	r19, 0xFF	; 255
     8ce:	ca 01       	movw	r24, r20
     8d0:	b9 01       	movw	r22, r18
     8d2:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	8d 83       	std	Y+5, r24	; 0x05
     8da:	0f 90       	pop	r0
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <xTaskGenericCreate+0x194>
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	8d 83       	std	Y+5, r24	; 0x05
     8e4:	8d 81       	ldd	r24, Y+5	; 0x05
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	71 f4       	brne	.+28     	; 0x906 <xTaskGenericCreate+0x1b6>
     8ea:	80 91 35 02 	lds	r24, 0x0235
     8ee:	88 23       	and	r24, r24
     8f0:	51 f0       	breq	.+20     	; 0x906 <xTaskGenericCreate+0x1b6>
     8f2:	e0 91 2e 02 	lds	r30, 0x022E
     8f6:	f0 91 2f 02 	lds	r31, 0x022F
     8fa:	96 89       	ldd	r25, Z+22	; 0x16
     8fc:	8e 85       	ldd	r24, Y+14	; 0x0e
     8fe:	98 17       	cp	r25, r24
     900:	10 f4       	brcc	.+4      	; 0x906 <xTaskGenericCreate+0x1b6>
     902:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
     906:	8d 81       	ldd	r24, Y+5	; 0x05
     908:	64 96       	adiw	r28, 0x14	; 20
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
     914:	cf 91       	pop	r28
     916:	df 91       	pop	r29
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	df 90       	pop	r13
     922:	cf 90       	pop	r12
     924:	bf 90       	pop	r11
     926:	af 90       	pop	r10
     928:	08 95       	ret

0000092a <vTaskDelayUntil>:
     92a:	df 93       	push	r29
     92c:	cf 93       	push	r28
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	28 97       	sbiw	r28, 0x08	; 8
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	9e 83       	std	Y+6, r25	; 0x06
     940:	8d 83       	std	Y+5, r24	; 0x05
     942:	78 87       	std	Y+8, r23	; 0x08
     944:	6f 83       	std	Y+7, r22	; 0x07
     946:	19 82       	std	Y+1, r1	; 0x01
     948:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <vTaskSuspendAll>
     94c:	ed 81       	ldd	r30, Y+5	; 0x05
     94e:	fe 81       	ldd	r31, Y+6	; 0x06
     950:	20 81       	ld	r18, Z
     952:	31 81       	ldd	r19, Z+1	; 0x01
     954:	8f 81       	ldd	r24, Y+7	; 0x07
     956:	98 85       	ldd	r25, Y+8	; 0x08
     958:	82 0f       	add	r24, r18
     95a:	93 1f       	adc	r25, r19
     95c:	9c 83       	std	Y+4, r25	; 0x04
     95e:	8b 83       	std	Y+3, r24	; 0x03
     960:	ed 81       	ldd	r30, Y+5	; 0x05
     962:	fe 81       	ldd	r31, Y+6	; 0x06
     964:	20 81       	ld	r18, Z
     966:	31 81       	ldd	r19, Z+1	; 0x01
     968:	80 91 31 02 	lds	r24, 0x0231
     96c:	90 91 32 02 	lds	r25, 0x0232
     970:	82 17       	cp	r24, r18
     972:	93 07       	cpc	r25, r19
     974:	a8 f4       	brcc	.+42     	; 0x9a0 <vTaskDelayUntil+0x76>
     976:	ed 81       	ldd	r30, Y+5	; 0x05
     978:	fe 81       	ldd	r31, Y+6	; 0x06
     97a:	20 81       	ld	r18, Z
     97c:	31 81       	ldd	r19, Z+1	; 0x01
     97e:	8b 81       	ldd	r24, Y+3	; 0x03
     980:	9c 81       	ldd	r25, Y+4	; 0x04
     982:	82 17       	cp	r24, r18
     984:	93 07       	cpc	r25, r19
     986:	00 f5       	brcc	.+64     	; 0x9c8 <vTaskDelayUntil+0x9e>
     988:	20 91 31 02 	lds	r18, 0x0231
     98c:	30 91 32 02 	lds	r19, 0x0232
     990:	8b 81       	ldd	r24, Y+3	; 0x03
     992:	9c 81       	ldd	r25, Y+4	; 0x04
     994:	28 17       	cp	r18, r24
     996:	39 07       	cpc	r19, r25
     998:	b8 f4       	brcc	.+46     	; 0x9c8 <vTaskDelayUntil+0x9e>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	14 c0       	rjmp	.+40     	; 0x9c8 <vTaskDelayUntil+0x9e>
     9a0:	ed 81       	ldd	r30, Y+5	; 0x05
     9a2:	fe 81       	ldd	r31, Y+6	; 0x06
     9a4:	20 81       	ld	r18, Z
     9a6:	31 81       	ldd	r19, Z+1	; 0x01
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	9c 81       	ldd	r25, Y+4	; 0x04
     9ac:	82 17       	cp	r24, r18
     9ae:	93 07       	cpc	r25, r19
     9b0:	48 f0       	brcs	.+18     	; 0x9c4 <vTaskDelayUntil+0x9a>
     9b2:	20 91 31 02 	lds	r18, 0x0231
     9b6:	30 91 32 02 	lds	r19, 0x0232
     9ba:	8b 81       	ldd	r24, Y+3	; 0x03
     9bc:	9c 81       	ldd	r25, Y+4	; 0x04
     9be:	28 17       	cp	r18, r24
     9c0:	39 07       	cpc	r19, r25
     9c2:	10 f4       	brcc	.+4      	; 0x9c8 <vTaskDelayUntil+0x9e>
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	89 83       	std	Y+1, r24	; 0x01
     9c8:	ed 81       	ldd	r30, Y+5	; 0x05
     9ca:	fe 81       	ldd	r31, Y+6	; 0x06
     9cc:	8b 81       	ldd	r24, Y+3	; 0x03
     9ce:	9c 81       	ldd	r25, Y+4	; 0x04
     9d0:	91 83       	std	Z+1, r25	; 0x01
     9d2:	80 83       	st	Z, r24
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	88 23       	and	r24, r24
     9d8:	59 f0       	breq	.+22     	; 0x9f0 <vTaskDelayUntil+0xc6>
     9da:	80 91 2e 02 	lds	r24, 0x022E
     9de:	90 91 2f 02 	lds	r25, 0x022F
     9e2:	02 96       	adiw	r24, 0x02	; 2
     9e4:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
     9e8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ea:	9c 81       	ldd	r25, Y+4	; 0x04
     9ec:	0e 94 ed 0a 	call	0x15da	; 0x15da <prvAddCurrentTaskToDelayedList>
     9f0:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <xTaskResumeAll>
     9f4:	8a 83       	std	Y+2, r24	; 0x02
     9f6:	8a 81       	ldd	r24, Y+2	; 0x02
     9f8:	88 23       	and	r24, r24
     9fa:	11 f4       	brne	.+4      	; 0xa00 <vTaskDelayUntil+0xd6>
     9fc:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
     a00:	28 96       	adiw	r28, 0x08	; 8
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	cf 91       	pop	r28
     a0e:	df 91       	pop	r29
     a10:	08 95       	ret

00000a12 <vTaskDelay>:
     a12:	df 93       	push	r29
     a14:	cf 93       	push	r28
     a16:	00 d0       	rcall	.+0      	; 0xa18 <vTaskDelay+0x6>
     a18:	0f 92       	push	r0
     a1a:	0f 92       	push	r0
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
     a20:	9d 83       	std	Y+5, r25	; 0x05
     a22:	8c 83       	std	Y+4, r24	; 0x04
     a24:	19 82       	std	Y+1, r1	; 0x01
     a26:	8c 81       	ldd	r24, Y+4	; 0x04
     a28:	9d 81       	ldd	r25, Y+5	; 0x05
     a2a:	00 97       	sbiw	r24, 0x00	; 0
     a2c:	d1 f0       	breq	.+52     	; 0xa62 <vTaskDelay+0x50>
     a2e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <vTaskSuspendAll>
     a32:	20 91 31 02 	lds	r18, 0x0231
     a36:	30 91 32 02 	lds	r19, 0x0232
     a3a:	8c 81       	ldd	r24, Y+4	; 0x04
     a3c:	9d 81       	ldd	r25, Y+5	; 0x05
     a3e:	82 0f       	add	r24, r18
     a40:	93 1f       	adc	r25, r19
     a42:	9b 83       	std	Y+3, r25	; 0x03
     a44:	8a 83       	std	Y+2, r24	; 0x02
     a46:	80 91 2e 02 	lds	r24, 0x022E
     a4a:	90 91 2f 02 	lds	r25, 0x022F
     a4e:	02 96       	adiw	r24, 0x02	; 2
     a50:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
     a54:	8a 81       	ldd	r24, Y+2	; 0x02
     a56:	9b 81       	ldd	r25, Y+3	; 0x03
     a58:	0e 94 ed 0a 	call	0x15da	; 0x15da <prvAddCurrentTaskToDelayedList>
     a5c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <xTaskResumeAll>
     a60:	89 83       	std	Y+1, r24	; 0x01
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	88 23       	and	r24, r24
     a66:	11 f4       	brne	.+4      	; 0xa6c <vTaskDelay+0x5a>
     a68:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	cf 91       	pop	r28
     a78:	df 91       	pop	r29
     a7a:	08 95       	ret

00000a7c <vTaskSuspend>:
     a7c:	df 93       	push	r29
     a7e:	cf 93       	push	r28
     a80:	00 d0       	rcall	.+0      	; 0xa82 <vTaskSuspend+0x6>
     a82:	00 d0       	rcall	.+0      	; 0xa84 <vTaskSuspend+0x8>
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	9c 83       	std	Y+4, r25	; 0x04
     a8a:	8b 83       	std	Y+3, r24	; 0x03
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	0f 92       	push	r0
     a92:	20 91 2e 02 	lds	r18, 0x022E
     a96:	30 91 2f 02 	lds	r19, 0x022F
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	9c 81       	ldd	r25, Y+4	; 0x04
     a9e:	82 17       	cp	r24, r18
     aa0:	93 07       	cpc	r25, r19
     aa2:	11 f4       	brne	.+4      	; 0xaa8 <vTaskSuspend+0x2c>
     aa4:	1c 82       	std	Y+4, r1	; 0x04
     aa6:	1b 82       	std	Y+3, r1	; 0x03
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	9c 81       	ldd	r25, Y+4	; 0x04
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	39 f4       	brne	.+14     	; 0xabe <vTaskSuspend+0x42>
     ab0:	80 91 2e 02 	lds	r24, 0x022E
     ab4:	90 91 2f 02 	lds	r25, 0x022F
     ab8:	9e 83       	std	Y+6, r25	; 0x06
     aba:	8d 83       	std	Y+5, r24	; 0x05
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <vTaskSuspend+0x4a>
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	9c 81       	ldd	r25, Y+4	; 0x04
     ac2:	9e 83       	std	Y+6, r25	; 0x06
     ac4:	8d 83       	std	Y+5, r24	; 0x05
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	9a 83       	std	Y+2, r25	; 0x02
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	9a 81       	ldd	r25, Y+2	; 0x02
     ad2:	02 96       	adiw	r24, 0x02	; 2
     ad4:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
     ad8:	e9 81       	ldd	r30, Y+1	; 0x01
     ada:	fa 81       	ldd	r31, Y+2	; 0x02
     adc:	84 89       	ldd	r24, Z+20	; 0x14
     ade:	95 89       	ldd	r25, Z+21	; 0x15
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	29 f0       	breq	.+10     	; 0xaee <vTaskSuspend+0x72>
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	0c 96       	adiw	r24, 0x0c	; 12
     aea:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	9a 81       	ldd	r25, Y+2	; 0x02
     af2:	9c 01       	movw	r18, r24
     af4:	2e 5f       	subi	r18, 0xFE	; 254
     af6:	3f 4f       	sbci	r19, 0xFF	; 255
     af8:	8e e7       	ldi	r24, 0x7E	; 126
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	b9 01       	movw	r22, r18
     afe:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	8b 81       	ldd	r24, Y+3	; 0x03
     b08:	9c 81       	ldd	r25, Y+4	; 0x04
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	a1 f4       	brne	.+40     	; 0xb36 <vTaskSuspend+0xba>
     b0e:	80 91 35 02 	lds	r24, 0x0235
     b12:	88 23       	and	r24, r24
     b14:	19 f0       	breq	.+6      	; 0xb1c <vTaskSuspend+0xa0>
     b16:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
     b1a:	0d c0       	rjmp	.+26     	; 0xb36 <vTaskSuspend+0xba>
     b1c:	90 91 7e 02 	lds	r25, 0x027E
     b20:	80 91 30 02 	lds	r24, 0x0230
     b24:	98 17       	cp	r25, r24
     b26:	29 f4       	brne	.+10     	; 0xb32 <vTaskSuspend+0xb6>
     b28:	10 92 2f 02 	sts	0x022F, r1
     b2c:	10 92 2e 02 	sts	0x022E, r1
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <vTaskSuspend+0xba>
     b32:	0e 94 7f 08 	call	0x10fe	; 0x10fe <vTaskSwitchContext>
     b36:	26 96       	adiw	r28, 0x06	; 6
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <xTaskIsTaskSuspended>:
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <xTaskIsTaskSuspended+0x6>
     b4e:	0f 92       	push	r0
     b50:	0f 92       	push	r0
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	9d 83       	std	Y+5, r25	; 0x05
     b58:	8c 83       	std	Y+4, r24	; 0x04
     b5a:	1b 82       	std	Y+3, r1	; 0x03
     b5c:	8c 81       	ldd	r24, Y+4	; 0x04
     b5e:	9d 81       	ldd	r25, Y+5	; 0x05
     b60:	9a 83       	std	Y+2, r25	; 0x02
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	e9 81       	ldd	r30, Y+1	; 0x01
     b66:	fa 81       	ldd	r31, Y+2	; 0x02
     b68:	82 85       	ldd	r24, Z+10	; 0x0a
     b6a:	93 85       	ldd	r25, Z+11	; 0x0b
     b6c:	22 e0       	ldi	r18, 0x02	; 2
     b6e:	8e 37       	cpi	r24, 0x7E	; 126
     b70:	92 07       	cpc	r25, r18
     b72:	81 f4       	brne	.+32     	; 0xb94 <xTaskIsTaskSuspended+0x4c>
     b74:	e9 81       	ldd	r30, Y+1	; 0x01
     b76:	fa 81       	ldd	r31, Y+2	; 0x02
     b78:	84 89       	ldd	r24, Z+20	; 0x14
     b7a:	95 89       	ldd	r25, Z+21	; 0x15
     b7c:	22 e0       	ldi	r18, 0x02	; 2
     b7e:	85 37       	cpi	r24, 0x75	; 117
     b80:	92 07       	cpc	r25, r18
     b82:	41 f0       	breq	.+16     	; 0xb94 <xTaskIsTaskSuspended+0x4c>
     b84:	e9 81       	ldd	r30, Y+1	; 0x01
     b86:	fa 81       	ldd	r31, Y+2	; 0x02
     b88:	84 89       	ldd	r24, Z+20	; 0x14
     b8a:	95 89       	ldd	r25, Z+21	; 0x15
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	11 f4       	brne	.+4      	; 0xb94 <xTaskIsTaskSuspended+0x4c>
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	8b 83       	std	Y+3, r24	; 0x03
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <vTaskResume>:
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	00 d0       	rcall	.+0      	; 0xbac <vTaskResume+0x6>
     bac:	0f 92       	push	r0
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	9c 83       	std	Y+4, r25	; 0x04
     bb4:	8b 83       	std	Y+3, r24	; 0x03
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	9c 81       	ldd	r25, Y+4	; 0x04
     bba:	9a 83       	std	Y+2, r25	; 0x02
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	9a 81       	ldd	r25, Y+2	; 0x02
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <vTaskResume+0x22>
     bc6:	4c c0       	rjmp	.+152    	; 0xc60 <vTaskResume+0xba>
     bc8:	20 91 2e 02 	lds	r18, 0x022E
     bcc:	30 91 2f 02 	lds	r19, 0x022F
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	9a 81       	ldd	r25, Y+2	; 0x02
     bd4:	82 17       	cp	r24, r18
     bd6:	93 07       	cpc	r25, r19
     bd8:	09 f4       	brne	.+2      	; 0xbdc <vTaskResume+0x36>
     bda:	42 c0       	rjmp	.+132    	; 0xc60 <vTaskResume+0xba>
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	0f 92       	push	r0
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	0e 94 a4 05 	call	0xb48	; 0xb48 <xTaskIsTaskSuspended>
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	b9 f5       	brne	.+110    	; 0xc5c <vTaskResume+0xb6>
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	02 96       	adiw	r24, 0x02	; 2
     bf4:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
     bf8:	e9 81       	ldd	r30, Y+1	; 0x01
     bfa:	fa 81       	ldd	r31, Y+2	; 0x02
     bfc:	96 89       	ldd	r25, Z+22	; 0x16
     bfe:	80 91 34 02 	lds	r24, 0x0234
     c02:	89 17       	cp	r24, r25
     c04:	28 f4       	brcc	.+10     	; 0xc10 <vTaskResume+0x6a>
     c06:	e9 81       	ldd	r30, Y+1	; 0x01
     c08:	fa 81       	ldd	r31, Y+2	; 0x02
     c0a:	86 89       	ldd	r24, Z+22	; 0x16
     c0c:	80 93 34 02 	sts	0x0234, r24
     c10:	e9 81       	ldd	r30, Y+1	; 0x01
     c12:	fa 81       	ldd	r31, Y+2	; 0x02
     c14:	86 89       	ldd	r24, Z+22	; 0x16
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	c9 01       	movw	r24, r18
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	82 0f       	add	r24, r18
     c2a:	93 1f       	adc	r25, r19
     c2c:	ac 01       	movw	r20, r24
     c2e:	45 5c       	subi	r20, 0xC5	; 197
     c30:	5d 4f       	sbci	r21, 0xFD	; 253
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
     c36:	9c 01       	movw	r18, r24
     c38:	2e 5f       	subi	r18, 0xFE	; 254
     c3a:	3f 4f       	sbci	r19, 0xFF	; 255
     c3c:	ca 01       	movw	r24, r20
     c3e:	b9 01       	movw	r22, r18
     c40:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
     c44:	e9 81       	ldd	r30, Y+1	; 0x01
     c46:	fa 81       	ldd	r31, Y+2	; 0x02
     c48:	96 89       	ldd	r25, Z+22	; 0x16
     c4a:	e0 91 2e 02 	lds	r30, 0x022E
     c4e:	f0 91 2f 02 	lds	r31, 0x022F
     c52:	86 89       	ldd	r24, Z+22	; 0x16
     c54:	98 17       	cp	r25, r24
     c56:	10 f0       	brcs	.+4      	; 0xc5c <vTaskResume+0xb6>
     c58:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
     c5c:	0f 90       	pop	r0
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <xTaskResumeFromISR>:
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	00 d0       	rcall	.+0      	; 0xc74 <xTaskResumeFromISR+0x6>
     c74:	00 d0       	rcall	.+0      	; 0xc76 <xTaskResumeFromISR+0x8>
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	9e 83       	std	Y+6, r25	; 0x06
     c7c:	8d 83       	std	Y+5, r24	; 0x05
     c7e:	1c 82       	std	Y+4, r1	; 0x04
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	9e 81       	ldd	r25, Y+6	; 0x06
     c84:	9b 83       	std	Y+3, r25	; 0x03
     c86:	8a 83       	std	Y+2, r24	; 0x02
     c88:	19 82       	std	Y+1, r1	; 0x01
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	9b 81       	ldd	r25, Y+3	; 0x03
     c8e:	0e 94 a4 05 	call	0xb48	; 0xb48 <xTaskIsTaskSuspended>
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	09 f0       	breq	.+2      	; 0xc98 <xTaskResumeFromISR+0x2a>
     c96:	47 c0       	rjmp	.+142    	; 0xd26 <xTaskResumeFromISR+0xb8>
     c98:	80 91 36 02 	lds	r24, 0x0236
     c9c:	88 23       	and	r24, r24
     c9e:	c9 f5       	brne	.+114    	; 0xd12 <xTaskResumeFromISR+0xa4>
     ca0:	ea 81       	ldd	r30, Y+2	; 0x02
     ca2:	fb 81       	ldd	r31, Y+3	; 0x03
     ca4:	96 89       	ldd	r25, Z+22	; 0x16
     ca6:	e0 91 2e 02 	lds	r30, 0x022E
     caa:	f0 91 2f 02 	lds	r31, 0x022F
     cae:	86 89       	ldd	r24, Z+22	; 0x16
     cb0:	1c 82       	std	Y+4, r1	; 0x04
     cb2:	98 17       	cp	r25, r24
     cb4:	10 f0       	brcs	.+4      	; 0xcba <xTaskResumeFromISR+0x4c>
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	8c 83       	std	Y+4, r24	; 0x04
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	9b 81       	ldd	r25, Y+3	; 0x03
     cbe:	02 96       	adiw	r24, 0x02	; 2
     cc0:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
     cc4:	ea 81       	ldd	r30, Y+2	; 0x02
     cc6:	fb 81       	ldd	r31, Y+3	; 0x03
     cc8:	96 89       	ldd	r25, Z+22	; 0x16
     cca:	80 91 34 02 	lds	r24, 0x0234
     cce:	89 17       	cp	r24, r25
     cd0:	28 f4       	brcc	.+10     	; 0xcdc <xTaskResumeFromISR+0x6e>
     cd2:	ea 81       	ldd	r30, Y+2	; 0x02
     cd4:	fb 81       	ldd	r31, Y+3	; 0x03
     cd6:	86 89       	ldd	r24, Z+22	; 0x16
     cd8:	80 93 34 02 	sts	0x0234, r24
     cdc:	ea 81       	ldd	r30, Y+2	; 0x02
     cde:	fb 81       	ldd	r31, Y+3	; 0x03
     ce0:	86 89       	ldd	r24, Z+22	; 0x16
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	c9 01       	movw	r24, r18
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	82 0f       	add	r24, r18
     cf6:	93 1f       	adc	r25, r19
     cf8:	ac 01       	movw	r20, r24
     cfa:	45 5c       	subi	r20, 0xC5	; 197
     cfc:	5d 4f       	sbci	r21, 0xFD	; 253
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	9c 01       	movw	r18, r24
     d04:	2e 5f       	subi	r18, 0xFE	; 254
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	ca 01       	movw	r24, r20
     d0a:	b9 01       	movw	r22, r18
     d0c:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <xTaskResumeFromISR+0xb8>
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	9b 81       	ldd	r25, Y+3	; 0x03
     d16:	9c 01       	movw	r18, r24
     d18:	24 5f       	subi	r18, 0xF4	; 244
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	85 e7       	ldi	r24, 0x75	; 117
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	b9 01       	movw	r22, r18
     d22:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
     d26:	8c 81       	ldd	r24, Y+4	; 0x04
     d28:	26 96       	adiw	r28, 0x06	; 6
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <vTaskStartScheduler>:
     d3a:	af 92       	push	r10
     d3c:	bf 92       	push	r11
     d3e:	cf 92       	push	r12
     d40:	df 92       	push	r13
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	0f 92       	push	r0
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	8d e3       	ldi	r24, 0x3D	; 61
     d54:	9a e0       	ldi	r25, 0x0A	; 10
     d56:	22 e0       	ldi	r18, 0x02	; 2
     d58:	32 e0       	ldi	r19, 0x02	; 2
     d5a:	b9 01       	movw	r22, r18
     d5c:	45 e5       	ldi	r20, 0x55	; 85
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	00 e0       	ldi	r16, 0x00	; 0
     d66:	ee 24       	eor	r14, r14
     d68:	ff 24       	eor	r15, r15
     d6a:	cc 24       	eor	r12, r12
     d6c:	dd 24       	eor	r13, r13
     d6e:	aa 24       	eor	r10, r10
     d70:	bb 24       	eor	r11, r11
     d72:	0e 94 a8 03 	call	0x750	; 0x750 <xTaskGenericCreate>
     d76:	89 83       	std	Y+1, r24	; 0x01
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	51 f4       	brne	.+20     	; 0xd92 <vTaskStartScheduler+0x58>
     d7e:	f8 94       	cli
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	80 93 35 02 	sts	0x0235, r24
     d86:	10 92 32 02 	sts	0x0232, r1
     d8a:	10 92 31 02 	sts	0x0231, r1
     d8e:	0e 94 27 18 	call	0x304e	; 0x304e <xPortStartScheduler>
     d92:	0f 90       	pop	r0
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	bf 90       	pop	r11
     da4:	af 90       	pop	r10
     da6:	08 95       	ret

00000da8 <vTaskEndScheduler>:
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	f8 94       	cli
     db2:	10 92 35 02 	sts	0x0235, r1
     db6:	0e 94 60 18 	call	0x30c0	; 0x30c0 <vPortEndScheduler>
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <vTaskSuspendAll>:
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	80 91 36 02 	lds	r24, 0x0236
     dcc:	8f 5f       	subi	r24, 0xFF	; 255
     dce:	80 93 36 02 	sts	0x0236, r24
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <xTaskResumeAll>:
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	00 d0       	rcall	.+0      	; 0xdde <xTaskResumeAll+0x6>
     dde:	0f 92       	push	r0
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	1a 82       	std	Y+2, r1	; 0x02
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	0f 92       	push	r0
     dec:	80 91 36 02 	lds	r24, 0x0236
     df0:	81 50       	subi	r24, 0x01	; 1
     df2:	80 93 36 02 	sts	0x0236, r24
     df6:	80 91 36 02 	lds	r24, 0x0236
     dfa:	88 23       	and	r24, r24
     dfc:	09 f0       	breq	.+2      	; 0xe00 <xTaskResumeAll+0x28>
     dfe:	6c c0       	rjmp	.+216    	; 0xed8 <xTaskResumeAll+0x100>
     e00:	80 91 30 02 	lds	r24, 0x0230
     e04:	88 23       	and	r24, r24
     e06:	09 f4       	brne	.+2      	; 0xe0a <xTaskResumeAll+0x32>
     e08:	67 c0       	rjmp	.+206    	; 0xed8 <xTaskResumeAll+0x100>
     e0a:	19 82       	std	Y+1, r1	; 0x01
     e0c:	41 c0       	rjmp	.+130    	; 0xe90 <xTaskResumeAll+0xb8>
     e0e:	e0 91 7a 02 	lds	r30, 0x027A
     e12:	f0 91 7b 02 	lds	r31, 0x027B
     e16:	86 81       	ldd	r24, Z+6	; 0x06
     e18:	97 81       	ldd	r25, Z+7	; 0x07
     e1a:	9c 83       	std	Y+4, r25	; 0x04
     e1c:	8b 83       	std	Y+3, r24	; 0x03
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	0c 96       	adiw	r24, 0x0c	; 12
     e24:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	02 96       	adiw	r24, 0x02	; 2
     e2e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
     e32:	eb 81       	ldd	r30, Y+3	; 0x03
     e34:	fc 81       	ldd	r31, Y+4	; 0x04
     e36:	96 89       	ldd	r25, Z+22	; 0x16
     e38:	80 91 34 02 	lds	r24, 0x0234
     e3c:	89 17       	cp	r24, r25
     e3e:	28 f4       	brcc	.+10     	; 0xe4a <xTaskResumeAll+0x72>
     e40:	eb 81       	ldd	r30, Y+3	; 0x03
     e42:	fc 81       	ldd	r31, Y+4	; 0x04
     e44:	86 89       	ldd	r24, Z+22	; 0x16
     e46:	80 93 34 02 	sts	0x0234, r24
     e4a:	eb 81       	ldd	r30, Y+3	; 0x03
     e4c:	fc 81       	ldd	r31, Y+4	; 0x04
     e4e:	86 89       	ldd	r24, Z+22	; 0x16
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	c9 01       	movw	r24, r18
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	82 0f       	add	r24, r18
     e64:	93 1f       	adc	r25, r19
     e66:	85 5c       	subi	r24, 0xC5	; 197
     e68:	9d 4f       	sbci	r25, 0xFD	; 253
     e6a:	2b 81       	ldd	r18, Y+3	; 0x03
     e6c:	3c 81       	ldd	r19, Y+4	; 0x04
     e6e:	2e 5f       	subi	r18, 0xFE	; 254
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	b9 01       	movw	r22, r18
     e74:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
     e78:	eb 81       	ldd	r30, Y+3	; 0x03
     e7a:	fc 81       	ldd	r31, Y+4	; 0x04
     e7c:	96 89       	ldd	r25, Z+22	; 0x16
     e7e:	e0 91 2e 02 	lds	r30, 0x022E
     e82:	f0 91 2f 02 	lds	r31, 0x022F
     e86:	86 89       	ldd	r24, Z+22	; 0x16
     e88:	98 17       	cp	r25, r24
     e8a:	10 f0       	brcs	.+4      	; 0xe90 <xTaskResumeAll+0xb8>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	80 91 75 02 	lds	r24, 0x0275
     e94:	88 23       	and	r24, r24
     e96:	09 f0       	breq	.+2      	; 0xe9a <xTaskResumeAll+0xc2>
     e98:	ba cf       	rjmp	.-140    	; 0xe0e <xTaskResumeAll+0x36>
     e9a:	80 91 37 02 	lds	r24, 0x0237
     e9e:	88 23       	and	r24, r24
     ea0:	71 f0       	breq	.+28     	; 0xebe <xTaskResumeAll+0xe6>
     ea2:	07 c0       	rjmp	.+14     	; 0xeb2 <xTaskResumeAll+0xda>
     ea4:	0e 94 ab 07 	call	0xf56	; 0xf56 <vTaskIncrementTick>
     ea8:	80 91 37 02 	lds	r24, 0x0237
     eac:	81 50       	subi	r24, 0x01	; 1
     eae:	80 93 37 02 	sts	0x0237, r24
     eb2:	80 91 37 02 	lds	r24, 0x0237
     eb6:	88 23       	and	r24, r24
     eb8:	a9 f7       	brne	.-22     	; 0xea4 <xTaskResumeAll+0xcc>
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	21 f0       	breq	.+8      	; 0xecc <xTaskResumeAll+0xf4>
     ec4:	80 91 38 02 	lds	r24, 0x0238
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	31 f4       	brne	.+12     	; 0xed8 <xTaskResumeAll+0x100>
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	8a 83       	std	Y+2, r24	; 0x02
     ed0:	10 92 38 02 	sts	0x0238, r1
     ed4:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <xTaskGetTickCount>:
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	0f 92       	push	r0
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	0f 92       	push	r0
     efe:	80 91 31 02 	lds	r24, 0x0231
     f02:	90 91 32 02 	lds	r25, 0x0232
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <xTaskGetTickCountFromISR>:
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <xTaskGetTickCountFromISR+0x6>
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	19 82       	std	Y+1, r1	; 0x01
     f28:	80 91 31 02 	lds	r24, 0x0231
     f2c:	90 91 32 02 	lds	r25, 0x0232
     f30:	9b 83       	std	Y+3, r25	; 0x03
     f32:	8a 83       	std	Y+2, r24	; 0x02
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	9b 81       	ldd	r25, Y+3	; 0x03
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <uxTaskGetNumberOfTasks>:
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	80 91 30 02 	lds	r24, 0x0230
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <vTaskIncrementTick>:
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <vTaskIncrementTick+0x6>
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <vTaskIncrementTick+0x8>
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	80 91 36 02 	lds	r24, 0x0236
     f66:	88 23       	and	r24, r24
     f68:	09 f0       	breq	.+2      	; 0xf6c <vTaskIncrementTick+0x16>
     f6a:	bb c0       	rjmp	.+374    	; 0x10e2 <vTaskIncrementTick+0x18c>
     f6c:	80 91 31 02 	lds	r24, 0x0231
     f70:	90 91 32 02 	lds	r25, 0x0232
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	90 93 32 02 	sts	0x0232, r25
     f7a:	80 93 31 02 	sts	0x0231, r24
     f7e:	80 91 31 02 	lds	r24, 0x0231
     f82:	90 91 32 02 	lds	r25, 0x0232
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	d1 f5       	brne	.+116    	; 0xffe <vTaskIncrementTick+0xa8>
     f8a:	80 91 71 02 	lds	r24, 0x0271
     f8e:	90 91 72 02 	lds	r25, 0x0272
     f92:	9c 83       	std	Y+4, r25	; 0x04
     f94:	8b 83       	std	Y+3, r24	; 0x03
     f96:	80 91 73 02 	lds	r24, 0x0273
     f9a:	90 91 74 02 	lds	r25, 0x0274
     f9e:	90 93 72 02 	sts	0x0272, r25
     fa2:	80 93 71 02 	sts	0x0271, r24
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	9c 81       	ldd	r25, Y+4	; 0x04
     faa:	90 93 74 02 	sts	0x0274, r25
     fae:	80 93 73 02 	sts	0x0273, r24
     fb2:	80 91 39 02 	lds	r24, 0x0239
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	80 93 39 02 	sts	0x0239, r24
     fbc:	e0 91 71 02 	lds	r30, 0x0271
     fc0:	f0 91 72 02 	lds	r31, 0x0272
     fc4:	80 81       	ld	r24, Z
     fc6:	88 23       	and	r24, r24
     fc8:	39 f4       	brne	.+14     	; 0xfd8 <vTaskIncrementTick+0x82>
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	9f ef       	ldi	r25, 0xFF	; 255
     fce:	90 93 01 02 	sts	0x0201, r25
     fd2:	80 93 00 02 	sts	0x0200, r24
     fd6:	13 c0       	rjmp	.+38     	; 0xffe <vTaskIncrementTick+0xa8>
     fd8:	e0 91 71 02 	lds	r30, 0x0271
     fdc:	f0 91 72 02 	lds	r31, 0x0272
     fe0:	05 80       	ldd	r0, Z+5	; 0x05
     fe2:	f6 81       	ldd	r31, Z+6	; 0x06
     fe4:	e0 2d       	mov	r30, r0
     fe6:	86 81       	ldd	r24, Z+6	; 0x06
     fe8:	97 81       	ldd	r25, Z+7	; 0x07
     fea:	9e 83       	std	Y+6, r25	; 0x06
     fec:	8d 83       	std	Y+5, r24	; 0x05
     fee:	ed 81       	ldd	r30, Y+5	; 0x05
     ff0:	fe 81       	ldd	r31, Y+6	; 0x06
     ff2:	82 81       	ldd	r24, Z+2	; 0x02
     ff4:	93 81       	ldd	r25, Z+3	; 0x03
     ff6:	90 93 01 02 	sts	0x0201, r25
     ffa:	80 93 00 02 	sts	0x0200, r24
     ffe:	20 91 31 02 	lds	r18, 0x0231
    1002:	30 91 32 02 	lds	r19, 0x0232
    1006:	80 91 00 02 	lds	r24, 0x0200
    100a:	90 91 01 02 	lds	r25, 0x0201
    100e:	28 17       	cp	r18, r24
    1010:	39 07       	cpc	r19, r25
    1012:	08 f4       	brcc	.+2      	; 0x1016 <vTaskIncrementTick+0xc0>
    1014:	6b c0       	rjmp	.+214    	; 0x10ec <vTaskIncrementTick+0x196>
    1016:	e0 91 71 02 	lds	r30, 0x0271
    101a:	f0 91 72 02 	lds	r31, 0x0272
    101e:	80 81       	ld	r24, Z
    1020:	88 23       	and	r24, r24
    1022:	39 f4       	brne	.+14     	; 0x1032 <vTaskIncrementTick+0xdc>
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	9f ef       	ldi	r25, 0xFF	; 255
    1028:	90 93 01 02 	sts	0x0201, r25
    102c:	80 93 00 02 	sts	0x0200, r24
    1030:	5d c0       	rjmp	.+186    	; 0x10ec <vTaskIncrementTick+0x196>
    1032:	e0 91 71 02 	lds	r30, 0x0271
    1036:	f0 91 72 02 	lds	r31, 0x0272
    103a:	05 80       	ldd	r0, Z+5	; 0x05
    103c:	f6 81       	ldd	r31, Z+6	; 0x06
    103e:	e0 2d       	mov	r30, r0
    1040:	86 81       	ldd	r24, Z+6	; 0x06
    1042:	97 81       	ldd	r25, Z+7	; 0x07
    1044:	9e 83       	std	Y+6, r25	; 0x06
    1046:	8d 83       	std	Y+5, r24	; 0x05
    1048:	ed 81       	ldd	r30, Y+5	; 0x05
    104a:	fe 81       	ldd	r31, Y+6	; 0x06
    104c:	82 81       	ldd	r24, Z+2	; 0x02
    104e:	93 81       	ldd	r25, Z+3	; 0x03
    1050:	9a 83       	std	Y+2, r25	; 0x02
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	20 91 31 02 	lds	r18, 0x0231
    1058:	30 91 32 02 	lds	r19, 0x0232
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	28 17       	cp	r18, r24
    1062:	39 07       	cpc	r19, r25
    1064:	38 f4       	brcc	.+14     	; 0x1074 <vTaskIncrementTick+0x11e>
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	90 93 01 02 	sts	0x0201, r25
    106e:	80 93 00 02 	sts	0x0200, r24
    1072:	3c c0       	rjmp	.+120    	; 0x10ec <vTaskIncrementTick+0x196>
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	02 96       	adiw	r24, 0x02	; 2
    107a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    107e:	ed 81       	ldd	r30, Y+5	; 0x05
    1080:	fe 81       	ldd	r31, Y+6	; 0x06
    1082:	84 89       	ldd	r24, Z+20	; 0x14
    1084:	95 89       	ldd	r25, Z+21	; 0x15
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	29 f0       	breq	.+10     	; 0x1094 <vTaskIncrementTick+0x13e>
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	0c 96       	adiw	r24, 0x0c	; 12
    1090:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    1094:	ed 81       	ldd	r30, Y+5	; 0x05
    1096:	fe 81       	ldd	r31, Y+6	; 0x06
    1098:	96 89       	ldd	r25, Z+22	; 0x16
    109a:	80 91 34 02 	lds	r24, 0x0234
    109e:	89 17       	cp	r24, r25
    10a0:	28 f4       	brcc	.+10     	; 0x10ac <vTaskIncrementTick+0x156>
    10a2:	ed 81       	ldd	r30, Y+5	; 0x05
    10a4:	fe 81       	ldd	r31, Y+6	; 0x06
    10a6:	86 89       	ldd	r24, Z+22	; 0x16
    10a8:	80 93 34 02 	sts	0x0234, r24
    10ac:	ed 81       	ldd	r30, Y+5	; 0x05
    10ae:	fe 81       	ldd	r31, Y+6	; 0x06
    10b0:	86 89       	ldd	r24, Z+22	; 0x16
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	c9 01       	movw	r24, r18
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	82 0f       	add	r24, r18
    10c6:	93 1f       	adc	r25, r19
    10c8:	ac 01       	movw	r20, r24
    10ca:	45 5c       	subi	r20, 0xC5	; 197
    10cc:	5d 4f       	sbci	r21, 0xFD	; 253
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	9c 01       	movw	r18, r24
    10d4:	2e 5f       	subi	r18, 0xFE	; 254
    10d6:	3f 4f       	sbci	r19, 0xFF	; 255
    10d8:	ca 01       	movw	r24, r20
    10da:	b9 01       	movw	r22, r18
    10dc:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
    10e0:	9a cf       	rjmp	.-204    	; 0x1016 <vTaskIncrementTick+0xc0>
    10e2:	80 91 37 02 	lds	r24, 0x0237
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	80 93 37 02 	sts	0x0237, r24
    10ec:	26 96       	adiw	r28, 0x06	; 6
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <vTaskSwitchContext>:
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	0f 92       	push	r0
    1104:	0f 92       	push	r0
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	80 91 36 02 	lds	r24, 0x0236
    110e:	88 23       	and	r24, r24
    1110:	21 f0       	breq	.+8      	; 0x111a <vTaskSwitchContext+0x1c>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 38 02 	sts	0x0238, r24
    1118:	70 c0       	rjmp	.+224    	; 0x11fa <vTaskSwitchContext+0xfc>
    111a:	e0 91 2e 02 	lds	r30, 0x022E
    111e:	f0 91 2f 02 	lds	r31, 0x022F
    1122:	20 81       	ld	r18, Z
    1124:	31 81       	ldd	r19, Z+1	; 0x01
    1126:	e0 91 2e 02 	lds	r30, 0x022E
    112a:	f0 91 2f 02 	lds	r31, 0x022F
    112e:	87 89       	ldd	r24, Z+23	; 0x17
    1130:	90 8d       	ldd	r25, Z+24	; 0x18
    1132:	82 17       	cp	r24, r18
    1134:	93 07       	cpc	r25, r19
    1136:	90 f0       	brcs	.+36     	; 0x115c <vTaskSwitchContext+0x5e>
    1138:	80 91 2e 02 	lds	r24, 0x022E
    113c:	90 91 2f 02 	lds	r25, 0x022F
    1140:	20 91 2e 02 	lds	r18, 0x022E
    1144:	30 91 2f 02 	lds	r19, 0x022F
    1148:	27 5e       	subi	r18, 0xE7	; 231
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	b9 01       	movw	r22, r18
    114e:	0e 94 c3 00 	call	0x186	; 0x186 <vApplicationStackOverflowHook>
    1152:	80 91 34 02 	lds	r24, 0x0234
    1156:	81 50       	subi	r24, 0x01	; 1
    1158:	80 93 34 02 	sts	0x0234, r24
    115c:	80 91 34 02 	lds	r24, 0x0234
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	c9 01       	movw	r24, r18
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	82 0f       	add	r24, r18
    1174:	93 1f       	adc	r25, r19
    1176:	fc 01       	movw	r30, r24
    1178:	e5 5c       	subi	r30, 0xC5	; 197
    117a:	fd 4f       	sbci	r31, 0xFD	; 253
    117c:	80 81       	ld	r24, Z
    117e:	88 23       	and	r24, r24
    1180:	41 f3       	breq	.-48     	; 0x1152 <vTaskSwitchContext+0x54>
    1182:	80 91 34 02 	lds	r24, 0x0234
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	c9 01       	movw	r24, r18
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	82 0f       	add	r24, r18
    119a:	93 1f       	adc	r25, r19
    119c:	85 5c       	subi	r24, 0xC5	; 197
    119e:	9d 4f       	sbci	r25, 0xFD	; 253
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	e9 81       	ldd	r30, Y+1	; 0x01
    11a6:	fa 81       	ldd	r31, Y+2	; 0x02
    11a8:	01 80       	ldd	r0, Z+1	; 0x01
    11aa:	f2 81       	ldd	r31, Z+2	; 0x02
    11ac:	e0 2d       	mov	r30, r0
    11ae:	82 81       	ldd	r24, Z+2	; 0x02
    11b0:	93 81       	ldd	r25, Z+3	; 0x03
    11b2:	e9 81       	ldd	r30, Y+1	; 0x01
    11b4:	fa 81       	ldd	r31, Y+2	; 0x02
    11b6:	92 83       	std	Z+2, r25	; 0x02
    11b8:	81 83       	std	Z+1, r24	; 0x01
    11ba:	e9 81       	ldd	r30, Y+1	; 0x01
    11bc:	fa 81       	ldd	r31, Y+2	; 0x02
    11be:	21 81       	ldd	r18, Z+1	; 0x01
    11c0:	32 81       	ldd	r19, Z+2	; 0x02
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	03 96       	adiw	r24, 0x03	; 3
    11c8:	28 17       	cp	r18, r24
    11ca:	39 07       	cpc	r19, r25
    11cc:	59 f4       	brne	.+22     	; 0x11e4 <vTaskSwitchContext+0xe6>
    11ce:	e9 81       	ldd	r30, Y+1	; 0x01
    11d0:	fa 81       	ldd	r31, Y+2	; 0x02
    11d2:	01 80       	ldd	r0, Z+1	; 0x01
    11d4:	f2 81       	ldd	r31, Z+2	; 0x02
    11d6:	e0 2d       	mov	r30, r0
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	e9 81       	ldd	r30, Y+1	; 0x01
    11de:	fa 81       	ldd	r31, Y+2	; 0x02
    11e0:	92 83       	std	Z+2, r25	; 0x02
    11e2:	81 83       	std	Z+1, r24	; 0x01
    11e4:	e9 81       	ldd	r30, Y+1	; 0x01
    11e6:	fa 81       	ldd	r31, Y+2	; 0x02
    11e8:	01 80       	ldd	r0, Z+1	; 0x01
    11ea:	f2 81       	ldd	r31, Z+2	; 0x02
    11ec:	e0 2d       	mov	r30, r0
    11ee:	86 81       	ldd	r24, Z+6	; 0x06
    11f0:	97 81       	ldd	r25, Z+7	; 0x07
    11f2:	90 93 2f 02 	sts	0x022F, r25
    11f6:	80 93 2e 02 	sts	0x022E, r24
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <vTaskPlaceOnEventList>:
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <vTaskPlaceOnEventList+0x6>
    120a:	00 d0       	rcall	.+0      	; 0x120c <vTaskPlaceOnEventList+0x8>
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	9c 83       	std	Y+4, r25	; 0x04
    1212:	8b 83       	std	Y+3, r24	; 0x03
    1214:	7e 83       	std	Y+6, r23	; 0x06
    1216:	6d 83       	std	Y+5, r22	; 0x05
    1218:	4b 81       	ldd	r20, Y+3	; 0x03
    121a:	5c 81       	ldd	r21, Y+4	; 0x04
    121c:	80 91 2e 02 	lds	r24, 0x022E
    1220:	90 91 2f 02 	lds	r25, 0x022F
    1224:	9c 01       	movw	r18, r24
    1226:	24 5f       	subi	r18, 0xF4	; 244
    1228:	3f 4f       	sbci	r19, 0xFF	; 255
    122a:	ca 01       	movw	r24, r20
    122c:	b9 01       	movw	r22, r18
    122e:	0e 94 8e 12 	call	0x251c	; 0x251c <vListInsert>
    1232:	80 91 2e 02 	lds	r24, 0x022E
    1236:	90 91 2f 02 	lds	r25, 0x022F
    123a:	02 96       	adiw	r24, 0x02	; 2
    123c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	2f ef       	ldi	r18, 0xFF	; 255
    1246:	8f 3f       	cpi	r24, 0xFF	; 255
    1248:	92 07       	cpc	r25, r18
    124a:	69 f4       	brne	.+26     	; 0x1266 <vTaskPlaceOnEventList+0x62>
    124c:	80 91 2e 02 	lds	r24, 0x022E
    1250:	90 91 2f 02 	lds	r25, 0x022F
    1254:	9c 01       	movw	r18, r24
    1256:	2e 5f       	subi	r18, 0xFE	; 254
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	8e e7       	ldi	r24, 0x7E	; 126
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	b9 01       	movw	r22, r18
    1260:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
    1264:	0e c0       	rjmp	.+28     	; 0x1282 <vTaskPlaceOnEventList+0x7e>
    1266:	20 91 31 02 	lds	r18, 0x0231
    126a:	30 91 32 02 	lds	r19, 0x0232
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	82 0f       	add	r24, r18
    1274:	93 1f       	adc	r25, r19
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	9a 81       	ldd	r25, Y+2	; 0x02
    127e:	0e 94 ed 0a 	call	0x15da	; 0x15da <prvAddCurrentTaskToDelayedList>
    1282:	26 96       	adiw	r28, 0x06	; 6
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <xTaskRemoveFromEventList>:
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <xTaskRemoveFromEventList+0x6>
    129a:	0f 92       	push	r0
    129c:	0f 92       	push	r0
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	9d 83       	std	Y+5, r25	; 0x05
    12a4:	8c 83       	std	Y+4, r24	; 0x04
    12a6:	ec 81       	ldd	r30, Y+4	; 0x04
    12a8:	fd 81       	ldd	r31, Y+5	; 0x05
    12aa:	05 80       	ldd	r0, Z+5	; 0x05
    12ac:	f6 81       	ldd	r31, Z+6	; 0x06
    12ae:	e0 2d       	mov	r30, r0
    12b0:	86 81       	ldd	r24, Z+6	; 0x06
    12b2:	97 81       	ldd	r25, Z+7	; 0x07
    12b4:	9b 83       	std	Y+3, r25	; 0x03
    12b6:	8a 83       	std	Y+2, r24	; 0x02
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	9b 81       	ldd	r25, Y+3	; 0x03
    12bc:	0c 96       	adiw	r24, 0x0c	; 12
    12be:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    12c2:	80 91 36 02 	lds	r24, 0x0236
    12c6:	88 23       	and	r24, r24
    12c8:	61 f5       	brne	.+88     	; 0x1322 <xTaskRemoveFromEventList+0x8e>
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	9b 81       	ldd	r25, Y+3	; 0x03
    12ce:	02 96       	adiw	r24, 0x02	; 2
    12d0:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    12d4:	ea 81       	ldd	r30, Y+2	; 0x02
    12d6:	fb 81       	ldd	r31, Y+3	; 0x03
    12d8:	96 89       	ldd	r25, Z+22	; 0x16
    12da:	80 91 34 02 	lds	r24, 0x0234
    12de:	89 17       	cp	r24, r25
    12e0:	28 f4       	brcc	.+10     	; 0x12ec <xTaskRemoveFromEventList+0x58>
    12e2:	ea 81       	ldd	r30, Y+2	; 0x02
    12e4:	fb 81       	ldd	r31, Y+3	; 0x03
    12e6:	86 89       	ldd	r24, Z+22	; 0x16
    12e8:	80 93 34 02 	sts	0x0234, r24
    12ec:	ea 81       	ldd	r30, Y+2	; 0x02
    12ee:	fb 81       	ldd	r31, Y+3	; 0x03
    12f0:	86 89       	ldd	r24, Z+22	; 0x16
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	c9 01       	movw	r24, r18
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	82 0f       	add	r24, r18
    1306:	93 1f       	adc	r25, r19
    1308:	ac 01       	movw	r20, r24
    130a:	45 5c       	subi	r20, 0xC5	; 197
    130c:	5d 4f       	sbci	r21, 0xFD	; 253
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	9b 81       	ldd	r25, Y+3	; 0x03
    1312:	9c 01       	movw	r18, r24
    1314:	2e 5f       	subi	r18, 0xFE	; 254
    1316:	3f 4f       	sbci	r19, 0xFF	; 255
    1318:	ca 01       	movw	r24, r20
    131a:	b9 01       	movw	r22, r18
    131c:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
    1320:	0a c0       	rjmp	.+20     	; 0x1336 <xTaskRemoveFromEventList+0xa2>
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	9b 81       	ldd	r25, Y+3	; 0x03
    1326:	9c 01       	movw	r18, r24
    1328:	24 5f       	subi	r18, 0xF4	; 244
    132a:	3f 4f       	sbci	r19, 0xFF	; 255
    132c:	85 e7       	ldi	r24, 0x75	; 117
    132e:	92 e0       	ldi	r25, 0x02	; 2
    1330:	b9 01       	movw	r22, r18
    1332:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
    1336:	ea 81       	ldd	r30, Y+2	; 0x02
    1338:	fb 81       	ldd	r31, Y+3	; 0x03
    133a:	96 89       	ldd	r25, Z+22	; 0x16
    133c:	e0 91 2e 02 	lds	r30, 0x022E
    1340:	f0 91 2f 02 	lds	r31, 0x022F
    1344:	86 89       	ldd	r24, Z+22	; 0x16
    1346:	98 17       	cp	r25, r24
    1348:	18 f0       	brcs	.+6      	; 0x1350 <xTaskRemoveFromEventList+0xbc>
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <xTaskRemoveFromEventList+0xbe>
    1350:	19 82       	std	Y+1, r1	; 0x01
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <vTaskSetTimeOutState>:
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	0f 92       	push	r0
    136a:	0f 92       	push	r0
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	9a 83       	std	Y+2, r25	; 0x02
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	80 91 39 02 	lds	r24, 0x0239
    1378:	e9 81       	ldd	r30, Y+1	; 0x01
    137a:	fa 81       	ldd	r31, Y+2	; 0x02
    137c:	80 83       	st	Z, r24
    137e:	80 91 31 02 	lds	r24, 0x0231
    1382:	90 91 32 02 	lds	r25, 0x0232
    1386:	e9 81       	ldd	r30, Y+1	; 0x01
    1388:	fa 81       	ldd	r31, Y+2	; 0x02
    138a:	92 83       	std	Z+2, r25	; 0x02
    138c:	81 83       	std	Z+1, r24	; 0x01
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <xTaskCheckForTimeOut>:
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <xTaskCheckForTimeOut+0x6>
    139e:	0f 92       	push	r0
    13a0:	0f 92       	push	r0
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	9b 83       	std	Y+3, r25	; 0x03
    13a8:	8a 83       	std	Y+2, r24	; 0x02
    13aa:	7d 83       	std	Y+5, r23	; 0x05
    13ac:	6c 83       	std	Y+4, r22	; 0x04
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	0f 92       	push	r0
    13b4:	ec 81       	ldd	r30, Y+4	; 0x04
    13b6:	fd 81       	ldd	r31, Y+5	; 0x05
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	2f ef       	ldi	r18, 0xFF	; 255
    13be:	8f 3f       	cpi	r24, 0xFF	; 255
    13c0:	92 07       	cpc	r25, r18
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <xTaskCheckForTimeOut+0x30>
    13c4:	19 82       	std	Y+1, r1	; 0x01
    13c6:	44 c0       	rjmp	.+136    	; 0x1450 <xTaskCheckForTimeOut+0xb8>
    13c8:	ea 81       	ldd	r30, Y+2	; 0x02
    13ca:	fb 81       	ldd	r31, Y+3	; 0x03
    13cc:	90 81       	ld	r25, Z
    13ce:	80 91 39 02 	lds	r24, 0x0239
    13d2:	98 17       	cp	r25, r24
    13d4:	71 f0       	breq	.+28     	; 0x13f2 <xTaskCheckForTimeOut+0x5a>
    13d6:	ea 81       	ldd	r30, Y+2	; 0x02
    13d8:	fb 81       	ldd	r31, Y+3	; 0x03
    13da:	21 81       	ldd	r18, Z+1	; 0x01
    13dc:	32 81       	ldd	r19, Z+2	; 0x02
    13de:	80 91 31 02 	lds	r24, 0x0231
    13e2:	90 91 32 02 	lds	r25, 0x0232
    13e6:	82 17       	cp	r24, r18
    13e8:	93 07       	cpc	r25, r19
    13ea:	18 f0       	brcs	.+6      	; 0x13f2 <xTaskCheckForTimeOut+0x5a>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	2f c0       	rjmp	.+94     	; 0x1450 <xTaskCheckForTimeOut+0xb8>
    13f2:	20 91 31 02 	lds	r18, 0x0231
    13f6:	30 91 32 02 	lds	r19, 0x0232
    13fa:	ea 81       	ldd	r30, Y+2	; 0x02
    13fc:	fb 81       	ldd	r31, Y+3	; 0x03
    13fe:	81 81       	ldd	r24, Z+1	; 0x01
    1400:	92 81       	ldd	r25, Z+2	; 0x02
    1402:	28 1b       	sub	r18, r24
    1404:	39 0b       	sbc	r19, r25
    1406:	ec 81       	ldd	r30, Y+4	; 0x04
    1408:	fd 81       	ldd	r31, Y+5	; 0x05
    140a:	80 81       	ld	r24, Z
    140c:	91 81       	ldd	r25, Z+1	; 0x01
    140e:	28 17       	cp	r18, r24
    1410:	39 07       	cpc	r19, r25
    1412:	e0 f4       	brcc	.+56     	; 0x144c <xTaskCheckForTimeOut+0xb4>
    1414:	ec 81       	ldd	r30, Y+4	; 0x04
    1416:	fd 81       	ldd	r31, Y+5	; 0x05
    1418:	40 81       	ld	r20, Z
    141a:	51 81       	ldd	r21, Z+1	; 0x01
    141c:	ea 81       	ldd	r30, Y+2	; 0x02
    141e:	fb 81       	ldd	r31, Y+3	; 0x03
    1420:	21 81       	ldd	r18, Z+1	; 0x01
    1422:	32 81       	ldd	r19, Z+2	; 0x02
    1424:	80 91 31 02 	lds	r24, 0x0231
    1428:	90 91 32 02 	lds	r25, 0x0232
    142c:	b9 01       	movw	r22, r18
    142e:	68 1b       	sub	r22, r24
    1430:	79 0b       	sbc	r23, r25
    1432:	cb 01       	movw	r24, r22
    1434:	84 0f       	add	r24, r20
    1436:	95 1f       	adc	r25, r21
    1438:	ec 81       	ldd	r30, Y+4	; 0x04
    143a:	fd 81       	ldd	r31, Y+5	; 0x05
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	80 83       	st	Z, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	0e 94 b2 09 	call	0x1364	; 0x1364 <vTaskSetTimeOutState>
    1448:	19 82       	std	Y+1, r1	; 0x01
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <xTaskCheckForTimeOut+0xb8>
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <vTaskMissedYield>:
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	80 93 38 02 	sts	0x0238, r24
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <prvIdleTask>:
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	0f 92       	push	r0
    1480:	0f 92       	push	r0
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <prvCheckTasksWaitingTermination>
    148e:	80 91 3b 02 	lds	r24, 0x023B
    1492:	82 30       	cpi	r24, 0x02	; 2
    1494:	d0 f3       	brcs	.-12     	; 0x148a <prvIdleTask+0x10>
    1496:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
    149a:	f7 cf       	rjmp	.-18     	; 0x148a <prvIdleTask+0x10>

0000149c <prvInitialiseTCBVariables>:
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	29 97       	sbiw	r28, 0x09	; 9
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	7c 83       	std	Y+4, r23	; 0x04
    14ba:	6b 83       	std	Y+3, r22	; 0x03
    14bc:	4d 83       	std	Y+5, r20	; 0x05
    14be:	3f 83       	std	Y+7, r19	; 0x07
    14c0:	2e 83       	std	Y+6, r18	; 0x06
    14c2:	19 87       	std	Y+9, r17	; 0x09
    14c4:	08 87       	std	Y+8, r16	; 0x08
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ca:	49 96       	adiw	r24, 0x19	; 25
    14cc:	2b 81       	ldd	r18, Y+3	; 0x03
    14ce:	3c 81       	ldd	r19, Y+4	; 0x04
    14d0:	b9 01       	movw	r22, r18
    14d2:	40 e1       	ldi	r20, 0x10	; 16
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <strncpy>
    14da:	e9 81       	ldd	r30, Y+1	; 0x01
    14dc:	fa 81       	ldd	r31, Y+2	; 0x02
    14de:	10 a6       	std	Z+40, r1	; 0x28
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	10 f0       	brcs	.+4      	; 0x14ea <prvInitialiseTCBVariables+0x4e>
    14e6:	83 e0       	ldi	r24, 0x03	; 3
    14e8:	8d 83       	std	Y+5, r24	; 0x05
    14ea:	e9 81       	ldd	r30, Y+1	; 0x01
    14ec:	fa 81       	ldd	r31, Y+2	; 0x02
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	86 8b       	std	Z+22, r24	; 0x16
    14f2:	e9 81       	ldd	r30, Y+1	; 0x01
    14f4:	fa 81       	ldd	r31, Y+2	; 0x02
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	81 a7       	std	Z+41, r24	; 0x29
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	02 96       	adiw	r24, 0x02	; 2
    1500:	0e 94 32 12 	call	0x2464	; 0x2464 <vListInitialiseItem>
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	9a 81       	ldd	r25, Y+2	; 0x02
    1508:	0c 96       	adiw	r24, 0x0c	; 12
    150a:	0e 94 32 12 	call	0x2464	; 0x2464 <vListInitialiseItem>
    150e:	e9 81       	ldd	r30, Y+1	; 0x01
    1510:	fa 81       	ldd	r31, Y+2	; 0x02
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	91 87       	std	Z+9, r25	; 0x09
    1518:	80 87       	std	Z+8, r24	; 0x08
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	84 e0       	ldi	r24, 0x04	; 4
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	82 1b       	sub	r24, r18
    1526:	93 0b       	sbc	r25, r19
    1528:	e9 81       	ldd	r30, Y+1	; 0x01
    152a:	fa 81       	ldd	r31, Y+2	; 0x02
    152c:	95 87       	std	Z+13, r25	; 0x0d
    152e:	84 87       	std	Z+12, r24	; 0x0c
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	93 8b       	std	Z+19, r25	; 0x13
    153a:	82 8b       	std	Z+18, r24	; 0x12
    153c:	29 96       	adiw	r28, 0x09	; 9
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	08 95       	ret

00001552 <prvInitialiseTaskLists>:
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	0f 92       	push	r0
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	19 82       	std	Y+1, r1	; 0x01
    155e:	13 c0       	rjmp	.+38     	; 0x1586 <prvInitialiseTaskLists+0x34>
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	c9 01       	movw	r24, r18
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	82 0f       	add	r24, r18
    1576:	93 1f       	adc	r25, r19
    1578:	85 5c       	subi	r24, 0xC5	; 197
    157a:	9d 4f       	sbci	r25, 0xFD	; 253
    157c:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	8f 5f       	subi	r24, 0xFF	; 255
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	84 30       	cpi	r24, 0x04	; 4
    158a:	50 f3       	brcs	.-44     	; 0x1560 <prvInitialiseTaskLists+0xe>
    158c:	8f e5       	ldi	r24, 0x5F	; 95
    158e:	92 e0       	ldi	r25, 0x02	; 2
    1590:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1594:	88 e6       	ldi	r24, 0x68	; 104
    1596:	92 e0       	ldi	r25, 0x02	; 2
    1598:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    159c:	85 e7       	ldi	r24, 0x75	; 117
    159e:	92 e0       	ldi	r25, 0x02	; 2
    15a0:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    15a4:	8e e7       	ldi	r24, 0x7E	; 126
    15a6:	92 e0       	ldi	r25, 0x02	; 2
    15a8:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    15ac:	8f e5       	ldi	r24, 0x5F	; 95
    15ae:	92 e0       	ldi	r25, 0x02	; 2
    15b0:	90 93 72 02 	sts	0x0272, r25
    15b4:	80 93 71 02 	sts	0x0271, r24
    15b8:	88 e6       	ldi	r24, 0x68	; 104
    15ba:	92 e0       	ldi	r25, 0x02	; 2
    15bc:	90 93 74 02 	sts	0x0274, r25
    15c0:	80 93 73 02 	sts	0x0273, r24
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <prvCheckTasksWaitingTermination>:
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <prvAddCurrentTaskToDelayedList>:
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	0f 92       	push	r0
    15e0:	0f 92       	push	r0
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	9a 83       	std	Y+2, r25	; 0x02
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	e0 91 2e 02 	lds	r30, 0x022E
    15ee:	f0 91 2f 02 	lds	r31, 0x022F
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	9a 81       	ldd	r25, Y+2	; 0x02
    15f6:	93 83       	std	Z+3, r25	; 0x03
    15f8:	82 83       	std	Z+2, r24	; 0x02
    15fa:	20 91 31 02 	lds	r18, 0x0231
    15fe:	30 91 32 02 	lds	r19, 0x0232
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	9a 81       	ldd	r25, Y+2	; 0x02
    1606:	82 17       	cp	r24, r18
    1608:	93 07       	cpc	r25, r19
    160a:	70 f4       	brcc	.+28     	; 0x1628 <prvAddCurrentTaskToDelayedList+0x4e>
    160c:	80 91 73 02 	lds	r24, 0x0273
    1610:	90 91 74 02 	lds	r25, 0x0274
    1614:	20 91 2e 02 	lds	r18, 0x022E
    1618:	30 91 2f 02 	lds	r19, 0x022F
    161c:	2e 5f       	subi	r18, 0xFE	; 254
    161e:	3f 4f       	sbci	r19, 0xFF	; 255
    1620:	b9 01       	movw	r22, r18
    1622:	0e 94 8e 12 	call	0x251c	; 0x251c <vListInsert>
    1626:	1e c0       	rjmp	.+60     	; 0x1664 <prvAddCurrentTaskToDelayedList+0x8a>
    1628:	40 91 71 02 	lds	r20, 0x0271
    162c:	50 91 72 02 	lds	r21, 0x0272
    1630:	80 91 2e 02 	lds	r24, 0x022E
    1634:	90 91 2f 02 	lds	r25, 0x022F
    1638:	9c 01       	movw	r18, r24
    163a:	2e 5f       	subi	r18, 0xFE	; 254
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	ca 01       	movw	r24, r20
    1640:	b9 01       	movw	r22, r18
    1642:	0e 94 8e 12 	call	0x251c	; 0x251c <vListInsert>
    1646:	20 91 00 02 	lds	r18, 0x0200
    164a:	30 91 01 02 	lds	r19, 0x0201
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	82 17       	cp	r24, r18
    1654:	93 07       	cpc	r25, r19
    1656:	30 f4       	brcc	.+12     	; 0x1664 <prvAddCurrentTaskToDelayedList+0x8a>
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	90 93 01 02 	sts	0x0201, r25
    1660:	80 93 00 02 	sts	0x0200, r24
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <prvAllocateTCBAndStack>:
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	28 97       	sbiw	r28, 0x08	; 8
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	9c 83       	std	Y+4, r25	; 0x04
    1684:	8b 83       	std	Y+3, r24	; 0x03
    1686:	7e 83       	std	Y+6, r23	; 0x06
    1688:	6d 83       	std	Y+5, r22	; 0x05
    168a:	8a e2       	ldi	r24, 0x2A	; 42
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <pvPortMalloc>
    1692:	9a 83       	std	Y+2, r25	; 0x02
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	69 f1       	breq	.+90     	; 0x16f8 <prvAllocateTCBAndStack+0x8a>
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	9e 81       	ldd	r25, Y+6	; 0x06
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	39 f4       	brne	.+14     	; 0x16b4 <prvAllocateTCBAndStack+0x46>
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	9c 81       	ldd	r25, Y+4	; 0x04
    16aa:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <pvPortMalloc>
    16ae:	98 87       	std	Y+8, r25	; 0x08
    16b0:	8f 83       	std	Y+7, r24	; 0x07
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <prvAllocateTCBAndStack+0x4e>
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	98 87       	std	Y+8, r25	; 0x08
    16ba:	8f 83       	std	Y+7, r24	; 0x07
    16bc:	e9 81       	ldd	r30, Y+1	; 0x01
    16be:	fa 81       	ldd	r31, Y+2	; 0x02
    16c0:	8f 81       	ldd	r24, Y+7	; 0x07
    16c2:	98 85       	ldd	r25, Y+8	; 0x08
    16c4:	90 8f       	std	Z+24, r25	; 0x18
    16c6:	87 8b       	std	Z+23, r24	; 0x17
    16c8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ca:	fa 81       	ldd	r31, Y+2	; 0x02
    16cc:	87 89       	ldd	r24, Z+23	; 0x17
    16ce:	90 8d       	ldd	r25, Z+24	; 0x18
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	39 f4       	brne	.+14     	; 0x16e2 <prvAllocateTCBAndStack+0x74>
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	0e 94 65 16 	call	0x2cca	; 0x2cca <vPortFree>
    16dc:	1a 82       	std	Y+2, r1	; 0x02
    16de:	19 82       	std	Y+1, r1	; 0x01
    16e0:	0b c0       	rjmp	.+22     	; 0x16f8 <prvAllocateTCBAndStack+0x8a>
    16e2:	e9 81       	ldd	r30, Y+1	; 0x01
    16e4:	fa 81       	ldd	r31, Y+2	; 0x02
    16e6:	87 89       	ldd	r24, Z+23	; 0x17
    16e8:	90 8d       	ldd	r25, Z+24	; 0x18
    16ea:	2b 81       	ldd	r18, Y+3	; 0x03
    16ec:	3c 81       	ldd	r19, Y+4	; 0x04
    16ee:	65 ea       	ldi	r22, 0xA5	; 165
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	a9 01       	movw	r20, r18
    16f4:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <memset>
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	28 96       	adiw	r28, 0x08	; 8
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <usTaskCheckFreeStackSpace>:
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	00 d0       	rcall	.+0      	; 0x1714 <usTaskCheckFreeStackSpace+0x6>
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	1c 82       	std	Y+4, r1	; 0x04
    1720:	1b 82       	std	Y+3, r1	; 0x03
    1722:	0a c0       	rjmp	.+20     	; 0x1738 <usTaskCheckFreeStackSpace+0x2a>
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	9a 81       	ldd	r25, Y+2	; 0x02
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	9c 83       	std	Y+4, r25	; 0x04
    1736:	8b 83       	std	Y+3, r24	; 0x03
    1738:	e9 81       	ldd	r30, Y+1	; 0x01
    173a:	fa 81       	ldd	r31, Y+2	; 0x02
    173c:	80 81       	ld	r24, Z
    173e:	85 3a       	cpi	r24, 0xA5	; 165
    1740:	89 f3       	breq	.-30     	; 0x1724 <usTaskCheckFreeStackSpace+0x16>
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <uxTaskGetStackHighWaterMark>:
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	29 97       	sbiw	r28, 0x09	; 9
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	9f 83       	std	Y+7, r25	; 0x07
    176a:	8e 83       	std	Y+6, r24	; 0x06
    176c:	8e 81       	ldd	r24, Y+6	; 0x06
    176e:	9f 81       	ldd	r25, Y+7	; 0x07
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	39 f4       	brne	.+14     	; 0x1782 <uxTaskGetStackHighWaterMark+0x2e>
    1774:	80 91 2e 02 	lds	r24, 0x022E
    1778:	90 91 2f 02 	lds	r25, 0x022F
    177c:	99 87       	std	Y+9, r25	; 0x09
    177e:	88 87       	std	Y+8, r24	; 0x08
    1780:	04 c0       	rjmp	.+8      	; 0x178a <uxTaskGetStackHighWaterMark+0x36>
    1782:	8e 81       	ldd	r24, Y+6	; 0x06
    1784:	9f 81       	ldd	r25, Y+7	; 0x07
    1786:	99 87       	std	Y+9, r25	; 0x09
    1788:	88 87       	std	Y+8, r24	; 0x08
    178a:	88 85       	ldd	r24, Y+8	; 0x08
    178c:	99 85       	ldd	r25, Y+9	; 0x09
    178e:	9d 83       	std	Y+5, r25	; 0x05
    1790:	8c 83       	std	Y+4, r24	; 0x04
    1792:	ec 81       	ldd	r30, Y+4	; 0x04
    1794:	fd 81       	ldd	r31, Y+5	; 0x05
    1796:	87 89       	ldd	r24, Z+23	; 0x17
    1798:	90 8d       	ldd	r25, Z+24	; 0x18
    179a:	9b 83       	std	Y+3, r25	; 0x03
    179c:	8a 83       	std	Y+2, r24	; 0x02
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	9b 81       	ldd	r25, Y+3	; 0x03
    17a2:	0e 94 87 0b 	call	0x170e	; 0x170e <usTaskCheckFreeStackSpace>
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	29 96       	adiw	r28, 0x09	; 9
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <xTaskGetCurrentTaskHandle>:
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	0f 92       	push	r0
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	80 91 2e 02 	lds	r24, 0x022E
    17cc:	90 91 2f 02 	lds	r25, 0x022F
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <vTaskPriorityInherit>:
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <vTaskPriorityInherit+0x6>
    17e8:	0f 92       	push	r0
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	9c 83       	std	Y+4, r25	; 0x04
    17f0:	8b 83       	std	Y+3, r24	; 0x03
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	09 f4       	brne	.+2      	; 0x1804 <vTaskPriorityInherit+0x22>
    1802:	6d c0       	rjmp	.+218    	; 0x18de <vTaskPriorityInherit+0xfc>
    1804:	e9 81       	ldd	r30, Y+1	; 0x01
    1806:	fa 81       	ldd	r31, Y+2	; 0x02
    1808:	96 89       	ldd	r25, Z+22	; 0x16
    180a:	e0 91 2e 02 	lds	r30, 0x022E
    180e:	f0 91 2f 02 	lds	r31, 0x022F
    1812:	86 89       	ldd	r24, Z+22	; 0x16
    1814:	98 17       	cp	r25, r24
    1816:	08 f0       	brcs	.+2      	; 0x181a <vTaskPriorityInherit+0x38>
    1818:	62 c0       	rjmp	.+196    	; 0x18de <vTaskPriorityInherit+0xfc>
    181a:	e0 91 2e 02 	lds	r30, 0x022E
    181e:	f0 91 2f 02 	lds	r31, 0x022F
    1822:	86 89       	ldd	r24, Z+22	; 0x16
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	84 e0       	ldi	r24, 0x04	; 4
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	82 1b       	sub	r24, r18
    182e:	93 0b       	sbc	r25, r19
    1830:	e9 81       	ldd	r30, Y+1	; 0x01
    1832:	fa 81       	ldd	r31, Y+2	; 0x02
    1834:	95 87       	std	Z+13, r25	; 0x0d
    1836:	84 87       	std	Z+12, r24	; 0x0c
    1838:	e9 81       	ldd	r30, Y+1	; 0x01
    183a:	fa 81       	ldd	r31, Y+2	; 0x02
    183c:	42 85       	ldd	r20, Z+10	; 0x0a
    183e:	53 85       	ldd	r21, Z+11	; 0x0b
    1840:	e9 81       	ldd	r30, Y+1	; 0x01
    1842:	fa 81       	ldd	r31, Y+2	; 0x02
    1844:	86 89       	ldd	r24, Z+22	; 0x16
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	c9 01       	movw	r24, r18
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	82 0f       	add	r24, r18
    185a:	93 1f       	adc	r25, r19
    185c:	85 5c       	subi	r24, 0xC5	; 197
    185e:	9d 4f       	sbci	r25, 0xFD	; 253
    1860:	48 17       	cp	r20, r24
    1862:	59 07       	cpc	r21, r25
    1864:	a1 f5       	brne	.+104    	; 0x18ce <vTaskPriorityInherit+0xec>
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	02 96       	adiw	r24, 0x02	; 2
    186c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    1870:	e0 91 2e 02 	lds	r30, 0x022E
    1874:	f0 91 2f 02 	lds	r31, 0x022F
    1878:	86 89       	ldd	r24, Z+22	; 0x16
    187a:	e9 81       	ldd	r30, Y+1	; 0x01
    187c:	fa 81       	ldd	r31, Y+2	; 0x02
    187e:	86 8b       	std	Z+22, r24	; 0x16
    1880:	e9 81       	ldd	r30, Y+1	; 0x01
    1882:	fa 81       	ldd	r31, Y+2	; 0x02
    1884:	96 89       	ldd	r25, Z+22	; 0x16
    1886:	80 91 34 02 	lds	r24, 0x0234
    188a:	89 17       	cp	r24, r25
    188c:	28 f4       	brcc	.+10     	; 0x1898 <vTaskPriorityInherit+0xb6>
    188e:	e9 81       	ldd	r30, Y+1	; 0x01
    1890:	fa 81       	ldd	r31, Y+2	; 0x02
    1892:	86 89       	ldd	r24, Z+22	; 0x16
    1894:	80 93 34 02 	sts	0x0234, r24
    1898:	e9 81       	ldd	r30, Y+1	; 0x01
    189a:	fa 81       	ldd	r31, Y+2	; 0x02
    189c:	86 89       	ldd	r24, Z+22	; 0x16
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	c9 01       	movw	r24, r18
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	82 0f       	add	r24, r18
    18b2:	93 1f       	adc	r25, r19
    18b4:	ac 01       	movw	r20, r24
    18b6:	45 5c       	subi	r20, 0xC5	; 197
    18b8:	5d 4f       	sbci	r21, 0xFD	; 253
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	9a 81       	ldd	r25, Y+2	; 0x02
    18be:	9c 01       	movw	r18, r24
    18c0:	2e 5f       	subi	r18, 0xFE	; 254
    18c2:	3f 4f       	sbci	r19, 0xFF	; 255
    18c4:	ca 01       	movw	r24, r20
    18c6:	b9 01       	movw	r22, r18
    18c8:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
    18cc:	08 c0       	rjmp	.+16     	; 0x18de <vTaskPriorityInherit+0xfc>
    18ce:	e0 91 2e 02 	lds	r30, 0x022E
    18d2:	f0 91 2f 02 	lds	r31, 0x022F
    18d6:	86 89       	ldd	r24, Z+22	; 0x16
    18d8:	e9 81       	ldd	r30, Y+1	; 0x01
    18da:	fa 81       	ldd	r31, Y+2	; 0x02
    18dc:	86 8b       	std	Z+22, r24	; 0x16
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <vTaskPriorityDisinherit>:
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <vTaskPriorityDisinherit+0x6>
    18f2:	0f 92       	push	r0
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	8b 83       	std	Y+3, r24	; 0x03
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	09 f4       	brne	.+2      	; 0x190e <vTaskPriorityDisinherit+0x22>
    190c:	47 c0       	rjmp	.+142    	; 0x199c <vTaskPriorityDisinherit+0xb0>
    190e:	e9 81       	ldd	r30, Y+1	; 0x01
    1910:	fa 81       	ldd	r31, Y+2	; 0x02
    1912:	96 89       	ldd	r25, Z+22	; 0x16
    1914:	e9 81       	ldd	r30, Y+1	; 0x01
    1916:	fa 81       	ldd	r31, Y+2	; 0x02
    1918:	81 a5       	ldd	r24, Z+41	; 0x29
    191a:	98 17       	cp	r25, r24
    191c:	09 f4       	brne	.+2      	; 0x1920 <vTaskPriorityDisinherit+0x34>
    191e:	3e c0       	rjmp	.+124    	; 0x199c <vTaskPriorityDisinherit+0xb0>
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	9a 81       	ldd	r25, Y+2	; 0x02
    1924:	02 96       	adiw	r24, 0x02	; 2
    1926:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    192a:	e9 81       	ldd	r30, Y+1	; 0x01
    192c:	fa 81       	ldd	r31, Y+2	; 0x02
    192e:	81 a5       	ldd	r24, Z+41	; 0x29
    1930:	e9 81       	ldd	r30, Y+1	; 0x01
    1932:	fa 81       	ldd	r31, Y+2	; 0x02
    1934:	86 8b       	std	Z+22, r24	; 0x16
    1936:	e9 81       	ldd	r30, Y+1	; 0x01
    1938:	fa 81       	ldd	r31, Y+2	; 0x02
    193a:	86 89       	ldd	r24, Z+22	; 0x16
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	84 e0       	ldi	r24, 0x04	; 4
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	82 1b       	sub	r24, r18
    1946:	93 0b       	sbc	r25, r19
    1948:	e9 81       	ldd	r30, Y+1	; 0x01
    194a:	fa 81       	ldd	r31, Y+2	; 0x02
    194c:	95 87       	std	Z+13, r25	; 0x0d
    194e:	84 87       	std	Z+12, r24	; 0x0c
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	96 89       	ldd	r25, Z+22	; 0x16
    1956:	80 91 34 02 	lds	r24, 0x0234
    195a:	89 17       	cp	r24, r25
    195c:	28 f4       	brcc	.+10     	; 0x1968 <vTaskPriorityDisinherit+0x7c>
    195e:	e9 81       	ldd	r30, Y+1	; 0x01
    1960:	fa 81       	ldd	r31, Y+2	; 0x02
    1962:	86 89       	ldd	r24, Z+22	; 0x16
    1964:	80 93 34 02 	sts	0x0234, r24
    1968:	e9 81       	ldd	r30, Y+1	; 0x01
    196a:	fa 81       	ldd	r31, Y+2	; 0x02
    196c:	86 89       	ldd	r24, Z+22	; 0x16
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	c9 01       	movw	r24, r18
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	82 0f       	add	r24, r18
    1982:	93 1f       	adc	r25, r19
    1984:	ac 01       	movw	r20, r24
    1986:	45 5c       	subi	r20, 0xC5	; 197
    1988:	5d 4f       	sbci	r21, 0xFD	; 253
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	9a 81       	ldd	r25, Y+2	; 0x02
    198e:	9c 01       	movw	r18, r24
    1990:	2e 5f       	subi	r18, 0xFE	; 254
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	ca 01       	movw	r24, r20
    1996:	b9 01       	movw	r22, r18
    1998:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <xQueueGenericReset>:
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <xQueueGenericReset+0x6>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	6b 83       	std	Y+3, r22	; 0x03
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	0f 92       	push	r0
    19c0:	e9 81       	ldd	r30, Y+1	; 0x01
    19c2:	fa 81       	ldd	r31, Y+2	; 0x02
    19c4:	40 81       	ld	r20, Z
    19c6:	51 81       	ldd	r21, Z+1	; 0x01
    19c8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ca:	fa 81       	ldd	r31, Y+2	; 0x02
    19cc:	83 8d       	ldd	r24, Z+27	; 0x1b
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	e9 81       	ldd	r30, Y+1	; 0x01
    19d4:	fa 81       	ldd	r31, Y+2	; 0x02
    19d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    19d8:	88 2f       	mov	r24, r24
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	bc 01       	movw	r22, r24
    19de:	26 9f       	mul	r18, r22
    19e0:	c0 01       	movw	r24, r0
    19e2:	27 9f       	mul	r18, r23
    19e4:	90 0d       	add	r25, r0
    19e6:	36 9f       	mul	r19, r22
    19e8:	90 0d       	add	r25, r0
    19ea:	11 24       	eor	r1, r1
    19ec:	84 0f       	add	r24, r20
    19ee:	95 1f       	adc	r25, r21
    19f0:	e9 81       	ldd	r30, Y+1	; 0x01
    19f2:	fa 81       	ldd	r31, Y+2	; 0x02
    19f4:	93 83       	std	Z+3, r25	; 0x03
    19f6:	82 83       	std	Z+2, r24	; 0x02
    19f8:	e9 81       	ldd	r30, Y+1	; 0x01
    19fa:	fa 81       	ldd	r31, Y+2	; 0x02
    19fc:	12 8e       	std	Z+26, r1	; 0x1a
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	e9 81       	ldd	r30, Y+1	; 0x01
    1a08:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0a:	95 83       	std	Z+5, r25	; 0x05
    1a0c:	84 83       	std	Z+4, r24	; 0x04
    1a0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a10:	fa 81       	ldd	r31, Y+2	; 0x02
    1a12:	40 81       	ld	r20, Z
    1a14:	51 81       	ldd	r21, Z+1	; 0x01
    1a16:	e9 81       	ldd	r30, Y+1	; 0x01
    1a18:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1a:	83 8d       	ldd	r24, Z+27	; 0x1b
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9c 01       	movw	r18, r24
    1a22:	21 50       	subi	r18, 0x01	; 1
    1a24:	30 40       	sbci	r19, 0x00	; 0
    1a26:	e9 81       	ldd	r30, Y+1	; 0x01
    1a28:	fa 81       	ldd	r31, Y+2	; 0x02
    1a2a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	bc 01       	movw	r22, r24
    1a32:	26 9f       	mul	r18, r22
    1a34:	c0 01       	movw	r24, r0
    1a36:	27 9f       	mul	r18, r23
    1a38:	90 0d       	add	r25, r0
    1a3a:	36 9f       	mul	r19, r22
    1a3c:	90 0d       	add	r25, r0
    1a3e:	11 24       	eor	r1, r1
    1a40:	84 0f       	add	r24, r20
    1a42:	95 1f       	adc	r25, r21
    1a44:	e9 81       	ldd	r30, Y+1	; 0x01
    1a46:	fa 81       	ldd	r31, Y+2	; 0x02
    1a48:	97 83       	std	Z+7, r25	; 0x07
    1a4a:	86 83       	std	Z+6, r24	; 0x06
    1a4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	85 8f       	std	Z+29, r24	; 0x1d
    1a54:	e9 81       	ldd	r30, Y+1	; 0x01
    1a56:	fa 81       	ldd	r31, Y+2	; 0x02
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	86 8f       	std	Z+30, r24	; 0x1e
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	88 23       	and	r24, r24
    1a60:	79 f4       	brne	.+30     	; 0x1a80 <xQueueGenericReset+0xd6>
    1a62:	e9 81       	ldd	r30, Y+1	; 0x01
    1a64:	fa 81       	ldd	r31, Y+2	; 0x02
    1a66:	80 85       	ldd	r24, Z+8	; 0x08
    1a68:	88 23       	and	r24, r24
    1a6a:	a1 f0       	breq	.+40     	; 0x1a94 <xQueueGenericReset+0xea>
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	08 96       	adiw	r24, 0x08	; 8
    1a72:	0e 94 4a 09 	call	0x1294	; 0x1294 <xTaskRemoveFromEventList>
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	69 f4       	brne	.+26     	; 0x1a94 <xQueueGenericReset+0xea>
    1a7a:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
    1a7e:	0a c0       	rjmp	.+20     	; 0x1a94 <xQueueGenericReset+0xea>
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	08 96       	adiw	r24, 0x08	; 8
    1a86:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	41 96       	adiw	r24, 0x11	; 17
    1a90:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1a94:	0f 90       	pop	r0
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <xQueueGenericCreate>:
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	29 97       	sbiw	r28, 0x09	; 9
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	8f 83       	std	Y+7, r24	; 0x07
    1abc:	68 87       	std	Y+8, r22	; 0x08
    1abe:	49 87       	std	Y+9, r20	; 0x09
    1ac0:	1a 82       	std	Y+2, r1	; 0x02
    1ac2:	19 82       	std	Y+1, r1	; 0x01
    1ac4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac6:	88 23       	and	r24, r24
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <xQueueGenericCreate+0x26>
    1aca:	3f c0       	rjmp	.+126    	; 0x1b4a <xQueueGenericCreate+0xa4>
    1acc:	8f e1       	ldi	r24, 0x1F	; 31
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <pvPortMalloc>
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	a9 f1       	breq	.+106    	; 0x1b4a <xQueueGenericCreate+0xa4>
    1ae0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	88 85       	ldd	r24, Y+8	; 0x08
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	ac 01       	movw	r20, r24
    1aee:	24 9f       	mul	r18, r20
    1af0:	c0 01       	movw	r24, r0
    1af2:	25 9f       	mul	r18, r21
    1af4:	90 0d       	add	r25, r0
    1af6:	34 9f       	mul	r19, r20
    1af8:	90 0d       	add	r25, r0
    1afa:	11 24       	eor	r1, r1
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	9c 83       	std	Y+4, r25	; 0x04
    1b00:	8b 83       	std	Y+3, r24	; 0x03
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <pvPortMalloc>
    1b0a:	ed 81       	ldd	r30, Y+5	; 0x05
    1b0c:	fe 81       	ldd	r31, Y+6	; 0x06
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	80 83       	st	Z, r24
    1b12:	ed 81       	ldd	r30, Y+5	; 0x05
    1b14:	fe 81       	ldd	r31, Y+6	; 0x06
    1b16:	80 81       	ld	r24, Z
    1b18:	91 81       	ldd	r25, Z+1	; 0x01
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	91 f0       	breq	.+36     	; 0x1b42 <xQueueGenericCreate+0x9c>
    1b1e:	ed 81       	ldd	r30, Y+5	; 0x05
    1b20:	fe 81       	ldd	r31, Y+6	; 0x06
    1b22:	8f 81       	ldd	r24, Y+7	; 0x07
    1b24:	83 8f       	std	Z+27, r24	; 0x1b
    1b26:	ed 81       	ldd	r30, Y+5	; 0x05
    1b28:	fe 81       	ldd	r31, Y+6	; 0x06
    1b2a:	88 85       	ldd	r24, Y+8	; 0x08
    1b2c:	84 8f       	std	Z+28, r24	; 0x1c
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	61 e0       	ldi	r22, 0x01	; 1
    1b34:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <xQueueGenericReset>
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	04 c0       	rjmp	.+8      	; 0x1b4a <xQueueGenericCreate+0xa4>
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	0e 94 65 16 	call	0x2cca	; 0x2cca <vPortFree>
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	29 96       	adiw	r28, 0x09	; 9
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <xQueueCreateMutex>:
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <xQueueCreateMutex+0x6>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	8b 83       	std	Y+3, r24	; 0x03
    1b6c:	8f e1       	ldi	r24, 0x1F	; 31
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <pvPortMalloc>
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	a9 f1       	breq	.+106    	; 0x1bea <xQueueCreateMutex+0x8a>
    1b80:	e9 81       	ldd	r30, Y+1	; 0x01
    1b82:	fa 81       	ldd	r31, Y+2	; 0x02
    1b84:	13 82       	std	Z+3, r1	; 0x03
    1b86:	12 82       	std	Z+2, r1	; 0x02
    1b88:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8c:	11 82       	std	Z+1, r1	; 0x01
    1b8e:	10 82       	st	Z, r1
    1b90:	e9 81       	ldd	r30, Y+1	; 0x01
    1b92:	fa 81       	ldd	r31, Y+2	; 0x02
    1b94:	15 82       	std	Z+5, r1	; 0x05
    1b96:	14 82       	std	Z+4, r1	; 0x04
    1b98:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9c:	17 82       	std	Z+7, r1	; 0x07
    1b9e:	16 82       	std	Z+6, r1	; 0x06
    1ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba4:	12 8e       	std	Z+26, r1	; 0x1a
    1ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	83 8f       	std	Z+27, r24	; 0x1b
    1bae:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb2:	14 8e       	std	Z+28, r1	; 0x1c
    1bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	85 8f       	std	Z+29, r24	; 0x1d
    1bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc0:	8f ef       	ldi	r24, 0xFF	; 255
    1bc2:	86 8f       	std	Z+30, r24	; 0x1e
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	08 96       	adiw	r24, 0x08	; 8
    1bca:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	41 96       	adiw	r24, 0x11	; 17
    1bd4:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	9a 81       	ldd	r25, Y+2	; 0x02
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	50 e0       	ldi	r21, 0x00	; 0
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <xQueueGenericSend>
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <xQueueGenericSend>:
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	2c 97       	sbiw	r28, 0x0c	; 12
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
    1c12:	78 87       	std	Y+8, r23	; 0x08
    1c14:	6f 83       	std	Y+7, r22	; 0x07
    1c16:	5a 87       	std	Y+10, r21	; 0x0a
    1c18:	49 87       	std	Y+9, r20	; 0x09
    1c1a:	2b 87       	std	Y+11, r18	; 0x0b
    1c1c:	19 82       	std	Y+1, r1	; 0x01
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	0f 92       	push	r0
    1c24:	ed 81       	ldd	r30, Y+5	; 0x05
    1c26:	fe 81       	ldd	r31, Y+6	; 0x06
    1c28:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c2a:	ed 81       	ldd	r30, Y+5	; 0x05
    1c2c:	fe 81       	ldd	r31, Y+6	; 0x06
    1c2e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c30:	98 17       	cp	r25, r24
    1c32:	d8 f4       	brcc	.+54     	; 0x1c6a <xQueueGenericSend+0x70>
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	9e 81       	ldd	r25, Y+6	; 0x06
    1c38:	2f 81       	ldd	r18, Y+7	; 0x07
    1c3a:	38 85       	ldd	r19, Y+8	; 0x08
    1c3c:	b9 01       	movw	r22, r18
    1c3e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c40:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <prvCopyDataToQueue>
    1c44:	ed 81       	ldd	r30, Y+5	; 0x05
    1c46:	fe 81       	ldd	r31, Y+6	; 0x06
    1c48:	81 89       	ldd	r24, Z+17	; 0x11
    1c4a:	88 23       	and	r24, r24
    1c4c:	49 f0       	breq	.+18     	; 0x1c60 <xQueueGenericSend+0x66>
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	41 96       	adiw	r24, 0x11	; 17
    1c54:	0e 94 4a 09 	call	0x1294	; 0x1294 <xTaskRemoveFromEventList>
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	11 f4       	brne	.+4      	; 0x1c60 <xQueueGenericSend+0x66>
    1c5c:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	8c 87       	std	Y+12, r24	; 0x0c
    1c68:	5c c0       	rjmp	.+184    	; 0x1d22 <xQueueGenericSend+0x128>
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	21 f4       	brne	.+8      	; 0x1c7a <xQueueGenericSend+0x80>
    1c72:	0f 90       	pop	r0
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	1c 86       	std	Y+12, r1	; 0x0c
    1c78:	54 c0       	rjmp	.+168    	; 0x1d22 <xQueueGenericSend+0x128>
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	88 23       	and	r24, r24
    1c7e:	31 f4       	brne	.+12     	; 0x1c8c <xQueueGenericSend+0x92>
    1c80:	ce 01       	movw	r24, r28
    1c82:	02 96       	adiw	r24, 0x02	; 2
    1c84:	0e 94 b2 09 	call	0x1364	; 0x1364 <vTaskSetTimeOutState>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	0f 90       	pop	r0
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <vTaskSuspendAll>
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	0f 92       	push	r0
    1c9a:	ed 81       	ldd	r30, Y+5	; 0x05
    1c9c:	fe 81       	ldd	r31, Y+6	; 0x06
    1c9e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ca0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ca2:	19 f4       	brne	.+6      	; 0x1caa <xQueueGenericSend+0xb0>
    1ca4:	ed 81       	ldd	r30, Y+5	; 0x05
    1ca6:	fe 81       	ldd	r31, Y+6	; 0x06
    1ca8:	15 8e       	std	Z+29, r1	; 0x1d
    1caa:	ed 81       	ldd	r30, Y+5	; 0x05
    1cac:	fe 81       	ldd	r31, Y+6	; 0x06
    1cae:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb2:	19 f4       	brne	.+6      	; 0x1cba <xQueueGenericSend+0xc0>
    1cb4:	ed 81       	ldd	r30, Y+5	; 0x05
    1cb6:	fe 81       	ldd	r31, Y+6	; 0x06
    1cb8:	16 8e       	std	Z+30, r1	; 0x1e
    1cba:	0f 90       	pop	r0
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	02 96       	adiw	r24, 0x02	; 2
    1cc2:	9e 01       	movw	r18, r28
    1cc4:	27 5f       	subi	r18, 0xF7	; 247
    1cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc8:	b9 01       	movw	r22, r18
    1cca:	0e 94 cc 09 	call	0x1398	; 0x1398 <xTaskCheckForTimeOut>
    1cce:	88 23       	and	r24, r24
    1cd0:	09 f5       	brne	.+66     	; 0x1d14 <xQueueGenericSend+0x11a>
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd6:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <prvIsQueueFull>
    1cda:	88 23       	and	r24, r24
    1cdc:	a1 f0       	breq	.+40     	; 0x1d06 <xQueueGenericSend+0x10c>
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	08 96       	adiw	r24, 0x08	; 8
    1ce4:	29 85       	ldd	r18, Y+9	; 0x09
    1ce6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ce8:	b9 01       	movw	r22, r18
    1cea:	0e 94 02 09 	call	0x1204	; 0x1204 <vTaskPlaceOnEventList>
    1cee:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf2:	0e 94 4a 11 	call	0x2294	; 0x2294 <prvUnlockQueue>
    1cf6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <xTaskResumeAll>
    1cfa:	88 23       	and	r24, r24
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <xQueueGenericSend+0x106>
    1cfe:	8f cf       	rjmp	.-226    	; 0x1c1e <xQueueGenericSend+0x24>
    1d00:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
    1d04:	8c cf       	rjmp	.-232    	; 0x1c1e <xQueueGenericSend+0x24>
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	0e 94 4a 11 	call	0x2294	; 0x2294 <prvUnlockQueue>
    1d0e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <xTaskResumeAll>
    1d12:	85 cf       	rjmp	.-246    	; 0x1c1e <xQueueGenericSend+0x24>
    1d14:	8d 81       	ldd	r24, Y+5	; 0x05
    1d16:	9e 81       	ldd	r25, Y+6	; 0x06
    1d18:	0e 94 4a 11 	call	0x2294	; 0x2294 <prvUnlockQueue>
    1d1c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <xTaskResumeAll>
    1d20:	1c 86       	std	Y+12, r1	; 0x0c
    1d22:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d24:	2c 96       	adiw	r28, 0x0c	; 12
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <xQueueGenericSendFromISR>:
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	29 97       	sbiw	r28, 0x09	; 9
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	9c 83       	std	Y+4, r25	; 0x04
    1d4c:	8b 83       	std	Y+3, r24	; 0x03
    1d4e:	7e 83       	std	Y+6, r23	; 0x06
    1d50:	6d 83       	std	Y+5, r22	; 0x05
    1d52:	58 87       	std	Y+8, r21	; 0x08
    1d54:	4f 83       	std	Y+7, r20	; 0x07
    1d56:	29 87       	std	Y+9, r18	; 0x09
    1d58:	19 82       	std	Y+1, r1	; 0x01
    1d5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d5e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d60:	eb 81       	ldd	r30, Y+3	; 0x03
    1d62:	fc 81       	ldd	r31, Y+4	; 0x04
    1d64:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d66:	98 17       	cp	r25, r24
    1d68:	60 f5       	brcc	.+88     	; 0x1dc2 <xQueueGenericSendFromISR+0x8c>
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d70:	3e 81       	ldd	r19, Y+6	; 0x06
    1d72:	b9 01       	movw	r22, r18
    1d74:	49 85       	ldd	r20, Y+9	; 0x09
    1d76:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <prvCopyDataToQueue>
    1d7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d7e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d80:	8f 3f       	cpi	r24, 0xFF	; 255
    1d82:	a9 f4       	brne	.+42     	; 0x1dae <xQueueGenericSendFromISR+0x78>
    1d84:	eb 81       	ldd	r30, Y+3	; 0x03
    1d86:	fc 81       	ldd	r31, Y+4	; 0x04
    1d88:	81 89       	ldd	r24, Z+17	; 0x11
    1d8a:	88 23       	and	r24, r24
    1d8c:	b9 f0       	breq	.+46     	; 0x1dbc <xQueueGenericSendFromISR+0x86>
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	41 96       	adiw	r24, 0x11	; 17
    1d94:	0e 94 4a 09 	call	0x1294	; 0x1294 <xTaskRemoveFromEventList>
    1d98:	88 23       	and	r24, r24
    1d9a:	81 f0       	breq	.+32     	; 0x1dbc <xQueueGenericSendFromISR+0x86>
    1d9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d9e:	98 85       	ldd	r25, Y+8	; 0x08
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	61 f0       	breq	.+24     	; 0x1dbc <xQueueGenericSendFromISR+0x86>
    1da4:	ef 81       	ldd	r30, Y+7	; 0x07
    1da6:	f8 85       	ldd	r31, Y+8	; 0x08
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	80 83       	st	Z, r24
    1dac:	07 c0       	rjmp	.+14     	; 0x1dbc <xQueueGenericSendFromISR+0x86>
    1dae:	eb 81       	ldd	r30, Y+3	; 0x03
    1db0:	fc 81       	ldd	r31, Y+4	; 0x04
    1db2:	86 8d       	ldd	r24, Z+30	; 0x1e
    1db4:	8f 5f       	subi	r24, 0xFF	; 255
    1db6:	eb 81       	ldd	r30, Y+3	; 0x03
    1db8:	fc 81       	ldd	r31, Y+4	; 0x04
    1dba:	86 8f       	std	Z+30, r24	; 0x1e
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	8a 83       	std	Y+2, r24	; 0x02
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <xQueueGenericSendFromISR+0x8e>
    1dc2:	1a 82       	std	Y+2, r1	; 0x02
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	29 96       	adiw	r28, 0x09	; 9
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <xQueueGenericReceive>:
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	2e 97       	sbiw	r28, 0x0e	; 14
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	98 87       	std	Y+8, r25	; 0x08
    1dee:	8f 83       	std	Y+7, r24	; 0x07
    1df0:	7a 87       	std	Y+10, r23	; 0x0a
    1df2:	69 87       	std	Y+9, r22	; 0x09
    1df4:	5c 87       	std	Y+12, r21	; 0x0c
    1df6:	4b 87       	std	Y+11, r20	; 0x0b
    1df8:	2d 87       	std	Y+13, r18	; 0x0d
    1dfa:	1b 82       	std	Y+3, r1	; 0x03
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	0f 92       	push	r0
    1e02:	ef 81       	ldd	r30, Y+7	; 0x07
    1e04:	f8 85       	ldd	r31, Y+8	; 0x08
    1e06:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e08:	88 23       	and	r24, r24
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <xQueueGenericReceive+0x36>
    1e0c:	4b c0       	rjmp	.+150    	; 0x1ea4 <xQueueGenericReceive+0xcc>
    1e0e:	ef 81       	ldd	r30, Y+7	; 0x07
    1e10:	f8 85       	ldd	r31, Y+8	; 0x08
    1e12:	86 81       	ldd	r24, Z+6	; 0x06
    1e14:	97 81       	ldd	r25, Z+7	; 0x07
    1e16:	9a 83       	std	Y+2, r25	; 0x02
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1c:	98 85       	ldd	r25, Y+8	; 0x08
    1e1e:	29 85       	ldd	r18, Y+9	; 0x09
    1e20:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e22:	b9 01       	movw	r22, r18
    1e24:	0e 94 02 11 	call	0x2204	; 0x2204 <prvCopyDataFromQueue>
    1e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2a:	88 23       	and	r24, r24
    1e2c:	11 f5       	brne	.+68     	; 0x1e72 <xQueueGenericReceive+0x9a>
    1e2e:	ef 81       	ldd	r30, Y+7	; 0x07
    1e30:	f8 85       	ldd	r31, Y+8	; 0x08
    1e32:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e34:	81 50       	subi	r24, 0x01	; 1
    1e36:	ef 81       	ldd	r30, Y+7	; 0x07
    1e38:	f8 85       	ldd	r31, Y+8	; 0x08
    1e3a:	82 8f       	std	Z+26, r24	; 0x1a
    1e3c:	ef 81       	ldd	r30, Y+7	; 0x07
    1e3e:	f8 85       	ldd	r31, Y+8	; 0x08
    1e40:	80 81       	ld	r24, Z
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	31 f4       	brne	.+12     	; 0x1e54 <xQueueGenericReceive+0x7c>
    1e48:	0e 94 de 0b 	call	0x17bc	; 0x17bc <xTaskGetCurrentTaskHandle>
    1e4c:	ef 81       	ldd	r30, Y+7	; 0x07
    1e4e:	f8 85       	ldd	r31, Y+8	; 0x08
    1e50:	93 83       	std	Z+3, r25	; 0x03
    1e52:	82 83       	std	Z+2, r24	; 0x02
    1e54:	ef 81       	ldd	r30, Y+7	; 0x07
    1e56:	f8 85       	ldd	r31, Y+8	; 0x08
    1e58:	80 85       	ldd	r24, Z+8	; 0x08
    1e5a:	88 23       	and	r24, r24
    1e5c:	f1 f0       	breq	.+60     	; 0x1e9a <xQueueGenericReceive+0xc2>
    1e5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e60:	98 85       	ldd	r25, Y+8	; 0x08
    1e62:	08 96       	adiw	r24, 0x08	; 8
    1e64:	0e 94 4a 09 	call	0x1294	; 0x1294 <xTaskRemoveFromEventList>
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	b9 f4       	brne	.+46     	; 0x1e9a <xQueueGenericReceive+0xc2>
    1e6c:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
    1e70:	14 c0       	rjmp	.+40     	; 0x1e9a <xQueueGenericReceive+0xc2>
    1e72:	ef 81       	ldd	r30, Y+7	; 0x07
    1e74:	f8 85       	ldd	r31, Y+8	; 0x08
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	97 83       	std	Z+7, r25	; 0x07
    1e7c:	86 83       	std	Z+6, r24	; 0x06
    1e7e:	ef 81       	ldd	r30, Y+7	; 0x07
    1e80:	f8 85       	ldd	r31, Y+8	; 0x08
    1e82:	81 89       	ldd	r24, Z+17	; 0x11
    1e84:	88 23       	and	r24, r24
    1e86:	49 f0       	breq	.+18     	; 0x1e9a <xQueueGenericReceive+0xc2>
    1e88:	8f 81       	ldd	r24, Y+7	; 0x07
    1e8a:	98 85       	ldd	r25, Y+8	; 0x08
    1e8c:	41 96       	adiw	r24, 0x11	; 17
    1e8e:	0e 94 4a 09 	call	0x1294	; 0x1294 <xTaskRemoveFromEventList>
    1e92:	88 23       	and	r24, r24
    1e94:	11 f0       	breq	.+4      	; 0x1e9a <xQueueGenericReceive+0xc2>
    1e96:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	8e 87       	std	Y+14, r24	; 0x0e
    1ea2:	6d c0       	rjmp	.+218    	; 0x1f7e <xQueueGenericReceive+0x1a6>
    1ea4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ea6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	21 f4       	brne	.+8      	; 0x1eb4 <xQueueGenericReceive+0xdc>
    1eac:	0f 90       	pop	r0
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	1e 86       	std	Y+14, r1	; 0x0e
    1eb2:	65 c0       	rjmp	.+202    	; 0x1f7e <xQueueGenericReceive+0x1a6>
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	88 23       	and	r24, r24
    1eb8:	31 f4       	brne	.+12     	; 0x1ec6 <xQueueGenericReceive+0xee>
    1eba:	ce 01       	movw	r24, r28
    1ebc:	04 96       	adiw	r24, 0x04	; 4
    1ebe:	0e 94 b2 09 	call	0x1364	; 0x1364 <vTaskSetTimeOutState>
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
    1ec6:	0f 90       	pop	r0
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <vTaskSuspendAll>
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	0f 92       	push	r0
    1ed4:	ef 81       	ldd	r30, Y+7	; 0x07
    1ed6:	f8 85       	ldd	r31, Y+8	; 0x08
    1ed8:	85 8d       	ldd	r24, Z+29	; 0x1d
    1eda:	8f 3f       	cpi	r24, 0xFF	; 255
    1edc:	19 f4       	brne	.+6      	; 0x1ee4 <xQueueGenericReceive+0x10c>
    1ede:	ef 81       	ldd	r30, Y+7	; 0x07
    1ee0:	f8 85       	ldd	r31, Y+8	; 0x08
    1ee2:	15 8e       	std	Z+29, r1	; 0x1d
    1ee4:	ef 81       	ldd	r30, Y+7	; 0x07
    1ee6:	f8 85       	ldd	r31, Y+8	; 0x08
    1ee8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1eea:	8f 3f       	cpi	r24, 0xFF	; 255
    1eec:	19 f4       	brne	.+6      	; 0x1ef4 <xQueueGenericReceive+0x11c>
    1eee:	ef 81       	ldd	r30, Y+7	; 0x07
    1ef0:	f8 85       	ldd	r31, Y+8	; 0x08
    1ef2:	16 8e       	std	Z+30, r1	; 0x1e
    1ef4:	0f 90       	pop	r0
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	ce 01       	movw	r24, r28
    1efa:	04 96       	adiw	r24, 0x04	; 4
    1efc:	9e 01       	movw	r18, r28
    1efe:	25 5f       	subi	r18, 0xF5	; 245
    1f00:	3f 4f       	sbci	r19, 0xFF	; 255
    1f02:	b9 01       	movw	r22, r18
    1f04:	0e 94 cc 09 	call	0x1398	; 0x1398 <xTaskCheckForTimeOut>
    1f08:	88 23       	and	r24, r24
    1f0a:	91 f5       	brne	.+100    	; 0x1f70 <xQueueGenericReceive+0x198>
    1f0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f0e:	98 85       	ldd	r25, Y+8	; 0x08
    1f10:	0e 94 9f 11 	call	0x233e	; 0x233e <prvIsQueueEmpty>
    1f14:	88 23       	and	r24, r24
    1f16:	29 f1       	breq	.+74     	; 0x1f62 <xQueueGenericReceive+0x18a>
    1f18:	ef 81       	ldd	r30, Y+7	; 0x07
    1f1a:	f8 85       	ldd	r31, Y+8	; 0x08
    1f1c:	80 81       	ld	r24, Z
    1f1e:	91 81       	ldd	r25, Z+1	; 0x01
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	59 f4       	brne	.+22     	; 0x1f3a <xQueueGenericReceive+0x162>
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	0f 92       	push	r0
    1f2a:	ef 81       	ldd	r30, Y+7	; 0x07
    1f2c:	f8 85       	ldd	r31, Y+8	; 0x08
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <vTaskPriorityInherit>
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3c:	98 85       	ldd	r25, Y+8	; 0x08
    1f3e:	41 96       	adiw	r24, 0x11	; 17
    1f40:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f42:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f44:	b9 01       	movw	r22, r18
    1f46:	0e 94 02 09 	call	0x1204	; 0x1204 <vTaskPlaceOnEventList>
    1f4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f4c:	98 85       	ldd	r25, Y+8	; 0x08
    1f4e:	0e 94 4a 11 	call	0x2294	; 0x2294 <prvUnlockQueue>
    1f52:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <xTaskResumeAll>
    1f56:	88 23       	and	r24, r24
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <xQueueGenericReceive+0x184>
    1f5a:	50 cf       	rjmp	.-352    	; 0x1dfc <xQueueGenericReceive+0x24>
    1f5c:	0e 94 67 18 	call	0x30ce	; 0x30ce <vPortYield>
    1f60:	4d cf       	rjmp	.-358    	; 0x1dfc <xQueueGenericReceive+0x24>
    1f62:	8f 81       	ldd	r24, Y+7	; 0x07
    1f64:	98 85       	ldd	r25, Y+8	; 0x08
    1f66:	0e 94 4a 11 	call	0x2294	; 0x2294 <prvUnlockQueue>
    1f6a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <xTaskResumeAll>
    1f6e:	46 cf       	rjmp	.-372    	; 0x1dfc <xQueueGenericReceive+0x24>
    1f70:	8f 81       	ldd	r24, Y+7	; 0x07
    1f72:	98 85       	ldd	r25, Y+8	; 0x08
    1f74:	0e 94 4a 11 	call	0x2294	; 0x2294 <prvUnlockQueue>
    1f78:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <xTaskResumeAll>
    1f7c:	1e 86       	std	Y+14, r1	; 0x0e
    1f7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f80:	2e 96       	adiw	r28, 0x0e	; 14
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <xQueueReceiveFromISR>:
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	28 97       	sbiw	r28, 0x08	; 8
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
    1faa:	7e 83       	std	Y+6, r23	; 0x06
    1fac:	6d 83       	std	Y+5, r22	; 0x05
    1fae:	58 87       	std	Y+8, r21	; 0x08
    1fb0:	4f 83       	std	Y+7, r20	; 0x07
    1fb2:	19 82       	std	Y+1, r1	; 0x01
    1fb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fba:	88 23       	and	r24, r24
    1fbc:	91 f1       	breq	.+100    	; 0x2022 <xQueueReceiveFromISR+0x90>
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1fc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1fc6:	b9 01       	movw	r22, r18
    1fc8:	0e 94 02 11 	call	0x2204	; 0x2204 <prvCopyDataFromQueue>
    1fcc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fce:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fd2:	81 50       	subi	r24, 0x01	; 1
    1fd4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd8:	82 8f       	std	Z+26, r24	; 0x1a
    1fda:	eb 81       	ldd	r30, Y+3	; 0x03
    1fdc:	fc 81       	ldd	r31, Y+4	; 0x04
    1fde:	85 8d       	ldd	r24, Z+29	; 0x1d
    1fe0:	8f 3f       	cpi	r24, 0xFF	; 255
    1fe2:	a9 f4       	brne	.+42     	; 0x200e <xQueueReceiveFromISR+0x7c>
    1fe4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe8:	80 85       	ldd	r24, Z+8	; 0x08
    1fea:	88 23       	and	r24, r24
    1fec:	b9 f0       	breq	.+46     	; 0x201c <xQueueReceiveFromISR+0x8a>
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	08 96       	adiw	r24, 0x08	; 8
    1ff4:	0e 94 4a 09 	call	0x1294	; 0x1294 <xTaskRemoveFromEventList>
    1ff8:	88 23       	and	r24, r24
    1ffa:	81 f0       	breq	.+32     	; 0x201c <xQueueReceiveFromISR+0x8a>
    1ffc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffe:	98 85       	ldd	r25, Y+8	; 0x08
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	61 f0       	breq	.+24     	; 0x201c <xQueueReceiveFromISR+0x8a>
    2004:	ef 81       	ldd	r30, Y+7	; 0x07
    2006:	f8 85       	ldd	r31, Y+8	; 0x08
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	80 83       	st	Z, r24
    200c:	07 c0       	rjmp	.+14     	; 0x201c <xQueueReceiveFromISR+0x8a>
    200e:	eb 81       	ldd	r30, Y+3	; 0x03
    2010:	fc 81       	ldd	r31, Y+4	; 0x04
    2012:	85 8d       	ldd	r24, Z+29	; 0x1d
    2014:	8f 5f       	subi	r24, 0xFF	; 255
    2016:	eb 81       	ldd	r30, Y+3	; 0x03
    2018:	fc 81       	ldd	r31, Y+4	; 0x04
    201a:	85 8f       	std	Z+29, r24	; 0x1d
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	8a 83       	std	Y+2, r24	; 0x02
    2020:	01 c0       	rjmp	.+2      	; 0x2024 <xQueueReceiveFromISR+0x92>
    2022:	1a 82       	std	Y+2, r1	; 0x02
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	28 96       	adiw	r28, 0x08	; 8
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <uxQueueMessagesWaiting>:
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <uxQueueMessagesWaiting+0x6>
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	9b 83       	std	Y+3, r25	; 0x03
    2044:	8a 83       	std	Y+2, r24	; 0x02
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	0f 92       	push	r0
    204c:	ea 81       	ldd	r30, Y+2	; 0x02
    204e:	fb 81       	ldd	r31, Y+3	; 0x03
    2050:	82 8d       	ldd	r24, Z+26	; 0x1a
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	0f 90       	pop	r0
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <uxQueueMessagesWaitingFromISR>:
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	00 d0       	rcall	.+0      	; 0x206c <uxQueueMessagesWaitingFromISR+0x6>
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	9b 83       	std	Y+3, r25	; 0x03
    2072:	8a 83       	std	Y+2, r24	; 0x02
    2074:	ea 81       	ldd	r30, Y+2	; 0x02
    2076:	fb 81       	ldd	r31, Y+3	; 0x03
    2078:	82 8d       	ldd	r24, Z+26	; 0x1a
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <vQueueDelete>:
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	0f 92       	push	r0
    2090:	0f 92       	push	r0
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	e9 81       	ldd	r30, Y+1	; 0x01
    209c:	fa 81       	ldd	r31, Y+2	; 0x02
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	0e 94 65 16 	call	0x2cca	; 0x2cca <vPortFree>
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	0e 94 65 16 	call	0x2cca	; 0x2cca <vPortFree>
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <prvCopyDataToQueue>:
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <prvCopyDataToQueue+0x6>
    20be:	0f 92       	push	r0
    20c0:	0f 92       	push	r0
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	7c 83       	std	Y+4, r23	; 0x04
    20cc:	6b 83       	std	Y+3, r22	; 0x03
    20ce:	4d 83       	std	Y+5, r20	; 0x05
    20d0:	e9 81       	ldd	r30, Y+1	; 0x01
    20d2:	fa 81       	ldd	r31, Y+2	; 0x02
    20d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    20d6:	88 23       	and	r24, r24
    20d8:	91 f4       	brne	.+36     	; 0x20fe <prvCopyDataToQueue+0x46>
    20da:	e9 81       	ldd	r30, Y+1	; 0x01
    20dc:	fa 81       	ldd	r31, Y+2	; 0x02
    20de:	80 81       	ld	r24, Z
    20e0:	91 81       	ldd	r25, Z+1	; 0x01
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	09 f0       	breq	.+2      	; 0x20e8 <prvCopyDataToQueue+0x30>
    20e6:	7f c0       	rjmp	.+254    	; 0x21e6 <prvCopyDataToQueue+0x12e>
    20e8:	e9 81       	ldd	r30, Y+1	; 0x01
    20ea:	fa 81       	ldd	r31, Y+2	; 0x02
    20ec:	82 81       	ldd	r24, Z+2	; 0x02
    20ee:	93 81       	ldd	r25, Z+3	; 0x03
    20f0:	0e 94 76 0c 	call	0x18ec	; 0x18ec <vTaskPriorityDisinherit>
    20f4:	e9 81       	ldd	r30, Y+1	; 0x01
    20f6:	fa 81       	ldd	r31, Y+2	; 0x02
    20f8:	13 82       	std	Z+3, r1	; 0x03
    20fa:	12 82       	std	Z+2, r1	; 0x02
    20fc:	74 c0       	rjmp	.+232    	; 0x21e6 <prvCopyDataToQueue+0x12e>
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	88 23       	and	r24, r24
    2102:	99 f5       	brne	.+102    	; 0x216a <prvCopyDataToQueue+0xb2>
    2104:	e9 81       	ldd	r30, Y+1	; 0x01
    2106:	fa 81       	ldd	r31, Y+2	; 0x02
    2108:	64 81       	ldd	r22, Z+4	; 0x04
    210a:	75 81       	ldd	r23, Z+5	; 0x05
    210c:	e9 81       	ldd	r30, Y+1	; 0x01
    210e:	fa 81       	ldd	r31, Y+2	; 0x02
    2110:	84 8d       	ldd	r24, Z+28	; 0x1c
    2112:	48 2f       	mov	r20, r24
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	2b 81       	ldd	r18, Y+3	; 0x03
    2118:	3c 81       	ldd	r19, Y+4	; 0x04
    211a:	cb 01       	movw	r24, r22
    211c:	b9 01       	movw	r22, r18
    211e:	0e 94 7e 25 	call	0x4afc	; 0x4afc <memcpy>
    2122:	e9 81       	ldd	r30, Y+1	; 0x01
    2124:	fa 81       	ldd	r31, Y+2	; 0x02
    2126:	24 81       	ldd	r18, Z+4	; 0x04
    2128:	35 81       	ldd	r19, Z+5	; 0x05
    212a:	e9 81       	ldd	r30, Y+1	; 0x01
    212c:	fa 81       	ldd	r31, Y+2	; 0x02
    212e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	82 0f       	add	r24, r18
    2136:	93 1f       	adc	r25, r19
    2138:	e9 81       	ldd	r30, Y+1	; 0x01
    213a:	fa 81       	ldd	r31, Y+2	; 0x02
    213c:	95 83       	std	Z+5, r25	; 0x05
    213e:	84 83       	std	Z+4, r24	; 0x04
    2140:	e9 81       	ldd	r30, Y+1	; 0x01
    2142:	fa 81       	ldd	r31, Y+2	; 0x02
    2144:	24 81       	ldd	r18, Z+4	; 0x04
    2146:	35 81       	ldd	r19, Z+5	; 0x05
    2148:	e9 81       	ldd	r30, Y+1	; 0x01
    214a:	fa 81       	ldd	r31, Y+2	; 0x02
    214c:	82 81       	ldd	r24, Z+2	; 0x02
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	28 17       	cp	r18, r24
    2152:	39 07       	cpc	r19, r25
    2154:	08 f4       	brcc	.+2      	; 0x2158 <prvCopyDataToQueue+0xa0>
    2156:	47 c0       	rjmp	.+142    	; 0x21e6 <prvCopyDataToQueue+0x12e>
    2158:	e9 81       	ldd	r30, Y+1	; 0x01
    215a:	fa 81       	ldd	r31, Y+2	; 0x02
    215c:	80 81       	ld	r24, Z
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	e9 81       	ldd	r30, Y+1	; 0x01
    2162:	fa 81       	ldd	r31, Y+2	; 0x02
    2164:	95 83       	std	Z+5, r25	; 0x05
    2166:	84 83       	std	Z+4, r24	; 0x04
    2168:	3e c0       	rjmp	.+124    	; 0x21e6 <prvCopyDataToQueue+0x12e>
    216a:	e9 81       	ldd	r30, Y+1	; 0x01
    216c:	fa 81       	ldd	r31, Y+2	; 0x02
    216e:	66 81       	ldd	r22, Z+6	; 0x06
    2170:	77 81       	ldd	r23, Z+7	; 0x07
    2172:	e9 81       	ldd	r30, Y+1	; 0x01
    2174:	fa 81       	ldd	r31, Y+2	; 0x02
    2176:	84 8d       	ldd	r24, Z+28	; 0x1c
    2178:	48 2f       	mov	r20, r24
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	2b 81       	ldd	r18, Y+3	; 0x03
    217e:	3c 81       	ldd	r19, Y+4	; 0x04
    2180:	cb 01       	movw	r24, r22
    2182:	b9 01       	movw	r22, r18
    2184:	0e 94 7e 25 	call	0x4afc	; 0x4afc <memcpy>
    2188:	e9 81       	ldd	r30, Y+1	; 0x01
    218a:	fa 81       	ldd	r31, Y+2	; 0x02
    218c:	26 81       	ldd	r18, Z+6	; 0x06
    218e:	37 81       	ldd	r19, Z+7	; 0x07
    2190:	e9 81       	ldd	r30, Y+1	; 0x01
    2192:	fa 81       	ldd	r31, Y+2	; 0x02
    2194:	84 8d       	ldd	r24, Z+28	; 0x1c
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	90 95       	com	r25
    219c:	81 95       	neg	r24
    219e:	9f 4f       	sbci	r25, 0xFF	; 255
    21a0:	82 0f       	add	r24, r18
    21a2:	93 1f       	adc	r25, r19
    21a4:	e9 81       	ldd	r30, Y+1	; 0x01
    21a6:	fa 81       	ldd	r31, Y+2	; 0x02
    21a8:	97 83       	std	Z+7, r25	; 0x07
    21aa:	86 83       	std	Z+6, r24	; 0x06
    21ac:	e9 81       	ldd	r30, Y+1	; 0x01
    21ae:	fa 81       	ldd	r31, Y+2	; 0x02
    21b0:	26 81       	ldd	r18, Z+6	; 0x06
    21b2:	37 81       	ldd	r19, Z+7	; 0x07
    21b4:	e9 81       	ldd	r30, Y+1	; 0x01
    21b6:	fa 81       	ldd	r31, Y+2	; 0x02
    21b8:	80 81       	ld	r24, Z
    21ba:	91 81       	ldd	r25, Z+1	; 0x01
    21bc:	28 17       	cp	r18, r24
    21be:	39 07       	cpc	r19, r25
    21c0:	90 f4       	brcc	.+36     	; 0x21e6 <prvCopyDataToQueue+0x12e>
    21c2:	e9 81       	ldd	r30, Y+1	; 0x01
    21c4:	fa 81       	ldd	r31, Y+2	; 0x02
    21c6:	22 81       	ldd	r18, Z+2	; 0x02
    21c8:	33 81       	ldd	r19, Z+3	; 0x03
    21ca:	e9 81       	ldd	r30, Y+1	; 0x01
    21cc:	fa 81       	ldd	r31, Y+2	; 0x02
    21ce:	84 8d       	ldd	r24, Z+28	; 0x1c
    21d0:	88 2f       	mov	r24, r24
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	90 95       	com	r25
    21d6:	81 95       	neg	r24
    21d8:	9f 4f       	sbci	r25, 0xFF	; 255
    21da:	82 0f       	add	r24, r18
    21dc:	93 1f       	adc	r25, r19
    21de:	e9 81       	ldd	r30, Y+1	; 0x01
    21e0:	fa 81       	ldd	r31, Y+2	; 0x02
    21e2:	97 83       	std	Z+7, r25	; 0x07
    21e4:	86 83       	std	Z+6, r24	; 0x06
    21e6:	e9 81       	ldd	r30, Y+1	; 0x01
    21e8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    21ec:	8f 5f       	subi	r24, 0xFF	; 255
    21ee:	e9 81       	ldd	r30, Y+1	; 0x01
    21f0:	fa 81       	ldd	r31, Y+2	; 0x02
    21f2:	82 8f       	std	Z+26, r24	; 0x1a
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <prvCopyDataFromQueue>:
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	00 d0       	rcall	.+0      	; 0x220a <prvCopyDataFromQueue+0x6>
    220a:	0f 92       	push	r0
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	7c 83       	std	Y+4, r23	; 0x04
    2216:	6b 83       	std	Y+3, r22	; 0x03
    2218:	e9 81       	ldd	r30, Y+1	; 0x01
    221a:	fa 81       	ldd	r31, Y+2	; 0x02
    221c:	80 81       	ld	r24, Z
    221e:	91 81       	ldd	r25, Z+1	; 0x01
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	89 f1       	breq	.+98     	; 0x2286 <prvCopyDataFromQueue+0x82>
    2224:	e9 81       	ldd	r30, Y+1	; 0x01
    2226:	fa 81       	ldd	r31, Y+2	; 0x02
    2228:	26 81       	ldd	r18, Z+6	; 0x06
    222a:	37 81       	ldd	r19, Z+7	; 0x07
    222c:	e9 81       	ldd	r30, Y+1	; 0x01
    222e:	fa 81       	ldd	r31, Y+2	; 0x02
    2230:	84 8d       	ldd	r24, Z+28	; 0x1c
    2232:	88 2f       	mov	r24, r24
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	82 0f       	add	r24, r18
    2238:	93 1f       	adc	r25, r19
    223a:	e9 81       	ldd	r30, Y+1	; 0x01
    223c:	fa 81       	ldd	r31, Y+2	; 0x02
    223e:	97 83       	std	Z+7, r25	; 0x07
    2240:	86 83       	std	Z+6, r24	; 0x06
    2242:	e9 81       	ldd	r30, Y+1	; 0x01
    2244:	fa 81       	ldd	r31, Y+2	; 0x02
    2246:	26 81       	ldd	r18, Z+6	; 0x06
    2248:	37 81       	ldd	r19, Z+7	; 0x07
    224a:	e9 81       	ldd	r30, Y+1	; 0x01
    224c:	fa 81       	ldd	r31, Y+2	; 0x02
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	28 17       	cp	r18, r24
    2254:	39 07       	cpc	r19, r25
    2256:	40 f0       	brcs	.+16     	; 0x2268 <prvCopyDataFromQueue+0x64>
    2258:	e9 81       	ldd	r30, Y+1	; 0x01
    225a:	fa 81       	ldd	r31, Y+2	; 0x02
    225c:	80 81       	ld	r24, Z
    225e:	91 81       	ldd	r25, Z+1	; 0x01
    2260:	e9 81       	ldd	r30, Y+1	; 0x01
    2262:	fa 81       	ldd	r31, Y+2	; 0x02
    2264:	97 83       	std	Z+7, r25	; 0x07
    2266:	86 83       	std	Z+6, r24	; 0x06
    2268:	e9 81       	ldd	r30, Y+1	; 0x01
    226a:	fa 81       	ldd	r31, Y+2	; 0x02
    226c:	46 81       	ldd	r20, Z+6	; 0x06
    226e:	57 81       	ldd	r21, Z+7	; 0x07
    2270:	e9 81       	ldd	r30, Y+1	; 0x01
    2272:	fa 81       	ldd	r31, Y+2	; 0x02
    2274:	84 8d       	ldd	r24, Z+28	; 0x1c
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	ba 01       	movw	r22, r20
    2280:	a9 01       	movw	r20, r18
    2282:	0e 94 7e 25 	call	0x4afc	; 0x4afc <memcpy>
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <prvUnlockQueue>:
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	0f 92       	push	r0
    229a:	0f 92       	push	r0
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	9a 83       	std	Y+2, r25	; 0x02
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	0f 92       	push	r0
    22aa:	15 c0       	rjmp	.+42     	; 0x22d6 <prvUnlockQueue+0x42>
    22ac:	e9 81       	ldd	r30, Y+1	; 0x01
    22ae:	fa 81       	ldd	r31, Y+2	; 0x02
    22b0:	81 89       	ldd	r24, Z+17	; 0x11
    22b2:	88 23       	and	r24, r24
    22b4:	a9 f0       	breq	.+42     	; 0x22e0 <prvUnlockQueue+0x4c>
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	41 96       	adiw	r24, 0x11	; 17
    22bc:	0e 94 4a 09 	call	0x1294	; 0x1294 <xTaskRemoveFromEventList>
    22c0:	88 23       	and	r24, r24
    22c2:	11 f0       	breq	.+4      	; 0x22c8 <prvUnlockQueue+0x34>
    22c4:	0e 94 33 0a 	call	0x1466	; 0x1466 <vTaskMissedYield>
    22c8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ca:	fa 81       	ldd	r31, Y+2	; 0x02
    22cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    22ce:	81 50       	subi	r24, 0x01	; 1
    22d0:	e9 81       	ldd	r30, Y+1	; 0x01
    22d2:	fa 81       	ldd	r31, Y+2	; 0x02
    22d4:	86 8f       	std	Z+30, r24	; 0x1e
    22d6:	e9 81       	ldd	r30, Y+1	; 0x01
    22d8:	fa 81       	ldd	r31, Y+2	; 0x02
    22da:	86 8d       	ldd	r24, Z+30	; 0x1e
    22dc:	18 16       	cp	r1, r24
    22de:	34 f3       	brlt	.-52     	; 0x22ac <prvUnlockQueue+0x18>
    22e0:	e9 81       	ldd	r30, Y+1	; 0x01
    22e2:	fa 81       	ldd	r31, Y+2	; 0x02
    22e4:	8f ef       	ldi	r24, 0xFF	; 255
    22e6:	86 8f       	std	Z+30, r24	; 0x1e
    22e8:	0f 90       	pop	r0
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	0f 92       	push	r0
    22f2:	15 c0       	rjmp	.+42     	; 0x231e <prvUnlockQueue+0x8a>
    22f4:	e9 81       	ldd	r30, Y+1	; 0x01
    22f6:	fa 81       	ldd	r31, Y+2	; 0x02
    22f8:	80 85       	ldd	r24, Z+8	; 0x08
    22fa:	88 23       	and	r24, r24
    22fc:	a9 f0       	breq	.+42     	; 0x2328 <prvUnlockQueue+0x94>
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	08 96       	adiw	r24, 0x08	; 8
    2304:	0e 94 4a 09 	call	0x1294	; 0x1294 <xTaskRemoveFromEventList>
    2308:	88 23       	and	r24, r24
    230a:	11 f0       	breq	.+4      	; 0x2310 <prvUnlockQueue+0x7c>
    230c:	0e 94 33 0a 	call	0x1466	; 0x1466 <vTaskMissedYield>
    2310:	e9 81       	ldd	r30, Y+1	; 0x01
    2312:	fa 81       	ldd	r31, Y+2	; 0x02
    2314:	85 8d       	ldd	r24, Z+29	; 0x1d
    2316:	81 50       	subi	r24, 0x01	; 1
    2318:	e9 81       	ldd	r30, Y+1	; 0x01
    231a:	fa 81       	ldd	r31, Y+2	; 0x02
    231c:	85 8f       	std	Z+29, r24	; 0x1d
    231e:	e9 81       	ldd	r30, Y+1	; 0x01
    2320:	fa 81       	ldd	r31, Y+2	; 0x02
    2322:	85 8d       	ldd	r24, Z+29	; 0x1d
    2324:	18 16       	cp	r1, r24
    2326:	34 f3       	brlt	.-52     	; 0x22f4 <prvUnlockQueue+0x60>
    2328:	e9 81       	ldd	r30, Y+1	; 0x01
    232a:	fa 81       	ldd	r31, Y+2	; 0x02
    232c:	8f ef       	ldi	r24, 0xFF	; 255
    232e:	85 8f       	std	Z+29, r24	; 0x1d
    2330:	0f 90       	pop	r0
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <prvIsQueueEmpty>:
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	00 d0       	rcall	.+0      	; 0x2344 <prvIsQueueEmpty+0x6>
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	9b 83       	std	Y+3, r25	; 0x03
    234a:	8a 83       	std	Y+2, r24	; 0x02
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	0f 92       	push	r0
    2352:	ea 81       	ldd	r30, Y+2	; 0x02
    2354:	fb 81       	ldd	r31, Y+3	; 0x03
    2356:	82 8d       	ldd	r24, Z+26	; 0x1a
    2358:	19 82       	std	Y+1, r1	; 0x01
    235a:	88 23       	and	r24, r24
    235c:	11 f4       	brne	.+4      	; 0x2362 <prvIsQueueEmpty+0x24>
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	0f 90       	pop	r0
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <xQueueIsQueueEmptyFromISR>:
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <xQueueIsQueueEmptyFromISR+0x6>
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	9b 83       	std	Y+3, r25	; 0x03
    2380:	8a 83       	std	Y+2, r24	; 0x02
    2382:	ea 81       	ldd	r30, Y+2	; 0x02
    2384:	fb 81       	ldd	r31, Y+3	; 0x03
    2386:	82 8d       	ldd	r24, Z+26	; 0x1a
    2388:	19 82       	std	Y+1, r1	; 0x01
    238a:	88 23       	and	r24, r24
    238c:	11 f4       	brne	.+4      	; 0x2392 <xQueueIsQueueEmptyFromISR+0x1e>
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <prvIsQueueFull>:
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <prvIsQueueFull+0x6>
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	9b 83       	std	Y+3, r25	; 0x03
    23ac:	8a 83       	std	Y+2, r24	; 0x02
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	0f 92       	push	r0
    23b4:	ea 81       	ldd	r30, Y+2	; 0x02
    23b6:	fb 81       	ldd	r31, Y+3	; 0x03
    23b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    23ba:	ea 81       	ldd	r30, Y+2	; 0x02
    23bc:	fb 81       	ldd	r31, Y+3	; 0x03
    23be:	83 8d       	ldd	r24, Z+27	; 0x1b
    23c0:	19 82       	std	Y+1, r1	; 0x01
    23c2:	98 17       	cp	r25, r24
    23c4:	11 f4       	brne	.+4      	; 0x23ca <prvIsQueueFull+0x2a>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	0f 90       	pop	r0
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <xQueueIsQueueFullFromISR>:
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <xQueueIsQueueFullFromISR+0x6>
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	9b 83       	std	Y+3, r25	; 0x03
    23e8:	8a 83       	std	Y+2, r24	; 0x02
    23ea:	ea 81       	ldd	r30, Y+2	; 0x02
    23ec:	fb 81       	ldd	r31, Y+3	; 0x03
    23ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    23f0:	ea 81       	ldd	r30, Y+2	; 0x02
    23f2:	fb 81       	ldd	r31, Y+3	; 0x03
    23f4:	83 8d       	ldd	r24, Z+27	; 0x1b
    23f6:	19 82       	std	Y+1, r1	; 0x01
    23f8:	98 17       	cp	r25, r24
    23fa:	11 f4       	brne	.+4      	; 0x2400 <xQueueIsQueueFullFromISR+0x24>
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <vListInitialise>:
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	0f 92       	push	r0
    2414:	0f 92       	push	r0
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	9a 83       	std	Y+2, r25	; 0x02
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	03 96       	adiw	r24, 0x03	; 3
    2424:	e9 81       	ldd	r30, Y+1	; 0x01
    2426:	fa 81       	ldd	r31, Y+2	; 0x02
    2428:	92 83       	std	Z+2, r25	; 0x02
    242a:	81 83       	std	Z+1, r24	; 0x01
    242c:	e9 81       	ldd	r30, Y+1	; 0x01
    242e:	fa 81       	ldd	r31, Y+2	; 0x02
    2430:	8f ef       	ldi	r24, 0xFF	; 255
    2432:	9f ef       	ldi	r25, 0xFF	; 255
    2434:	94 83       	std	Z+4, r25	; 0x04
    2436:	83 83       	std	Z+3, r24	; 0x03
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	9a 81       	ldd	r25, Y+2	; 0x02
    243c:	03 96       	adiw	r24, 0x03	; 3
    243e:	e9 81       	ldd	r30, Y+1	; 0x01
    2440:	fa 81       	ldd	r31, Y+2	; 0x02
    2442:	96 83       	std	Z+6, r25	; 0x06
    2444:	85 83       	std	Z+5, r24	; 0x05
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	03 96       	adiw	r24, 0x03	; 3
    244c:	e9 81       	ldd	r30, Y+1	; 0x01
    244e:	fa 81       	ldd	r31, Y+2	; 0x02
    2450:	90 87       	std	Z+8, r25	; 0x08
    2452:	87 83       	std	Z+7, r24	; 0x07
    2454:	e9 81       	ldd	r30, Y+1	; 0x01
    2456:	fa 81       	ldd	r31, Y+2	; 0x02
    2458:	10 82       	st	Z, r1
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <vListInitialiseItem>:
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	0f 92       	push	r0
    246a:	0f 92       	push	r0
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	9a 83       	std	Y+2, r25	; 0x02
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	e9 81       	ldd	r30, Y+1	; 0x01
    2476:	fa 81       	ldd	r31, Y+2	; 0x02
    2478:	11 86       	std	Z+9, r1	; 0x09
    247a:	10 86       	std	Z+8, r1	; 0x08
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <vListInsertEnd>:
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	00 d0       	rcall	.+0      	; 0x248c <vListInsertEnd+0x6>
    248c:	00 d0       	rcall	.+0      	; 0x248e <vListInsertEnd+0x8>
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	9c 83       	std	Y+4, r25	; 0x04
    2494:	8b 83       	std	Y+3, r24	; 0x03
    2496:	7e 83       	std	Y+6, r23	; 0x06
    2498:	6d 83       	std	Y+5, r22	; 0x05
    249a:	eb 81       	ldd	r30, Y+3	; 0x03
    249c:	fc 81       	ldd	r31, Y+4	; 0x04
    249e:	81 81       	ldd	r24, Z+1	; 0x01
    24a0:	92 81       	ldd	r25, Z+2	; 0x02
    24a2:	9a 83       	std	Y+2, r25	; 0x02
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	e9 81       	ldd	r30, Y+1	; 0x01
    24a8:	fa 81       	ldd	r31, Y+2	; 0x02
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	ed 81       	ldd	r30, Y+5	; 0x05
    24b0:	fe 81       	ldd	r31, Y+6	; 0x06
    24b2:	93 83       	std	Z+3, r25	; 0x03
    24b4:	82 83       	std	Z+2, r24	; 0x02
    24b6:	eb 81       	ldd	r30, Y+3	; 0x03
    24b8:	fc 81       	ldd	r31, Y+4	; 0x04
    24ba:	81 81       	ldd	r24, Z+1	; 0x01
    24bc:	92 81       	ldd	r25, Z+2	; 0x02
    24be:	ed 81       	ldd	r30, Y+5	; 0x05
    24c0:	fe 81       	ldd	r31, Y+6	; 0x06
    24c2:	95 83       	std	Z+5, r25	; 0x05
    24c4:	84 83       	std	Z+4, r24	; 0x04
    24c6:	e9 81       	ldd	r30, Y+1	; 0x01
    24c8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ca:	02 80       	ldd	r0, Z+2	; 0x02
    24cc:	f3 81       	ldd	r31, Z+3	; 0x03
    24ce:	e0 2d       	mov	r30, r0
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	95 83       	std	Z+5, r25	; 0x05
    24d6:	84 83       	std	Z+4, r24	; 0x04
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	e9 81       	ldd	r30, Y+1	; 0x01
    24de:	fa 81       	ldd	r31, Y+2	; 0x02
    24e0:	93 83       	std	Z+3, r25	; 0x03
    24e2:	82 83       	std	Z+2, r24	; 0x02
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	eb 81       	ldd	r30, Y+3	; 0x03
    24ea:	fc 81       	ldd	r31, Y+4	; 0x04
    24ec:	92 83       	std	Z+2, r25	; 0x02
    24ee:	81 83       	std	Z+1, r24	; 0x01
    24f0:	ed 81       	ldd	r30, Y+5	; 0x05
    24f2:	fe 81       	ldd	r31, Y+6	; 0x06
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	9c 81       	ldd	r25, Y+4	; 0x04
    24f8:	91 87       	std	Z+9, r25	; 0x09
    24fa:	80 87       	std	Z+8, r24	; 0x08
    24fc:	eb 81       	ldd	r30, Y+3	; 0x03
    24fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2500:	80 81       	ld	r24, Z
    2502:	8f 5f       	subi	r24, 0xFF	; 255
    2504:	eb 81       	ldd	r30, Y+3	; 0x03
    2506:	fc 81       	ldd	r31, Y+4	; 0x04
    2508:	80 83       	st	Z, r24
    250a:	26 96       	adiw	r28, 0x06	; 6
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <vListInsert>:
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	28 97       	sbiw	r28, 0x08	; 8
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	9e 83       	std	Y+6, r25	; 0x06
    2532:	8d 83       	std	Y+5, r24	; 0x05
    2534:	78 87       	std	Y+8, r23	; 0x08
    2536:	6f 83       	std	Y+7, r22	; 0x07
    2538:	ef 81       	ldd	r30, Y+7	; 0x07
    253a:	f8 85       	ldd	r31, Y+8	; 0x08
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	9a 83       	std	Y+2, r25	; 0x02
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	9a 81       	ldd	r25, Y+2	; 0x02
    2548:	2f ef       	ldi	r18, 0xFF	; 255
    254a:	8f 3f       	cpi	r24, 0xFF	; 255
    254c:	92 07       	cpc	r25, r18
    254e:	39 f4       	brne	.+14     	; 0x255e <vListInsert+0x42>
    2550:	ed 81       	ldd	r30, Y+5	; 0x05
    2552:	fe 81       	ldd	r31, Y+6	; 0x06
    2554:	87 81       	ldd	r24, Z+7	; 0x07
    2556:	90 85       	ldd	r25, Z+8	; 0x08
    2558:	9c 83       	std	Y+4, r25	; 0x04
    255a:	8b 83       	std	Y+3, r24	; 0x03
    255c:	18 c0       	rjmp	.+48     	; 0x258e <vListInsert+0x72>
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	03 96       	adiw	r24, 0x03	; 3
    2564:	9c 83       	std	Y+4, r25	; 0x04
    2566:	8b 83       	std	Y+3, r24	; 0x03
    2568:	06 c0       	rjmp	.+12     	; 0x2576 <vListInsert+0x5a>
    256a:	eb 81       	ldd	r30, Y+3	; 0x03
    256c:	fc 81       	ldd	r31, Y+4	; 0x04
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	8b 83       	std	Y+3, r24	; 0x03
    2576:	eb 81       	ldd	r30, Y+3	; 0x03
    2578:	fc 81       	ldd	r31, Y+4	; 0x04
    257a:	02 80       	ldd	r0, Z+2	; 0x02
    257c:	f3 81       	ldd	r31, Z+3	; 0x03
    257e:	e0 2d       	mov	r30, r0
    2580:	20 81       	ld	r18, Z
    2582:	31 81       	ldd	r19, Z+1	; 0x01
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	82 17       	cp	r24, r18
    258a:	93 07       	cpc	r25, r19
    258c:	70 f7       	brcc	.-36     	; 0x256a <vListInsert+0x4e>
    258e:	eb 81       	ldd	r30, Y+3	; 0x03
    2590:	fc 81       	ldd	r31, Y+4	; 0x04
    2592:	82 81       	ldd	r24, Z+2	; 0x02
    2594:	93 81       	ldd	r25, Z+3	; 0x03
    2596:	ef 81       	ldd	r30, Y+7	; 0x07
    2598:	f8 85       	ldd	r31, Y+8	; 0x08
    259a:	93 83       	std	Z+3, r25	; 0x03
    259c:	82 83       	std	Z+2, r24	; 0x02
    259e:	ef 81       	ldd	r30, Y+7	; 0x07
    25a0:	f8 85       	ldd	r31, Y+8	; 0x08
    25a2:	02 80       	ldd	r0, Z+2	; 0x02
    25a4:	f3 81       	ldd	r31, Z+3	; 0x03
    25a6:	e0 2d       	mov	r30, r0
    25a8:	8f 81       	ldd	r24, Y+7	; 0x07
    25aa:	98 85       	ldd	r25, Y+8	; 0x08
    25ac:	95 83       	std	Z+5, r25	; 0x05
    25ae:	84 83       	std	Z+4, r24	; 0x04
    25b0:	ef 81       	ldd	r30, Y+7	; 0x07
    25b2:	f8 85       	ldd	r31, Y+8	; 0x08
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	95 83       	std	Z+5, r25	; 0x05
    25ba:	84 83       	std	Z+4, r24	; 0x04
    25bc:	8f 81       	ldd	r24, Y+7	; 0x07
    25be:	98 85       	ldd	r25, Y+8	; 0x08
    25c0:	eb 81       	ldd	r30, Y+3	; 0x03
    25c2:	fc 81       	ldd	r31, Y+4	; 0x04
    25c4:	93 83       	std	Z+3, r25	; 0x03
    25c6:	82 83       	std	Z+2, r24	; 0x02
    25c8:	ef 81       	ldd	r30, Y+7	; 0x07
    25ca:	f8 85       	ldd	r31, Y+8	; 0x08
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
    25ce:	9e 81       	ldd	r25, Y+6	; 0x06
    25d0:	91 87       	std	Z+9, r25	; 0x09
    25d2:	80 87       	std	Z+8, r24	; 0x08
    25d4:	ed 81       	ldd	r30, Y+5	; 0x05
    25d6:	fe 81       	ldd	r31, Y+6	; 0x06
    25d8:	80 81       	ld	r24, Z
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	ed 81       	ldd	r30, Y+5	; 0x05
    25de:	fe 81       	ldd	r31, Y+6	; 0x06
    25e0:	80 83       	st	Z, r24
    25e2:	28 96       	adiw	r28, 0x08	; 8
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <uxListRemove>:
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <uxListRemove+0x6>
    25fa:	0f 92       	push	r0
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	9c 83       	std	Y+4, r25	; 0x04
    2602:	8b 83       	std	Y+3, r24	; 0x03
    2604:	eb 81       	ldd	r30, Y+3	; 0x03
    2606:	fc 81       	ldd	r31, Y+4	; 0x04
    2608:	a2 81       	ldd	r26, Z+2	; 0x02
    260a:	b3 81       	ldd	r27, Z+3	; 0x03
    260c:	eb 81       	ldd	r30, Y+3	; 0x03
    260e:	fc 81       	ldd	r31, Y+4	; 0x04
    2610:	84 81       	ldd	r24, Z+4	; 0x04
    2612:	95 81       	ldd	r25, Z+5	; 0x05
    2614:	15 96       	adiw	r26, 0x05	; 5
    2616:	9c 93       	st	X, r25
    2618:	8e 93       	st	-X, r24
    261a:	14 97       	sbiw	r26, 0x04	; 4
    261c:	eb 81       	ldd	r30, Y+3	; 0x03
    261e:	fc 81       	ldd	r31, Y+4	; 0x04
    2620:	a4 81       	ldd	r26, Z+4	; 0x04
    2622:	b5 81       	ldd	r27, Z+5	; 0x05
    2624:	eb 81       	ldd	r30, Y+3	; 0x03
    2626:	fc 81       	ldd	r31, Y+4	; 0x04
    2628:	82 81       	ldd	r24, Z+2	; 0x02
    262a:	93 81       	ldd	r25, Z+3	; 0x03
    262c:	13 96       	adiw	r26, 0x03	; 3
    262e:	9c 93       	st	X, r25
    2630:	8e 93       	st	-X, r24
    2632:	12 97       	sbiw	r26, 0x02	; 2
    2634:	eb 81       	ldd	r30, Y+3	; 0x03
    2636:	fc 81       	ldd	r31, Y+4	; 0x04
    2638:	80 85       	ldd	r24, Z+8	; 0x08
    263a:	91 85       	ldd	r25, Z+9	; 0x09
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	89 83       	std	Y+1, r24	; 0x01
    2640:	e9 81       	ldd	r30, Y+1	; 0x01
    2642:	fa 81       	ldd	r31, Y+2	; 0x02
    2644:	21 81       	ldd	r18, Z+1	; 0x01
    2646:	32 81       	ldd	r19, Z+2	; 0x02
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	28 17       	cp	r18, r24
    264e:	39 07       	cpc	r19, r25
    2650:	41 f4       	brne	.+16     	; 0x2662 <uxListRemove+0x6e>
    2652:	eb 81       	ldd	r30, Y+3	; 0x03
    2654:	fc 81       	ldd	r31, Y+4	; 0x04
    2656:	84 81       	ldd	r24, Z+4	; 0x04
    2658:	95 81       	ldd	r25, Z+5	; 0x05
    265a:	e9 81       	ldd	r30, Y+1	; 0x01
    265c:	fa 81       	ldd	r31, Y+2	; 0x02
    265e:	92 83       	std	Z+2, r25	; 0x02
    2660:	81 83       	std	Z+1, r24	; 0x01
    2662:	eb 81       	ldd	r30, Y+3	; 0x03
    2664:	fc 81       	ldd	r31, Y+4	; 0x04
    2666:	11 86       	std	Z+9, r1	; 0x09
    2668:	10 86       	std	Z+8, r1	; 0x08
    266a:	e9 81       	ldd	r30, Y+1	; 0x01
    266c:	fa 81       	ldd	r31, Y+2	; 0x02
    266e:	80 81       	ld	r24, Z
    2670:	81 50       	subi	r24, 0x01	; 1
    2672:	e9 81       	ldd	r30, Y+1	; 0x01
    2674:	fa 81       	ldd	r31, Y+2	; 0x02
    2676:	80 83       	st	Z, r24
    2678:	e9 81       	ldd	r30, Y+1	; 0x01
    267a:	fa 81       	ldd	r31, Y+2	; 0x02
    267c:	80 81       	ld	r24, Z
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <xCoRoutineCreate>:
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	27 97       	sbiw	r28, 0x07	; 7
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	9d 83       	std	Y+5, r25	; 0x05
    26a2:	8c 83       	std	Y+4, r24	; 0x04
    26a4:	6e 83       	std	Y+6, r22	; 0x06
    26a6:	4f 83       	std	Y+7, r20	; 0x07
    26a8:	8a e1       	ldi	r24, 0x1A	; 26
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <pvPortMalloc>
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	09 f4       	brne	.+2      	; 0x26be <xCoRoutineCreate+0x32>
    26bc:	6f c0       	rjmp	.+222    	; 0x279c <xCoRoutineCreate+0x110>
    26be:	80 91 87 02 	lds	r24, 0x0287
    26c2:	90 91 88 02 	lds	r25, 0x0288
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	41 f4       	brne	.+16     	; 0x26da <xCoRoutineCreate+0x4e>
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	90 93 88 02 	sts	0x0288, r25
    26d2:	80 93 87 02 	sts	0x0287, r24
    26d6:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <prvInitialiseCoRoutineLists>
    26da:	8e 81       	ldd	r24, Y+6	; 0x06
    26dc:	82 30       	cpi	r24, 0x02	; 2
    26de:	10 f0       	brcs	.+4      	; 0x26e4 <xCoRoutineCreate+0x58>
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	8e 83       	std	Y+6, r24	; 0x06
    26e4:	e9 81       	ldd	r30, Y+1	; 0x01
    26e6:	fa 81       	ldd	r31, Y+2	; 0x02
    26e8:	11 8e       	std	Z+25, r1	; 0x19
    26ea:	10 8e       	std	Z+24, r1	; 0x18
    26ec:	e9 81       	ldd	r30, Y+1	; 0x01
    26ee:	fa 81       	ldd	r31, Y+2	; 0x02
    26f0:	8e 81       	ldd	r24, Y+6	; 0x06
    26f2:	86 8b       	std	Z+22, r24	; 0x16
    26f4:	e9 81       	ldd	r30, Y+1	; 0x01
    26f6:	fa 81       	ldd	r31, Y+2	; 0x02
    26f8:	8f 81       	ldd	r24, Y+7	; 0x07
    26fa:	87 8b       	std	Z+23, r24	; 0x17
    26fc:	e9 81       	ldd	r30, Y+1	; 0x01
    26fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2700:	8c 81       	ldd	r24, Y+4	; 0x04
    2702:	9d 81       	ldd	r25, Y+5	; 0x05
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	80 83       	st	Z, r24
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	9a 81       	ldd	r25, Y+2	; 0x02
    270c:	02 96       	adiw	r24, 0x02	; 2
    270e:	0e 94 32 12 	call	0x2464	; 0x2464 <vListInitialiseItem>
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	9a 81       	ldd	r25, Y+2	; 0x02
    2716:	0c 96       	adiw	r24, 0x0c	; 12
    2718:	0e 94 32 12 	call	0x2464	; 0x2464 <vListInitialiseItem>
    271c:	e9 81       	ldd	r30, Y+1	; 0x01
    271e:	fa 81       	ldd	r31, Y+2	; 0x02
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	91 87       	std	Z+9, r25	; 0x09
    2726:	80 87       	std	Z+8, r24	; 0x08
    2728:	e9 81       	ldd	r30, Y+1	; 0x01
    272a:	fa 81       	ldd	r31, Y+2	; 0x02
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	9a 81       	ldd	r25, Y+2	; 0x02
    2730:	93 8b       	std	Z+19, r25	; 0x13
    2732:	82 8b       	std	Z+18, r24	; 0x12
    2734:	8e 81       	ldd	r24, Y+6	; 0x06
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	84 e0       	ldi	r24, 0x04	; 4
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	82 1b       	sub	r24, r18
    2740:	93 0b       	sbc	r25, r19
    2742:	e9 81       	ldd	r30, Y+1	; 0x01
    2744:	fa 81       	ldd	r31, Y+2	; 0x02
    2746:	95 87       	std	Z+13, r25	; 0x0d
    2748:	84 87       	std	Z+12, r24	; 0x0c
    274a:	e9 81       	ldd	r30, Y+1	; 0x01
    274c:	fa 81       	ldd	r31, Y+2	; 0x02
    274e:	96 89       	ldd	r25, Z+22	; 0x16
    2750:	80 91 89 02 	lds	r24, 0x0289
    2754:	89 17       	cp	r24, r25
    2756:	28 f4       	brcc	.+10     	; 0x2762 <xCoRoutineCreate+0xd6>
    2758:	e9 81       	ldd	r30, Y+1	; 0x01
    275a:	fa 81       	ldd	r31, Y+2	; 0x02
    275c:	86 89       	ldd	r24, Z+22	; 0x16
    275e:	80 93 89 02 	sts	0x0289, r24
    2762:	e9 81       	ldd	r30, Y+1	; 0x01
    2764:	fa 81       	ldd	r31, Y+2	; 0x02
    2766:	86 89       	ldd	r24, Z+22	; 0x16
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	c9 01       	movw	r24, r18
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	82 0f       	add	r24, r18
    277c:	93 1f       	adc	r25, r19
    277e:	ac 01       	movw	r20, r24
    2780:	40 57       	subi	r20, 0x70	; 112
    2782:	5d 4f       	sbci	r21, 0xFD	; 253
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	9c 01       	movw	r18, r24
    278a:	2e 5f       	subi	r18, 0xFE	; 254
    278c:	3f 4f       	sbci	r19, 0xFF	; 255
    278e:	ca 01       	movw	r24, r20
    2790:	b9 01       	movw	r22, r18
    2792:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	8b 83       	std	Y+3, r24	; 0x03
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <xCoRoutineCreate+0x114>
    279c:	8f ef       	ldi	r24, 0xFF	; 255
    279e:	8b 83       	std	Y+3, r24	; 0x03
    27a0:	8b 81       	ldd	r24, Y+3	; 0x03
    27a2:	27 96       	adiw	r28, 0x07	; 7
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <vCoRoutineAddToDelayedList>:
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <vCoRoutineAddToDelayedList+0x6>
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <vCoRoutineAddToDelayedList+0x8>
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	9c 83       	std	Y+4, r25	; 0x04
    27c2:	8b 83       	std	Y+3, r24	; 0x03
    27c4:	7e 83       	std	Y+6, r23	; 0x06
    27c6:	6d 83       	std	Y+5, r22	; 0x05
    27c8:	20 91 8a 02 	lds	r18, 0x028A
    27cc:	30 91 8b 02 	lds	r19, 0x028B
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	82 0f       	add	r24, r18
    27d6:	93 1f       	adc	r25, r19
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	80 91 87 02 	lds	r24, 0x0287
    27e0:	90 91 88 02 	lds	r25, 0x0288
    27e4:	02 96       	adiw	r24, 0x02	; 2
    27e6:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    27ea:	e0 91 87 02 	lds	r30, 0x0287
    27ee:	f0 91 88 02 	lds	r31, 0x0288
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	9a 81       	ldd	r25, Y+2	; 0x02
    27f6:	93 83       	std	Z+3, r25	; 0x03
    27f8:	82 83       	std	Z+2, r24	; 0x02
    27fa:	20 91 8a 02 	lds	r18, 0x028A
    27fe:	30 91 8b 02 	lds	r19, 0x028B
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	82 17       	cp	r24, r18
    2808:	93 07       	cpc	r25, r19
    280a:	70 f4       	brcc	.+28     	; 0x2828 <vCoRoutineAddToDelayedList+0x74>
    280c:	80 91 b6 02 	lds	r24, 0x02B6
    2810:	90 91 b7 02 	lds	r25, 0x02B7
    2814:	20 91 87 02 	lds	r18, 0x0287
    2818:	30 91 88 02 	lds	r19, 0x0288
    281c:	2e 5f       	subi	r18, 0xFE	; 254
    281e:	3f 4f       	sbci	r19, 0xFF	; 255
    2820:	b9 01       	movw	r22, r18
    2822:	0e 94 8e 12 	call	0x251c	; 0x251c <vListInsert>
    2826:	0d c0       	rjmp	.+26     	; 0x2842 <vCoRoutineAddToDelayedList+0x8e>
    2828:	80 91 b4 02 	lds	r24, 0x02B4
    282c:	90 91 b5 02 	lds	r25, 0x02B5
    2830:	20 91 87 02 	lds	r18, 0x0287
    2834:	30 91 88 02 	lds	r19, 0x0288
    2838:	2e 5f       	subi	r18, 0xFE	; 254
    283a:	3f 4f       	sbci	r19, 0xFF	; 255
    283c:	b9 01       	movw	r22, r18
    283e:	0e 94 8e 12 	call	0x251c	; 0x251c <vListInsert>
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
    2844:	9e 81       	ldd	r25, Y+6	; 0x06
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	61 f0       	breq	.+24     	; 0x2862 <vCoRoutineAddToDelayedList+0xae>
    284a:	80 91 87 02 	lds	r24, 0x0287
    284e:	90 91 88 02 	lds	r25, 0x0288
    2852:	9c 01       	movw	r18, r24
    2854:	24 5f       	subi	r18, 0xF4	; 244
    2856:	3f 4f       	sbci	r19, 0xFF	; 255
    2858:	8d 81       	ldd	r24, Y+5	; 0x05
    285a:	9e 81       	ldd	r25, Y+6	; 0x06
    285c:	b9 01       	movw	r22, r18
    285e:	0e 94 8e 12 	call	0x251c	; 0x251c <vListInsert>
    2862:	26 96       	adiw	r28, 0x06	; 6
    2864:	0f b6       	in	r0, 0x3f	; 63
    2866:	f8 94       	cli
    2868:	de bf       	out	0x3e, r29	; 62
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	cd bf       	out	0x3d, r28	; 61
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	08 95       	ret

00002874 <prvCheckPendingReadyList>:
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	0f 92       	push	r0
    287a:	0f 92       	push	r0
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	3a c0       	rjmp	.+116    	; 0x28f6 <prvCheckPendingReadyList+0x82>
    2882:	f8 94       	cli
    2884:	e0 91 bd 02 	lds	r30, 0x02BD
    2888:	f0 91 be 02 	lds	r31, 0x02BE
    288c:	86 81       	ldd	r24, Z+6	; 0x06
    288e:	97 81       	ldd	r25, Z+7	; 0x07
    2890:	9a 83       	std	Y+2, r25	; 0x02
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	0c 96       	adiw	r24, 0x0c	; 12
    289a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    289e:	78 94       	sei
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	02 96       	adiw	r24, 0x02	; 2
    28a6:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    28aa:	e9 81       	ldd	r30, Y+1	; 0x01
    28ac:	fa 81       	ldd	r31, Y+2	; 0x02
    28ae:	96 89       	ldd	r25, Z+22	; 0x16
    28b0:	80 91 89 02 	lds	r24, 0x0289
    28b4:	89 17       	cp	r24, r25
    28b6:	28 f4       	brcc	.+10     	; 0x28c2 <prvCheckPendingReadyList+0x4e>
    28b8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ba:	fa 81       	ldd	r31, Y+2	; 0x02
    28bc:	86 89       	ldd	r24, Z+22	; 0x16
    28be:	80 93 89 02 	sts	0x0289, r24
    28c2:	e9 81       	ldd	r30, Y+1	; 0x01
    28c4:	fa 81       	ldd	r31, Y+2	; 0x02
    28c6:	86 89       	ldd	r24, Z+22	; 0x16
    28c8:	28 2f       	mov	r18, r24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	c9 01       	movw	r24, r18
    28ce:	88 0f       	add	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	88 0f       	add	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	88 0f       	add	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	82 0f       	add	r24, r18
    28dc:	93 1f       	adc	r25, r19
    28de:	ac 01       	movw	r20, r24
    28e0:	40 57       	subi	r20, 0x70	; 112
    28e2:	5d 4f       	sbci	r21, 0xFD	; 253
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	9c 01       	movw	r18, r24
    28ea:	2e 5f       	subi	r18, 0xFE	; 254
    28ec:	3f 4f       	sbci	r19, 0xFF	; 255
    28ee:	ca 01       	movw	r24, r20
    28f0:	b9 01       	movw	r22, r18
    28f2:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
    28f6:	80 91 b8 02 	lds	r24, 0x02B8
    28fa:	88 23       	and	r24, r24
    28fc:	09 f0       	breq	.+2      	; 0x2900 <prvCheckPendingReadyList+0x8c>
    28fe:	c1 cf       	rjmp	.-126    	; 0x2882 <prvCheckPendingReadyList+0xe>
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <prvCheckDelayedList>:
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	00 d0       	rcall	.+0      	; 0x2910 <prvCheckDelayedList+0x6>
    2910:	0f 92       	push	r0
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	0e 94 76 07 	call	0xeec	; 0xeec <xTaskGetTickCount>
    291a:	20 91 8c 02 	lds	r18, 0x028C
    291e:	30 91 8d 02 	lds	r19, 0x028D
    2922:	82 1b       	sub	r24, r18
    2924:	93 0b       	sbc	r25, r19
    2926:	90 93 8f 02 	sts	0x028F, r25
    292a:	80 93 8e 02 	sts	0x028E, r24
    292e:	85 c0       	rjmp	.+266    	; 0x2a3a <prvCheckDelayedList+0x130>
    2930:	80 91 8a 02 	lds	r24, 0x028A
    2934:	90 91 8b 02 	lds	r25, 0x028B
    2938:	01 96       	adiw	r24, 0x01	; 1
    293a:	90 93 8b 02 	sts	0x028B, r25
    293e:	80 93 8a 02 	sts	0x028A, r24
    2942:	80 91 8e 02 	lds	r24, 0x028E
    2946:	90 91 8f 02 	lds	r25, 0x028F
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	90 93 8f 02 	sts	0x028F, r25
    2950:	80 93 8e 02 	sts	0x028E, r24
    2954:	80 91 8a 02 	lds	r24, 0x028A
    2958:	90 91 8b 02 	lds	r25, 0x028B
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	09 f0       	breq	.+2      	; 0x2962 <prvCheckDelayedList+0x58>
    2960:	64 c0       	rjmp	.+200    	; 0x2a2a <prvCheckDelayedList+0x120>
    2962:	80 91 b4 02 	lds	r24, 0x02B4
    2966:	90 91 b5 02 	lds	r25, 0x02B5
    296a:	9a 83       	std	Y+2, r25	; 0x02
    296c:	89 83       	std	Y+1, r24	; 0x01
    296e:	80 91 b6 02 	lds	r24, 0x02B6
    2972:	90 91 b7 02 	lds	r25, 0x02B7
    2976:	90 93 b5 02 	sts	0x02B5, r25
    297a:	80 93 b4 02 	sts	0x02B4, r24
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	9a 81       	ldd	r25, Y+2	; 0x02
    2982:	90 93 b7 02 	sts	0x02B7, r25
    2986:	80 93 b6 02 	sts	0x02B6, r24
    298a:	4f c0       	rjmp	.+158    	; 0x2a2a <prvCheckDelayedList+0x120>
    298c:	e0 91 b4 02 	lds	r30, 0x02B4
    2990:	f0 91 b5 02 	lds	r31, 0x02B5
    2994:	05 80       	ldd	r0, Z+5	; 0x05
    2996:	f6 81       	ldd	r31, Z+6	; 0x06
    2998:	e0 2d       	mov	r30, r0
    299a:	86 81       	ldd	r24, Z+6	; 0x06
    299c:	97 81       	ldd	r25, Z+7	; 0x07
    299e:	9c 83       	std	Y+4, r25	; 0x04
    29a0:	8b 83       	std	Y+3, r24	; 0x03
    29a2:	eb 81       	ldd	r30, Y+3	; 0x03
    29a4:	fc 81       	ldd	r31, Y+4	; 0x04
    29a6:	22 81       	ldd	r18, Z+2	; 0x02
    29a8:	33 81       	ldd	r19, Z+3	; 0x03
    29aa:	80 91 8a 02 	lds	r24, 0x028A
    29ae:	90 91 8b 02 	lds	r25, 0x028B
    29b2:	82 17       	cp	r24, r18
    29b4:	93 07       	cpc	r25, r19
    29b6:	08 f4       	brcc	.+2      	; 0x29ba <prvCheckDelayedList+0xb0>
    29b8:	40 c0       	rjmp	.+128    	; 0x2a3a <prvCheckDelayedList+0x130>
    29ba:	f8 94       	cli
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	02 96       	adiw	r24, 0x02	; 2
    29c2:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    29c6:	eb 81       	ldd	r30, Y+3	; 0x03
    29c8:	fc 81       	ldd	r31, Y+4	; 0x04
    29ca:	84 89       	ldd	r24, Z+20	; 0x14
    29cc:	95 89       	ldd	r25, Z+21	; 0x15
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	29 f0       	breq	.+10     	; 0x29dc <prvCheckDelayedList+0xd2>
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	9c 81       	ldd	r25, Y+4	; 0x04
    29d6:	0c 96       	adiw	r24, 0x0c	; 12
    29d8:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    29dc:	78 94       	sei
    29de:	eb 81       	ldd	r30, Y+3	; 0x03
    29e0:	fc 81       	ldd	r31, Y+4	; 0x04
    29e2:	96 89       	ldd	r25, Z+22	; 0x16
    29e4:	80 91 89 02 	lds	r24, 0x0289
    29e8:	89 17       	cp	r24, r25
    29ea:	28 f4       	brcc	.+10     	; 0x29f6 <prvCheckDelayedList+0xec>
    29ec:	eb 81       	ldd	r30, Y+3	; 0x03
    29ee:	fc 81       	ldd	r31, Y+4	; 0x04
    29f0:	86 89       	ldd	r24, Z+22	; 0x16
    29f2:	80 93 89 02 	sts	0x0289, r24
    29f6:	eb 81       	ldd	r30, Y+3	; 0x03
    29f8:	fc 81       	ldd	r31, Y+4	; 0x04
    29fa:	86 89       	ldd	r24, Z+22	; 0x16
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	c9 01       	movw	r24, r18
    2a02:	88 0f       	add	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	88 0f       	add	r24, r24
    2a0c:	99 1f       	adc	r25, r25
    2a0e:	82 0f       	add	r24, r18
    2a10:	93 1f       	adc	r25, r19
    2a12:	ac 01       	movw	r20, r24
    2a14:	40 57       	subi	r20, 0x70	; 112
    2a16:	5d 4f       	sbci	r21, 0xFD	; 253
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1c:	9c 01       	movw	r18, r24
    2a1e:	2e 5f       	subi	r18, 0xFE	; 254
    2a20:	3f 4f       	sbci	r19, 0xFF	; 255
    2a22:	ca 01       	movw	r24, r20
    2a24:	b9 01       	movw	r22, r18
    2a26:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
    2a2a:	e0 91 b4 02 	lds	r30, 0x02B4
    2a2e:	f0 91 b5 02 	lds	r31, 0x02B5
    2a32:	80 81       	ld	r24, Z
    2a34:	88 23       	and	r24, r24
    2a36:	09 f0       	breq	.+2      	; 0x2a3a <prvCheckDelayedList+0x130>
    2a38:	a9 cf       	rjmp	.-174    	; 0x298c <prvCheckDelayedList+0x82>
    2a3a:	80 91 8e 02 	lds	r24, 0x028E
    2a3e:	90 91 8f 02 	lds	r25, 0x028F
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	09 f0       	breq	.+2      	; 0x2a48 <prvCheckDelayedList+0x13e>
    2a46:	74 cf       	rjmp	.-280    	; 0x2930 <prvCheckDelayedList+0x26>
    2a48:	80 91 8a 02 	lds	r24, 0x028A
    2a4c:	90 91 8b 02 	lds	r25, 0x028B
    2a50:	90 93 8d 02 	sts	0x028D, r25
    2a54:	80 93 8c 02 	sts	0x028C, r24
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <vCoRoutineSchedule>:
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	0f 92       	push	r0
    2a6c:	0f 92       	push	r0
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	0e 94 3a 14 	call	0x2874	; 0x2874 <prvCheckPendingReadyList>
    2a76:	0e 94 85 14 	call	0x290a	; 0x290a <prvCheckDelayedList>
    2a7a:	0a c0       	rjmp	.+20     	; 0x2a90 <vCoRoutineSchedule+0x2a>
    2a7c:	80 91 89 02 	lds	r24, 0x0289
    2a80:	88 23       	and	r24, r24
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <vCoRoutineSchedule+0x20>
    2a84:	66 c0       	rjmp	.+204    	; 0x2b52 <vCoRoutineSchedule+0xec>
    2a86:	80 91 89 02 	lds	r24, 0x0289
    2a8a:	81 50       	subi	r24, 0x01	; 1
    2a8c:	80 93 89 02 	sts	0x0289, r24
    2a90:	80 91 89 02 	lds	r24, 0x0289
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	c9 01       	movw	r24, r18
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	82 0f       	add	r24, r18
    2aa8:	93 1f       	adc	r25, r19
    2aaa:	fc 01       	movw	r30, r24
    2aac:	e0 57       	subi	r30, 0x70	; 112
    2aae:	fd 4f       	sbci	r31, 0xFD	; 253
    2ab0:	80 81       	ld	r24, Z
    2ab2:	88 23       	and	r24, r24
    2ab4:	19 f3       	breq	.-58     	; 0x2a7c <vCoRoutineSchedule+0x16>
    2ab6:	80 91 89 02 	lds	r24, 0x0289
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	c9 01       	movw	r24, r18
    2ac0:	88 0f       	add	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	88 0f       	add	r24, r24
    2ac6:	99 1f       	adc	r25, r25
    2ac8:	88 0f       	add	r24, r24
    2aca:	99 1f       	adc	r25, r25
    2acc:	82 0f       	add	r24, r18
    2ace:	93 1f       	adc	r25, r19
    2ad0:	80 57       	subi	r24, 0x70	; 112
    2ad2:	9d 4f       	sbci	r25, 0xFD	; 253
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	e9 81       	ldd	r30, Y+1	; 0x01
    2ada:	fa 81       	ldd	r31, Y+2	; 0x02
    2adc:	01 80       	ldd	r0, Z+1	; 0x01
    2ade:	f2 81       	ldd	r31, Z+2	; 0x02
    2ae0:	e0 2d       	mov	r30, r0
    2ae2:	82 81       	ldd	r24, Z+2	; 0x02
    2ae4:	93 81       	ldd	r25, Z+3	; 0x03
    2ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aea:	92 83       	std	Z+2, r25	; 0x02
    2aec:	81 83       	std	Z+1, r24	; 0x01
    2aee:	e9 81       	ldd	r30, Y+1	; 0x01
    2af0:	fa 81       	ldd	r31, Y+2	; 0x02
    2af2:	21 81       	ldd	r18, Z+1	; 0x01
    2af4:	32 81       	ldd	r19, Z+2	; 0x02
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	9a 81       	ldd	r25, Y+2	; 0x02
    2afa:	03 96       	adiw	r24, 0x03	; 3
    2afc:	28 17       	cp	r18, r24
    2afe:	39 07       	cpc	r19, r25
    2b00:	59 f4       	brne	.+22     	; 0x2b18 <vCoRoutineSchedule+0xb2>
    2b02:	e9 81       	ldd	r30, Y+1	; 0x01
    2b04:	fa 81       	ldd	r31, Y+2	; 0x02
    2b06:	01 80       	ldd	r0, Z+1	; 0x01
    2b08:	f2 81       	ldd	r31, Z+2	; 0x02
    2b0a:	e0 2d       	mov	r30, r0
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	e9 81       	ldd	r30, Y+1	; 0x01
    2b12:	fa 81       	ldd	r31, Y+2	; 0x02
    2b14:	92 83       	std	Z+2, r25	; 0x02
    2b16:	81 83       	std	Z+1, r24	; 0x01
    2b18:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b1c:	01 80       	ldd	r0, Z+1	; 0x01
    2b1e:	f2 81       	ldd	r31, Z+2	; 0x02
    2b20:	e0 2d       	mov	r30, r0
    2b22:	86 81       	ldd	r24, Z+6	; 0x06
    2b24:	97 81       	ldd	r25, Z+7	; 0x07
    2b26:	90 93 88 02 	sts	0x0288, r25
    2b2a:	80 93 87 02 	sts	0x0287, r24
    2b2e:	e0 91 87 02 	lds	r30, 0x0287
    2b32:	f0 91 88 02 	lds	r31, 0x0288
    2b36:	40 81       	ld	r20, Z
    2b38:	51 81       	ldd	r21, Z+1	; 0x01
    2b3a:	80 91 87 02 	lds	r24, 0x0287
    2b3e:	90 91 88 02 	lds	r25, 0x0288
    2b42:	e0 91 87 02 	lds	r30, 0x0287
    2b46:	f0 91 88 02 	lds	r31, 0x0288
    2b4a:	27 89       	ldd	r18, Z+23	; 0x17
    2b4c:	62 2f       	mov	r22, r18
    2b4e:	fa 01       	movw	r30, r20
    2b50:	19 95       	eicall
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <prvInitialiseCoRoutineLists>:
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	0f 92       	push	r0
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    2b66:	19 82       	std	Y+1, r1	; 0x01
    2b68:	13 c0       	rjmp	.+38     	; 0x2b90 <prvInitialiseCoRoutineLists+0x34>
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	c9 01       	movw	r24, r18
    2b72:	88 0f       	add	r24, r24
    2b74:	99 1f       	adc	r25, r25
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	88 0f       	add	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	82 0f       	add	r24, r18
    2b80:	93 1f       	adc	r25, r19
    2b82:	80 57       	subi	r24, 0x70	; 112
    2b84:	9d 4f       	sbci	r25, 0xFD	; 253
    2b86:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	8f 5f       	subi	r24, 0xFF	; 255
    2b8e:	89 83       	std	Y+1, r24	; 0x01
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	82 30       	cpi	r24, 0x02	; 2
    2b94:	50 f3       	brcs	.-44     	; 0x2b6a <prvInitialiseCoRoutineLists+0xe>
    2b96:	82 ea       	ldi	r24, 0xA2	; 162
    2b98:	92 e0       	ldi	r25, 0x02	; 2
    2b9a:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    2b9e:	8b ea       	ldi	r24, 0xAB	; 171
    2ba0:	92 e0       	ldi	r25, 0x02	; 2
    2ba2:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    2ba6:	88 eb       	ldi	r24, 0xB8	; 184
    2ba8:	92 e0       	ldi	r25, 0x02	; 2
    2baa:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    2bae:	82 ea       	ldi	r24, 0xA2	; 162
    2bb0:	92 e0       	ldi	r25, 0x02	; 2
    2bb2:	90 93 b5 02 	sts	0x02B5, r25
    2bb6:	80 93 b4 02 	sts	0x02B4, r24
    2bba:	8b ea       	ldi	r24, 0xAB	; 171
    2bbc:	92 e0       	ldi	r25, 0x02	; 2
    2bbe:	90 93 b7 02 	sts	0x02B7, r25
    2bc2:	80 93 b6 02 	sts	0x02B6, r24
    2bc6:	0f 90       	pop	r0
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <xCoRoutineRemoveFromEventList>:
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	00 d0       	rcall	.+0      	; 0x2bd4 <xCoRoutineRemoveFromEventList+0x6>
    2bd4:	0f 92       	push	r0
    2bd6:	0f 92       	push	r0
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	9d 83       	std	Y+5, r25	; 0x05
    2bde:	8c 83       	std	Y+4, r24	; 0x04
    2be0:	ec 81       	ldd	r30, Y+4	; 0x04
    2be2:	fd 81       	ldd	r31, Y+5	; 0x05
    2be4:	05 80       	ldd	r0, Z+5	; 0x05
    2be6:	f6 81       	ldd	r31, Z+6	; 0x06
    2be8:	e0 2d       	mov	r30, r0
    2bea:	86 81       	ldd	r24, Z+6	; 0x06
    2bec:	97 81       	ldd	r25, Z+7	; 0x07
    2bee:	9b 83       	std	Y+3, r25	; 0x03
    2bf0:	8a 83       	std	Y+2, r24	; 0x02
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf6:	0c 96       	adiw	r24, 0x0c	; 12
    2bf8:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <uxListRemove>
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2c00:	9c 01       	movw	r18, r24
    2c02:	24 5f       	subi	r18, 0xF4	; 244
    2c04:	3f 4f       	sbci	r19, 0xFF	; 255
    2c06:	88 eb       	ldi	r24, 0xB8	; 184
    2c08:	92 e0       	ldi	r25, 0x02	; 2
    2c0a:	b9 01       	movw	r22, r18
    2c0c:	0e 94 43 12 	call	0x2486	; 0x2486 <vListInsertEnd>
    2c10:	ea 81       	ldd	r30, Y+2	; 0x02
    2c12:	fb 81       	ldd	r31, Y+3	; 0x03
    2c14:	96 89       	ldd	r25, Z+22	; 0x16
    2c16:	e0 91 87 02 	lds	r30, 0x0287
    2c1a:	f0 91 88 02 	lds	r31, 0x0288
    2c1e:	86 89       	ldd	r24, Z+22	; 0x16
    2c20:	98 17       	cp	r25, r24
    2c22:	18 f0       	brcs	.+6      	; 0x2c2a <xCoRoutineRemoveFromEventList+0x5c>
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	89 83       	std	Y+1, r24	; 0x01
    2c28:	01 c0       	rjmp	.+2      	; 0x2c2c <xCoRoutineRemoveFromEventList+0x5e>
    2c2a:	19 82       	std	Y+1, r1	; 0x01
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	0f 90       	pop	r0
    2c36:	0f 90       	pop	r0
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	08 95       	ret

00002c3e <pvPortMalloc>:
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	00 d0       	rcall	.+0      	; 0x2c44 <pvPortMalloc+0x6>
    2c44:	0f 92       	push	r0
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	9c 83       	std	Y+4, r25	; 0x04
    2c4c:	8b 83       	std	Y+3, r24	; 0x03
    2c4e:	1a 82       	std	Y+2, r1	; 0x02
    2c50:	19 82       	std	Y+1, r1	; 0x01
    2c52:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <vTaskSuspendAll>
    2c56:	80 91 c1 02 	lds	r24, 0x02C1
    2c5a:	90 91 c2 02 	lds	r25, 0x02C2
    2c5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c60:	3c 81       	ldd	r19, Y+4	; 0x04
    2c62:	82 0f       	add	r24, r18
    2c64:	93 1f       	adc	r25, r19
    2c66:	28 e1       	ldi	r18, 0x18	; 24
    2c68:	80 30       	cpi	r24, 0x00	; 0
    2c6a:	92 07       	cpc	r25, r18
    2c6c:	18 f5       	brcc	.+70     	; 0x2cb4 <pvPortMalloc+0x76>
    2c6e:	20 91 c1 02 	lds	r18, 0x02C1
    2c72:	30 91 c2 02 	lds	r19, 0x02C2
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7a:	28 0f       	add	r18, r24
    2c7c:	39 1f       	adc	r19, r25
    2c7e:	80 91 c1 02 	lds	r24, 0x02C1
    2c82:	90 91 c2 02 	lds	r25, 0x02C2
    2c86:	82 17       	cp	r24, r18
    2c88:	93 07       	cpc	r25, r19
    2c8a:	a0 f4       	brcc	.+40     	; 0x2cb4 <pvPortMalloc+0x76>
    2c8c:	80 91 c1 02 	lds	r24, 0x02C1
    2c90:	90 91 c2 02 	lds	r25, 0x02C2
    2c94:	8d 53       	subi	r24, 0x3D	; 61
    2c96:	9d 4f       	sbci	r25, 0xFD	; 253
    2c98:	9a 83       	std	Y+2, r25	; 0x02
    2c9a:	89 83       	std	Y+1, r24	; 0x01
    2c9c:	20 91 c1 02 	lds	r18, 0x02C1
    2ca0:	30 91 c2 02 	lds	r19, 0x02C2
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca8:	82 0f       	add	r24, r18
    2caa:	93 1f       	adc	r25, r19
    2cac:	90 93 c2 02 	sts	0x02C2, r25
    2cb0:	80 93 c1 02 	sts	0x02C1, r24
    2cb4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <xTaskResumeAll>
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	cf 91       	pop	r28
    2cc6:	df 91       	pop	r29
    2cc8:	08 95       	ret

00002cca <vPortFree>:
    2cca:	df 93       	push	r29
    2ccc:	cf 93       	push	r28
    2cce:	0f 92       	push	r0
    2cd0:	0f 92       	push	r0
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	9a 83       	std	Y+2, r25	; 0x02
    2cd8:	89 83       	std	Y+1, r24	; 0x01
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <vPortInitialiseBlocks>:
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
    2cec:	10 92 c2 02 	sts	0x02C2, r1
    2cf0:	10 92 c1 02 	sts	0x02C1, r1
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <xPortGetFreeHeapSize>:
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	20 91 c1 02 	lds	r18, 0x02C1
    2d06:	30 91 c2 02 	lds	r19, 0x02C2
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	98 e1       	ldi	r25, 0x18	; 24
    2d0e:	82 1b       	sub	r24, r18
    2d10:	93 0b       	sbc	r25, r19
    2d12:	cf 91       	pop	r28
    2d14:	df 91       	pop	r29
    2d16:	08 95       	ret

00002d18 <pxPortInitialiseStack>:
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	28 97       	sbiw	r28, 0x08	; 8
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	9c 83       	std	Y+4, r25	; 0x04
    2d2e:	8b 83       	std	Y+3, r24	; 0x03
    2d30:	7e 83       	std	Y+6, r23	; 0x06
    2d32:	6d 83       	std	Y+5, r22	; 0x05
    2d34:	58 87       	std	Y+8, r21	; 0x08
    2d36:	4f 83       	std	Y+7, r20	; 0x07
    2d38:	eb 81       	ldd	r30, Y+3	; 0x03
    2d3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d3c:	81 e1       	ldi	r24, 0x11	; 17
    2d3e:	80 83       	st	Z, r24
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	9c 81       	ldd	r25, Y+4	; 0x04
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	9c 83       	std	Y+4, r25	; 0x04
    2d48:	8b 83       	std	Y+3, r24	; 0x03
    2d4a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d4c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d4e:	82 e2       	ldi	r24, 0x22	; 34
    2d50:	80 83       	st	Z, r24
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	9c 83       	std	Y+4, r25	; 0x04
    2d5a:	8b 83       	std	Y+3, r24	; 0x03
    2d5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d60:	83 e3       	ldi	r24, 0x33	; 51
    2d62:	80 83       	st	Z, r24
    2d64:	8b 81       	ldd	r24, Y+3	; 0x03
    2d66:	9c 81       	ldd	r25, Y+4	; 0x04
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	9c 83       	std	Y+4, r25	; 0x04
    2d6c:	8b 83       	std	Y+3, r24	; 0x03
    2d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d70:	9e 81       	ldd	r25, Y+6	; 0x06
    2d72:	9a 83       	std	Y+2, r25	; 0x02
    2d74:	89 83       	std	Y+1, r24	; 0x01
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	eb 81       	ldd	r30, Y+3	; 0x03
    2d7a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d7c:	80 83       	st	Z, r24
    2d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d80:	9c 81       	ldd	r25, Y+4	; 0x04
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	9c 83       	std	Y+4, r25	; 0x04
    2d86:	8b 83       	std	Y+3, r24	; 0x03
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8c:	89 2f       	mov	r24, r25
    2d8e:	99 27       	eor	r25, r25
    2d90:	9a 83       	std	Y+2, r25	; 0x02
    2d92:	89 83       	std	Y+1, r24	; 0x01
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	eb 81       	ldd	r30, Y+3	; 0x03
    2d98:	fc 81       	ldd	r31, Y+4	; 0x04
    2d9a:	80 83       	st	Z, r24
    2d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	9c 83       	std	Y+4, r25	; 0x04
    2da4:	8b 83       	std	Y+3, r24	; 0x03
    2da6:	eb 81       	ldd	r30, Y+3	; 0x03
    2da8:	fc 81       	ldd	r31, Y+4	; 0x04
    2daa:	10 82       	st	Z, r1
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	9c 83       	std	Y+4, r25	; 0x04
    2db4:	8b 83       	std	Y+3, r24	; 0x03
    2db6:	eb 81       	ldd	r30, Y+3	; 0x03
    2db8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dba:	10 82       	st	Z, r1
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	9c 83       	std	Y+4, r25	; 0x04
    2dc4:	8b 83       	std	Y+3, r24	; 0x03
    2dc6:	eb 81       	ldd	r30, Y+3	; 0x03
    2dc8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dca:	80 e8       	ldi	r24, 0x80	; 128
    2dcc:	80 83       	st	Z, r24
    2dce:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	9c 83       	std	Y+4, r25	; 0x04
    2dd6:	8b 83       	std	Y+3, r24	; 0x03
    2dd8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dda:	fc 81       	ldd	r31, Y+4	; 0x04
    2ddc:	10 82       	st	Z, r1
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	9c 81       	ldd	r25, Y+4	; 0x04
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	9c 83       	std	Y+4, r25	; 0x04
    2de6:	8b 83       	std	Y+3, r24	; 0x03
    2de8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dea:	fc 81       	ldd	r31, Y+4	; 0x04
    2dec:	10 82       	st	Z, r1
    2dee:	8b 81       	ldd	r24, Y+3	; 0x03
    2df0:	9c 81       	ldd	r25, Y+4	; 0x04
    2df2:	01 97       	sbiw	r24, 0x01	; 1
    2df4:	9c 83       	std	Y+4, r25	; 0x04
    2df6:	8b 83       	std	Y+3, r24	; 0x03
    2df8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dfa:	fc 81       	ldd	r31, Y+4	; 0x04
    2dfc:	10 82       	st	Z, r1
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	9c 81       	ldd	r25, Y+4	; 0x04
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	9c 83       	std	Y+4, r25	; 0x04
    2e06:	8b 83       	std	Y+3, r24	; 0x03
    2e08:	eb 81       	ldd	r30, Y+3	; 0x03
    2e0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	80 83       	st	Z, r24
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	9c 81       	ldd	r25, Y+4	; 0x04
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	9c 83       	std	Y+4, r25	; 0x04
    2e18:	8b 83       	std	Y+3, r24	; 0x03
    2e1a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e1c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e1e:	83 e0       	ldi	r24, 0x03	; 3
    2e20:	80 83       	st	Z, r24
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	9c 81       	ldd	r25, Y+4	; 0x04
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	9c 83       	std	Y+4, r25	; 0x04
    2e2a:	8b 83       	std	Y+3, r24	; 0x03
    2e2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e30:	84 e0       	ldi	r24, 0x04	; 4
    2e32:	80 83       	st	Z, r24
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	9c 81       	ldd	r25, Y+4	; 0x04
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	9c 83       	std	Y+4, r25	; 0x04
    2e3c:	8b 83       	std	Y+3, r24	; 0x03
    2e3e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e40:	fc 81       	ldd	r31, Y+4	; 0x04
    2e42:	85 e0       	ldi	r24, 0x05	; 5
    2e44:	80 83       	st	Z, r24
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	9c 83       	std	Y+4, r25	; 0x04
    2e4e:	8b 83       	std	Y+3, r24	; 0x03
    2e50:	eb 81       	ldd	r30, Y+3	; 0x03
    2e52:	fc 81       	ldd	r31, Y+4	; 0x04
    2e54:	86 e0       	ldi	r24, 0x06	; 6
    2e56:	80 83       	st	Z, r24
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	9c 83       	std	Y+4, r25	; 0x04
    2e60:	8b 83       	std	Y+3, r24	; 0x03
    2e62:	eb 81       	ldd	r30, Y+3	; 0x03
    2e64:	fc 81       	ldd	r31, Y+4	; 0x04
    2e66:	87 e0       	ldi	r24, 0x07	; 7
    2e68:	80 83       	st	Z, r24
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	9c 83       	std	Y+4, r25	; 0x04
    2e72:	8b 83       	std	Y+3, r24	; 0x03
    2e74:	eb 81       	ldd	r30, Y+3	; 0x03
    2e76:	fc 81       	ldd	r31, Y+4	; 0x04
    2e78:	88 e0       	ldi	r24, 0x08	; 8
    2e7a:	80 83       	st	Z, r24
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	9c 83       	std	Y+4, r25	; 0x04
    2e84:	8b 83       	std	Y+3, r24	; 0x03
    2e86:	eb 81       	ldd	r30, Y+3	; 0x03
    2e88:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8a:	89 e0       	ldi	r24, 0x09	; 9
    2e8c:	80 83       	st	Z, r24
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	9c 81       	ldd	r25, Y+4	; 0x04
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	9c 83       	std	Y+4, r25	; 0x04
    2e96:	8b 83       	std	Y+3, r24	; 0x03
    2e98:	eb 81       	ldd	r30, Y+3	; 0x03
    2e9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e9c:	80 e1       	ldi	r24, 0x10	; 16
    2e9e:	80 83       	st	Z, r24
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	9c 83       	std	Y+4, r25	; 0x04
    2ea8:	8b 83       	std	Y+3, r24	; 0x03
    2eaa:	eb 81       	ldd	r30, Y+3	; 0x03
    2eac:	fc 81       	ldd	r31, Y+4	; 0x04
    2eae:	81 e1       	ldi	r24, 0x11	; 17
    2eb0:	80 83       	st	Z, r24
    2eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb6:	01 97       	sbiw	r24, 0x01	; 1
    2eb8:	9c 83       	std	Y+4, r25	; 0x04
    2eba:	8b 83       	std	Y+3, r24	; 0x03
    2ebc:	eb 81       	ldd	r30, Y+3	; 0x03
    2ebe:	fc 81       	ldd	r31, Y+4	; 0x04
    2ec0:	82 e1       	ldi	r24, 0x12	; 18
    2ec2:	80 83       	st	Z, r24
    2ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	9c 83       	std	Y+4, r25	; 0x04
    2ecc:	8b 83       	std	Y+3, r24	; 0x03
    2ece:	eb 81       	ldd	r30, Y+3	; 0x03
    2ed0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ed2:	83 e1       	ldi	r24, 0x13	; 19
    2ed4:	80 83       	st	Z, r24
    2ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	9c 83       	std	Y+4, r25	; 0x04
    2ede:	8b 83       	std	Y+3, r24	; 0x03
    2ee0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ee4:	84 e1       	ldi	r24, 0x14	; 20
    2ee6:	80 83       	st	Z, r24
    2ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eea:	9c 81       	ldd	r25, Y+4	; 0x04
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	9c 83       	std	Y+4, r25	; 0x04
    2ef0:	8b 83       	std	Y+3, r24	; 0x03
    2ef2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ef4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ef6:	85 e1       	ldi	r24, 0x15	; 21
    2ef8:	80 83       	st	Z, r24
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	9c 81       	ldd	r25, Y+4	; 0x04
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	9c 83       	std	Y+4, r25	; 0x04
    2f02:	8b 83       	std	Y+3, r24	; 0x03
    2f04:	eb 81       	ldd	r30, Y+3	; 0x03
    2f06:	fc 81       	ldd	r31, Y+4	; 0x04
    2f08:	86 e1       	ldi	r24, 0x16	; 22
    2f0a:	80 83       	st	Z, r24
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03
    2f16:	eb 81       	ldd	r30, Y+3	; 0x03
    2f18:	fc 81       	ldd	r31, Y+4	; 0x04
    2f1a:	87 e1       	ldi	r24, 0x17	; 23
    2f1c:	80 83       	st	Z, r24
    2f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f20:	9c 81       	ldd	r25, Y+4	; 0x04
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	9c 83       	std	Y+4, r25	; 0x04
    2f26:	8b 83       	std	Y+3, r24	; 0x03
    2f28:	eb 81       	ldd	r30, Y+3	; 0x03
    2f2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f2c:	88 e1       	ldi	r24, 0x18	; 24
    2f2e:	80 83       	st	Z, r24
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	9c 83       	std	Y+4, r25	; 0x04
    2f38:	8b 83       	std	Y+3, r24	; 0x03
    2f3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f3e:	89 e1       	ldi	r24, 0x19	; 25
    2f40:	80 83       	st	Z, r24
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	9c 81       	ldd	r25, Y+4	; 0x04
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	9c 83       	std	Y+4, r25	; 0x04
    2f4a:	8b 83       	std	Y+3, r24	; 0x03
    2f4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f50:	80 e2       	ldi	r24, 0x20	; 32
    2f52:	80 83       	st	Z, r24
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	9c 81       	ldd	r25, Y+4	; 0x04
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	9c 83       	std	Y+4, r25	; 0x04
    2f5c:	8b 83       	std	Y+3, r24	; 0x03
    2f5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f60:	fc 81       	ldd	r31, Y+4	; 0x04
    2f62:	81 e2       	ldi	r24, 0x21	; 33
    2f64:	80 83       	st	Z, r24
    2f66:	8b 81       	ldd	r24, Y+3	; 0x03
    2f68:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	9c 83       	std	Y+4, r25	; 0x04
    2f6e:	8b 83       	std	Y+3, r24	; 0x03
    2f70:	eb 81       	ldd	r30, Y+3	; 0x03
    2f72:	fc 81       	ldd	r31, Y+4	; 0x04
    2f74:	82 e2       	ldi	r24, 0x22	; 34
    2f76:	80 83       	st	Z, r24
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	9c 83       	std	Y+4, r25	; 0x04
    2f80:	8b 83       	std	Y+3, r24	; 0x03
    2f82:	eb 81       	ldd	r30, Y+3	; 0x03
    2f84:	fc 81       	ldd	r31, Y+4	; 0x04
    2f86:	83 e2       	ldi	r24, 0x23	; 35
    2f88:	80 83       	st	Z, r24
    2f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	9c 83       	std	Y+4, r25	; 0x04
    2f92:	8b 83       	std	Y+3, r24	; 0x03
    2f94:	8f 81       	ldd	r24, Y+7	; 0x07
    2f96:	98 85       	ldd	r25, Y+8	; 0x08
    2f98:	9a 83       	std	Y+2, r25	; 0x02
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2fa0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fa2:	80 83       	st	Z, r24
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	9c 83       	std	Y+4, r25	; 0x04
    2fac:	8b 83       	std	Y+3, r24	; 0x03
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb2:	89 2f       	mov	r24, r25
    2fb4:	99 27       	eor	r25, r25
    2fb6:	9a 83       	std	Y+2, r25	; 0x02
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc0:	80 83       	st	Z, r24
    2fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
    2fcc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fce:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd0:	86 e2       	ldi	r24, 0x26	; 38
    2fd2:	80 83       	st	Z, r24
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	9c 83       	std	Y+4, r25	; 0x04
    2fdc:	8b 83       	std	Y+3, r24	; 0x03
    2fde:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe2:	87 e2       	ldi	r24, 0x27	; 39
    2fe4:	80 83       	st	Z, r24
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
    2ff0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff4:	88 e2       	ldi	r24, 0x28	; 40
    2ff6:	80 83       	st	Z, r24
    2ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	9c 83       	std	Y+4, r25	; 0x04
    3000:	8b 83       	std	Y+3, r24	; 0x03
    3002:	eb 81       	ldd	r30, Y+3	; 0x03
    3004:	fc 81       	ldd	r31, Y+4	; 0x04
    3006:	89 e2       	ldi	r24, 0x29	; 41
    3008:	80 83       	st	Z, r24
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	9c 81       	ldd	r25, Y+4	; 0x04
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	9c 83       	std	Y+4, r25	; 0x04
    3012:	8b 83       	std	Y+3, r24	; 0x03
    3014:	eb 81       	ldd	r30, Y+3	; 0x03
    3016:	fc 81       	ldd	r31, Y+4	; 0x04
    3018:	80 e3       	ldi	r24, 0x30	; 48
    301a:	80 83       	st	Z, r24
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	9c 83       	std	Y+4, r25	; 0x04
    3024:	8b 83       	std	Y+3, r24	; 0x03
    3026:	eb 81       	ldd	r30, Y+3	; 0x03
    3028:	fc 81       	ldd	r31, Y+4	; 0x04
    302a:	81 e3       	ldi	r24, 0x31	; 49
    302c:	80 83       	st	Z, r24
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	9c 83       	std	Y+4, r25	; 0x04
    3036:	8b 83       	std	Y+3, r24	; 0x03
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	9c 81       	ldd	r25, Y+4	; 0x04
    303c:	28 96       	adiw	r28, 0x08	; 8
    303e:	0f b6       	in	r0, 0x3f	; 63
    3040:	f8 94       	cli
    3042:	de bf       	out	0x3e, r29	; 62
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	cd bf       	out	0x3d, r28	; 61
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	08 95       	ret

0000304e <xPortStartScheduler>:
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	cd b7       	in	r28, 0x3d	; 61
    3054:	de b7       	in	r29, 0x3e	; 62
    3056:	0e 94 2b 19 	call	0x3256	; 0x3256 <prvSetupTimerInterrupt>
    305a:	a0 91 2e 02 	lds	r26, 0x022E
    305e:	b0 91 2f 02 	lds	r27, 0x022F
    3062:	cd 91       	ld	r28, X+
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	dd 91       	ld	r29, X+
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	ff 91       	pop	r31
    306c:	ef 91       	pop	r30
    306e:	df 91       	pop	r29
    3070:	cf 91       	pop	r28
    3072:	bf 91       	pop	r27
    3074:	af 91       	pop	r26
    3076:	9f 91       	pop	r25
    3078:	8f 91       	pop	r24
    307a:	7f 91       	pop	r23
    307c:	6f 91       	pop	r22
    307e:	5f 91       	pop	r21
    3080:	4f 91       	pop	r20
    3082:	3f 91       	pop	r19
    3084:	2f 91       	pop	r18
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	ff 90       	pop	r15
    308c:	ef 90       	pop	r14
    308e:	df 90       	pop	r13
    3090:	cf 90       	pop	r12
    3092:	bf 90       	pop	r11
    3094:	af 90       	pop	r10
    3096:	9f 90       	pop	r9
    3098:	8f 90       	pop	r8
    309a:	7f 90       	pop	r7
    309c:	6f 90       	pop	r6
    309e:	5f 90       	pop	r5
    30a0:	4f 90       	pop	r4
    30a2:	3f 90       	pop	r3
    30a4:	2f 90       	pop	r2
    30a6:	1f 90       	pop	r1
    30a8:	0f 90       	pop	r0
    30aa:	0c be       	out	0x3c, r0	; 60
    30ac:	0f 90       	pop	r0
    30ae:	0b be       	out	0x3b, r0	; 59
    30b0:	0f 90       	pop	r0
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	0f 90       	pop	r0
    30b6:	08 95       	ret
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	cf 91       	pop	r28
    30bc:	df 91       	pop	r29
    30be:	08 95       	ret

000030c0 <vPortEndScheduler>:
    30c0:	df 93       	push	r29
    30c2:	cf 93       	push	r28
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
    30c8:	cf 91       	pop	r28
    30ca:	df 91       	pop	r29
    30cc:	08 95       	ret

000030ce <vPortYield>:
    30ce:	0f 92       	push	r0
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	0f 92       	push	r0
    30d6:	0b b6       	in	r0, 0x3b	; 59
    30d8:	0f 92       	push	r0
    30da:	0c b6       	in	r0, 0x3c	; 60
    30dc:	0f 92       	push	r0
    30de:	1f 92       	push	r1
    30e0:	11 24       	eor	r1, r1
    30e2:	2f 92       	push	r2
    30e4:	3f 92       	push	r3
    30e6:	4f 92       	push	r4
    30e8:	5f 92       	push	r5
    30ea:	6f 92       	push	r6
    30ec:	7f 92       	push	r7
    30ee:	8f 92       	push	r8
    30f0:	9f 92       	push	r9
    30f2:	af 92       	push	r10
    30f4:	bf 92       	push	r11
    30f6:	cf 92       	push	r12
    30f8:	df 92       	push	r13
    30fa:	ef 92       	push	r14
    30fc:	ff 92       	push	r15
    30fe:	0f 93       	push	r16
    3100:	1f 93       	push	r17
    3102:	2f 93       	push	r18
    3104:	3f 93       	push	r19
    3106:	4f 93       	push	r20
    3108:	5f 93       	push	r21
    310a:	6f 93       	push	r22
    310c:	7f 93       	push	r23
    310e:	8f 93       	push	r24
    3110:	9f 93       	push	r25
    3112:	af 93       	push	r26
    3114:	bf 93       	push	r27
    3116:	cf 93       	push	r28
    3118:	df 93       	push	r29
    311a:	ef 93       	push	r30
    311c:	ff 93       	push	r31
    311e:	a0 91 2e 02 	lds	r26, 0x022E
    3122:	b0 91 2f 02 	lds	r27, 0x022F
    3126:	0d b6       	in	r0, 0x3d	; 61
    3128:	0d 92       	st	X+, r0
    312a:	0e b6       	in	r0, 0x3e	; 62
    312c:	0d 92       	st	X+, r0
    312e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <vTaskSwitchContext>
    3132:	a0 91 2e 02 	lds	r26, 0x022E
    3136:	b0 91 2f 02 	lds	r27, 0x022F
    313a:	cd 91       	ld	r28, X+
    313c:	cd bf       	out	0x3d, r28	; 61
    313e:	dd 91       	ld	r29, X+
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	ff 91       	pop	r31
    3144:	ef 91       	pop	r30
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	bf 91       	pop	r27
    314c:	af 91       	pop	r26
    314e:	9f 91       	pop	r25
    3150:	8f 91       	pop	r24
    3152:	7f 91       	pop	r23
    3154:	6f 91       	pop	r22
    3156:	5f 91       	pop	r21
    3158:	4f 91       	pop	r20
    315a:	3f 91       	pop	r19
    315c:	2f 91       	pop	r18
    315e:	1f 91       	pop	r17
    3160:	0f 91       	pop	r16
    3162:	ff 90       	pop	r15
    3164:	ef 90       	pop	r14
    3166:	df 90       	pop	r13
    3168:	cf 90       	pop	r12
    316a:	bf 90       	pop	r11
    316c:	af 90       	pop	r10
    316e:	9f 90       	pop	r9
    3170:	8f 90       	pop	r8
    3172:	7f 90       	pop	r7
    3174:	6f 90       	pop	r6
    3176:	5f 90       	pop	r5
    3178:	4f 90       	pop	r4
    317a:	3f 90       	pop	r3
    317c:	2f 90       	pop	r2
    317e:	1f 90       	pop	r1
    3180:	0f 90       	pop	r0
    3182:	0c be       	out	0x3c, r0	; 60
    3184:	0f 90       	pop	r0
    3186:	0b be       	out	0x3b, r0	; 59
    3188:	0f 90       	pop	r0
    318a:	0f be       	out	0x3f, r0	; 63
    318c:	0f 90       	pop	r0
    318e:	08 95       	ret

00003190 <vPortYieldFromTick>:
    3190:	0f 92       	push	r0
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	f8 94       	cli
    3196:	0f 92       	push	r0
    3198:	0b b6       	in	r0, 0x3b	; 59
    319a:	0f 92       	push	r0
    319c:	0c b6       	in	r0, 0x3c	; 60
    319e:	0f 92       	push	r0
    31a0:	1f 92       	push	r1
    31a2:	11 24       	eor	r1, r1
    31a4:	2f 92       	push	r2
    31a6:	3f 92       	push	r3
    31a8:	4f 92       	push	r4
    31aa:	5f 92       	push	r5
    31ac:	6f 92       	push	r6
    31ae:	7f 92       	push	r7
    31b0:	8f 92       	push	r8
    31b2:	9f 92       	push	r9
    31b4:	af 92       	push	r10
    31b6:	bf 92       	push	r11
    31b8:	cf 92       	push	r12
    31ba:	df 92       	push	r13
    31bc:	ef 92       	push	r14
    31be:	ff 92       	push	r15
    31c0:	0f 93       	push	r16
    31c2:	1f 93       	push	r17
    31c4:	2f 93       	push	r18
    31c6:	3f 93       	push	r19
    31c8:	4f 93       	push	r20
    31ca:	5f 93       	push	r21
    31cc:	6f 93       	push	r22
    31ce:	7f 93       	push	r23
    31d0:	8f 93       	push	r24
    31d2:	9f 93       	push	r25
    31d4:	af 93       	push	r26
    31d6:	bf 93       	push	r27
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	ef 93       	push	r30
    31de:	ff 93       	push	r31
    31e0:	a0 91 2e 02 	lds	r26, 0x022E
    31e4:	b0 91 2f 02 	lds	r27, 0x022F
    31e8:	0d b6       	in	r0, 0x3d	; 61
    31ea:	0d 92       	st	X+, r0
    31ec:	0e b6       	in	r0, 0x3e	; 62
    31ee:	0d 92       	st	X+, r0
    31f0:	0e 94 ab 07 	call	0xf56	; 0xf56 <vTaskIncrementTick>
    31f4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <vTaskSwitchContext>
    31f8:	a0 91 2e 02 	lds	r26, 0x022E
    31fc:	b0 91 2f 02 	lds	r27, 0x022F
    3200:	cd 91       	ld	r28, X+
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	dd 91       	ld	r29, X+
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	ff 91       	pop	r31
    320a:	ef 91       	pop	r30
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	bf 91       	pop	r27
    3212:	af 91       	pop	r26
    3214:	9f 91       	pop	r25
    3216:	8f 91       	pop	r24
    3218:	7f 91       	pop	r23
    321a:	6f 91       	pop	r22
    321c:	5f 91       	pop	r21
    321e:	4f 91       	pop	r20
    3220:	3f 91       	pop	r19
    3222:	2f 91       	pop	r18
    3224:	1f 91       	pop	r17
    3226:	0f 91       	pop	r16
    3228:	ff 90       	pop	r15
    322a:	ef 90       	pop	r14
    322c:	df 90       	pop	r13
    322e:	cf 90       	pop	r12
    3230:	bf 90       	pop	r11
    3232:	af 90       	pop	r10
    3234:	9f 90       	pop	r9
    3236:	8f 90       	pop	r8
    3238:	7f 90       	pop	r7
    323a:	6f 90       	pop	r6
    323c:	5f 90       	pop	r5
    323e:	4f 90       	pop	r4
    3240:	3f 90       	pop	r3
    3242:	2f 90       	pop	r2
    3244:	1f 90       	pop	r1
    3246:	0f 90       	pop	r0
    3248:	0c be       	out	0x3c, r0	; 60
    324a:	0f 90       	pop	r0
    324c:	0b be       	out	0x3b, r0	; 59
    324e:	0f 90       	pop	r0
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	0f 90       	pop	r0
    3254:	08 95       	ret

00003256 <prvSetupTimerInterrupt>:
    3256:	df 93       	push	r29
    3258:	cf 93       	push	r28
    325a:	00 d0       	rcall	.+0      	; 0x325c <prvSetupTimerInterrupt+0x6>
    325c:	00 d0       	rcall	.+0      	; 0x325e <prvSetupTimerInterrupt+0x8>
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	9d e7       	ldi	r25, 0x7D	; 125
    3266:	a0 e0       	ldi	r26, 0x00	; 0
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	8b 83       	std	Y+3, r24	; 0x03
    326c:	9c 83       	std	Y+4, r25	; 0x04
    326e:	ad 83       	std	Y+5, r26	; 0x05
    3270:	be 83       	std	Y+6, r27	; 0x06
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	9c 81       	ldd	r25, Y+4	; 0x04
    3276:	ad 81       	ldd	r26, Y+5	; 0x05
    3278:	be 81       	ldd	r27, Y+6	; 0x06
    327a:	68 94       	set
    327c:	15 f8       	bld	r1, 5
    327e:	b6 95       	lsr	r27
    3280:	a7 95       	ror	r26
    3282:	97 95       	ror	r25
    3284:	87 95       	ror	r24
    3286:	16 94       	lsr	r1
    3288:	d1 f7       	brne	.-12     	; 0x327e <prvSetupTimerInterrupt+0x28>
    328a:	8b 83       	std	Y+3, r24	; 0x03
    328c:	9c 83       	std	Y+4, r25	; 0x04
    328e:	ad 83       	std	Y+5, r26	; 0x05
    3290:	be 83       	std	Y+6, r27	; 0x06
    3292:	8b 81       	ldd	r24, Y+3	; 0x03
    3294:	9c 81       	ldd	r25, Y+4	; 0x04
    3296:	ad 81       	ldd	r26, Y+5	; 0x05
    3298:	be 81       	ldd	r27, Y+6	; 0x06
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	a1 09       	sbc	r26, r1
    329e:	b1 09       	sbc	r27, r1
    32a0:	8b 83       	std	Y+3, r24	; 0x03
    32a2:	9c 83       	std	Y+4, r25	; 0x04
    32a4:	ad 83       	std	Y+5, r26	; 0x05
    32a6:	be 83       	std	Y+6, r27	; 0x06
    32a8:	8b 81       	ldd	r24, Y+3	; 0x03
    32aa:	89 83       	std	Y+1, r24	; 0x01
    32ac:	8b 81       	ldd	r24, Y+3	; 0x03
    32ae:	9c 81       	ldd	r25, Y+4	; 0x04
    32b0:	ad 81       	ldd	r26, Y+5	; 0x05
    32b2:	be 81       	ldd	r27, Y+6	; 0x06
    32b4:	89 2f       	mov	r24, r25
    32b6:	9a 2f       	mov	r25, r26
    32b8:	ab 2f       	mov	r26, r27
    32ba:	bb 27       	eor	r27, r27
    32bc:	8b 83       	std	Y+3, r24	; 0x03
    32be:	9c 83       	std	Y+4, r25	; 0x04
    32c0:	ad 83       	std	Y+5, r26	; 0x05
    32c2:	be 83       	std	Y+6, r27	; 0x06
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	8a 83       	std	Y+2, r24	; 0x02
    32c8:	e9 e9       	ldi	r30, 0x99	; 153
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	80 83       	st	Z, r24
    32d0:	e8 e9       	ldi	r30, 0x98	; 152
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	80 83       	st	Z, r24
    32d8:	8b e0       	ldi	r24, 0x0B	; 11
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	e1 e9       	ldi	r30, 0x91	; 145
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	80 83       	st	Z, r24
    32e4:	e1 e7       	ldi	r30, 0x71	; 113
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	89 83       	std	Y+1, r24	; 0x01
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	82 60       	ori	r24, 0x02	; 2
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	e1 e7       	ldi	r30, 0x71	; 113
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	80 83       	st	Z, r24
    32fa:	26 96       	adiw	r28, 0x06	; 6
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	f8 94       	cli
    3300:	de bf       	out	0x3e, r29	; 62
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	cd bf       	out	0x3d, r28	; 61
    3306:	cf 91       	pop	r28
    3308:	df 91       	pop	r29
    330a:	08 95       	ret

0000330c <__vector_32>:
    330c:	0e 94 c8 18 	call	0x3190	; 0x3190 <vPortYieldFromTick>
    3310:	18 95       	reti

00003312 <USART_Init>:
*  the specified baud rate and clk speed.
*
* Param buadin: The desired Baud rate.
* Param clk_seedin: The clk speed of the ATmega328p
************************************/
void USART_Init(uint16_t baudin, uint32_t clk_speedin) {
    3312:	cf 93       	push	r28
    3314:	df 93       	push	r29
    3316:	00 d0       	rcall	.+0      	; 0x3318 <USART_Init+0x6>
    3318:	00 d0       	rcall	.+0      	; 0x331a <USART_Init+0x8>
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	9a 83       	std	Y+2, r25	; 0x02
    3320:	89 83       	std	Y+1, r24	; 0x01
    3322:	4b 83       	std	Y+3, r20	; 0x03
    3324:	5c 83       	std	Y+4, r21	; 0x04
    3326:	6d 83       	std	Y+5, r22	; 0x05
    3328:	7e 83       	std	Y+6, r23	; 0x06
    USART_WriteQueue = xQueueCreate(64,sizeof(uint8_t));
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	61 e0       	ldi	r22, 0x01	; 1
    332e:	80 e4       	ldi	r24, 0x40	; 64
    3330:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <xQueueGenericCreate>
    3334:	90 93 d5 1a 	sts	0x1AD5, r25
    3338:	80 93 d4 1a 	sts	0x1AD4, r24
    USART_ReadQueue = xQueueCreate(8,sizeof(uint8_t));
    333c:	40 e0       	ldi	r20, 0x00	; 0
    333e:	61 e0       	ldi	r22, 0x01	; 1
    3340:	88 e0       	ldi	r24, 0x08	; 8
    3342:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <xQueueGenericCreate>
    3346:	90 93 d1 1a 	sts	0x1AD1, r25
    334a:	80 93 d0 1a 	sts	0x1AD0, r24

    //uint32_t ubrr = clk_speedin/(16UL)/baudin-1;
    //UBRR1H = (unsigned char)(ubrr>>8) ;// & 0x7F;
    //UBRR1L = (unsigned char)ubrr;
    
    UBRR0H = 0; //115200
    334e:	85 ec       	ldi	r24, 0xC5	; 197
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	fc 01       	movw	r30, r24
    3354:	10 82       	st	Z, r1
    UBRR0L = 8;
    3356:	84 ec       	ldi	r24, 0xC4	; 196
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	28 e0       	ldi	r18, 0x08	; 8
    335c:	fc 01       	movw	r30, r24
    335e:	20 83       	st	Z, r18

    /* Enable receiver and transmitter */
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);//|(1<<RXCIE1);
    3360:	81 ec       	ldi	r24, 0xC1	; 193
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	28 e1       	ldi	r18, 0x18	; 24
    3366:	fc 01       	movw	r30, r24
    3368:	20 83       	st	Z, r18
    /* Set frame format: 8data, 1stop bit */
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
    336a:	82 ec       	ldi	r24, 0xC2	; 194
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	26 e0       	ldi	r18, 0x06	; 6
    3370:	fc 01       	movw	r30, r24
    3372:	20 83       	st	Z, r18
	 // clear U2X0 for Synchronous operation
    UCSR0A &= ~(1<<U2X0);
    3374:	80 ec       	ldi	r24, 0xC0	; 192
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	20 ec       	ldi	r18, 0xC0	; 192
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	f9 01       	movw	r30, r18
    337e:	20 81       	ld	r18, Z
    3380:	2d 7f       	andi	r18, 0xFD	; 253
    3382:	fc 01       	movw	r30, r24
    3384:	20 83       	st	Z, r18
    /* Set frame format: 8data, 1stop bit */
    //UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
    // clear U2X0 for Synchronous operation
    //UCSR0A &= ~(1<<U2X0);*/

}
    3386:	26 96       	adiw	r28, 0x06	; 6
    3388:	0f b6       	in	r0, 0x3f	; 63
    338a:	f8 94       	cli
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	cd bf       	out	0x3d, r28	; 61
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	08 95       	ret

00003398 <USART_Write>:

/*the send function will put 8bits on the trans line. */
void USART_Write(uint8_t data) {
    3398:	cf 93       	push	r28
    339a:	df 93       	push	r29
    339c:	1f 92       	push	r1
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
    33a4:	00 00       	nop
    33a6:	80 ec       	ldi	r24, 0xC0	; 192
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	fc 01       	movw	r30, r24
    33ac:	80 81       	ld	r24, Z
    33ae:	88 2f       	mov	r24, r24
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	80 72       	andi	r24, 0x20	; 32
    33b4:	99 27       	eor	r25, r25
    33b6:	00 97       	sbiw	r24, 0x00	; 0
    33b8:	b1 f3       	breq	.-20     	; 0x33a6 <USART_Write+0xe>
		;
		/* Put data into buffer, sends the data */
		UDR0 = data;
    33ba:	86 ec       	ldi	r24, 0xC6	; 198
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	29 81       	ldd	r18, Y+1	; 0x01
    33c0:	fc 01       	movw	r30, r24
    33c2:	20 83       	st	Z, r18
}
    33c4:	0f 90       	pop	r0
    33c6:	df 91       	pop	r29
    33c8:	cf 91       	pop	r28
    33ca:	08 95       	ret

000033cc <USART_Write_Unprotected>:

/*the send function will put 8bits on the trans line. */
void USART_Write_Unprotected(uint8_t data) {
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
    33d0:	1f 92       	push	r1
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
    33d8:	00 00       	nop
    33da:	80 ec       	ldi	r24, 0xC0	; 192
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	fc 01       	movw	r30, r24
    33e0:	80 81       	ld	r24, Z
    33e2:	88 2f       	mov	r24, r24
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	80 72       	andi	r24, 0x20	; 32
    33e8:	99 27       	eor	r25, r25
    33ea:	00 97       	sbiw	r24, 0x00	; 0
    33ec:	b1 f3       	breq	.-20     	; 0x33da <USART_Write_Unprotected+0xe>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    33ee:	86 ec       	ldi	r24, 0xC6	; 198
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	29 81       	ldd	r18, Y+1	; 0x01
    33f4:	fc 01       	movw	r30, r24
    33f6:	20 83       	st	Z, r18
}
    33f8:	0f 90       	pop	r0
    33fa:	df 91       	pop	r29
    33fc:	cf 91       	pop	r28
    33fe:	08 95       	ret

00003400 <USART_Read>:
Therefore you may not get control back after this is called 
until a much later time. It may be helpful to use the 
istheredata() function to check before calling this function
        @return 8bit data packet from sender
*/
uint8_t USART_Read(void) {
    3400:	cf 93       	push	r28
    3402:	df 93       	push	r29
    3404:	cd b7       	in	r28, 0x3d	; 61
    3406:	de b7       	in	r29, 0x3e	; 62
    /* Wait for data to be received */
    while ( !(UCSR2A & (1<<RXC2)) )
    3408:	00 00       	nop
    340a:	80 ed       	ldi	r24, 0xD0	; 208
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	fc 01       	movw	r30, r24
    3410:	80 81       	ld	r24, Z
    3412:	88 23       	and	r24, r24
    3414:	d4 f7       	brge	.-12     	; 0x340a <USART_Read+0xa>
        ;
    /* Get and return received data from buffer */
    return UDR2;
    3416:	86 ed       	ldi	r24, 0xD6	; 214
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	fc 01       	movw	r30, r24
    341c:	80 81       	ld	r24, Z
}
    341e:	df 91       	pop	r29
    3420:	cf 91       	pop	r28
    3422:	08 95       	ret

00003424 <__vector_36>:


ISR(USART1_RX_vect){
    3424:	1f 92       	push	r1
    3426:	0f 92       	push	r0
    3428:	00 90 5f 00 	lds	r0, 0x005F
    342c:	0f 92       	push	r0
    342e:	11 24       	eor	r1, r1
    3430:	00 90 5b 00 	lds	r0, 0x005B
    3434:	0f 92       	push	r0
    3436:	8f 93       	push	r24
    3438:	9f 93       	push	r25
    343a:	ef 93       	push	r30
    343c:	ff 93       	push	r31
    343e:	cf 93       	push	r28
    3440:	df 93       	push	r29
    3442:	1f 92       	push	r1
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    data = UDR1;
    3448:	8e ec       	ldi	r24, 0xCE	; 206
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	fc 01       	movw	r30, r24
    344e:	80 81       	ld	r24, Z
    3450:	89 83       	std	Y+1, r24	; 0x01
    //UDR1 = data;
    

  //  USART_AddToQueue(data);
    //xQueueSendToBackFromISR(USART_ReadQueue,&data,NULL);
}
    3452:	0f 90       	pop	r0
    3454:	df 91       	pop	r29
    3456:	cf 91       	pop	r28
    3458:	ff 91       	pop	r31
    345a:	ef 91       	pop	r30
    345c:	9f 91       	pop	r25
    345e:	8f 91       	pop	r24
    3460:	0f 90       	pop	r0
    3462:	00 92 5b 00 	sts	0x005B, r0
    3466:	0f 90       	pop	r0
    3468:	00 92 5f 00 	sts	0x005F, r0
    346c:	0f 90       	pop	r0
    346e:	1f 90       	pop	r1
    3470:	18 95       	reti

00003472 <USART_AddToQueue>:

void USART_AddToQueue(uint8_t data){
    3472:	cf 93       	push	r28
    3474:	df 93       	push	r29
    3476:	1f 92       	push	r1
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
    347c:	89 83       	std	Y+1, r24	; 0x01
    
    xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);
    347e:	80 91 d4 1a 	lds	r24, 0x1AD4
    3482:	90 91 d5 1a 	lds	r25, 0x1AD5
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	4f ef       	ldi	r20, 0xFF	; 255
    348a:	5f ef       	ldi	r21, 0xFF	; 255
    348c:	be 01       	movw	r22, r28
    348e:	6f 5f       	subi	r22, 0xFF	; 255
    3490:	7f 4f       	sbci	r23, 0xFF	; 255
    3492:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <xQueueGenericSend>

}
    3496:	0f 90       	pop	r0
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	08 95       	ret

0000349e <USART_TransmitString>:

void USART_TransmitString(char* str){
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
    34a2:	1f 92       	push	r1
    34a4:	1f 92       	push	r1
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62
    34aa:	9a 83       	std	Y+2, r25	; 0x02
    34ac:	89 83       	std	Y+1, r24	; 0x01
    while(*str) {
    34ae:	0b c0       	rjmp	.+22     	; 0x34c6 <USART_TransmitString+0x28>
        USART_AddToQueue(*str);
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	9a 81       	ldd	r25, Y+2	; 0x02
    34b4:	fc 01       	movw	r30, r24
    34b6:	80 81       	ld	r24, Z
    34b8:	0e 94 39 1a 	call	0x3472	; 0x3472 <USART_AddToQueue>
        str++;
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	9a 81       	ldd	r25, Y+2	; 0x02
    34c0:	01 96       	adiw	r24, 0x01	; 1
    34c2:	9a 83       	std	Y+2, r25	; 0x02
    34c4:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);

}

void USART_TransmitString(char* str){
    while(*str) {
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ca:	fc 01       	movw	r30, r24
    34cc:	80 81       	ld	r24, Z
    34ce:	88 23       	and	r24, r24
    34d0:	79 f7       	brne	.-34     	; 0x34b0 <USART_TransmitString+0x12>
        USART_AddToQueue(*str);
        str++;
    }
}
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	08 95       	ret

000034dc <vTaskUSARTWrite>:

void vTaskUSARTWrite(void *pvParameters){
    34dc:	cf 93       	push	r28
    34de:	df 93       	push	r29
    34e0:	00 d0       	rcall	.+0      	; 0x34e2 <vTaskUSARTWrite+0x6>
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	9b 83       	std	Y+3, r25	; 0x03
    34e8:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    while(1){
    xQueueReceive(USART_WriteQueue,&data,portMAX_DELAY);
    34ea:	80 91 d4 1a 	lds	r24, 0x1AD4
    34ee:	90 91 d5 1a 	lds	r25, 0x1AD5
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	4f ef       	ldi	r20, 0xFF	; 255
    34f6:	5f ef       	ldi	r21, 0xFF	; 255
    34f8:	be 01       	movw	r22, r28
    34fa:	6f 5f       	subi	r22, 0xFF	; 255
    34fc:	7f 4f       	sbci	r23, 0xFF	; 255
    34fe:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xQueueGenericReceive>

        while(!(UCSR1A & (1<<UDRE1)));
    3502:	00 00       	nop
    3504:	88 ec       	ldi	r24, 0xC8	; 200
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	fc 01       	movw	r30, r24
    350a:	80 81       	ld	r24, Z
    350c:	88 2f       	mov	r24, r24
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	80 72       	andi	r24, 0x20	; 32
    3512:	99 27       	eor	r25, r25
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	b1 f3       	breq	.-20     	; 0x3504 <vTaskUSARTWrite+0x28>
        UDR1 = data;
    3518:	8e ec       	ldi	r24, 0xCE	; 206
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	29 81       	ldd	r18, Y+1	; 0x01
    351e:	fc 01       	movw	r30, r24
    3520:	20 83       	st	Z, r18

    }
    3522:	e3 cf       	rjmp	.-58     	; 0x34ea <vTaskUSARTWrite+0xe>

00003524 <USART_LogChar>:
}

void USART_LogChar(uint8_t data){
    3524:	cf 93       	push	r28
    3526:	df 93       	push	r29
    3528:	1f 92       	push	r1
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
    3530:	80 91 d2 1a 	lds	r24, 0x1AD2
    3534:	90 91 d3 1a 	lds	r25, 0x1AD3
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	4f ef       	ldi	r20, 0xFF	; 255
    353c:	5f ef       	ldi	r21, 0xFF	; 255
    353e:	be 01       	movw	r22, r28
    3540:	6f 5f       	subi	r22, 0xFF	; 255
    3542:	7f 4f       	sbci	r23, 0xFF	; 255
    3544:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <xQueueGenericSend>
}
    3548:	0f 90       	pop	r0
    354a:	df 91       	pop	r29
    354c:	cf 91       	pop	r28
    354e:	08 95       	ret

00003550 <USART_LogString>:

void USART_LogString(char* str){
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	1f 92       	push	r1
    3556:	1f 92       	push	r1
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
    355c:	9a 83       	std	Y+2, r25	; 0x02
    355e:	89 83       	std	Y+1, r24	; 0x01
    while(*str){
    3560:	0b c0       	rjmp	.+22     	; 0x3578 <USART_LogString+0x28>
        USART_LogChar(*str);
    3562:	89 81       	ldd	r24, Y+1	; 0x01
    3564:	9a 81       	ldd	r25, Y+2	; 0x02
    3566:	fc 01       	movw	r30, r24
    3568:	80 81       	ld	r24, Z
    356a:	0e 94 92 1a 	call	0x3524	; 0x3524 <USART_LogChar>
        str++;
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	9a 81       	ldd	r25, Y+2	; 0x02
    3572:	01 96       	adiw	r24, 0x01	; 1
    3574:	9a 83       	std	Y+2, r25	; 0x02
    3576:	89 83       	std	Y+1, r24	; 0x01
void USART_LogChar(uint8_t data){
    xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
}

void USART_LogString(char* str){
    while(*str){
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	9a 81       	ldd	r25, Y+2	; 0x02
    357c:	fc 01       	movw	r30, r24
    357e:	80 81       	ld	r24, Z
    3580:	88 23       	and	r24, r24
    3582:	79 f7       	brne	.-34     	; 0x3562 <USART_LogString+0x12>
        USART_LogChar(*str);
        str++;
    }
}
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	df 91       	pop	r29
    358a:	cf 91       	pop	r28
    358c:	08 95       	ret

0000358e <vTaskUSARTLog>:

void vTaskUSARTLog(void *pvParameters){
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
    3592:	00 d0       	rcall	.+0      	; 0x3594 <vTaskUSARTLog+0x6>
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62
    3598:	9b 83       	std	Y+3, r25	; 0x03
    359a:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    while(1){
        xQueueReceive(USART_WriteQueueLog,&data,portMAX_DELAY);
    359c:	80 91 d2 1a 	lds	r24, 0x1AD2
    35a0:	90 91 d3 1a 	lds	r25, 0x1AD3
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	4f ef       	ldi	r20, 0xFF	; 255
    35a8:	5f ef       	ldi	r21, 0xFF	; 255
    35aa:	be 01       	movw	r22, r28
    35ac:	6f 5f       	subi	r22, 0xFF	; 255
    35ae:	7f 4f       	sbci	r23, 0xFF	; 255
    35b0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xQueueGenericReceive>

        while(!(UCSR0A & (1<<UDRE0)));
    35b4:	00 00       	nop
    35b6:	80 ec       	ldi	r24, 0xC0	; 192
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	fc 01       	movw	r30, r24
    35bc:	80 81       	ld	r24, Z
    35be:	88 2f       	mov	r24, r24
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	80 72       	andi	r24, 0x20	; 32
    35c4:	99 27       	eor	r25, r25
    35c6:	00 97       	sbiw	r24, 0x00	; 0
    35c8:	b1 f3       	breq	.-20     	; 0x35b6 <vTaskUSARTLog+0x28>
        UDR0 = data;
    35ca:	86 ec       	ldi	r24, 0xC6	; 198
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	29 81       	ldd	r18, Y+1	; 0x01
    35d0:	fc 01       	movw	r30, r24
    35d2:	20 83       	st	Z, r18

    }
    35d4:	e3 cf       	rjmp	.-58     	; 0x359c <vTaskUSARTLog+0xe>

000035d6 <USART_GetChar>:

}

uint8_t USART_GetChar(){
    35d6:	cf 93       	push	r28
    35d8:	df 93       	push	r29
    35da:	1f 92       	push	r1
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    if(xQueueReceive(USART_ReadQueue,&data,1) == pdTRUE){
    35e0:	80 91 d0 1a 	lds	r24, 0x1AD0
    35e4:	90 91 d1 1a 	lds	r25, 0x1AD1
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	41 e0       	ldi	r20, 0x01	; 1
    35ec:	50 e0       	ldi	r21, 0x00	; 0
    35ee:	be 01       	movw	r22, r28
    35f0:	6f 5f       	subi	r22, 0xFF	; 255
    35f2:	7f 4f       	sbci	r23, 0xFF	; 255
    35f4:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xQueueGenericReceive>
    35f8:	81 30       	cpi	r24, 0x01	; 1
    35fa:	11 f4       	brne	.+4      	; 0x3600 <USART_GetChar+0x2a>
        //USART_AddToQueue('~');
        return data;
    35fc:	89 81       	ldd	r24, Y+1	; 0x01
    35fe:	01 c0       	rjmp	.+2      	; 0x3602 <USART_GetChar+0x2c>
    } else {
        return 255;
    3600:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
    3602:	0f 90       	pop	r0
    3604:	df 91       	pop	r29
    3606:	cf 91       	pop	r28
    3608:	08 95       	ret

0000360a <delay>:

void delay(int a){
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	00 d0       	rcall	.+0      	; 0x3610 <delay+0x6>
    3610:	1f 92       	push	r1
    3612:	cd b7       	in	r28, 0x3d	; 61
    3614:	de b7       	in	r29, 0x3e	; 62
    3616:	9c 83       	std	Y+4, r25	; 0x04
    3618:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i = 0;i < a;i++);
    361a:	1a 82       	std	Y+2, r1	; 0x02
    361c:	19 82       	std	Y+1, r1	; 0x01
    361e:	05 c0       	rjmp	.+10     	; 0x362a <delay+0x20>
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	9a 81       	ldd	r25, Y+2	; 0x02
    3624:	01 96       	adiw	r24, 0x01	; 1
    3626:	9a 83       	std	Y+2, r25	; 0x02
    3628:	89 83       	std	Y+1, r24	; 0x01
    362a:	29 81       	ldd	r18, Y+1	; 0x01
    362c:	3a 81       	ldd	r19, Y+2	; 0x02
    362e:	8b 81       	ldd	r24, Y+3	; 0x03
    3630:	9c 81       	ldd	r25, Y+4	; 0x04
    3632:	28 17       	cp	r18, r24
    3634:	39 07       	cpc	r19, r25
    3636:	a4 f3       	brlt	.-24     	; 0x3620 <delay+0x16>
}
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	df 91       	pop	r29
    3642:	cf 91       	pop	r28
    3644:	08 95       	ret

00003646 <sendACK>:

void sendACK(){
    3646:	cf 93       	push	r28
    3648:	df 93       	push	r29
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    USART_Write(ACK_BYTE);
    364e:	80 e8       	ldi	r24, 0x80	; 128
    3650:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>
}
    3654:	df 91       	pop	r29
    3656:	cf 91       	pop	r28
    3658:	08 95       	ret

0000365a <sendNACK>:

void sendNACK(){
    365a:	cf 93       	push	r28
    365c:	df 93       	push	r29
    365e:	cd b7       	in	r28, 0x3d	; 61
    3660:	de b7       	in	r29, 0x3e	; 62
    USART_Write(NACK_BYTE);
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>
}
    3668:	df 91       	pop	r29
    366a:	cf 91       	pop	r28
    366c:	08 95       	ret

0000366e <recievePayload>:

int recievePayload(int size,unsigned char *buffer){
    366e:	cf 93       	push	r28
    3670:	df 93       	push	r29
    3672:	cd b7       	in	r28, 0x3d	; 61
    3674:	de b7       	in	r29, 0x3e	; 62
    3676:	2d 97       	sbiw	r28, 0x0d	; 13
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	f8 94       	cli
    367c:	de bf       	out	0x3e, r29	; 62
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	cd bf       	out	0x3d, r28	; 61
    3682:	9b 87       	std	Y+11, r25	; 0x0b
    3684:	8a 87       	std	Y+10, r24	; 0x0a
    3686:	7d 87       	std	Y+13, r23	; 0x0d
    3688:	6c 87       	std	Y+12, r22	; 0x0c

	int bytesRecieved = 0;
    368a:	1a 82       	std	Y+2, r1	; 0x02
    368c:	19 82       	std	Y+1, r1	; 0x01
	int numTries = 0;
    368e:	1c 82       	std	Y+4, r1	; 0x04
    3690:	1b 82       	std	Y+3, r1	; 0x03
	const int maxNumTries = 3;
    3692:	83 e0       	ldi	r24, 0x03	; 3
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	98 87       	std	Y+8, r25	; 0x08
    3698:	8f 83       	std	Y+7, r24	; 0x07
	unsigned char data;
	int timeout;

	while(numTries < maxNumTries){
    369a:	6d c0       	rjmp	.+218    	; 0x3776 <recievePayload+0x108>
		while(bytesRecieved < size){
    369c:	2e c0       	rjmp	.+92     	; 0x36fa <recievePayload+0x8c>
			timeout = 50;
    369e:	82 e3       	ldi	r24, 0x32	; 50
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	9e 83       	std	Y+6, r25	; 0x06
    36a4:	8d 83       	std	Y+5, r24	; 0x05
			while ( !(UCSR0A & (1<<RXC0)) ){
    36a6:	10 c0       	rjmp	.+32     	; 0x36c8 <recievePayload+0x5a>
  				timeout--;
    36a8:	8d 81       	ldd	r24, Y+5	; 0x05
    36aa:	9e 81       	ldd	r25, Y+6	; 0x06
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	9e 83       	std	Y+6, r25	; 0x06
    36b0:	8d 83       	std	Y+5, r24	; 0x05
     			if(timeout == 0){
    36b2:	8d 81       	ldd	r24, Y+5	; 0x05
    36b4:	9e 81       	ldd	r25, Y+6	; 0x06
    36b6:	00 97       	sbiw	r24, 0x00	; 0
    36b8:	19 f4       	brne	.+6      	; 0x36c0 <recievePayload+0x52>
					return -1;
    36ba:	8f ef       	ldi	r24, 0xFF	; 255
    36bc:	9f ef       	ldi	r25, 0xFF	; 255
    36be:	65 c0       	rjmp	.+202    	; 0x378a <recievePayload+0x11c>
     			}
     			vTaskDelay(1);
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
	int timeout;

	while(numTries < maxNumTries){
		while(bytesRecieved < size){
			timeout = 50;
			while ( !(UCSR0A & (1<<RXC0)) ){
    36c8:	80 ec       	ldi	r24, 0xC0	; 192
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	fc 01       	movw	r30, r24
    36ce:	80 81       	ld	r24, Z
    36d0:	88 23       	and	r24, r24
    36d2:	54 f7       	brge	.-44     	; 0x36a8 <recievePayload+0x3a>
     			if(timeout == 0){
					return -1;
     			}
     			vTaskDelay(1);
   		}
			data = UDR0;
    36d4:	86 ec       	ldi	r24, 0xC6	; 198
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	fc 01       	movw	r30, r24
    36da:	80 81       	ld	r24, Z
    36dc:	89 87       	std	Y+9, r24	; 0x09
			buffer[bytesRecieved] = data;
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    36e4:	3d 85       	ldd	r19, Y+13	; 0x0d
    36e6:	82 0f       	add	r24, r18
    36e8:	93 1f       	adc	r25, r19
    36ea:	29 85       	ldd	r18, Y+9	; 0x09
    36ec:	fc 01       	movw	r30, r24
    36ee:	20 83       	st	Z, r18
			bytesRecieved++;
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	01 96       	adiw	r24, 0x01	; 1
    36f6:	9a 83       	std	Y+2, r25	; 0x02
    36f8:	89 83       	std	Y+1, r24	; 0x01
	const int maxNumTries = 3;
	unsigned char data;
	int timeout;

	while(numTries < maxNumTries){
		while(bytesRecieved < size){
    36fa:	29 81       	ldd	r18, Y+1	; 0x01
    36fc:	3a 81       	ldd	r19, Y+2	; 0x02
    36fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3700:	9b 85       	ldd	r25, Y+11	; 0x0b
    3702:	28 17       	cp	r18, r24
    3704:	39 07       	cpc	r19, r25
    3706:	5c f2       	brlt	.-106    	; 0x369e <recievePayload+0x30>
			data = UDR0;
			buffer[bytesRecieved] = data;
			bytesRecieved++;
		}
		
		timeout = 50;
    3708:	82 e3       	ldi	r24, 0x32	; 50
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	9e 83       	std	Y+6, r25	; 0x06
    370e:	8d 83       	std	Y+5, r24	; 0x05
		while ( !(UCSR0A & (1<<RXC0)) ){
    3710:	10 c0       	rjmp	.+32     	; 0x3732 <recievePayload+0xc4>
  			timeout--;
    3712:	8d 81       	ldd	r24, Y+5	; 0x05
    3714:	9e 81       	ldd	r25, Y+6	; 0x06
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	9e 83       	std	Y+6, r25	; 0x06
    371a:	8d 83       	std	Y+5, r24	; 0x05
     		if(timeout == 0){
    371c:	8d 81       	ldd	r24, Y+5	; 0x05
    371e:	9e 81       	ldd	r25, Y+6	; 0x06
    3720:	00 97       	sbiw	r24, 0x00	; 0
    3722:	19 f4       	brne	.+6      	; 0x372a <recievePayload+0xbc>
				return -1;
    3724:	8f ef       	ldi	r24, 0xFF	; 255
    3726:	9f ef       	ldi	r25, 0xFF	; 255
    3728:	30 c0       	rjmp	.+96     	; 0x378a <recievePayload+0x11c>
     		}
     		vTaskDelay(1);
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
			buffer[bytesRecieved] = data;
			bytesRecieved++;
		}
		
		timeout = 50;
		while ( !(UCSR0A & (1<<RXC0)) ){
    3732:	80 ec       	ldi	r24, 0xC0	; 192
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	fc 01       	movw	r30, r24
    3738:	80 81       	ld	r24, Z
    373a:	88 23       	and	r24, r24
    373c:	54 f7       	brge	.-44     	; 0x3712 <recievePayload+0xa4>
     		if(timeout == 0){
				return -1;
     		}
     		vTaskDelay(1);
   	}	
		data = UDR0;
    373e:	86 ec       	ldi	r24, 0xC6	; 198
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	fc 01       	movw	r30, r24
    3744:	80 81       	ld	r24, Z
    3746:	89 87       	std	Y+9, r24	; 0x09
		if(data != calcChecksum(buffer,size)){
    3748:	2a 85       	ldd	r18, Y+10	; 0x0a
    374a:	8c 85       	ldd	r24, Y+12	; 0x0c
    374c:	9d 85       	ldd	r25, Y+13	; 0x0d
    374e:	62 2f       	mov	r22, r18
    3750:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <calcChecksum>
    3754:	98 2f       	mov	r25, r24
    3756:	89 85       	ldd	r24, Y+9	; 0x09
    3758:	98 17       	cp	r25, r24
    375a:	41 f0       	breq	.+16     	; 0x376c <recievePayload+0xfe>
			sendNACK();
    375c:	0e 94 2d 1b 	call	0x365a	; 0x365a <sendNACK>
			numTries++;
    3760:	8b 81       	ldd	r24, Y+3	; 0x03
    3762:	9c 81       	ldd	r25, Y+4	; 0x04
    3764:	01 96       	adiw	r24, 0x01	; 1
    3766:	9c 83       	std	Y+4, r25	; 0x04
    3768:	8b 83       	std	Y+3, r24	; 0x03
    376a:	05 c0       	rjmp	.+10     	; 0x3776 <recievePayload+0x108>
		} else {
			sendACK();
    376c:	0e 94 23 1b 	call	0x3646	; 0x3646 <sendACK>
			return 0;
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	0a c0       	rjmp	.+20     	; 0x378a <recievePayload+0x11c>
	int numTries = 0;
	const int maxNumTries = 3;
	unsigned char data;
	int timeout;

	while(numTries < maxNumTries){
    3776:	2b 81       	ldd	r18, Y+3	; 0x03
    3778:	3c 81       	ldd	r19, Y+4	; 0x04
    377a:	8f 81       	ldd	r24, Y+7	; 0x07
    377c:	98 85       	ldd	r25, Y+8	; 0x08
    377e:	28 17       	cp	r18, r24
    3780:	39 07       	cpc	r19, r25
    3782:	0c f4       	brge	.+2      	; 0x3786 <recievePayload+0x118>
    3784:	8b cf       	rjmp	.-234    	; 0x369c <recievePayload+0x2e>
		} else {
			sendACK();
			return 0;
		}
	}
	return -1;
    3786:	8f ef       	ldi	r24, 0xFF	; 255
    3788:	9f ef       	ldi	r25, 0xFF	; 255
}
    378a:	2d 96       	adiw	r28, 0x0d	; 13
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	f8 94       	cli
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	cd bf       	out	0x3d, r28	; 61
    3796:	df 91       	pop	r29
    3798:	cf 91       	pop	r28
    379a:	08 95       	ret

0000379c <vTaskUSARTRead>:

void vTaskUSARTRead(void *pvParameters){
    379c:	cf 93       	push	r28
    379e:	df 93       	push	r29
    37a0:	cd b7       	in	r28, 0x3d	; 61
    37a2:	de b7       	in	r29, 0x3e	; 62
    37a4:	cc 55       	subi	r28, 0x5C	; 92
    37a6:	d1 09       	sbc	r29, r1
    37a8:	0f b6       	in	r0, 0x3f	; 63
    37aa:	f8 94       	cli
    37ac:	de bf       	out	0x3e, r29	; 62
    37ae:	0f be       	out	0x3f, r0	; 63
    37b0:	cd bf       	out	0x3d, r28	; 61
    37b2:	9e 01       	movw	r18, r28
    37b4:	25 5a       	subi	r18, 0xA5	; 165
    37b6:	3f 4f       	sbci	r19, 0xFF	; 255
    37b8:	f9 01       	movw	r30, r18
    37ba:	91 83       	std	Z+1, r25	; 0x01
    37bc:	80 83       	st	Z, r24
    unsigned char size;
    char groupID;
    char cmd;
    unsigned int timeout;

	DDRB = 0xFF;
    37be:	84 e2       	ldi	r24, 0x24	; 36
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	2f ef       	ldi	r18, 0xFF	; 255
    37c4:	fc 01       	movw	r30, r24
    37c6:	20 83       	st	Z, r18

    Command command;
    Response response;
    while(1){
        bytesRecieved = 0;
    37c8:	19 82       	std	Y+1, r1	; 0x01
        int timeout = 30;
    37ca:	8e e1       	ldi	r24, 0x1E	; 30
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	9b 83       	std	Y+3, r25	; 0x03
    37d0:	8a 83       	std	Y+2, r24	; 0x02
        while(bytesRecieved < 4){
    37d2:	2d c0       	rjmp	.+90     	; 0x382e <vTaskUSARTRead+0x92>
            
            while ( !(UCSR0A & (1<<RXC0)) ){
    37d4:	12 c0       	rjmp	.+36     	; 0x37fa <vTaskUSARTRead+0x5e>
                timeout--;
    37d6:	8a 81       	ldd	r24, Y+2	; 0x02
    37d8:	9b 81       	ldd	r25, Y+3	; 0x03
    37da:	01 97       	sbiw	r24, 0x01	; 1
    37dc:	9b 83       	std	Y+3, r25	; 0x03
    37de:	8a 83       	std	Y+2, r24	; 0x02
                if(timeout == 0){
    37e0:	8a 81       	ldd	r24, Y+2	; 0x02
    37e2:	9b 81       	ldd	r25, Y+3	; 0x03
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	29 f4       	brne	.+10     	; 0x37f2 <vTaskUSARTRead+0x56>
                    bytesRecieved = 0;
    37e8:	19 82       	std	Y+1, r1	; 0x01
                    timeout = 30;
    37ea:	8e e1       	ldi	r24, 0x1E	; 30
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	9b 83       	std	Y+3, r25	; 0x03
    37f0:	8a 83       	std	Y+2, r24	; 0x02
                }
                vTaskDelay(1);
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
    while(1){
        bytesRecieved = 0;
        int timeout = 30;
        while(bytesRecieved < 4){
            
            while ( !(UCSR0A & (1<<RXC0)) ){
    37fa:	80 ec       	ldi	r24, 0xC0	; 192
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	fc 01       	movw	r30, r24
    3800:	80 81       	ld	r24, Z
    3802:	88 23       	and	r24, r24
    3804:	44 f7       	brge	.-48     	; 0x37d6 <vTaskUSARTRead+0x3a>
                    bytesRecieved = 0;
                    timeout = 30;
                }
                vTaskDelay(1);
            }
            data = UDR0;
    3806:	86 ec       	ldi	r24, 0xC6	; 198
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	fc 01       	movw	r30, r24
    380c:	80 81       	ld	r24, Z
    380e:	8c 83       	std	Y+4, r24	; 0x04
            buffer[bytesRecieved] = data;
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	99 27       	eor	r25, r25
    3814:	87 fd       	sbrc	r24, 7
    3816:	90 95       	com	r25
    3818:	9e 01       	movw	r18, r28
    381a:	2a 5f       	subi	r18, 0xFA	; 250
    381c:	3f 4f       	sbci	r19, 0xFF	; 255
    381e:	82 0f       	add	r24, r18
    3820:	93 1f       	adc	r25, r19
    3822:	2c 81       	ldd	r18, Y+4	; 0x04
    3824:	fc 01       	movw	r30, r24
    3826:	20 83       	st	Z, r18
            bytesRecieved++;        
    3828:	89 81       	ldd	r24, Y+1	; 0x01
    382a:	8f 5f       	subi	r24, 0xFF	; 255
    382c:	89 83       	std	Y+1, r24	; 0x01
    Command command;
    Response response;
    while(1){
        bytesRecieved = 0;
        int timeout = 30;
        while(bytesRecieved < 4){
    382e:	89 81       	ldd	r24, Y+1	; 0x01
    3830:	84 30       	cpi	r24, 0x04	; 4
    3832:	84 f2       	brlt	.-96     	; 0x37d4 <vTaskUSARTRead+0x38>
            data = UDR0;
            buffer[bytesRecieved] = data;
            bytesRecieved++;        
        }

        if(calcChecksum(buffer,3) != buffer[3]){
    3834:	ce 01       	movw	r24, r28
    3836:	06 96       	adiw	r24, 0x06	; 6
    3838:	63 e0       	ldi	r22, 0x03	; 3
    383a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <calcChecksum>
    383e:	98 2f       	mov	r25, r24
    3840:	89 85       	ldd	r24, Y+9	; 0x09
    3842:	98 17       	cp	r25, r24
    3844:	21 f0       	breq	.+8      	; 0x384e <vTaskUSARTRead+0xb2>
            sendNACK();
    3846:	0e 94 2d 1b 	call	0x365a	; 0x365a <sendNACK>
            bytesRecieved = 0;
    384a:	19 82       	std	Y+1, r1	; 0x01
    384c:	29 c0       	rjmp	.+82     	; 0x38a0 <vTaskUSARTRead+0x104>
        } else {
            sendACK();
    384e:	0e 94 23 1b 	call	0x3646	; 0x3646 <sendACK>
            bytesRecieved = 0;
    3852:	19 82       	std	Y+1, r1	; 0x01
				command.groupID = buffer[0];
    3854:	8e 81       	ldd	r24, Y+6	; 0x06
    3856:	8e 8b       	std	Y+22, r24	; 0x16
				command.cmd = buffer[1];
    3858:	8f 81       	ldd	r24, Y+7	; 0x07
    385a:	8f 8b       	std	Y+23, r24	; 0x17
				size = buffer[2];
    385c:	88 85       	ldd	r24, Y+8	; 0x08
    385e:	8d 83       	std	Y+5, r24	; 0x05

				if(size > 0){ //No dynamic memory allocations. 16 is the size of the buffer
    3860:	8d 81       	ldd	r24, Y+5	; 0x05
    3862:	88 23       	and	r24, r24
    3864:	81 f0       	breq	.+32     	; 0x3886 <vTaskUSARTRead+0xea>
					if(recievePayload(size,command.payload) == -1){
    3866:	8d 81       	ldd	r24, Y+5	; 0x05
    3868:	88 2f       	mov	r24, r24
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	9e 01       	movw	r18, r28
    386e:	2a 5e       	subi	r18, 0xEA	; 234
    3870:	3f 4f       	sbci	r19, 0xFF	; 255
    3872:	2d 5f       	subi	r18, 0xFD	; 253
    3874:	3f 4f       	sbci	r19, 0xFF	; 255
    3876:	b9 01       	movw	r22, r18
    3878:	0e 94 37 1b 	call	0x366e	; 0x366e <recievePayload>
    387c:	8f 3f       	cpi	r24, 0xFF	; 255
    387e:	ff ef       	ldi	r31, 0xFF	; 255
    3880:	9f 07       	cpc	r25, r31
    3882:	09 f4       	brne	.+2      	; 0x3886 <vTaskUSARTRead+0xea>
						continue;	//Restart comms
    3884:	0d c0       	rjmp	.+26     	; 0x38a0 <vTaskUSARTRead+0x104>
					}
				}
				
 
            processCommand(&command,&response);
    3886:	9e 01       	movw	r18, r28
    3888:	27 5c       	subi	r18, 0xC7	; 199
    388a:	3f 4f       	sbci	r19, 0xFF	; 255
    388c:	ce 01       	movw	r24, r28
    388e:	46 96       	adiw	r24, 0x16	; 22
    3890:	b9 01       	movw	r22, r18
    3892:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <processCommand>
            sendResponse(&response);
    3896:	ce 01       	movw	r24, r28
    3898:	c9 96       	adiw	r24, 0x39	; 57
    389a:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <sendResponse>

        }

    }
    389e:	94 cf       	rjmp	.-216    	; 0x37c8 <vTaskUSARTRead+0x2c>
    38a0:	93 cf       	rjmp	.-218    	; 0x37c8 <vTaskUSARTRead+0x2c>

000038a2 <sendResponse>:

}

int sendResponse(Response* response){
    38a2:	cf 93       	push	r28
    38a4:	df 93       	push	r29
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	28 97       	sbiw	r28, 0x08	; 8
    38ac:	0f b6       	in	r0, 0x3f	; 63
    38ae:	f8 94       	cli
    38b0:	de bf       	out	0x3e, r29	; 62
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	cd bf       	out	0x3d, r28	; 61
    38b6:	98 87       	std	Y+8, r25	; 0x08
    38b8:	8f 83       	std	Y+7, r24	; 0x07
    char checksumBuffer[2];
    int i;
    int timeout = 50;
    38ba:	82 e3       	ldi	r24, 0x32	; 50
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	9c 83       	std	Y+4, r25	; 0x04
    38c0:	8b 83       	std	Y+3, r24	; 0x03
    while(1){
        	USART_Write(response->commandBack);
    38c2:	8f 81       	ldd	r24, Y+7	; 0x07
    38c4:	98 85       	ldd	r25, Y+8	; 0x08
    38c6:	fc 01       	movw	r30, r24
    38c8:	80 81       	ld	r24, Z
    38ca:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>
			vTaskDelay(1);
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
        	USART_Write(response->size);
    38d6:	8f 81       	ldd	r24, Y+7	; 0x07
    38d8:	98 85       	ldd	r25, Y+8	; 0x08
    38da:	fc 01       	movw	r30, r24
    38dc:	81 81       	ldd	r24, Z+1	; 0x01
    38de:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>
			vTaskDelay(1);
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
        	checksumBuffer[0] = response->commandBack;
    38ea:	8f 81       	ldd	r24, Y+7	; 0x07
    38ec:	98 85       	ldd	r25, Y+8	; 0x08
    38ee:	fc 01       	movw	r30, r24
    38f0:	80 81       	ld	r24, Z
    38f2:	8d 83       	std	Y+5, r24	; 0x05
        	checksumBuffer[1] = response->size;
    38f4:	8f 81       	ldd	r24, Y+7	; 0x07
    38f6:	98 85       	ldd	r25, Y+8	; 0x08
    38f8:	fc 01       	movw	r30, r24
    38fa:	81 81       	ldd	r24, Z+1	; 0x01
    38fc:	8e 83       	std	Y+6, r24	; 0x06
        	USART_Write(calcChecksum(checksumBuffer,2));
    38fe:	ce 01       	movw	r24, r28
    3900:	05 96       	adiw	r24, 0x05	; 5
    3902:	62 e0       	ldi	r22, 0x02	; 2
    3904:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <calcChecksum>
    3908:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>
        	switch(waitForAck()){
    390c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <waitForAck>
    3910:	99 27       	eor	r25, r25
    3912:	87 fd       	sbrc	r24, 7
    3914:	90 95       	com	r25
    3916:	00 97       	sbiw	r24, 0x00	; 0
    3918:	59 f0       	breq	.+22     	; 0x3930 <sendResponse+0x8e>
    391a:	81 30       	cpi	r24, 0x01	; 1
    391c:	91 05       	cpc	r25, r1
    391e:	a9 f0       	breq	.+42     	; 0x394a <sendResponse+0xa8>
    3920:	8f 3f       	cpi	r24, 0xFF	; 255
    3922:	ff ef       	ldi	r31, 0xFF	; 255
    3924:	9f 07       	cpc	r25, r31
    3926:	09 f0       	breq	.+2      	; 0x392a <sendResponse+0x88>
           	timeout--;
           	if(!timeout){
              	return -1;
           	}
        	}
    }
    3928:	cc cf       	rjmp	.-104    	; 0x38c2 <sendResponse+0x20>
        	USART_Write(calcChecksum(checksumBuffer,2));
        	switch(waitForAck()){
        	case 1:
           	goto outOfWhile;
        	case -1:
           	return -1;
    392a:	8f ef       	ldi	r24, 0xFF	; 255
    392c:	9f ef       	ldi	r25, 0xFF	; 255
    392e:	43 c0       	rjmp	.+134    	; 0x39b6 <sendResponse+0x114>
        	case 0:
           	timeout--;
    3930:	8b 81       	ldd	r24, Y+3	; 0x03
    3932:	9c 81       	ldd	r25, Y+4	; 0x04
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	9c 83       	std	Y+4, r25	; 0x04
    3938:	8b 83       	std	Y+3, r24	; 0x03
           	if(!timeout){
    393a:	8b 81       	ldd	r24, Y+3	; 0x03
    393c:	9c 81       	ldd	r25, Y+4	; 0x04
    393e:	00 97       	sbiw	r24, 0x00	; 0
    3940:	19 f4       	brne	.+6      	; 0x3948 <sendResponse+0xa6>
              	return -1;
    3942:	8f ef       	ldi	r24, 0xFF	; 255
    3944:	9f ef       	ldi	r25, 0xFF	; 255
    3946:	37 c0       	rjmp	.+110    	; 0x39b6 <sendResponse+0x114>
           	}
        	}
    }
    3948:	bc cf       	rjmp	.-136    	; 0x38c2 <sendResponse+0x20>
        	checksumBuffer[0] = response->commandBack;
        	checksumBuffer[1] = response->size;
        	USART_Write(calcChecksum(checksumBuffer,2));
        	switch(waitForAck()){
        	case 1:
           	goto outOfWhile;
    394a:	00 00       	nop
    }

    outOfWhile:


    for(i=0;i<response->size;i++){
    394c:	1a 82       	std	Y+2, r1	; 0x02
    394e:	19 82       	std	Y+1, r1	; 0x01
    3950:	14 c0       	rjmp	.+40     	; 0x397a <sendResponse+0xd8>
        USART_Write(response->payload[i]);
    3952:	2f 81       	ldd	r18, Y+7	; 0x07
    3954:	38 85       	ldd	r19, Y+8	; 0x08
    3956:	89 81       	ldd	r24, Y+1	; 0x01
    3958:	9a 81       	ldd	r25, Y+2	; 0x02
    395a:	82 0f       	add	r24, r18
    395c:	93 1f       	adc	r25, r19
    395e:	02 96       	adiw	r24, 0x02	; 2
    3960:	fc 01       	movw	r30, r24
    3962:	80 81       	ld	r24, Z
    3964:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>
			vTaskDelay(1);
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
    }

    outOfWhile:


    for(i=0;i<response->size;i++){
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	9a 81       	ldd	r25, Y+2	; 0x02
    3974:	01 96       	adiw	r24, 0x01	; 1
    3976:	9a 83       	std	Y+2, r25	; 0x02
    3978:	89 83       	std	Y+1, r24	; 0x01
    397a:	8f 81       	ldd	r24, Y+7	; 0x07
    397c:	98 85       	ldd	r25, Y+8	; 0x08
    397e:	fc 01       	movw	r30, r24
    3980:	81 81       	ldd	r24, Z+1	; 0x01
    3982:	28 2f       	mov	r18, r24
    3984:	33 27       	eor	r19, r19
    3986:	27 fd       	sbrc	r18, 7
    3988:	30 95       	com	r19
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	9a 81       	ldd	r25, Y+2	; 0x02
    398e:	82 17       	cp	r24, r18
    3990:	93 07       	cpc	r25, r19
    3992:	fc f2       	brlt	.-66     	; 0x3952 <sendResponse+0xb0>
        USART_Write(response->payload[i]);
			vTaskDelay(1);
		  //USART_AddToQueue(0x30 | (i + 2));
        //USART_AddToQueue()
    }
    USART_Write(calcChecksum((uint8_t*)response->payload,response->size));
    3994:	8f 81       	ldd	r24, Y+7	; 0x07
    3996:	98 85       	ldd	r25, Y+8	; 0x08
    3998:	fc 01       	movw	r30, r24
    399a:	81 81       	ldd	r24, Z+1	; 0x01
    399c:	28 2f       	mov	r18, r24
    399e:	8f 81       	ldd	r24, Y+7	; 0x07
    39a0:	98 85       	ldd	r25, Y+8	; 0x08
    39a2:	02 96       	adiw	r24, 0x02	; 2
    39a4:	62 2f       	mov	r22, r18
    39a6:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <calcChecksum>
    39aa:	0e 94 cc 19 	call	0x3398	; 0x3398 <USART_Write>
	 

    waitForAck();
    39ae:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <waitForAck>

    return 0;
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0

}
    39b6:	28 96       	adiw	r28, 0x08	; 8
    39b8:	0f b6       	in	r0, 0x3f	; 63
    39ba:	f8 94       	cli
    39bc:	de bf       	out	0x3e, r29	; 62
    39be:	0f be       	out	0x3f, r0	; 63
    39c0:	cd bf       	out	0x3d, r28	; 61
    39c2:	df 91       	pop	r29
    39c4:	cf 91       	pop	r28
    39c6:	08 95       	ret

000039c8 <waitForAck>:

char waitForAck(){
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	1f 92       	push	r1
    39ce:	1f 92       	push	r1
    39d0:	cd b7       	in	r28, 0x3d	; 61
    39d2:	de b7       	in	r29, 0x3e	; 62
    int timeout = 5000;
    39d4:	88 e8       	ldi	r24, 0x88	; 136
    39d6:	93 e1       	ldi	r25, 0x13	; 19
    39d8:	9a 83       	std	Y+2, r25	; 0x02
    39da:	89 83       	std	Y+1, r24	; 0x01
    while ( !(UCSR2A & (1<<RXC2)) ){
    39dc:	0b c0       	rjmp	.+22     	; 0x39f4 <waitForAck+0x2c>
        timeout--;
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	9a 81       	ldd	r25, Y+2	; 0x02
    39e2:	01 97       	sbiw	r24, 0x01	; 1
    39e4:	9a 83       	std	Y+2, r25	; 0x02
    39e6:	89 83       	std	Y+1, r24	; 0x01
        if(!timeout){
    39e8:	89 81       	ldd	r24, Y+1	; 0x01
    39ea:	9a 81       	ldd	r25, Y+2	; 0x02
    39ec:	00 97       	sbiw	r24, 0x00	; 0
    39ee:	11 f4       	brne	.+4      	; 0x39f4 <waitForAck+0x2c>
            return -1;
    39f0:	8f ef       	ldi	r24, 0xFF	; 255
    39f2:	0f c0       	rjmp	.+30     	; 0x3a12 <waitForAck+0x4a>

}

char waitForAck(){
    int timeout = 5000;
    while ( !(UCSR2A & (1<<RXC2)) ){
    39f4:	80 ed       	ldi	r24, 0xD0	; 208
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	fc 01       	movw	r30, r24
    39fa:	80 81       	ld	r24, Z
    39fc:	88 23       	and	r24, r24
    39fe:	7c f7       	brge	.-34     	; 0x39de <waitForAck+0x16>
        timeout--;
        if(!timeout){
            return -1;
        }
    }
    if(UDR2 == ACK_BYTE){
    3a00:	86 ed       	ldi	r24, 0xD6	; 214
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	fc 01       	movw	r30, r24
    3a06:	80 81       	ld	r24, Z
    3a08:	80 38       	cpi	r24, 0x80	; 128
    3a0a:	11 f4       	brne	.+4      	; 0x3a10 <waitForAck+0x48>
        return 1;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	01 c0       	rjmp	.+2      	; 0x3a12 <waitForAck+0x4a>
    } else {
        return 0;
    3a10:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	08 95       	ret

00003a1c <calcChecksum>:

uint8_t calcChecksum(uint8_t* buffer,uint8_t size){
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	00 d0       	rcall	.+0      	; 0x3a22 <calcChecksum+0x6>
    3a22:	00 d0       	rcall	.+0      	; 0x3a24 <calcChecksum+0x8>
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
    3a28:	9d 83       	std	Y+5, r25	; 0x05
    3a2a:	8c 83       	std	Y+4, r24	; 0x04
    3a2c:	6e 83       	std	Y+6, r22	; 0x06
    uint8_t checksum = 0;
    3a2e:	19 82       	std	Y+1, r1	; 0x01
    for(int i = 0; i < size; i++) {
    3a30:	1b 82       	std	Y+3, r1	; 0x03
    3a32:	1a 82       	std	Y+2, r1	; 0x02
    3a34:	11 c0       	rjmp	.+34     	; 0x3a58 <calcChecksum+0x3c>
        checksum += *(buffer++);
    3a36:	8c 81       	ldd	r24, Y+4	; 0x04
    3a38:	9d 81       	ldd	r25, Y+5	; 0x05
    3a3a:	9c 01       	movw	r18, r24
    3a3c:	2f 5f       	subi	r18, 0xFF	; 255
    3a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a40:	3d 83       	std	Y+5, r19	; 0x05
    3a42:	2c 83       	std	Y+4, r18	; 0x04
    3a44:	fc 01       	movw	r30, r24
    3a46:	80 81       	ld	r24, Z
    3a48:	99 81       	ldd	r25, Y+1	; 0x01
    3a4a:	89 0f       	add	r24, r25
    3a4c:	89 83       	std	Y+1, r24	; 0x01
    }
}

uint8_t calcChecksum(uint8_t* buffer,uint8_t size){
    uint8_t checksum = 0;
    for(int i = 0; i < size; i++) {
    3a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a50:	9b 81       	ldd	r25, Y+3	; 0x03
    3a52:	01 96       	adiw	r24, 0x01	; 1
    3a54:	9b 83       	std	Y+3, r25	; 0x03
    3a56:	8a 83       	std	Y+2, r24	; 0x02
    3a58:	8e 81       	ldd	r24, Y+6	; 0x06
    3a5a:	28 2f       	mov	r18, r24
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a60:	9b 81       	ldd	r25, Y+3	; 0x03
    3a62:	82 17       	cp	r24, r18
    3a64:	93 07       	cpc	r25, r19
    3a66:	3c f3       	brlt	.-50     	; 0x3a36 <calcChecksum+0x1a>
        checksum += *(buffer++);
    }
    return checksum;
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a6a:	26 96       	adiw	r28, 0x06	; 6
    3a6c:	0f b6       	in	r0, 0x3f	; 63
    3a6e:	f8 94       	cli
    3a70:	de bf       	out	0x3e, r29	; 62
    3a72:	0f be       	out	0x3f, r0	; 63
    3a74:	cd bf       	out	0x3d, r28	; 61
    3a76:	df 91       	pop	r29
    3a78:	cf 91       	pop	r28
    3a7a:	08 95       	ret

00003a7c <commandIntegCheck>:
#include "protocol.h"
#include "Components/Sonar/Sonar.h"


//function to CRC the command structure
char commandIntegCheck(Command *command) {
    3a7c:	cf 93       	push	r28
    3a7e:	df 93       	push	r29
    3a80:	1f 92       	push	r1
    3a82:	1f 92       	push	r1
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	9a 83       	std	Y+2, r25	; 0x02
    3a8a:	89 83       	std	Y+1, r24	; 0x01
   //CRC the command with 0x00 in place of the CRC
   //return success for now
   return 1;
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
}
    3a8e:	0f 90       	pop	r0
    3a90:	0f 90       	pop	r0
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	08 95       	ret

00003a98 <processUltrasonicCommand>:

char processUltrasonicCommand(char commandCode, void* commandData,char* size, void* responseData) {
    3a98:	cf 93       	push	r28
    3a9a:	df 93       	push	r29
    3a9c:	cd b7       	in	r28, 0x3d	; 61
    3a9e:	de b7       	in	r29, 0x3e	; 62
    3aa0:	27 97       	sbiw	r28, 0x07	; 7
    3aa2:	0f b6       	in	r0, 0x3f	; 63
    3aa4:	f8 94       	cli
    3aa6:	de bf       	out	0x3e, r29	; 62
    3aa8:	0f be       	out	0x3f, r0	; 63
    3aaa:	cd bf       	out	0x3d, r28	; 61
    3aac:	89 83       	std	Y+1, r24	; 0x01
    3aae:	7b 83       	std	Y+3, r23	; 0x03
    3ab0:	6a 83       	std	Y+2, r22	; 0x02
    3ab2:	5d 83       	std	Y+5, r21	; 0x05
    3ab4:	4c 83       	std	Y+4, r20	; 0x04
    3ab6:	3f 83       	std	Y+7, r19	; 0x07
    3ab8:	2e 83       	std	Y+6, r18	; 0x06
   switch(commandCode) {
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	99 27       	eor	r25, r25
    3abe:	87 fd       	sbrc	r24, 7
    3ac0:	90 95       	com	r25
    3ac2:	82 30       	cpi	r24, 0x02	; 2
    3ac4:	91 05       	cpc	r25, r1
    3ac6:	81 f0       	breq	.+32     	; 0x3ae8 <processUltrasonicCommand+0x50>
    3ac8:	83 30       	cpi	r24, 0x03	; 3
    3aca:	91 05       	cpc	r25, r1
    3acc:	c1 f0       	breq	.+48     	; 0x3afe <processUltrasonicCommand+0x66>
    3ace:	81 30       	cpi	r24, 0x01	; 1
    3ad0:	91 05       	cpc	r25, r1
    3ad2:	01 f5       	brne	.+64     	; 0x3b14 <processUltrasonicCommand+0x7c>
      case GET_ALL_SENSORS:
         getAllSensors((int*) responseData);
    3ad4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ad6:	9f 81       	ldd	r25, Y+7	; 0x07
    3ad8:	0e 94 c6 21 	call	0x438c	; 0x438c <getAllSensors>
         *size = 12;
    3adc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ade:	9d 81       	ldd	r25, Y+5	; 0x05
    3ae0:	2c e0       	ldi	r18, 0x0C	; 12
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	20 83       	st	Z, r18
         break;
    3ae6:	16 c0       	rjmp	.+44     	; 0x3b14 <processUltrasonicCommand+0x7c>
      case GET_CERTAIN_SENSORS:
         getCertainSensor(((char*)commandData)[0], (int*) responseData);
    3ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aea:	9b 81       	ldd	r25, Y+3	; 0x03
    3aec:	fc 01       	movw	r30, r24
    3aee:	20 81       	ld	r18, Z
    3af0:	8e 81       	ldd	r24, Y+6	; 0x06
    3af2:	9f 81       	ldd	r25, Y+7	; 0x07
    3af4:	bc 01       	movw	r22, r24
    3af6:	82 2f       	mov	r24, r18
    3af8:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <getCertainSensor>
         break;
    3afc:	0b c0       	rjmp	.+22     	; 0x3b14 <processUltrasonicCommand+0x7c>
      case GET_SENSOR_GROUP:
         getSensorGroup(((char*)commandData)[0], (int*) responseData);
    3afe:	8a 81       	ldd	r24, Y+2	; 0x02
    3b00:	9b 81       	ldd	r25, Y+3	; 0x03
    3b02:	fc 01       	movw	r30, r24
    3b04:	20 81       	ld	r18, Z
    3b06:	8e 81       	ldd	r24, Y+6	; 0x06
    3b08:	9f 81       	ldd	r25, Y+7	; 0x07
    3b0a:	bc 01       	movw	r22, r24
    3b0c:	82 2f       	mov	r24, r18
    3b0e:	0e 94 1c 22 	call	0x4438	; 0x4438 <getSensorGroup>
         break;
    3b12:	00 00       	nop
   }
   //return success for now...
   return 1;
    3b14:	81 e0       	ldi	r24, 0x01	; 1
}
    3b16:	27 96       	adiw	r28, 0x07	; 7
    3b18:	0f b6       	in	r0, 0x3f	; 63
    3b1a:	f8 94       	cli
    3b1c:	de bf       	out	0x3e, r29	; 62
    3b1e:	0f be       	out	0x3f, r0	; 63
    3b20:	cd bf       	out	0x3d, r28	; 61
    3b22:	df 91       	pop	r29
    3b24:	cf 91       	pop	r28
    3b26:	08 95       	ret

00003b28 <processSpeedCommand>:

char processSpeedCommand(char commandCode, void* commandData, Response* responseData) {
    3b28:	cf 93       	push	r28
    3b2a:	df 93       	push	r29
    3b2c:	00 d0       	rcall	.+0      	; 0x3b2e <processSpeedCommand+0x6>
    3b2e:	1f 92       	push	r1
    3b30:	1f 92       	push	r1
    3b32:	cd b7       	in	r28, 0x3d	; 61
    3b34:	de b7       	in	r29, 0x3e	; 62
    3b36:	89 83       	std	Y+1, r24	; 0x01
    3b38:	7b 83       	std	Y+3, r23	; 0x03
    3b3a:	6a 83       	std	Y+2, r22	; 0x02
    3b3c:	5d 83       	std	Y+5, r21	; 0x05
    3b3e:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	99 27       	eor	r25, r25
    3b44:	87 fd       	sbrc	r24, 7
    3b46:	90 95       	com	r25
    3b48:	00 97       	sbiw	r24, 0x00	; 0
    3b4a:	21 f0       	breq	.+8      	; 0x3b54 <processSpeedCommand+0x2c>
    3b4c:	81 30       	cpi	r24, 0x01	; 1
    3b4e:	91 05       	cpc	r25, r1
    3b50:	31 f0       	breq	.+12     	; 0x3b5e <processSpeedCommand+0x36>
    3b52:	13 c0       	rjmp	.+38     	; 0x3b7a <processSpeedCommand+0x52>
      case GET_SPEED:
         getSpeed((char*) responseData);
    3b54:	8c 81       	ldd	r24, Y+4	; 0x04
    3b56:	9d 81       	ldd	r25, Y+5	; 0x05
    3b58:	0e 94 c4 22 	call	0x4588	; 0x4588 <getSpeed>
         break;
    3b5c:	0e c0       	rjmp	.+28     	; 0x3b7a <processSpeedCommand+0x52>
      case SET_SPEED:
			responseData->size = 0;
    3b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b60:	9d 81       	ldd	r25, Y+5	; 0x05
    3b62:	fc 01       	movw	r30, r24
    3b64:	11 82       	std	Z+1, r1	; 0x01
         setSpeed(((char*)commandData)[0]);
    3b66:	8a 81       	ldd	r24, Y+2	; 0x02
    3b68:	9b 81       	ldd	r25, Y+3	; 0x03
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	80 81       	ld	r24, Z
    3b6e:	99 27       	eor	r25, r25
    3b70:	87 fd       	sbrc	r24, 7
    3b72:	90 95       	com	r25
    3b74:	0e 94 d6 22 	call	0x45ac	; 0x45ac <setSpeed>
         break;
    3b78:	00 00       	nop
   }
   //return success for now
   return 1;
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
}
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	0f 90       	pop	r0
    3b86:	df 91       	pop	r29
    3b88:	cf 91       	pop	r28
    3b8a:	08 95       	ret

00003b8c <processSteeringCommand>:

char processSteeringCommand(char commandCode, void* commandData, void* responseData) {
    3b8c:	cf 93       	push	r28
    3b8e:	df 93       	push	r29
    3b90:	00 d0       	rcall	.+0      	; 0x3b92 <processSteeringCommand+0x6>
    3b92:	1f 92       	push	r1
    3b94:	1f 92       	push	r1
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	89 83       	std	Y+1, r24	; 0x01
    3b9c:	7b 83       	std	Y+3, r23	; 0x03
    3b9e:	6a 83       	std	Y+2, r22	; 0x02
    3ba0:	5d 83       	std	Y+5, r21	; 0x05
    3ba2:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	99 27       	eor	r25, r25
    3ba8:	87 fd       	sbrc	r24, 7
    3baa:	90 95       	com	r25
    3bac:	82 30       	cpi	r24, 0x02	; 2
    3bae:	91 05       	cpc	r25, r1
    3bb0:	f9 f0       	breq	.+62     	; 0x3bf0 <processSteeringCommand+0x64>
    3bb2:	83 30       	cpi	r24, 0x03	; 3
    3bb4:	91 05       	cpc	r25, r1
    3bb6:	34 f4       	brge	.+12     	; 0x3bc4 <processSteeringCommand+0x38>
    3bb8:	00 97       	sbiw	r24, 0x00	; 0
    3bba:	59 f0       	breq	.+22     	; 0x3bd2 <processSteeringCommand+0x46>
    3bbc:	81 30       	cpi	r24, 0x01	; 1
    3bbe:	91 05       	cpc	r25, r1
    3bc0:	91 f0       	breq	.+36     	; 0x3be6 <processSteeringCommand+0x5a>
    3bc2:	4c c0       	rjmp	.+152    	; 0x3c5c <processSteeringCommand+0xd0>
    3bc4:	83 30       	cpi	r24, 0x03	; 3
    3bc6:	91 05       	cpc	r25, r1
    3bc8:	c1 f0       	breq	.+48     	; 0x3bfa <processSteeringCommand+0x6e>
    3bca:	84 30       	cpi	r24, 0x04	; 4
    3bcc:	91 05       	cpc	r25, r1
    3bce:	91 f1       	breq	.+100    	; 0x3c34 <processSteeringCommand+0xa8>
    3bd0:	45 c0       	rjmp	.+138    	; 0x3c5c <processSteeringCommand+0xd0>
      case SET_ANGLE:
         setAngle(*((char*)commandData));
    3bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd6:	fc 01       	movw	r30, r24
    3bd8:	80 81       	ld	r24, Z
    3bda:	99 27       	eor	r25, r25
    3bdc:	87 fd       	sbrc	r24, 7
    3bde:	90 95       	com	r25
    3be0:	0e 94 e7 22 	call	0x45ce	; 0x45ce <setAngle>
         break;
    3be4:	3b c0       	rjmp	.+118    	; 0x3c5c <processSteeringCommand+0xd0>
      case GET_ANGLE:
         getAngle((char*) responseData);
    3be6:	8c 81       	ldd	r24, Y+4	; 0x04
    3be8:	9d 81       	ldd	r25, Y+5	; 0x05
    3bea:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <getAngle>
         break;
    3bee:	36 c0       	rjmp	.+108    	; 0x3c5c <processSteeringCommand+0xd0>
      case GET_DESIRED_ANGLE:
         getDesiredAngle((char*) responseData);
    3bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    3bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    3bf4:	0e 94 04 23 	call	0x4608	; 0x4608 <getDesiredAngle>
         break;
    3bf8:	31 c0       	rjmp	.+98     	; 0x3c5c <processSteeringCommand+0xd0>
      case CHANGE_PID:
         changePID(((char*)commandData)[0], ((char*)commandData)[1], ((char*)commandData)[2]);
    3bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    3bfe:	02 96       	adiw	r24, 0x02	; 2
    3c00:	fc 01       	movw	r30, r24
    3c02:	80 81       	ld	r24, Z
    3c04:	48 2f       	mov	r20, r24
    3c06:	55 27       	eor	r21, r21
    3c08:	47 fd       	sbrc	r20, 7
    3c0a:	50 95       	com	r21
    3c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c10:	01 96       	adiw	r24, 0x01	; 1
    3c12:	fc 01       	movw	r30, r24
    3c14:	80 81       	ld	r24, Z
    3c16:	28 2f       	mov	r18, r24
    3c18:	33 27       	eor	r19, r19
    3c1a:	27 fd       	sbrc	r18, 7
    3c1c:	30 95       	com	r19
    3c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c20:	9b 81       	ldd	r25, Y+3	; 0x03
    3c22:	fc 01       	movw	r30, r24
    3c24:	80 81       	ld	r24, Z
    3c26:	99 27       	eor	r25, r25
    3c28:	87 fd       	sbrc	r24, 7
    3c2a:	90 95       	com	r25
    3c2c:	b9 01       	movw	r22, r18
    3c2e:	0e 94 16 23 	call	0x462c	; 0x462c <changePID>
         break;
    3c32:	14 c0       	rjmp	.+40     	; 0x3c5c <processSteeringCommand+0xd0>
      case SET_LIMITS:
         setLimits(((char*)commandData)[0], ((char*)commandData)[1]);
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	9b 81       	ldd	r25, Y+3	; 0x03
    3c38:	01 96       	adiw	r24, 0x01	; 1
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	80 81       	ld	r24, Z
    3c3e:	28 2f       	mov	r18, r24
    3c40:	33 27       	eor	r19, r19
    3c42:	27 fd       	sbrc	r18, 7
    3c44:	30 95       	com	r19
    3c46:	8a 81       	ldd	r24, Y+2	; 0x02
    3c48:	9b 81       	ldd	r25, Y+3	; 0x03
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	80 81       	ld	r24, Z
    3c4e:	99 27       	eor	r25, r25
    3c50:	87 fd       	sbrc	r24, 7
    3c52:	90 95       	com	r25
    3c54:	b9 01       	movw	r22, r18
    3c56:	0e 94 25 23 	call	0x464a	; 0x464a <setLimits>
         break;
    3c5a:	00 00       	nop
   }
   //return success for now
   return 1;
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
}
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	0f 90       	pop	r0
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	df 91       	pop	r29
    3c6a:	cf 91       	pop	r28
    3c6c:	08 95       	ret

00003c6e <processFNRCommand>:

char processFNRCommand(char commandCode, void* commandData, Response* responseData) {
    3c6e:	cf 93       	push	r28
    3c70:	df 93       	push	r29
    3c72:	00 d0       	rcall	.+0      	; 0x3c74 <processFNRCommand+0x6>
    3c74:	1f 92       	push	r1
    3c76:	1f 92       	push	r1
    3c78:	cd b7       	in	r28, 0x3d	; 61
    3c7a:	de b7       	in	r29, 0x3e	; 62
    3c7c:	89 83       	std	Y+1, r24	; 0x01
    3c7e:	7b 83       	std	Y+3, r23	; 0x03
    3c80:	6a 83       	std	Y+2, r22	; 0x02
    3c82:	5d 83       	std	Y+5, r21	; 0x05
    3c84:	4c 83       	std	Y+4, r20	; 0x04
	responseData->size = 0;	
    3c86:	8c 81       	ldd	r24, Y+4	; 0x04
    3c88:	9d 81       	ldd	r25, Y+5	; 0x05
    3c8a:	fc 01       	movw	r30, r24
    3c8c:	11 82       	std	Z+1, r1	; 0x01
   switch(commandCode) {
    3c8e:	89 81       	ldd	r24, Y+1	; 0x01
    3c90:	99 27       	eor	r25, r25
    3c92:	87 fd       	sbrc	r24, 7
    3c94:	90 95       	com	r25
    3c96:	00 97       	sbiw	r24, 0x00	; 0
    3c98:	21 f0       	breq	.+8      	; 0x3ca2 <processFNRCommand+0x34>
    3c9a:	81 30       	cpi	r24, 0x01	; 1
    3c9c:	91 05       	cpc	r25, r1
    3c9e:	59 f0       	breq	.+22     	; 0x3cb6 <processFNRCommand+0x48>
    3ca0:	0f c0       	rjmp	.+30     	; 0x3cc0 <processFNRCommand+0x52>
      case SET_FNR:
         setFNR(*((char*)commandData));
    3ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca6:	fc 01       	movw	r30, r24
    3ca8:	80 81       	ld	r24, Z
    3caa:	99 27       	eor	r25, r25
    3cac:	87 fd       	sbrc	r24, 7
    3cae:	90 95       	com	r25
    3cb0:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setFNR>
         break;
    3cb4:	05 c0       	rjmp	.+10     	; 0x3cc0 <processFNRCommand+0x52>
      case GET_FNR:
         getFNR((char*) responseData);
    3cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    3cba:	0e 94 76 20 	call	0x40ec	; 0x40ec <getFNR>
         break;
    3cbe:	00 00       	nop
   }
}
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	08 95       	ret

00003cd0 <processBrakeCommand>:

char processBrakeCommand(char commandCode, void* commandData, void* responseData) {
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
    3cd4:	00 d0       	rcall	.+0      	; 0x3cd6 <processBrakeCommand+0x6>
    3cd6:	1f 92       	push	r1
    3cd8:	1f 92       	push	r1
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
    3cde:	89 83       	std	Y+1, r24	; 0x01
    3ce0:	7b 83       	std	Y+3, r23	; 0x03
    3ce2:	6a 83       	std	Y+2, r22	; 0x02
    3ce4:	5d 83       	std	Y+5, r21	; 0x05
    3ce6:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	99 27       	eor	r25, r25
    3cec:	87 fd       	sbrc	r24, 7
    3cee:	90 95       	com	r25
    3cf0:	00 97       	sbiw	r24, 0x00	; 0
    3cf2:	21 f0       	breq	.+8      	; 0x3cfc <processBrakeCommand+0x2c>
    3cf4:	81 30       	cpi	r24, 0x01	; 1
    3cf6:	91 05       	cpc	r25, r1
    3cf8:	59 f0       	breq	.+22     	; 0x3d10 <processBrakeCommand+0x40>
    3cfa:	0f c0       	rjmp	.+30     	; 0x3d1a <processBrakeCommand+0x4a>
      case SET_BRAKE:
	 setBrake(*((char*)commandData));
    3cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    3d00:	fc 01       	movw	r30, r24
    3d02:	80 81       	ld	r24, Z
    3d04:	99 27       	eor	r25, r25
    3d06:	87 fd       	sbrc	r24, 7
    3d08:	90 95       	com	r25
    3d0a:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <setBrake>
	 break;
    3d0e:	05 c0       	rjmp	.+10     	; 0x3d1a <processBrakeCommand+0x4a>
      case GET_BRAKE:
	 getBrake((char*) responseData);
    3d10:	8c 81       	ldd	r24, Y+4	; 0x04
    3d12:	9d 81       	ldd	r25, Y+5	; 0x05
    3d14:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <getBrake>
	 break; 
    3d18:	00 00       	nop
   }
}
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	0f 90       	pop	r0
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	08 95       	ret

00003d2a <processBatteryCommand>:

char processBatteryCommand(char commandCode, void* commandData, void* responseData) {
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	00 d0       	rcall	.+0      	; 0x3d30 <processBatteryCommand+0x6>
    3d30:	1f 92       	push	r1
    3d32:	1f 92       	push	r1
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
    3d38:	89 83       	std	Y+1, r24	; 0x01
    3d3a:	7b 83       	std	Y+3, r23	; 0x03
    3d3c:	6a 83       	std	Y+2, r22	; 0x02
    3d3e:	5d 83       	std	Y+5, r21	; 0x05
    3d40:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
    3d44:	99 27       	eor	r25, r25
    3d46:	87 fd       	sbrc	r24, 7
    3d48:	90 95       	com	r25
    3d4a:	00 97       	sbiw	r24, 0x00	; 0
    3d4c:	21 f0       	breq	.+8      	; 0x3d56 <processBatteryCommand+0x2c>
    3d4e:	81 30       	cpi	r24, 0x01	; 1
    3d50:	91 05       	cpc	r25, r1
    3d52:	31 f0       	breq	.+12     	; 0x3d60 <processBatteryCommand+0x36>
    3d54:	0a c0       	rjmp	.+20     	; 0x3d6a <processBatteryCommand+0x40>
      case GET_BATTERY_VOLTAGE:
         getBatteryVoltage((char*) responseData);
    3d56:	8c 81       	ldd	r24, Y+4	; 0x04
    3d58:	9d 81       	ldd	r25, Y+5	; 0x05
    3d5a:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <getBatteryVoltage>
         break;
    3d5e:	05 c0       	rjmp	.+10     	; 0x3d6a <processBatteryCommand+0x40>
      case GET_STEERING_VOLTAGE:
         getSteeringVoltage((char*) responseData);
    3d60:	8c 81       	ldd	r24, Y+4	; 0x04
    3d62:	9d 81       	ldd	r25, Y+5	; 0x05
    3d64:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <getSteeringVoltage>
         break;
    3d68:	00 00       	nop
   }
}
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	0f 90       	pop	r0
    3d72:	0f 90       	pop	r0
    3d74:	df 91       	pop	r29
    3d76:	cf 91       	pop	r28
    3d78:	08 95       	ret

00003d7a <processLightCommand>:

char processLightCommand(char commandCode, void* commandData, Response* responseData) {
    3d7a:	cf 93       	push	r28
    3d7c:	df 93       	push	r29
    3d7e:	00 d0       	rcall	.+0      	; 0x3d80 <processLightCommand+0x6>
    3d80:	1f 92       	push	r1
    3d82:	1f 92       	push	r1
    3d84:	cd b7       	in	r28, 0x3d	; 61
    3d86:	de b7       	in	r29, 0x3e	; 62
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	7b 83       	std	Y+3, r23	; 0x03
    3d8c:	6a 83       	std	Y+2, r22	; 0x02
    3d8e:	5d 83       	std	Y+5, r21	; 0x05
    3d90:	4c 83       	std	Y+4, r20	; 0x04
	responseData->size = 0;
    3d92:	8c 81       	ldd	r24, Y+4	; 0x04
    3d94:	9d 81       	ldd	r25, Y+5	; 0x05
    3d96:	fc 01       	movw	r30, r24
    3d98:	11 82       	std	Z+1, r1	; 0x01
   switch(commandCode) {
    3d9a:	89 81       	ldd	r24, Y+1	; 0x01
    3d9c:	99 27       	eor	r25, r25
    3d9e:	87 fd       	sbrc	r24, 7
    3da0:	90 95       	com	r25
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	51 f4       	brne	.+20     	; 0x3dba <processLightCommand+0x40>
   case SET_LIGHT:
	 	setLight(*((char*)commandData));
    3da6:	8a 81       	ldd	r24, Y+2	; 0x02
    3da8:	9b 81       	ldd	r25, Y+3	; 0x03
    3daa:	fc 01       	movw	r30, r24
    3dac:	80 81       	ld	r24, Z
    3dae:	99 27       	eor	r25, r25
    3db0:	87 fd       	sbrc	r24, 7
    3db2:	90 95       	com	r25
    3db4:	0e 94 88 20 	call	0x4110	; 0x4110 <setLight>
      break;
    3db8:	00 00       	nop
   }
}
    3dba:	0f 90       	pop	r0
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	0f 90       	pop	r0
    3dc2:	0f 90       	pop	r0
    3dc4:	df 91       	pop	r29
    3dc6:	cf 91       	pop	r28
    3dc8:	08 95       	ret

00003dca <processCommand>:



//Function that will take in a command (as char array) and process it into a
//correct response to be stored into response
char processCommand(Command *command, Response *response) {
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <processCommand+0x6>
    3dd0:	1f 92       	push	r1
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	9a 83       	std	Y+2, r25	; 0x02
    3dd8:	89 83       	std	Y+1, r24	; 0x01
    3dda:	7c 83       	std	Y+4, r23	; 0x04
    3ddc:	6b 83       	std	Y+3, r22	; 0x03
	response->commandBack = command->cmd;
    3dde:	89 81       	ldd	r24, Y+1	; 0x01
    3de0:	9a 81       	ldd	r25, Y+2	; 0x02
    3de2:	dc 01       	movw	r26, r24
    3de4:	11 96       	adiw	r26, 0x01	; 1
    3de6:	2c 91       	ld	r18, X
    3de8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dea:	9c 81       	ldd	r25, Y+4	; 0x04
    3dec:	fc 01       	movw	r30, r24
    3dee:	20 83       	st	Z, r18
   switch(command->groupID) {
    3df0:	89 81       	ldd	r24, Y+1	; 0x01
    3df2:	9a 81       	ldd	r25, Y+2	; 0x02
    3df4:	dc 01       	movw	r26, r24
    3df6:	8c 91       	ld	r24, X
    3df8:	99 27       	eor	r25, r25
    3dfa:	87 fd       	sbrc	r24, 7
    3dfc:	90 95       	com	r25
    3dfe:	aa 27       	eor	r26, r26
    3e00:	97 fd       	sbrc	r25, 7
    3e02:	a0 95       	com	r26
    3e04:	ba 2f       	mov	r27, r26
    3e06:	41 e0       	ldi	r20, 0x01	; 1
    3e08:	50 e0       	ldi	r21, 0x00	; 0
    3e0a:	27 e0       	ldi	r18, 0x07	; 7
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	84 1b       	sub	r24, r20
    3e10:	95 0b       	sbc	r25, r21
    3e12:	28 17       	cp	r18, r24
    3e14:	39 07       	cpc	r19, r25
    3e16:	08 f4       	brcc	.+2      	; 0x3e1a <processCommand+0x50>
    3e18:	4d c0       	rjmp	.+154    	; 0x3eb4 <processCommand+0xea>
    3e1a:	8e 58       	subi	r24, 0x8E	; 142
    3e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e1e:	fc 01       	movw	r30, r24
    3e20:	0c 94 78 25 	jmp	0x4af0	; 0x4af0 <__tablejump2__>
      case ULTRASONIC_GROUP:
         processUltrasonicCommand(command->cmd, command->payload,&response->size, response->payload);
    3e24:	8b 81       	ldd	r24, Y+3	; 0x03
    3e26:	9c 81       	ldd	r25, Y+4	; 0x04
    3e28:	9c 01       	movw	r18, r24
    3e2a:	2e 5f       	subi	r18, 0xFE	; 254
    3e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e30:	9c 81       	ldd	r25, Y+4	; 0x04
    3e32:	ac 01       	movw	r20, r24
    3e34:	4f 5f       	subi	r20, 0xFF	; 255
    3e36:	5f 4f       	sbci	r21, 0xFF	; 255
    3e38:	89 81       	ldd	r24, Y+1	; 0x01
    3e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e3c:	03 96       	adiw	r24, 0x03	; 3
    3e3e:	69 81       	ldd	r22, Y+1	; 0x01
    3e40:	7a 81       	ldd	r23, Y+2	; 0x02
    3e42:	db 01       	movw	r26, r22
    3e44:	11 96       	adiw	r26, 0x01	; 1
    3e46:	ec 91       	ld	r30, X
    3e48:	bc 01       	movw	r22, r24
    3e4a:	8e 2f       	mov	r24, r30
    3e4c:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <processUltrasonicCommand>
         break;
    3e50:	31 c0       	rjmp	.+98     	; 0x3eb4 <processCommand+0xea>
      case SPEED_GROUP:
			processSpeedCommand(command->cmd,command->payload,response);
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
    3e54:	9a 81       	ldd	r25, Y+2	; 0x02
    3e56:	03 96       	adiw	r24, 0x03	; 3
    3e58:	29 81       	ldd	r18, Y+1	; 0x01
    3e5a:	3a 81       	ldd	r19, Y+2	; 0x02
    3e5c:	d9 01       	movw	r26, r18
    3e5e:	11 96       	adiw	r26, 0x01	; 1
    3e60:	ec 91       	ld	r30, X
    3e62:	2b 81       	ldd	r18, Y+3	; 0x03
    3e64:	3c 81       	ldd	r19, Y+4	; 0x04
    3e66:	a9 01       	movw	r20, r18
    3e68:	bc 01       	movw	r22, r24
    3e6a:	8e 2f       	mov	r24, r30
    3e6c:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <processSpeedCommand>
         break;
    3e70:	21 c0       	rjmp	.+66     	; 0x3eb4 <processCommand+0xea>
      case STEERING_GROUP:
         /*do steering things*/
         break;
      case FNR_GROUP:
			processFNRCommand(command->cmd,command->payload,response);
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	9a 81       	ldd	r25, Y+2	; 0x02
    3e76:	03 96       	adiw	r24, 0x03	; 3
    3e78:	29 81       	ldd	r18, Y+1	; 0x01
    3e7a:	3a 81       	ldd	r19, Y+2	; 0x02
    3e7c:	d9 01       	movw	r26, r18
    3e7e:	11 96       	adiw	r26, 0x01	; 1
    3e80:	ec 91       	ld	r30, X
    3e82:	2b 81       	ldd	r18, Y+3	; 0x03
    3e84:	3c 81       	ldd	r19, Y+4	; 0x04
    3e86:	a9 01       	movw	r20, r18
    3e88:	bc 01       	movw	r22, r24
    3e8a:	8e 2f       	mov	r24, r30
    3e8c:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <processFNRCommand>
         break;
    3e90:	11 c0       	rjmp	.+34     	; 0x3eb4 <processCommand+0xea>
         break;
      case BATTERY_GROUP:
         /*do battery things*/
         break;
      case LIGHTS_GROUP:
	      processLightCommand(command->cmd,command->payload,response);
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
    3e94:	9a 81       	ldd	r25, Y+2	; 0x02
    3e96:	03 96       	adiw	r24, 0x03	; 3
    3e98:	29 81       	ldd	r18, Y+1	; 0x01
    3e9a:	3a 81       	ldd	r19, Y+2	; 0x02
    3e9c:	d9 01       	movw	r26, r18
    3e9e:	11 96       	adiw	r26, 0x01	; 1
    3ea0:	ec 91       	ld	r30, X
    3ea2:	2b 81       	ldd	r18, Y+3	; 0x03
    3ea4:	3c 81       	ldd	r19, Y+4	; 0x04
    3ea6:	a9 01       	movw	r20, r18
    3ea8:	bc 01       	movw	r22, r24
    3eaa:	8e 2f       	mov	r24, r30
    3eac:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <processLightCommand>
         break;
    3eb0:	01 c0       	rjmp	.+2      	; 0x3eb4 <processCommand+0xea>
      case ERROR_GROUP:
         /*do error things*/
         break;
    3eb2:	00 00       	nop
   }
   //return a dummy success for now
   return 1;
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
}
    3eb6:	0f 90       	pop	r0
    3eb8:	0f 90       	pop	r0
    3eba:	0f 90       	pop	r0
    3ebc:	0f 90       	pop	r0
    3ebe:	df 91       	pop	r29
    3ec0:	cf 91       	pop	r28
    3ec2:	08 95       	ret

00003ec4 <getBatteryVoltage>:

//battery controller functions

//read battery strength in a char. Might need to be unsigned, specs don't say
//anything regarding that.
char getBatteryVoltage(char *sensorResponse) {
    3ec4:	cf 93       	push	r28
    3ec6:	df 93       	push	r29
    3ec8:	1f 92       	push	r1
    3eca:	1f 92       	push	r1
    3ecc:	cd b7       	in	r28, 0x3d	; 61
    3ece:	de b7       	in	r29, 0x3e	; 62
    3ed0:	9a 83       	std	Y+2, r25	; 0x02
    3ed2:	89 83       	std	Y+1, r24	; 0x01
   //fake battery reading
   *sensorResponse = 0;
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed8:	fc 01       	movw	r30, r24
    3eda:	10 82       	st	Z, r1
   //return success
   return 1;
    3edc:	81 e0       	ldi	r24, 0x01	; 1
}
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	df 91       	pop	r29
    3ee4:	cf 91       	pop	r28
    3ee6:	08 95       	ret

00003ee8 <getSteeringVoltage>:

//gets voltage from steering?
char getSteeringVoltage(char *sensorResponse) {
    3ee8:	cf 93       	push	r28
    3eea:	df 93       	push	r29
    3eec:	1f 92       	push	r1
    3eee:	1f 92       	push	r1
    3ef0:	cd b7       	in	r28, 0x3d	; 61
    3ef2:	de b7       	in	r29, 0x3e	; 62
    3ef4:	9a 83       	std	Y+2, r25	; 0x02
    3ef6:	89 83       	std	Y+1, r24	; 0x01
   //fake steering voltage reading
   *sensorResponse = 0;
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	9a 81       	ldd	r25, Y+2	; 0x02
    3efc:	fc 01       	movw	r30, r24
    3efe:	10 82       	st	Z, r1
   //return success
   return 1;
    3f00:	81 e0       	ldi	r24, 0x01	; 1
}
    3f02:	0f 90       	pop	r0
    3f04:	0f 90       	pop	r0
    3f06:	df 91       	pop	r29
    3f08:	cf 91       	pop	r28
    3f0a:	08 95       	ret

00003f0c <setBrake>:
//Brake controller functions. THERE IS CURRENTLY NO WAY TO GET THE DESIRED
//BRAKE TARGET IN THE SPECS

//set brake target
char setBrake(char gainTarget) {
    3f0c:	cf 93       	push	r28
    3f0e:	df 93       	push	r29
    3f10:	1f 92       	push	r1
    3f12:	cd b7       	in	r28, 0x3d	; 61
    3f14:	de b7       	in	r29, 0x3e	; 62
    3f16:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing happens
   //return success
   return 1;
    3f18:	81 e0       	ldi	r24, 0x01	; 1
}
    3f1a:	0f 90       	pop	r0
    3f1c:	df 91       	pop	r29
    3f1e:	cf 91       	pop	r28
    3f20:	08 95       	ret

00003f22 <getBrake>:

//get what is assumed to be the current brake value?
char getBrake(char* sensorResponse) {
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	1f 92       	push	r1
    3f28:	1f 92       	push	r1
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
    3f2e:	9a 83       	std	Y+2, r25	; 0x02
    3f30:	89 83       	std	Y+1, r24	; 0x01
   //fake brake reading
   *sensorResponse = 0;
    3f32:	89 81       	ldd	r24, Y+1	; 0x01
    3f34:	9a 81       	ldd	r25, Y+2	; 0x02
    3f36:	fc 01       	movw	r30, r24
    3f38:	10 82       	st	Z, r1
   //return success
   return 1;
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
}
    3f3c:	0f 90       	pop	r0
    3f3e:	0f 90       	pop	r0
    3f40:	df 91       	pop	r29
    3f42:	cf 91       	pop	r28
    3f44:	08 95       	ret

00003f46 <FNRForward>:

#define clearABit(x) \
PORTA &= ~(1 << (x));


void FNRForward(){
    3f46:	cf 93       	push	r28
    3f48:	df 93       	push	r29
    3f4a:	cd b7       	in	r28, 0x3d	; 61
    3f4c:	de b7       	in	r29, 0x3e	; 62
	clearABit(1);
    3f4e:	82 e2       	ldi	r24, 0x22	; 34
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	22 e2       	ldi	r18, 0x22	; 34
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	f9 01       	movw	r30, r18
    3f58:	20 81       	ld	r18, Z
    3f5a:	2d 7f       	andi	r18, 0xFD	; 253
    3f5c:	fc 01       	movw	r30, r24
    3f5e:	20 83       	st	Z, r18
	while((PORTA & 0x2) != 0){
    3f60:	0d c0       	rjmp	.+26     	; 0x3f7c <FNRForward+0x36>
		clearABit(1);
    3f62:	82 e2       	ldi	r24, 0x22	; 34
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	22 e2       	ldi	r18, 0x22	; 34
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	f9 01       	movw	r30, r18
    3f6c:	20 81       	ld	r18, Z
    3f6e:	2d 7f       	andi	r18, 0xFD	; 253
    3f70:	fc 01       	movw	r30, r24
    3f72:	20 83       	st	Z, r18
		vTaskDelay(1);
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
PORTA &= ~(1 << (x));


void FNRForward(){
	clearABit(1);
	while((PORTA & 0x2) != 0){
    3f7c:	82 e2       	ldi	r24, 0x22	; 34
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	fc 01       	movw	r30, r24
    3f82:	80 81       	ld	r24, Z
    3f84:	88 2f       	mov	r24, r24
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	82 70       	andi	r24, 0x02	; 2
    3f8a:	99 27       	eor	r25, r25
    3f8c:	00 97       	sbiw	r24, 0x00	; 0
    3f8e:	49 f7       	brne	.-46     	; 0x3f62 <FNRForward+0x1c>
		clearABit(1);
		vTaskDelay(1);
	}
	setABit(0);
    3f90:	82 e2       	ldi	r24, 0x22	; 34
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	22 e2       	ldi	r18, 0x22	; 34
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	f9 01       	movw	r30, r18
    3f9a:	20 81       	ld	r18, Z
    3f9c:	21 60       	ori	r18, 0x01	; 1
    3f9e:	fc 01       	movw	r30, r24
    3fa0:	20 83       	st	Z, r18

	PORTL &= ~0x30;
    3fa2:	8b e0       	ldi	r24, 0x0B	; 11
    3fa4:	91 e0       	ldi	r25, 0x01	; 1
    3fa6:	2b e0       	ldi	r18, 0x0B	; 11
    3fa8:	31 e0       	ldi	r19, 0x01	; 1
    3faa:	f9 01       	movw	r30, r18
    3fac:	20 81       	ld	r18, Z
    3fae:	2f 7c       	andi	r18, 0xCF	; 207
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	20 83       	st	Z, r18
}
    3fb4:	df 91       	pop	r29
    3fb6:	cf 91       	pop	r28
    3fb8:	08 95       	ret

00003fba <FNRReverse>:

void FNRReverse(){
    3fba:	cf 93       	push	r28
    3fbc:	df 93       	push	r29
    3fbe:	cd b7       	in	r28, 0x3d	; 61
    3fc0:	de b7       	in	r29, 0x3e	; 62
	clearABit(0);
    3fc2:	82 e2       	ldi	r24, 0x22	; 34
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	22 e2       	ldi	r18, 0x22	; 34
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	f9 01       	movw	r30, r18
    3fcc:	20 81       	ld	r18, Z
    3fce:	2e 7f       	andi	r18, 0xFE	; 254
    3fd0:	fc 01       	movw	r30, r24
    3fd2:	20 83       	st	Z, r18
	while((PORTA & 0x1) != 0){
    3fd4:	0d c0       	rjmp	.+26     	; 0x3ff0 <FNRReverse+0x36>
		clearABit(0);
    3fd6:	82 e2       	ldi	r24, 0x22	; 34
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	22 e2       	ldi	r18, 0x22	; 34
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	f9 01       	movw	r30, r18
    3fe0:	20 81       	ld	r18, Z
    3fe2:	2e 7f       	andi	r18, 0xFE	; 254
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	20 83       	st	Z, r18
		vTaskDelay(1);
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
	PORTL &= ~0x30;
}

void FNRReverse(){
	clearABit(0);
	while((PORTA & 0x1) != 0){
    3ff0:	82 e2       	ldi	r24, 0x22	; 34
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	80 81       	ld	r24, Z
    3ff8:	88 2f       	mov	r24, r24
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	81 70       	andi	r24, 0x01	; 1
    3ffe:	99 27       	eor	r25, r25
    4000:	00 97       	sbiw	r24, 0x00	; 0
    4002:	49 f7       	brne	.-46     	; 0x3fd6 <FNRReverse+0x1c>
		clearABit(0);
		vTaskDelay(1);
	}
	setABit(1);
    4004:	82 e2       	ldi	r24, 0x22	; 34
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	22 e2       	ldi	r18, 0x22	; 34
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	f9 01       	movw	r30, r18
    400e:	20 81       	ld	r18, Z
    4010:	22 60       	ori	r18, 0x02	; 2
    4012:	fc 01       	movw	r30, r24
    4014:	20 83       	st	Z, r18

	PORTL |= 0x30;
    4016:	8b e0       	ldi	r24, 0x0B	; 11
    4018:	91 e0       	ldi	r25, 0x01	; 1
    401a:	2b e0       	ldi	r18, 0x0B	; 11
    401c:	31 e0       	ldi	r19, 0x01	; 1
    401e:	f9 01       	movw	r30, r18
    4020:	20 81       	ld	r18, Z
    4022:	20 63       	ori	r18, 0x30	; 48
    4024:	fc 01       	movw	r30, r24
    4026:	20 83       	st	Z, r18
}
    4028:	df 91       	pop	r29
    402a:	cf 91       	pop	r28
    402c:	08 95       	ret

0000402e <FNRNeutral>:

void FNRNeutral(){
    402e:	cf 93       	push	r28
    4030:	df 93       	push	r29
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
	clearABit(0);
    4036:	82 e2       	ldi	r24, 0x22	; 34
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	22 e2       	ldi	r18, 0x22	; 34
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	f9 01       	movw	r30, r18
    4040:	20 81       	ld	r18, Z
    4042:	2e 7f       	andi	r18, 0xFE	; 254
    4044:	fc 01       	movw	r30, r24
    4046:	20 83       	st	Z, r18
	clearABit(1);
    4048:	82 e2       	ldi	r24, 0x22	; 34
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	22 e2       	ldi	r18, 0x22	; 34
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	f9 01       	movw	r30, r18
    4052:	20 81       	ld	r18, Z
    4054:	2d 7f       	andi	r18, 0xFD	; 253
    4056:	fc 01       	movw	r30, r24
    4058:	20 83       	st	Z, r18
	while((PORTA & 0x3) != 0){
    405a:	16 c0       	rjmp	.+44     	; 0x4088 <FNRNeutral+0x5a>
		clearABit(0);
    405c:	82 e2       	ldi	r24, 0x22	; 34
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	22 e2       	ldi	r18, 0x22	; 34
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	f9 01       	movw	r30, r18
    4066:	20 81       	ld	r18, Z
    4068:	2e 7f       	andi	r18, 0xFE	; 254
    406a:	fc 01       	movw	r30, r24
    406c:	20 83       	st	Z, r18
		clearABit(1);
    406e:	82 e2       	ldi	r24, 0x22	; 34
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	22 e2       	ldi	r18, 0x22	; 34
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	f9 01       	movw	r30, r18
    4078:	20 81       	ld	r18, Z
    407a:	2d 7f       	andi	r18, 0xFD	; 253
    407c:	fc 01       	movw	r30, r24
    407e:	20 83       	st	Z, r18
		vTaskDelay(1);
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
}

void FNRNeutral(){
	clearABit(0);
	clearABit(1);
	while((PORTA & 0x3) != 0){
    4088:	82 e2       	ldi	r24, 0x22	; 34
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	fc 01       	movw	r30, r24
    408e:	80 81       	ld	r24, Z
    4090:	88 2f       	mov	r24, r24
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	83 70       	andi	r24, 0x03	; 3
    4096:	99 27       	eor	r25, r25
    4098:	00 97       	sbiw	r24, 0x00	; 0
    409a:	01 f7       	brne	.-64     	; 0x405c <FNRNeutral+0x2e>
		clearABit(0);
		clearABit(1);
		vTaskDelay(1);
	}
	PORTL &= ~0x30;
    409c:	8b e0       	ldi	r24, 0x0B	; 11
    409e:	91 e0       	ldi	r25, 0x01	; 1
    40a0:	2b e0       	ldi	r18, 0x0B	; 11
    40a2:	31 e0       	ldi	r19, 0x01	; 1
    40a4:	f9 01       	movw	r30, r18
    40a6:	20 81       	ld	r18, Z
    40a8:	2f 7c       	andi	r18, 0xCF	; 207
    40aa:	fc 01       	movw	r30, r24
    40ac:	20 83       	st	Z, r18
}
    40ae:	df 91       	pop	r29
    40b0:	cf 91       	pop	r28
    40b2:	08 95       	ret

000040b4 <setFNR>:

//set the FNR controller, inputs are either -1, 0, or 1.
char setFNR(char FNR) {
    40b4:	cf 93       	push	r28
    40b6:	df 93       	push	r29
    40b8:	1f 92       	push	r1
    40ba:	cd b7       	in	r28, 0x3d	; 61
    40bc:	de b7       	in	r29, 0x3e	; 62
    40be:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing happens
   //return success
	if(FNR == 0){
    40c0:	89 81       	ldd	r24, Y+1	; 0x01
    40c2:	88 23       	and	r24, r24
    40c4:	19 f4       	brne	.+6      	; 0x40cc <setFNR+0x18>
		FNRNeutral();
    40c6:	0e 94 17 20 	call	0x402e	; 0x402e <FNRNeutral>
    40ca:	0b c0       	rjmp	.+22     	; 0x40e2 <setFNR+0x2e>
	} else if(FNR == 1){
    40cc:	89 81       	ldd	r24, Y+1	; 0x01
    40ce:	81 30       	cpi	r24, 0x01	; 1
    40d0:	19 f4       	brne	.+6      	; 0x40d8 <setFNR+0x24>
		FNRForward();
    40d2:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <FNRForward>
    40d6:	05 c0       	rjmp	.+10     	; 0x40e2 <setFNR+0x2e>
	} else if(FNR == -1){
    40d8:	89 81       	ldd	r24, Y+1	; 0x01
    40da:	8f 3f       	cpi	r24, 0xFF	; 255
    40dc:	11 f4       	brne	.+4      	; 0x40e2 <setFNR+0x2e>
		FNRReverse();
    40de:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <FNRReverse>
	}

   return 1;
    40e2:	81 e0       	ldi	r24, 0x01	; 1
}
    40e4:	0f 90       	pop	r0
    40e6:	df 91       	pop	r29
    40e8:	cf 91       	pop	r28
    40ea:	08 95       	ret

000040ec <getFNR>:

//get the current FNR state. Function follows same format for consistancy
char getFNR(char *sensorResponse) {
    40ec:	cf 93       	push	r28
    40ee:	df 93       	push	r29
    40f0:	1f 92       	push	r1
    40f2:	1f 92       	push	r1
    40f4:	cd b7       	in	r28, 0x3d	; 61
    40f6:	de b7       	in	r29, 0x3e	; 62
    40f8:	9a 83       	std	Y+2, r25	; 0x02
    40fa:	89 83       	std	Y+1, r24	; 0x01
   //fake reading
   *sensorResponse = 0;
    40fc:	89 81       	ldd	r24, Y+1	; 0x01
    40fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4100:	fc 01       	movw	r30, r24
    4102:	10 82       	st	Z, r1
   //return success
   return 1;
    4104:	81 e0       	ldi	r24, 0x01	; 1
}
    4106:	0f 90       	pop	r0
    4108:	0f 90       	pop	r0
    410a:	df 91       	pop	r29
    410c:	cf 91       	pop	r28
    410e:	08 95       	ret

00004110 <setLight>:
//light controller functions
#include <avr/io.h>

//turn lights on and off
char setLight(unsigned char lightTarget) {
    4110:	cf 93       	push	r28
    4112:	df 93       	push	r29
    4114:	1f 92       	push	r1
    4116:	cd b7       	in	r28, 0x3d	; 61
    4118:	de b7       	in	r29, 0x3e	; 62
    411a:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing happens
	//PORTB ^= 0x80;
	if(lightTarget == 1){
    411c:	89 81       	ldd	r24, Y+1	; 0x01
    411e:	81 30       	cpi	r24, 0x01	; 1
    4120:	51 f4       	brne	.+20     	; 0x4136 <setLight+0x26>
		PORTB |= 0x80;
    4122:	85 e2       	ldi	r24, 0x25	; 37
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	25 e2       	ldi	r18, 0x25	; 37
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	f9 01       	movw	r30, r18
    412c:	20 81       	ld	r18, Z
    412e:	20 68       	ori	r18, 0x80	; 128
    4130:	fc 01       	movw	r30, r24
    4132:	20 83       	st	Z, r18
    4134:	09 c0       	rjmp	.+18     	; 0x4148 <setLight+0x38>
	} else {
		PORTB &= ~0x80;
    4136:	85 e2       	ldi	r24, 0x25	; 37
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	25 e2       	ldi	r18, 0x25	; 37
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	f9 01       	movw	r30, r18
    4140:	20 81       	ld	r18, Z
    4142:	2f 77       	andi	r18, 0x7F	; 127
    4144:	fc 01       	movw	r30, r24
    4146:	20 83       	st	Z, r18
	}
   return 1;
    4148:	81 e0       	ldi	r24, 0x01	; 1
}
    414a:	0f 90       	pop	r0
    414c:	df 91       	pop	r29
    414e:	cf 91       	pop	r28
    4150:	08 95       	ret

00004152 <setSonarData>:
extern int count;

unsigned char currSonar;
unsigned char lastSonarData = 0;
   
void setSonarData(int i,unsigned char data){
    4152:	cf 93       	push	r28
    4154:	df 93       	push	r29
    4156:	00 d0       	rcall	.+0      	; 0x4158 <setSonarData+0x6>
    4158:	cd b7       	in	r28, 0x3d	; 61
    415a:	de b7       	in	r29, 0x3e	; 62
    415c:	9a 83       	std	Y+2, r25	; 0x02
    415e:	89 83       	std	Y+1, r24	; 0x01
    4160:	6b 83       	std	Y+3, r22	; 0x03
// xSemaphoreTake(sonarDataMutex[i],portMAX_DELAY);
   sonarData[i] = data;
    4162:	89 81       	ldd	r24, Y+1	; 0x01
    4164:	9a 81       	ldd	r25, Y+2	; 0x02
    4166:	8a 52       	subi	r24, 0x2A	; 42
    4168:	95 4e       	sbci	r25, 0xE5	; 229
    416a:	2b 81       	ldd	r18, Y+3	; 0x03
    416c:	fc 01       	movw	r30, r24
    416e:	20 83       	st	Z, r18
   //xSemaphoreGive(sonarDataMutex[i]);
}
    4170:	0f 90       	pop	r0
    4172:	0f 90       	pop	r0
    4174:	0f 90       	pop	r0
    4176:	df 91       	pop	r29
    4178:	cf 91       	pop	r28
    417a:	08 95       	ret

0000417c <getSonarData>:

unsigned char getSonarData(int i){
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	1f 92       	push	r1
    4182:	1f 92       	push	r1
    4184:	cd b7       	in	r28, 0x3d	; 61
    4186:	de b7       	in	r29, 0x3e	; 62
    4188:	9a 83       	std	Y+2, r25	; 0x02
    418a:	89 83       	std	Y+1, r24	; 0x01
   //xSemaphoreTake(sonarDataMutex[i],portMAX_DELAY);
   //return sonarData[i];
   return i + 2;
    418c:	89 81       	ldd	r24, Y+1	; 0x01
    418e:	8e 5f       	subi	r24, 0xFE	; 254
   //xSemaphoreGive(sonarDataMutex[i]);
}
    4190:	0f 90       	pop	r0
    4192:	0f 90       	pop	r0
    4194:	df 91       	pop	r29
    4196:	cf 91       	pop	r28
    4198:	08 95       	ret

0000419a <getTimerCount>:

unsigned char getTimerCount(){
    419a:	cf 93       	push	r28
    419c:	df 93       	push	r29
    419e:	cd b7       	in	r28, 0x3d	; 61
    41a0:	de b7       	in	r29, 0x3e	; 62
   return TCNT0;
    41a2:	86 e4       	ldi	r24, 0x46	; 70
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	fc 01       	movw	r30, r24
    41a8:	80 81       	ld	r24, Z
}
    41aa:	df 91       	pop	r29
    41ac:	cf 91       	pop	r28
    41ae:	08 95       	ret

000041b0 <__vector_11>:

inline void setTimerCount(unsigned char i){
   TCNT0 = i;
}

ISR(PCINT2_vect) {
    41b0:	1f 92       	push	r1
    41b2:	0f 92       	push	r0
    41b4:	00 90 5f 00 	lds	r0, 0x005F
    41b8:	0f 92       	push	r0
    41ba:	11 24       	eor	r1, r1
    41bc:	00 90 5b 00 	lds	r0, 0x005B
    41c0:	0f 92       	push	r0
    41c2:	2f 93       	push	r18
    41c4:	3f 93       	push	r19
    41c6:	4f 93       	push	r20
    41c8:	5f 93       	push	r21
    41ca:	6f 93       	push	r22
    41cc:	7f 93       	push	r23
    41ce:	8f 93       	push	r24
    41d0:	9f 93       	push	r25
    41d2:	af 93       	push	r26
    41d4:	bf 93       	push	r27
    41d6:	ef 93       	push	r30
    41d8:	ff 93       	push	r31
    41da:	cf 93       	push	r28
    41dc:	df 93       	push	r29
    41de:	00 d0       	rcall	.+0      	; 0x41e0 <__vector_11+0x30>
    41e0:	cd b7       	in	r28, 0x3d	; 61
    41e2:	de b7       	in	r29, 0x3e	; 62

   unsigned char beginCount;
   unsigned char currCount;
   char i=0;   
    41e4:	19 82       	std	Y+1, r1	; 0x01

   if(PINK&(1<<currSonar)){
    41e6:	86 e0       	ldi	r24, 0x06	; 6
    41e8:	91 e0       	ldi	r25, 0x01	; 1
    41ea:	fc 01       	movw	r30, r24
    41ec:	80 81       	ld	r24, Z
    41ee:	88 2f       	mov	r24, r24
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	20 91 ea 1a 	lds	r18, 0x1AEA
    41f6:	22 2f       	mov	r18, r18
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	02 2e       	mov	r0, r18
    41fc:	02 c0       	rjmp	.+4      	; 0x4202 <__vector_11+0x52>
    41fe:	95 95       	asr	r25
    4200:	87 95       	ror	r24
    4202:	0a 94       	dec	r0
    4204:	e2 f7       	brpl	.-8      	; 0x41fe <__vector_11+0x4e>
    4206:	81 70       	andi	r24, 0x01	; 1
    4208:	99 27       	eor	r25, r25
    420a:	00 97       	sbiw	r24, 0x00	; 0
    420c:	49 f0       	breq	.+18     	; 0x4220 <__vector_11+0x70>
      //USART_AddToQueue('U');
      beginCount = getTimerCount();
    420e:	0e 94 cd 20 	call	0x419a	; 0x419a <getTimerCount>
    4212:	8a 83       	std	Y+2, r24	; 0x02
      PORTE = 0xFF;
    4214:	8e e2       	ldi	r24, 0x2E	; 46
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	2f ef       	ldi	r18, 0xFF	; 255
    421a:	fc 01       	movw	r30, r24
    421c:	20 83       	st	Z, r18
    421e:	1d c0       	rjmp	.+58     	; 0x425a <__vector_11+0xaa>
   } else {
      //USART_AddToQueue('D');
      currCount = getTimerCount();
    4220:	0e 94 cd 20 	call	0x419a	; 0x419a <getTimerCount>
    4224:	8b 83       	std	Y+3, r24	; 0x03
      if(currCount > beginCount){
    4226:	9b 81       	ldd	r25, Y+3	; 0x03
    4228:	8a 81       	ldd	r24, Y+2	; 0x02
    422a:	89 17       	cp	r24, r25
    422c:	38 f4       	brcc	.+14     	; 0x423c <__vector_11+0x8c>
         lastSonarData = currCount - beginCount;
    422e:	9b 81       	ldd	r25, Y+3	; 0x03
    4230:	8a 81       	ldd	r24, Y+2	; 0x02
    4232:	f9 2f       	mov	r31, r25
    4234:	f8 1b       	sub	r31, r24
    4236:	8f 2f       	mov	r24, r31
    4238:	80 93 c3 1a 	sts	0x1AC3, r24
      }
      PORTE = 0;
    423c:	8e e2       	ldi	r24, 0x2E	; 46
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	fc 01       	movw	r30, r24
    4242:	10 82       	st	Z, r1
      xSemaphoreGiveFromISR(sonarSemaphore,0);
    4244:	80 91 dc 1a 	lds	r24, 0x1ADC
    4248:	90 91 dd 1a 	lds	r25, 0x1ADD
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	40 e0       	ldi	r20, 0x00	; 0
    4250:	50 e0       	ldi	r21, 0x00	; 0
    4252:	60 e0       	ldi	r22, 0x00	; 0
    4254:	70 e0       	ldi	r23, 0x00	; 0
    4256:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <xQueueGenericSendFromISR>
   }

}
    425a:	0f 90       	pop	r0
    425c:	0f 90       	pop	r0
    425e:	0f 90       	pop	r0
    4260:	df 91       	pop	r29
    4262:	cf 91       	pop	r28
    4264:	ff 91       	pop	r31
    4266:	ef 91       	pop	r30
    4268:	bf 91       	pop	r27
    426a:	af 91       	pop	r26
    426c:	9f 91       	pop	r25
    426e:	8f 91       	pop	r24
    4270:	7f 91       	pop	r23
    4272:	6f 91       	pop	r22
    4274:	5f 91       	pop	r21
    4276:	4f 91       	pop	r20
    4278:	3f 91       	pop	r19
    427a:	2f 91       	pop	r18
    427c:	0f 90       	pop	r0
    427e:	00 92 5b 00 	sts	0x005B, r0
    4282:	0f 90       	pop	r0
    4284:	00 92 5f 00 	sts	0x005F, r0
    4288:	0f 90       	pop	r0
    428a:	1f 90       	pop	r1
    428c:	18 95       	reti

0000428e <initializeSonarSensors>:

void initializeSonarSensors(){
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	cd b7       	in	r28, 0x3d	; 61
    4294:	de b7       	in	r29, 0x3e	; 62
   //DDRD &= 0xFE;   
   DIDR2 = 0;
    4296:	8d e7       	ldi	r24, 0x7D	; 125
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	fc 01       	movw	r30, r24
    429c:	10 82       	st	Z, r1
   DDRK = 0;
    429e:	87 e0       	ldi	r24, 0x07	; 7
    42a0:	91 e0       	ldi	r25, 0x01	; 1
    42a2:	fc 01       	movw	r30, r24
    42a4:	10 82       	st	Z, r1
   DDRC = 0;
    42a6:	87 e2       	ldi	r24, 0x27	; 39
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	fc 01       	movw	r30, r24
    42ac:	10 82       	st	Z, r1

   PORTC = 0;
    42ae:	88 e2       	ldi	r24, 0x28	; 40
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	fc 01       	movw	r30, r24
    42b4:	10 82       	st	Z, r1

   //EICRA = 1;
   //EIMSK = 1;

   PCMSK2 = 0xFF;
    42b6:	8d e6       	ldi	r24, 0x6D	; 109
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	2f ef       	ldi	r18, 0xFF	; 255
    42bc:	fc 01       	movw	r30, r24
    42be:	20 83       	st	Z, r18
   PCICR = 0x7;
    42c0:	88 e6       	ldi	r24, 0x68	; 104
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	27 e0       	ldi	r18, 0x07	; 7
    42c6:	fc 01       	movw	r30, r24
    42c8:	20 83       	st	Z, r18

   TCCR0A = 0;
    42ca:	84 e4       	ldi	r24, 0x44	; 68
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	fc 01       	movw	r30, r24
    42d0:	10 82       	st	Z, r1
   TCCR0B = 5;
    42d2:	85 e4       	ldi	r24, 0x45	; 69
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	25 e0       	ldi	r18, 0x05	; 5
    42d8:	fc 01       	movw	r30, r24
    42da:	20 83       	st	Z, r18

}
    42dc:	df 91       	pop	r29
    42de:	cf 91       	pop	r28
    42e0:	08 95       	ret

000042e2 <vTaskSonar>:

void vTaskSonar(void* parameter){
    42e2:	cf 93       	push	r28
    42e4:	df 93       	push	r29
    42e6:	00 d0       	rcall	.+0      	; 0x42e8 <vTaskSonar+0x6>
    42e8:	1f 92       	push	r1
    42ea:	cd b7       	in	r28, 0x3d	; 61
    42ec:	de b7       	in	r29, 0x3e	; 62
    42ee:	9c 83       	std	Y+4, r25	; 0x04
    42f0:	8b 83       	std	Y+3, r24	; 0x03

   int i;
   initializeSonarSensors();
    42f2:	0e 94 47 21 	call	0x428e	; 0x428e <initializeSonarSensors>
   
   vSemaphoreCreateBinary(sonarSemaphore);
    42f6:	43 e0       	ldi	r20, 0x03	; 3
    42f8:	60 e0       	ldi	r22, 0x00	; 0
    42fa:	81 e0       	ldi	r24, 0x01	; 1
    42fc:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <xQueueGenericCreate>
    4300:	90 93 dd 1a 	sts	0x1ADD, r25
    4304:	80 93 dc 1a 	sts	0x1ADC, r24
    4308:	80 91 dc 1a 	lds	r24, 0x1ADC
    430c:	90 91 dd 1a 	lds	r25, 0x1ADD
    4310:	00 97       	sbiw	r24, 0x00	; 0
    4312:	59 f0       	breq	.+22     	; 0x432a <vTaskSonar+0x48>
    4314:	80 91 dc 1a 	lds	r24, 0x1ADC
    4318:	90 91 dd 1a 	lds	r25, 0x1ADD
    431c:	20 e0       	ldi	r18, 0x00	; 0
    431e:	40 e0       	ldi	r20, 0x00	; 0
    4320:	50 e0       	ldi	r21, 0x00	; 0
    4322:	60 e0       	ldi	r22, 0x00	; 0
    4324:	70 e0       	ldi	r23, 0x00	; 0
    4326:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <xQueueGenericSend>
      
   currSonar = 0;
    432a:	10 92 ea 1a 	sts	0x1AEA, r1

   while(1){
      for(i=0;i<2;i++){
    432e:	1a 82       	std	Y+2, r1	; 0x02
    4330:	19 82       	std	Y+1, r1	; 0x01
    4332:	26 c0       	rjmp	.+76     	; 0x4380 <vTaskSonar+0x9e>
         currSonar = i;
    4334:	89 81       	ldd	r24, Y+1	; 0x01
    4336:	80 93 ea 1a 	sts	0x1AEA, r24
         PORTC = (1<<i);
    433a:	88 e2       	ldi	r24, 0x28	; 40
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	21 e0       	ldi	r18, 0x01	; 1
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	09 80       	ldd	r0, Y+1	; 0x01
    4344:	02 c0       	rjmp	.+4      	; 0x434a <vTaskSonar+0x68>
    4346:	22 0f       	add	r18, r18
    4348:	33 1f       	adc	r19, r19
    434a:	0a 94       	dec	r0
    434c:	e2 f7       	brpl	.-8      	; 0x4346 <vTaskSonar+0x64>
    434e:	fc 01       	movw	r30, r24
    4350:	20 83       	st	Z, r18
         xSemaphoreTake(sonarSemaphore,portMAX_DELAY);
    4352:	80 91 dc 1a 	lds	r24, 0x1ADC
    4356:	90 91 dd 1a 	lds	r25, 0x1ADD
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	4f ef       	ldi	r20, 0xFF	; 255
    435e:	5f ef       	ldi	r21, 0xFF	; 255
    4360:	60 e0       	ldi	r22, 0x00	; 0
    4362:	70 e0       	ldi	r23, 0x00	; 0
    4364:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xQueueGenericReceive>
         setSonarData(i,lastSonarData);
    4368:	20 91 c3 1a 	lds	r18, 0x1AC3
    436c:	89 81       	ldd	r24, Y+1	; 0x01
    436e:	9a 81       	ldd	r25, Y+2	; 0x02
    4370:	62 2f       	mov	r22, r18
    4372:	0e 94 a9 20 	call	0x4152	; 0x4152 <setSonarData>
   vSemaphoreCreateBinary(sonarSemaphore);
      
   currSonar = 0;

   while(1){
      for(i=0;i<2;i++){
    4376:	89 81       	ldd	r24, Y+1	; 0x01
    4378:	9a 81       	ldd	r25, Y+2	; 0x02
    437a:	01 96       	adiw	r24, 0x01	; 1
    437c:	9a 83       	std	Y+2, r25	; 0x02
    437e:	89 83       	std	Y+1, r24	; 0x01
    4380:	89 81       	ldd	r24, Y+1	; 0x01
    4382:	9a 81       	ldd	r25, Y+2	; 0x02
    4384:	82 30       	cpi	r24, 0x02	; 2
    4386:	91 05       	cpc	r25, r1
    4388:	ac f2       	brlt	.-86     	; 0x4334 <vTaskSonar+0x52>
         currSonar = i;
         PORTC = (1<<i);
         xSemaphoreTake(sonarSemaphore,portMAX_DELAY);
         setSonarData(i,lastSonarData);
      }
   }
    438a:	d1 cf       	rjmp	.-94     	; 0x432e <vTaskSonar+0x4c>

0000438c <getAllSensors>:
            
} 

char getAllSensors(unsigned short* responseData){
    438c:	cf 93       	push	r28
    438e:	df 93       	push	r29
    4390:	00 d0       	rcall	.+0      	; 0x4392 <getAllSensors+0x6>
    4392:	1f 92       	push	r1
    4394:	cd b7       	in	r28, 0x3d	; 61
    4396:	de b7       	in	r29, 0x3e	; 62
    4398:	9c 83       	std	Y+4, r25	; 0x04
    439a:	8b 83       	std	Y+3, r24	; 0x03
   unsigned short i;
   for(i=0;i<6;i++){
    439c:	1a 82       	std	Y+2, r1	; 0x02
    439e:	19 82       	std	Y+1, r1	; 0x01
    43a0:	14 c0       	rjmp	.+40     	; 0x43ca <getAllSensors+0x3e>
      //responseData[i] = getSonarData(i);
      responseData[i] = i+1;
    43a2:	89 81       	ldd	r24, Y+1	; 0x01
    43a4:	9a 81       	ldd	r25, Y+2	; 0x02
    43a6:	88 0f       	add	r24, r24
    43a8:	99 1f       	adc	r25, r25
    43aa:	2b 81       	ldd	r18, Y+3	; 0x03
    43ac:	3c 81       	ldd	r19, Y+4	; 0x04
    43ae:	82 0f       	add	r24, r18
    43b0:	93 1f       	adc	r25, r19
    43b2:	29 81       	ldd	r18, Y+1	; 0x01
    43b4:	3a 81       	ldd	r19, Y+2	; 0x02
    43b6:	2f 5f       	subi	r18, 0xFF	; 255
    43b8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ba:	fc 01       	movw	r30, r24
    43bc:	31 83       	std	Z+1, r19	; 0x01
    43be:	20 83       	st	Z, r18
            
} 

char getAllSensors(unsigned short* responseData){
   unsigned short i;
   for(i=0;i<6;i++){
    43c0:	89 81       	ldd	r24, Y+1	; 0x01
    43c2:	9a 81       	ldd	r25, Y+2	; 0x02
    43c4:	01 96       	adiw	r24, 0x01	; 1
    43c6:	9a 83       	std	Y+2, r25	; 0x02
    43c8:	89 83       	std	Y+1, r24	; 0x01
    43ca:	89 81       	ldd	r24, Y+1	; 0x01
    43cc:	9a 81       	ldd	r25, Y+2	; 0x02
    43ce:	86 30       	cpi	r24, 0x06	; 6
    43d0:	91 05       	cpc	r25, r1
    43d2:	38 f3       	brcs	.-50     	; 0x43a2 <getAllSensors+0x16>
      //responseData[i] = getSonarData(i);
      responseData[i] = i+1;
   }
}
    43d4:	0f 90       	pop	r0
    43d6:	0f 90       	pop	r0
    43d8:	0f 90       	pop	r0
    43da:	0f 90       	pop	r0
    43dc:	df 91       	pop	r29
    43de:	cf 91       	pop	r28
    43e0:	08 95       	ret

000043e2 <getCertainSensor>:

char getCertainSensor(char commandData,int* responseData){
    43e2:	0f 93       	push	r16
    43e4:	1f 93       	push	r17
    43e6:	cf 93       	push	r28
    43e8:	df 93       	push	r29
    43ea:	00 d0       	rcall	.+0      	; 0x43ec <getCertainSensor+0xa>
    43ec:	cd b7       	in	r28, 0x3d	; 61
    43ee:	de b7       	in	r29, 0x3e	; 62
    43f0:	89 83       	std	Y+1, r24	; 0x01
    43f2:	7b 83       	std	Y+3, r23	; 0x03
    43f4:	6a 83       	std	Y+2, r22	; 0x02
   if(commandData < 6){
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	86 30       	cpi	r24, 0x06	; 6
    43fa:	b4 f4       	brge	.+44     	; 0x4428 <getCertainSensor+0x46>
      responseData[commandData] = getSonarData(commandData);
    43fc:	89 81       	ldd	r24, Y+1	; 0x01
    43fe:	99 27       	eor	r25, r25
    4400:	87 fd       	sbrc	r24, 7
    4402:	90 95       	com	r25
    4404:	88 0f       	add	r24, r24
    4406:	99 1f       	adc	r25, r25
    4408:	2a 81       	ldd	r18, Y+2	; 0x02
    440a:	3b 81       	ldd	r19, Y+3	; 0x03
    440c:	89 01       	movw	r16, r18
    440e:	08 0f       	add	r16, r24
    4410:	19 1f       	adc	r17, r25
    4412:	89 81       	ldd	r24, Y+1	; 0x01
    4414:	99 27       	eor	r25, r25
    4416:	87 fd       	sbrc	r24, 7
    4418:	90 95       	com	r25
    441a:	0e 94 be 20 	call	0x417c	; 0x417c <getSonarData>
    441e:	88 2f       	mov	r24, r24
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	f8 01       	movw	r30, r16
    4424:	91 83       	std	Z+1, r25	; 0x01
    4426:	80 83       	st	Z, r24
   }
}
    4428:	0f 90       	pop	r0
    442a:	0f 90       	pop	r0
    442c:	0f 90       	pop	r0
    442e:	df 91       	pop	r29
    4430:	cf 91       	pop	r28
    4432:	1f 91       	pop	r17
    4434:	0f 91       	pop	r16
    4436:	08 95       	ret

00004438 <getSensorGroup>:

char getSensorGroup(char commandData,int* responseData){
    4438:	0f 93       	push	r16
    443a:	1f 93       	push	r17
    443c:	cf 93       	push	r28
    443e:	df 93       	push	r29
    4440:	00 d0       	rcall	.+0      	; 0x4442 <getSensorGroup+0xa>
    4442:	cd b7       	in	r28, 0x3d	; 61
    4444:	de b7       	in	r29, 0x3e	; 62
    4446:	89 83       	std	Y+1, r24	; 0x01
    4448:	7b 83       	std	Y+3, r23	; 0x03
    444a:	6a 83       	std	Y+2, r22	; 0x02

   switch(commandData){
    444c:	89 81       	ldd	r24, Y+1	; 0x01
    444e:	99 27       	eor	r25, r25
    4450:	87 fd       	sbrc	r24, 7
    4452:	90 95       	com	r25
    4454:	81 30       	cpi	r24, 0x01	; 1
    4456:	91 05       	cpc	r25, r1
    4458:	01 f1       	breq	.+64     	; 0x449a <getSensorGroup+0x62>
    445a:	82 30       	cpi	r24, 0x02	; 2
    445c:	91 05       	cpc	r25, r1
    445e:	b9 f1       	breq	.+110    	; 0x44ce <getSensorGroup+0x96>
    4460:	00 97       	sbiw	r24, 0x00	; 0
    4462:	09 f0       	breq	.+2      	; 0x4466 <getSensorGroup+0x2e>
    4464:	4e c0       	rjmp	.+156    	; 0x4502 <getSensorGroup+0xca>
      case SONAR_GROUP_LEFT:
         responseData[0] = getSonarData(0);
    4466:	80 e0       	ldi	r24, 0x00	; 0
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	0e 94 be 20 	call	0x417c	; 0x417c <getSonarData>
    446e:	28 2f       	mov	r18, r24
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	8a 81       	ldd	r24, Y+2	; 0x02
    4474:	9b 81       	ldd	r25, Y+3	; 0x03
    4476:	fc 01       	movw	r30, r24
    4478:	31 83       	std	Z+1, r19	; 0x01
    447a:	20 83       	st	Z, r18
         responseData[1] = getSonarData(1);
    447c:	8a 81       	ldd	r24, Y+2	; 0x02
    447e:	9b 81       	ldd	r25, Y+3	; 0x03
    4480:	8c 01       	movw	r16, r24
    4482:	0e 5f       	subi	r16, 0xFE	; 254
    4484:	1f 4f       	sbci	r17, 0xFF	; 255
    4486:	81 e0       	ldi	r24, 0x01	; 1
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	0e 94 be 20 	call	0x417c	; 0x417c <getSonarData>
    448e:	88 2f       	mov	r24, r24
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	f8 01       	movw	r30, r16
    4494:	91 83       	std	Z+1, r25	; 0x01
    4496:	80 83       	st	Z, r24
         break;
    4498:	34 c0       	rjmp	.+104    	; 0x4502 <getSensorGroup+0xca>
      case SONAR_GROUP_FRONT:
         responseData[0] = getSonarData(2);
    449a:	82 e0       	ldi	r24, 0x02	; 2
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	0e 94 be 20 	call	0x417c	; 0x417c <getSonarData>
    44a2:	28 2f       	mov	r18, r24
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	8a 81       	ldd	r24, Y+2	; 0x02
    44a8:	9b 81       	ldd	r25, Y+3	; 0x03
    44aa:	fc 01       	movw	r30, r24
    44ac:	31 83       	std	Z+1, r19	; 0x01
    44ae:	20 83       	st	Z, r18
         responseData[1] = getSonarData(3);
    44b0:	8a 81       	ldd	r24, Y+2	; 0x02
    44b2:	9b 81       	ldd	r25, Y+3	; 0x03
    44b4:	8c 01       	movw	r16, r24
    44b6:	0e 5f       	subi	r16, 0xFE	; 254
    44b8:	1f 4f       	sbci	r17, 0xFF	; 255
    44ba:	83 e0       	ldi	r24, 0x03	; 3
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	0e 94 be 20 	call	0x417c	; 0x417c <getSonarData>
    44c2:	88 2f       	mov	r24, r24
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	f8 01       	movw	r30, r16
    44c8:	91 83       	std	Z+1, r25	; 0x01
    44ca:	80 83       	st	Z, r24
         break;
    44cc:	1a c0       	rjmp	.+52     	; 0x4502 <getSensorGroup+0xca>
      case SONAR_GROUP_RIGHT:
         responseData[0] = getSonarData(4);
    44ce:	84 e0       	ldi	r24, 0x04	; 4
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	0e 94 be 20 	call	0x417c	; 0x417c <getSonarData>
    44d6:	28 2f       	mov	r18, r24
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	8a 81       	ldd	r24, Y+2	; 0x02
    44dc:	9b 81       	ldd	r25, Y+3	; 0x03
    44de:	fc 01       	movw	r30, r24
    44e0:	31 83       	std	Z+1, r19	; 0x01
    44e2:	20 83       	st	Z, r18
         responseData[1] = getSonarData(5);
    44e4:	8a 81       	ldd	r24, Y+2	; 0x02
    44e6:	9b 81       	ldd	r25, Y+3	; 0x03
    44e8:	8c 01       	movw	r16, r24
    44ea:	0e 5f       	subi	r16, 0xFE	; 254
    44ec:	1f 4f       	sbci	r17, 0xFF	; 255
    44ee:	85 e0       	ldi	r24, 0x05	; 5
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	0e 94 be 20 	call	0x417c	; 0x417c <getSonarData>
    44f6:	88 2f       	mov	r24, r24
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	f8 01       	movw	r30, r16
    44fc:	91 83       	std	Z+1, r25	; 0x01
    44fe:	80 83       	st	Z, r24
         break;
    4500:	00 00       	nop
   }

    4502:	0f 90       	pop	r0
    4504:	0f 90       	pop	r0
    4506:	0f 90       	pop	r0
    4508:	df 91       	pop	r29
    450a:	cf 91       	pop	r28
    450c:	1f 91       	pop	r17
    450e:	0f 91       	pop	r16
    4510:	08 95       	ret

00004512 <initSpeedController>:
//Speed Sensor group

#include "spi.h"

void initSpeedController(){
    4512:	cf 93       	push	r28
    4514:	df 93       	push	r29
    4516:	cd b7       	in	r28, 0x3d	; 61
    4518:	de b7       	in	r29, 0x3e	; 62
	SPIsendShort(0x400F);
    451a:	8f e0       	ldi	r24, 0x0F	; 15
    451c:	90 e4       	ldi	r25, 0x40	; 64
    451e:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <SPIsendShort>
}
    4522:	df 91       	pop	r29
    4524:	cf 91       	pop	r28
    4526:	08 95       	ret

00004528 <setPot>:

void setPot(int value){
    4528:	cf 93       	push	r28
    452a:	df 93       	push	r29
    452c:	00 d0       	rcall	.+0      	; 0x452e <setPot+0x6>
    452e:	1f 92       	push	r1
    4530:	cd b7       	in	r28, 0x3d	; 61
    4532:	de b7       	in	r29, 0x3e	; 62
    4534:	9c 83       	std	Y+4, r25	; 0x04
    4536:	8b 83       	std	Y+3, r24	; 0x03
	unsigned short data = 0;
    4538:	1a 82       	std	Y+2, r1	; 0x02
    453a:	19 82       	std	Y+1, r1	; 0x01
	data = value & 0xFF;
    453c:	8b 81       	ldd	r24, Y+3	; 0x03
    453e:	9c 81       	ldd	r25, Y+4	; 0x04
    4540:	99 27       	eor	r25, r25
    4542:	9a 83       	std	Y+2, r25	; 0x02
    4544:	89 83       	std	Y+1, r24	; 0x01

	SPIsendShort(data);
    4546:	89 81       	ldd	r24, Y+1	; 0x01
    4548:	9a 81       	ldd	r25, Y+2	; 0x02
    454a:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <SPIsendShort>
}
    454e:	0f 90       	pop	r0
    4550:	0f 90       	pop	r0
    4552:	0f 90       	pop	r0
    4554:	0f 90       	pop	r0
    4556:	df 91       	pop	r29
    4558:	cf 91       	pop	r28
    455a:	08 95       	ret

0000455c <decrementPot>:

void decrementPot(){
    455c:	cf 93       	push	r28
    455e:	df 93       	push	r29
    4560:	cd b7       	in	r28, 0x3d	; 61
    4562:	de b7       	in	r29, 0x3e	; 62
	SPIsendByte(0x06);
    4564:	86 e0       	ldi	r24, 0x06	; 6
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	0e 94 a3 23 	call	0x4746	; 0x4746 <SPIsendByte>
}
    456c:	df 91       	pop	r29
    456e:	cf 91       	pop	r28
    4570:	08 95       	ret

00004572 <incrementPot>:

void incrementPot(){
    4572:	cf 93       	push	r28
    4574:	df 93       	push	r29
    4576:	cd b7       	in	r28, 0x3d	; 61
    4578:	de b7       	in	r29, 0x3e	; 62
	SPIsendByte(0x0A);
    457a:	8a e0       	ldi	r24, 0x0A	; 10
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	0e 94 a3 23 	call	0x4746	; 0x4746 <SPIsendByte>
}
    4582:	df 91       	pop	r29
    4584:	cf 91       	pop	r28
    4586:	08 95       	ret

00004588 <getSpeed>:

//get the speed of the vehicle
char getSpeed(char* sensorResponse) {
    4588:	cf 93       	push	r28
    458a:	df 93       	push	r29
    458c:	1f 92       	push	r1
    458e:	1f 92       	push	r1
    4590:	cd b7       	in	r28, 0x3d	; 61
    4592:	de b7       	in	r29, 0x3e	; 62
    4594:	9a 83       	std	Y+2, r25	; 0x02
    4596:	89 83       	std	Y+1, r24	; 0x01
   //store dummy speed value
   *sensorResponse = 0;
    4598:	89 81       	ldd	r24, Y+1	; 0x01
    459a:	9a 81       	ldd	r25, Y+2	; 0x02
    459c:	fc 01       	movw	r30, r24
    459e:	10 82       	st	Z, r1
   //return success
   return 1;
    45a0:	81 e0       	ldi	r24, 0x01	; 1
}
    45a2:	0f 90       	pop	r0
    45a4:	0f 90       	pop	r0
    45a6:	df 91       	pop	r29
    45a8:	cf 91       	pop	r28
    45aa:	08 95       	ret

000045ac <setSpeed>:

//will set just the speed of the wheels of the car
char setSpeed(char speedTarget) {
    45ac:	cf 93       	push	r28
    45ae:	df 93       	push	r29
    45b0:	1f 92       	push	r1
    45b2:	cd b7       	in	r28, 0x3d	; 61
    45b4:	de b7       	in	r29, 0x3e	; 62
    45b6:	89 83       	std	Y+1, r24	; 0x01
   //nothing done down here
   //return success
	setPot(speedTarget);
    45b8:	89 81       	ldd	r24, Y+1	; 0x01
    45ba:	99 27       	eor	r25, r25
    45bc:	87 fd       	sbrc	r24, 7
    45be:	90 95       	com	r25
    45c0:	0e 94 94 22 	call	0x4528	; 0x4528 <setPot>
   return 1;
    45c4:	81 e0       	ldi	r24, 0x01	; 1
}
    45c6:	0f 90       	pop	r0
    45c8:	df 91       	pop	r29
    45ca:	cf 91       	pop	r28
    45cc:	08 95       	ret

000045ce <setAngle>:

//Steering group

//JUST SETS ANGLE TARGET. Actual angle changing is lower level
char setAngle(char angleTarget) {
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
    45d2:	1f 92       	push	r1
    45d4:	cd b7       	in	r28, 0x3d	; 61
    45d6:	de b7       	in	r29, 0x3e	; 62
    45d8:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing will happen for now...
   //return success
   return 1;
    45da:	81 e0       	ldi	r24, 0x01	; 1
}
    45dc:	0f 90       	pop	r0
    45de:	df 91       	pop	r29
    45e0:	cf 91       	pop	r28
    45e2:	08 95       	ret

000045e4 <getAngle>:

//get the current angle of the steering system
char getAngle(char* sensorResponse) {
    45e4:	cf 93       	push	r28
    45e6:	df 93       	push	r29
    45e8:	1f 92       	push	r1
    45ea:	1f 92       	push	r1
    45ec:	cd b7       	in	r28, 0x3d	; 61
    45ee:	de b7       	in	r29, 0x3e	; 62
    45f0:	9a 83       	std	Y+2, r25	; 0x02
    45f2:	89 83       	std	Y+1, r24	; 0x01
   //store fake angle reading
   *sensorResponse = 0;
    45f4:	89 81       	ldd	r24, Y+1	; 0x01
    45f6:	9a 81       	ldd	r25, Y+2	; 0x02
    45f8:	fc 01       	movw	r30, r24
    45fa:	10 82       	st	Z, r1
   //return success
   return 1;
    45fc:	81 e0       	ldi	r24, 0x01	; 1
}
    45fe:	0f 90       	pop	r0
    4600:	0f 90       	pop	r0
    4602:	df 91       	pop	r29
    4604:	cf 91       	pop	r28
    4606:	08 95       	ret

00004608 <getDesiredAngle>:

//get the angle target. argument name is sensorResponse for the sake of consistancy
char getDesiredAngle(char* sensorResponse) {
    4608:	cf 93       	push	r28
    460a:	df 93       	push	r29
    460c:	1f 92       	push	r1
    460e:	1f 92       	push	r1
    4610:	cd b7       	in	r28, 0x3d	; 61
    4612:	de b7       	in	r29, 0x3e	; 62
    4614:	9a 83       	std	Y+2, r25	; 0x02
    4616:	89 83       	std	Y+1, r24	; 0x01
   //fake response
   *sensorResponse = 0;
    4618:	89 81       	ldd	r24, Y+1	; 0x01
    461a:	9a 81       	ldd	r25, Y+2	; 0x02
    461c:	fc 01       	movw	r30, r24
    461e:	10 82       	st	Z, r1
   //return success
   return 1;
    4620:	81 e0       	ldi	r24, 0x01	; 1
}
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	df 91       	pop	r29
    4628:	cf 91       	pop	r28
    462a:	08 95       	ret

0000462c <changePID>:

//change the PID controller
char changePID(char P, char I, char D) {
    462c:	cf 93       	push	r28
    462e:	df 93       	push	r29
    4630:	00 d0       	rcall	.+0      	; 0x4632 <changePID+0x6>
    4632:	cd b7       	in	r28, 0x3d	; 61
    4634:	de b7       	in	r29, 0x3e	; 62
    4636:	89 83       	std	Y+1, r24	; 0x01
    4638:	6a 83       	std	Y+2, r22	; 0x02
    463a:	4b 83       	std	Y+3, r20	; 0x03
   //dummy function, nothing happens
   //return success
   return 1;
    463c:	81 e0       	ldi	r24, 0x01	; 1
}
    463e:	0f 90       	pop	r0
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	df 91       	pop	r29
    4646:	cf 91       	pop	r28
    4648:	08 95       	ret

0000464a <setLimits>:

//not sure what this does. Also not sure why upper and lower are separated
//but its in the specs so...
char setLimits(char upper, char lower) {
    464a:	cf 93       	push	r28
    464c:	df 93       	push	r29
    464e:	1f 92       	push	r1
    4650:	1f 92       	push	r1
    4652:	cd b7       	in	r28, 0x3d	; 61
    4654:	de b7       	in	r29, 0x3e	; 62
    4656:	89 83       	std	Y+1, r24	; 0x01
    4658:	6a 83       	std	Y+2, r22	; 0x02
   //dummy function, nothing happens
   //return success
   return 1;
    465a:	81 e0       	ldi	r24, 0x01	; 1
}
    465c:	0f 90       	pop	r0
    465e:	0f 90       	pop	r0
    4660:	df 91       	pop	r29
    4662:	cf 91       	pop	r28
    4664:	08 95       	ret

00004666 <initializeSPI>:
const static int mosi_pin = 2;
const static int miso_pin = 3;
const static int sck_pin = 1;
const static int ss_pin = 0; 

void initializeSPI(){
    4666:	cf 93       	push	r28
    4668:	df 93       	push	r29
    466a:	cd b7       	in	r28, 0x3d	; 61
    466c:	de b7       	in	r29, 0x3e	; 62
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR1)|(1 << SPR0);
    466e:	8c e4       	ldi	r24, 0x4C	; 76
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	23 e5       	ldi	r18, 0x53	; 83
    4674:	fc 01       	movw	r30, r24
    4676:	20 83       	st	Z, r18
	DDRB |= (1 << ss_pin)|(1 << sck_pin)|(1 << mosi_pin);
    4678:	84 e2       	ldi	r24, 0x24	; 36
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	24 e2       	ldi	r18, 0x24	; 36
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	f9 01       	movw	r30, r18
    4682:	20 81       	ld	r18, Z
    4684:	62 2f       	mov	r22, r18
    4686:	40 e0       	ldi	r20, 0x00	; 0
    4688:	50 e0       	ldi	r21, 0x00	; 0
    468a:	21 e0       	ldi	r18, 0x01	; 1
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	02 c0       	rjmp	.+4      	; 0x4694 <initializeSPI+0x2e>
    4690:	22 0f       	add	r18, r18
    4692:	33 1f       	adc	r19, r19
    4694:	4a 95       	dec	r20
    4696:	e2 f7       	brpl	.-8      	; 0x4690 <initializeSPI+0x2a>
    4698:	72 2f       	mov	r23, r18
    469a:	41 e0       	ldi	r20, 0x01	; 1
    469c:	50 e0       	ldi	r21, 0x00	; 0
    469e:	21 e0       	ldi	r18, 0x01	; 1
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	02 c0       	rjmp	.+4      	; 0x46a8 <initializeSPI+0x42>
    46a4:	22 0f       	add	r18, r18
    46a6:	33 1f       	adc	r19, r19
    46a8:	4a 95       	dec	r20
    46aa:	e2 f7       	brpl	.-8      	; 0x46a4 <initializeSPI+0x3e>
    46ac:	72 2b       	or	r23, r18
    46ae:	42 e0       	ldi	r20, 0x02	; 2
    46b0:	50 e0       	ldi	r21, 0x00	; 0
    46b2:	21 e0       	ldi	r18, 0x01	; 1
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	02 c0       	rjmp	.+4      	; 0x46bc <initializeSPI+0x56>
    46b8:	22 0f       	add	r18, r18
    46ba:	33 1f       	adc	r19, r19
    46bc:	4a 95       	dec	r20
    46be:	e2 f7       	brpl	.-8      	; 0x46b8 <initializeSPI+0x52>
    46c0:	27 2b       	or	r18, r23
    46c2:	26 2b       	or	r18, r22
    46c4:	fc 01       	movw	r30, r24
    46c6:	20 83       	st	Z, r18
	DDRB &= ~(1 << miso_pin);
    46c8:	84 e2       	ldi	r24, 0x24	; 36
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	24 e2       	ldi	r18, 0x24	; 36
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	f9 01       	movw	r30, r18
    46d2:	20 81       	ld	r18, Z
    46d4:	62 2f       	mov	r22, r18
    46d6:	43 e0       	ldi	r20, 0x03	; 3
    46d8:	50 e0       	ldi	r21, 0x00	; 0
    46da:	21 e0       	ldi	r18, 0x01	; 1
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	02 c0       	rjmp	.+4      	; 0x46e4 <initializeSPI+0x7e>
    46e0:	22 0f       	add	r18, r18
    46e2:	33 1f       	adc	r19, r19
    46e4:	4a 95       	dec	r20
    46e6:	e2 f7       	brpl	.-8      	; 0x46e0 <initializeSPI+0x7a>
    46e8:	20 95       	com	r18
    46ea:	26 23       	and	r18, r22
    46ec:	fc 01       	movw	r30, r24
    46ee:	20 83       	st	Z, r18
	PORTB |= 1 << ss_pin;
    46f0:	85 e2       	ldi	r24, 0x25	; 37
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	25 e2       	ldi	r18, 0x25	; 37
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	f9 01       	movw	r30, r18
    46fa:	20 81       	ld	r18, Z
    46fc:	62 2f       	mov	r22, r18
    46fe:	40 e0       	ldi	r20, 0x00	; 0
    4700:	50 e0       	ldi	r21, 0x00	; 0
    4702:	21 e0       	ldi	r18, 0x01	; 1
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	02 c0       	rjmp	.+4      	; 0x470c <initializeSPI+0xa6>
    4708:	22 0f       	add	r18, r18
    470a:	33 1f       	adc	r19, r19
    470c:	4a 95       	dec	r20
    470e:	e2 f7       	brpl	.-8      	; 0x4708 <initializeSPI+0xa2>
    4710:	26 2b       	or	r18, r22
    4712:	fc 01       	movw	r30, r24
    4714:	20 83       	st	Z, r18
	PORTB &= ~(1 << sck_pin);
    4716:	85 e2       	ldi	r24, 0x25	; 37
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	25 e2       	ldi	r18, 0x25	; 37
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	f9 01       	movw	r30, r18
    4720:	20 81       	ld	r18, Z
    4722:	62 2f       	mov	r22, r18
    4724:	41 e0       	ldi	r20, 0x01	; 1
    4726:	50 e0       	ldi	r21, 0x00	; 0
    4728:	21 e0       	ldi	r18, 0x01	; 1
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	04 2e       	mov	r0, r20
    472e:	02 c0       	rjmp	.+4      	; 0x4734 <initializeSPI+0xce>
    4730:	22 0f       	add	r18, r18
    4732:	33 1f       	adc	r19, r19
    4734:	0a 94       	dec	r0
    4736:	e2 f7       	brpl	.-8      	; 0x4730 <initializeSPI+0xca>
    4738:	20 95       	com	r18
    473a:	26 23       	and	r18, r22
    473c:	fc 01       	movw	r30, r24
    473e:	20 83       	st	Z, r18
}
    4740:	df 91       	pop	r29
    4742:	cf 91       	pop	r28
    4744:	08 95       	ret

00004746 <SPIsendByte>:

void SPIsendByte(unsigned char byte){
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	1f 92       	push	r1
    474c:	cd b7       	in	r28, 0x3d	; 61
    474e:	de b7       	in	r29, 0x3e	; 62
    4750:	89 83       	std	Y+1, r24	; 0x01
	PORTB &= ~(1 << ss_pin);
    4752:	85 e2       	ldi	r24, 0x25	; 37
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	25 e2       	ldi	r18, 0x25	; 37
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	f9 01       	movw	r30, r18
    475c:	20 81       	ld	r18, Z
    475e:	62 2f       	mov	r22, r18
    4760:	40 e0       	ldi	r20, 0x00	; 0
    4762:	50 e0       	ldi	r21, 0x00	; 0
    4764:	21 e0       	ldi	r18, 0x01	; 1
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	02 c0       	rjmp	.+4      	; 0x476e <SPIsendByte+0x28>
    476a:	22 0f       	add	r18, r18
    476c:	33 1f       	adc	r19, r19
    476e:	4a 95       	dec	r20
    4770:	e2 f7       	brpl	.-8      	; 0x476a <SPIsendByte+0x24>
    4772:	20 95       	com	r18
    4774:	26 23       	and	r18, r22
    4776:	fc 01       	movw	r30, r24
    4778:	20 83       	st	Z, r18
	vTaskDelay(1);
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
	SPDR = byte;
    4782:	8e e4       	ldi	r24, 0x4E	; 78
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	29 81       	ldd	r18, Y+1	; 0x01
    4788:	fc 01       	movw	r30, r24
    478a:	20 83       	st	Z, r18
	while((SPSR & (1 << SPIF)) == 0)
    478c:	00 00       	nop
    478e:	8d e4       	ldi	r24, 0x4D	; 77
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	fc 01       	movw	r30, r24
    4794:	80 81       	ld	r24, Z
    4796:	88 23       	and	r24, r24
    4798:	d4 f7       	brge	.-12     	; 0x478e <SPIsendByte+0x48>
	;
	vTaskDelay(1);
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
	PORTB |= (1 << ss_pin);
    47a2:	85 e2       	ldi	r24, 0x25	; 37
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	25 e2       	ldi	r18, 0x25	; 37
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	f9 01       	movw	r30, r18
    47ac:	20 81       	ld	r18, Z
    47ae:	62 2f       	mov	r22, r18
    47b0:	40 e0       	ldi	r20, 0x00	; 0
    47b2:	50 e0       	ldi	r21, 0x00	; 0
    47b4:	21 e0       	ldi	r18, 0x01	; 1
    47b6:	30 e0       	ldi	r19, 0x00	; 0
    47b8:	04 2e       	mov	r0, r20
    47ba:	02 c0       	rjmp	.+4      	; 0x47c0 <SPIsendByte+0x7a>
    47bc:	22 0f       	add	r18, r18
    47be:	33 1f       	adc	r19, r19
    47c0:	0a 94       	dec	r0
    47c2:	e2 f7       	brpl	.-8      	; 0x47bc <SPIsendByte+0x76>
    47c4:	26 2b       	or	r18, r22
    47c6:	fc 01       	movw	r30, r24
    47c8:	20 83       	st	Z, r18

}
    47ca:	0f 90       	pop	r0
    47cc:	df 91       	pop	r29
    47ce:	cf 91       	pop	r28
    47d0:	08 95       	ret

000047d2 <SPIsendShort>:

void SPIsendShort(unsigned short data){
    47d2:	cf 93       	push	r28
    47d4:	df 93       	push	r29
    47d6:	1f 92       	push	r1
    47d8:	1f 92       	push	r1
    47da:	cd b7       	in	r28, 0x3d	; 61
    47dc:	de b7       	in	r29, 0x3e	; 62
    47de:	9a 83       	std	Y+2, r25	; 0x02
    47e0:	89 83       	std	Y+1, r24	; 0x01
	PORTB &= ~(1 << ss_pin);
    47e2:	85 e2       	ldi	r24, 0x25	; 37
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	25 e2       	ldi	r18, 0x25	; 37
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	f9 01       	movw	r30, r18
    47ec:	20 81       	ld	r18, Z
    47ee:	62 2f       	mov	r22, r18
    47f0:	40 e0       	ldi	r20, 0x00	; 0
    47f2:	50 e0       	ldi	r21, 0x00	; 0
    47f4:	21 e0       	ldi	r18, 0x01	; 1
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	02 c0       	rjmp	.+4      	; 0x47fe <SPIsendShort+0x2c>
    47fa:	22 0f       	add	r18, r18
    47fc:	33 1f       	adc	r19, r19
    47fe:	4a 95       	dec	r20
    4800:	e2 f7       	brpl	.-8      	; 0x47fa <SPIsendShort+0x28>
    4802:	20 95       	com	r18
    4804:	26 23       	and	r18, r22
    4806:	fc 01       	movw	r30, r24
    4808:	20 83       	st	Z, r18
	vTaskDelay(2);
    480a:	82 e0       	ldi	r24, 0x02	; 2
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
	SPDR = (data >> 8);
    4812:	8e e4       	ldi	r24, 0x4E	; 78
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	29 81       	ldd	r18, Y+1	; 0x01
    4818:	3a 81       	ldd	r19, Y+2	; 0x02
    481a:	23 2f       	mov	r18, r19
    481c:	33 27       	eor	r19, r19
    481e:	fc 01       	movw	r30, r24
    4820:	20 83       	st	Z, r18
	while((SPSR & (1 << SPIF)) == 0)
    4822:	00 00       	nop
    4824:	8d e4       	ldi	r24, 0x4D	; 77
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	fc 01       	movw	r30, r24
    482a:	80 81       	ld	r24, Z
    482c:	88 23       	and	r24, r24
    482e:	d4 f7       	brge	.-12     	; 0x4824 <SPIsendShort+0x52>
	;
	SPDR = data & 0xFF;
    4830:	8e e4       	ldi	r24, 0x4E	; 78
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	29 81       	ldd	r18, Y+1	; 0x01
    4836:	fc 01       	movw	r30, r24
    4838:	20 83       	st	Z, r18
	while((SPSR & (1 << SPIF)) == 0)
    483a:	00 00       	nop
    483c:	8d e4       	ldi	r24, 0x4D	; 77
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	fc 01       	movw	r30, r24
    4842:	80 81       	ld	r24, Z
    4844:	88 23       	and	r24, r24
    4846:	d4 f7       	brge	.-12     	; 0x483c <SPIsendShort+0x6a>
	;
	vTaskDelay(2);
    4848:	82 e0       	ldi	r24, 0x02	; 2
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	0e 94 09 05 	call	0xa12	; 0xa12 <vTaskDelay>
	PORTB |= (1 << ss_pin);
    4850:	85 e2       	ldi	r24, 0x25	; 37
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	25 e2       	ldi	r18, 0x25	; 37
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	f9 01       	movw	r30, r18
    485a:	20 81       	ld	r18, Z
    485c:	62 2f       	mov	r22, r18
    485e:	40 e0       	ldi	r20, 0x00	; 0
    4860:	50 e0       	ldi	r21, 0x00	; 0
    4862:	21 e0       	ldi	r18, 0x01	; 1
    4864:	30 e0       	ldi	r19, 0x00	; 0
    4866:	04 2e       	mov	r0, r20
    4868:	02 c0       	rjmp	.+4      	; 0x486e <SPIsendShort+0x9c>
    486a:	22 0f       	add	r18, r18
    486c:	33 1f       	adc	r19, r19
    486e:	0a 94       	dec	r0
    4870:	e2 f7       	brpl	.-8      	; 0x486a <SPIsendShort+0x98>
    4872:	26 2b       	or	r18, r22
    4874:	fc 01       	movw	r30, r24
    4876:	20 83       	st	Z, r18
}
    4878:	0f 90       	pop	r0
    487a:	0f 90       	pop	r0
    487c:	df 91       	pop	r29
    487e:	cf 91       	pop	r28
    4880:	08 95       	ret

00004882 <getSonarResult>:
xSemaphoreHandle* adcSemaphore;

static int ADCResult;
static int last4[4];

int getSonarResult(){
    4882:	cf 93       	push	r28
    4884:	df 93       	push	r29
    4886:	cd b7       	in	r28, 0x3d	; 61
    4888:	de b7       	in	r29, 0x3e	; 62
	return ADCResult;
    488a:	80 91 c4 1a 	lds	r24, 0x1AC4
    488e:	90 91 c5 1a 	lds	r25, 0x1AC5
}
    4892:	df 91       	pop	r29
    4894:	cf 91       	pop	r28
    4896:	08 95       	ret

00004898 <addResult>:

void addResult(int result){
    4898:	cf 93       	push	r28
    489a:	df 93       	push	r29
    489c:	00 d0       	rcall	.+0      	; 0x489e <addResult+0x6>
    489e:	1f 92       	push	r1
    48a0:	cd b7       	in	r28, 0x3d	; 61
    48a2:	de b7       	in	r29, 0x3e	; 62
    48a4:	9c 83       	std	Y+4, r25	; 0x04
    48a6:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i = 0;i < 3;i++){
    48a8:	1a 82       	std	Y+2, r1	; 0x02
    48aa:	19 82       	std	Y+1, r1	; 0x01
    48ac:	18 c0       	rjmp	.+48     	; 0x48de <addResult+0x46>
		last4[i] = last4[i + 1];
    48ae:	89 81       	ldd	r24, Y+1	; 0x01
    48b0:	9a 81       	ldd	r25, Y+2	; 0x02
    48b2:	01 96       	adiw	r24, 0x01	; 1
    48b4:	88 0f       	add	r24, r24
    48b6:	99 1f       	adc	r25, r25
    48b8:	8a 53       	subi	r24, 0x3A	; 58
    48ba:	95 4e       	sbci	r25, 0xE5	; 229
    48bc:	fc 01       	movw	r30, r24
    48be:	20 81       	ld	r18, Z
    48c0:	31 81       	ldd	r19, Z+1	; 0x01
    48c2:	89 81       	ldd	r24, Y+1	; 0x01
    48c4:	9a 81       	ldd	r25, Y+2	; 0x02
    48c6:	88 0f       	add	r24, r24
    48c8:	99 1f       	adc	r25, r25
    48ca:	8a 53       	subi	r24, 0x3A	; 58
    48cc:	95 4e       	sbci	r25, 0xE5	; 229
    48ce:	fc 01       	movw	r30, r24
    48d0:	31 83       	std	Z+1, r19	; 0x01
    48d2:	20 83       	st	Z, r18
	return ADCResult;
}

void addResult(int result){
	int i;
	for(i = 0;i < 3;i++){
    48d4:	89 81       	ldd	r24, Y+1	; 0x01
    48d6:	9a 81       	ldd	r25, Y+2	; 0x02
    48d8:	01 96       	adiw	r24, 0x01	; 1
    48da:	9a 83       	std	Y+2, r25	; 0x02
    48dc:	89 83       	std	Y+1, r24	; 0x01
    48de:	89 81       	ldd	r24, Y+1	; 0x01
    48e0:	9a 81       	ldd	r25, Y+2	; 0x02
    48e2:	83 30       	cpi	r24, 0x03	; 3
    48e4:	91 05       	cpc	r25, r1
    48e6:	1c f3       	brlt	.-58     	; 0x48ae <addResult+0x16>
		last4[i] = last4[i + 1];
	}
	last4[3] = result;
    48e8:	8b 81       	ldd	r24, Y+3	; 0x03
    48ea:	9c 81       	ldd	r25, Y+4	; 0x04
    48ec:	90 93 cd 1a 	sts	0x1ACD, r25
    48f0:	80 93 cc 1a 	sts	0x1ACC, r24
	ADCResult = result;
    48f4:	8b 81       	ldd	r24, Y+3	; 0x03
    48f6:	9c 81       	ldd	r25, Y+4	; 0x04
    48f8:	90 93 c5 1a 	sts	0x1AC5, r25
    48fc:	80 93 c4 1a 	sts	0x1AC4, r24
	ADCResult = result;
    4900:	8b 81       	ldd	r24, Y+3	; 0x03
    4902:	9c 81       	ldd	r25, Y+4	; 0x04
    4904:	90 93 c5 1a 	sts	0x1AC5, r25
    4908:	80 93 c4 1a 	sts	0x1AC4, r24
	ADCResult = (last4[0] + last4[1] + last4[2] + last4[3]) >> 2;
    490c:	20 91 c6 1a 	lds	r18, 0x1AC6
    4910:	30 91 c7 1a 	lds	r19, 0x1AC7
    4914:	80 91 c8 1a 	lds	r24, 0x1AC8
    4918:	90 91 c9 1a 	lds	r25, 0x1AC9
    491c:	28 0f       	add	r18, r24
    491e:	39 1f       	adc	r19, r25
    4920:	80 91 ca 1a 	lds	r24, 0x1ACA
    4924:	90 91 cb 1a 	lds	r25, 0x1ACB
    4928:	28 0f       	add	r18, r24
    492a:	39 1f       	adc	r19, r25
    492c:	80 91 cc 1a 	lds	r24, 0x1ACC
    4930:	90 91 cd 1a 	lds	r25, 0x1ACD
    4934:	82 0f       	add	r24, r18
    4936:	93 1f       	adc	r25, r19
    4938:	95 95       	asr	r25
    493a:	87 95       	ror	r24
    493c:	95 95       	asr	r25
    493e:	87 95       	ror	r24
    4940:	90 93 c5 1a 	sts	0x1AC5, r25
    4944:	80 93 c4 1a 	sts	0x1AC4, r24
}
    4948:	0f 90       	pop	r0
    494a:	0f 90       	pop	r0
    494c:	0f 90       	pop	r0
    494e:	0f 90       	pop	r0
    4950:	df 91       	pop	r29
    4952:	cf 91       	pop	r28
    4954:	08 95       	ret

00004956 <initADC>:
		
	
//Initialize ADC registers
void initADC(){
    4956:	cf 93       	push	r28
    4958:	df 93       	push	r29
    495a:	cd b7       	in	r28, 0x3d	; 61
    495c:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = _BV(ADEN);
    495e:	8a e7       	ldi	r24, 0x7A	; 122
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	20 e8       	ldi	r18, 0x80	; 128
    4964:	fc 01       	movw	r30, r24
    4966:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0)|(1);
    4968:	8c e7       	ldi	r24, 0x7C	; 124
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	21 e4       	ldi	r18, 0x41	; 65
    496e:	fc 01       	movw	r30, r24
    4970:	20 83       	st	Z, r18

	ADCSRB = (1 << MUX5);
    4972:	8b e7       	ldi	r24, 0x7B	; 123
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	28 e0       	ldi	r18, 0x08	; 8
    4978:	fc 01       	movw	r30, r24
    497a:	20 83       	st	Z, r18
	//DIDR2 = 0xFF;
}
    497c:	df 91       	pop	r29
    497e:	cf 91       	pop	r28
    4980:	08 95       	ret

00004982 <ADCStart>:

//If the ADC isn't running, start it
void ADCStart() {
    4982:	cf 93       	push	r28
    4984:	df 93       	push	r29
    4986:	cd b7       	in	r28, 0x3d	; 61
    4988:	de b7       	in	r29, 0x3e	; 62
	if(!(ADCSRA & _BV(ADSC))){
    498a:	8a e7       	ldi	r24, 0x7A	; 122
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	fc 01       	movw	r30, r24
    4990:	80 81       	ld	r24, Z
    4992:	88 2f       	mov	r24, r24
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	80 74       	andi	r24, 0x40	; 64
    4998:	99 27       	eor	r25, r25
    499a:	00 97       	sbiw	r24, 0x00	; 0
    499c:	91 f4       	brne	.+36     	; 0x49c2 <ADCStart+0x40>
		ADCSRA |= _BV(ADIE);
    499e:	8a e7       	ldi	r24, 0x7A	; 122
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	2a e7       	ldi	r18, 0x7A	; 122
    49a4:	30 e0       	ldi	r19, 0x00	; 0
    49a6:	f9 01       	movw	r30, r18
    49a8:	20 81       	ld	r18, Z
    49aa:	28 60       	ori	r18, 0x08	; 8
    49ac:	fc 01       	movw	r30, r24
    49ae:	20 83       	st	Z, r18
		ADCSRA |= _BV(ADSC);
    49b0:	8a e7       	ldi	r24, 0x7A	; 122
    49b2:	90 e0       	ldi	r25, 0x00	; 0
    49b4:	2a e7       	ldi	r18, 0x7A	; 122
    49b6:	30 e0       	ldi	r19, 0x00	; 0
    49b8:	f9 01       	movw	r30, r18
    49ba:	20 81       	ld	r18, Z
    49bc:	20 64       	ori	r18, 0x40	; 64
    49be:	fc 01       	movw	r30, r24
    49c0:	20 83       	st	Z, r18
	}
}
    49c2:	df 91       	pop	r29
    49c4:	cf 91       	pop	r28
    49c6:	08 95       	ret

000049c8 <__vector_29>:

//Read the finished value of the ADC and store it
ISR(ADC_vect) {
    49c8:	1f 92       	push	r1
    49ca:	0f 92       	push	r0
    49cc:	00 90 5f 00 	lds	r0, 0x005F
    49d0:	0f 92       	push	r0
    49d2:	11 24       	eor	r1, r1
    49d4:	00 90 5b 00 	lds	r0, 0x005B
    49d8:	0f 92       	push	r0
    49da:	2f 93       	push	r18
    49dc:	3f 93       	push	r19
    49de:	4f 93       	push	r20
    49e0:	5f 93       	push	r21
    49e2:	6f 93       	push	r22
    49e4:	7f 93       	push	r23
    49e6:	8f 93       	push	r24
    49e8:	9f 93       	push	r25
    49ea:	af 93       	push	r26
    49ec:	bf 93       	push	r27
    49ee:	ef 93       	push	r30
    49f0:	ff 93       	push	r31
    49f2:	cf 93       	push	r28
    49f4:	df 93       	push	r29
    49f6:	1f 92       	push	r1
    49f8:	1f 92       	push	r1
    49fa:	cd b7       	in	r28, 0x3d	; 61
    49fc:	de b7       	in	r29, 0x3e	; 62
	int result = ADCL;
    49fe:	88 e7       	ldi	r24, 0x78	; 120
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	fc 01       	movw	r30, r24
    4a04:	80 81       	ld	r24, Z
    4a06:	88 2f       	mov	r24, r24
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	9a 83       	std	Y+2, r25	; 0x02
    4a0c:	89 83       	std	Y+1, r24	; 0x01
	result |= (ADCH << 8);
    4a0e:	89 e7       	ldi	r24, 0x79	; 121
    4a10:	90 e0       	ldi	r25, 0x00	; 0
    4a12:	fc 01       	movw	r30, r24
    4a14:	80 81       	ld	r24, Z
    4a16:	88 2f       	mov	r24, r24
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	98 2f       	mov	r25, r24
    4a1c:	88 27       	eor	r24, r24
    4a1e:	29 81       	ldd	r18, Y+1	; 0x01
    4a20:	3a 81       	ldd	r19, Y+2	; 0x02
    4a22:	82 2b       	or	r24, r18
    4a24:	93 2b       	or	r25, r19
    4a26:	9a 83       	std	Y+2, r25	; 0x02
    4a28:	89 83       	std	Y+1, r24	; 0x01
	
	addResult(result);
    4a2a:	89 81       	ldd	r24, Y+1	; 0x01
    4a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a2e:	0e 94 4c 24 	call	0x4898	; 0x4898 <addResult>
	
	ADCSRA &= ~(_BV(ADIE));
    4a32:	8a e7       	ldi	r24, 0x7A	; 122
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	2a e7       	ldi	r18, 0x7A	; 122
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	f9 01       	movw	r30, r18
    4a3c:	20 81       	ld	r18, Z
    4a3e:	27 7f       	andi	r18, 0xF7	; 247
    4a40:	fc 01       	movw	r30, r24
    4a42:	20 83       	st	Z, r18

	xSemaphoreGiveFromISR(adcSemaphore,0);
    4a44:	80 91 eb 1a 	lds	r24, 0x1AEB
    4a48:	90 91 ec 1a 	lds	r25, 0x1AEC
    4a4c:	20 e0       	ldi	r18, 0x00	; 0
    4a4e:	40 e0       	ldi	r20, 0x00	; 0
    4a50:	50 e0       	ldi	r21, 0x00	; 0
    4a52:	60 e0       	ldi	r22, 0x00	; 0
    4a54:	70 e0       	ldi	r23, 0x00	; 0
    4a56:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <xQueueGenericSendFromISR>
}
    4a5a:	0f 90       	pop	r0
    4a5c:	0f 90       	pop	r0
    4a5e:	df 91       	pop	r29
    4a60:	cf 91       	pop	r28
    4a62:	ff 91       	pop	r31
    4a64:	ef 91       	pop	r30
    4a66:	bf 91       	pop	r27
    4a68:	af 91       	pop	r26
    4a6a:	9f 91       	pop	r25
    4a6c:	8f 91       	pop	r24
    4a6e:	7f 91       	pop	r23
    4a70:	6f 91       	pop	r22
    4a72:	5f 91       	pop	r21
    4a74:	4f 91       	pop	r20
    4a76:	3f 91       	pop	r19
    4a78:	2f 91       	pop	r18
    4a7a:	0f 90       	pop	r0
    4a7c:	00 92 5b 00 	sts	0x005B, r0
    4a80:	0f 90       	pop	r0
    4a82:	00 92 5f 00 	sts	0x005F, r0
    4a86:	0f 90       	pop	r0
    4a88:	1f 90       	pop	r1
    4a8a:	18 95       	reti

00004a8c <vTaskADC>:

void vTaskADC(void *parameters){
    4a8c:	cf 93       	push	r28
    4a8e:	df 93       	push	r29
    4a90:	1f 92       	push	r1
    4a92:	1f 92       	push	r1
    4a94:	cd b7       	in	r28, 0x3d	; 61
    4a96:	de b7       	in	r29, 0x3e	; 62
    4a98:	9a 83       	std	Y+2, r25	; 0x02
    4a9a:	89 83       	std	Y+1, r24	; 0x01
	initADC();
    4a9c:	0e 94 ab 24 	call	0x4956	; 0x4956 <initADC>

	vSemaphoreCreateBinary(adcSemaphore);
    4aa0:	43 e0       	ldi	r20, 0x03	; 3
    4aa2:	60 e0       	ldi	r22, 0x00	; 0
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <xQueueGenericCreate>
    4aaa:	90 93 ec 1a 	sts	0x1AEC, r25
    4aae:	80 93 eb 1a 	sts	0x1AEB, r24
    4ab2:	80 91 eb 1a 	lds	r24, 0x1AEB
    4ab6:	90 91 ec 1a 	lds	r25, 0x1AEC
    4aba:	00 97       	sbiw	r24, 0x00	; 0
    4abc:	59 f0       	breq	.+22     	; 0x4ad4 <vTaskADC+0x48>
    4abe:	80 91 eb 1a 	lds	r24, 0x1AEB
    4ac2:	90 91 ec 1a 	lds	r25, 0x1AEC
    4ac6:	20 e0       	ldi	r18, 0x00	; 0
    4ac8:	40 e0       	ldi	r20, 0x00	; 0
    4aca:	50 e0       	ldi	r21, 0x00	; 0
    4acc:	60 e0       	ldi	r22, 0x00	; 0
    4ace:	70 e0       	ldi	r23, 0x00	; 0
    4ad0:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <xQueueGenericSend>

	while(1){
		ADCStart();
    4ad4:	0e 94 c1 24 	call	0x4982	; 0x4982 <ADCStart>
		xSemaphoreTake(adcSemaphore,portMAX_DELAY);
    4ad8:	80 91 eb 1a 	lds	r24, 0x1AEB
    4adc:	90 91 ec 1a 	lds	r25, 0x1AEC
    4ae0:	20 e0       	ldi	r18, 0x00	; 0
    4ae2:	4f ef       	ldi	r20, 0xFF	; 255
    4ae4:	5f ef       	ldi	r21, 0xFF	; 255
    4ae6:	60 e0       	ldi	r22, 0x00	; 0
    4ae8:	70 e0       	ldi	r23, 0x00	; 0
    4aea:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xQueueGenericReceive>
	}
    4aee:	f2 cf       	rjmp	.-28     	; 0x4ad4 <vTaskADC+0x48>

00004af0 <__tablejump2__>:
    4af0:	ee 0f       	add	r30, r30
    4af2:	ff 1f       	adc	r31, r31

00004af4 <__tablejump__>:
    4af4:	05 90       	lpm	r0, Z+
    4af6:	f4 91       	lpm	r31, Z
    4af8:	e0 2d       	mov	r30, r0
    4afa:	19 94       	eijmp

00004afc <memcpy>:
    4afc:	fb 01       	movw	r30, r22
    4afe:	dc 01       	movw	r26, r24
    4b00:	02 c0       	rjmp	.+4      	; 0x4b06 <memcpy+0xa>
    4b02:	01 90       	ld	r0, Z+
    4b04:	0d 92       	st	X+, r0
    4b06:	41 50       	subi	r20, 0x01	; 1
    4b08:	50 40       	sbci	r21, 0x00	; 0
    4b0a:	d8 f7       	brcc	.-10     	; 0x4b02 <memcpy+0x6>
    4b0c:	08 95       	ret

00004b0e <memset>:
    4b0e:	dc 01       	movw	r26, r24
    4b10:	01 c0       	rjmp	.+2      	; 0x4b14 <memset+0x6>
    4b12:	6d 93       	st	X+, r22
    4b14:	41 50       	subi	r20, 0x01	; 1
    4b16:	50 40       	sbci	r21, 0x00	; 0
    4b18:	e0 f7       	brcc	.-8      	; 0x4b12 <memset+0x4>
    4b1a:	08 95       	ret

00004b1c <strncpy>:
    4b1c:	fb 01       	movw	r30, r22
    4b1e:	dc 01       	movw	r26, r24
    4b20:	41 50       	subi	r20, 0x01	; 1
    4b22:	50 40       	sbci	r21, 0x00	; 0
    4b24:	48 f0       	brcs	.+18     	; 0x4b38 <strncpy+0x1c>
    4b26:	01 90       	ld	r0, Z+
    4b28:	0d 92       	st	X+, r0
    4b2a:	00 20       	and	r0, r0
    4b2c:	c9 f7       	brne	.-14     	; 0x4b20 <strncpy+0x4>
    4b2e:	01 c0       	rjmp	.+2      	; 0x4b32 <strncpy+0x16>
    4b30:	1d 92       	st	X+, r1
    4b32:	41 50       	subi	r20, 0x01	; 1
    4b34:	50 40       	sbci	r21, 0x00	; 0
    4b36:	e0 f7       	brcc	.-8      	; 0x4b30 <strncpy+0x14>
    4b38:	08 95       	ret

00004b3a <itoa>:
    4b3a:	fb 01       	movw	r30, r22
    4b3c:	9f 01       	movw	r18, r30
    4b3e:	e8 94       	clt
    4b40:	42 30       	cpi	r20, 0x02	; 2
    4b42:	c4 f0       	brlt	.+48     	; 0x4b74 <itoa+0x3a>
    4b44:	45 32       	cpi	r20, 0x25	; 37
    4b46:	b4 f4       	brge	.+44     	; 0x4b74 <itoa+0x3a>
    4b48:	4a 30       	cpi	r20, 0x0A	; 10
    4b4a:	29 f4       	brne	.+10     	; 0x4b56 <itoa+0x1c>
    4b4c:	97 fb       	bst	r25, 7
    4b4e:	1e f4       	brtc	.+6      	; 0x4b56 <itoa+0x1c>
    4b50:	90 95       	com	r25
    4b52:	81 95       	neg	r24
    4b54:	9f 4f       	sbci	r25, 0xFF	; 255
    4b56:	64 2f       	mov	r22, r20
    4b58:	77 27       	eor	r23, r23
    4b5a:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__udivmodhi4>
    4b5e:	80 5d       	subi	r24, 0xD0	; 208
    4b60:	8a 33       	cpi	r24, 0x3A	; 58
    4b62:	0c f0       	brlt	.+2      	; 0x4b66 <itoa+0x2c>
    4b64:	89 5d       	subi	r24, 0xD9	; 217
    4b66:	81 93       	st	Z+, r24
    4b68:	cb 01       	movw	r24, r22
    4b6a:	00 97       	sbiw	r24, 0x00	; 0
    4b6c:	a1 f7       	brne	.-24     	; 0x4b56 <itoa+0x1c>
    4b6e:	16 f4       	brtc	.+4      	; 0x4b74 <itoa+0x3a>
    4b70:	5d e2       	ldi	r21, 0x2D	; 45
    4b72:	51 93       	st	Z+, r21
    4b74:	10 82       	st	Z, r1
    4b76:	c9 01       	movw	r24, r18
    4b78:	0c 94 be 25 	jmp	0x4b7c	; 0x4b7c <strrev>

00004b7c <strrev>:
    4b7c:	dc 01       	movw	r26, r24
    4b7e:	fc 01       	movw	r30, r24
    4b80:	67 2f       	mov	r22, r23
    4b82:	71 91       	ld	r23, Z+
    4b84:	77 23       	and	r23, r23
    4b86:	e1 f7       	brne	.-8      	; 0x4b80 <strrev+0x4>
    4b88:	32 97       	sbiw	r30, 0x02	; 2
    4b8a:	04 c0       	rjmp	.+8      	; 0x4b94 <strrev+0x18>
    4b8c:	7c 91       	ld	r23, X
    4b8e:	6d 93       	st	X+, r22
    4b90:	70 83       	st	Z, r23
    4b92:	62 91       	ld	r22, -Z
    4b94:	ae 17       	cp	r26, r30
    4b96:	bf 07       	cpc	r27, r31
    4b98:	c8 f3       	brcs	.-14     	; 0x4b8c <strrev+0x10>
    4b9a:	08 95       	ret

00004b9c <__udivmodhi4>:
    4b9c:	aa 1b       	sub	r26, r26
    4b9e:	bb 1b       	sub	r27, r27
    4ba0:	51 e1       	ldi	r21, 0x11	; 17
    4ba2:	07 c0       	rjmp	.+14     	; 0x4bb2 <__udivmodhi4_ep>

00004ba4 <__udivmodhi4_loop>:
    4ba4:	aa 1f       	adc	r26, r26
    4ba6:	bb 1f       	adc	r27, r27
    4ba8:	a6 17       	cp	r26, r22
    4baa:	b7 07       	cpc	r27, r23
    4bac:	10 f0       	brcs	.+4      	; 0x4bb2 <__udivmodhi4_ep>
    4bae:	a6 1b       	sub	r26, r22
    4bb0:	b7 0b       	sbc	r27, r23

00004bb2 <__udivmodhi4_ep>:
    4bb2:	88 1f       	adc	r24, r24
    4bb4:	99 1f       	adc	r25, r25
    4bb6:	5a 95       	dec	r21
    4bb8:	a9 f7       	brne	.-22     	; 0x4ba4 <__udivmodhi4_loop>
    4bba:	80 95       	com	r24
    4bbc:	90 95       	com	r25
    4bbe:	bc 01       	movw	r22, r24
    4bc0:	cd 01       	movw	r24, r26
    4bc2:	08 95       	ret

00004bc4 <_exit>:
    4bc4:	f8 94       	cli

00004bc6 <__stop_program>:
    4bc6:	ff cf       	rjmp	.-2      	; 0x4bc6 <__stop_program>
