
rtosdemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  0000403a  000040ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000403a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000018b5  00800224  00800224  000040f2  2**0
                  ALLOC
  3 .stab         00008ebc  00000000  00000000  000040f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004840  00000000  00000000  0000cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000117f0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <__vector_11>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 28 18 	jmp	0x3050	; 0x3050 <__vector_32>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__vector_36>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_50>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e3       	ldi	r30, 0x3A	; 58
      fc:	f0 e4       	ldi	r31, 0x40	; 64
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 32       	cpi	r26, 0x24	; 36
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	1a e1       	ldi	r17, 0x1A	; 26
     110:	a4 e2       	ldi	r26, 0x24	; 36
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a9 3d       	cpi	r26, 0xD9	; 217
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 ac 00 	call	0x158	; 0x158 <main>
     122:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <vApplicationTickHook>:
int count = 0;

int sonarTime;

void vApplicationTickHook()
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
    count++;
     132:	80 91 24 02 	lds	r24, 0x0224
     136:	90 91 25 02 	lds	r25, 0x0225
     13a:	01 96       	adiw	r24, 0x01	; 1
     13c:	90 93 25 02 	sts	0x0225, r25
     140:	80 93 24 02 	sts	0x0224, r24
}
     144:	cf 91       	pop	r28
     146:	df 91       	pop	r29
     148:	08 95       	ret

0000014a <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(){
     14a:	df 93       	push	r29
     14c:	cf 93       	push	r28
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
	return;
}
     152:	cf 91       	pop	r28
     154:	df 91       	pop	r29
     156:	08 95       	ret

00000158 <main>:
/*-----------------------------------------------------------*/

int main( void )
{
     158:	af 92       	push	r10
     15a:	bf 92       	push	r11
     15c:	cf 92       	push	r12
     15e:	df 92       	push	r13
     160:	ef 92       	push	r14
     162:	ff 92       	push	r15
     164:	0f 93       	push	r16
     166:	df 93       	push	r29
     168:	cf 93       	push	r28
     16a:	00 d0       	rcall	.+0      	; 0x16c <main+0x14>
     16c:	00 d0       	rcall	.+0      	; 0x16e <main+0x16>
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
    
    //- wimpy variable defs
	uint8_t val[2] = {0x3F, 0xFE};
     172:	8f e3       	ldi	r24, 0x3F	; 63
     174:	8d 83       	std	Y+5, r24	; 0x05
     176:	8e ef       	ldi	r24, 0xFE	; 254
     178:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t *val0, *val1;
    
	//- avoid pesky warnings...
	val0 = val + 0;
     17a:	ce 01       	movw	r24, r28
     17c:	05 96       	adiw	r24, 0x05	; 5
     17e:	9c 83       	std	Y+4, r25	; 0x04
     180:	8b 83       	std	Y+3, r24	; 0x03
	val1 = val + 1;
     182:	ce 01       	movw	r24, r28
     184:	05 96       	adiw	r24, 0x05	; 5
     186:	01 96       	adiw	r24, 0x01	; 1
     188:	9a 83       	std	Y+2, r25	; 0x02
     18a:	89 83       	std	Y+1, r24	; 0x01
    
	DDRD = 0xFF;
     18c:	ea e2       	ldi	r30, 0x2A	; 42
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	80 83       	st	Z, r24
	DDRE = 0xFF;
     194:	ed e2       	ldi	r30, 0x2D	; 45
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	80 83       	st	Z, r24
	DDRB = 0xFF; 
     19c:	e4 e2       	ldi	r30, 0x24	; 36
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	80 83       	st	Z, r24
	DDRK = 0;
     1a4:	e7 e0       	ldi	r30, 0x07	; 7
     1a6:	f1 e0       	ldi	r31, 0x01	; 1
     1a8:	10 82       	st	Z, r1

	PORTD = 0;
     1aa:	eb e2       	ldi	r30, 0x2B	; 43
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	10 82       	st	Z, r1
	PORTE = 0;
     1b0:	ee e2       	ldi	r30, 0x2E	; 46
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	10 82       	st	Z, r1
	PORTK = 2;
     1b6:	e8 e0       	ldi	r30, 0x08	; 8
     1b8:	f1 e0       	ldi	r31, 0x01	; 1
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	80 83       	st	Z, r24

    //- init IO with goodness
	vIO_init();
     1be:	0e 94 3c 02 	call	0x478	; 0x478 <vIO_init>

	//- Create a 
	xTaskCreate( (pdTASK_CODE) vTaskFunction_1, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
     1c2:	8b e2       	ldi	r24, 0x2B	; 43
     1c4:	92 e0       	ldi	r25, 0x02	; 2
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	32 e0       	ldi	r19, 0x02	; 2
     1ca:	e9 81       	ldd	r30, Y+1	; 0x01
     1cc:	fa 81       	ldd	r31, Y+2	; 0x02
     1ce:	b9 01       	movw	r22, r18
     1d0:	4d e3       	ldi	r20, 0x3D	; 61
     1d2:	54 e0       	ldi	r21, 0x04	; 4
     1d4:	9f 01       	movw	r18, r30
     1d6:	01 e0       	ldi	r16, 0x01	; 1
     1d8:	ee 24       	eor	r14, r14
     1da:	ff 24       	eor	r15, r15
     1dc:	cc 24       	eor	r12, r12
     1de:	dd 24       	eor	r13, r13
     1e0:	aa 24       	eor	r10, r10
     1e2:	bb 24       	eor	r11, r11
     1e4:	0e 94 4a 02 	call	0x494	; 0x494 <xTaskGenericCreate>
                (void *) val1, 1, NULL );
    
   xTaskCreate( (pdTASK_CODE) vTaskSonar, (signed char *) "T1", configMINIMAL_STACK_SIZE+1000,
     1e8:	89 e3       	ldi	r24, 0x39	; 57
     1ea:	9e e1       	ldi	r25, 0x1E	; 30
     1ec:	23 e0       	ldi	r18, 0x03	; 3
     1ee:	32 e0       	ldi	r19, 0x02	; 2
     1f0:	e9 81       	ldd	r30, Y+1	; 0x01
     1f2:	fa 81       	ldd	r31, Y+2	; 0x02
     1f4:	b9 01       	movw	r22, r18
     1f6:	4d e3       	ldi	r20, 0x3D	; 61
     1f8:	54 e0       	ldi	r21, 0x04	; 4
     1fa:	9f 01       	movw	r18, r30
     1fc:	01 e0       	ldi	r16, 0x01	; 1
     1fe:	ee 24       	eor	r14, r14
     200:	ff 24       	eor	r15, r15
     202:	cc 24       	eor	r12, r12
     204:	dd 24       	eor	r13, r13
     206:	aa 24       	eor	r10, r10
     208:	bb 24       	eor	r11, r11
     20a:	0e 94 4a 02 	call	0x494	; 0x494 <xTaskGenericCreate>
                (void *) val1, 1, NULL );

   xTaskCreate( (pdTASK_CODE) vTaskUSARTWrite, (signed char *) "T2", configMINIMAL_STACK_SIZE+1000,
     20e:	89 e0       	ldi	r24, 0x09	; 9
     210:	99 e1       	ldi	r25, 0x19	; 25
     212:	26 e0       	ldi	r18, 0x06	; 6
     214:	32 e0       	ldi	r19, 0x02	; 2
     216:	e9 81       	ldd	r30, Y+1	; 0x01
     218:	fa 81       	ldd	r31, Y+2	; 0x02
     21a:	b9 01       	movw	r22, r18
     21c:	4d e3       	ldi	r20, 0x3D	; 61
     21e:	54 e0       	ldi	r21, 0x04	; 4
     220:	9f 01       	movw	r18, r30
     222:	01 e0       	ldi	r16, 0x01	; 1
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	cc 24       	eor	r12, r12
     22a:	dd 24       	eor	r13, r13
     22c:	aa 24       	eor	r10, r10
     22e:	bb 24       	eor	r11, r11
     230:	0e 94 4a 02 	call	0x494	; 0x494 <xTaskGenericCreate>
   				(void *) val1, 1, NULL);

   xTaskCreate( (pdTASK_CODE) vTaskUSARTRead, (signed char *) "T3", configMINIMAL_STACK_SIZE+1000,
     234:	81 ea       	ldi	r24, 0xA1	; 161
     236:	99 e1       	ldi	r25, 0x19	; 25
     238:	29 e0       	ldi	r18, 0x09	; 9
     23a:	32 e0       	ldi	r19, 0x02	; 2
     23c:	e9 81       	ldd	r30, Y+1	; 0x01
     23e:	fa 81       	ldd	r31, Y+2	; 0x02
     240:	b9 01       	movw	r22, r18
     242:	4d e3       	ldi	r20, 0x3D	; 61
     244:	54 e0       	ldi	r21, 0x04	; 4
     246:	9f 01       	movw	r18, r30
     248:	01 e0       	ldi	r16, 0x01	; 1
     24a:	ee 24       	eor	r14, r14
     24c:	ff 24       	eor	r15, r15
     24e:	cc 24       	eor	r12, r12
     250:	dd 24       	eor	r13, r13
     252:	aa 24       	eor	r10, r10
     254:	bb 24       	eor	r11, r11
     256:	0e 94 4a 02 	call	0x494	; 0x494 <xTaskGenericCreate>

//   xTaskCreate( (pdTASK_CODE) vTaskUSARTLog, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
//   				(void *) val1, 1, NULL);
    
    //- kick off the scheduler
	vTaskStartScheduler();
     25a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vTaskStartScheduler>
    
	return 0;
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
}
     262:	26 96       	adiw	r28, 0x06	; 6
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	cf 91       	pop	r28
     270:	df 91       	pop	r29
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	08 95       	ret

00000282 <printHex>:
/*-----------------------------------------------------------*/

void printHex(int i){
     282:	df 93       	push	r29
     284:	cf 93       	push	r28
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	67 97       	sbiw	r28, 0x17	; 23
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	de bf       	out	0x3e, r29	; 62
     292:	0f be       	out	0x3f, r0	; 63
     294:	cd bf       	out	0x3d, r28	; 61
     296:	9a 8b       	std	Y+18, r25	; 0x12
     298:	89 8b       	std	Y+17, r24	; 0x11
	char hex[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
     29a:	ce 01       	movw	r24, r28
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	9c 8b       	std	Y+20, r25	; 0x14
     2a0:	8b 8b       	std	Y+19, r24	; 0x13
     2a2:	ec e0       	ldi	r30, 0x0C	; 12
     2a4:	f2 e0       	ldi	r31, 0x02	; 2
     2a6:	fe 8b       	std	Y+22, r31	; 0x16
     2a8:	ed 8b       	std	Y+21, r30	; 0x15
     2aa:	f0 e1       	ldi	r31, 0x10	; 16
     2ac:	ff 8b       	std	Y+23, r31	; 0x17
     2ae:	ed 89       	ldd	r30, Y+21	; 0x15
     2b0:	fe 89       	ldd	r31, Y+22	; 0x16
     2b2:	00 80       	ld	r0, Z
     2b4:	8d 89       	ldd	r24, Y+21	; 0x15
     2b6:	9e 89       	ldd	r25, Y+22	; 0x16
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	9e 8b       	std	Y+22, r25	; 0x16
     2bc:	8d 8b       	std	Y+21, r24	; 0x15
     2be:	eb 89       	ldd	r30, Y+19	; 0x13
     2c0:	fc 89       	ldd	r31, Y+20	; 0x14
     2c2:	00 82       	st	Z, r0
     2c4:	8b 89       	ldd	r24, Y+19	; 0x13
     2c6:	9c 89       	ldd	r25, Y+20	; 0x14
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	9c 8b       	std	Y+20, r25	; 0x14
     2cc:	8b 8b       	std	Y+19, r24	; 0x13
     2ce:	9f 89       	ldd	r25, Y+23	; 0x17
     2d0:	91 50       	subi	r25, 0x01	; 1
     2d2:	9f 8b       	std	Y+23, r25	; 0x17
     2d4:	ef 89       	ldd	r30, Y+23	; 0x17
     2d6:	ee 23       	and	r30, r30
     2d8:	51 f7       	brne	.-44     	; 0x2ae <printHex+0x2c>

	USART_Write(hex[(i&0xF000) >> 12]);
     2da:	89 89       	ldd	r24, Y+17	; 0x11
     2dc:	9a 89       	ldd	r25, Y+18	; 0x12
     2de:	9c 01       	movw	r18, r24
     2e0:	23 2f       	mov	r18, r19
     2e2:	33 27       	eor	r19, r19
     2e4:	22 95       	swap	r18
     2e6:	2f 70       	andi	r18, 0x0F	; 15
     2e8:	ce 01       	movw	r24, r28
     2ea:	01 96       	adiw	r24, 0x01	; 1
     2ec:	fc 01       	movw	r30, r24
     2ee:	e2 0f       	add	r30, r18
     2f0:	f3 1f       	adc	r31, r19
     2f2:	80 81       	ld	r24, Z
     2f4:	0e 94 68 18 	call	0x30d0	; 0x30d0 <USART_Write>
	USART_Write(hex[(i&0xF00) >> 8]);
     2f8:	89 89       	ldd	r24, Y+17	; 0x11
     2fa:	9a 89       	ldd	r25, Y+18	; 0x12
     2fc:	80 70       	andi	r24, 0x00	; 0
     2fe:	9f 70       	andi	r25, 0x0F	; 15
     300:	29 2f       	mov	r18, r25
     302:	33 27       	eor	r19, r19
     304:	27 fd       	sbrc	r18, 7
     306:	3a 95       	dec	r19
     308:	ce 01       	movw	r24, r28
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	fc 01       	movw	r30, r24
     30e:	e2 0f       	add	r30, r18
     310:	f3 1f       	adc	r31, r19
     312:	80 81       	ld	r24, Z
     314:	0e 94 68 18 	call	0x30d0	; 0x30d0 <USART_Write>
	USART_Write(hex[(i&0xF0) >> 4]);
     318:	89 89       	ldd	r24, Y+17	; 0x11
     31a:	9a 89       	ldd	r25, Y+18	; 0x12
     31c:	80 7f       	andi	r24, 0xF0	; 240
     31e:	90 70       	andi	r25, 0x00	; 0
     320:	9c 01       	movw	r18, r24
     322:	35 95       	asr	r19
     324:	27 95       	ror	r18
     326:	35 95       	asr	r19
     328:	27 95       	ror	r18
     32a:	35 95       	asr	r19
     32c:	27 95       	ror	r18
     32e:	35 95       	asr	r19
     330:	27 95       	ror	r18
     332:	ce 01       	movw	r24, r28
     334:	01 96       	adiw	r24, 0x01	; 1
     336:	fc 01       	movw	r30, r24
     338:	e2 0f       	add	r30, r18
     33a:	f3 1f       	adc	r31, r19
     33c:	80 81       	ld	r24, Z
     33e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <USART_Write>
	USART_Write(hex[i&0xF]);
     342:	89 89       	ldd	r24, Y+17	; 0x11
     344:	9a 89       	ldd	r25, Y+18	; 0x12
     346:	9c 01       	movw	r18, r24
     348:	2f 70       	andi	r18, 0x0F	; 15
     34a:	30 70       	andi	r19, 0x00	; 0
     34c:	ce 01       	movw	r24, r28
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	fc 01       	movw	r30, r24
     352:	e2 0f       	add	r30, r18
     354:	f3 1f       	adc	r31, r19
     356:	80 81       	ld	r24, Z
     358:	0e 94 68 18 	call	0x30d0	; 0x30d0 <USART_Write>

}
     35c:	67 96       	adiw	r28, 0x17	; 23
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	cf 91       	pop	r28
     36a:	df 91       	pop	r29
     36c:	08 95       	ret

0000036e <printNum>:

void printNum(unsigned char i){
     36e:	df 93       	push	r29
     370:	cf 93       	push	r28
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	2d 97       	sbiw	r28, 0x0d	; 13
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
     382:	8d 87       	std	Y+13, r24	; 0x0d
    
    char str[10];
    memset(str,0,10);
     384:	ce 01       	movw	r24, r28
     386:	03 96       	adiw	r24, 0x03	; 3
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	4a e0       	ldi	r20, 0x0A	; 10
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <memset>
    itoa(i,str,10);
     394:	8d 85       	ldd	r24, Y+13	; 0x0d
     396:	88 2f       	mov	r24, r24
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	9e 01       	movw	r18, r28
     39c:	2d 5f       	subi	r18, 0xFD	; 253
     39e:	3f 4f       	sbci	r19, 0xFF	; 255
     3a0:	b9 01       	movw	r22, r18
     3a2:	4a e0       	ldi	r20, 0x0A	; 10
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <itoa>
    char * irr = str;
     3aa:	ce 01       	movw	r24, r28
     3ac:	03 96       	adiw	r24, 0x03	; 3
     3ae:	9a 83       	std	Y+2, r25	; 0x02
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	0a c0       	rjmp	.+20     	; 0x3c8 <printNum+0x5a>
    while(*irr){
        USART_AddToQueue((unsigned char )*irr);
     3b4:	e9 81       	ldd	r30, Y+1	; 0x01
     3b6:	fa 81       	ldd	r31, Y+2	; 0x02
     3b8:	80 81       	ld	r24, Z
     3ba:	0e 94 d5 18 	call	0x31aa	; 0x31aa <USART_AddToQueue>
        irr++;
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	9a 81       	ldd	r25, Y+2	; 0x02
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	9a 83       	std	Y+2, r25	; 0x02
     3c6:	89 83       	std	Y+1, r24	; 0x01
    
    char str[10];
    memset(str,0,10);
    itoa(i,str,10);
    char * irr = str;
    while(*irr){
     3c8:	e9 81       	ldd	r30, Y+1	; 0x01
     3ca:	fa 81       	ldd	r31, Y+2	; 0x02
     3cc:	80 81       	ld	r24, Z
     3ce:	88 23       	and	r24, r24
     3d0:	89 f7       	brne	.-30     	; 0x3b4 <printNum+0x46>
        USART_AddToQueue((unsigned char )*irr);
        irr++;
    }
    
}
     3d2:	2d 96       	adiw	r28, 0x0d	; 13
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	cd bf       	out	0x3d, r28	; 61
     3de:	cf 91       	pop	r28
     3e0:	df 91       	pop	r29
     3e2:	08 95       	ret

000003e4 <__vector_50>:

ISR(TIMER5_OVF_vect){
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	00 90 5b 00 	lds	r0, 0x005B
     3f0:	0f 92       	push	r0
     3f2:	11 24       	eor	r1, r1
     3f4:	8f 93       	push	r24
     3f6:	af 93       	push	r26
     3f8:	bf 93       	push	r27
     3fa:	ef 93       	push	r30
     3fc:	ff 93       	push	r31
     3fe:	df 93       	push	r29
     400:	cf 93       	push	r28
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62

	PORTB ^= 0xFF;
     406:	a5 e2       	ldi	r26, 0x25	; 37
     408:	b0 e0       	ldi	r27, 0x00	; 0
     40a:	e5 e2       	ldi	r30, 0x25	; 37
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	80 81       	ld	r24, Z
     410:	80 95       	com	r24
     412:	8c 93       	st	X, r24
	TCNT3L = 0;
     414:	e4 e9       	ldi	r30, 0x94	; 148
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	10 82       	st	Z, r1
	TCNT3H = 0;
     41a:	e5 e9       	ldi	r30, 0x95	; 149
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	10 82       	st	Z, r1

}
     420:	cf 91       	pop	r28
     422:	df 91       	pop	r29
     424:	ff 91       	pop	r31
     426:	ef 91       	pop	r30
     428:	bf 91       	pop	r27
     42a:	af 91       	pop	r26
     42c:	8f 91       	pop	r24
     42e:	0f 90       	pop	r0
     430:	00 92 5b 00 	sts	0x005B, r0
     434:	0f 90       	pop	r0
     436:	0f be       	out	0x3f, r0	; 63
     438:	0f 90       	pop	r0
     43a:	1f 90       	pop	r1
     43c:	18 95       	reti

0000043e <getTimerCount2>:

unsigned int getTimerCount2(){
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62

	//volatile char timerLow = TCNT3L;

	return TCNT0;
     446:	e6 e4       	ldi	r30, 0x46	; 70
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	88 2f       	mov	r24, r24
     44e:	90 e0       	ldi	r25, 0x00	; 0

}
     450:	cf 91       	pop	r28
     452:	df 91       	pop	r29
     454:	08 95       	ret

00000456 <vTaskFunction_1>:

void vTaskFunction_1(void *pvParameters)
{	
     456:	df 93       	push	r29
     458:	cf 93       	push	r28
     45a:	0f 92       	push	r0
     45c:	0f 92       	push	r0
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	9a 83       	std	Y+2, r25	; 0x02
     464:	89 83       	std	Y+1, r24	; 0x01
    USART_Init(9600, 16000000);
     466:	80 e8       	ldi	r24, 0x80	; 128
     468:	95 e2       	ldi	r25, 0x25	; 37
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	54 e2       	ldi	r21, 0x24	; 36
     46e:	64 ef       	ldi	r22, 0xF4	; 244
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	0e 94 2b 18 	call	0x3056	; 0x3056 <USART_Init>
     476:	ff cf       	rjmp	.-2      	; 0x476 <vTaskFunction_1+0x20>

00000478 <vIO_init>:
        // UDR0;
    }
}

void vIO_init(void)
{
     478:	df 93       	push	r29
     47a:	cf 93       	push	r28
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
    //- set PortB as output
	DDRB = 0xFF; 
     480:	e4 e2       	ldi	r30, 0x24	; 36
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	80 83       	st	Z, r24
    PORTB = 0; 
     488:	e5 e2       	ldi	r30, 0x25	; 37
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	10 82       	st	Z, r1
}
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	08 95       	ret

00000494 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
     494:	af 92       	push	r10
     496:	bf 92       	push	r11
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	df 93       	push	r29
     4a6:	cf 93       	push	r28
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	64 97       	sbiw	r28, 0x14	; 20
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	9f 83       	std	Y+7, r25	; 0x07
     4ba:	8e 83       	std	Y+6, r24	; 0x06
     4bc:	79 87       	std	Y+9, r23	; 0x09
     4be:	68 87       	std	Y+8, r22	; 0x08
     4c0:	5b 87       	std	Y+11, r21	; 0x0b
     4c2:	4a 87       	std	Y+10, r20	; 0x0a
     4c4:	3d 87       	std	Y+13, r19	; 0x0d
     4c6:	2c 87       	std	Y+12, r18	; 0x0c
     4c8:	0e 87       	std	Y+14, r16	; 0x0e
     4ca:	f8 8a       	std	Y+16, r15	; 0x10
     4cc:	ef 86       	std	Y+15, r14	; 0x0f
     4ce:	da 8a       	std	Y+18, r13	; 0x12
     4d0:	c9 8a       	std	Y+17, r12	; 0x11
     4d2:	bc 8a       	std	Y+20, r11	; 0x14
     4d4:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
     4d6:	8a 85       	ldd	r24, Y+10	; 0x0a
     4d8:	9b 85       	ldd	r25, Y+11	; 0x0b
     4da:	29 89       	ldd	r18, Y+17	; 0x11
     4dc:	3a 89       	ldd	r19, Y+18	; 0x12
     4de:	b9 01       	movw	r22, r18
     4e0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <prvAllocateTCBAndStack>
     4e4:	9c 83       	std	Y+4, r25	; 0x04
     4e6:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
     4e8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ea:	9c 81       	ldd	r25, Y+4	; 0x04
     4ec:	00 97       	sbiw	r24, 0x00	; 0
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <xTaskGenericCreate+0x5e>
     4f0:	99 c0       	rjmp	.+306    	; 0x624 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
     4f2:	eb 81       	ldd	r30, Y+3	; 0x03
     4f4:	fc 81       	ldd	r31, Y+4	; 0x04
     4f6:	27 89       	ldd	r18, Z+23	; 0x17
     4f8:	30 8d       	ldd	r19, Z+24	; 0x18
     4fa:	8a 85       	ldd	r24, Y+10	; 0x0a
     4fc:	9b 85       	ldd	r25, Y+11	; 0x0b
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	82 0f       	add	r24, r18
     502:	93 1f       	adc	r25, r19
     504:	9a 83       	std	Y+2, r25	; 0x02
     506:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
     508:	8b 81       	ldd	r24, Y+3	; 0x03
     50a:	9c 81       	ldd	r25, Y+4	; 0x04
     50c:	28 85       	ldd	r18, Y+8	; 0x08
     50e:	39 85       	ldd	r19, Y+9	; 0x09
     510:	eb 89       	ldd	r30, Y+19	; 0x13
     512:	fc 89       	ldd	r31, Y+20	; 0x14
     514:	aa 85       	ldd	r26, Y+10	; 0x0a
     516:	bb 85       	ldd	r27, Y+11	; 0x0b
     518:	b9 01       	movw	r22, r18
     51a:	4e 85       	ldd	r20, Y+14	; 0x0e
     51c:	9f 01       	movw	r18, r30
     51e:	8d 01       	movw	r16, r26
     520:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	9a 81       	ldd	r25, Y+2	; 0x02
     528:	2e 81       	ldd	r18, Y+6	; 0x06
     52a:	3f 81       	ldd	r19, Y+7	; 0x07
     52c:	4c 85       	ldd	r20, Y+12	; 0x0c
     52e:	5d 85       	ldd	r21, Y+13	; 0x0d
     530:	b9 01       	movw	r22, r18
     532:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <pxPortInitialiseStack>
     536:	eb 81       	ldd	r30, Y+3	; 0x03
     538:	fc 81       	ldd	r31, Y+4	; 0x04
     53a:	91 83       	std	Z+1, r25	; 0x01
     53c:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
     53e:	8f 85       	ldd	r24, Y+15	; 0x0f
     540:	98 89       	ldd	r25, Y+16	; 0x10
     542:	00 97       	sbiw	r24, 0x00	; 0
     544:	31 f0       	breq	.+12     	; 0x552 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
     546:	ef 85       	ldd	r30, Y+15	; 0x0f
     548:	f8 89       	ldd	r31, Y+16	; 0x10
     54a:	8b 81       	ldd	r24, Y+3	; 0x03
     54c:	9c 81       	ldd	r25, Y+4	; 0x04
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	80 83       	st	Z, r24
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
     558:	80 91 28 02 	lds	r24, 0x0228
     55c:	8f 5f       	subi	r24, 0xFF	; 255
     55e:	80 93 28 02 	sts	0x0228, r24
			if( pxCurrentTCB == NULL )
     562:	80 91 26 02 	lds	r24, 0x0226
     566:	90 91 27 02 	lds	r25, 0x0227
     56a:	00 97       	sbiw	r24, 0x00	; 0
     56c:	69 f4       	brne	.+26     	; 0x588 <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	90 93 27 02 	sts	0x0227, r25
     576:	80 93 26 02 	sts	0x0226, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
     57a:	80 91 28 02 	lds	r24, 0x0228
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	a9 f4       	brne	.+42     	; 0x5ac <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
     582:	0e 94 4b 09 	call	0x1296	; 0x1296 <prvInitialiseTaskLists>
     586:	12 c0       	rjmp	.+36     	; 0x5ac <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
     588:	80 91 2d 02 	lds	r24, 0x022D
     58c:	88 23       	and	r24, r24
     58e:	71 f4       	brne	.+28     	; 0x5ac <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
     590:	e0 91 26 02 	lds	r30, 0x0226
     594:	f0 91 27 02 	lds	r31, 0x0227
     598:	96 89       	ldd	r25, Z+22	; 0x16
     59a:	8e 85       	ldd	r24, Y+14	; 0x0e
     59c:	89 17       	cp	r24, r25
     59e:	30 f0       	brcs	.+12     	; 0x5ac <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	9c 81       	ldd	r25, Y+4	; 0x04
     5a4:	90 93 27 02 	sts	0x0227, r25
     5a8:	80 93 26 02 	sts	0x0226, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
     5ac:	eb 81       	ldd	r30, Y+3	; 0x03
     5ae:	fc 81       	ldd	r31, Y+4	; 0x04
     5b0:	96 89       	ldd	r25, Z+22	; 0x16
     5b2:	80 91 2b 02 	lds	r24, 0x022B
     5b6:	89 17       	cp	r24, r25
     5b8:	28 f4       	brcc	.+10     	; 0x5c4 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
     5ba:	eb 81       	ldd	r30, Y+3	; 0x03
     5bc:	fc 81       	ldd	r31, Y+4	; 0x04
     5be:	86 89       	ldd	r24, Z+22	; 0x16
     5c0:	80 93 2b 02 	sts	0x022B, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
     5c4:	80 91 32 02 	lds	r24, 0x0232
     5c8:	8f 5f       	subi	r24, 0xFF	; 255
     5ca:	80 93 32 02 	sts	0x0232, r24

			prvAddTaskToReadyQueue( pxNewTCB );
     5ce:	eb 81       	ldd	r30, Y+3	; 0x03
     5d0:	fc 81       	ldd	r31, Y+4	; 0x04
     5d2:	96 89       	ldd	r25, Z+22	; 0x16
     5d4:	80 91 2c 02 	lds	r24, 0x022C
     5d8:	89 17       	cp	r24, r25
     5da:	28 f4       	brcc	.+10     	; 0x5e6 <xTaskGenericCreate+0x152>
     5dc:	eb 81       	ldd	r30, Y+3	; 0x03
     5de:	fc 81       	ldd	r31, Y+4	; 0x04
     5e0:	86 89       	ldd	r24, Z+22	; 0x16
     5e2:	80 93 2c 02 	sts	0x022C, r24
     5e6:	eb 81       	ldd	r30, Y+3	; 0x03
     5e8:	fc 81       	ldd	r31, Y+4	; 0x04
     5ea:	86 89       	ldd	r24, Z+22	; 0x16
     5ec:	28 2f       	mov	r18, r24
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	c9 01       	movw	r24, r18
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	82 0f       	add	r24, r18
     600:	93 1f       	adc	r25, r19
     602:	ac 01       	movw	r20, r24
     604:	4d 5c       	subi	r20, 0xCD	; 205
     606:	5d 4f       	sbci	r21, 0xFD	; 253
     608:	8b 81       	ldd	r24, Y+3	; 0x03
     60a:	9c 81       	ldd	r25, Y+4	; 0x04
     60c:	9c 01       	movw	r18, r24
     60e:	2e 5f       	subi	r18, 0xFE	; 254
     610:	3f 4f       	sbci	r19, 0xFF	; 255
     612:	ca 01       	movw	r24, r20
     614:	b9 01       	movw	r22, r18
     616:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>

			xReturn = pdPASS;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	8d 83       	std	Y+5, r24	; 0x05
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	02 c0       	rjmp	.+4      	; 0x628 <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
     628:	8d 81       	ldd	r24, Y+5	; 0x05
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	71 f4       	brne	.+28     	; 0x64a <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
     62e:	80 91 2d 02 	lds	r24, 0x022D
     632:	88 23       	and	r24, r24
     634:	51 f0       	breq	.+20     	; 0x64a <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
     636:	e0 91 26 02 	lds	r30, 0x0226
     63a:	f0 91 27 02 	lds	r31, 0x0227
     63e:	96 89       	ldd	r25, Z+22	; 0x16
     640:	8e 85       	ldd	r24, Y+14	; 0x0e
     642:	98 17       	cp	r25, r24
     644:	10 f4       	brcc	.+4      	; 0x64a <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
     646:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
			}
		}
	}

	return xReturn;
     64a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     64c:	64 96       	adiw	r28, 0x14	; 20
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	df 90       	pop	r13
     666:	cf 90       	pop	r12
     668:	bf 90       	pop	r11
     66a:	af 90       	pop	r10
     66c:	08 95       	ret

0000066e <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
     66e:	df 93       	push	r29
     670:	cf 93       	push	r28
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	28 97       	sbiw	r28, 0x08	; 8
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	9e 83       	std	Y+6, r25	; 0x06
     684:	8d 83       	std	Y+5, r24	; 0x05
     686:	78 87       	std	Y+8, r23	; 0x08
     688:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
     68a:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
     68c:	0e 94 82 05 	call	0xb04	; 0xb04 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
     690:	ed 81       	ldd	r30, Y+5	; 0x05
     692:	fe 81       	ldd	r31, Y+6	; 0x06
     694:	20 81       	ld	r18, Z
     696:	31 81       	ldd	r19, Z+1	; 0x01
     698:	8f 81       	ldd	r24, Y+7	; 0x07
     69a:	98 85       	ldd	r25, Y+8	; 0x08
     69c:	82 0f       	add	r24, r18
     69e:	93 1f       	adc	r25, r19
     6a0:	9c 83       	std	Y+4, r25	; 0x04
     6a2:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
     6a4:	ed 81       	ldd	r30, Y+5	; 0x05
     6a6:	fe 81       	ldd	r31, Y+6	; 0x06
     6a8:	20 81       	ld	r18, Z
     6aa:	31 81       	ldd	r19, Z+1	; 0x01
     6ac:	80 91 29 02 	lds	r24, 0x0229
     6b0:	90 91 2a 02 	lds	r25, 0x022A
     6b4:	82 17       	cp	r24, r18
     6b6:	93 07       	cpc	r25, r19
     6b8:	a8 f4       	brcc	.+42     	; 0x6e4 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
     6ba:	ed 81       	ldd	r30, Y+5	; 0x05
     6bc:	fe 81       	ldd	r31, Y+6	; 0x06
     6be:	20 81       	ld	r18, Z
     6c0:	31 81       	ldd	r19, Z+1	; 0x01
     6c2:	8b 81       	ldd	r24, Y+3	; 0x03
     6c4:	9c 81       	ldd	r25, Y+4	; 0x04
     6c6:	82 17       	cp	r24, r18
     6c8:	93 07       	cpc	r25, r19
     6ca:	00 f5       	brcc	.+64     	; 0x70c <vTaskDelayUntil+0x9e>
     6cc:	20 91 29 02 	lds	r18, 0x0229
     6d0:	30 91 2a 02 	lds	r19, 0x022A
     6d4:	8b 81       	ldd	r24, Y+3	; 0x03
     6d6:	9c 81       	ldd	r25, Y+4	; 0x04
     6d8:	28 17       	cp	r18, r24
     6da:	39 07       	cpc	r19, r25
     6dc:	b8 f4       	brcc	.+46     	; 0x70c <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	89 83       	std	Y+1, r24	; 0x01
     6e2:	14 c0       	rjmp	.+40     	; 0x70c <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
     6e4:	ed 81       	ldd	r30, Y+5	; 0x05
     6e6:	fe 81       	ldd	r31, Y+6	; 0x06
     6e8:	20 81       	ld	r18, Z
     6ea:	31 81       	ldd	r19, Z+1	; 0x01
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	9c 81       	ldd	r25, Y+4	; 0x04
     6f0:	82 17       	cp	r24, r18
     6f2:	93 07       	cpc	r25, r19
     6f4:	48 f0       	brcs	.+18     	; 0x708 <vTaskDelayUntil+0x9a>
     6f6:	20 91 29 02 	lds	r18, 0x0229
     6fa:	30 91 2a 02 	lds	r19, 0x022A
     6fe:	8b 81       	ldd	r24, Y+3	; 0x03
     700:	9c 81       	ldd	r25, Y+4	; 0x04
     702:	28 17       	cp	r18, r24
     704:	39 07       	cpc	r19, r25
     706:	10 f4       	brcc	.+4      	; 0x70c <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
     70c:	ed 81       	ldd	r30, Y+5	; 0x05
     70e:	fe 81       	ldd	r31, Y+6	; 0x06
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	9c 81       	ldd	r25, Y+4	; 0x04
     714:	91 83       	std	Z+1, r25	; 0x01
     716:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	88 23       	and	r24, r24
     71c:	59 f0       	breq	.+22     	; 0x734 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     71e:	80 91 26 02 	lds	r24, 0x0226
     722:	90 91 27 02 	lds	r25, 0x0227
     726:	02 96       	adiw	r24, 0x02	; 2
     728:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	9c 81       	ldd	r25, Y+4	; 0x04
     730:	0e 94 8f 09 	call	0x131e	; 0x131e <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
     734:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
     738:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     73a:	8a 81       	ldd	r24, Y+2	; 0x02
     73c:	88 23       	and	r24, r24
     73e:	11 f4       	brne	.+4      	; 0x744 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
     740:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
		}
	}
     744:	28 96       	adiw	r28, 0x08	; 8
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	08 95       	ret

00000756 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     756:	df 93       	push	r29
     758:	cf 93       	push	r28
     75a:	00 d0       	rcall	.+0      	; 0x75c <vTaskDelay+0x6>
     75c:	0f 92       	push	r0
     75e:	0f 92       	push	r0
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	9d 83       	std	Y+5, r25	; 0x05
     766:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     768:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     76a:	8c 81       	ldd	r24, Y+4	; 0x04
     76c:	9d 81       	ldd	r25, Y+5	; 0x05
     76e:	00 97       	sbiw	r24, 0x00	; 0
     770:	d1 f0       	breq	.+52     	; 0x7a6 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
     772:	0e 94 82 05 	call	0xb04	; 0xb04 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     776:	20 91 29 02 	lds	r18, 0x0229
     77a:	30 91 2a 02 	lds	r19, 0x022A
     77e:	8c 81       	ldd	r24, Y+4	; 0x04
     780:	9d 81       	ldd	r25, Y+5	; 0x05
     782:	82 0f       	add	r24, r18
     784:	93 1f       	adc	r25, r19
     786:	9b 83       	std	Y+3, r25	; 0x03
     788:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     78a:	80 91 26 02 	lds	r24, 0x0226
     78e:	90 91 27 02 	lds	r25, 0x0227
     792:	02 96       	adiw	r24, 0x02	; 2
     794:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     798:	8a 81       	ldd	r24, Y+2	; 0x02
     79a:	9b 81       	ldd	r25, Y+3	; 0x03
     79c:	0e 94 8f 09 	call	0x131e	; 0x131e <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     7a0:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
     7a4:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	88 23       	and	r24, r24
     7aa:	11 f4       	brne	.+4      	; 0x7b0 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
     7ac:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
		}
	}
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	cf 91       	pop	r28
     7bc:	df 91       	pop	r29
     7be:	08 95       	ret

000007c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
     7c0:	df 93       	push	r29
     7c2:	cf 93       	push	r28
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <vTaskSuspend+0x6>
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <vTaskSuspend+0x8>
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	9c 83       	std	Y+4, r25	; 0x04
     7ce:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
     7d6:	20 91 26 02 	lds	r18, 0x0226
     7da:	30 91 27 02 	lds	r19, 0x0227
     7de:	8b 81       	ldd	r24, Y+3	; 0x03
     7e0:	9c 81       	ldd	r25, Y+4	; 0x04
     7e2:	82 17       	cp	r24, r18
     7e4:	93 07       	cpc	r25, r19
     7e6:	11 f4       	brne	.+4      	; 0x7ec <vTaskSuspend+0x2c>
			{
				pxTaskToSuspend = NULL;
     7e8:	1c 82       	std	Y+4, r1	; 0x04
     7ea:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	9c 81       	ldd	r25, Y+4	; 0x04
     7f0:	00 97       	sbiw	r24, 0x00	; 0
     7f2:	39 f4       	brne	.+14     	; 0x802 <vTaskSuspend+0x42>
     7f4:	80 91 26 02 	lds	r24, 0x0226
     7f8:	90 91 27 02 	lds	r25, 0x0227
     7fc:	9e 83       	std	Y+6, r25	; 0x06
     7fe:	8d 83       	std	Y+5, r24	; 0x05
     800:	04 c0       	rjmp	.+8      	; 0x80a <vTaskSuspend+0x4a>
     802:	8b 81       	ldd	r24, Y+3	; 0x03
     804:	9c 81       	ldd	r25, Y+4	; 0x04
     806:	9e 83       	std	Y+6, r25	; 0x06
     808:	8d 83       	std	Y+5, r24	; 0x05
     80a:	8d 81       	ldd	r24, Y+5	; 0x05
     80c:	9e 81       	ldd	r25, Y+6	; 0x06
     80e:	9a 83       	std	Y+2, r25	; 0x02
     810:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	02 96       	adiw	r24, 0x02	; 2
     818:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
     81c:	e9 81       	ldd	r30, Y+1	; 0x01
     81e:	fa 81       	ldd	r31, Y+2	; 0x02
     820:	84 89       	ldd	r24, Z+20	; 0x14
     822:	95 89       	ldd	r25, Z+21	; 0x15
     824:	00 97       	sbiw	r24, 0x00	; 0
     826:	29 f0       	breq	.+10     	; 0x832 <vTaskSuspend+0x72>
			{
				uxListRemove( &( pxTCB->xEventListItem ) );
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	0c 96       	adiw	r24, 0x0c	; 12
     82e:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	9a 81       	ldd	r25, Y+2	; 0x02
     836:	9c 01       	movw	r18, r24
     838:	2e 5f       	subi	r18, 0xFE	; 254
     83a:	3f 4f       	sbci	r19, 0xFF	; 255
     83c:	86 e7       	ldi	r24, 0x76	; 118
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	b9 01       	movw	r22, r18
     842:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
     84a:	8b 81       	ldd	r24, Y+3	; 0x03
     84c:	9c 81       	ldd	r25, Y+4	; 0x04
     84e:	00 97       	sbiw	r24, 0x00	; 0
     850:	a1 f4       	brne	.+40     	; 0x87a <vTaskSuspend+0xba>
		{
			if( xSchedulerRunning != pdFALSE )
     852:	80 91 2d 02 	lds	r24, 0x022D
     856:	88 23       	and	r24, r24
     858:	19 f0       	breq	.+6      	; 0x860 <vTaskSuspend+0xa0>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
     85a:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
     85e:	0d c0       	rjmp	.+26     	; 0x87a <vTaskSuspend+0xba>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
     860:	90 91 76 02 	lds	r25, 0x0276
     864:	80 91 28 02 	lds	r24, 0x0228
     868:	98 17       	cp	r25, r24
     86a:	29 f4       	brne	.+10     	; 0x876 <vTaskSuspend+0xb6>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
     86c:	10 92 27 02 	sts	0x0227, r1
     870:	10 92 26 02 	sts	0x0226, r1
     874:	02 c0       	rjmp	.+4      	; 0x87a <vTaskSuspend+0xba>
				}
				else
				{
					vTaskSwitchContext();
     876:	0e 94 21 07 	call	0xe42	; 0xe42 <vTaskSwitchContext>
				}
			}
		}
	}
     87a:	26 96       	adiw	r28, 0x06	; 6
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	cf 91       	pop	r28
     888:	df 91       	pop	r29
     88a:	08 95       	ret

0000088c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
     88c:	df 93       	push	r29
     88e:	cf 93       	push	r28
     890:	00 d0       	rcall	.+0      	; 0x892 <xTaskIsTaskSuspended+0x6>
     892:	0f 92       	push	r0
     894:	0f 92       	push	r0
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	9d 83       	std	Y+5, r25	; 0x05
     89c:	8c 83       	std	Y+4, r24	; 0x04
	portBASE_TYPE xReturn = pdFALSE;
     89e:	1b 82       	std	Y+3, r1	; 0x03
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
     8a0:	8c 81       	ldd	r24, Y+4	; 0x04
     8a2:	9d 81       	ldd	r25, Y+5	; 0x05
     8a4:	9a 83       	std	Y+2, r25	; 0x02
     8a6:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
     8a8:	e9 81       	ldd	r30, Y+1	; 0x01
     8aa:	fa 81       	ldd	r31, Y+2	; 0x02
     8ac:	82 85       	ldd	r24, Z+10	; 0x0a
     8ae:	93 85       	ldd	r25, Z+11	; 0x0b
     8b0:	22 e0       	ldi	r18, 0x02	; 2
     8b2:	86 37       	cpi	r24, 0x76	; 118
     8b4:	92 07       	cpc	r25, r18
     8b6:	81 f4       	brne	.+32     	; 0x8d8 <xTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
     8b8:	e9 81       	ldd	r30, Y+1	; 0x01
     8ba:	fa 81       	ldd	r31, Y+2	; 0x02
     8bc:	84 89       	ldd	r24, Z+20	; 0x14
     8be:	95 89       	ldd	r25, Z+21	; 0x15
     8c0:	22 e0       	ldi	r18, 0x02	; 2
     8c2:	8d 36       	cpi	r24, 0x6D	; 109
     8c4:	92 07       	cpc	r25, r18
     8c6:	41 f0       	breq	.+16     	; 0x8d8 <xTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
     8c8:	e9 81       	ldd	r30, Y+1	; 0x01
     8ca:	fa 81       	ldd	r31, Y+2	; 0x02
     8cc:	84 89       	ldd	r24, Z+20	; 0x14
     8ce:	95 89       	ldd	r25, Z+21	; 0x15
     8d0:	00 97       	sbiw	r24, 0x00	; 0
     8d2:	11 f4       	brne	.+4      	; 0x8d8 <xTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}

		return xReturn;
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
	}
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	cf 91       	pop	r28
     8e6:	df 91       	pop	r29
     8e8:	08 95       	ret

000008ea <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
     8ea:	df 93       	push	r29
     8ec:	cf 93       	push	r28
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <vTaskResume+0x6>
     8f0:	0f 92       	push	r0
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	8b 83       	std	Y+3, r24	; 0x03
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
     8fa:	8b 81       	ldd	r24, Y+3	; 0x03
     8fc:	9c 81       	ldd	r25, Y+4	; 0x04
     8fe:	9a 83       	std	Y+2, r25	; 0x02
     900:	89 83       	std	Y+1, r24	; 0x01

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	9a 81       	ldd	r25, Y+2	; 0x02
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	09 f4       	brne	.+2      	; 0x90c <vTaskResume+0x22>
     90a:	4c c0       	rjmp	.+152    	; 0x9a4 <vTaskResume+0xba>
     90c:	20 91 26 02 	lds	r18, 0x0226
     910:	30 91 27 02 	lds	r19, 0x0227
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	9a 81       	ldd	r25, Y+2	; 0x02
     918:	82 17       	cp	r24, r18
     91a:	93 07       	cpc	r25, r19
     91c:	09 f4       	brne	.+2      	; 0x920 <vTaskResume+0x36>
     91e:	42 c0       	rjmp	.+132    	; 0x9a4 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	0f 92       	push	r0
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	9a 81       	ldd	r25, Y+2	; 0x02
     92a:	0e 94 46 04 	call	0x88c	; 0x88c <xTaskIsTaskSuspended>
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	b9 f5       	brne	.+110    	; 0x9a0 <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					uxListRemove(  &( pxTCB->xGenericListItem ) );
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	9a 81       	ldd	r25, Y+2	; 0x02
     936:	02 96       	adiw	r24, 0x02	; 2
     938:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     93c:	e9 81       	ldd	r30, Y+1	; 0x01
     93e:	fa 81       	ldd	r31, Y+2	; 0x02
     940:	96 89       	ldd	r25, Z+22	; 0x16
     942:	80 91 2c 02 	lds	r24, 0x022C
     946:	89 17       	cp	r24, r25
     948:	28 f4       	brcc	.+10     	; 0x954 <vTaskResume+0x6a>
     94a:	e9 81       	ldd	r30, Y+1	; 0x01
     94c:	fa 81       	ldd	r31, Y+2	; 0x02
     94e:	86 89       	ldd	r24, Z+22	; 0x16
     950:	80 93 2c 02 	sts	0x022C, r24
     954:	e9 81       	ldd	r30, Y+1	; 0x01
     956:	fa 81       	ldd	r31, Y+2	; 0x02
     958:	86 89       	ldd	r24, Z+22	; 0x16
     95a:	28 2f       	mov	r18, r24
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	c9 01       	movw	r24, r18
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	82 0f       	add	r24, r18
     96e:	93 1f       	adc	r25, r19
     970:	ac 01       	movw	r20, r24
     972:	4d 5c       	subi	r20, 0xCD	; 205
     974:	5d 4f       	sbci	r21, 0xFD	; 253
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	9c 01       	movw	r18, r24
     97c:	2e 5f       	subi	r18, 0xFE	; 254
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	ca 01       	movw	r24, r20
     982:	b9 01       	movw	r22, r18
     984:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     988:	e9 81       	ldd	r30, Y+1	; 0x01
     98a:	fa 81       	ldd	r31, Y+2	; 0x02
     98c:	96 89       	ldd	r25, Z+22	; 0x16
     98e:	e0 91 26 02 	lds	r30, 0x0226
     992:	f0 91 27 02 	lds	r31, 0x0227
     996:	86 89       	ldd	r24, Z+22	; 0x16
     998:	98 17       	cp	r25, r24
     99a:	10 f0       	brcs	.+4      	; 0x9a0 <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
     99c:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
		}
	}
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	cf 91       	pop	r28
     9ae:	df 91       	pop	r29
     9b0:	08 95       	ret

000009b2 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
     9b2:	df 93       	push	r29
     9b4:	cf 93       	push	r28
     9b6:	00 d0       	rcall	.+0      	; 0x9b8 <xTaskResumeFromISR+0x6>
     9b8:	00 d0       	rcall	.+0      	; 0x9ba <xTaskResumeFromISR+0x8>
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	9e 83       	std	Y+6, r25	; 0x06
     9c0:	8d 83       	std	Y+5, r24	; 0x05
	portBASE_TYPE xYieldRequired = pdFALSE;
     9c2:	1c 82       	std	Y+4, r1	; 0x04
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
     9c4:	8d 81       	ldd	r24, Y+5	; 0x05
     9c6:	9e 81       	ldd	r25, Y+6	; 0x06
     9c8:	9b 83       	std	Y+3, r25	; 0x03
     9ca:	8a 83       	std	Y+2, r24	; 0x02

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     9cc:	19 82       	std	Y+1, r1	; 0x01
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	9b 81       	ldd	r25, Y+3	; 0x03
     9d2:	0e 94 46 04 	call	0x88c	; 0x88c <xTaskIsTaskSuspended>
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	09 f0       	breq	.+2      	; 0x9dc <xTaskResumeFromISR+0x2a>
     9da:	47 c0       	rjmp	.+142    	; 0xa6a <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     9dc:	80 91 2e 02 	lds	r24, 0x022E
     9e0:	88 23       	and	r24, r24
     9e2:	c9 f5       	brne	.+114    	; 0xa56 <xTaskResumeFromISR+0xa4>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
     9e4:	ea 81       	ldd	r30, Y+2	; 0x02
     9e6:	fb 81       	ldd	r31, Y+3	; 0x03
     9e8:	96 89       	ldd	r25, Z+22	; 0x16
     9ea:	e0 91 26 02 	lds	r30, 0x0226
     9ee:	f0 91 27 02 	lds	r31, 0x0227
     9f2:	86 89       	ldd	r24, Z+22	; 0x16
     9f4:	1c 82       	std	Y+4, r1	; 0x04
     9f6:	98 17       	cp	r25, r24
     9f8:	10 f0       	brcs	.+4      	; 0x9fe <xTaskResumeFromISR+0x4c>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	8c 83       	std	Y+4, r24	; 0x04
					uxListRemove(  &( pxTCB->xGenericListItem ) );
     9fe:	8a 81       	ldd	r24, Y+2	; 0x02
     a00:	9b 81       	ldd	r25, Y+3	; 0x03
     a02:	02 96       	adiw	r24, 0x02	; 2
     a04:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     a08:	ea 81       	ldd	r30, Y+2	; 0x02
     a0a:	fb 81       	ldd	r31, Y+3	; 0x03
     a0c:	96 89       	ldd	r25, Z+22	; 0x16
     a0e:	80 91 2c 02 	lds	r24, 0x022C
     a12:	89 17       	cp	r24, r25
     a14:	28 f4       	brcc	.+10     	; 0xa20 <xTaskResumeFromISR+0x6e>
     a16:	ea 81       	ldd	r30, Y+2	; 0x02
     a18:	fb 81       	ldd	r31, Y+3	; 0x03
     a1a:	86 89       	ldd	r24, Z+22	; 0x16
     a1c:	80 93 2c 02 	sts	0x022C, r24
     a20:	ea 81       	ldd	r30, Y+2	; 0x02
     a22:	fb 81       	ldd	r31, Y+3	; 0x03
     a24:	86 89       	ldd	r24, Z+22	; 0x16
     a26:	28 2f       	mov	r18, r24
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	c9 01       	movw	r24, r18
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	82 0f       	add	r24, r18
     a3a:	93 1f       	adc	r25, r19
     a3c:	ac 01       	movw	r20, r24
     a3e:	4d 5c       	subi	r20, 0xCD	; 205
     a40:	5d 4f       	sbci	r21, 0xFD	; 253
     a42:	8a 81       	ldd	r24, Y+2	; 0x02
     a44:	9b 81       	ldd	r25, Y+3	; 0x03
     a46:	9c 01       	movw	r18, r24
     a48:	2e 5f       	subi	r18, 0xFE	; 254
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	ca 01       	movw	r24, r20
     a4e:	b9 01       	movw	r22, r18
     a50:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
     a54:	0a c0       	rjmp	.+20     	; 0xa6a <xTaskResumeFromISR+0xb8>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     a56:	8a 81       	ldd	r24, Y+2	; 0x02
     a58:	9b 81       	ldd	r25, Y+3	; 0x03
     a5a:	9c 01       	movw	r18, r24
     a5c:	24 5f       	subi	r18, 0xF4	; 244
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	8d e6       	ldi	r24, 0x6D	; 109
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	b9 01       	movw	r22, r18
     a66:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
     a6a:	8c 81       	ldd	r24, Y+4	; 0x04
	}
     a6c:	26 96       	adiw	r28, 0x06	; 6
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	cf 91       	pop	r28
     a7a:	df 91       	pop	r29
     a7c:	08 95       	ret

00000a7e <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	0f 92       	push	r0
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
     a96:	8f ed       	ldi	r24, 0xDF	; 223
     a98:	98 e0       	ldi	r25, 0x08	; 8
     a9a:	2e e1       	ldi	r18, 0x1E	; 30
     a9c:	32 e0       	ldi	r19, 0x02	; 2
     a9e:	b9 01       	movw	r22, r18
     aa0:	45 e5       	ldi	r20, 0x55	; 85
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	00 e0       	ldi	r16, 0x00	; 0
     aaa:	ee 24       	eor	r14, r14
     aac:	ff 24       	eor	r15, r15
     aae:	cc 24       	eor	r12, r12
     ab0:	dd 24       	eor	r13, r13
     ab2:	aa 24       	eor	r10, r10
     ab4:	bb 24       	eor	r11, r11
     ab6:	0e 94 4a 02 	call	0x494	; 0x494 <xTaskGenericCreate>
     aba:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	51 f4       	brne	.+20     	; 0xad6 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
     ac2:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 2d 02 	sts	0x022D, r24
		xTickCount = ( portTickType ) 0U;
     aca:	10 92 2a 02 	sts	0x022A, r1
     ace:	10 92 29 02 	sts	0x0229, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     ad2:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
     ad6:	0f 90       	pop	r0
     ad8:	cf 91       	pop	r28
     ada:	df 91       	pop	r29
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	bf 90       	pop	r11
     ae8:	af 90       	pop	r10
     aea:	08 95       	ret

00000aec <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
     aec:	df 93       	push	r29
     aee:	cf 93       	push	r28
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
     af4:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
     af6:	10 92 2d 02 	sts	0x022D, r1
	vPortEndScheduler();
     afa:	0e 94 02 17 	call	0x2e04	; 0x2e04 <vPortEndScheduler>
}
     afe:	cf 91       	pop	r28
     b00:	df 91       	pop	r29
     b02:	08 95       	ret

00000b04 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
     b04:	df 93       	push	r29
     b06:	cf 93       	push	r28
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
     b0c:	80 91 2e 02 	lds	r24, 0x022E
     b10:	8f 5f       	subi	r24, 0xFF	; 255
     b12:	80 93 2e 02 	sts	0x022E, r24
}
     b16:	cf 91       	pop	r28
     b18:	df 91       	pop	r29
     b1a:	08 95       	ret

00000b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	00 d0       	rcall	.+0      	; 0xb22 <xTaskResumeAll+0x6>
     b22:	0f 92       	push	r0
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     b28:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
     b30:	80 91 2e 02 	lds	r24, 0x022E
     b34:	81 50       	subi	r24, 0x01	; 1
     b36:	80 93 2e 02 	sts	0x022E, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     b3a:	80 91 2e 02 	lds	r24, 0x022E
     b3e:	88 23       	and	r24, r24
     b40:	09 f0       	breq	.+2      	; 0xb44 <xTaskResumeAll+0x28>
     b42:	6c c0       	rjmp	.+216    	; 0xc1c <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
     b44:	80 91 28 02 	lds	r24, 0x0228
     b48:	88 23       	and	r24, r24
     b4a:	09 f4       	brne	.+2      	; 0xb4e <xTaskResumeAll+0x32>
     b4c:	67 c0       	rjmp	.+206    	; 0xc1c <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
     b4e:	19 82       	std	Y+1, r1	; 0x01
     b50:	41 c0       	rjmp	.+130    	; 0xbd4 <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
     b52:	e0 91 72 02 	lds	r30, 0x0272
     b56:	f0 91 73 02 	lds	r31, 0x0273
     b5a:	86 81       	ldd	r24, Z+6	; 0x06
     b5c:	97 81       	ldd	r25, Z+7	; 0x07
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	8b 83       	std	Y+3, r24	; 0x03
					uxListRemove( &( pxTCB->xEventListItem ) );
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	0c 96       	adiw	r24, 0x0c	; 12
     b68:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
					uxListRemove( &( pxTCB->xGenericListItem ) );
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	9c 81       	ldd	r25, Y+4	; 0x04
     b70:	02 96       	adiw	r24, 0x02	; 2
     b72:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     b76:	eb 81       	ldd	r30, Y+3	; 0x03
     b78:	fc 81       	ldd	r31, Y+4	; 0x04
     b7a:	96 89       	ldd	r25, Z+22	; 0x16
     b7c:	80 91 2c 02 	lds	r24, 0x022C
     b80:	89 17       	cp	r24, r25
     b82:	28 f4       	brcc	.+10     	; 0xb8e <xTaskResumeAll+0x72>
     b84:	eb 81       	ldd	r30, Y+3	; 0x03
     b86:	fc 81       	ldd	r31, Y+4	; 0x04
     b88:	86 89       	ldd	r24, Z+22	; 0x16
     b8a:	80 93 2c 02 	sts	0x022C, r24
     b8e:	eb 81       	ldd	r30, Y+3	; 0x03
     b90:	fc 81       	ldd	r31, Y+4	; 0x04
     b92:	86 89       	ldd	r24, Z+22	; 0x16
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	c9 01       	movw	r24, r18
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	82 0f       	add	r24, r18
     ba8:	93 1f       	adc	r25, r19
     baa:	8d 5c       	subi	r24, 0xCD	; 205
     bac:	9d 4f       	sbci	r25, 0xFD	; 253
     bae:	2b 81       	ldd	r18, Y+3	; 0x03
     bb0:	3c 81       	ldd	r19, Y+4	; 0x04
     bb2:	2e 5f       	subi	r18, 0xFE	; 254
     bb4:	3f 4f       	sbci	r19, 0xFF	; 255
     bb6:	b9 01       	movw	r22, r18
     bb8:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     bbc:	eb 81       	ldd	r30, Y+3	; 0x03
     bbe:	fc 81       	ldd	r31, Y+4	; 0x04
     bc0:	96 89       	ldd	r25, Z+22	; 0x16
     bc2:	e0 91 26 02 	lds	r30, 0x0226
     bc6:	f0 91 27 02 	lds	r31, 0x0227
     bca:	86 89       	ldd	r24, Z+22	; 0x16
     bcc:	98 17       	cp	r25, r24
     bce:	10 f0       	brcs	.+4      	; 0xbd4 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     bd4:	80 91 6d 02 	lds	r24, 0x026D
     bd8:	88 23       	and	r24, r24
     bda:	09 f0       	breq	.+2      	; 0xbde <xTaskResumeAll+0xc2>
     bdc:	ba cf       	rjmp	.-140    	; 0xb52 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     bde:	80 91 2f 02 	lds	r24, 0x022F
     be2:	88 23       	and	r24, r24
     be4:	71 f0       	breq	.+28     	; 0xc02 <xTaskResumeAll+0xe6>
     be6:	07 c0       	rjmp	.+14     	; 0xbf6 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
     be8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <vTaskIncrementTick>
						--uxMissedTicks;
     bec:	80 91 2f 02 	lds	r24, 0x022F
     bf0:	81 50       	subi	r24, 0x01	; 1
     bf2:	80 93 2f 02 	sts	0x022F, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     bf6:	80 91 2f 02 	lds	r24, 0x022F
     bfa:	88 23       	and	r24, r24
     bfc:	a9 f7       	brne	.-22     	; 0xbe8 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	21 f0       	breq	.+8      	; 0xc10 <xTaskResumeAll+0xf4>
     c08:	80 91 30 02 	lds	r24, 0x0230
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	31 f4       	brne	.+12     	; 0xc1c <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
     c14:	10 92 30 02 	sts	0x0230, r1
					portYIELD_WITHIN_API();
     c18:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	0f 92       	push	r0
     c36:	0f 92       	push	r0
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	0f 92       	push	r0
	{
		xTicks = xTickCount;
     c42:	80 91 29 02 	lds	r24, 0x0229
     c46:	90 91 2a 02 	lds	r25, 0x022A
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63

	return xTicks;
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	00 d0       	rcall	.+0      	; 0xc66 <xTaskGetTickCountFromISR+0x6>
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     c6a:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
     c6c:	80 91 29 02 	lds	r24, 0x0229
     c70:	90 91 2a 02 	lds	r25, 0x022A
     c74:	9b 83       	std	Y+3, r25	; 0x03
     c76:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	9b 81       	ldd	r25, Y+3	; 0x03
}
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
     c90:	80 91 28 02 	lds	r24, 0x0228
}
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <vTaskIncrementTick+0x6>
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <vTaskIncrementTick+0x8>
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     ca6:	80 91 2e 02 	lds	r24, 0x022E
     caa:	88 23       	and	r24, r24
     cac:	09 f0       	breq	.+2      	; 0xcb0 <vTaskIncrementTick+0x16>
     cae:	bb c0       	rjmp	.+374    	; 0xe26 <vTaskIncrementTick+0x18c>
	{
		++xTickCount;
     cb0:	80 91 29 02 	lds	r24, 0x0229
     cb4:	90 91 2a 02 	lds	r25, 0x022A
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	90 93 2a 02 	sts	0x022A, r25
     cbe:	80 93 29 02 	sts	0x0229, r24
		if( xTickCount == ( portTickType ) 0U )
     cc2:	80 91 29 02 	lds	r24, 0x0229
     cc6:	90 91 2a 02 	lds	r25, 0x022A
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	d1 f5       	brne	.+116    	; 0xd42 <vTaskIncrementTick+0xa8>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
     cce:	80 91 69 02 	lds	r24, 0x0269
     cd2:	90 91 6a 02 	lds	r25, 0x026A
     cd6:	9c 83       	std	Y+4, r25	; 0x04
     cd8:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
     cda:	80 91 6b 02 	lds	r24, 0x026B
     cde:	90 91 6c 02 	lds	r25, 0x026C
     ce2:	90 93 6a 02 	sts	0x026A, r25
     ce6:	80 93 69 02 	sts	0x0269, r24
			pxOverflowDelayedTaskList = pxTemp;
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	90 93 6c 02 	sts	0x026C, r25
     cf2:	80 93 6b 02 	sts	0x026B, r24
			xNumOfOverflows++;
     cf6:	80 91 31 02 	lds	r24, 0x0231
     cfa:	8f 5f       	subi	r24, 0xFF	; 255
     cfc:	80 93 31 02 	sts	0x0231, r24

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     d00:	e0 91 69 02 	lds	r30, 0x0269
     d04:	f0 91 6a 02 	lds	r31, 0x026A
     d08:	80 81       	ld	r24, Z
     d0a:	88 23       	and	r24, r24
     d0c:	39 f4       	brne	.+14     	; 0xd1c <vTaskIncrementTick+0x82>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	9f ef       	ldi	r25, 0xFF	; 255
     d12:	90 93 1d 02 	sts	0x021D, r25
     d16:	80 93 1c 02 	sts	0x021C, r24
     d1a:	13 c0       	rjmp	.+38     	; 0xd42 <vTaskIncrementTick+0xa8>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     d1c:	e0 91 69 02 	lds	r30, 0x0269
     d20:	f0 91 6a 02 	lds	r31, 0x026A
     d24:	05 80       	ldd	r0, Z+5	; 0x05
     d26:	f6 81       	ldd	r31, Z+6	; 0x06
     d28:	e0 2d       	mov	r30, r0
     d2a:	86 81       	ldd	r24, Z+6	; 0x06
     d2c:	97 81       	ldd	r25, Z+7	; 0x07
     d2e:	9e 83       	std	Y+6, r25	; 0x06
     d30:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     d32:	ed 81       	ldd	r30, Y+5	; 0x05
     d34:	fe 81       	ldd	r31, Y+6	; 0x06
     d36:	82 81       	ldd	r24, Z+2	; 0x02
     d38:	93 81       	ldd	r25, Z+3	; 0x03
     d3a:	90 93 1d 02 	sts	0x021D, r25
     d3e:	80 93 1c 02 	sts	0x021C, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
     d42:	20 91 29 02 	lds	r18, 0x0229
     d46:	30 91 2a 02 	lds	r19, 0x022A
     d4a:	80 91 1c 02 	lds	r24, 0x021C
     d4e:	90 91 1d 02 	lds	r25, 0x021D
     d52:	28 17       	cp	r18, r24
     d54:	39 07       	cpc	r19, r25
     d56:	08 f4       	brcc	.+2      	; 0xd5a <vTaskIncrementTick+0xc0>
     d58:	6b c0       	rjmp	.+214    	; 0xe30 <vTaskIncrementTick+0x196>
     d5a:	e0 91 69 02 	lds	r30, 0x0269
     d5e:	f0 91 6a 02 	lds	r31, 0x026A
     d62:	80 81       	ld	r24, Z
     d64:	88 23       	and	r24, r24
     d66:	39 f4       	brne	.+14     	; 0xd76 <vTaskIncrementTick+0xdc>
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	9f ef       	ldi	r25, 0xFF	; 255
     d6c:	90 93 1d 02 	sts	0x021D, r25
     d70:	80 93 1c 02 	sts	0x021C, r24
     d74:	5d c0       	rjmp	.+186    	; 0xe30 <vTaskIncrementTick+0x196>
     d76:	e0 91 69 02 	lds	r30, 0x0269
     d7a:	f0 91 6a 02 	lds	r31, 0x026A
     d7e:	05 80       	ldd	r0, Z+5	; 0x05
     d80:	f6 81       	ldd	r31, Z+6	; 0x06
     d82:	e0 2d       	mov	r30, r0
     d84:	86 81       	ldd	r24, Z+6	; 0x06
     d86:	97 81       	ldd	r25, Z+7	; 0x07
     d88:	9e 83       	std	Y+6, r25	; 0x06
     d8a:	8d 83       	std	Y+5, r24	; 0x05
     d8c:	ed 81       	ldd	r30, Y+5	; 0x05
     d8e:	fe 81       	ldd	r31, Y+6	; 0x06
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	20 91 29 02 	lds	r18, 0x0229
     d9c:	30 91 2a 02 	lds	r19, 0x022A
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	28 17       	cp	r18, r24
     da6:	39 07       	cpc	r19, r25
     da8:	38 f4       	brcc	.+14     	; 0xdb8 <vTaskIncrementTick+0x11e>
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	90 93 1d 02 	sts	0x021D, r25
     db2:	80 93 1c 02 	sts	0x021C, r24
     db6:	3c c0       	rjmp	.+120    	; 0xe30 <vTaskIncrementTick+0x196>
     db8:	8d 81       	ldd	r24, Y+5	; 0x05
     dba:	9e 81       	ldd	r25, Y+6	; 0x06
     dbc:	02 96       	adiw	r24, 0x02	; 2
     dbe:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     dc2:	ed 81       	ldd	r30, Y+5	; 0x05
     dc4:	fe 81       	ldd	r31, Y+6	; 0x06
     dc6:	84 89       	ldd	r24, Z+20	; 0x14
     dc8:	95 89       	ldd	r25, Z+21	; 0x15
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <vTaskIncrementTick+0x13e>
     dce:	8d 81       	ldd	r24, Y+5	; 0x05
     dd0:	9e 81       	ldd	r25, Y+6	; 0x06
     dd2:	0c 96       	adiw	r24, 0x0c	; 12
     dd4:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
     dd8:	ed 81       	ldd	r30, Y+5	; 0x05
     dda:	fe 81       	ldd	r31, Y+6	; 0x06
     ddc:	96 89       	ldd	r25, Z+22	; 0x16
     dde:	80 91 2c 02 	lds	r24, 0x022C
     de2:	89 17       	cp	r24, r25
     de4:	28 f4       	brcc	.+10     	; 0xdf0 <vTaskIncrementTick+0x156>
     de6:	ed 81       	ldd	r30, Y+5	; 0x05
     de8:	fe 81       	ldd	r31, Y+6	; 0x06
     dea:	86 89       	ldd	r24, Z+22	; 0x16
     dec:	80 93 2c 02 	sts	0x022C, r24
     df0:	ed 81       	ldd	r30, Y+5	; 0x05
     df2:	fe 81       	ldd	r31, Y+6	; 0x06
     df4:	86 89       	ldd	r24, Z+22	; 0x16
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	c9 01       	movw	r24, r18
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	82 0f       	add	r24, r18
     e0a:	93 1f       	adc	r25, r19
     e0c:	ac 01       	movw	r20, r24
     e0e:	4d 5c       	subi	r20, 0xCD	; 205
     e10:	5d 4f       	sbci	r21, 0xFD	; 253
     e12:	8d 81       	ldd	r24, Y+5	; 0x05
     e14:	9e 81       	ldd	r25, Y+6	; 0x06
     e16:	9c 01       	movw	r18, r24
     e18:	2e 5f       	subi	r18, 0xFE	; 254
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	ca 01       	movw	r24, r20
     e1e:	b9 01       	movw	r22, r18
     e20:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
     e24:	9a cf       	rjmp	.-204    	; 0xd5a <vTaskIncrementTick+0xc0>
	}
	else
	{
		++uxMissedTicks;
     e26:	80 91 2f 02 	lds	r24, 0x022F
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	80 93 2f 02 	sts	0x022F, r24
		{
			vApplicationTickHook();
		}
	}
	#endif
}
     e30:	26 96       	adiw	r28, 0x06	; 6
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	0f 92       	push	r0
     e48:	0f 92       	push	r0
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     e4e:	80 91 2e 02 	lds	r24, 0x022E
     e52:	88 23       	and	r24, r24
     e54:	21 f0       	breq	.+8      	; 0xe5e <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	80 93 30 02 	sts	0x0230, r24
     e5c:	70 c0       	rjmp	.+224    	; 0xf3e <vTaskSwitchContext+0xfc>
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTempCounter;
		}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
     e5e:	e0 91 26 02 	lds	r30, 0x0226
     e62:	f0 91 27 02 	lds	r31, 0x0227
     e66:	20 81       	ld	r18, Z
     e68:	31 81       	ldd	r19, Z+1	; 0x01
     e6a:	e0 91 26 02 	lds	r30, 0x0226
     e6e:	f0 91 27 02 	lds	r31, 0x0227
     e72:	87 89       	ldd	r24, Z+23	; 0x17
     e74:	90 8d       	ldd	r25, Z+24	; 0x18
     e76:	82 17       	cp	r24, r18
     e78:	93 07       	cpc	r25, r19
     e7a:	90 f0       	brcs	.+36     	; 0xea0 <vTaskSwitchContext+0x5e>
     e7c:	80 91 26 02 	lds	r24, 0x0226
     e80:	90 91 27 02 	lds	r25, 0x0227
     e84:	20 91 26 02 	lds	r18, 0x0226
     e88:	30 91 27 02 	lds	r19, 0x0227
     e8c:	27 5e       	subi	r18, 0xE7	; 231
     e8e:	3f 4f       	sbci	r19, 0xFF	; 255
     e90:	b9 01       	movw	r22, r18
     e92:	0e 94 a5 00 	call	0x14a	; 0x14a <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
     e96:	80 91 2c 02 	lds	r24, 0x022C
     e9a:	81 50       	subi	r24, 0x01	; 1
     e9c:	80 93 2c 02 	sts	0x022C, r24
     ea0:	80 91 2c 02 	lds	r24, 0x022C
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	c9 01       	movw	r24, r18
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	fc 01       	movw	r30, r24
     ebc:	ed 5c       	subi	r30, 0xCD	; 205
     ebe:	fd 4f       	sbci	r31, 0xFD	; 253
     ec0:	80 81       	ld	r24, Z
     ec2:	88 23       	and	r24, r24
     ec4:	41 f3       	breq	.-48     	; 0xe96 <vTaskSwitchContext+0x54>
     ec6:	80 91 2c 02 	lds	r24, 0x022C
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	c9 01       	movw	r24, r18
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	82 0f       	add	r24, r18
     ede:	93 1f       	adc	r25, r19
     ee0:	8d 5c       	subi	r24, 0xCD	; 205
     ee2:	9d 4f       	sbci	r25, 0xFD	; 253
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	e9 81       	ldd	r30, Y+1	; 0x01
     eea:	fa 81       	ldd	r31, Y+2	; 0x02
     eec:	01 80       	ldd	r0, Z+1	; 0x01
     eee:	f2 81       	ldd	r31, Z+2	; 0x02
     ef0:	e0 2d       	mov	r30, r0
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	e9 81       	ldd	r30, Y+1	; 0x01
     ef8:	fa 81       	ldd	r31, Y+2	; 0x02
     efa:	92 83       	std	Z+2, r25	; 0x02
     efc:	81 83       	std	Z+1, r24	; 0x01
     efe:	e9 81       	ldd	r30, Y+1	; 0x01
     f00:	fa 81       	ldd	r31, Y+2	; 0x02
     f02:	21 81       	ldd	r18, Z+1	; 0x01
     f04:	32 81       	ldd	r19, Z+2	; 0x02
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	03 96       	adiw	r24, 0x03	; 3
     f0c:	28 17       	cp	r18, r24
     f0e:	39 07       	cpc	r19, r25
     f10:	59 f4       	brne	.+22     	; 0xf28 <vTaskSwitchContext+0xe6>
     f12:	e9 81       	ldd	r30, Y+1	; 0x01
     f14:	fa 81       	ldd	r31, Y+2	; 0x02
     f16:	01 80       	ldd	r0, Z+1	; 0x01
     f18:	f2 81       	ldd	r31, Z+2	; 0x02
     f1a:	e0 2d       	mov	r30, r0
     f1c:	82 81       	ldd	r24, Z+2	; 0x02
     f1e:	93 81       	ldd	r25, Z+3	; 0x03
     f20:	e9 81       	ldd	r30, Y+1	; 0x01
     f22:	fa 81       	ldd	r31, Y+2	; 0x02
     f24:	92 83       	std	Z+2, r25	; 0x02
     f26:	81 83       	std	Z+1, r24	; 0x01
     f28:	e9 81       	ldd	r30, Y+1	; 0x01
     f2a:	fa 81       	ldd	r31, Y+2	; 0x02
     f2c:	01 80       	ldd	r0, Z+1	; 0x01
     f2e:	f2 81       	ldd	r31, Z+2	; 0x02
     f30:	e0 2d       	mov	r30, r0
     f32:	86 81       	ldd	r24, Z+6	; 0x06
     f34:	97 81       	ldd	r25, Z+7	; 0x07
     f36:	90 93 27 02 	sts	0x0227, r25
     f3a:	80 93 26 02 	sts	0x0226, r24

		traceTASK_SWITCHED_IN();
	}
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <vTaskPlaceOnEventList+0x6>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <vTaskPlaceOnEventList+0x8>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	9c 83       	std	Y+4, r25	; 0x04
     f56:	8b 83       	std	Y+3, r24	; 0x03
     f58:	7e 83       	std	Y+6, r23	; 0x06
     f5a:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
     f5c:	4b 81       	ldd	r20, Y+3	; 0x03
     f5e:	5c 81       	ldd	r21, Y+4	; 0x04
     f60:	80 91 26 02 	lds	r24, 0x0226
     f64:	90 91 27 02 	lds	r25, 0x0227
     f68:	9c 01       	movw	r18, r24
     f6a:	24 5f       	subi	r18, 0xF4	; 244
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	ca 01       	movw	r24, r20
     f70:	b9 01       	movw	r22, r18
     f72:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     f76:	80 91 26 02 	lds	r24, 0x0226
     f7a:	90 91 27 02 	lds	r25, 0x0227
     f7e:	02 96       	adiw	r24, 0x02	; 2
     f80:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	2f ef       	ldi	r18, 0xFF	; 255
     f8a:	8f 3f       	cpi	r24, 0xFF	; 255
     f8c:	92 07       	cpc	r25, r18
     f8e:	69 f4       	brne	.+26     	; 0xfaa <vTaskPlaceOnEventList+0x62>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     f90:	80 91 26 02 	lds	r24, 0x0226
     f94:	90 91 27 02 	lds	r25, 0x0227
     f98:	9c 01       	movw	r18, r24
     f9a:	2e 5f       	subi	r18, 0xFE	; 254
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	86 e7       	ldi	r24, 0x76	; 118
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	b9 01       	movw	r22, r18
     fa4:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
     fa8:	0e c0       	rjmp	.+28     	; 0xfc6 <vTaskPlaceOnEventList+0x7e>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
     faa:	20 91 29 02 	lds	r18, 0x0229
     fae:	30 91 2a 02 	lds	r19, 0x022A
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	82 0f       	add	r24, r18
     fb8:	93 1f       	adc	r25, r19
     fba:	9a 83       	std	Y+2, r25	; 0x02
     fbc:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	9a 81       	ldd	r25, Y+2	; 0x02
     fc2:	0e 94 8f 09 	call	0x131e	; 0x131e <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
     fc6:	26 96       	adiw	r28, 0x06	; 6
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	00 d0       	rcall	.+0      	; 0xfde <xTaskRemoveFromEventList+0x6>
     fde:	0f 92       	push	r0
     fe0:	0f 92       	push	r0
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	9d 83       	std	Y+5, r25	; 0x05
     fe8:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     fea:	ec 81       	ldd	r30, Y+4	; 0x04
     fec:	fd 81       	ldd	r31, Y+5	; 0x05
     fee:	05 80       	ldd	r0, Z+5	; 0x05
     ff0:	f6 81       	ldd	r31, Z+6	; 0x06
     ff2:	e0 2d       	mov	r30, r0
     ff4:	86 81       	ldd	r24, Z+6	; 0x06
     ff6:	97 81       	ldd	r25, Z+7	; 0x07
     ff8:	9b 83       	std	Y+3, r25	; 0x03
     ffa:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	0c 96       	adiw	r24, 0x0c	; 12
    1002:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1006:	80 91 2e 02 	lds	r24, 0x022E
    100a:	88 23       	and	r24, r24
    100c:	61 f5       	brne	.+88     	; 0x1066 <xTaskRemoveFromEventList+0x8e>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	02 96       	adiw	r24, 0x02	; 2
    1014:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    1018:	ea 81       	ldd	r30, Y+2	; 0x02
    101a:	fb 81       	ldd	r31, Y+3	; 0x03
    101c:	96 89       	ldd	r25, Z+22	; 0x16
    101e:	80 91 2c 02 	lds	r24, 0x022C
    1022:	89 17       	cp	r24, r25
    1024:	28 f4       	brcc	.+10     	; 0x1030 <xTaskRemoveFromEventList+0x58>
    1026:	ea 81       	ldd	r30, Y+2	; 0x02
    1028:	fb 81       	ldd	r31, Y+3	; 0x03
    102a:	86 89       	ldd	r24, Z+22	; 0x16
    102c:	80 93 2c 02 	sts	0x022C, r24
    1030:	ea 81       	ldd	r30, Y+2	; 0x02
    1032:	fb 81       	ldd	r31, Y+3	; 0x03
    1034:	86 89       	ldd	r24, Z+22	; 0x16
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	c9 01       	movw	r24, r18
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	ac 01       	movw	r20, r24
    104e:	4d 5c       	subi	r20, 0xCD	; 205
    1050:	5d 4f       	sbci	r21, 0xFD	; 253
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	9c 01       	movw	r18, r24
    1058:	2e 5f       	subi	r18, 0xFE	; 254
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	ca 01       	movw	r24, r20
    105e:	b9 01       	movw	r22, r18
    1060:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
    1064:	0a c0       	rjmp	.+20     	; 0x107a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	9c 01       	movw	r18, r24
    106c:	24 5f       	subi	r18, 0xF4	; 244
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
    1070:	8d e6       	ldi	r24, 0x6D	; 109
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	b9 01       	movw	r22, r18
    1076:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    107a:	ea 81       	ldd	r30, Y+2	; 0x02
    107c:	fb 81       	ldd	r31, Y+3	; 0x03
    107e:	96 89       	ldd	r25, Z+22	; 0x16
    1080:	e0 91 26 02 	lds	r30, 0x0226
    1084:	f0 91 27 02 	lds	r31, 0x0227
    1088:	86 89       	ldd	r24, Z+22	; 0x16
    108a:	98 17       	cp	r25, r24
    108c:	18 f0       	brcs	.+6      	; 0x1094 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    1094:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	0f 92       	push	r0
    10ae:	0f 92       	push	r0
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    10b8:	80 91 31 02 	lds	r24, 0x0231
    10bc:	e9 81       	ldd	r30, Y+1	; 0x01
    10be:	fa 81       	ldd	r31, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    10c2:	80 91 29 02 	lds	r24, 0x0229
    10c6:	90 91 2a 02 	lds	r25, 0x022A
    10ca:	e9 81       	ldd	r30, Y+1	; 0x01
    10cc:	fa 81       	ldd	r31, Y+2	; 0x02
    10ce:	92 83       	std	Z+2, r25	; 0x02
    10d0:	81 83       	std	Z+1, r24	; 0x01
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <xTaskCheckForTimeOut+0x6>
    10e2:	0f 92       	push	r0
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	9b 83       	std	Y+3, r25	; 0x03
    10ec:	8a 83       	std	Y+2, r24	; 0x02
    10ee:	7d 83       	std	Y+5, r23	; 0x05
    10f0:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    10f8:	ec 81       	ldd	r30, Y+4	; 0x04
    10fa:	fd 81       	ldd	r31, Y+5	; 0x05
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	2f ef       	ldi	r18, 0xFF	; 255
    1102:	8f 3f       	cpi	r24, 0xFF	; 255
    1104:	92 07       	cpc	r25, r18
    1106:	11 f4       	brne	.+4      	; 0x110c <xTaskCheckForTimeOut+0x30>
			{
				xReturn = pdFALSE;
    1108:	19 82       	std	Y+1, r1	; 0x01
    110a:	44 c0       	rjmp	.+136    	; 0x1194 <xTaskCheckForTimeOut+0xb8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    110c:	ea 81       	ldd	r30, Y+2	; 0x02
    110e:	fb 81       	ldd	r31, Y+3	; 0x03
    1110:	90 81       	ld	r25, Z
    1112:	80 91 31 02 	lds	r24, 0x0231
    1116:	98 17       	cp	r25, r24
    1118:	71 f0       	breq	.+28     	; 0x1136 <xTaskCheckForTimeOut+0x5a>
    111a:	ea 81       	ldd	r30, Y+2	; 0x02
    111c:	fb 81       	ldd	r31, Y+3	; 0x03
    111e:	21 81       	ldd	r18, Z+1	; 0x01
    1120:	32 81       	ldd	r19, Z+2	; 0x02
    1122:	80 91 29 02 	lds	r24, 0x0229
    1126:	90 91 2a 02 	lds	r25, 0x022A
    112a:	82 17       	cp	r24, r18
    112c:	93 07       	cpc	r25, r19
    112e:	18 f0       	brcs	.+6      	; 0x1136 <xTaskCheckForTimeOut+0x5a>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	2f c0       	rjmp	.+94     	; 0x1194 <xTaskCheckForTimeOut+0xb8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    1136:	20 91 29 02 	lds	r18, 0x0229
    113a:	30 91 2a 02 	lds	r19, 0x022A
    113e:	ea 81       	ldd	r30, Y+2	; 0x02
    1140:	fb 81       	ldd	r31, Y+3	; 0x03
    1142:	81 81       	ldd	r24, Z+1	; 0x01
    1144:	92 81       	ldd	r25, Z+2	; 0x02
    1146:	28 1b       	sub	r18, r24
    1148:	39 0b       	sbc	r19, r25
    114a:	ec 81       	ldd	r30, Y+4	; 0x04
    114c:	fd 81       	ldd	r31, Y+5	; 0x05
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	28 17       	cp	r18, r24
    1154:	39 07       	cpc	r19, r25
    1156:	e0 f4       	brcc	.+56     	; 0x1190 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    1158:	ec 81       	ldd	r30, Y+4	; 0x04
    115a:	fd 81       	ldd	r31, Y+5	; 0x05
    115c:	40 81       	ld	r20, Z
    115e:	51 81       	ldd	r21, Z+1	; 0x01
    1160:	ea 81       	ldd	r30, Y+2	; 0x02
    1162:	fb 81       	ldd	r31, Y+3	; 0x03
    1164:	21 81       	ldd	r18, Z+1	; 0x01
    1166:	32 81       	ldd	r19, Z+2	; 0x02
    1168:	80 91 29 02 	lds	r24, 0x0229
    116c:	90 91 2a 02 	lds	r25, 0x022A
    1170:	b9 01       	movw	r22, r18
    1172:	68 1b       	sub	r22, r24
    1174:	79 0b       	sbc	r23, r25
    1176:	cb 01       	movw	r24, r22
    1178:	84 0f       	add	r24, r20
    117a:	95 1f       	adc	r25, r21
    117c:	ec 81       	ldd	r30, Y+4	; 0x04
    117e:	fd 81       	ldd	r31, Y+5	; 0x05
    1180:	91 83       	std	Z+1, r25	; 0x01
    1182:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	9b 81       	ldd	r25, Y+3	; 0x03
    1188:	0e 94 54 08 	call	0x10a8	; 0x10a8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    118c:	19 82       	std	Y+1, r1	; 0x01
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <xTaskCheckForTimeOut+0xb8>
		}
		else
		{
			xReturn = pdTRUE;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1198:	89 81       	ldd	r24, Y+1	; 0x01
}
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 93 30 02 	sts	0x0230, r24
}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	0f 92       	push	r0
    11c4:	0f 92       	push	r0
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    11ce:	0e 94 88 09 	call	0x1310	; 0x1310 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    11d2:	80 91 33 02 	lds	r24, 0x0233
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	d0 f3       	brcs	.-12     	; 0x11ce <prvIdleTask+0x10>
			{
				taskYIELD();
    11da:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
    11de:	f7 cf       	rjmp	.-18     	; 0x11ce <prvIdleTask+0x10>

000011e0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	29 97       	sbiw	r28, 0x09	; 9
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	7c 83       	std	Y+4, r23	; 0x04
    11fe:	6b 83       	std	Y+3, r22	; 0x03
    1200:	4d 83       	std	Y+5, r20	; 0x05
    1202:	3f 83       	std	Y+7, r19	; 0x07
    1204:	2e 83       	std	Y+6, r18	; 0x06
    1206:	19 87       	std	Y+9, r17	; 0x09
    1208:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	49 96       	adiw	r24, 0x19	; 25
    1210:	2b 81       	ldd	r18, Y+3	; 0x03
    1212:	3c 81       	ldd	r19, Y+4	; 0x04
    1214:	b9 01       	movw	r22, r18
    1216:	40 e1       	ldi	r20, 0x10	; 16
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    121e:	e9 81       	ldd	r30, Y+1	; 0x01
    1220:	fa 81       	ldd	r31, Y+2	; 0x02
    1222:	10 a6       	std	Z+40, r1	; 0x28

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	10 f0       	brcs	.+4      	; 0x122e <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    122e:	e9 81       	ldd	r30, Y+1	; 0x01
    1230:	fa 81       	ldd	r31, Y+2	; 0x02
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	86 8b       	std	Z+22, r24	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    1236:	e9 81       	ldd	r30, Y+1	; 0x01
    1238:	fa 81       	ldd	r31, Y+2	; 0x02
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	81 a7       	std	Z+41, r24	; 0x29
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	02 96       	adiw	r24, 0x02	; 2
    1244:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	0c 96       	adiw	r24, 0x0c	; 12
    124e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    1252:	e9 81       	ldd	r30, Y+1	; 0x01
    1254:	fa 81       	ldd	r31, Y+2	; 0x02
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	91 87       	std	Z+9, r25	; 0x09
    125c:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	84 e0       	ldi	r24, 0x04	; 4
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	82 1b       	sub	r24, r18
    126a:	93 0b       	sbc	r25, r19
    126c:	e9 81       	ldd	r30, Y+1	; 0x01
    126e:	fa 81       	ldd	r31, Y+2	; 0x02
    1270:	95 87       	std	Z+13, r25	; 0x0d
    1272:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	93 8b       	std	Z+19, r25	; 0x13
    127e:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    1280:	29 96       	adiw	r28, 0x09	; 9
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	0f 92       	push	r0
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    12a0:	19 82       	std	Y+1, r1	; 0x01
    12a2:	13 c0       	rjmp	.+38     	; 0x12ca <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	c9 01       	movw	r24, r18
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	82 0f       	add	r24, r18
    12ba:	93 1f       	adc	r25, r19
    12bc:	8d 5c       	subi	r24, 0xCD	; 205
    12be:	9d 4f       	sbci	r25, 0xFD	; 253
    12c0:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	8f 5f       	subi	r24, 0xFF	; 255
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	84 30       	cpi	r24, 0x04	; 4
    12ce:	50 f3       	brcs	.-44     	; 0x12a4 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    12d0:	87 e5       	ldi	r24, 0x57	; 87
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    12d8:	80 e6       	ldi	r24, 0x60	; 96
    12da:	92 e0       	ldi	r25, 0x02	; 2
    12dc:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    12e0:	8d e6       	ldi	r24, 0x6D	; 109
    12e2:	92 e0       	ldi	r25, 0x02	; 2
    12e4:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    12e8:	86 e7       	ldi	r24, 0x76	; 118
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    12f0:	87 e5       	ldi	r24, 0x57	; 87
    12f2:	92 e0       	ldi	r25, 0x02	; 2
    12f4:	90 93 6a 02 	sts	0x026A, r25
    12f8:	80 93 69 02 	sts	0x0269, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    12fc:	80 e6       	ldi	r24, 0x60	; 96
    12fe:	92 e0       	ldi	r25, 0x02	; 2
    1300:	90 93 6c 02 	sts	0x026C, r25
    1304:	80 93 6b 02 	sts	0x026B, r24
}
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	0f 92       	push	r0
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	9a 83       	std	Y+2, r25	; 0x02
    132c:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    132e:	e0 91 26 02 	lds	r30, 0x0226
    1332:	f0 91 27 02 	lds	r31, 0x0227
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	9a 81       	ldd	r25, Y+2	; 0x02
    133a:	93 83       	std	Z+3, r25	; 0x03
    133c:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    133e:	20 91 29 02 	lds	r18, 0x0229
    1342:	30 91 2a 02 	lds	r19, 0x022A
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	9a 81       	ldd	r25, Y+2	; 0x02
    134a:	82 17       	cp	r24, r18
    134c:	93 07       	cpc	r25, r19
    134e:	70 f4       	brcc	.+28     	; 0x136c <prvAddCurrentTaskToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1350:	80 91 6b 02 	lds	r24, 0x026B
    1354:	90 91 6c 02 	lds	r25, 0x026C
    1358:	20 91 26 02 	lds	r18, 0x0226
    135c:	30 91 27 02 	lds	r19, 0x0227
    1360:	2e 5f       	subi	r18, 0xFE	; 254
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	b9 01       	movw	r22, r18
    1366:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsert>
    136a:	1e c0       	rjmp	.+60     	; 0x13a8 <prvAddCurrentTaskToDelayedList+0x8a>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    136c:	40 91 69 02 	lds	r20, 0x0269
    1370:	50 91 6a 02 	lds	r21, 0x026A
    1374:	80 91 26 02 	lds	r24, 0x0226
    1378:	90 91 27 02 	lds	r25, 0x0227
    137c:	9c 01       	movw	r18, r24
    137e:	2e 5f       	subi	r18, 0xFE	; 254
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	ca 01       	movw	r24, r20
    1384:	b9 01       	movw	r22, r18
    1386:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    138a:	20 91 1c 02 	lds	r18, 0x021C
    138e:	30 91 1d 02 	lds	r19, 0x021D
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	82 17       	cp	r24, r18
    1398:	93 07       	cpc	r25, r19
    139a:	30 f4       	brcc	.+12     	; 0x13a8 <prvAddCurrentTaskToDelayedList+0x8a>
		{
			xNextTaskUnblockTime = xTimeToWake;
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	90 93 1d 02 	sts	0x021D, r25
    13a4:	80 93 1c 02 	sts	0x021C, r24
		}
	}
}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	28 97       	sbiw	r28, 0x08	; 8
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	9c 83       	std	Y+4, r25	; 0x04
    13c8:	8b 83       	std	Y+3, r24	; 0x03
    13ca:	7e 83       	std	Y+6, r23	; 0x06
    13cc:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    13ce:	8a e2       	ldi	r24, 0x2A	; 42
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 c1 14 	call	0x2982	; 0x2982 <pvPortMalloc>
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	9a 81       	ldd	r25, Y+2	; 0x02
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	69 f1       	breq	.+90     	; 0x143c <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	39 f4       	brne	.+14     	; 0x13f8 <prvAllocateTCBAndStack+0x46>
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	0e 94 c1 14 	call	0x2982	; 0x2982 <pvPortMalloc>
    13f2:	98 87       	std	Y+8, r25	; 0x08
    13f4:	8f 83       	std	Y+7, r24	; 0x07
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <prvAllocateTCBAndStack+0x4e>
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	98 87       	std	Y+8, r25	; 0x08
    13fe:	8f 83       	std	Y+7, r24	; 0x07
    1400:	e9 81       	ldd	r30, Y+1	; 0x01
    1402:	fa 81       	ldd	r31, Y+2	; 0x02
    1404:	8f 81       	ldd	r24, Y+7	; 0x07
    1406:	98 85       	ldd	r25, Y+8	; 0x08
    1408:	90 8f       	std	Z+24, r25	; 0x18
    140a:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    140c:	e9 81       	ldd	r30, Y+1	; 0x01
    140e:	fa 81       	ldd	r31, Y+2	; 0x02
    1410:	87 89       	ldd	r24, Z+23	; 0x17
    1412:	90 8d       	ldd	r25, Z+24	; 0x18
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	39 f4       	brne	.+14     	; 0x1426 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vPortFree>
			pxNewTCB = NULL;
    1420:	1a 82       	std	Y+2, r1	; 0x02
    1422:	19 82       	std	Y+1, r1	; 0x01
    1424:	0b c0       	rjmp	.+22     	; 0x143c <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	87 89       	ldd	r24, Z+23	; 0x17
    142c:	90 8d       	ldd	r25, Z+24	; 0x18
    142e:	2b 81       	ldd	r18, Y+3	; 0x03
    1430:	3c 81       	ldd	r19, Y+4	; 0x04
    1432:	65 ea       	ldi	r22, 0xA5	; 165
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	a9 01       	movw	r20, r18
    1438:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <memset>
		}
	}

	return pxNewTCB;
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1440:	28 96       	adiw	r28, 0x08	; 8
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <usTaskCheckFreeStackSpace+0x6>
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	9a 83       	std	Y+2, r25	; 0x02
    1460:	89 83       	std	Y+1, r24	; 0x01
	register unsigned short usCount = 0U;
    1462:	1c 82       	std	Y+4, r1	; 0x04
    1464:	1b 82       	std	Y+3, r1	; 0x03
    1466:	0a c0       	rjmp	.+20     	; 0x147c <usTaskCheckFreeStackSpace+0x2a>

		while( *pucStackByte == tskSTACK_FILL_BYTE )
		{
			pucStackByte -= portSTACK_GROWTH;
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
			usCount++;
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	9c 83       	std	Y+4, r25	; 0x04
    147a:	8b 83       	std	Y+3, r24	; 0x03

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    147c:	e9 81       	ldd	r30, Y+1	; 0x01
    147e:	fa 81       	ldd	r31, Y+2	; 0x02
    1480:	80 81       	ld	r24, Z
    1482:	85 3a       	cpi	r24, 0xA5	; 165
    1484:	89 f3       	breq	.-30     	; 0x1468 <usTaskCheckFreeStackSpace+0x16>
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );

		return usCount;
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	9c 81       	ldd	r25, Y+4	; 0x04
	}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	29 97       	sbiw	r28, 0x09	; 9
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	9f 83       	std	Y+7, r25	; 0x07
    14ae:	8e 83       	std	Y+6, r24	; 0x06
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    14b0:	8e 81       	ldd	r24, Y+6	; 0x06
    14b2:	9f 81       	ldd	r25, Y+7	; 0x07
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	39 f4       	brne	.+14     	; 0x14c6 <uxTaskGetStackHighWaterMark+0x2e>
    14b8:	80 91 26 02 	lds	r24, 0x0226
    14bc:	90 91 27 02 	lds	r25, 0x0227
    14c0:	99 87       	std	Y+9, r25	; 0x09
    14c2:	88 87       	std	Y+8, r24	; 0x08
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <uxTaskGetStackHighWaterMark+0x36>
    14c6:	8e 81       	ldd	r24, Y+6	; 0x06
    14c8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ca:	99 87       	std	Y+9, r25	; 0x09
    14cc:	88 87       	std	Y+8, r24	; 0x08
    14ce:	88 85       	ldd	r24, Y+8	; 0x08
    14d0:	99 85       	ldd	r25, Y+9	; 0x09
    14d2:	9d 83       	std	Y+5, r25	; 0x05
    14d4:	8c 83       	std	Y+4, r24	; 0x04

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    14d6:	ec 81       	ldd	r30, Y+4	; 0x04
    14d8:	fd 81       	ldd	r31, Y+5	; 0x05
    14da:	87 89       	ldd	r24, Z+23	; 0x17
    14dc:	90 8d       	ldd	r25, Z+24	; 0x18
    14de:	9b 83       	std	Y+3, r25	; 0x03
    14e0:	8a 83       	std	Y+2, r24	; 0x02
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	9b 81       	ldd	r25, Y+3	; 0x03
    14e6:	0e 94 29 0a 	call	0x1452	; 0x1452 <usTaskCheckFreeStackSpace>
    14ea:	89 83       	std	Y+1, r24	; 0x01

		return uxReturn;
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
	}
    14ee:	29 96       	adiw	r28, 0x09	; 9
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	0f 92       	push	r0
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    150c:	80 91 26 02 	lds	r24, 0x0226
    1510:	90 91 27 02 	lds	r25, 0x0227
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <vTaskPriorityInherit+0x6>
    152c:	0f 92       	push	r0
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	9c 83       	std	Y+4, r25	; 0x04
    1534:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	09 f4       	brne	.+2      	; 0x1548 <vTaskPriorityInherit+0x22>
    1546:	6d c0       	rjmp	.+218    	; 0x1622 <vTaskPriorityInherit+0xfc>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1548:	e9 81       	ldd	r30, Y+1	; 0x01
    154a:	fa 81       	ldd	r31, Y+2	; 0x02
    154c:	96 89       	ldd	r25, Z+22	; 0x16
    154e:	e0 91 26 02 	lds	r30, 0x0226
    1552:	f0 91 27 02 	lds	r31, 0x0227
    1556:	86 89       	ldd	r24, Z+22	; 0x16
    1558:	98 17       	cp	r25, r24
    155a:	08 f0       	brcs	.+2      	; 0x155e <vTaskPriorityInherit+0x38>
    155c:	62 c0       	rjmp	.+196    	; 0x1622 <vTaskPriorityInherit+0xfc>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    155e:	e0 91 26 02 	lds	r30, 0x0226
    1562:	f0 91 27 02 	lds	r31, 0x0227
    1566:	86 89       	ldd	r24, Z+22	; 0x16
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	84 e0       	ldi	r24, 0x04	; 4
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	82 1b       	sub	r24, r18
    1572:	93 0b       	sbc	r25, r19
    1574:	e9 81       	ldd	r30, Y+1	; 0x01
    1576:	fa 81       	ldd	r31, Y+2	; 0x02
    1578:	95 87       	std	Z+13, r25	; 0x0d
    157a:	84 87       	std	Z+12, r24	; 0x0c

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	42 85       	ldd	r20, Z+10	; 0x0a
    1582:	53 85       	ldd	r21, Z+11	; 0x0b
    1584:	e9 81       	ldd	r30, Y+1	; 0x01
    1586:	fa 81       	ldd	r31, Y+2	; 0x02
    1588:	86 89       	ldd	r24, Z+22	; 0x16
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	c9 01       	movw	r24, r18
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	82 0f       	add	r24, r18
    159e:	93 1f       	adc	r25, r19
    15a0:	8d 5c       	subi	r24, 0xCD	; 205
    15a2:	9d 4f       	sbci	r25, 0xFD	; 253
    15a4:	48 17       	cp	r20, r24
    15a6:	59 07       	cpc	r21, r25
    15a8:	a1 f5       	brne	.+104    	; 0x1612 <vTaskPriorityInherit+0xec>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	02 96       	adiw	r24, 0x02	; 2
    15b0:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    15b4:	e0 91 26 02 	lds	r30, 0x0226
    15b8:	f0 91 27 02 	lds	r31, 0x0227
    15bc:	86 89       	ldd	r24, Z+22	; 0x16
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	86 8b       	std	Z+22, r24	; 0x16
					prvAddTaskToReadyQueue( pxTCB );
    15c4:	e9 81       	ldd	r30, Y+1	; 0x01
    15c6:	fa 81       	ldd	r31, Y+2	; 0x02
    15c8:	96 89       	ldd	r25, Z+22	; 0x16
    15ca:	80 91 2c 02 	lds	r24, 0x022C
    15ce:	89 17       	cp	r24, r25
    15d0:	28 f4       	brcc	.+10     	; 0x15dc <vTaskPriorityInherit+0xb6>
    15d2:	e9 81       	ldd	r30, Y+1	; 0x01
    15d4:	fa 81       	ldd	r31, Y+2	; 0x02
    15d6:	86 89       	ldd	r24, Z+22	; 0x16
    15d8:	80 93 2c 02 	sts	0x022C, r24
    15dc:	e9 81       	ldd	r30, Y+1	; 0x01
    15de:	fa 81       	ldd	r31, Y+2	; 0x02
    15e0:	86 89       	ldd	r24, Z+22	; 0x16
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	c9 01       	movw	r24, r18
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	82 0f       	add	r24, r18
    15f6:	93 1f       	adc	r25, r19
    15f8:	ac 01       	movw	r20, r24
    15fa:	4d 5c       	subi	r20, 0xCD	; 205
    15fc:	5d 4f       	sbci	r21, 0xFD	; 253
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	9c 01       	movw	r18, r24
    1604:	2e 5f       	subi	r18, 0xFE	; 254
    1606:	3f 4f       	sbci	r19, 0xFF	; 255
    1608:	ca 01       	movw	r24, r20
    160a:	b9 01       	movw	r22, r18
    160c:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
    1610:	08 c0       	rjmp	.+16     	; 0x1622 <vTaskPriorityInherit+0xfc>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1612:	e0 91 26 02 	lds	r30, 0x0226
    1616:	f0 91 27 02 	lds	r31, 0x0227
    161a:	86 89       	ldd	r24, Z+22	; 0x16
    161c:	e9 81       	ldd	r30, Y+1	; 0x01
    161e:	fa 81       	ldd	r31, Y+2	; 0x02
    1620:	86 8b       	std	Z+22, r24	; 0x16
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <vTaskPriorityDisinherit+0x6>
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	9c 83       	std	Y+4, r25	; 0x04
    163e:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	9c 81       	ldd	r25, Y+4	; 0x04
    1644:	9a 83       	std	Y+2, r25	; 0x02
    1646:	89 83       	std	Y+1, r24	; 0x01

		if( pxMutexHolder != NULL )
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	09 f4       	brne	.+2      	; 0x1652 <vTaskPriorityDisinherit+0x22>
    1650:	47 c0       	rjmp	.+142    	; 0x16e0 <vTaskPriorityDisinherit+0xb0>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1652:	e9 81       	ldd	r30, Y+1	; 0x01
    1654:	fa 81       	ldd	r31, Y+2	; 0x02
    1656:	96 89       	ldd	r25, Z+22	; 0x16
    1658:	e9 81       	ldd	r30, Y+1	; 0x01
    165a:	fa 81       	ldd	r31, Y+2	; 0x02
    165c:	81 a5       	ldd	r24, Z+41	; 0x29
    165e:	98 17       	cp	r25, r24
    1660:	09 f4       	brne	.+2      	; 0x1664 <vTaskPriorityDisinherit+0x34>
    1662:	3e c0       	rjmp	.+124    	; 0x16e0 <vTaskPriorityDisinherit+0xb0>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	02 96       	adiw	r24, 0x02	; 2
    166a:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    166e:	e9 81       	ldd	r30, Y+1	; 0x01
    1670:	fa 81       	ldd	r31, Y+2	; 0x02
    1672:	81 a5       	ldd	r24, Z+41	; 0x29
    1674:	e9 81       	ldd	r30, Y+1	; 0x01
    1676:	fa 81       	ldd	r31, Y+2	; 0x02
    1678:	86 8b       	std	Z+22, r24	; 0x16
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    167a:	e9 81       	ldd	r30, Y+1	; 0x01
    167c:	fa 81       	ldd	r31, Y+2	; 0x02
    167e:	86 89       	ldd	r24, Z+22	; 0x16
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	84 e0       	ldi	r24, 0x04	; 4
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	82 1b       	sub	r24, r18
    168a:	93 0b       	sbc	r25, r19
    168c:	e9 81       	ldd	r30, Y+1	; 0x01
    168e:	fa 81       	ldd	r31, Y+2	; 0x02
    1690:	95 87       	std	Z+13, r25	; 0x0d
    1692:	84 87       	std	Z+12, r24	; 0x0c
				prvAddTaskToReadyQueue( pxTCB );
    1694:	e9 81       	ldd	r30, Y+1	; 0x01
    1696:	fa 81       	ldd	r31, Y+2	; 0x02
    1698:	96 89       	ldd	r25, Z+22	; 0x16
    169a:	80 91 2c 02 	lds	r24, 0x022C
    169e:	89 17       	cp	r24, r25
    16a0:	28 f4       	brcc	.+10     	; 0x16ac <vTaskPriorityDisinherit+0x7c>
    16a2:	e9 81       	ldd	r30, Y+1	; 0x01
    16a4:	fa 81       	ldd	r31, Y+2	; 0x02
    16a6:	86 89       	ldd	r24, Z+22	; 0x16
    16a8:	80 93 2c 02 	sts	0x022C, r24
    16ac:	e9 81       	ldd	r30, Y+1	; 0x01
    16ae:	fa 81       	ldd	r31, Y+2	; 0x02
    16b0:	86 89       	ldd	r24, Z+22	; 0x16
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	c9 01       	movw	r24, r18
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	82 0f       	add	r24, r18
    16c6:	93 1f       	adc	r25, r19
    16c8:	ac 01       	movw	r20, r24
    16ca:	4d 5c       	subi	r20, 0xCD	; 205
    16cc:	5d 4f       	sbci	r21, 0xFD	; 253
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	9c 01       	movw	r18, r24
    16d4:	2e 5f       	subi	r18, 0xFE	; 254
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
    16d8:	ca 01       	movw	r24, r20
    16da:	b9 01       	movw	r22, r18
    16dc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
			}
		}
	}
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <xQueueGenericReset+0x6>
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	6b 83       	std	Y+3, r22	; 0x03
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1704:	e9 81       	ldd	r30, Y+1	; 0x01
    1706:	fa 81       	ldd	r31, Y+2	; 0x02
    1708:	40 81       	ld	r20, Z
    170a:	51 81       	ldd	r21, Z+1	; 0x01
    170c:	e9 81       	ldd	r30, Y+1	; 0x01
    170e:	fa 81       	ldd	r31, Y+2	; 0x02
    1710:	83 8d       	ldd	r24, Z+27	; 0x1b
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	e9 81       	ldd	r30, Y+1	; 0x01
    1718:	fa 81       	ldd	r31, Y+2	; 0x02
    171a:	84 8d       	ldd	r24, Z+28	; 0x1c
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	bc 01       	movw	r22, r24
    1722:	26 9f       	mul	r18, r22
    1724:	c0 01       	movw	r24, r0
    1726:	27 9f       	mul	r18, r23
    1728:	90 0d       	add	r25, r0
    172a:	36 9f       	mul	r19, r22
    172c:	90 0d       	add	r25, r0
    172e:	11 24       	eor	r1, r1
    1730:	84 0f       	add	r24, r20
    1732:	95 1f       	adc	r25, r21
    1734:	e9 81       	ldd	r30, Y+1	; 0x01
    1736:	fa 81       	ldd	r31, Y+2	; 0x02
    1738:	93 83       	std	Z+3, r25	; 0x03
    173a:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    173c:	e9 81       	ldd	r30, Y+1	; 0x01
    173e:	fa 81       	ldd	r31, Y+2	; 0x02
    1740:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1742:	e9 81       	ldd	r30, Y+1	; 0x01
    1744:	fa 81       	ldd	r31, Y+2	; 0x02
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	e9 81       	ldd	r30, Y+1	; 0x01
    174c:	fa 81       	ldd	r31, Y+2	; 0x02
    174e:	95 83       	std	Z+5, r25	; 0x05
    1750:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    1752:	e9 81       	ldd	r30, Y+1	; 0x01
    1754:	fa 81       	ldd	r31, Y+2	; 0x02
    1756:	40 81       	ld	r20, Z
    1758:	51 81       	ldd	r21, Z+1	; 0x01
    175a:	e9 81       	ldd	r30, Y+1	; 0x01
    175c:	fa 81       	ldd	r31, Y+2	; 0x02
    175e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c 01       	movw	r18, r24
    1766:	21 50       	subi	r18, 0x01	; 1
    1768:	30 40       	sbci	r19, 0x00	; 0
    176a:	e9 81       	ldd	r30, Y+1	; 0x01
    176c:	fa 81       	ldd	r31, Y+2	; 0x02
    176e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	bc 01       	movw	r22, r24
    1776:	26 9f       	mul	r18, r22
    1778:	c0 01       	movw	r24, r0
    177a:	27 9f       	mul	r18, r23
    177c:	90 0d       	add	r25, r0
    177e:	36 9f       	mul	r19, r22
    1780:	90 0d       	add	r25, r0
    1782:	11 24       	eor	r1, r1
    1784:	84 0f       	add	r24, r20
    1786:	95 1f       	adc	r25, r21
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	97 83       	std	Z+7, r25	; 0x07
    178e:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
    1790:	e9 81       	ldd	r30, Y+1	; 0x01
    1792:	fa 81       	ldd	r31, Y+2	; 0x02
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
    1798:	e9 81       	ldd	r30, Y+1	; 0x01
    179a:	fa 81       	ldd	r31, Y+2	; 0x02
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	88 23       	and	r24, r24
    17a4:	79 f4       	brne	.+30     	; 0x17c4 <xQueueGenericReset+0xd6>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    17a6:	e9 81       	ldd	r30, Y+1	; 0x01
    17a8:	fa 81       	ldd	r31, Y+2	; 0x02
    17aa:	80 85       	ldd	r24, Z+8	; 0x08
    17ac:	88 23       	and	r24, r24
    17ae:	a1 f0       	breq	.+40     	; 0x17d8 <xQueueGenericReset+0xea>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	08 96       	adiw	r24, 0x08	; 8
    17b6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	69 f4       	brne	.+26     	; 0x17d8 <xQueueGenericReset+0xea>
				{
					portYIELD_WITHIN_API();
    17be:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
    17c2:	0a c0       	rjmp	.+20     	; 0x17d8 <xQueueGenericReset+0xea>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	9a 81       	ldd	r25, Y+2	; 0x02
    17c8:	08 96       	adiw	r24, 0x08	; 8
    17ca:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	9a 81       	ldd	r25, Y+2	; 0x02
    17d2:	41 96       	adiw	r24, 0x11	; 17
    17d4:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	29 97       	sbiw	r28, 0x09	; 9
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	8f 83       	std	Y+7, r24	; 0x07
    1800:	68 87       	std	Y+8, r22	; 0x08
    1802:	49 87       	std	Y+9, r20	; 0x09
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    1804:	1a 82       	std	Y+2, r1	; 0x02
    1806:	19 82       	std	Y+1, r1	; 0x01
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1808:	8f 81       	ldd	r24, Y+7	; 0x07
    180a:	88 23       	and	r24, r24
    180c:	09 f4       	brne	.+2      	; 0x1810 <xQueueGenericCreate+0x26>
    180e:	3f c0       	rjmp	.+126    	; 0x188e <xQueueGenericCreate+0xa4>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1810:	8f e1       	ldi	r24, 0x1F	; 31
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 c1 14 	call	0x2982	; 0x2982 <pvPortMalloc>
    1818:	9e 83       	std	Y+6, r25	; 0x06
    181a:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    181c:	8d 81       	ldd	r24, Y+5	; 0x05
    181e:	9e 81       	ldd	r25, Y+6	; 0x06
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	a9 f1       	breq	.+106    	; 0x188e <xQueueGenericCreate+0xa4>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    1824:	8f 81       	ldd	r24, Y+7	; 0x07
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	88 85       	ldd	r24, Y+8	; 0x08
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	ac 01       	movw	r20, r24
    1832:	24 9f       	mul	r18, r20
    1834:	c0 01       	movw	r24, r0
    1836:	25 9f       	mul	r18, r21
    1838:	90 0d       	add	r25, r0
    183a:	34 9f       	mul	r19, r20
    183c:	90 0d       	add	r25, r0
    183e:	11 24       	eor	r1, r1
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	9c 83       	std	Y+4, r25	; 0x04
    1844:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	0e 94 c1 14 	call	0x2982	; 0x2982 <pvPortMalloc>
    184e:	ed 81       	ldd	r30, Y+5	; 0x05
    1850:	fe 81       	ldd	r31, Y+6	; 0x06
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    1856:	ed 81       	ldd	r30, Y+5	; 0x05
    1858:	fe 81       	ldd	r31, Y+6	; 0x06
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	91 f0       	breq	.+36     	; 0x1886 <xQueueGenericCreate+0x9c>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    1862:	ed 81       	ldd	r30, Y+5	; 0x05
    1864:	fe 81       	ldd	r31, Y+6	; 0x06
    1866:	8f 81       	ldd	r24, Y+7	; 0x07
    1868:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    186a:	ed 81       	ldd	r30, Y+5	; 0x05
    186c:	fe 81       	ldd	r31, Y+6	; 0x06
    186e:	88 85       	ldd	r24, Y+8	; 0x08
    1870:	84 8f       	std	Z+28, r24	; 0x1c
				xQueueGenericReset( pxNewQueue, pdTRUE );
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	0e 94 77 0b 	call	0x16ee	; 0x16ee <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	04 c0       	rjmp	.+8      	; 0x188e <xQueueGenericCreate+0xa4>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	9e 81       	ldd	r25, Y+6	; 0x06
    188a:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1892:	29 96       	adiw	r28, 0x09	; 9
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <xQueueCreateMutex+0x6>
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	8b 83       	std	Y+3, r24	; 0x03
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    18b0:	8f e1       	ldi	r24, 0x1F	; 31
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 c1 14 	call	0x2982	; 0x2982 <pvPortMalloc>
    18b8:	9a 83       	std	Y+2, r25	; 0x02
    18ba:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	9a 81       	ldd	r25, Y+2	; 0x02
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	a9 f1       	breq	.+106    	; 0x192e <xQueueCreateMutex+0x8a>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	13 82       	std	Z+3, r1	; 0x03
    18ca:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    18cc:	e9 81       	ldd	r30, Y+1	; 0x01
    18ce:	fa 81       	ldd	r31, Y+2	; 0x02
    18d0:	11 82       	std	Z+1, r1	; 0x01
    18d2:	10 82       	st	Z, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    18d4:	e9 81       	ldd	r30, Y+1	; 0x01
    18d6:	fa 81       	ldd	r31, Y+2	; 0x02
    18d8:	15 82       	std	Z+5, r1	; 0x05
    18da:	14 82       	std	Z+4, r1	; 0x04
			pxNewQueue->pcReadFrom = NULL;
    18dc:	e9 81       	ldd	r30, Y+1	; 0x01
    18de:	fa 81       	ldd	r31, Y+2	; 0x02
    18e0:	17 82       	std	Z+7, r1	; 0x07
    18e2:	16 82       	std	Z+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    18e4:	e9 81       	ldd	r30, Y+1	; 0x01
    18e6:	fa 81       	ldd	r31, Y+2	; 0x02
    18e8:	12 8e       	std	Z+26, r1	; 0x1a
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    18ea:	e9 81       	ldd	r30, Y+1	; 0x01
    18ec:	fa 81       	ldd	r31, Y+2	; 0x02
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	83 8f       	std	Z+27, r24	; 0x1b
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    18f2:	e9 81       	ldd	r30, Y+1	; 0x01
    18f4:	fa 81       	ldd	r31, Y+2	; 0x02
    18f6:	14 8e       	std	Z+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    18f8:	e9 81       	ldd	r30, Y+1	; 0x01
    18fa:	fa 81       	ldd	r31, Y+2	; 0x02
    18fc:	8f ef       	ldi	r24, 0xFF	; 255
    18fe:	85 8f       	std	Z+29, r24	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    1900:	e9 81       	ldd	r30, Y+1	; 0x01
    1902:	fa 81       	ldd	r31, Y+2	; 0x02
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	86 8f       	std	Z+30, r24	; 0x1e
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	08 96       	adiw	r24, 0x08	; 8
    190e:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	41 96       	adiw	r24, 0x11	; 17
    1918:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	0e 94 9f 0c 	call	0x193e	; 0x193e <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	2c 97       	sbiw	r28, 0x0c	; 12
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	78 87       	std	Y+8, r23	; 0x08
    1958:	6f 83       	std	Y+7, r22	; 0x07
    195a:	5a 87       	std	Y+10, r21	; 0x0a
    195c:	49 87       	std	Y+9, r20	; 0x09
    195e:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1960:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1968:	ed 81       	ldd	r30, Y+5	; 0x05
    196a:	fe 81       	ldd	r31, Y+6	; 0x06
    196c:	92 8d       	ldd	r25, Z+26	; 0x1a
    196e:	ed 81       	ldd	r30, Y+5	; 0x05
    1970:	fe 81       	ldd	r31, Y+6	; 0x06
    1972:	83 8d       	ldd	r24, Z+27	; 0x1b
    1974:	98 17       	cp	r25, r24
    1976:	d8 f4       	brcc	.+54     	; 0x19ae <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	2f 81       	ldd	r18, Y+7	; 0x07
    197e:	38 85       	ldd	r19, Y+8	; 0x08
    1980:	b9 01       	movw	r22, r18
    1982:	4b 85       	ldd	r20, Y+11	; 0x0b
    1984:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1988:	ed 81       	ldd	r30, Y+5	; 0x05
    198a:	fe 81       	ldd	r31, Y+6	; 0x06
    198c:	81 89       	ldd	r24, Z+17	; 0x11
    198e:	88 23       	and	r24, r24
    1990:	49 f0       	breq	.+18     	; 0x19a4 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	9e 81       	ldd	r25, Y+6	; 0x06
    1996:	41 96       	adiw	r24, 0x11	; 17
    1998:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	11 f4       	brne	.+4      	; 0x19a4 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    19a0:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	8c 87       	std	Y+12, r24	; 0x0c
    19ac:	5c c0       	rjmp	.+184    	; 0x1a66 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    19ae:	89 85       	ldd	r24, Y+9	; 0x09
    19b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	21 f4       	brne	.+8      	; 0x19be <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    19b6:	0f 90       	pop	r0
    19b8:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    19ba:	1c 86       	std	Y+12, r1	; 0x0c
    19bc:	54 c0       	rjmp	.+168    	; 0x1a66 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	88 23       	and	r24, r24
    19c2:	31 f4       	brne	.+12     	; 0x19d0 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    19c4:	ce 01       	movw	r24, r28
    19c6:	02 96       	adiw	r24, 0x02	; 2
    19c8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    19d0:	0f 90       	pop	r0
    19d2:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    19d4:	0e 94 82 05 	call	0xb04	; 0xb04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	0f 92       	push	r0
    19de:	ed 81       	ldd	r30, Y+5	; 0x05
    19e0:	fe 81       	ldd	r31, Y+6	; 0x06
    19e2:	85 8d       	ldd	r24, Z+29	; 0x1d
    19e4:	8f 3f       	cpi	r24, 0xFF	; 255
    19e6:	19 f4       	brne	.+6      	; 0x19ee <xQueueGenericSend+0xb0>
    19e8:	ed 81       	ldd	r30, Y+5	; 0x05
    19ea:	fe 81       	ldd	r31, Y+6	; 0x06
    19ec:	15 8e       	std	Z+29, r1	; 0x1d
    19ee:	ed 81       	ldd	r30, Y+5	; 0x05
    19f0:	fe 81       	ldd	r31, Y+6	; 0x06
    19f2:	86 8d       	ldd	r24, Z+30	; 0x1e
    19f4:	8f 3f       	cpi	r24, 0xFF	; 255
    19f6:	19 f4       	brne	.+6      	; 0x19fe <xQueueGenericSend+0xc0>
    19f8:	ed 81       	ldd	r30, Y+5	; 0x05
    19fa:	fe 81       	ldd	r31, Y+6	; 0x06
    19fc:	16 8e       	std	Z+30, r1	; 0x1e
    19fe:	0f 90       	pop	r0
    1a00:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1a02:	ce 01       	movw	r24, r28
    1a04:	02 96       	adiw	r24, 0x02	; 2
    1a06:	9e 01       	movw	r18, r28
    1a08:	27 5f       	subi	r18, 0xF7	; 247
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	b9 01       	movw	r22, r18
    1a0e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <xTaskCheckForTimeOut>
    1a12:	88 23       	and	r24, r24
    1a14:	09 f5       	brne	.+66     	; 0x1a58 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <prvIsQueueFull>
    1a1e:	88 23       	and	r24, r24
    1a20:	a1 f0       	breq	.+40     	; 0x1a4a <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	9e 81       	ldd	r25, Y+6	; 0x06
    1a26:	08 96       	adiw	r24, 0x08	; 8
    1a28:	29 85       	ldd	r18, Y+9	; 0x09
    1a2a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a2c:	b9 01       	movw	r22, r18
    1a2e:	0e 94 a4 07 	call	0xf48	; 0xf48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1a3a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
    1a3e:	88 23       	and	r24, r24
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <xQueueGenericSend+0x106>
    1a42:	8f cf       	rjmp	.-226    	; 0x1962 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    1a44:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
    1a48:	8c cf       	rjmp	.-232    	; 0x1962 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4e:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1a52:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
    1a56:	85 cf       	rjmp	.-246    	; 0x1962 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1a58:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1a60:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1a64:	1c 86       	std	Y+12, r1	; 0x0c
    1a66:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    1a68:	2c 96       	adiw	r28, 0x0c	; 12
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	29 97       	sbiw	r28, 0x09	; 9
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	9c 83       	std	Y+4, r25	; 0x04
    1a90:	8b 83       	std	Y+3, r24	; 0x03
    1a92:	7e 83       	std	Y+6, r23	; 0x06
    1a94:	6d 83       	std	Y+5, r22	; 0x05
    1a96:	58 87       	std	Y+8, r21	; 0x08
    1a98:	4f 83       	std	Y+7, r20	; 0x07
    1a9a:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1a9c:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1a9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa0:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aa4:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa6:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa8:	83 8d       	ldd	r24, Z+27	; 0x1b
    1aaa:	98 17       	cp	r25, r24
    1aac:	60 f5       	brcc	.+88     	; 0x1b06 <xQueueGenericSendFromISR+0x8c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab6:	b9 01       	movw	r22, r18
    1ab8:	49 85       	ldd	r20, Y+9	; 0x09
    1aba:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1abe:	eb 81       	ldd	r30, Y+3	; 0x03
    1ac0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ac2:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ac4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac6:	a9 f4       	brne	.+42     	; 0x1af2 <xQueueGenericSendFromISR+0x78>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ac8:	eb 81       	ldd	r30, Y+3	; 0x03
    1aca:	fc 81       	ldd	r31, Y+4	; 0x04
    1acc:	81 89       	ldd	r24, Z+17	; 0x11
    1ace:	88 23       	and	r24, r24
    1ad0:	b9 f0       	breq	.+46     	; 0x1b00 <xQueueGenericSendFromISR+0x86>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	41 96       	adiw	r24, 0x11	; 17
    1ad8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    1adc:	88 23       	and	r24, r24
    1ade:	81 f0       	breq	.+32     	; 0x1b00 <xQueueGenericSendFromISR+0x86>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
    1ae0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae2:	98 85       	ldd	r25, Y+8	; 0x08
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <xQueueGenericSendFromISR+0x86>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1ae8:	ef 81       	ldd	r30, Y+7	; 0x07
    1aea:	f8 85       	ldd	r31, Y+8	; 0x08
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	80 83       	st	Z, r24
    1af0:	07 c0       	rjmp	.+14     	; 0x1b00 <xQueueGenericSendFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1af2:	eb 81       	ldd	r30, Y+3	; 0x03
    1af4:	fc 81       	ldd	r31, Y+4	; 0x04
    1af6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1af8:	8f 5f       	subi	r24, 0xFF	; 255
    1afa:	eb 81       	ldd	r30, Y+3	; 0x03
    1afc:	fc 81       	ldd	r31, Y+4	; 0x04
    1afe:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	8a 83       	std	Y+2, r24	; 0x02
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <xQueueGenericSendFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1b06:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b0a:	29 96       	adiw	r28, 0x09	; 9
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	2e 97       	sbiw	r28, 0x0e	; 14
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	98 87       	std	Y+8, r25	; 0x08
    1b32:	8f 83       	std	Y+7, r24	; 0x07
    1b34:	7a 87       	std	Y+10, r23	; 0x0a
    1b36:	69 87       	std	Y+9, r22	; 0x09
    1b38:	5c 87       	std	Y+12, r21	; 0x0c
    1b3a:	4b 87       	std	Y+11, r20	; 0x0b
    1b3c:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1b3e:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1b46:	ef 81       	ldd	r30, Y+7	; 0x07
    1b48:	f8 85       	ldd	r31, Y+8	; 0x08
    1b4a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b4c:	88 23       	and	r24, r24
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <xQueueGenericReceive+0x36>
    1b50:	4b c0       	rjmp	.+150    	; 0x1be8 <xQueueGenericReceive+0xcc>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1b52:	ef 81       	ldd	r30, Y+7	; 0x07
    1b54:	f8 85       	ldd	r31, Y+8	; 0x08
    1b56:	86 81       	ldd	r24, Z+6	; 0x06
    1b58:	97 81       	ldd	r25, Z+7	; 0x07
    1b5a:	9a 83       	std	Y+2, r25	; 0x02
    1b5c:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1b5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b60:	98 85       	ldd	r25, Y+8	; 0x08
    1b62:	29 85       	ldd	r18, Y+9	; 0x09
    1b64:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b66:	b9 01       	movw	r22, r18
    1b68:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6e:	88 23       	and	r24, r24
    1b70:	11 f5       	brne	.+68     	; 0x1bb6 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1b72:	ef 81       	ldd	r30, Y+7	; 0x07
    1b74:	f8 85       	ldd	r31, Y+8	; 0x08
    1b76:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b78:	81 50       	subi	r24, 0x01	; 1
    1b7a:	ef 81       	ldd	r30, Y+7	; 0x07
    1b7c:	f8 85       	ldd	r31, Y+8	; 0x08
    1b7e:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1b80:	ef 81       	ldd	r30, Y+7	; 0x07
    1b82:	f8 85       	ldd	r31, Y+8	; 0x08
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	31 f4       	brne	.+12     	; 0x1b98 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    1b8c:	0e 94 80 0a 	call	0x1500	; 0x1500 <xTaskGetCurrentTaskHandle>
    1b90:	ef 81       	ldd	r30, Y+7	; 0x07
    1b92:	f8 85       	ldd	r31, Y+8	; 0x08
    1b94:	93 83       	std	Z+3, r25	; 0x03
    1b96:	82 83       	std	Z+2, r24	; 0x02
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b98:	ef 81       	ldd	r30, Y+7	; 0x07
    1b9a:	f8 85       	ldd	r31, Y+8	; 0x08
    1b9c:	80 85       	ldd	r24, Z+8	; 0x08
    1b9e:	88 23       	and	r24, r24
    1ba0:	f1 f0       	breq	.+60     	; 0x1bde <xQueueGenericReceive+0xc2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1ba2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba4:	98 85       	ldd	r25, Y+8	; 0x08
    1ba6:	08 96       	adiw	r24, 0x08	; 8
    1ba8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	b9 f4       	brne	.+46     	; 0x1bde <xQueueGenericReceive+0xc2>
						{
							portYIELD_WITHIN_API();
    1bb0:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
    1bb4:	14 c0       	rjmp	.+40     	; 0x1bde <xQueueGenericReceive+0xc2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    1bb6:	ef 81       	ldd	r30, Y+7	; 0x07
    1bb8:	f8 85       	ldd	r31, Y+8	; 0x08
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	97 83       	std	Z+7, r25	; 0x07
    1bc0:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1bc2:	ef 81       	ldd	r30, Y+7	; 0x07
    1bc4:	f8 85       	ldd	r31, Y+8	; 0x08
    1bc6:	81 89       	ldd	r24, Z+17	; 0x11
    1bc8:	88 23       	and	r24, r24
    1bca:	49 f0       	breq	.+18     	; 0x1bde <xQueueGenericReceive+0xc2>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1bcc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bce:	98 85       	ldd	r25, Y+8	; 0x08
    1bd0:	41 96       	adiw	r24, 0x11	; 17
    1bd2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    1bd6:	88 23       	and	r24, r24
    1bd8:	11 f0       	breq	.+4      	; 0x1bde <xQueueGenericReceive+0xc2>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1bda:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
    1bde:	0f 90       	pop	r0
    1be0:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	8e 87       	std	Y+14, r24	; 0x0e
    1be6:	6d c0       	rjmp	.+218    	; 0x1cc2 <xQueueGenericReceive+0x1a6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1be8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bea:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	21 f4       	brne	.+8      	; 0x1bf8 <xQueueGenericReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1bf4:	1e 86       	std	Y+14, r1	; 0x0e
    1bf6:	65 c0       	rjmp	.+202    	; 0x1cc2 <xQueueGenericReceive+0x1a6>
				}
				else if( xEntryTimeSet == pdFALSE )
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	88 23       	and	r24, r24
    1bfc:	31 f4       	brne	.+12     	; 0x1c0a <xQueueGenericReceive+0xee>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1bfe:	ce 01       	movw	r24, r28
    1c00:	04 96       	adiw	r24, 0x04	; 4
    1c02:	0e 94 54 08 	call	0x10a8	; 0x10a8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1c0e:	0e 94 82 05 	call	0xb04	; 0xb04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	0f 92       	push	r0
    1c18:	ef 81       	ldd	r30, Y+7	; 0x07
    1c1a:	f8 85       	ldd	r31, Y+8	; 0x08
    1c1c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <xQueueGenericReceive+0x10c>
    1c22:	ef 81       	ldd	r30, Y+7	; 0x07
    1c24:	f8 85       	ldd	r31, Y+8	; 0x08
    1c26:	15 8e       	std	Z+29, r1	; 0x1d
    1c28:	ef 81       	ldd	r30, Y+7	; 0x07
    1c2a:	f8 85       	ldd	r31, Y+8	; 0x08
    1c2c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c30:	19 f4       	brne	.+6      	; 0x1c38 <xQueueGenericReceive+0x11c>
    1c32:	ef 81       	ldd	r30, Y+7	; 0x07
    1c34:	f8 85       	ldd	r31, Y+8	; 0x08
    1c36:	16 8e       	std	Z+30, r1	; 0x1e
    1c38:	0f 90       	pop	r0
    1c3a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	04 96       	adiw	r24, 0x04	; 4
    1c40:	9e 01       	movw	r18, r28
    1c42:	25 5f       	subi	r18, 0xF5	; 245
    1c44:	3f 4f       	sbci	r19, 0xFF	; 255
    1c46:	b9 01       	movw	r22, r18
    1c48:	0e 94 6e 08 	call	0x10dc	; 0x10dc <xTaskCheckForTimeOut>
    1c4c:	88 23       	and	r24, r24
    1c4e:	91 f5       	brne	.+100    	; 0x1cb4 <xQueueGenericReceive+0x198>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1c50:	8f 81       	ldd	r24, Y+7	; 0x07
    1c52:	98 85       	ldd	r25, Y+8	; 0x08
    1c54:	0e 94 41 10 	call	0x2082	; 0x2082 <prvIsQueueEmpty>
    1c58:	88 23       	and	r24, r24
    1c5a:	29 f1       	breq	.+74     	; 0x1ca6 <xQueueGenericReceive+0x18a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1c5c:	ef 81       	ldd	r30, Y+7	; 0x07
    1c5e:	f8 85       	ldd	r31, Y+8	; 0x08
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	59 f4       	brne	.+22     	; 0x1c7e <xQueueGenericReceive+0x162>
					{
						portENTER_CRITICAL();
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1c6e:	ef 81       	ldd	r30, Y+7	; 0x07
    1c70:	f8 85       	ldd	r31, Y+8	; 0x08
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	0e 94 93 0a 	call	0x1526	; 0x1526 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    1c7a:	0f 90       	pop	r0
    1c7c:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c80:	98 85       	ldd	r25, Y+8	; 0x08
    1c82:	41 96       	adiw	r24, 0x11	; 17
    1c84:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c86:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c88:	b9 01       	movw	r22, r18
    1c8a:	0e 94 a4 07 	call	0xf48	; 0xf48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1c8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c90:	98 85       	ldd	r25, Y+8	; 0x08
    1c92:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1c96:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
    1c9a:	88 23       	and	r24, r24
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <xQueueGenericReceive+0x184>
    1c9e:	50 cf       	rjmp	.-352    	; 0x1b40 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    1ca0:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vPortYield>
    1ca4:	4d cf       	rjmp	.-358    	; 0x1b40 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1ca6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca8:	98 85       	ldd	r25, Y+8	; 0x08
    1caa:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1cae:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
    1cb2:	46 cf       	rjmp	.-372    	; 0x1b40 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb6:	98 85       	ldd	r25, Y+8	; 0x08
    1cb8:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1cbc:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1cc0:	1e 86       	std	Y+14, r1	; 0x0e
    1cc2:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    1cc4:	2e 96       	adiw	r28, 0x0e	; 14
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	28 97       	sbiw	r28, 0x08	; 8
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	9c 83       	std	Y+4, r25	; 0x04
    1cec:	8b 83       	std	Y+3, r24	; 0x03
    1cee:	7e 83       	std	Y+6, r23	; 0x06
    1cf0:	6d 83       	std	Y+5, r22	; 0x05
    1cf2:	58 87       	std	Y+8, r21	; 0x08
    1cf4:	4f 83       	std	Y+7, r20	; 0x07
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1cf6:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1cf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1cfc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cfe:	88 23       	and	r24, r24
    1d00:	91 f1       	breq	.+100    	; 0x1d66 <xQueueReceiveFromISR+0x90>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	2d 81       	ldd	r18, Y+5	; 0x05
    1d08:	3e 81       	ldd	r19, Y+6	; 0x06
    1d0a:	b9 01       	movw	r22, r18
    1d0c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1d10:	eb 81       	ldd	r30, Y+3	; 0x03
    1d12:	fc 81       	ldd	r31, Y+4	; 0x04
    1d14:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d16:	81 50       	subi	r24, 0x01	; 1
    1d18:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1c:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1d1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d20:	fc 81       	ldd	r31, Y+4	; 0x04
    1d22:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d24:	8f 3f       	cpi	r24, 0xFF	; 255
    1d26:	a9 f4       	brne	.+42     	; 0x1d52 <xQueueReceiveFromISR+0x7c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1d28:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2c:	80 85       	ldd	r24, Z+8	; 0x08
    1d2e:	88 23       	and	r24, r24
    1d30:	b9 f0       	breq	.+46     	; 0x1d60 <xQueueReceiveFromISR+0x8a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	08 96       	adiw	r24, 0x08	; 8
    1d38:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    1d3c:	88 23       	and	r24, r24
    1d3e:	81 f0       	breq	.+32     	; 0x1d60 <xQueueReceiveFromISR+0x8a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1d40:	8f 81       	ldd	r24, Y+7	; 0x07
    1d42:	98 85       	ldd	r25, Y+8	; 0x08
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	61 f0       	breq	.+24     	; 0x1d60 <xQueueReceiveFromISR+0x8a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1d48:	ef 81       	ldd	r30, Y+7	; 0x07
    1d4a:	f8 85       	ldd	r31, Y+8	; 0x08
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	80 83       	st	Z, r24
    1d50:	07 c0       	rjmp	.+14     	; 0x1d60 <xQueueReceiveFromISR+0x8a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1d52:	eb 81       	ldd	r30, Y+3	; 0x03
    1d54:	fc 81       	ldd	r31, Y+4	; 0x04
    1d56:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d58:	8f 5f       	subi	r24, 0xFF	; 255
    1d5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d5e:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	8a 83       	std	Y+2, r24	; 0x02
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <xQueueReceiveFromISR+0x92>
		}
		else
		{
			xReturn = pdFAIL;
    1d66:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d6a:	28 96       	adiw	r28, 0x08	; 8
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <uxQueueMessagesWaiting+0x6>
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	9b 83       	std	Y+3, r25	; 0x03
    1d88:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1d90:	ea 81       	ldd	r30, Y+2	; 0x02
    1d92:	fb 81       	ldd	r31, Y+3	; 0x03
    1d94:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d96:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1d98:	0f 90       	pop	r0
    1d9a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <uxQueueMessagesWaitingFromISR+0x6>
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	9b 83       	std	Y+3, r25	; 0x03
    1db6:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    1db8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dba:	fb 81       	ldd	r31, Y+3	; 0x03
    1dbc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dbe:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	0f 92       	push	r0
    1dd4:	0f 92       	push	r0
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    1dde:	e9 81       	ldd	r30, Y+1	; 0x01
    1de0:	fa 81       	ldd	r31, Y+2	; 0x02
    1de2:	80 81       	ld	r24, Z
    1de4:	91 81       	ldd	r25, Z+1	; 0x01
    1de6:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vPortFree>
	vPortFree( pxQueue );
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	9a 81       	ldd	r25, Y+2	; 0x02
    1dee:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vPortFree>
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <prvCopyDataToQueue+0x6>
    1e02:	0f 92       	push	r0
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	7c 83       	std	Y+4, r23	; 0x04
    1e10:	6b 83       	std	Y+3, r22	; 0x03
    1e12:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1e14:	e9 81       	ldd	r30, Y+1	; 0x01
    1e16:	fa 81       	ldd	r31, Y+2	; 0x02
    1e18:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e1a:	88 23       	and	r24, r24
    1e1c:	91 f4       	brne	.+36     	; 0x1e42 <prvCopyDataToQueue+0x46>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e20:	fa 81       	ldd	r31, Y+2	; 0x02
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <prvCopyDataToQueue+0x30>
    1e2a:	7f c0       	rjmp	.+254    	; 0x1f2a <prvCopyDataToQueue+0x12e>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e30:	82 81       	ldd	r24, Z+2	; 0x02
    1e32:	93 81       	ldd	r25, Z+3	; 0x03
    1e34:	0e 94 18 0b 	call	0x1630	; 0x1630 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    1e38:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3c:	13 82       	std	Z+3, r1	; 0x03
    1e3e:	12 82       	std	Z+2, r1	; 0x02
    1e40:	74 c0       	rjmp	.+232    	; 0x1f2a <prvCopyDataToQueue+0x12e>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	88 23       	and	r24, r24
    1e46:	99 f5       	brne	.+102    	; 0x1eae <prvCopyDataToQueue+0xb2>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1e48:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4c:	64 81       	ldd	r22, Z+4	; 0x04
    1e4e:	75 81       	ldd	r23, Z+5	; 0x05
    1e50:	e9 81       	ldd	r30, Y+1	; 0x01
    1e52:	fa 81       	ldd	r31, Y+2	; 0x02
    1e54:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e56:	48 2f       	mov	r20, r24
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	cb 01       	movw	r24, r22
    1e60:	b9 01       	movw	r22, r18
    1e62:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1e66:	e9 81       	ldd	r30, Y+1	; 0x01
    1e68:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6a:	24 81       	ldd	r18, Z+4	; 0x04
    1e6c:	35 81       	ldd	r19, Z+5	; 0x05
    1e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e70:	fa 81       	ldd	r31, Y+2	; 0x02
    1e72:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	82 0f       	add	r24, r18
    1e7a:	93 1f       	adc	r25, r19
    1e7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e80:	95 83       	std	Z+5, r25	; 0x05
    1e82:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1e84:	e9 81       	ldd	r30, Y+1	; 0x01
    1e86:	fa 81       	ldd	r31, Y+2	; 0x02
    1e88:	24 81       	ldd	r18, Z+4	; 0x04
    1e8a:	35 81       	ldd	r19, Z+5	; 0x05
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	82 81       	ldd	r24, Z+2	; 0x02
    1e92:	93 81       	ldd	r25, Z+3	; 0x03
    1e94:	28 17       	cp	r18, r24
    1e96:	39 07       	cpc	r19, r25
    1e98:	08 f4       	brcc	.+2      	; 0x1e9c <prvCopyDataToQueue+0xa0>
    1e9a:	47 c0       	rjmp	.+142    	; 0x1f2a <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea0:	80 81       	ld	r24, Z
    1ea2:	91 81       	ldd	r25, Z+1	; 0x01
    1ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea8:	95 83       	std	Z+5, r25	; 0x05
    1eaa:	84 83       	std	Z+4, r24	; 0x04
    1eac:	3e c0       	rjmp	.+124    	; 0x1f2a <prvCopyDataToQueue+0x12e>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1eae:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb2:	66 81       	ldd	r22, Z+6	; 0x06
    1eb4:	77 81       	ldd	r23, Z+7	; 0x07
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	b9 01       	movw	r22, r18
    1ec8:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    1ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ece:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed0:	26 81       	ldd	r18, Z+6	; 0x06
    1ed2:	37 81       	ldd	r19, Z+7	; 0x07
    1ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed8:	84 8d       	ldd	r24, Z+28	; 0x1c
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	90 95       	com	r25
    1ee0:	81 95       	neg	r24
    1ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee4:	82 0f       	add	r24, r18
    1ee6:	93 1f       	adc	r25, r19
    1ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eea:	fa 81       	ldd	r31, Y+2	; 0x02
    1eec:	97 83       	std	Z+7, r25	; 0x07
    1eee:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    1ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef4:	26 81       	ldd	r18, Z+6	; 0x06
    1ef6:	37 81       	ldd	r19, Z+7	; 0x07
    1ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    1efa:	fa 81       	ldd	r31, Y+2	; 0x02
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	28 17       	cp	r18, r24
    1f02:	39 07       	cpc	r19, r25
    1f04:	90 f4       	brcc	.+36     	; 0x1f2a <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1f06:	e9 81       	ldd	r30, Y+1	; 0x01
    1f08:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0a:	22 81       	ldd	r18, Z+2	; 0x02
    1f0c:	33 81       	ldd	r19, Z+3	; 0x03
    1f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f10:	fa 81       	ldd	r31, Y+2	; 0x02
    1f12:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	90 95       	com	r25
    1f1a:	81 95       	neg	r24
    1f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1e:	82 0f       	add	r24, r18
    1f20:	93 1f       	adc	r25, r19
    1f22:	e9 81       	ldd	r30, Y+1	; 0x01
    1f24:	fa 81       	ldd	r31, Y+2	; 0x02
    1f26:	97 83       	std	Z+7, r25	; 0x07
    1f28:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f30:	8f 5f       	subi	r24, 0xFF	; 255
    1f32:	e9 81       	ldd	r30, Y+1	; 0x01
    1f34:	fa 81       	ldd	r31, Y+2	; 0x02
    1f36:	82 8f       	std	Z+26, r24	; 0x1a
}
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <prvCopyDataFromQueue+0x6>
    1f4e:	0f 92       	push	r0
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	7c 83       	std	Y+4, r23	; 0x04
    1f5a:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	89 f1       	breq	.+98     	; 0x1fca <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1f68:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6c:	26 81       	ldd	r18, Z+6	; 0x06
    1f6e:	37 81       	ldd	r19, Z+7	; 0x07
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	82 0f       	add	r24, r18
    1f7c:	93 1f       	adc	r25, r19
    1f7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f80:	fa 81       	ldd	r31, Y+2	; 0x02
    1f82:	97 83       	std	Z+7, r25	; 0x07
    1f84:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1f86:	e9 81       	ldd	r30, Y+1	; 0x01
    1f88:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8a:	26 81       	ldd	r18, Z+6	; 0x06
    1f8c:	37 81       	ldd	r19, Z+7	; 0x07
    1f8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f90:	fa 81       	ldd	r31, Y+2	; 0x02
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	93 81       	ldd	r25, Z+3	; 0x03
    1f96:	28 17       	cp	r18, r24
    1f98:	39 07       	cpc	r19, r25
    1f9a:	40 f0       	brcs	.+16     	; 0x1fac <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    1f9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa8:	97 83       	std	Z+7, r25	; 0x07
    1faa:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1fac:	e9 81       	ldd	r30, Y+1	; 0x01
    1fae:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb0:	46 81       	ldd	r20, Z+6	; 0x06
    1fb2:	57 81       	ldd	r21, Z+7	; 0x07
    1fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb8:	84 8d       	ldd	r24, Z+28	; 0x1c
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	ba 01       	movw	r22, r20
    1fc4:	a9 01       	movw	r20, r18
    1fc6:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <memcpy>
	}
}
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	0f 92       	push	r0
    1fde:	0f 92       	push	r0
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	0f 92       	push	r0
    1fee:	15 c0       	rjmp	.+42     	; 0x201a <prvUnlockQueue+0x42>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff4:	81 89       	ldd	r24, Z+17	; 0x11
    1ff6:	88 23       	and	r24, r24
    1ff8:	a9 f0       	breq	.+42     	; 0x2024 <prvUnlockQueue+0x4c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	41 96       	adiw	r24, 0x11	; 17
    2000:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    2004:	88 23       	and	r24, r24
    2006:	11 f0       	breq	.+4      	; 0x200c <prvUnlockQueue+0x34>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    2008:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    200c:	e9 81       	ldd	r30, Y+1	; 0x01
    200e:	fa 81       	ldd	r31, Y+2	; 0x02
    2010:	86 8d       	ldd	r24, Z+30	; 0x1e
    2012:	81 50       	subi	r24, 0x01	; 1
    2014:	e9 81       	ldd	r30, Y+1	; 0x01
    2016:	fa 81       	ldd	r31, Y+2	; 0x02
    2018:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    201a:	e9 81       	ldd	r30, Y+1	; 0x01
    201c:	fa 81       	ldd	r31, Y+2	; 0x02
    201e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2020:	18 16       	cp	r1, r24
    2022:	34 f3       	brlt	.-52     	; 0x1ff0 <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2024:	e9 81       	ldd	r30, Y+1	; 0x01
    2026:	fa 81       	ldd	r31, Y+2	; 0x02
    2028:	8f ef       	ldi	r24, 0xFF	; 255
    202a:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    202c:	0f 90       	pop	r0
    202e:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	0f 92       	push	r0
    2036:	15 c0       	rjmp	.+42     	; 0x2062 <prvUnlockQueue+0x8a>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2038:	e9 81       	ldd	r30, Y+1	; 0x01
    203a:	fa 81       	ldd	r31, Y+2	; 0x02
    203c:	80 85       	ldd	r24, Z+8	; 0x08
    203e:	88 23       	and	r24, r24
    2040:	a9 f0       	breq	.+42     	; 0x206c <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	08 96       	adiw	r24, 0x08	; 8
    2048:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xTaskRemoveFromEventList>
    204c:	88 23       	and	r24, r24
    204e:	11 f0       	breq	.+4      	; 0x2054 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    2050:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    2054:	e9 81       	ldd	r30, Y+1	; 0x01
    2056:	fa 81       	ldd	r31, Y+2	; 0x02
    2058:	85 8d       	ldd	r24, Z+29	; 0x1d
    205a:	81 50       	subi	r24, 0x01	; 1
    205c:	e9 81       	ldd	r30, Y+1	; 0x01
    205e:	fa 81       	ldd	r31, Y+2	; 0x02
    2060:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2062:	e9 81       	ldd	r30, Y+1	; 0x01
    2064:	fa 81       	ldd	r31, Y+2	; 0x02
    2066:	85 8d       	ldd	r24, Z+29	; 0x1d
    2068:	18 16       	cp	r1, r24
    206a:	34 f3       	brlt	.-52     	; 0x2038 <prvUnlockQueue+0x60>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    206c:	e9 81       	ldd	r30, Y+1	; 0x01
    206e:	fa 81       	ldd	r31, Y+2	; 0x02
    2070:	8f ef       	ldi	r24, 0xFF	; 255
    2072:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    2074:	0f 90       	pop	r0
    2076:	0f be       	out	0x3f, r0	; 63
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	00 d0       	rcall	.+0      	; 0x2088 <prvIsQueueEmpty+0x6>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	9b 83       	std	Y+3, r25	; 0x03
    208e:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2096:	ea 81       	ldd	r30, Y+2	; 0x02
    2098:	fb 81       	ldd	r31, Y+3	; 0x03
    209a:	82 8d       	ldd	r24, Z+26	; 0x1a
    209c:	19 82       	std	Y+1, r1	; 0x01
    209e:	88 23       	and	r24, r24
    20a0:	11 f4       	brne	.+4      	; 0x20a6 <prvIsQueueEmpty+0x24>
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <xQueueIsQueueEmptyFromISR+0x6>
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	9b 83       	std	Y+3, r25	; 0x03
    20c4:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    20c6:	ea 81       	ldd	r30, Y+2	; 0x02
    20c8:	fb 81       	ldd	r31, Y+3	; 0x03
    20ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    20cc:	19 82       	std	Y+1, r1	; 0x01
    20ce:	88 23       	and	r24, r24
    20d0:	11 f4       	brne	.+4      	; 0x20d6 <xQueueIsQueueEmptyFromISR+0x1e>
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <prvIsQueueFull+0x6>
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	9b 83       	std	Y+3, r25	; 0x03
    20f0:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    20f8:	ea 81       	ldd	r30, Y+2	; 0x02
    20fa:	fb 81       	ldd	r31, Y+3	; 0x03
    20fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    20fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2100:	fb 81       	ldd	r31, Y+3	; 0x03
    2102:	83 8d       	ldd	r24, Z+27	; 0x1b
    2104:	19 82       	std	Y+1, r1	; 0x01
    2106:	98 17       	cp	r25, r24
    2108:	11 f4       	brne	.+4      	; 0x210e <prvIsQueueFull+0x2a>
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    210e:	0f 90       	pop	r0
    2110:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2112:	89 81       	ldd	r24, Y+1	; 0x01
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <xQueueIsQueueFullFromISR+0x6>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9b 83       	std	Y+3, r25	; 0x03
    212c:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    212e:	ea 81       	ldd	r30, Y+2	; 0x02
    2130:	fb 81       	ldd	r31, Y+3	; 0x03
    2132:	92 8d       	ldd	r25, Z+26	; 0x1a
    2134:	ea 81       	ldd	r30, Y+2	; 0x02
    2136:	fb 81       	ldd	r31, Y+3	; 0x03
    2138:	83 8d       	ldd	r24, Z+27	; 0x1b
    213a:	19 82       	std	Y+1, r1	; 0x01
    213c:	98 17       	cp	r25, r24
    213e:	11 f4       	brne	.+4      	; 0x2144 <xQueueIsQueueFullFromISR+0x24>
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    2144:	89 81       	ldd	r24, Y+1	; 0x01
}
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	0f 92       	push	r0
    2158:	0f 92       	push	r0
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	03 96       	adiw	r24, 0x03	; 3
    2168:	e9 81       	ldd	r30, Y+1	; 0x01
    216a:	fa 81       	ldd	r31, Y+2	; 0x02
    216c:	92 83       	std	Z+2, r25	; 0x02
    216e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2170:	e9 81       	ldd	r30, Y+1	; 0x01
    2172:	fa 81       	ldd	r31, Y+2	; 0x02
    2174:	8f ef       	ldi	r24, 0xFF	; 255
    2176:	9f ef       	ldi	r25, 0xFF	; 255
    2178:	94 83       	std	Z+4, r25	; 0x04
    217a:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
    2180:	03 96       	adiw	r24, 0x03	; 3
    2182:	e9 81       	ldd	r30, Y+1	; 0x01
    2184:	fa 81       	ldd	r31, Y+2	; 0x02
    2186:	96 83       	std	Z+6, r25	; 0x06
    2188:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	03 96       	adiw	r24, 0x03	; 3
    2190:	e9 81       	ldd	r30, Y+1	; 0x01
    2192:	fa 81       	ldd	r31, Y+2	; 0x02
    2194:	90 87       	std	Z+8, r25	; 0x08
    2196:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2198:	e9 81       	ldd	r30, Y+1	; 0x01
    219a:	fa 81       	ldd	r31, Y+2	; 0x02
    219c:	10 82       	st	Z, r1
}
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	0f 92       	push	r0
    21ae:	0f 92       	push	r0
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    21b8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ba:	fa 81       	ldd	r31, Y+2	; 0x02
    21bc:	11 86       	std	Z+9, r1	; 0x09
    21be:	10 86       	std	Z+8, r1	; 0x08
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <vListInsertEnd+0x6>
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <vListInsertEnd+0x8>
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	9c 83       	std	Y+4, r25	; 0x04
    21d8:	8b 83       	std	Y+3, r24	; 0x03
    21da:	7e 83       	std	Y+6, r23	; 0x06
    21dc:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    21de:	eb 81       	ldd	r30, Y+3	; 0x03
    21e0:	fc 81       	ldd	r31, Y+4	; 0x04
    21e2:	81 81       	ldd	r24, Z+1	; 0x01
    21e4:	92 81       	ldd	r25, Z+2	; 0x02
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    21ea:	e9 81       	ldd	r30, Y+1	; 0x01
    21ec:	fa 81       	ldd	r31, Y+2	; 0x02
    21ee:	82 81       	ldd	r24, Z+2	; 0x02
    21f0:	93 81       	ldd	r25, Z+3	; 0x03
    21f2:	ed 81       	ldd	r30, Y+5	; 0x05
    21f4:	fe 81       	ldd	r31, Y+6	; 0x06
    21f6:	93 83       	std	Z+3, r25	; 0x03
    21f8:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    21fa:	eb 81       	ldd	r30, Y+3	; 0x03
    21fc:	fc 81       	ldd	r31, Y+4	; 0x04
    21fe:	81 81       	ldd	r24, Z+1	; 0x01
    2200:	92 81       	ldd	r25, Z+2	; 0x02
    2202:	ed 81       	ldd	r30, Y+5	; 0x05
    2204:	fe 81       	ldd	r31, Y+6	; 0x06
    2206:	95 83       	std	Z+5, r25	; 0x05
    2208:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    220a:	e9 81       	ldd	r30, Y+1	; 0x01
    220c:	fa 81       	ldd	r31, Y+2	; 0x02
    220e:	02 80       	ldd	r0, Z+2	; 0x02
    2210:	f3 81       	ldd	r31, Z+3	; 0x03
    2212:	e0 2d       	mov	r30, r0
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	95 83       	std	Z+5, r25	; 0x05
    221a:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	e9 81       	ldd	r30, Y+1	; 0x01
    2222:	fa 81       	ldd	r31, Y+2	; 0x02
    2224:	93 83       	std	Z+3, r25	; 0x03
    2226:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2228:	8d 81       	ldd	r24, Y+5	; 0x05
    222a:	9e 81       	ldd	r25, Y+6	; 0x06
    222c:	eb 81       	ldd	r30, Y+3	; 0x03
    222e:	fc 81       	ldd	r31, Y+4	; 0x04
    2230:	92 83       	std	Z+2, r25	; 0x02
    2232:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2234:	ed 81       	ldd	r30, Y+5	; 0x05
    2236:	fe 81       	ldd	r31, Y+6	; 0x06
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	91 87       	std	Z+9, r25	; 0x09
    223e:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2240:	eb 81       	ldd	r30, Y+3	; 0x03
    2242:	fc 81       	ldd	r31, Y+4	; 0x04
    2244:	80 81       	ld	r24, Z
    2246:	8f 5f       	subi	r24, 0xFF	; 255
    2248:	eb 81       	ldd	r30, Y+3	; 0x03
    224a:	fc 81       	ldd	r31, Y+4	; 0x04
    224c:	80 83       	st	Z, r24
}
    224e:	26 96       	adiw	r28, 0x06	; 6
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	28 97       	sbiw	r28, 0x08	; 8
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	78 87       	std	Y+8, r23	; 0x08
    227a:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    227c:	ef 81       	ldd	r30, Y+7	; 0x07
    227e:	f8 85       	ldd	r31, Y+8	; 0x08
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	2f ef       	ldi	r18, 0xFF	; 255
    228e:	8f 3f       	cpi	r24, 0xFF	; 255
    2290:	92 07       	cpc	r25, r18
    2292:	39 f4       	brne	.+14     	; 0x22a2 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2294:	ed 81       	ldd	r30, Y+5	; 0x05
    2296:	fe 81       	ldd	r31, Y+6	; 0x06
    2298:	87 81       	ldd	r24, Z+7	; 0x07
    229a:	90 85       	ldd	r25, Z+8	; 0x08
    229c:	9c 83       	std	Y+4, r25	; 0x04
    229e:	8b 83       	std	Y+3, r24	; 0x03
    22a0:	18 c0       	rjmp	.+48     	; 0x22d2 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	9e 81       	ldd	r25, Y+6	; 0x06
    22a6:	03 96       	adiw	r24, 0x03	; 3
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	8b 83       	std	Y+3, r24	; 0x03
    22ac:	06 c0       	rjmp	.+12     	; 0x22ba <vListInsert+0x5a>
    22ae:	eb 81       	ldd	r30, Y+3	; 0x03
    22b0:	fc 81       	ldd	r31, Y+4	; 0x04
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	93 81       	ldd	r25, Z+3	; 0x03
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	8b 83       	std	Y+3, r24	; 0x03
    22ba:	eb 81       	ldd	r30, Y+3	; 0x03
    22bc:	fc 81       	ldd	r31, Y+4	; 0x04
    22be:	02 80       	ldd	r0, Z+2	; 0x02
    22c0:	f3 81       	ldd	r31, Z+3	; 0x03
    22c2:	e0 2d       	mov	r30, r0
    22c4:	20 81       	ld	r18, Z
    22c6:	31 81       	ldd	r19, Z+1	; 0x01
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	9a 81       	ldd	r25, Y+2	; 0x02
    22cc:	82 17       	cp	r24, r18
    22ce:	93 07       	cpc	r25, r19
    22d0:	70 f7       	brcc	.-36     	; 0x22ae <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    22d2:	eb 81       	ldd	r30, Y+3	; 0x03
    22d4:	fc 81       	ldd	r31, Y+4	; 0x04
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	ef 81       	ldd	r30, Y+7	; 0x07
    22dc:	f8 85       	ldd	r31, Y+8	; 0x08
    22de:	93 83       	std	Z+3, r25	; 0x03
    22e0:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    22e2:	ef 81       	ldd	r30, Y+7	; 0x07
    22e4:	f8 85       	ldd	r31, Y+8	; 0x08
    22e6:	02 80       	ldd	r0, Z+2	; 0x02
    22e8:	f3 81       	ldd	r31, Z+3	; 0x03
    22ea:	e0 2d       	mov	r30, r0
    22ec:	8f 81       	ldd	r24, Y+7	; 0x07
    22ee:	98 85       	ldd	r25, Y+8	; 0x08
    22f0:	95 83       	std	Z+5, r25	; 0x05
    22f2:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    22f4:	ef 81       	ldd	r30, Y+7	; 0x07
    22f6:	f8 85       	ldd	r31, Y+8	; 0x08
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	95 83       	std	Z+5, r25	; 0x05
    22fe:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2300:	8f 81       	ldd	r24, Y+7	; 0x07
    2302:	98 85       	ldd	r25, Y+8	; 0x08
    2304:	eb 81       	ldd	r30, Y+3	; 0x03
    2306:	fc 81       	ldd	r31, Y+4	; 0x04
    2308:	93 83       	std	Z+3, r25	; 0x03
    230a:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    230c:	ef 81       	ldd	r30, Y+7	; 0x07
    230e:	f8 85       	ldd	r31, Y+8	; 0x08
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	91 87       	std	Z+9, r25	; 0x09
    2316:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2318:	ed 81       	ldd	r30, Y+5	; 0x05
    231a:	fe 81       	ldd	r31, Y+6	; 0x06
    231c:	80 81       	ld	r24, Z
    231e:	8f 5f       	subi	r24, 0xFF	; 255
    2320:	ed 81       	ldd	r30, Y+5	; 0x05
    2322:	fe 81       	ldd	r31, Y+6	; 0x06
    2324:	80 83       	st	Z, r24
}
    2326:	28 96       	adiw	r28, 0x08	; 8
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <uxListRemove+0x6>
    233e:	0f 92       	push	r0
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	9c 83       	std	Y+4, r25	; 0x04
    2346:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2348:	eb 81       	ldd	r30, Y+3	; 0x03
    234a:	fc 81       	ldd	r31, Y+4	; 0x04
    234c:	a2 81       	ldd	r26, Z+2	; 0x02
    234e:	b3 81       	ldd	r27, Z+3	; 0x03
    2350:	eb 81       	ldd	r30, Y+3	; 0x03
    2352:	fc 81       	ldd	r31, Y+4	; 0x04
    2354:	84 81       	ldd	r24, Z+4	; 0x04
    2356:	95 81       	ldd	r25, Z+5	; 0x05
    2358:	15 96       	adiw	r26, 0x05	; 5
    235a:	9c 93       	st	X, r25
    235c:	8e 93       	st	-X, r24
    235e:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2360:	eb 81       	ldd	r30, Y+3	; 0x03
    2362:	fc 81       	ldd	r31, Y+4	; 0x04
    2364:	a4 81       	ldd	r26, Z+4	; 0x04
    2366:	b5 81       	ldd	r27, Z+5	; 0x05
    2368:	eb 81       	ldd	r30, Y+3	; 0x03
    236a:	fc 81       	ldd	r31, Y+4	; 0x04
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	93 81       	ldd	r25, Z+3	; 0x03
    2370:	13 96       	adiw	r26, 0x03	; 3
    2372:	9c 93       	st	X, r25
    2374:	8e 93       	st	-X, r24
    2376:	12 97       	sbiw	r26, 0x02	; 2

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2378:	eb 81       	ldd	r30, Y+3	; 0x03
    237a:	fc 81       	ldd	r31, Y+4	; 0x04
    237c:	80 85       	ldd	r24, Z+8	; 0x08
    237e:	91 85       	ldd	r25, Z+9	; 0x09
    2380:	9a 83       	std	Y+2, r25	; 0x02
    2382:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2384:	e9 81       	ldd	r30, Y+1	; 0x01
    2386:	fa 81       	ldd	r31, Y+2	; 0x02
    2388:	21 81       	ldd	r18, Z+1	; 0x01
    238a:	32 81       	ldd	r19, Z+2	; 0x02
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	28 17       	cp	r18, r24
    2392:	39 07       	cpc	r19, r25
    2394:	41 f4       	brne	.+16     	; 0x23a6 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2396:	eb 81       	ldd	r30, Y+3	; 0x03
    2398:	fc 81       	ldd	r31, Y+4	; 0x04
    239a:	84 81       	ldd	r24, Z+4	; 0x04
    239c:	95 81       	ldd	r25, Z+5	; 0x05
    239e:	e9 81       	ldd	r30, Y+1	; 0x01
    23a0:	fa 81       	ldd	r31, Y+2	; 0x02
    23a2:	92 83       	std	Z+2, r25	; 0x02
    23a4:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    23a6:	eb 81       	ldd	r30, Y+3	; 0x03
    23a8:	fc 81       	ldd	r31, Y+4	; 0x04
    23aa:	11 86       	std	Z+9, r1	; 0x09
    23ac:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    23ae:	e9 81       	ldd	r30, Y+1	; 0x01
    23b0:	fa 81       	ldd	r31, Y+2	; 0x02
    23b2:	80 81       	ld	r24, Z
    23b4:	81 50       	subi	r24, 0x01	; 1
    23b6:	e9 81       	ldd	r30, Y+1	; 0x01
    23b8:	fa 81       	ldd	r31, Y+2	; 0x02
    23ba:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    23bc:	e9 81       	ldd	r30, Y+1	; 0x01
    23be:	fa 81       	ldd	r31, Y+2	; 0x02
    23c0:	80 81       	ld	r24, Z
}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	27 97       	sbiw	r28, 0x07	; 7
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	9d 83       	std	Y+5, r25	; 0x05
    23e6:	8c 83       	std	Y+4, r24	; 0x04
    23e8:	6e 83       	std	Y+6, r22	; 0x06
    23ea:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23ec:	8a e1       	ldi	r24, 0x1A	; 26
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0e 94 c1 14 	call	0x2982	; 0x2982 <pvPortMalloc>
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	9a 81       	ldd	r25, Y+2	; 0x02
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	09 f4       	brne	.+2      	; 0x2402 <xCoRoutineCreate+0x32>
    2400:	6f c0       	rjmp	.+222    	; 0x24e0 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2402:	80 91 7f 02 	lds	r24, 0x027F
    2406:	90 91 80 02 	lds	r25, 0x0280
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	41 f4       	brne	.+16     	; 0x241e <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	90 93 80 02 	sts	0x0280, r25
    2416:	80 93 7f 02 	sts	0x027F, r24
			prvInitialiseCoRoutineLists();
    241a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    241e:	8e 81       	ldd	r24, Y+6	; 0x06
    2420:	82 30       	cpi	r24, 0x02	; 2
    2422:	10 f0       	brcs	.+4      	; 0x2428 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    2428:	e9 81       	ldd	r30, Y+1	; 0x01
    242a:	fa 81       	ldd	r31, Y+2	; 0x02
    242c:	11 8e       	std	Z+25, r1	; 0x19
    242e:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    2430:	e9 81       	ldd	r30, Y+1	; 0x01
    2432:	fa 81       	ldd	r31, Y+2	; 0x02
    2434:	8e 81       	ldd	r24, Y+6	; 0x06
    2436:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    2438:	e9 81       	ldd	r30, Y+1	; 0x01
    243a:	fa 81       	ldd	r31, Y+2	; 0x02
    243c:	8f 81       	ldd	r24, Y+7	; 0x07
    243e:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	e9 81       	ldd	r30, Y+1	; 0x01
    2442:	fa 81       	ldd	r31, Y+2	; 0x02
    2444:	8c 81       	ldd	r24, Y+4	; 0x04
    2446:	9d 81       	ldd	r25, Y+5	; 0x05
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	02 96       	adiw	r24, 0x02	; 2
    2452:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	0c 96       	adiw	r24, 0x0c	; 12
    245c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    2460:	e9 81       	ldd	r30, Y+1	; 0x01
    2462:	fa 81       	ldd	r31, Y+2	; 0x02
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	91 87       	std	Z+9, r25	; 0x09
    246a:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    246c:	e9 81       	ldd	r30, Y+1	; 0x01
    246e:	fa 81       	ldd	r31, Y+2	; 0x02
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	93 8b       	std	Z+19, r25	; 0x13
    2476:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2478:	8e 81       	ldd	r24, Y+6	; 0x06
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	84 e0       	ldi	r24, 0x04	; 4
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	82 1b       	sub	r24, r18
    2484:	93 0b       	sbc	r25, r19
    2486:	e9 81       	ldd	r30, Y+1	; 0x01
    2488:	fa 81       	ldd	r31, Y+2	; 0x02
    248a:	95 87       	std	Z+13, r25	; 0x0d
    248c:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    248e:	e9 81       	ldd	r30, Y+1	; 0x01
    2490:	fa 81       	ldd	r31, Y+2	; 0x02
    2492:	96 89       	ldd	r25, Z+22	; 0x16
    2494:	80 91 81 02 	lds	r24, 0x0281
    2498:	89 17       	cp	r24, r25
    249a:	28 f4       	brcc	.+10     	; 0x24a6 <xCoRoutineCreate+0xd6>
    249c:	e9 81       	ldd	r30, Y+1	; 0x01
    249e:	fa 81       	ldd	r31, Y+2	; 0x02
    24a0:	86 89       	ldd	r24, Z+22	; 0x16
    24a2:	80 93 81 02 	sts	0x0281, r24
    24a6:	e9 81       	ldd	r30, Y+1	; 0x01
    24a8:	fa 81       	ldd	r31, Y+2	; 0x02
    24aa:	86 89       	ldd	r24, Z+22	; 0x16
    24ac:	28 2f       	mov	r18, r24
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	c9 01       	movw	r24, r18
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	82 0f       	add	r24, r18
    24c0:	93 1f       	adc	r25, r19
    24c2:	ac 01       	movw	r20, r24
    24c4:	48 57       	subi	r20, 0x78	; 120
    24c6:	5d 4f       	sbci	r21, 0xFD	; 253
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	9c 01       	movw	r18, r24
    24ce:	2e 5f       	subi	r18, 0xFE	; 254
    24d0:	3f 4f       	sbci	r19, 0xFF	; 255
    24d2:	ca 01       	movw	r24, r20
    24d4:	b9 01       	movw	r22, r18
    24d6:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>

		xReturn = pdPASS;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	8b 83       	std	Y+3, r24	; 0x03
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24e0:	8f ef       	ldi	r24, 0xFF	; 255
    24e2:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    24e6:	27 96       	adiw	r28, 0x07	; 7
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <vCoRoutineAddToDelayedList+0x6>
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <vCoRoutineAddToDelayedList+0x8>
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	9c 83       	std	Y+4, r25	; 0x04
    2506:	8b 83       	std	Y+3, r24	; 0x03
    2508:	7e 83       	std	Y+6, r23	; 0x06
    250a:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    250c:	20 91 82 02 	lds	r18, 0x0282
    2510:	30 91 83 02 	lds	r19, 0x0283
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	9c 81       	ldd	r25, Y+4	; 0x04
    2518:	82 0f       	add	r24, r18
    251a:	93 1f       	adc	r25, r19
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	uxListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2520:	80 91 7f 02 	lds	r24, 0x027F
    2524:	90 91 80 02 	lds	r25, 0x0280
    2528:	02 96       	adiw	r24, 0x02	; 2
    252a:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    252e:	e0 91 7f 02 	lds	r30, 0x027F
    2532:	f0 91 80 02 	lds	r31, 0x0280
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	93 83       	std	Z+3, r25	; 0x03
    253c:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    253e:	20 91 82 02 	lds	r18, 0x0282
    2542:	30 91 83 02 	lds	r19, 0x0283
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	82 17       	cp	r24, r18
    254c:	93 07       	cpc	r25, r19
    254e:	70 f4       	brcc	.+28     	; 0x256c <vCoRoutineAddToDelayedList+0x74>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2550:	80 91 ae 02 	lds	r24, 0x02AE
    2554:	90 91 af 02 	lds	r25, 0x02AF
    2558:	20 91 7f 02 	lds	r18, 0x027F
    255c:	30 91 80 02 	lds	r19, 0x0280
    2560:	2e 5f       	subi	r18, 0xFE	; 254
    2562:	3f 4f       	sbci	r19, 0xFF	; 255
    2564:	b9 01       	movw	r22, r18
    2566:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsert>
    256a:	0d c0       	rjmp	.+26     	; 0x2586 <vCoRoutineAddToDelayedList+0x8e>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    256c:	80 91 ac 02 	lds	r24, 0x02AC
    2570:	90 91 ad 02 	lds	r25, 0x02AD
    2574:	20 91 7f 02 	lds	r18, 0x027F
    2578:	30 91 80 02 	lds	r19, 0x0280
    257c:	2e 5f       	subi	r18, 0xFE	; 254
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	b9 01       	movw	r22, r18
    2582:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsert>
	}

	if( pxEventList )
    2586:	8d 81       	ldd	r24, Y+5	; 0x05
    2588:	9e 81       	ldd	r25, Y+6	; 0x06
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	61 f0       	breq	.+24     	; 0x25a6 <vCoRoutineAddToDelayedList+0xae>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    258e:	80 91 7f 02 	lds	r24, 0x027F
    2592:	90 91 80 02 	lds	r25, 0x0280
    2596:	9c 01       	movw	r18, r24
    2598:	24 5f       	subi	r18, 0xF4	; 244
    259a:	3f 4f       	sbci	r19, 0xFF	; 255
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	b9 01       	movw	r22, r18
    25a2:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsert>
	}
}
    25a6:	26 96       	adiw	r28, 0x06	; 6
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	de bf       	out	0x3e, r29	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	0f 92       	push	r0
    25be:	0f 92       	push	r0
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	3a c0       	rjmp	.+116    	; 0x263a <prvCheckPendingReadyList+0x82>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    25c6:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    25c8:	e0 91 b5 02 	lds	r30, 0x02B5
    25cc:	f0 91 b6 02 	lds	r31, 0x02B6
    25d0:	86 81       	ldd	r24, Z+6	; 0x06
    25d2:	97 81       	ldd	r25, Z+7	; 0x07
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    25d6:	89 83       	std	Y+1, r24	; 0x01
			uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	0c 96       	adiw	r24, 0x0c	; 12
    25de:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
		}
		portENABLE_INTERRUPTS();
    25e2:	78 94       	sei

		uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	02 96       	adiw	r24, 0x02	; 2
    25ea:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25ee:	e9 81       	ldd	r30, Y+1	; 0x01
    25f0:	fa 81       	ldd	r31, Y+2	; 0x02
    25f2:	96 89       	ldd	r25, Z+22	; 0x16
    25f4:	80 91 81 02 	lds	r24, 0x0281
    25f8:	89 17       	cp	r24, r25
    25fa:	28 f4       	brcc	.+10     	; 0x2606 <prvCheckPendingReadyList+0x4e>
    25fc:	e9 81       	ldd	r30, Y+1	; 0x01
    25fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2600:	86 89       	ldd	r24, Z+22	; 0x16
    2602:	80 93 81 02 	sts	0x0281, r24
    2606:	e9 81       	ldd	r30, Y+1	; 0x01
    2608:	fa 81       	ldd	r31, Y+2	; 0x02
    260a:	86 89       	ldd	r24, Z+22	; 0x16
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	c9 01       	movw	r24, r18
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	82 0f       	add	r24, r18
    2620:	93 1f       	adc	r25, r19
    2622:	ac 01       	movw	r20, r24
    2624:	48 57       	subi	r20, 0x78	; 120
    2626:	5d 4f       	sbci	r21, 0xFD	; 253
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	9a 81       	ldd	r25, Y+2	; 0x02
    262c:	9c 01       	movw	r18, r24
    262e:	2e 5f       	subi	r18, 0xFE	; 254
    2630:	3f 4f       	sbci	r19, 0xFF	; 255
    2632:	ca 01       	movw	r24, r20
    2634:	b9 01       	movw	r22, r18
    2636:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    263a:	80 91 b0 02 	lds	r24, 0x02B0
    263e:	88 23       	and	r24, r24
    2640:	09 f0       	breq	.+2      	; 0x2644 <prvCheckPendingReadyList+0x8c>
    2642:	c1 cf       	rjmp	.-126    	; 0x25c6 <prvCheckPendingReadyList+0xe>
		portENABLE_INTERRUPTS();

		uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <prvCheckDelayedList+0x6>
    2654:	0f 92       	push	r0
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    265a:	0e 94 18 06 	call	0xc30	; 0xc30 <xTaskGetTickCount>
    265e:	20 91 84 02 	lds	r18, 0x0284
    2662:	30 91 85 02 	lds	r19, 0x0285
    2666:	82 1b       	sub	r24, r18
    2668:	93 0b       	sbc	r25, r19
    266a:	90 93 87 02 	sts	0x0287, r25
    266e:	80 93 86 02 	sts	0x0286, r24
    2672:	85 c0       	rjmp	.+266    	; 0x277e <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    2674:	80 91 82 02 	lds	r24, 0x0282
    2678:	90 91 83 02 	lds	r25, 0x0283
    267c:	01 96       	adiw	r24, 0x01	; 1
    267e:	90 93 83 02 	sts	0x0283, r25
    2682:	80 93 82 02 	sts	0x0282, r24
		xPassedTicks--;
    2686:	80 91 86 02 	lds	r24, 0x0286
    268a:	90 91 87 02 	lds	r25, 0x0287
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	90 93 87 02 	sts	0x0287, r25
    2694:	80 93 86 02 	sts	0x0286, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2698:	80 91 82 02 	lds	r24, 0x0282
    269c:	90 91 83 02 	lds	r25, 0x0283
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	09 f0       	breq	.+2      	; 0x26a6 <prvCheckDelayedList+0x58>
    26a4:	64 c0       	rjmp	.+200    	; 0x276e <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    26a6:	80 91 ac 02 	lds	r24, 0x02AC
    26aa:	90 91 ad 02 	lds	r25, 0x02AD
    26ae:	9a 83       	std	Y+2, r25	; 0x02
    26b0:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    26b2:	80 91 ae 02 	lds	r24, 0x02AE
    26b6:	90 91 af 02 	lds	r25, 0x02AF
    26ba:	90 93 ad 02 	sts	0x02AD, r25
    26be:	80 93 ac 02 	sts	0x02AC, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	9a 81       	ldd	r25, Y+2	; 0x02
    26c6:	90 93 af 02 	sts	0x02AF, r25
    26ca:	80 93 ae 02 	sts	0x02AE, r24
    26ce:	4f c0       	rjmp	.+158    	; 0x276e <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    26d0:	e0 91 ac 02 	lds	r30, 0x02AC
    26d4:	f0 91 ad 02 	lds	r31, 0x02AD
    26d8:	05 80       	ldd	r0, Z+5	; 0x05
    26da:	f6 81       	ldd	r31, Z+6	; 0x06
    26dc:	e0 2d       	mov	r30, r0
    26de:	86 81       	ldd	r24, Z+6	; 0x06
    26e0:	97 81       	ldd	r25, Z+7	; 0x07
    26e2:	9c 83       	std	Y+4, r25	; 0x04
    26e4:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    26e6:	eb 81       	ldd	r30, Y+3	; 0x03
    26e8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ea:	22 81       	ldd	r18, Z+2	; 0x02
    26ec:	33 81       	ldd	r19, Z+3	; 0x03
    26ee:	80 91 82 02 	lds	r24, 0x0282
    26f2:	90 91 83 02 	lds	r25, 0x0283
    26f6:	82 17       	cp	r24, r18
    26f8:	93 07       	cpc	r25, r19
    26fa:	08 f4       	brcc	.+2      	; 0x26fe <prvCheckDelayedList+0xb0>
    26fc:	40 c0       	rjmp	.+128    	; 0x277e <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    26fe:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				uxListRemove( &( pxCRCB->xGenericListItem ) );											
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	9c 81       	ldd	r25, Y+4	; 0x04
    2704:	02 96       	adiw	r24, 0x02	; 2
    2706:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    270a:	eb 81       	ldd	r30, Y+3	; 0x03
    270c:	fc 81       	ldd	r31, Y+4	; 0x04
    270e:	84 89       	ldd	r24, Z+20	; 0x14
    2710:	95 89       	ldd	r25, Z+21	; 0x15
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	29 f0       	breq	.+10     	; 0x2720 <prvCheckDelayedList+0xd2>
				{															
					uxListRemove( &( pxCRCB->xEventListItem ) );											
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	9c 81       	ldd	r25, Y+4	; 0x04
    271a:	0c 96       	adiw	r24, 0x0c	; 12
    271c:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    2720:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    2722:	eb 81       	ldd	r30, Y+3	; 0x03
    2724:	fc 81       	ldd	r31, Y+4	; 0x04
    2726:	96 89       	ldd	r25, Z+22	; 0x16
    2728:	80 91 81 02 	lds	r24, 0x0281
    272c:	89 17       	cp	r24, r25
    272e:	28 f4       	brcc	.+10     	; 0x273a <prvCheckDelayedList+0xec>
    2730:	eb 81       	ldd	r30, Y+3	; 0x03
    2732:	fc 81       	ldd	r31, Y+4	; 0x04
    2734:	86 89       	ldd	r24, Z+22	; 0x16
    2736:	80 93 81 02 	sts	0x0281, r24
    273a:	eb 81       	ldd	r30, Y+3	; 0x03
    273c:	fc 81       	ldd	r31, Y+4	; 0x04
    273e:	86 89       	ldd	r24, Z+22	; 0x16
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	c9 01       	movw	r24, r18
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	82 0f       	add	r24, r18
    2754:	93 1f       	adc	r25, r19
    2756:	ac 01       	movw	r20, r24
    2758:	48 57       	subi	r20, 0x78	; 120
    275a:	5d 4f       	sbci	r21, 0xFD	; 253
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	9c 01       	movw	r18, r24
    2762:	2e 5f       	subi	r18, 0xFE	; 254
    2764:	3f 4f       	sbci	r19, 0xFF	; 255
    2766:	ca 01       	movw	r24, r20
    2768:	b9 01       	movw	r22, r18
    276a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    276e:	e0 91 ac 02 	lds	r30, 0x02AC
    2772:	f0 91 ad 02 	lds	r31, 0x02AD
    2776:	80 81       	ld	r24, Z
    2778:	88 23       	and	r24, r24
    277a:	09 f0       	breq	.+2      	; 0x277e <prvCheckDelayedList+0x130>
    277c:	a9 cf       	rjmp	.-174    	; 0x26d0 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    277e:	80 91 86 02 	lds	r24, 0x0286
    2782:	90 91 87 02 	lds	r25, 0x0287
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	09 f0       	breq	.+2      	; 0x278c <prvCheckDelayedList+0x13e>
    278a:	74 cf       	rjmp	.-280    	; 0x2674 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    278c:	80 91 82 02 	lds	r24, 0x0282
    2790:	90 91 83 02 	lds	r25, 0x0283
    2794:	90 93 85 02 	sts	0x0285, r25
    2798:	80 93 84 02 	sts	0x0284, r24
}
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	0f 92       	push	r0
    27b0:	0f 92       	push	r0
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    27b6:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    27ba:	0e 94 27 13 	call	0x264e	; 0x264e <prvCheckDelayedList>
    27be:	0a c0       	rjmp	.+20     	; 0x27d4 <vCoRoutineSchedule+0x2a>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    27c0:	80 91 81 02 	lds	r24, 0x0281
    27c4:	88 23       	and	r24, r24
    27c6:	09 f4       	brne	.+2      	; 0x27ca <vCoRoutineSchedule+0x20>
    27c8:	66 c0       	rjmp	.+204    	; 0x2896 <vCoRoutineSchedule+0xec>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    27ca:	80 91 81 02 	lds	r24, 0x0281
    27ce:	81 50       	subi	r24, 0x01	; 1
    27d0:	80 93 81 02 	sts	0x0281, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    27d4:	80 91 81 02 	lds	r24, 0x0281
    27d8:	28 2f       	mov	r18, r24
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	c9 01       	movw	r24, r18
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	82 0f       	add	r24, r18
    27ec:	93 1f       	adc	r25, r19
    27ee:	fc 01       	movw	r30, r24
    27f0:	e8 57       	subi	r30, 0x78	; 120
    27f2:	fd 4f       	sbci	r31, 0xFD	; 253
    27f4:	80 81       	ld	r24, Z
    27f6:	88 23       	and	r24, r24
    27f8:	19 f3       	breq	.-58     	; 0x27c0 <vCoRoutineSchedule+0x16>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27fa:	80 91 81 02 	lds	r24, 0x0281
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	c9 01       	movw	r24, r18
    2804:	88 0f       	add	r24, r24
    2806:	99 1f       	adc	r25, r25
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	82 0f       	add	r24, r18
    2812:	93 1f       	adc	r25, r19
    2814:	88 57       	subi	r24, 0x78	; 120
    2816:	9d 4f       	sbci	r25, 0xFD	; 253
    2818:	9a 83       	std	Y+2, r25	; 0x02
    281a:	89 83       	std	Y+1, r24	; 0x01
    281c:	e9 81       	ldd	r30, Y+1	; 0x01
    281e:	fa 81       	ldd	r31, Y+2	; 0x02
    2820:	01 80       	ldd	r0, Z+1	; 0x01
    2822:	f2 81       	ldd	r31, Z+2	; 0x02
    2824:	e0 2d       	mov	r30, r0
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	e9 81       	ldd	r30, Y+1	; 0x01
    282c:	fa 81       	ldd	r31, Y+2	; 0x02
    282e:	92 83       	std	Z+2, r25	; 0x02
    2830:	81 83       	std	Z+1, r24	; 0x01
    2832:	e9 81       	ldd	r30, Y+1	; 0x01
    2834:	fa 81       	ldd	r31, Y+2	; 0x02
    2836:	21 81       	ldd	r18, Z+1	; 0x01
    2838:	32 81       	ldd	r19, Z+2	; 0x02
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	03 96       	adiw	r24, 0x03	; 3
    2840:	28 17       	cp	r18, r24
    2842:	39 07       	cpc	r19, r25
    2844:	59 f4       	brne	.+22     	; 0x285c <vCoRoutineSchedule+0xb2>
    2846:	e9 81       	ldd	r30, Y+1	; 0x01
    2848:	fa 81       	ldd	r31, Y+2	; 0x02
    284a:	01 80       	ldd	r0, Z+1	; 0x01
    284c:	f2 81       	ldd	r31, Z+2	; 0x02
    284e:	e0 2d       	mov	r30, r0
    2850:	82 81       	ldd	r24, Z+2	; 0x02
    2852:	93 81       	ldd	r25, Z+3	; 0x03
    2854:	e9 81       	ldd	r30, Y+1	; 0x01
    2856:	fa 81       	ldd	r31, Y+2	; 0x02
    2858:	92 83       	std	Z+2, r25	; 0x02
    285a:	81 83       	std	Z+1, r24	; 0x01
    285c:	e9 81       	ldd	r30, Y+1	; 0x01
    285e:	fa 81       	ldd	r31, Y+2	; 0x02
    2860:	01 80       	ldd	r0, Z+1	; 0x01
    2862:	f2 81       	ldd	r31, Z+2	; 0x02
    2864:	e0 2d       	mov	r30, r0
    2866:	86 81       	ldd	r24, Z+6	; 0x06
    2868:	97 81       	ldd	r25, Z+7	; 0x07
    286a:	90 93 80 02 	sts	0x0280, r25
    286e:	80 93 7f 02 	sts	0x027F, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2872:	e0 91 7f 02 	lds	r30, 0x027F
    2876:	f0 91 80 02 	lds	r31, 0x0280
    287a:	40 81       	ld	r20, Z
    287c:	51 81       	ldd	r21, Z+1	; 0x01
    287e:	80 91 7f 02 	lds	r24, 0x027F
    2882:	90 91 80 02 	lds	r25, 0x0280
    2886:	e0 91 7f 02 	lds	r30, 0x027F
    288a:	f0 91 80 02 	lds	r31, 0x0280
    288e:	27 89       	ldd	r18, Z+23	; 0x17
    2890:	62 2f       	mov	r22, r18
    2892:	fa 01       	movw	r30, r20
    2894:	19 95       	eicall

	return;
}
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	0f 92       	push	r0
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    28aa:	19 82       	std	Y+1, r1	; 0x01
    28ac:	13 c0       	rjmp	.+38     	; 0x28d4 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	c9 01       	movw	r24, r18
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	88 0f       	add	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	88 0f       	add	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	82 0f       	add	r24, r18
    28c4:	93 1f       	adc	r25, r19
    28c6:	88 57       	subi	r24, 0x78	; 120
    28c8:	9d 4f       	sbci	r25, 0xFD	; 253
    28ca:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	8f 5f       	subi	r24, 0xFF	; 255
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	82 30       	cpi	r24, 0x02	; 2
    28d8:	50 f3       	brcs	.-44     	; 0x28ae <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    28da:	8a e9       	ldi	r24, 0x9A	; 154
    28dc:	92 e0       	ldi	r25, 0x02	; 2
    28de:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    28e2:	83 ea       	ldi	r24, 0xA3	; 163
    28e4:	92 e0       	ldi	r25, 0x02	; 2
    28e6:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    28ea:	80 eb       	ldi	r24, 0xB0	; 176
    28ec:	92 e0       	ldi	r25, 0x02	; 2
    28ee:	0e 94 a9 10 	call	0x2152	; 0x2152 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    28f2:	8a e9       	ldi	r24, 0x9A	; 154
    28f4:	92 e0       	ldi	r25, 0x02	; 2
    28f6:	90 93 ad 02 	sts	0x02AD, r25
    28fa:	80 93 ac 02 	sts	0x02AC, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    28fe:	83 ea       	ldi	r24, 0xA3	; 163
    2900:	92 e0       	ldi	r25, 0x02	; 2
    2902:	90 93 af 02 	sts	0x02AF, r25
    2906:	80 93 ae 02 	sts	0x02AE, r24
}
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	00 d0       	rcall	.+0      	; 0x2918 <xCoRoutineRemoveFromEventList+0x6>
    2918:	0f 92       	push	r0
    291a:	0f 92       	push	r0
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	9d 83       	std	Y+5, r25	; 0x05
    2922:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2924:	ec 81       	ldd	r30, Y+4	; 0x04
    2926:	fd 81       	ldd	r31, Y+5	; 0x05
    2928:	05 80       	ldd	r0, Z+5	; 0x05
    292a:	f6 81       	ldd	r31, Z+6	; 0x06
    292c:	e0 2d       	mov	r30, r0
    292e:	86 81       	ldd	r24, Z+6	; 0x06
    2930:	97 81       	ldd	r25, Z+7	; 0x07
    2932:	9b 83       	std	Y+3, r25	; 0x03
    2934:	8a 83       	std	Y+2, r24	; 0x02
	uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	9b 81       	ldd	r25, Y+3	; 0x03
    293a:	0c 96       	adiw	r24, 0x0c	; 12
    293c:	0e 94 9c 11 	call	0x2338	; 0x2338 <uxListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	9b 81       	ldd	r25, Y+3	; 0x03
    2944:	9c 01       	movw	r18, r24
    2946:	24 5f       	subi	r18, 0xF4	; 244
    2948:	3f 4f       	sbci	r19, 0xFF	; 255
    294a:	80 eb       	ldi	r24, 0xB0	; 176
    294c:	92 e0       	ldi	r25, 0x02	; 2
    294e:	b9 01       	movw	r22, r18
    2950:	0e 94 e5 10 	call	0x21ca	; 0x21ca <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2954:	ea 81       	ldd	r30, Y+2	; 0x02
    2956:	fb 81       	ldd	r31, Y+3	; 0x03
    2958:	96 89       	ldd	r25, Z+22	; 0x16
    295a:	e0 91 7f 02 	lds	r30, 0x027F
    295e:	f0 91 80 02 	lds	r31, 0x0280
    2962:	86 89       	ldd	r24, Z+22	; 0x16
    2964:	98 17       	cp	r25, r24
    2966:	18 f0       	brcs	.+6      	; 0x296e <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	01 c0       	rjmp	.+2      	; 0x2970 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    296e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2970:	89 81       	ldd	r24, Y+1	; 0x01
}
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	00 d0       	rcall	.+0      	; 0x2988 <pvPortMalloc+0x6>
    2988:	0f 92       	push	r0
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	9c 83       	std	Y+4, r25	; 0x04
    2990:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    2992:	1a 82       	std	Y+2, r1	; 0x02
    2994:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    2996:	0e 94 82 05 	call	0xb04	; 0xb04 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    299a:	80 91 b9 02 	lds	r24, 0x02B9
    299e:	90 91 ba 02 	lds	r25, 0x02BA
    29a2:	2b 81       	ldd	r18, Y+3	; 0x03
    29a4:	3c 81       	ldd	r19, Y+4	; 0x04
    29a6:	82 0f       	add	r24, r18
    29a8:	93 1f       	adc	r25, r19
    29aa:	28 e1       	ldi	r18, 0x18	; 24
    29ac:	80 30       	cpi	r24, 0x00	; 0
    29ae:	92 07       	cpc	r25, r18
    29b0:	18 f5       	brcc	.+70     	; 0x29f8 <pvPortMalloc+0x76>
    29b2:	20 91 b9 02 	lds	r18, 0x02B9
    29b6:	30 91 ba 02 	lds	r19, 0x02BA
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	28 0f       	add	r18, r24
    29c0:	39 1f       	adc	r19, r25
    29c2:	80 91 b9 02 	lds	r24, 0x02B9
    29c6:	90 91 ba 02 	lds	r25, 0x02BA
    29ca:	82 17       	cp	r24, r18
    29cc:	93 07       	cpc	r25, r19
    29ce:	a0 f4       	brcc	.+40     	; 0x29f8 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    29d0:	80 91 b9 02 	lds	r24, 0x02B9
    29d4:	90 91 ba 02 	lds	r25, 0x02BA
    29d8:	85 54       	subi	r24, 0x45	; 69
    29da:	9d 4f       	sbci	r25, 0xFD	; 253
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    29e0:	20 91 b9 02 	lds	r18, 0x02B9
    29e4:	30 91 ba 02 	lds	r19, 0x02BA
    29e8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ea:	9c 81       	ldd	r25, Y+4	; 0x04
    29ec:	82 0f       	add	r24, r18
    29ee:	93 1f       	adc	r25, r19
    29f0:	90 93 ba 02 	sts	0x02BA, r25
    29f4:	80 93 b9 02 	sts	0x02B9, r24
		}
	}
	xTaskResumeAll();
    29f8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	0f 92       	push	r0
    2a14:	0f 92       	push	r0
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	9a 83       	std	Y+2, r25	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    2a30:	10 92 ba 02 	sts	0x02BA, r1
    2a34:	10 92 b9 02 	sts	0x02B9, r1
}
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    2a46:	20 91 b9 02 	lds	r18, 0x02B9
    2a4a:	30 91 ba 02 	lds	r19, 0x02BA
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	98 e1       	ldi	r25, 0x18	; 24
    2a52:	82 1b       	sub	r24, r18
    2a54:	93 0b       	sbc	r25, r19
}
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	28 97       	sbiw	r28, 0x08	; 8
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	9c 83       	std	Y+4, r25	; 0x04
    2a72:	8b 83       	std	Y+3, r24	; 0x03
    2a74:	7e 83       	std	Y+6, r23	; 0x06
    2a76:	6d 83       	std	Y+5, r22	; 0x05
    2a78:	58 87       	std	Y+8, r21	; 0x08
    2a7a:	4f 83       	std	Y+7, r20	; 0x07
#endif

	/* Place a few bytes of known values on the bottom of the stack.
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2a7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a80:	81 e1       	ldi	r24, 0x11	; 17
    2a82:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	9c 81       	ldd	r25, Y+4	; 0x04
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	9c 83       	std	Y+4, r25	; 0x04
    2a8c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2a8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a90:	fc 81       	ldd	r31, Y+4	; 0x04
    2a92:	82 e2       	ldi	r24, 0x22	; 34
    2a94:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	9c 83       	std	Y+4, r25	; 0x04
    2a9e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2aa0:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa2:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa4:	83 e3       	ldi	r24, 0x33	; 51
    2aa6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	9c 83       	std	Y+4, r25	; 0x04
    2ab0:	8b 83       	std	Y+3, r24	; 0x03
	 * of flash. We do this by adding the .task label in the linker script.
	 *
	 * In order to do this properly, we would need to get a full 3-byte pointer to
	 * pxCode.  That requires a change to GCC.  Not likely to happen any time soon.
	 */
	usAddress = ( unsigned portSHORT ) pxCode;
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab6:	9a 83       	std	Y+2, r25	; 0x02
    2ab8:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	eb 81       	ldd	r30, Y+3	; 0x03
    2abe:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac0:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad0:	89 2f       	mov	r24, r25
    2ad2:	99 27       	eor	r25, r25
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	eb 81       	ldd	r30, Y+3	; 0x03
    2adc:	fc 81       	ldd	r31, Y+4	; 0x04
    2ade:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	9c 83       	std	Y+4, r25	; 0x04
    2ae8:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = 0;
    2aea:	eb 81       	ldd	r30, Y+3	; 0x03
    2aec:	fc 81       	ldd	r31, Y+4	; 0x04
    2aee:	10 82       	st	Z, r1
	pxTopOfStack--;
    2af0:	8b 81       	ldd	r24, Y+3	; 0x03
    2af2:	9c 81       	ldd	r25, Y+4	; 0x04
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	9c 83       	std	Y+4, r25	; 0x04
    2af8:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    2afa:	eb 81       	ldd	r30, Y+3	; 0x03
    2afc:	fc 81       	ldd	r31, Y+4	; 0x04
    2afe:	10 82       	st	Z, r1
	pxTopOfStack--;
    2b00:	8b 81       	ldd	r24, Y+3	; 0x03
    2b02:	9c 81       	ldd	r25, Y+4	; 0x04
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	9c 83       	std	Y+4, r25	; 0x04
    2b08:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2b0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b0e:	80 e8       	ldi	r24, 0x80	; 128
    2b10:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	9c 81       	ldd	r25, Y+4	; 0x04
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	9c 83       	std	Y+4, r25	; 0x04
    2b1a:	8b 83       	std	Y+3, r24	; 0x03
#if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

	/* If we have an ATmega256x, we are also saving the RAMPZ and EIND registers.
	 * We should default those to 0.
	 */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* EIND */
    2b1c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b1e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b20:	10 82       	st	Z, r1
	pxTopOfStack--;
    2b22:	8b 81       	ldd	r24, Y+3	; 0x03
    2b24:	9c 81       	ldd	r25, Y+4	; 0x04
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	9c 83       	std	Y+4, r25	; 0x04
    2b2a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* RAMPZ */
    2b2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b30:	10 82       	st	Z, r1
	pxTopOfStack--;
    2b32:	8b 81       	ldd	r24, Y+3	; 0x03
    2b34:	9c 81       	ldd	r25, Y+4	; 0x04
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	9c 83       	std	Y+4, r25	; 0x04
    2b3a:	8b 83       	std	Y+3, r24	; 0x03

#endif

	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    2b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b40:	10 82       	st	Z, r1
	pxTopOfStack--;
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	9c 81       	ldd	r25, Y+4	; 0x04
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	9c 83       	std	Y+4, r25	; 0x04
    2b4a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    2b4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b54:	8b 81       	ldd	r24, Y+3	; 0x03
    2b56:	9c 81       	ldd	r25, Y+4	; 0x04
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	9c 83       	std	Y+4, r25	; 0x04
    2b5c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    2b5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b60:	fc 81       	ldd	r31, Y+4	; 0x04
    2b62:	83 e0       	ldi	r24, 0x03	; 3
    2b64:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	9c 83       	std	Y+4, r25	; 0x04
    2b6e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    2b70:	eb 81       	ldd	r30, Y+3	; 0x03
    2b72:	fc 81       	ldd	r31, Y+4	; 0x04
    2b74:	84 e0       	ldi	r24, 0x04	; 4
    2b76:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	9c 83       	std	Y+4, r25	; 0x04
    2b80:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    2b82:	eb 81       	ldd	r30, Y+3	; 0x03
    2b84:	fc 81       	ldd	r31, Y+4	; 0x04
    2b86:	85 e0       	ldi	r24, 0x05	; 5
    2b88:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	9c 83       	std	Y+4, r25	; 0x04
    2b92:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    2b94:	eb 81       	ldd	r30, Y+3	; 0x03
    2b96:	fc 81       	ldd	r31, Y+4	; 0x04
    2b98:	86 e0       	ldi	r24, 0x06	; 6
    2b9a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	9c 83       	std	Y+4, r25	; 0x04
    2ba4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    2ba6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba8:	fc 81       	ldd	r31, Y+4	; 0x04
    2baa:	87 e0       	ldi	r24, 0x07	; 7
    2bac:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bae:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	9c 83       	std	Y+4, r25	; 0x04
    2bb6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    2bb8:	eb 81       	ldd	r30, Y+3	; 0x03
    2bba:	fc 81       	ldd	r31, Y+4	; 0x04
    2bbc:	88 e0       	ldi	r24, 0x08	; 8
    2bbe:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	9c 83       	std	Y+4, r25	; 0x04
    2bc8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    2bca:	eb 81       	ldd	r30, Y+3	; 0x03
    2bcc:	fc 81       	ldd	r31, Y+4	; 0x04
    2bce:	89 e0       	ldi	r24, 0x09	; 9
    2bd0:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	9c 83       	std	Y+4, r25	; 0x04
    2bda:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    2bdc:	eb 81       	ldd	r30, Y+3	; 0x03
    2bde:	fc 81       	ldd	r31, Y+4	; 0x04
    2be0:	80 e1       	ldi	r24, 0x10	; 16
    2be2:	80 83       	st	Z, r24
	pxTopOfStack--;
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	9c 83       	std	Y+4, r25	; 0x04
    2bec:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    2bee:	eb 81       	ldd	r30, Y+3	; 0x03
    2bf0:	fc 81       	ldd	r31, Y+4	; 0x04
    2bf2:	81 e1       	ldi	r24, 0x11	; 17
    2bf4:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	9c 83       	std	Y+4, r25	; 0x04
    2bfe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    2c00:	eb 81       	ldd	r30, Y+3	; 0x03
    2c02:	fc 81       	ldd	r31, Y+4	; 0x04
    2c04:	82 e1       	ldi	r24, 0x12	; 18
    2c06:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c08:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	9c 83       	std	Y+4, r25	; 0x04
    2c10:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    2c12:	eb 81       	ldd	r30, Y+3	; 0x03
    2c14:	fc 81       	ldd	r31, Y+4	; 0x04
    2c16:	83 e1       	ldi	r24, 0x13	; 19
    2c18:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	9c 83       	std	Y+4, r25	; 0x04
    2c22:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    2c24:	eb 81       	ldd	r30, Y+3	; 0x03
    2c26:	fc 81       	ldd	r31, Y+4	; 0x04
    2c28:	84 e1       	ldi	r24, 0x14	; 20
    2c2a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	9c 83       	std	Y+4, r25	; 0x04
    2c34:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    2c36:	eb 81       	ldd	r30, Y+3	; 0x03
    2c38:	fc 81       	ldd	r31, Y+4	; 0x04
    2c3a:	85 e1       	ldi	r24, 0x15	; 21
    2c3c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	9c 81       	ldd	r25, Y+4	; 0x04
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    2c48:	eb 81       	ldd	r30, Y+3	; 0x03
    2c4a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c4c:	86 e1       	ldi	r24, 0x16	; 22
    2c4e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	9c 81       	ldd	r25, Y+4	; 0x04
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	9c 83       	std	Y+4, r25	; 0x04
    2c58:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    2c5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c5e:	87 e1       	ldi	r24, 0x17	; 23
    2c60:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	9c 83       	std	Y+4, r25	; 0x04
    2c6a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    2c6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c70:	88 e1       	ldi	r24, 0x18	; 24
    2c72:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c74:	8b 81       	ldd	r24, Y+3	; 0x03
    2c76:	9c 81       	ldd	r25, Y+4	; 0x04
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	9c 83       	std	Y+4, r25	; 0x04
    2c7c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    2c7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c80:	fc 81       	ldd	r31, Y+4	; 0x04
    2c82:	89 e1       	ldi	r24, 0x19	; 25
    2c84:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c86:	8b 81       	ldd	r24, Y+3	; 0x03
    2c88:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	9c 83       	std	Y+4, r25	; 0x04
    2c8e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    2c90:	eb 81       	ldd	r30, Y+3	; 0x03
    2c92:	fc 81       	ldd	r31, Y+4	; 0x04
    2c94:	80 e2       	ldi	r24, 0x20	; 32
    2c96:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9c 83       	std	Y+4, r25	; 0x04
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    2ca2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ca4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca6:	81 e2       	ldi	r24, 0x21	; 33
    2ca8:	80 83       	st	Z, r24
	pxTopOfStack--;
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	9c 81       	ldd	r25, Y+4	; 0x04
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	9c 83       	std	Y+4, r25	; 0x04
    2cb2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    2cb4:	eb 81       	ldd	r30, Y+3	; 0x03
    2cb6:	fc 81       	ldd	r31, Y+4	; 0x04
    2cb8:	82 e2       	ldi	r24, 0x22	; 34
    2cba:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	9c 83       	std	Y+4, r25	; 0x04
    2cc4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    2cc6:	eb 81       	ldd	r30, Y+3	; 0x03
    2cc8:	fc 81       	ldd	r31, Y+4	; 0x04
    2cca:	83 e2       	ldi	r24, 0x23	; 35
    2ccc:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	9c 83       	std	Y+4, r25	; 0x04
    2cd6:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    2cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cda:	98 85       	ldd	r25, Y+8	; 0x08
    2cdc:	9a 83       	std	Y+2, r25	; 0x02
    2cde:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	9c 81       	ldd	r25, Y+4	; 0x04
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	9c 83       	std	Y+4, r25	; 0x04
    2cf0:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	89 2f       	mov	r24, r25
    2cf8:	99 27       	eor	r25, r25
    2cfa:	9a 83       	std	Y+2, r25	; 0x02
    2cfc:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	eb 81       	ldd	r30, Y+3	; 0x03
    2d02:	fc 81       	ldd	r31, Y+4	; 0x04
    2d04:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	9c 83       	std	Y+4, r25	; 0x04
    2d0e:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    2d10:	eb 81       	ldd	r30, Y+3	; 0x03
    2d12:	fc 81       	ldd	r31, Y+4	; 0x04
    2d14:	86 e2       	ldi	r24, 0x26	; 38
    2d16:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	9c 83       	std	Y+4, r25	; 0x04
    2d20:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    2d22:	eb 81       	ldd	r30, Y+3	; 0x03
    2d24:	fc 81       	ldd	r31, Y+4	; 0x04
    2d26:	87 e2       	ldi	r24, 0x27	; 39
    2d28:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	9c 83       	std	Y+4, r25	; 0x04
    2d32:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    2d34:	eb 81       	ldd	r30, Y+3	; 0x03
    2d36:	fc 81       	ldd	r31, Y+4	; 0x04
    2d38:	88 e2       	ldi	r24, 0x28	; 40
    2d3a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	9c 83       	std	Y+4, r25	; 0x04
    2d44:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    2d46:	eb 81       	ldd	r30, Y+3	; 0x03
    2d48:	fc 81       	ldd	r31, Y+4	; 0x04
    2d4a:	89 e2       	ldi	r24, 0x29	; 41
    2d4c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	9c 81       	ldd	r25, Y+4	; 0x04
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	9c 83       	std	Y+4, r25	; 0x04
    2d56:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    2d58:	eb 81       	ldd	r30, Y+3	; 0x03
    2d5a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d5c:	80 e3       	ldi	r24, 0x30	; 48
    2d5e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	9c 81       	ldd	r25, Y+4	; 0x04
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	9c 83       	std	Y+4, r25	; 0x04
    2d68:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    2d6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d6e:	81 e3       	ldi	r24, 0x31	; 49
    2d70:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	9c 81       	ldd	r25, Y+4	; 0x04
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	9c 83       	std	Y+4, r25	; 0x04
    2d7a:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2d80:	28 96       	adiw	r28, 0x08	; 8
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    2d9a:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2d9e:	a0 91 26 02 	lds	r26, 0x0226
    2da2:	b0 91 27 02 	lds	r27, 0x0227
    2da6:	cd 91       	ld	r28, X+
    2da8:	cd bf       	out	0x3d, r28	; 61
    2daa:	dd 91       	ld	r29, X+
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	ff 91       	pop	r31
    2db0:	ef 91       	pop	r30
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	bf 91       	pop	r27
    2db8:	af 91       	pop	r26
    2dba:	9f 91       	pop	r25
    2dbc:	8f 91       	pop	r24
    2dbe:	7f 91       	pop	r23
    2dc0:	6f 91       	pop	r22
    2dc2:	5f 91       	pop	r21
    2dc4:	4f 91       	pop	r20
    2dc6:	3f 91       	pop	r19
    2dc8:	2f 91       	pop	r18
    2dca:	1f 91       	pop	r17
    2dcc:	0f 91       	pop	r16
    2dce:	ff 90       	pop	r15
    2dd0:	ef 90       	pop	r14
    2dd2:	df 90       	pop	r13
    2dd4:	cf 90       	pop	r12
    2dd6:	bf 90       	pop	r11
    2dd8:	af 90       	pop	r10
    2dda:	9f 90       	pop	r9
    2ddc:	8f 90       	pop	r8
    2dde:	7f 90       	pop	r7
    2de0:	6f 90       	pop	r6
    2de2:	5f 90       	pop	r5
    2de4:	4f 90       	pop	r4
    2de6:	3f 90       	pop	r3
    2de8:	2f 90       	pop	r2
    2dea:	1f 90       	pop	r1
    2dec:	0f 90       	pop	r0
    2dee:	0c be       	out	0x3c, r0	; 60
    2df0:	0f 90       	pop	r0
    2df2:	0b be       	out	0x3b, r0	; 59
    2df4:	0f 90       	pop	r0
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2dfa:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
}
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	08 95       	ret

00002e12 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2e12:	0f 92       	push	r0
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	0f 92       	push	r0
    2e1a:	0b b6       	in	r0, 0x3b	; 59
    2e1c:	0f 92       	push	r0
    2e1e:	0c b6       	in	r0, 0x3c	; 60
    2e20:	0f 92       	push	r0
    2e22:	1f 92       	push	r1
    2e24:	11 24       	eor	r1, r1
    2e26:	2f 92       	push	r2
    2e28:	3f 92       	push	r3
    2e2a:	4f 92       	push	r4
    2e2c:	5f 92       	push	r5
    2e2e:	6f 92       	push	r6
    2e30:	7f 92       	push	r7
    2e32:	8f 92       	push	r8
    2e34:	9f 92       	push	r9
    2e36:	af 92       	push	r10
    2e38:	bf 92       	push	r11
    2e3a:	cf 92       	push	r12
    2e3c:	df 92       	push	r13
    2e3e:	ef 92       	push	r14
    2e40:	ff 92       	push	r15
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	2f 93       	push	r18
    2e48:	3f 93       	push	r19
    2e4a:	4f 93       	push	r20
    2e4c:	5f 93       	push	r21
    2e4e:	6f 93       	push	r22
    2e50:	7f 93       	push	r23
    2e52:	8f 93       	push	r24
    2e54:	9f 93       	push	r25
    2e56:	af 93       	push	r26
    2e58:	bf 93       	push	r27
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	ef 93       	push	r30
    2e60:	ff 93       	push	r31
    2e62:	a0 91 26 02 	lds	r26, 0x0226
    2e66:	b0 91 27 02 	lds	r27, 0x0227
    2e6a:	0d b6       	in	r0, 0x3d	; 61
    2e6c:	0d 92       	st	X+, r0
    2e6e:	0e b6       	in	r0, 0x3e	; 62
    2e70:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2e72:	0e 94 21 07 	call	0xe42	; 0xe42 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2e76:	a0 91 26 02 	lds	r26, 0x0226
    2e7a:	b0 91 27 02 	lds	r27, 0x0227
    2e7e:	cd 91       	ld	r28, X+
    2e80:	cd bf       	out	0x3d, r28	; 61
    2e82:	dd 91       	ld	r29, X+
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	ff 91       	pop	r31
    2e88:	ef 91       	pop	r30
    2e8a:	df 91       	pop	r29
    2e8c:	cf 91       	pop	r28
    2e8e:	bf 91       	pop	r27
    2e90:	af 91       	pop	r26
    2e92:	9f 91       	pop	r25
    2e94:	8f 91       	pop	r24
    2e96:	7f 91       	pop	r23
    2e98:	6f 91       	pop	r22
    2e9a:	5f 91       	pop	r21
    2e9c:	4f 91       	pop	r20
    2e9e:	3f 91       	pop	r19
    2ea0:	2f 91       	pop	r18
    2ea2:	1f 91       	pop	r17
    2ea4:	0f 91       	pop	r16
    2ea6:	ff 90       	pop	r15
    2ea8:	ef 90       	pop	r14
    2eaa:	df 90       	pop	r13
    2eac:	cf 90       	pop	r12
    2eae:	bf 90       	pop	r11
    2eb0:	af 90       	pop	r10
    2eb2:	9f 90       	pop	r9
    2eb4:	8f 90       	pop	r8
    2eb6:	7f 90       	pop	r7
    2eb8:	6f 90       	pop	r6
    2eba:	5f 90       	pop	r5
    2ebc:	4f 90       	pop	r4
    2ebe:	3f 90       	pop	r3
    2ec0:	2f 90       	pop	r2
    2ec2:	1f 90       	pop	r1
    2ec4:	0f 90       	pop	r0
    2ec6:	0c be       	out	0x3c, r0	; 60
    2ec8:	0f 90       	pop	r0
    2eca:	0b be       	out	0x3b, r0	; 59
    2ecc:	0f 90       	pop	r0
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2ed2:	08 95       	ret

00002ed4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2ed4:	0f 92       	push	r0
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	0f 92       	push	r0
    2edc:	0b b6       	in	r0, 0x3b	; 59
    2ede:	0f 92       	push	r0
    2ee0:	0c b6       	in	r0, 0x3c	; 60
    2ee2:	0f 92       	push	r0
    2ee4:	1f 92       	push	r1
    2ee6:	11 24       	eor	r1, r1
    2ee8:	2f 92       	push	r2
    2eea:	3f 92       	push	r3
    2eec:	4f 92       	push	r4
    2eee:	5f 92       	push	r5
    2ef0:	6f 92       	push	r6
    2ef2:	7f 92       	push	r7
    2ef4:	8f 92       	push	r8
    2ef6:	9f 92       	push	r9
    2ef8:	af 92       	push	r10
    2efa:	bf 92       	push	r11
    2efc:	cf 92       	push	r12
    2efe:	df 92       	push	r13
    2f00:	ef 92       	push	r14
    2f02:	ff 92       	push	r15
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	2f 93       	push	r18
    2f0a:	3f 93       	push	r19
    2f0c:	4f 93       	push	r20
    2f0e:	5f 93       	push	r21
    2f10:	6f 93       	push	r22
    2f12:	7f 93       	push	r23
    2f14:	8f 93       	push	r24
    2f16:	9f 93       	push	r25
    2f18:	af 93       	push	r26
    2f1a:	bf 93       	push	r27
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	ef 93       	push	r30
    2f22:	ff 93       	push	r31
    2f24:	a0 91 26 02 	lds	r26, 0x0226
    2f28:	b0 91 27 02 	lds	r27, 0x0227
    2f2c:	0d b6       	in	r0, 0x3d	; 61
    2f2e:	0d 92       	st	X+, r0
    2f30:	0e b6       	in	r0, 0x3e	; 62
    2f32:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2f34:	0e 94 4d 06 	call	0xc9a	; 0xc9a <vTaskIncrementTick>
	vTaskSwitchContext();
    2f38:	0e 94 21 07 	call	0xe42	; 0xe42 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2f3c:	a0 91 26 02 	lds	r26, 0x0226
    2f40:	b0 91 27 02 	lds	r27, 0x0227
    2f44:	cd 91       	ld	r28, X+
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	dd 91       	ld	r29, X+
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	ff 91       	pop	r31
    2f4e:	ef 91       	pop	r30
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	bf 91       	pop	r27
    2f56:	af 91       	pop	r26
    2f58:	9f 91       	pop	r25
    2f5a:	8f 91       	pop	r24
    2f5c:	7f 91       	pop	r23
    2f5e:	6f 91       	pop	r22
    2f60:	5f 91       	pop	r21
    2f62:	4f 91       	pop	r20
    2f64:	3f 91       	pop	r19
    2f66:	2f 91       	pop	r18
    2f68:	1f 91       	pop	r17
    2f6a:	0f 91       	pop	r16
    2f6c:	ff 90       	pop	r15
    2f6e:	ef 90       	pop	r14
    2f70:	df 90       	pop	r13
    2f72:	cf 90       	pop	r12
    2f74:	bf 90       	pop	r11
    2f76:	af 90       	pop	r10
    2f78:	9f 90       	pop	r9
    2f7a:	8f 90       	pop	r8
    2f7c:	7f 90       	pop	r7
    2f7e:	6f 90       	pop	r6
    2f80:	5f 90       	pop	r5
    2f82:	4f 90       	pop	r4
    2f84:	3f 90       	pop	r3
    2f86:	2f 90       	pop	r2
    2f88:	1f 90       	pop	r1
    2f8a:	0f 90       	pop	r0
    2f8c:	0c be       	out	0x3c, r0	; 60
    2f8e:	0f 90       	pop	r0
    2f90:	0b be       	out	0x3b, r0	; 59
    2f92:	0f 90       	pop	r0
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2f98:	08 95       	ret

00002f9a <prvSetupTimerInterrupt>:

/*
 * Setup timer 0 or 3 or 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <prvSetupTimerInterrupt+0x6>
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <prvSetupTimerInterrupt+0x8>
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62

    /* Using 8bit Timer0 or 16bit Timer1 or Timer3 to generate the tick. */

    // ulCompareMatch 40,000 = 20,000,000 / 500; 20MHz
    // ulCompareMatch 110,592 = 22,118,400 / 200; 22.1184 MHz
    ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	9d e7       	ldi	r25, 0x7D	; 125
    2faa:	a0 e0       	ldi	r26, 0x00	; 0
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	8b 83       	std	Y+3, r24	; 0x03
    2fb0:	9c 83       	std	Y+4, r25	; 0x04
    2fb2:	ad 83       	std	Y+5, r26	; 0x05
    2fb4:	be 83       	std	Y+6, r27	; 0x06

    /* We only have 8 or 16 bits so have to scale 64 or 256 to get our required tick rate. */
    //ulCompareMatch = 625 /= portCLOCK_PRESCALER; 20MHz with 64 prescale
    //ulCompareMatch = 108 /= portCLOCK_PRESCALER; 22.1184 MHz with 1024 prescale
    ulCompareMatch /= portCLOCK_PRESCALER;
    2fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fba:	ad 81       	ldd	r26, Y+5	; 0x05
    2fbc:	be 81       	ldd	r27, Y+6	; 0x06
    2fbe:	68 94       	set
    2fc0:	15 f8       	bld	r1, 5
    2fc2:	b6 95       	lsr	r27
    2fc4:	a7 95       	ror	r26
    2fc6:	97 95       	ror	r25
    2fc8:	87 95       	ror	r24
    2fca:	16 94       	lsr	r1
    2fcc:	d1 f7       	brne	.-12     	; 0x2fc2 <prvSetupTimerInterrupt+0x28>
    2fce:	8b 83       	std	Y+3, r24	; 0x03
    2fd0:	9c 83       	std	Y+4, r25	; 0x04
    2fd2:	ad 83       	std	Y+5, r26	; 0x05
    2fd4:	be 83       	std	Y+6, r27	; 0x06

    /* Adjust for correct value. */
    ulCompareMatch -= ( unsigned portLONG ) 1;
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fda:	ad 81       	ldd	r26, Y+5	; 0x05
    2fdc:	be 81       	ldd	r27, Y+6	; 0x06
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	a1 09       	sbc	r26, r1
    2fe2:	b1 09       	sbc	r27, r1
    2fe4:	8b 83       	std	Y+3, r24	; 0x03
    2fe6:	9c 83       	std	Y+4, r25	; 0x04
    2fe8:	ad 83       	std	Y+5, r26	; 0x05
    2fea:	be 83       	std	Y+6, r27	; 0x06

    /* Setup compare match value for compare match A.  Interrupts are disabled
    before this is called so we need not worry here. */
    ucLowByte = ( unsigned portCHAR ) ( ulCompareMatch & ( unsigned portLONG ) 0xff );
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	89 83       	std	Y+1, r24	; 0x01
    //  OCR3AL = ucLowByte;

    // the HiByte is only needed, if a 16 Bit counter is being utilized
#ifdef portOCRH

    ulCompareMatch >>= 8;
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff4:	ad 81       	ldd	r26, Y+5	; 0x05
    2ff6:	be 81       	ldd	r27, Y+6	; 0x06
    2ff8:	89 2f       	mov	r24, r25
    2ffa:	9a 2f       	mov	r25, r26
    2ffc:	ab 2f       	mov	r26, r27
    2ffe:	bb 27       	eor	r27, r27
    3000:	8b 83       	std	Y+3, r24	; 0x03
    3002:	9c 83       	std	Y+4, r25	; 0x04
    3004:	ad 83       	std	Y+5, r26	; 0x05
    3006:	be 83       	std	Y+6, r27	; 0x06
    ucHighByte = ( unsigned portCHAR ) ( ulCompareMatch & ( unsigned portLONG ) 0xff );
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	8a 83       	std	Y+2, r24	; 0x02
    portOCRH = ucHighByte;
    300c:	e9 e9       	ldi	r30, 0x99	; 153
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	80 83       	st	Z, r24

#endif

    portOCRL = ucLowByte;
    3014:	e8 e9       	ldi	r30, 0x98	; 152
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	80 83       	st	Z, r24
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	portTCCRb = ucLowByte;

#elif defined( portUSE_TIMER3 )
	/* Setup clock source and compare match behaviour. Assuming  640 / 1280 /1281 / 1284p / 2560 / 2561 (with Timer3) */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    301c:	8b e0       	ldi	r24, 0x0B	; 11
    301e:	89 83       	std	Y+1, r24	; 0x01
	portTCCRb = ucLowByte;
    3020:	e1 e9       	ldi	r30, 0x91	; 145
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	80 83       	st	Z, r24
#endif

    /* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
    ucLowByte = portTIMSK;
    3028:	e1 e7       	ldi	r30, 0x71	; 113
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	89 83       	std	Y+1, r24	; 0x01
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	82 60       	ori	r24, 0x02	; 2
    3034:	89 83       	std	Y+1, r24	; 0x01
    portTIMSK = ucLowByte;
    3036:	e1 e7       	ldi	r30, 0x71	; 113
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	80 83       	st	Z, r24

}
    303e:	26 96       	adiw	r28, 0x06	; 6
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <__vector_32>:

	#elif defined( portUSE_TIMER3 )
		#warning "Timer3 used for PRE-EMPTIVE scheduler."
		ISR(TIMER3_COMPA_vect, ISR_NAKED)
		{
			vPortYieldFromTick();
    3050:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <vPortYieldFromTick>
			asm volatile ( "reti" );
    3054:	18 95       	reti

00003056 <USART_Init>:
*  the specified baud rate and clk speed.
*
* Param buadin: The desired Baud rate.
* Param clk_seedin: The clk speed of the ATmega328p
************************************/
void USART_Init(uint16_t baudin, uint32_t clk_speedin) {
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	00 d0       	rcall	.+0      	; 0x305c <USART_Init+0x6>
    305c:	00 d0       	rcall	.+0      	; 0x305e <USART_Init+0x8>
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	9a 83       	std	Y+2, r25	; 0x02
    3064:	89 83       	std	Y+1, r24	; 0x01
    3066:	4b 83       	std	Y+3, r20	; 0x03
    3068:	5c 83       	std	Y+4, r21	; 0x04
    306a:	6d 83       	std	Y+5, r22	; 0x05
    306c:	7e 83       	std	Y+6, r23	; 0x06
    USART_WriteQueue = xQueueCreate(64,sizeof(uint8_t));
    306e:	80 e4       	ldi	r24, 0x40	; 64
    3070:	61 e0       	ldi	r22, 0x01	; 1
    3072:	40 e0       	ldi	r20, 0x00	; 0
    3074:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <xQueueGenericCreate>
    3078:	90 93 c3 1a 	sts	0x1AC3, r25
    307c:	80 93 c2 1a 	sts	0x1AC2, r24
    USART_ReadQueue = xQueueCreate(8,sizeof(uint8_t));
    3080:	88 e0       	ldi	r24, 0x08	; 8
    3082:	61 e0       	ldi	r22, 0x01	; 1
    3084:	40 e0       	ldi	r20, 0x00	; 0
    3086:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <xQueueGenericCreate>
    308a:	90 93 bf 1a 	sts	0x1ABF, r25
    308e:	80 93 be 1a 	sts	0x1ABE, r24

    //uint32_t ubrr = clk_speedin/(16UL)/baudin-1;
    //UBRR1H = (unsigned char)(ubrr>>8) ;// & 0x7F;
    //UBRR1L = (unsigned char)ubrr;
    
    UBRR2H = 0; //115200
    3092:	e5 ed       	ldi	r30, 0xD5	; 213
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	10 82       	st	Z, r1
    UBRR2L = 8;
    3098:	e4 ed       	ldi	r30, 0xD4	; 212
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	88 e0       	ldi	r24, 0x08	; 8
    309e:	80 83       	st	Z, r24

    /* Enable receiver and transmitter */
    UCSR2B = (1<<RXEN2)|(1<<TXEN2);//|(1<<RXCIE1);
    30a0:	e1 ed       	ldi	r30, 0xD1	; 209
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	88 e1       	ldi	r24, 0x18	; 24
    30a6:	80 83       	st	Z, r24
    /* Set frame format: 8data, 1stop bit */
    UCSR2C = (1<<UCSZ21)|(1<<UCSZ20);
    30a8:	e2 ed       	ldi	r30, 0xD2	; 210
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	86 e0       	ldi	r24, 0x06	; 6
    30ae:	80 83       	st	Z, r24
	 // clear U2X0 for Synchronous operation
    UCSR2A &= ~(1<<U2X2);
    30b0:	a0 ed       	ldi	r26, 0xD0	; 208
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	e0 ed       	ldi	r30, 0xD0	; 208
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	8d 7f       	andi	r24, 0xFD	; 253
    30bc:	8c 93       	st	X, r24
    /* Set frame format: 8data, 1stop bit */
    //UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
    // clear U2X0 for Synchronous operation
    //UCSR0A &= ~(1<<U2X0);*/

}
    30be:	26 96       	adiw	r28, 0x06	; 6
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <USART_Write>:

/*the send function will put 8bits on the trans line. */
void USART_Write(uint8_t data) {
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	0f 92       	push	r0
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    30da:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for empty transmit buffer */
		while ( !( UCSR2A & (1<<UDRE2)) )
    30dc:	e0 ed       	ldi	r30, 0xD0	; 208
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	88 2f       	mov	r24, r24
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	80 72       	andi	r24, 0x20	; 32
    30e8:	90 70       	andi	r25, 0x00	; 0
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	b9 f3       	breq	.-18     	; 0x30dc <USART_Write+0xc>
		;
		/* Put data into buffer, sends the data */
		UDR2 = data;
    30ee:	e6 ed       	ldi	r30, 0xD6	; 214
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	89 81       	ldd	r24, Y+1	; 0x01
    30f4:	80 83       	st	Z, r24
}
    30f6:	0f 90       	pop	r0
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	08 95       	ret

000030fe <USART_Write_Unprotected>:

/*the send function will put 8bits on the trans line. */
void USART_Write_Unprotected(uint8_t data) {
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	0f 92       	push	r0
    3104:	cd b7       	in	r28, 0x3d	; 61
    3106:	de b7       	in	r29, 0x3e	; 62
    3108:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
    310a:	e0 ec       	ldi	r30, 0xC0	; 192
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	88 2f       	mov	r24, r24
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	80 72       	andi	r24, 0x20	; 32
    3116:	90 70       	andi	r25, 0x00	; 0
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	b9 f3       	breq	.-18     	; 0x310a <USART_Write_Unprotected+0xc>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    311c:	e6 ec       	ldi	r30, 0xC6	; 198
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	80 83       	st	Z, r24
}
    3124:	0f 90       	pop	r0
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	08 95       	ret

0000312c <USART_Read>:
Therefore you may not get control back after this is called 
until a much later time. It may be helpful to use the 
istheredata() function to check before calling this function
        @return 8bit data packet from sender
*/
uint8_t USART_Read(void) {
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    /* Wait for data to be received */
    while ( !(UCSR2A & (1<<RXC2)) )
    3134:	e0 ed       	ldi	r30, 0xD0	; 208
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	88 23       	and	r24, r24
    313c:	dc f7       	brge	.-10     	; 0x3134 <USART_Read+0x8>
        ;
    /* Get and return received data from buffer */
    return UDR2;
    313e:	e6 ed       	ldi	r30, 0xD6	; 214
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
}
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	08 95       	ret

0000314a <__vector_36>:


ISR(USART1_RX_vect){
    314a:	1f 92       	push	r1
    314c:	0f 92       	push	r0
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	0f 92       	push	r0
    3152:	00 90 5b 00 	lds	r0, 0x005B
    3156:	0f 92       	push	r0
    3158:	11 24       	eor	r1, r1
    315a:	8f 93       	push	r24
    315c:	9f 93       	push	r25
    315e:	af 93       	push	r26
    3160:	bf 93       	push	r27
    3162:	ef 93       	push	r30
    3164:	ff 93       	push	r31
    3166:	df 93       	push	r29
    3168:	cf 93       	push	r28
    316a:	0f 92       	push	r0
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    data = UDR1;
    3170:	ee ec       	ldi	r30, 0xCE	; 206
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	80 81       	ld	r24, Z
    3176:	89 83       	std	Y+1, r24	; 0x01

    //while(!(UCSR1A & (1<<UDRE1)));
    PORTB ^= 0x10;
    3178:	a5 e2       	ldi	r26, 0x25	; 37
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	e5 e2       	ldi	r30, 0x25	; 37
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	90 81       	ld	r25, Z
    3182:	80 e1       	ldi	r24, 0x10	; 16
    3184:	89 27       	eor	r24, r25
    3186:	8c 93       	st	X, r24
    //UDR1 = data;
    

  //  USART_AddToQueue(data);
    //xQueueSendToBackFromISR(USART_ReadQueue,&data,NULL);
}
    3188:	0f 90       	pop	r0
    318a:	cf 91       	pop	r28
    318c:	df 91       	pop	r29
    318e:	ff 91       	pop	r31
    3190:	ef 91       	pop	r30
    3192:	bf 91       	pop	r27
    3194:	af 91       	pop	r26
    3196:	9f 91       	pop	r25
    3198:	8f 91       	pop	r24
    319a:	0f 90       	pop	r0
    319c:	00 92 5b 00 	sts	0x005B, r0
    31a0:	0f 90       	pop	r0
    31a2:	0f be       	out	0x3f, r0	; 63
    31a4:	0f 90       	pop	r0
    31a6:	1f 90       	pop	r1
    31a8:	18 95       	reti

000031aa <USART_AddToQueue>:

void USART_AddToQueue(uint8_t data){
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	0f 92       	push	r0
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	89 83       	std	Y+1, r24	; 0x01
    
    xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);
    31b6:	80 91 c2 1a 	lds	r24, 0x1AC2
    31ba:	90 91 c3 1a 	lds	r25, 0x1AC3
    31be:	9e 01       	movw	r18, r28
    31c0:	2f 5f       	subi	r18, 0xFF	; 255
    31c2:	3f 4f       	sbci	r19, 0xFF	; 255
    31c4:	b9 01       	movw	r22, r18
    31c6:	4f ef       	ldi	r20, 0xFF	; 255
    31c8:	5f ef       	ldi	r21, 0xFF	; 255
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	0e 94 9f 0c 	call	0x193e	; 0x193e <xQueueGenericSend>

}
    31d0:	0f 90       	pop	r0
    31d2:	cf 91       	pop	r28
    31d4:	df 91       	pop	r29
    31d6:	08 95       	ret

000031d8 <USART_TransmitString>:

void USART_TransmitString(char* str){
    31d8:	df 93       	push	r29
    31da:	cf 93       	push	r28
    31dc:	0f 92       	push	r0
    31de:	0f 92       	push	r0
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	9a 83       	std	Y+2, r25	; 0x02
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	0a c0       	rjmp	.+20     	; 0x31fe <USART_TransmitString+0x26>
    while(*str) {
        USART_AddToQueue(*str);
    31ea:	e9 81       	ldd	r30, Y+1	; 0x01
    31ec:	fa 81       	ldd	r31, Y+2	; 0x02
    31ee:	80 81       	ld	r24, Z
    31f0:	0e 94 d5 18 	call	0x31aa	; 0x31aa <USART_AddToQueue>
        str++;
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	9a 81       	ldd	r25, Y+2	; 0x02
    31f8:	01 96       	adiw	r24, 0x01	; 1
    31fa:	9a 83       	std	Y+2, r25	; 0x02
    31fc:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);

}

void USART_TransmitString(char* str){
    while(*str) {
    31fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3200:	fa 81       	ldd	r31, Y+2	; 0x02
    3202:	80 81       	ld	r24, Z
    3204:	88 23       	and	r24, r24
    3206:	89 f7       	brne	.-30     	; 0x31ea <USART_TransmitString+0x12>
        USART_AddToQueue(*str);
        str++;
    }
}
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <vTaskUSARTWrite>:

void vTaskUSARTWrite(void *pvParameters){
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	00 d0       	rcall	.+0      	; 0x3218 <vTaskUSARTWrite+0x6>
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	9b 83       	std	Y+3, r25	; 0x03
    321e:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    while(1){
    xQueueReceive(USART_WriteQueue,&data,portMAX_DELAY);
    3220:	80 91 c2 1a 	lds	r24, 0x1AC2
    3224:	90 91 c3 1a 	lds	r25, 0x1AC3
    3228:	9e 01       	movw	r18, r28
    322a:	2f 5f       	subi	r18, 0xFF	; 255
    322c:	3f 4f       	sbci	r19, 0xFF	; 255
    322e:	b9 01       	movw	r22, r18
    3230:	4f ef       	ldi	r20, 0xFF	; 255
    3232:	5f ef       	ldi	r21, 0xFF	; 255
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <xQueueGenericReceive>

        while(!(UCSR1A & (1<<UDRE1)));
    323a:	e8 ec       	ldi	r30, 0xC8	; 200
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	88 2f       	mov	r24, r24
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	80 72       	andi	r24, 0x20	; 32
    3246:	90 70       	andi	r25, 0x00	; 0
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	b9 f3       	breq	.-18     	; 0x323a <vTaskUSARTWrite+0x28>
        UDR1 = data;
    324c:	ee ec       	ldi	r30, 0xCE	; 206
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	80 83       	st	Z, r24
    3254:	e5 cf       	rjmp	.-54     	; 0x3220 <vTaskUSARTWrite+0xe>

00003256 <USART_LogChar>:

    }
}

void USART_LogChar(uint8_t data){
    3256:	df 93       	push	r29
    3258:	cf 93       	push	r28
    325a:	0f 92       	push	r0
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62
    3260:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
    3262:	80 91 c0 1a 	lds	r24, 0x1AC0
    3266:	90 91 c1 1a 	lds	r25, 0x1AC1
    326a:	9e 01       	movw	r18, r28
    326c:	2f 5f       	subi	r18, 0xFF	; 255
    326e:	3f 4f       	sbci	r19, 0xFF	; 255
    3270:	b9 01       	movw	r22, r18
    3272:	4f ef       	ldi	r20, 0xFF	; 255
    3274:	5f ef       	ldi	r21, 0xFF	; 255
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	0e 94 9f 0c 	call	0x193e	; 0x193e <xQueueGenericSend>
}
    327c:	0f 90       	pop	r0
    327e:	cf 91       	pop	r28
    3280:	df 91       	pop	r29
    3282:	08 95       	ret

00003284 <USART_LogString>:

void USART_LogString(char* str){
    3284:	df 93       	push	r29
    3286:	cf 93       	push	r28
    3288:	0f 92       	push	r0
    328a:	0f 92       	push	r0
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
    3290:	9a 83       	std	Y+2, r25	; 0x02
    3292:	89 83       	std	Y+1, r24	; 0x01
    3294:	0a c0       	rjmp	.+20     	; 0x32aa <USART_LogString+0x26>
    while(*str){
        USART_LogChar(*str);
    3296:	e9 81       	ldd	r30, Y+1	; 0x01
    3298:	fa 81       	ldd	r31, Y+2	; 0x02
    329a:	80 81       	ld	r24, Z
    329c:	0e 94 2b 19 	call	0x3256	; 0x3256 <USART_LogChar>
        str++;
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	01 96       	adiw	r24, 0x01	; 1
    32a6:	9a 83       	std	Y+2, r25	; 0x02
    32a8:	89 83       	std	Y+1, r24	; 0x01
void USART_LogChar(uint8_t data){
    xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
}

void USART_LogString(char* str){
    while(*str){
    32aa:	e9 81       	ldd	r30, Y+1	; 0x01
    32ac:	fa 81       	ldd	r31, Y+2	; 0x02
    32ae:	80 81       	ld	r24, Z
    32b0:	88 23       	and	r24, r24
    32b2:	89 f7       	brne	.-30     	; 0x3296 <USART_LogString+0x12>
        USART_LogChar(*str);
        str++;
    }
}
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	cf 91       	pop	r28
    32ba:	df 91       	pop	r29
    32bc:	08 95       	ret

000032be <vTaskUSARTLog>:

void vTaskUSARTLog(void *pvParameters){
    32be:	df 93       	push	r29
    32c0:	cf 93       	push	r28
    32c2:	00 d0       	rcall	.+0      	; 0x32c4 <vTaskUSARTLog+0x6>
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	9b 83       	std	Y+3, r25	; 0x03
    32ca:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    while(1){
        xQueueReceive(USART_WriteQueueLog,&data,portMAX_DELAY);
    32cc:	80 91 c0 1a 	lds	r24, 0x1AC0
    32d0:	90 91 c1 1a 	lds	r25, 0x1AC1
    32d4:	9e 01       	movw	r18, r28
    32d6:	2f 5f       	subi	r18, 0xFF	; 255
    32d8:	3f 4f       	sbci	r19, 0xFF	; 255
    32da:	b9 01       	movw	r22, r18
    32dc:	4f ef       	ldi	r20, 0xFF	; 255
    32de:	5f ef       	ldi	r21, 0xFF	; 255
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <xQueueGenericReceive>

        while(!(UCSR0A & (1<<UDRE0)));
    32e6:	e0 ec       	ldi	r30, 0xC0	; 192
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	88 2f       	mov	r24, r24
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	80 72       	andi	r24, 0x20	; 32
    32f2:	90 70       	andi	r25, 0x00	; 0
    32f4:	00 97       	sbiw	r24, 0x00	; 0
    32f6:	b9 f3       	breq	.-18     	; 0x32e6 <vTaskUSARTLog+0x28>
        UDR0 = data;
    32f8:	e6 ec       	ldi	r30, 0xC6	; 198
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	80 83       	st	Z, r24
    3300:	e5 cf       	rjmp	.-54     	; 0x32cc <vTaskUSARTLog+0xe>

00003302 <USART_GetChar>:

    }

}

uint8_t USART_GetChar(){
    3302:	df 93       	push	r29
    3304:	cf 93       	push	r28
    3306:	0f 92       	push	r0
    3308:	0f 92       	push	r0
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    if(xQueueReceive(USART_ReadQueue,&data,1) == pdTRUE){
    330e:	80 91 be 1a 	lds	r24, 0x1ABE
    3312:	90 91 bf 1a 	lds	r25, 0x1ABF
    3316:	9e 01       	movw	r18, r28
    3318:	2f 5f       	subi	r18, 0xFF	; 255
    331a:	3f 4f       	sbci	r19, 0xFF	; 255
    331c:	b9 01       	movw	r22, r18
    331e:	41 e0       	ldi	r20, 0x01	; 1
    3320:	50 e0       	ldi	r21, 0x00	; 0
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <xQueueGenericReceive>
    3328:	81 30       	cpi	r24, 0x01	; 1
    332a:	19 f4       	brne	.+6      	; 0x3332 <USART_GetChar+0x30>
        //USART_AddToQueue('~');
        return data;
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	8a 83       	std	Y+2, r24	; 0x02
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <USART_GetChar+0x34>
    } else {
        return 255;
    3332:	8f ef       	ldi	r24, 0xFF	; 255
    3334:	8a 83       	std	Y+2, r24	; 0x02
    3336:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	cf 91       	pop	r28
    333e:	df 91       	pop	r29
    3340:	08 95       	ret

00003342 <vTaskUSARTRead>:

void vTaskUSARTRead(void *pvParameters){
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	c9 55       	subi	r28, 0x59	; 89
    334c:	d0 40       	sbci	r29, 0x00	; 0
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	fe 01       	movw	r30, r28
    335a:	e8 5a       	subi	r30, 0xA8	; 168
    335c:	ff 4f       	sbci	r31, 0xFF	; 255
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	80 83       	st	Z, r24
    char size;
    char groupID;
    char cmd;
    unsigned int timeout;

    PORTB = 0;
    3362:	e5 e2       	ldi	r30, 0x25	; 37
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	10 82       	st	Z, r1
    }*/

    Command command;
    Response response;
    while(1){
        bytesRecieved = 0;
    3368:	1a 86       	std	Y+10, r1	; 0x0a
        int timeout = 7000;
    336a:	88 e5       	ldi	r24, 0x58	; 88
    336c:	9b e1       	ldi	r25, 0x1B	; 27
    336e:	9a 83       	std	Y+2, r25	; 0x02
    3370:	89 83       	std	Y+1, r24	; 0x01
        PORTB = 0x00;
    3372:	e5 e2       	ldi	r30, 0x25	; 37
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	10 82       	st	Z, r1
    3378:	2a c0       	rjmp	.+84     	; 0x33ce <vTaskUSARTRead+0x8c>
        while(bytesRecieved < 4){
            
            while ( !(UCSR2A & (1<<RXC2)) ){
                timeout--;
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	9a 81       	ldd	r25, Y+2	; 0x02
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	9a 83       	std	Y+2, r25	; 0x02
    3382:	89 83       	std	Y+1, r24	; 0x01
                if(timeout == 0){
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	9a 81       	ldd	r25, Y+2	; 0x02
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	29 f4       	brne	.+10     	; 0x3396 <vTaskUSARTRead+0x54>
                    bytesRecieved = 0;
    338c:	1a 86       	std	Y+10, r1	; 0x0a
                    timeout = 7000;
    338e:	88 e5       	ldi	r24, 0x58	; 88
    3390:	9b e1       	ldi	r25, 0x1B	; 27
    3392:	9a 83       	std	Y+2, r25	; 0x02
    3394:	89 83       	std	Y+1, r24	; 0x01
                }
                vTaskDelay(1);
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0e 94 ab 03 	call	0x756	; 0x756 <vTaskDelay>
        bytesRecieved = 0;
        int timeout = 7000;
        PORTB = 0x00;
        while(bytesRecieved < 4){
            
            while ( !(UCSR2A & (1<<RXC2)) ){
    339e:	e0 ed       	ldi	r30, 0xD0	; 208
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	80 81       	ld	r24, Z
    33a4:	88 23       	and	r24, r24
    33a6:	4c f7       	brge	.-46     	; 0x337a <vTaskUSARTRead+0x38>
                    bytesRecieved = 0;
                    timeout = 7000;
                }
                vTaskDelay(1);
            }
            data = UDR2;
    33a8:	e6 ed       	ldi	r30, 0xD6	; 214
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	80 81       	ld	r24, Z
    33ae:	88 87       	std	Y+8, r24	; 0x08
            buffer[bytesRecieved] = data;
    33b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33b2:	28 2f       	mov	r18, r24
    33b4:	33 27       	eor	r19, r19
    33b6:	27 fd       	sbrc	r18, 7
    33b8:	30 95       	com	r19
    33ba:	ce 01       	movw	r24, r28
    33bc:	0b 96       	adiw	r24, 0x0b	; 11
    33be:	fc 01       	movw	r30, r24
    33c0:	e2 0f       	add	r30, r18
    33c2:	f3 1f       	adc	r31, r19
    33c4:	88 85       	ldd	r24, Y+8	; 0x08
    33c6:	80 83       	st	Z, r24
            bytesRecieved++;        
    33c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ca:	8f 5f       	subi	r24, 0xFF	; 255
    33cc:	8a 87       	std	Y+10, r24	; 0x0a
    Response response;
    while(1){
        bytesRecieved = 0;
        int timeout = 7000;
        PORTB = 0x00;
        while(bytesRecieved < 4){
    33ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    33d0:	84 30       	cpi	r24, 0x04	; 4
    33d2:	2c f3       	brlt	.-54     	; 0x339e <vTaskUSARTRead+0x5c>

        //if(calcChecksum(buffer,3) != buffer[3]){
        //    sendNACK();
        //    bytesRecieved = 0;
        //} else {
            PORTB |= 0x10;
    33d4:	a5 e2       	ldi	r26, 0x25	; 37
    33d6:	b0 e0       	ldi	r27, 0x00	; 0
    33d8:	e5 e2       	ldi	r30, 0x25	; 37
    33da:	f0 e0       	ldi	r31, 0x00	; 0
    33dc:	80 81       	ld	r24, Z
    33de:	80 61       	ori	r24, 0x10	; 16
    33e0:	8c 93       	st	X, r24
            sendACK();
    33e2:	0e 94 9b 1a 	call	0x3536	; 0x3536 <sendACK>
            bytesRecieved = 0;
    33e6:	1a 86       	std	Y+10, r1	; 0x0a
            buffer[2] = 6;
    33e8:	86 e0       	ldi	r24, 0x06	; 6
    33ea:	8d 87       	std	Y+13, r24	; 0x0d
                        memcpy(command.payload,buffer,size);
                        break;
                    }
                }
            }*/
            processCommand(&command,&response);
    33ec:	ce 01       	movw	r24, r28
    33ee:	43 96       	adiw	r24, 0x13	; 19
    33f0:	9e 01       	movw	r18, r28
    33f2:	2a 5c       	subi	r18, 0xCA	; 202
    33f4:	3f 4f       	sbci	r19, 0xFF	; 255
    33f6:	b9 01       	movw	r22, r18
    33f8:	0e 94 de 1c 	call	0x39bc	; 0x39bc <processCommand>
            sendResponse(&response);
    33fc:	ce 01       	movw	r24, r28
    33fe:	c6 96       	adiw	r24, 0x36	; 54
    3400:	0e 94 03 1a 	call	0x3406	; 0x3406 <sendResponse>
    3404:	b1 cf       	rjmp	.-158    	; 0x3368 <vTaskUSARTRead+0x26>

00003406 <sendResponse>:

    }

}

int sendResponse(Response* response){
    3406:	df 93       	push	r29
    3408:	cf 93       	push	r28
    340a:	cd b7       	in	r28, 0x3d	; 61
    340c:	de b7       	in	r29, 0x3e	; 62
    340e:	2c 97       	sbiw	r28, 0x0c	; 12
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	de bf       	out	0x3e, r29	; 62
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	98 87       	std	Y+8, r25	; 0x08
    341c:	8f 83       	std	Y+7, r24	; 0x07
    char checksumBuffer[2];
    int i;
    int timeout = 1500;
    341e:	8c ed       	ldi	r24, 0xDC	; 220
    3420:	95 e0       	ldi	r25, 0x05	; 5
    3422:	9a 83       	std	Y+2, r25	; 0x02
    3424:	89 83       	std	Y+1, r24	; 0x01
    while(1){
        PORTB = 0x20;
    3426:	e5 e2       	ldi	r30, 0x25	; 37
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 e2       	ldi	r24, 0x20	; 32
    342c:	80 83       	st	Z, r24
        USART_Write(response->commandBack);
    342e:	ef 81       	ldd	r30, Y+7	; 0x07
    3430:	f8 85       	ldd	r31, Y+8	; 0x08
    3432:	80 81       	ld	r24, Z
    3434:	0e 94 68 18 	call	0x30d0	; 0x30d0 <USART_Write>
        USART_Write(response->size);
    3438:	ef 81       	ldd	r30, Y+7	; 0x07
    343a:	f8 85       	ldd	r31, Y+8	; 0x08
    343c:	81 81       	ldd	r24, Z+1	; 0x01
    343e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <USART_Write>
        checksumBuffer[0] = response->commandBack;
    3442:	ef 81       	ldd	r30, Y+7	; 0x07
    3444:	f8 85       	ldd	r31, Y+8	; 0x08
    3446:	80 81       	ld	r24, Z
    3448:	8d 83       	std	Y+5, r24	; 0x05
        checksumBuffer[1] = response->size;
    344a:	ef 81       	ldd	r30, Y+7	; 0x07
    344c:	f8 85       	ldd	r31, Y+8	; 0x08
    344e:	81 81       	ldd	r24, Z+1	; 0x01
    3450:	8e 83       	std	Y+6, r24	; 0x06
        USART_Write(calcChecksum(checksumBuffer,2));
    3452:	ce 01       	movw	r24, r28
    3454:	05 96       	adiw	r24, 0x05	; 5
    3456:	62 e0       	ldi	r22, 0x02	; 2
    3458:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <calcChecksum>
    345c:	0e 94 68 18 	call	0x30d0	; 0x30d0 <USART_Write>
        switch(waitForAck()){
    3460:	0e 94 af 1a 	call	0x355e	; 0x355e <waitForAck>
    3464:	28 2f       	mov	r18, r24
    3466:	33 27       	eor	r19, r19
    3468:	27 fd       	sbrc	r18, 7
    346a:	30 95       	com	r19
    346c:	3c 87       	std	Y+12, r19	; 0x0c
    346e:	2b 87       	std	Y+11, r18	; 0x0b
    3470:	8b 85       	ldd	r24, Y+11	; 0x0b
    3472:	9c 85       	ldd	r25, Y+12	; 0x0c
    3474:	00 97       	sbiw	r24, 0x00	; 0
    3476:	81 f0       	breq	.+32     	; 0x3498 <sendResponse+0x92>
    3478:	2b 85       	ldd	r18, Y+11	; 0x0b
    347a:	3c 85       	ldd	r19, Y+12	; 0x0c
    347c:	21 30       	cpi	r18, 0x01	; 1
    347e:	31 05       	cpc	r19, r1
    3480:	d1 f0       	breq	.+52     	; 0x34b6 <sendResponse+0xb0>
    3482:	8b 85       	ldd	r24, Y+11	; 0x0b
    3484:	9c 85       	ldd	r25, Y+12	; 0x0c
    3486:	2f ef       	ldi	r18, 0xFF	; 255
    3488:	8f 3f       	cpi	r24, 0xFF	; 255
    348a:	92 07       	cpc	r25, r18
    348c:	61 f6       	brne	.-104    	; 0x3426 <sendResponse+0x20>
        case 1:
            goto outOfWhile;
        case -1:
            return -1;
    348e:	8f ef       	ldi	r24, 0xFF	; 255
    3490:	9f ef       	ldi	r25, 0xFF	; 255
    3492:	9a 87       	std	Y+10, r25	; 0x0a
    3494:	89 87       	std	Y+9, r24	; 0x09
    3496:	44 c0       	rjmp	.+136    	; 0x3520 <sendResponse+0x11a>
        case 0:
            timeout--;
    3498:	89 81       	ldd	r24, Y+1	; 0x01
    349a:	9a 81       	ldd	r25, Y+2	; 0x02
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	9a 83       	std	Y+2, r25	; 0x02
    34a0:	89 83       	std	Y+1, r24	; 0x01
            if(!timeout){
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	9a 81       	ldd	r25, Y+2	; 0x02
    34a6:	00 97       	sbiw	r24, 0x00	; 0
    34a8:	09 f0       	breq	.+2      	; 0x34ac <sendResponse+0xa6>
    34aa:	bd cf       	rjmp	.-134    	; 0x3426 <sendResponse+0x20>
                return -1;
    34ac:	2f ef       	ldi	r18, 0xFF	; 255
    34ae:	3f ef       	ldi	r19, 0xFF	; 255
    34b0:	3a 87       	std	Y+10, r19	; 0x0a
    34b2:	29 87       	std	Y+9, r18	; 0x09
    34b4:	35 c0       	rjmp	.+106    	; 0x3520 <sendResponse+0x11a>
        }
    }

    outOfWhile:

    PORTB = 0x30;
    34b6:	e5 e2       	ldi	r30, 0x25	; 37
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 e3       	ldi	r24, 0x30	; 48
    34bc:	80 83       	st	Z, r24

    for(i=0;i<response->size;i++){
    34be:	1c 82       	std	Y+4, r1	; 0x04
    34c0:	1b 82       	std	Y+3, r1	; 0x03
    34c2:	10 c0       	rjmp	.+32     	; 0x34e4 <sendResponse+0xde>
        USART_Write(response->payload[i]);
    34c4:	2b 81       	ldd	r18, Y+3	; 0x03
    34c6:	3c 81       	ldd	r19, Y+4	; 0x04
    34c8:	8f 81       	ldd	r24, Y+7	; 0x07
    34ca:	98 85       	ldd	r25, Y+8	; 0x08
    34cc:	82 0f       	add	r24, r18
    34ce:	93 1f       	adc	r25, r19
    34d0:	fc 01       	movw	r30, r24
    34d2:	32 96       	adiw	r30, 0x02	; 2
    34d4:	80 81       	ld	r24, Z
    34d6:	0e 94 68 18 	call	0x30d0	; 0x30d0 <USART_Write>

    outOfWhile:

    PORTB = 0x30;

    for(i=0;i<response->size;i++){
    34da:	8b 81       	ldd	r24, Y+3	; 0x03
    34dc:	9c 81       	ldd	r25, Y+4	; 0x04
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	9c 83       	std	Y+4, r25	; 0x04
    34e2:	8b 83       	std	Y+3, r24	; 0x03
    34e4:	ef 81       	ldd	r30, Y+7	; 0x07
    34e6:	f8 85       	ldd	r31, Y+8	; 0x08
    34e8:	81 81       	ldd	r24, Z+1	; 0x01
    34ea:	28 2f       	mov	r18, r24
    34ec:	33 27       	eor	r19, r19
    34ee:	27 fd       	sbrc	r18, 7
    34f0:	30 95       	com	r19
    34f2:	8b 81       	ldd	r24, Y+3	; 0x03
    34f4:	9c 81       	ldd	r25, Y+4	; 0x04
    34f6:	82 17       	cp	r24, r18
    34f8:	93 07       	cpc	r25, r19
    34fa:	24 f3       	brlt	.-56     	; 0x34c4 <sendResponse+0xbe>
        USART_Write(response->payload[i]);
        //USART_AddToQueue(0x30 | (i + 2));
        //USART_AddToQueue()
    }
    USART_Write(calcChecksum(response->payload,response->size));
    34fc:	8f 81       	ldd	r24, Y+7	; 0x07
    34fe:	98 85       	ldd	r25, Y+8	; 0x08
    3500:	02 96       	adiw	r24, 0x02	; 2
    3502:	9c 01       	movw	r18, r24
    3504:	ef 81       	ldd	r30, Y+7	; 0x07
    3506:	f8 85       	ldd	r31, Y+8	; 0x08
    3508:	81 81       	ldd	r24, Z+1	; 0x01
    350a:	48 2f       	mov	r20, r24
    350c:	c9 01       	movw	r24, r18
    350e:	64 2f       	mov	r22, r20
    3510:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <calcChecksum>
    3514:	0e 94 68 18 	call	0x30d0	; 0x30d0 <USART_Write>

    waitForAck();
    3518:	0e 94 af 1a 	call	0x355e	; 0x355e <waitForAck>

    return 0;
    351c:	1a 86       	std	Y+10, r1	; 0x0a
    351e:	19 86       	std	Y+9, r1	; 0x09
    3520:	89 85       	ldd	r24, Y+9	; 0x09
    3522:	9a 85       	ldd	r25, Y+10	; 0x0a

}
    3524:	2c 96       	adiw	r28, 0x0c	; 12
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	f8 94       	cli
    352a:	de bf       	out	0x3e, r29	; 62
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	cd bf       	out	0x3d, r28	; 61
    3530:	cf 91       	pop	r28
    3532:	df 91       	pop	r29
    3534:	08 95       	ret

00003536 <sendACK>:

void sendACK(){
    3536:	df 93       	push	r29
    3538:	cf 93       	push	r28
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    USART_Write(128);
    353e:	80 e8       	ldi	r24, 0x80	; 128
    3540:	0e 94 68 18 	call	0x30d0	; 0x30d0 <USART_Write>
}
    3544:	cf 91       	pop	r28
    3546:	df 91       	pop	r29
    3548:	08 95       	ret

0000354a <sendNACK>:

void sendNACK(){
    354a:	df 93       	push	r29
    354c:	cf 93       	push	r28
    354e:	cd b7       	in	r28, 0x3d	; 61
    3550:	de b7       	in	r29, 0x3e	; 62
    USART_Write(80);
    3552:	80 e5       	ldi	r24, 0x50	; 80
    3554:	0e 94 68 18 	call	0x30d0	; 0x30d0 <USART_Write>
}
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	08 95       	ret

0000355e <waitForAck>:

char waitForAck(){
    355e:	df 93       	push	r29
    3560:	cf 93       	push	r28
    3562:	00 d0       	rcall	.+0      	; 0x3564 <waitForAck+0x6>
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
    int timeout = 1500;
    3568:	8c ed       	ldi	r24, 0xDC	; 220
    356a:	95 e0       	ldi	r25, 0x05	; 5
    356c:	9a 83       	std	Y+2, r25	; 0x02
    356e:	89 83       	std	Y+1, r24	; 0x01
    3570:	0c c0       	rjmp	.+24     	; 0x358a <waitForAck+0x2c>
    while ( !(UCSR2A & (1<<RXC2)) ){
        timeout--;
    3572:	89 81       	ldd	r24, Y+1	; 0x01
    3574:	9a 81       	ldd	r25, Y+2	; 0x02
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	9a 83       	std	Y+2, r25	; 0x02
    357a:	89 83       	std	Y+1, r24	; 0x01
        if(!timeout){
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    357e:	9a 81       	ldd	r25, Y+2	; 0x02
    3580:	00 97       	sbiw	r24, 0x00	; 0
    3582:	19 f4       	brne	.+6      	; 0x358a <waitForAck+0x2c>
            return -1;
    3584:	8f ef       	ldi	r24, 0xFF	; 255
    3586:	8b 83       	std	Y+3, r24	; 0x03
    3588:	0e c0       	rjmp	.+28     	; 0x35a6 <waitForAck+0x48>
    USART_Write(80);
}

char waitForAck(){
    int timeout = 1500;
    while ( !(UCSR2A & (1<<RXC2)) ){
    358a:	e0 ed       	ldi	r30, 0xD0	; 208
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	80 81       	ld	r24, Z
    3590:	88 23       	and	r24, r24
    3592:	7c f7       	brge	.-34     	; 0x3572 <waitForAck+0x14>
        timeout--;
        if(!timeout){
            return -1;
        }
    }
    if(UDR2 == 128){
    3594:	e6 ed       	ldi	r30, 0xD6	; 214
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	80 38       	cpi	r24, 0x80	; 128
    359c:	19 f4       	brne	.+6      	; 0x35a4 <waitForAck+0x46>
        return 1;
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	8b 83       	std	Y+3, r24	; 0x03
    35a2:	01 c0       	rjmp	.+2      	; 0x35a6 <waitForAck+0x48>
    } else {
        return 0;
    35a4:	1b 82       	std	Y+3, r1	; 0x03
    35a6:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	0f 90       	pop	r0
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	08 95       	ret

000035b4 <calcChecksum>:

uint8_t calcChecksum(uint8_t* buffer,uint8_t size){
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <calcChecksum+0x6>
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <calcChecksum+0x8>
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	9d 83       	std	Y+5, r25	; 0x05
    35c2:	8c 83       	std	Y+4, r24	; 0x04
    35c4:	6e 83       	std	Y+6, r22	; 0x06
    uint8_t checksum = 0;
    35c6:	1b 82       	std	Y+3, r1	; 0x03
    for(int i = 0; i < size; i++) {
    35c8:	1a 82       	std	Y+2, r1	; 0x02
    35ca:	19 82       	std	Y+1, r1	; 0x01
    35cc:	10 c0       	rjmp	.+32     	; 0x35ee <calcChecksum+0x3a>
        checksum += *(buffer++);
    35ce:	ec 81       	ldd	r30, Y+4	; 0x04
    35d0:	fd 81       	ldd	r31, Y+5	; 0x05
    35d2:	90 81       	ld	r25, Z
    35d4:	8b 81       	ldd	r24, Y+3	; 0x03
    35d6:	89 0f       	add	r24, r25
    35d8:	8b 83       	std	Y+3, r24	; 0x03
    35da:	8c 81       	ldd	r24, Y+4	; 0x04
    35dc:	9d 81       	ldd	r25, Y+5	; 0x05
    35de:	01 96       	adiw	r24, 0x01	; 1
    35e0:	9d 83       	std	Y+5, r25	; 0x05
    35e2:	8c 83       	std	Y+4, r24	; 0x04
    }
}

uint8_t calcChecksum(uint8_t* buffer,uint8_t size){
    uint8_t checksum = 0;
    for(int i = 0; i < size; i++) {
    35e4:	89 81       	ldd	r24, Y+1	; 0x01
    35e6:	9a 81       	ldd	r25, Y+2	; 0x02
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	9a 83       	std	Y+2, r25	; 0x02
    35ec:	89 83       	std	Y+1, r24	; 0x01
    35ee:	8e 81       	ldd	r24, Y+6	; 0x06
    35f0:	28 2f       	mov	r18, r24
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	9a 81       	ldd	r25, Y+2	; 0x02
    35f8:	82 17       	cp	r24, r18
    35fa:	93 07       	cpc	r25, r19
    35fc:	44 f3       	brlt	.-48     	; 0x35ce <calcChecksum+0x1a>
        checksum += *(buffer++);
    }
    return checksum;
    35fe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3600:	26 96       	adiw	r28, 0x06	; 6
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	cd bf       	out	0x3d, r28	; 61
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <commandIntegCheck>:
#include "protocol.h"
#include "Components/Sonar/Sonar.h"


//function to CRC the command structure
char commandIntegCheck(Command *command) {
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	0f 92       	push	r0
    3618:	0f 92       	push	r0
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	9a 83       	std	Y+2, r25	; 0x02
    3620:	89 83       	std	Y+1, r24	; 0x01
   //CRC the command with 0x00 in place of the CRC
   //return success for now
   return 1;
    3622:	81 e0       	ldi	r24, 0x01	; 1
}
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	cf 91       	pop	r28
    362a:	df 91       	pop	r29
    362c:	08 95       	ret

0000362e <processUltrasonicCommand>:

char processUltrasonicCommand(char commandCode, void* commandData,char* size, void* responseData) {
    362e:	df 93       	push	r29
    3630:	cf 93       	push	r28
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	29 97       	sbiw	r28, 0x09	; 9
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	7b 83       	std	Y+3, r23	; 0x03
    3646:	6a 83       	std	Y+2, r22	; 0x02
    3648:	5d 83       	std	Y+5, r21	; 0x05
    364a:	4c 83       	std	Y+4, r20	; 0x04
    364c:	3f 83       	std	Y+7, r19	; 0x07
    364e:	2e 83       	std	Y+6, r18	; 0x06
   switch(commandCode) {
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	28 2f       	mov	r18, r24
    3654:	33 27       	eor	r19, r19
    3656:	27 fd       	sbrc	r18, 7
    3658:	30 95       	com	r19
    365a:	39 87       	std	Y+9, r19	; 0x09
    365c:	28 87       	std	Y+8, r18	; 0x08
    365e:	88 85       	ldd	r24, Y+8	; 0x08
    3660:	99 85       	ldd	r25, Y+9	; 0x09
    3662:	82 30       	cpi	r24, 0x02	; 2
    3664:	91 05       	cpc	r25, r1
    3666:	99 f0       	breq	.+38     	; 0x368e <processUltrasonicCommand+0x60>
    3668:	28 85       	ldd	r18, Y+8	; 0x08
    366a:	39 85       	ldd	r19, Y+9	; 0x09
    366c:	23 30       	cpi	r18, 0x03	; 3
    366e:	31 05       	cpc	r19, r1
    3670:	b9 f0       	breq	.+46     	; 0x36a0 <processUltrasonicCommand+0x72>
    3672:	88 85       	ldd	r24, Y+8	; 0x08
    3674:	99 85       	ldd	r25, Y+9	; 0x09
    3676:	81 30       	cpi	r24, 0x01	; 1
    3678:	91 05       	cpc	r25, r1
    367a:	d1 f4       	brne	.+52     	; 0x36b0 <processUltrasonicCommand+0x82>
      case GET_ALL_SENSORS:
         getAllSensors((int*) responseData);
    367c:	8e 81       	ldd	r24, Y+6	; 0x06
    367e:	9f 81       	ldd	r25, Y+7	; 0x07
    3680:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <getAllSensors>
         *size = 12;
    3684:	ec 81       	ldd	r30, Y+4	; 0x04
    3686:	fd 81       	ldd	r31, Y+5	; 0x05
    3688:	8c e0       	ldi	r24, 0x0C	; 12
    368a:	80 83       	st	Z, r24
    368c:	11 c0       	rjmp	.+34     	; 0x36b0 <processUltrasonicCommand+0x82>
         break;
      case GET_CERTAIN_SENSORS:
         getCertainSensor(((char*)commandData)[0], (int*) responseData);
    368e:	ea 81       	ldd	r30, Y+2	; 0x02
    3690:	fb 81       	ldd	r31, Y+3	; 0x03
    3692:	80 81       	ld	r24, Z
    3694:	2e 81       	ldd	r18, Y+6	; 0x06
    3696:	3f 81       	ldd	r19, Y+7	; 0x07
    3698:	b9 01       	movw	r22, r18
    369a:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <getCertainSensor>
    369e:	08 c0       	rjmp	.+16     	; 0x36b0 <processUltrasonicCommand+0x82>
         break;
      case GET_SENSOR_GROUP:
         getSensorGroup(((char*)commandData)[0], (int*) responseData);
    36a0:	ea 81       	ldd	r30, Y+2	; 0x02
    36a2:	fb 81       	ldd	r31, Y+3	; 0x03
    36a4:	80 81       	ld	r24, Z
    36a6:	2e 81       	ldd	r18, Y+6	; 0x06
    36a8:	3f 81       	ldd	r19, Y+7	; 0x07
    36aa:	b9 01       	movw	r22, r18
    36ac:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <getSensorGroup>
         break;
   }
   //return success for now...
   return 1;
    36b0:	81 e0       	ldi	r24, 0x01	; 1
}
    36b2:	29 96       	adiw	r28, 0x09	; 9
    36b4:	0f b6       	in	r0, 0x3f	; 63
    36b6:	f8 94       	cli
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	cf 91       	pop	r28
    36c0:	df 91       	pop	r29
    36c2:	08 95       	ret

000036c4 <processSpeedCommand>:

char processSpeedCommand(char commandCode, void* commandData, void* responseData) {
    36c4:	df 93       	push	r29
    36c6:	cf 93       	push	r28
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
    36cc:	27 97       	sbiw	r28, 0x07	; 7
    36ce:	0f b6       	in	r0, 0x3f	; 63
    36d0:	f8 94       	cli
    36d2:	de bf       	out	0x3e, r29	; 62
    36d4:	0f be       	out	0x3f, r0	; 63
    36d6:	cd bf       	out	0x3d, r28	; 61
    36d8:	89 83       	std	Y+1, r24	; 0x01
    36da:	7b 83       	std	Y+3, r23	; 0x03
    36dc:	6a 83       	std	Y+2, r22	; 0x02
    36de:	5d 83       	std	Y+5, r21	; 0x05
    36e0:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	28 2f       	mov	r18, r24
    36e6:	33 27       	eor	r19, r19
    36e8:	27 fd       	sbrc	r18, 7
    36ea:	30 95       	com	r19
    36ec:	3f 83       	std	Y+7, r19	; 0x07
    36ee:	2e 83       	std	Y+6, r18	; 0x06
    36f0:	8e 81       	ldd	r24, Y+6	; 0x06
    36f2:	9f 81       	ldd	r25, Y+7	; 0x07
    36f4:	00 97       	sbiw	r24, 0x00	; 0
    36f6:	31 f0       	breq	.+12     	; 0x3704 <processSpeedCommand+0x40>
    36f8:	2e 81       	ldd	r18, Y+6	; 0x06
    36fa:	3f 81       	ldd	r19, Y+7	; 0x07
    36fc:	21 30       	cpi	r18, 0x01	; 1
    36fe:	31 05       	cpc	r19, r1
    3700:	31 f0       	breq	.+12     	; 0x370e <processSpeedCommand+0x4a>
    3702:	0d c0       	rjmp	.+26     	; 0x371e <processSpeedCommand+0x5a>
      case GET_SPEED:
         getSpeed((char*) responseData);
    3704:	8c 81       	ldd	r24, Y+4	; 0x04
    3706:	9d 81       	ldd	r25, Y+5	; 0x05
    3708:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <getSpeed>
    370c:	08 c0       	rjmp	.+16     	; 0x371e <processSpeedCommand+0x5a>
         break;
      case SET_SPEED:
         setSpeed(((char*)commandData)[0]);
    370e:	ea 81       	ldd	r30, Y+2	; 0x02
    3710:	fb 81       	ldd	r31, Y+3	; 0x03
    3712:	80 81       	ld	r24, Z
    3714:	99 27       	eor	r25, r25
    3716:	87 fd       	sbrc	r24, 7
    3718:	90 95       	com	r25
    371a:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <setSpeed>
         break;
   }
   //return success for now
   return 1;
    371e:	81 e0       	ldi	r24, 0x01	; 1
}
    3720:	27 96       	adiw	r28, 0x07	; 7
    3722:	0f b6       	in	r0, 0x3f	; 63
    3724:	f8 94       	cli
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	cd bf       	out	0x3d, r28	; 61
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	08 95       	ret

00003732 <processSteeringCommand>:

char processSteeringCommand(char commandCode, void* commandData, void* responseData) {
    3732:	df 93       	push	r29
    3734:	cf 93       	push	r28
    3736:	cd b7       	in	r28, 0x3d	; 61
    3738:	de b7       	in	r29, 0x3e	; 62
    373a:	27 97       	sbiw	r28, 0x07	; 7
    373c:	0f b6       	in	r0, 0x3f	; 63
    373e:	f8 94       	cli
    3740:	de bf       	out	0x3e, r29	; 62
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	cd bf       	out	0x3d, r28	; 61
    3746:	89 83       	std	Y+1, r24	; 0x01
    3748:	7b 83       	std	Y+3, r23	; 0x03
    374a:	6a 83       	std	Y+2, r22	; 0x02
    374c:	5d 83       	std	Y+5, r21	; 0x05
    374e:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	28 2f       	mov	r18, r24
    3754:	33 27       	eor	r19, r19
    3756:	27 fd       	sbrc	r18, 7
    3758:	30 95       	com	r19
    375a:	3f 83       	std	Y+7, r19	; 0x07
    375c:	2e 83       	std	Y+6, r18	; 0x06
    375e:	8e 81       	ldd	r24, Y+6	; 0x06
    3760:	9f 81       	ldd	r25, Y+7	; 0x07
    3762:	82 30       	cpi	r24, 0x02	; 2
    3764:	91 05       	cpc	r25, r1
    3766:	41 f1       	breq	.+80     	; 0x37b8 <processSteeringCommand+0x86>
    3768:	2e 81       	ldd	r18, Y+6	; 0x06
    376a:	3f 81       	ldd	r19, Y+7	; 0x07
    376c:	23 30       	cpi	r18, 0x03	; 3
    376e:	31 05       	cpc	r19, r1
    3770:	54 f4       	brge	.+20     	; 0x3786 <processSteeringCommand+0x54>
    3772:	8e 81       	ldd	r24, Y+6	; 0x06
    3774:	9f 81       	ldd	r25, Y+7	; 0x07
    3776:	00 97       	sbiw	r24, 0x00	; 0
    3778:	89 f0       	breq	.+34     	; 0x379c <processSteeringCommand+0x6a>
    377a:	2e 81       	ldd	r18, Y+6	; 0x06
    377c:	3f 81       	ldd	r19, Y+7	; 0x07
    377e:	21 30       	cpi	r18, 0x01	; 1
    3780:	31 05       	cpc	r19, r1
    3782:	a9 f0       	breq	.+42     	; 0x37ae <processSteeringCommand+0x7c>
    3784:	51 c0       	rjmp	.+162    	; 0x3828 <processSteeringCommand+0xf6>
    3786:	8e 81       	ldd	r24, Y+6	; 0x06
    3788:	9f 81       	ldd	r25, Y+7	; 0x07
    378a:	83 30       	cpi	r24, 0x03	; 3
    378c:	91 05       	cpc	r25, r1
    378e:	c9 f0       	breq	.+50     	; 0x37c2 <processSteeringCommand+0x90>
    3790:	2e 81       	ldd	r18, Y+6	; 0x06
    3792:	3f 81       	ldd	r19, Y+7	; 0x07
    3794:	24 30       	cpi	r18, 0x04	; 4
    3796:	31 05       	cpc	r19, r1
    3798:	99 f1       	breq	.+102    	; 0x3800 <processSteeringCommand+0xce>
    379a:	46 c0       	rjmp	.+140    	; 0x3828 <processSteeringCommand+0xf6>
      case SET_ANGLE:
         setAngle(*((char*)commandData));
    379c:	ea 81       	ldd	r30, Y+2	; 0x02
    379e:	fb 81       	ldd	r31, Y+3	; 0x03
    37a0:	80 81       	ld	r24, Z
    37a2:	99 27       	eor	r25, r25
    37a4:	87 fd       	sbrc	r24, 7
    37a6:	90 95       	com	r25
    37a8:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <setAngle>
    37ac:	3d c0       	rjmp	.+122    	; 0x3828 <processSteeringCommand+0xf6>
         break;
      case GET_ANGLE:
         getAngle((char*) responseData);
    37ae:	8c 81       	ldd	r24, Y+4	; 0x04
    37b0:	9d 81       	ldd	r25, Y+5	; 0x05
    37b2:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <getAngle>
    37b6:	38 c0       	rjmp	.+112    	; 0x3828 <processSteeringCommand+0xf6>
         break;
      case GET_DESIRED_ANGLE:
         getDesiredAngle((char*) responseData);
    37b8:	8c 81       	ldd	r24, Y+4	; 0x04
    37ba:	9d 81       	ldd	r25, Y+5	; 0x05
    37bc:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <getDesiredAngle>
    37c0:	33 c0       	rjmp	.+102    	; 0x3828 <processSteeringCommand+0xf6>
         break;
      case CHANGE_PID:
         changePID(((char*)commandData)[0], ((char*)commandData)[1], ((char*)commandData)[2]);
    37c2:	ea 81       	ldd	r30, Y+2	; 0x02
    37c4:	fb 81       	ldd	r31, Y+3	; 0x03
    37c6:	80 81       	ld	r24, Z
    37c8:	68 2f       	mov	r22, r24
    37ca:	77 27       	eor	r23, r23
    37cc:	67 fd       	sbrc	r22, 7
    37ce:	70 95       	com	r23
    37d0:	8a 81       	ldd	r24, Y+2	; 0x02
    37d2:	9b 81       	ldd	r25, Y+3	; 0x03
    37d4:	fc 01       	movw	r30, r24
    37d6:	31 96       	adiw	r30, 0x01	; 1
    37d8:	80 81       	ld	r24, Z
    37da:	48 2f       	mov	r20, r24
    37dc:	55 27       	eor	r21, r21
    37de:	47 fd       	sbrc	r20, 7
    37e0:	50 95       	com	r21
    37e2:	8a 81       	ldd	r24, Y+2	; 0x02
    37e4:	9b 81       	ldd	r25, Y+3	; 0x03
    37e6:	fc 01       	movw	r30, r24
    37e8:	32 96       	adiw	r30, 0x02	; 2
    37ea:	80 81       	ld	r24, Z
    37ec:	28 2f       	mov	r18, r24
    37ee:	33 27       	eor	r19, r19
    37f0:	27 fd       	sbrc	r18, 7
    37f2:	30 95       	com	r19
    37f4:	cb 01       	movw	r24, r22
    37f6:	ba 01       	movw	r22, r20
    37f8:	a9 01       	movw	r20, r18
    37fa:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <changePID>
    37fe:	14 c0       	rjmp	.+40     	; 0x3828 <processSteeringCommand+0xf6>
         break;
      case SET_LIMITS:
         setLimits(((char*)commandData)[0], ((char*)commandData)[1]);
    3800:	ea 81       	ldd	r30, Y+2	; 0x02
    3802:	fb 81       	ldd	r31, Y+3	; 0x03
    3804:	80 81       	ld	r24, Z
    3806:	48 2f       	mov	r20, r24
    3808:	55 27       	eor	r21, r21
    380a:	47 fd       	sbrc	r20, 7
    380c:	50 95       	com	r21
    380e:	8a 81       	ldd	r24, Y+2	; 0x02
    3810:	9b 81       	ldd	r25, Y+3	; 0x03
    3812:	fc 01       	movw	r30, r24
    3814:	31 96       	adiw	r30, 0x01	; 1
    3816:	80 81       	ld	r24, Z
    3818:	28 2f       	mov	r18, r24
    381a:	33 27       	eor	r19, r19
    381c:	27 fd       	sbrc	r18, 7
    381e:	30 95       	com	r19
    3820:	ca 01       	movw	r24, r20
    3822:	b9 01       	movw	r22, r18
    3824:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <setLimits>
         break;
   }
   //return success for now
   return 1;
    3828:	81 e0       	ldi	r24, 0x01	; 1
}
    382a:	27 96       	adiw	r28, 0x07	; 7
    382c:	0f b6       	in	r0, 0x3f	; 63
    382e:	f8 94       	cli
    3830:	de bf       	out	0x3e, r29	; 62
    3832:	0f be       	out	0x3f, r0	; 63
    3834:	cd bf       	out	0x3d, r28	; 61
    3836:	cf 91       	pop	r28
    3838:	df 91       	pop	r29
    383a:	08 95       	ret

0000383c <processFNRCommand>:

char processFNRCommand(char commandCode, void* commandData, void* responseData) {
    383c:	df 93       	push	r29
    383e:	cf 93       	push	r28
    3840:	cd b7       	in	r28, 0x3d	; 61
    3842:	de b7       	in	r29, 0x3e	; 62
    3844:	28 97       	sbiw	r28, 0x08	; 8
    3846:	0f b6       	in	r0, 0x3f	; 63
    3848:	f8 94       	cli
    384a:	de bf       	out	0x3e, r29	; 62
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	cd bf       	out	0x3d, r28	; 61
    3850:	89 83       	std	Y+1, r24	; 0x01
    3852:	7b 83       	std	Y+3, r23	; 0x03
    3854:	6a 83       	std	Y+2, r22	; 0x02
    3856:	5d 83       	std	Y+5, r21	; 0x05
    3858:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	28 2f       	mov	r18, r24
    385e:	33 27       	eor	r19, r19
    3860:	27 fd       	sbrc	r18, 7
    3862:	30 95       	com	r19
    3864:	3f 83       	std	Y+7, r19	; 0x07
    3866:	2e 83       	std	Y+6, r18	; 0x06
    3868:	8e 81       	ldd	r24, Y+6	; 0x06
    386a:	9f 81       	ldd	r25, Y+7	; 0x07
    386c:	00 97       	sbiw	r24, 0x00	; 0
    386e:	31 f0       	breq	.+12     	; 0x387c <processFNRCommand+0x40>
    3870:	2e 81       	ldd	r18, Y+6	; 0x06
    3872:	3f 81       	ldd	r19, Y+7	; 0x07
    3874:	21 30       	cpi	r18, 0x01	; 1
    3876:	31 05       	cpc	r19, r1
    3878:	51 f0       	breq	.+20     	; 0x388e <processFNRCommand+0x52>
    387a:	0d c0       	rjmp	.+26     	; 0x3896 <processFNRCommand+0x5a>
      case SET_FNR:
         setFNR(*((char*)commandData));
    387c:	ea 81       	ldd	r30, Y+2	; 0x02
    387e:	fb 81       	ldd	r31, Y+3	; 0x03
    3880:	80 81       	ld	r24, Z
    3882:	99 27       	eor	r25, r25
    3884:	87 fd       	sbrc	r24, 7
    3886:	90 95       	com	r25
    3888:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <setFNR>
    388c:	04 c0       	rjmp	.+8      	; 0x3896 <processFNRCommand+0x5a>
         break;
      case GET_FNR:
         getFNR((char*) responseData);
    388e:	8c 81       	ldd	r24, Y+4	; 0x04
    3890:	9d 81       	ldd	r25, Y+5	; 0x05
    3892:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <getFNR>
         break;
   }
}
    3896:	28 96       	adiw	r28, 0x08	; 8
    3898:	0f b6       	in	r0, 0x3f	; 63
    389a:	f8 94       	cli
    389c:	de bf       	out	0x3e, r29	; 62
    389e:	0f be       	out	0x3f, r0	; 63
    38a0:	cd bf       	out	0x3d, r28	; 61
    38a2:	cf 91       	pop	r28
    38a4:	df 91       	pop	r29
    38a6:	08 95       	ret

000038a8 <processBrakeCommand>:

char processBrakeCommand(char commandCode, void* commandData, void* responseData) {
    38a8:	df 93       	push	r29
    38aa:	cf 93       	push	r28
    38ac:	cd b7       	in	r28, 0x3d	; 61
    38ae:	de b7       	in	r29, 0x3e	; 62
    38b0:	28 97       	sbiw	r28, 0x08	; 8
    38b2:	0f b6       	in	r0, 0x3f	; 63
    38b4:	f8 94       	cli
    38b6:	de bf       	out	0x3e, r29	; 62
    38b8:	0f be       	out	0x3f, r0	; 63
    38ba:	cd bf       	out	0x3d, r28	; 61
    38bc:	89 83       	std	Y+1, r24	; 0x01
    38be:	7b 83       	std	Y+3, r23	; 0x03
    38c0:	6a 83       	std	Y+2, r22	; 0x02
    38c2:	5d 83       	std	Y+5, r21	; 0x05
    38c4:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	28 2f       	mov	r18, r24
    38ca:	33 27       	eor	r19, r19
    38cc:	27 fd       	sbrc	r18, 7
    38ce:	30 95       	com	r19
    38d0:	3f 83       	std	Y+7, r19	; 0x07
    38d2:	2e 83       	std	Y+6, r18	; 0x06
    38d4:	8e 81       	ldd	r24, Y+6	; 0x06
    38d6:	9f 81       	ldd	r25, Y+7	; 0x07
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	31 f0       	breq	.+12     	; 0x38e8 <processBrakeCommand+0x40>
    38dc:	2e 81       	ldd	r18, Y+6	; 0x06
    38de:	3f 81       	ldd	r19, Y+7	; 0x07
    38e0:	21 30       	cpi	r18, 0x01	; 1
    38e2:	31 05       	cpc	r19, r1
    38e4:	51 f0       	breq	.+20     	; 0x38fa <processBrakeCommand+0x52>
    38e6:	0d c0       	rjmp	.+26     	; 0x3902 <processBrakeCommand+0x5a>
      case SET_BRAKE:
	 setBrake(*((char*)commandData));
    38e8:	ea 81       	ldd	r30, Y+2	; 0x02
    38ea:	fb 81       	ldd	r31, Y+3	; 0x03
    38ec:	80 81       	ld	r24, Z
    38ee:	99 27       	eor	r25, r25
    38f0:	87 fd       	sbrc	r24, 7
    38f2:	90 95       	com	r25
    38f4:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <setBrake>
    38f8:	04 c0       	rjmp	.+8      	; 0x3902 <processBrakeCommand+0x5a>
	 break;
      case GET_BRAKE:
	 getBrake((char*) responseData);
    38fa:	8c 81       	ldd	r24, Y+4	; 0x04
    38fc:	9d 81       	ldd	r25, Y+5	; 0x05
    38fe:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <getBrake>
	 break; 
   }
}
    3902:	28 96       	adiw	r28, 0x08	; 8
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	cf 91       	pop	r28
    3910:	df 91       	pop	r29
    3912:	08 95       	ret

00003914 <processBatteryCommand>:

char processBatteryCommand(char commandCode, void* commandData, void* responseData) {
    3914:	df 93       	push	r29
    3916:	cf 93       	push	r28
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	28 97       	sbiw	r28, 0x08	; 8
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	f8 94       	cli
    3922:	de bf       	out	0x3e, r29	; 62
    3924:	0f be       	out	0x3f, r0	; 63
    3926:	cd bf       	out	0x3d, r28	; 61
    3928:	89 83       	std	Y+1, r24	; 0x01
    392a:	7b 83       	std	Y+3, r23	; 0x03
    392c:	6a 83       	std	Y+2, r22	; 0x02
    392e:	5d 83       	std	Y+5, r21	; 0x05
    3930:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	28 2f       	mov	r18, r24
    3936:	33 27       	eor	r19, r19
    3938:	27 fd       	sbrc	r18, 7
    393a:	30 95       	com	r19
    393c:	3f 83       	std	Y+7, r19	; 0x07
    393e:	2e 83       	std	Y+6, r18	; 0x06
    3940:	8e 81       	ldd	r24, Y+6	; 0x06
    3942:	9f 81       	ldd	r25, Y+7	; 0x07
    3944:	00 97       	sbiw	r24, 0x00	; 0
    3946:	31 f0       	breq	.+12     	; 0x3954 <processBatteryCommand+0x40>
    3948:	2e 81       	ldd	r18, Y+6	; 0x06
    394a:	3f 81       	ldd	r19, Y+7	; 0x07
    394c:	21 30       	cpi	r18, 0x01	; 1
    394e:	31 05       	cpc	r19, r1
    3950:	31 f0       	breq	.+12     	; 0x395e <processBatteryCommand+0x4a>
    3952:	09 c0       	rjmp	.+18     	; 0x3966 <processBatteryCommand+0x52>
      case GET_BATTERY_VOLTAGE:
         getBatteryVoltage((char*) responseData);
    3954:	8c 81       	ldd	r24, Y+4	; 0x04
    3956:	9d 81       	ldd	r25, Y+5	; 0x05
    3958:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <getBatteryVoltage>
    395c:	04 c0       	rjmp	.+8      	; 0x3966 <processBatteryCommand+0x52>
         break;
      case GET_STEERING_VOLTAGE:
         getSteeringVoltage((char*) responseData);
    395e:	8c 81       	ldd	r24, Y+4	; 0x04
    3960:	9d 81       	ldd	r25, Y+5	; 0x05
    3962:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <getSteeringVoltage>
         break;
   }
}
    3966:	28 96       	adiw	r28, 0x08	; 8
    3968:	0f b6       	in	r0, 0x3f	; 63
    396a:	f8 94       	cli
    396c:	de bf       	out	0x3e, r29	; 62
    396e:	0f be       	out	0x3f, r0	; 63
    3970:	cd bf       	out	0x3d, r28	; 61
    3972:	cf 91       	pop	r28
    3974:	df 91       	pop	r29
    3976:	08 95       	ret

00003978 <processLightCommand>:

char processLightCommand(char commandCode, void* commandData, void* responseDate) {
    3978:	df 93       	push	r29
    397a:	cf 93       	push	r28
    397c:	00 d0       	rcall	.+0      	; 0x397e <processLightCommand+0x6>
    397e:	00 d0       	rcall	.+0      	; 0x3980 <processLightCommand+0x8>
    3980:	cd b7       	in	r28, 0x3d	; 61
    3982:	de b7       	in	r29, 0x3e	; 62
    3984:	89 83       	std	Y+1, r24	; 0x01
    3986:	7b 83       	std	Y+3, r23	; 0x03
    3988:	6a 83       	std	Y+2, r22	; 0x02
    398a:	5d 83       	std	Y+5, r21	; 0x05
    398c:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    398e:	89 81       	ldd	r24, Y+1	; 0x01
    3990:	99 27       	eor	r25, r25
    3992:	87 fd       	sbrc	r24, 7
    3994:	90 95       	com	r25
    3996:	00 97       	sbiw	r24, 0x00	; 0
    3998:	41 f4       	brne	.+16     	; 0x39aa <processLightCommand+0x32>
      case SET_LIGHT:
	 setLight(*((char*)commandData));
    399a:	ea 81       	ldd	r30, Y+2	; 0x02
    399c:	fb 81       	ldd	r31, Y+3	; 0x03
    399e:	80 81       	ld	r24, Z
    39a0:	99 27       	eor	r25, r25
    39a2:	87 fd       	sbrc	r24, 7
    39a4:	90 95       	com	r25
    39a6:	0e 94 66 1d 	call	0x3acc	; 0x3acc <setLight>
         break;
   }
}
    39aa:	26 96       	adiw	r28, 0x06	; 6
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	08 95       	ret

000039bc <processCommand>:



//Function that will take in a command (as char array) and process it into a
//correct response to be stored into response
char processCommand(Command *command, Response *response) {
    39bc:	df 93       	push	r29
    39be:	cf 93       	push	r28
    39c0:	00 d0       	rcall	.+0      	; 0x39c2 <processCommand+0x6>
    39c2:	0f 92       	push	r0
    39c4:	0f 92       	push	r0
    39c6:	cd b7       	in	r28, 0x3d	; 61
    39c8:	de b7       	in	r29, 0x3e	; 62
    39ca:	9a 83       	std	Y+2, r25	; 0x02
    39cc:	89 83       	std	Y+1, r24	; 0x01
    39ce:	7c 83       	std	Y+4, r23	; 0x04
    39d0:	6b 83       	std	Y+3, r22	; 0x03
   response->size = 6;
    39d2:	eb 81       	ldd	r30, Y+3	; 0x03
    39d4:	fc 81       	ldd	r31, Y+4	; 0x04
    39d6:	86 e0       	ldi	r24, 0x06	; 6
    39d8:	81 83       	std	Z+1, r24	; 0x01
   response->payload[0] = 0;
    39da:	eb 81       	ldd	r30, Y+3	; 0x03
    39dc:	fc 81       	ldd	r31, Y+4	; 0x04
    39de:	12 82       	std	Z+2, r1	; 0x02
   response->payload[1] = 2;
    39e0:	eb 81       	ldd	r30, Y+3	; 0x03
    39e2:	fc 81       	ldd	r31, Y+4	; 0x04
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	83 83       	std	Z+3, r24	; 0x03
   response->payload[2] = 4;
    39e8:	eb 81       	ldd	r30, Y+3	; 0x03
    39ea:	fc 81       	ldd	r31, Y+4	; 0x04
    39ec:	84 e0       	ldi	r24, 0x04	; 4
    39ee:	84 83       	std	Z+4, r24	; 0x04
   response->payload[3] = 6;
    39f0:	eb 81       	ldd	r30, Y+3	; 0x03
    39f2:	fc 81       	ldd	r31, Y+4	; 0x04
    39f4:	86 e0       	ldi	r24, 0x06	; 6
    39f6:	85 83       	std	Z+5, r24	; 0x05
   response->payload[4] = 8;
    39f8:	eb 81       	ldd	r30, Y+3	; 0x03
    39fa:	fc 81       	ldd	r31, Y+4	; 0x04
    39fc:	88 e0       	ldi	r24, 0x08	; 8
    39fe:	86 83       	std	Z+6, r24	; 0x06
   response->payload[5] = 10;
    3a00:	eb 81       	ldd	r30, Y+3	; 0x03
    3a02:	fc 81       	ldd	r31, Y+4	; 0x04
    3a04:	8a e0       	ldi	r24, 0x0A	; 10
    3a06:	87 83       	std	Z+7, r24	; 0x07
      //return a dummy success for now
      return 1;
   } else {
      return 0;
   }
}
    3a08:	0f 90       	pop	r0
    3a0a:	0f 90       	pop	r0
    3a0c:	0f 90       	pop	r0
    3a0e:	0f 90       	pop	r0
    3a10:	0f 90       	pop	r0
    3a12:	cf 91       	pop	r28
    3a14:	df 91       	pop	r29
    3a16:	08 95       	ret

00003a18 <getBatteryVoltage>:

//battery controller functions

//read battery strength in a char. Might need to be unsigned, specs don't say
//anything regarding that.
char getBatteryVoltage(char *sensorResponse) {
    3a18:	df 93       	push	r29
    3a1a:	cf 93       	push	r28
    3a1c:	0f 92       	push	r0
    3a1e:	0f 92       	push	r0
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
    3a24:	9a 83       	std	Y+2, r25	; 0x02
    3a26:	89 83       	std	Y+1, r24	; 0x01
   //fake battery reading
   *sensorResponse = 0;
    3a28:	e9 81       	ldd	r30, Y+1	; 0x01
    3a2a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a2c:	10 82       	st	Z, r1
   //return success
   return 1;
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
}
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	cf 91       	pop	r28
    3a36:	df 91       	pop	r29
    3a38:	08 95       	ret

00003a3a <getSteeringVoltage>:

//gets voltage from steering?
char getSteeringVoltage(char *sensorResponse) {
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	0f 92       	push	r0
    3a40:	0f 92       	push	r0
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	9a 83       	std	Y+2, r25	; 0x02
    3a48:	89 83       	std	Y+1, r24	; 0x01
   //fake steering voltage reading
   *sensorResponse = 0;
    3a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a4e:	10 82       	st	Z, r1
   //return success
   return 1;
    3a50:	81 e0       	ldi	r24, 0x01	; 1
}
    3a52:	0f 90       	pop	r0
    3a54:	0f 90       	pop	r0
    3a56:	cf 91       	pop	r28
    3a58:	df 91       	pop	r29
    3a5a:	08 95       	ret

00003a5c <setBrake>:
//Brake controller functions. THERE IS CURRENTLY NO WAY TO GET THE DESIRED
//BRAKE TARGET IN THE SPECS

//set brake target
char setBrake(char gainTarget) {
    3a5c:	df 93       	push	r29
    3a5e:	cf 93       	push	r28
    3a60:	0f 92       	push	r0
    3a62:	cd b7       	in	r28, 0x3d	; 61
    3a64:	de b7       	in	r29, 0x3e	; 62
    3a66:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing happens
   //return success
   return 1;
    3a68:	81 e0       	ldi	r24, 0x01	; 1
}
    3a6a:	0f 90       	pop	r0
    3a6c:	cf 91       	pop	r28
    3a6e:	df 91       	pop	r29
    3a70:	08 95       	ret

00003a72 <getBrake>:

//get what is assumed to be the current brake value?
char getBrake(char* sensorResponse) {
    3a72:	df 93       	push	r29
    3a74:	cf 93       	push	r28
    3a76:	0f 92       	push	r0
    3a78:	0f 92       	push	r0
    3a7a:	cd b7       	in	r28, 0x3d	; 61
    3a7c:	de b7       	in	r29, 0x3e	; 62
    3a7e:	9a 83       	std	Y+2, r25	; 0x02
    3a80:	89 83       	std	Y+1, r24	; 0x01
   //fake brake reading
   *sensorResponse = 0;
    3a82:	e9 81       	ldd	r30, Y+1	; 0x01
    3a84:	fa 81       	ldd	r31, Y+2	; 0x02
    3a86:	10 82       	st	Z, r1
   //return success
   return 1;
    3a88:	81 e0       	ldi	r24, 0x01	; 1
}
    3a8a:	0f 90       	pop	r0
    3a8c:	0f 90       	pop	r0
    3a8e:	cf 91       	pop	r28
    3a90:	df 91       	pop	r29
    3a92:	08 95       	ret

00003a94 <setFNR>:
//FNR controller functions

//set the FNR controller, inputs are either -1, 0, or 1.
char setFNR(char FNR) {
    3a94:	df 93       	push	r29
    3a96:	cf 93       	push	r28
    3a98:	0f 92       	push	r0
    3a9a:	cd b7       	in	r28, 0x3d	; 61
    3a9c:	de b7       	in	r29, 0x3e	; 62
    3a9e:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing happens
   //return success
   return 1;
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
}
    3aa2:	0f 90       	pop	r0
    3aa4:	cf 91       	pop	r28
    3aa6:	df 91       	pop	r29
    3aa8:	08 95       	ret

00003aaa <getFNR>:

//get the current FNR state. Function follows same format for consistancy
char getFNR(char *sensorResponse) {
    3aaa:	df 93       	push	r29
    3aac:	cf 93       	push	r28
    3aae:	0f 92       	push	r0
    3ab0:	0f 92       	push	r0
    3ab2:	cd b7       	in	r28, 0x3d	; 61
    3ab4:	de b7       	in	r29, 0x3e	; 62
    3ab6:	9a 83       	std	Y+2, r25	; 0x02
    3ab8:	89 83       	std	Y+1, r24	; 0x01
   //fake reading
   *sensorResponse = 0;
    3aba:	e9 81       	ldd	r30, Y+1	; 0x01
    3abc:	fa 81       	ldd	r31, Y+2	; 0x02
    3abe:	10 82       	st	Z, r1
   //return success
   return 1;
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
}
    3ac2:	0f 90       	pop	r0
    3ac4:	0f 90       	pop	r0
    3ac6:	cf 91       	pop	r28
    3ac8:	df 91       	pop	r29
    3aca:	08 95       	ret

00003acc <setLight>:
//light controller functions

//turn lights on and off
char setLight(char lightTarget) {
    3acc:	df 93       	push	r29
    3ace:	cf 93       	push	r28
    3ad0:	0f 92       	push	r0
    3ad2:	cd b7       	in	r28, 0x3d	; 61
    3ad4:	de b7       	in	r29, 0x3e	; 62
    3ad6:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing happens
   //return success
   return 1;
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
}
    3ada:	0f 90       	pop	r0
    3adc:	cf 91       	pop	r28
    3ade:	df 91       	pop	r29
    3ae0:	08 95       	ret

00003ae2 <setSonarData>:
    3ae2:	cf 93       	push	r28
    3ae4:	df 93       	push	r29
    3ae6:	00 d0       	rcall	.+0      	; 0x3ae8 <setSonarData+0x6>
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	9a 83       	std	Y+2, r25	; 0x02
    3aee:	89 83       	std	Y+1, r24	; 0x01
    3af0:	6b 83       	std	Y+3, r22	; 0x03
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	9a 81       	ldd	r25, Y+2	; 0x02
    3af6:	8c 53       	subi	r24, 0x3C	; 60
    3af8:	95 4e       	sbci	r25, 0xE5	; 229
    3afa:	2b 81       	ldd	r18, Y+3	; 0x03
    3afc:	fc 01       	movw	r30, r24
    3afe:	20 83       	st	Z, r18
    3b00:	0f 90       	pop	r0
    3b02:	0f 90       	pop	r0
    3b04:	0f 90       	pop	r0
    3b06:	df 91       	pop	r29
    3b08:	cf 91       	pop	r28
    3b0a:	08 95       	ret

00003b0c <getSonarData>:
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	1f 92       	push	r1
    3b12:	1f 92       	push	r1
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	9a 83       	std	Y+2, r25	; 0x02
    3b1a:	89 83       	std	Y+1, r24	; 0x01
    3b1c:	89 81       	ldd	r24, Y+1	; 0x01
    3b1e:	8e 5f       	subi	r24, 0xFE	; 254
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	df 91       	pop	r29
    3b26:	cf 91       	pop	r28
    3b28:	08 95       	ret

00003b2a <getTimerCount>:
    3b2a:	cf 93       	push	r28
    3b2c:	df 93       	push	r29
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
    3b32:	86 e4       	ldi	r24, 0x46	; 70
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	fc 01       	movw	r30, r24
    3b38:	80 81       	ld	r24, Z
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	08 95       	ret

00003b40 <__vector_11>:
    3b40:	1f 92       	push	r1
    3b42:	0f 92       	push	r0
    3b44:	00 90 5f 00 	lds	r0, 0x005F
    3b48:	0f 92       	push	r0
    3b4a:	11 24       	eor	r1, r1
    3b4c:	00 90 5b 00 	lds	r0, 0x005B
    3b50:	0f 92       	push	r0
    3b52:	2f 93       	push	r18
    3b54:	3f 93       	push	r19
    3b56:	4f 93       	push	r20
    3b58:	5f 93       	push	r21
    3b5a:	6f 93       	push	r22
    3b5c:	7f 93       	push	r23
    3b5e:	8f 93       	push	r24
    3b60:	9f 93       	push	r25
    3b62:	af 93       	push	r26
    3b64:	bf 93       	push	r27
    3b66:	ef 93       	push	r30
    3b68:	ff 93       	push	r31
    3b6a:	cf 93       	push	r28
    3b6c:	df 93       	push	r29
    3b6e:	00 d0       	rcall	.+0      	; 0x3b70 <__vector_11+0x30>
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	19 82       	std	Y+1, r1	; 0x01
    3b76:	86 e0       	ldi	r24, 0x06	; 6
    3b78:	91 e0       	ldi	r25, 0x01	; 1
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	80 81       	ld	r24, Z
    3b7e:	88 2f       	mov	r24, r24
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	20 91 d8 1a 	lds	r18, 0x1AD8
    3b86:	22 2f       	mov	r18, r18
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	02 2e       	mov	r0, r18
    3b8c:	02 c0       	rjmp	.+4      	; 0x3b92 <__vector_11+0x52>
    3b8e:	95 95       	asr	r25
    3b90:	87 95       	ror	r24
    3b92:	0a 94       	dec	r0
    3b94:	e2 f7       	brpl	.-8      	; 0x3b8e <__vector_11+0x4e>
    3b96:	81 70       	andi	r24, 0x01	; 1
    3b98:	99 27       	eor	r25, r25
    3b9a:	00 97       	sbiw	r24, 0x00	; 0
    3b9c:	49 f0       	breq	.+18     	; 0x3bb0 <__vector_11+0x70>
    3b9e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <getTimerCount>
    3ba2:	8a 83       	std	Y+2, r24	; 0x02
    3ba4:	8e e2       	ldi	r24, 0x2E	; 46
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	2f ef       	ldi	r18, 0xFF	; 255
    3baa:	fc 01       	movw	r30, r24
    3bac:	20 83       	st	Z, r18
    3bae:	1d c0       	rjmp	.+58     	; 0x3bea <__vector_11+0xaa>
    3bb0:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <getTimerCount>
    3bb4:	8b 83       	std	Y+3, r24	; 0x03
    3bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    3bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bba:	89 17       	cp	r24, r25
    3bbc:	38 f4       	brcc	.+14     	; 0x3bcc <__vector_11+0x8c>
    3bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    3bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc2:	f9 2f       	mov	r31, r25
    3bc4:	f8 1b       	sub	r31, r24
    3bc6:	8f 2f       	mov	r24, r31
    3bc8:	80 93 bb 1a 	sts	0x1ABB, r24
    3bcc:	8e e2       	ldi	r24, 0x2E	; 46
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	10 82       	st	Z, r1
    3bd4:	80 91 ca 1a 	lds	r24, 0x1ACA
    3bd8:	90 91 cb 1a 	lds	r25, 0x1ACB
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	40 e0       	ldi	r20, 0x00	; 0
    3be0:	50 e0       	ldi	r21, 0x00	; 0
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	70 e0       	ldi	r23, 0x00	; 0
    3be6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xQueueGenericSendFromISR>
    3bea:	0f 90       	pop	r0
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	ff 91       	pop	r31
    3bf6:	ef 91       	pop	r30
    3bf8:	bf 91       	pop	r27
    3bfa:	af 91       	pop	r26
    3bfc:	9f 91       	pop	r25
    3bfe:	8f 91       	pop	r24
    3c00:	7f 91       	pop	r23
    3c02:	6f 91       	pop	r22
    3c04:	5f 91       	pop	r21
    3c06:	4f 91       	pop	r20
    3c08:	3f 91       	pop	r19
    3c0a:	2f 91       	pop	r18
    3c0c:	0f 90       	pop	r0
    3c0e:	00 92 5b 00 	sts	0x005B, r0
    3c12:	0f 90       	pop	r0
    3c14:	00 92 5f 00 	sts	0x005F, r0
    3c18:	0f 90       	pop	r0
    3c1a:	1f 90       	pop	r1
    3c1c:	18 95       	reti

00003c1e <initializeSonarSensors>:
    3c1e:	cf 93       	push	r28
    3c20:	df 93       	push	r29
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
    3c26:	8d e7       	ldi	r24, 0x7D	; 125
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	10 82       	st	Z, r1
    3c2e:	87 e0       	ldi	r24, 0x07	; 7
    3c30:	91 e0       	ldi	r25, 0x01	; 1
    3c32:	fc 01       	movw	r30, r24
    3c34:	10 82       	st	Z, r1
    3c36:	87 e2       	ldi	r24, 0x27	; 39
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	10 82       	st	Z, r1
    3c3e:	88 e2       	ldi	r24, 0x28	; 40
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	fc 01       	movw	r30, r24
    3c44:	10 82       	st	Z, r1
    3c46:	8d e6       	ldi	r24, 0x6D	; 109
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	2f ef       	ldi	r18, 0xFF	; 255
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	20 83       	st	Z, r18
    3c50:	88 e6       	ldi	r24, 0x68	; 104
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	27 e0       	ldi	r18, 0x07	; 7
    3c56:	fc 01       	movw	r30, r24
    3c58:	20 83       	st	Z, r18
    3c5a:	84 e4       	ldi	r24, 0x44	; 68
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	fc 01       	movw	r30, r24
    3c60:	10 82       	st	Z, r1
    3c62:	85 e4       	ldi	r24, 0x45	; 69
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	25 e0       	ldi	r18, 0x05	; 5
    3c68:	fc 01       	movw	r30, r24
    3c6a:	20 83       	st	Z, r18
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	08 95       	ret

00003c72 <vTaskSonar>:
    3c72:	cf 93       	push	r28
    3c74:	df 93       	push	r29
    3c76:	00 d0       	rcall	.+0      	; 0x3c78 <vTaskSonar+0x6>
    3c78:	1f 92       	push	r1
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62
    3c7e:	9c 83       	std	Y+4, r25	; 0x04
    3c80:	8b 83       	std	Y+3, r24	; 0x03
    3c82:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <initializeSonarSensors>
    3c86:	43 e0       	ldi	r20, 0x03	; 3
    3c88:	60 e0       	ldi	r22, 0x00	; 0
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <xQueueGenericCreate>
    3c90:	90 93 cb 1a 	sts	0x1ACB, r25
    3c94:	80 93 ca 1a 	sts	0x1ACA, r24
    3c98:	80 91 ca 1a 	lds	r24, 0x1ACA
    3c9c:	90 91 cb 1a 	lds	r25, 0x1ACB
    3ca0:	00 97       	sbiw	r24, 0x00	; 0
    3ca2:	59 f0       	breq	.+22     	; 0x3cba <vTaskSonar+0x48>
    3ca4:	80 91 ca 1a 	lds	r24, 0x1ACA
    3ca8:	90 91 cb 1a 	lds	r25, 0x1ACB
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	40 e0       	ldi	r20, 0x00	; 0
    3cb0:	50 e0       	ldi	r21, 0x00	; 0
    3cb2:	60 e0       	ldi	r22, 0x00	; 0
    3cb4:	70 e0       	ldi	r23, 0x00	; 0
    3cb6:	0e 94 9f 0c 	call	0x193e	; 0x193e <xQueueGenericSend>
    3cba:	10 92 d8 1a 	sts	0x1AD8, r1
    3cbe:	1a 82       	std	Y+2, r1	; 0x02
    3cc0:	19 82       	std	Y+1, r1	; 0x01
    3cc2:	26 c0       	rjmp	.+76     	; 0x3d10 <vTaskSonar+0x9e>
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	80 93 d8 1a 	sts	0x1AD8, r24
    3cca:	88 e2       	ldi	r24, 0x28	; 40
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	21 e0       	ldi	r18, 0x01	; 1
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	09 80       	ldd	r0, Y+1	; 0x01
    3cd4:	02 c0       	rjmp	.+4      	; 0x3cda <vTaskSonar+0x68>
    3cd6:	22 0f       	add	r18, r18
    3cd8:	33 1f       	adc	r19, r19
    3cda:	0a 94       	dec	r0
    3cdc:	e2 f7       	brpl	.-8      	; 0x3cd6 <vTaskSonar+0x64>
    3cde:	fc 01       	movw	r30, r24
    3ce0:	20 83       	st	Z, r18
    3ce2:	80 91 ca 1a 	lds	r24, 0x1ACA
    3ce6:	90 91 cb 1a 	lds	r25, 0x1ACB
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	4f ef       	ldi	r20, 0xFF	; 255
    3cee:	5f ef       	ldi	r21, 0xFF	; 255
    3cf0:	60 e0       	ldi	r22, 0x00	; 0
    3cf2:	70 e0       	ldi	r23, 0x00	; 0
    3cf4:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <xQueueGenericReceive>
    3cf8:	20 91 bb 1a 	lds	r18, 0x1ABB
    3cfc:	89 81       	ldd	r24, Y+1	; 0x01
    3cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    3d00:	62 2f       	mov	r22, r18
    3d02:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <setSonarData>
    3d06:	89 81       	ldd	r24, Y+1	; 0x01
    3d08:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0a:	01 96       	adiw	r24, 0x01	; 1
    3d0c:	9a 83       	std	Y+2, r25	; 0x02
    3d0e:	89 83       	std	Y+1, r24	; 0x01
    3d10:	89 81       	ldd	r24, Y+1	; 0x01
    3d12:	9a 81       	ldd	r25, Y+2	; 0x02
    3d14:	82 30       	cpi	r24, 0x02	; 2
    3d16:	91 05       	cpc	r25, r1
    3d18:	ac f2       	brlt	.-86     	; 0x3cc4 <vTaskSonar+0x52>
    3d1a:	d1 cf       	rjmp	.-94     	; 0x3cbe <vTaskSonar+0x4c>

00003d1c <getAllSensors>:
    3d1c:	cf 93       	push	r28
    3d1e:	df 93       	push	r29
    3d20:	00 d0       	rcall	.+0      	; 0x3d22 <getAllSensors+0x6>
    3d22:	1f 92       	push	r1
    3d24:	cd b7       	in	r28, 0x3d	; 61
    3d26:	de b7       	in	r29, 0x3e	; 62
    3d28:	9c 83       	std	Y+4, r25	; 0x04
    3d2a:	8b 83       	std	Y+3, r24	; 0x03
    3d2c:	1a 82       	std	Y+2, r1	; 0x02
    3d2e:	19 82       	std	Y+1, r1	; 0x01
    3d30:	14 c0       	rjmp	.+40     	; 0x3d5a <getAllSensors+0x3e>
    3d32:	89 81       	ldd	r24, Y+1	; 0x01
    3d34:	9a 81       	ldd	r25, Y+2	; 0x02
    3d36:	88 0f       	add	r24, r24
    3d38:	99 1f       	adc	r25, r25
    3d3a:	2b 81       	ldd	r18, Y+3	; 0x03
    3d3c:	3c 81       	ldd	r19, Y+4	; 0x04
    3d3e:	82 0f       	add	r24, r18
    3d40:	93 1f       	adc	r25, r19
    3d42:	29 81       	ldd	r18, Y+1	; 0x01
    3d44:	3a 81       	ldd	r19, Y+2	; 0x02
    3d46:	2f 5f       	subi	r18, 0xFF	; 255
    3d48:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	31 83       	std	Z+1, r19	; 0x01
    3d4e:	20 83       	st	Z, r18
    3d50:	89 81       	ldd	r24, Y+1	; 0x01
    3d52:	9a 81       	ldd	r25, Y+2	; 0x02
    3d54:	01 96       	adiw	r24, 0x01	; 1
    3d56:	9a 83       	std	Y+2, r25	; 0x02
    3d58:	89 83       	std	Y+1, r24	; 0x01
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d5e:	86 30       	cpi	r24, 0x06	; 6
    3d60:	91 05       	cpc	r25, r1
    3d62:	38 f3       	brcs	.-50     	; 0x3d32 <getAllSensors+0x16>
    3d64:	0f 90       	pop	r0
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
    3d6a:	0f 90       	pop	r0
    3d6c:	df 91       	pop	r29
    3d6e:	cf 91       	pop	r28
    3d70:	08 95       	ret

00003d72 <getCertainSensor>:
    3d72:	0f 93       	push	r16
    3d74:	1f 93       	push	r17
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	00 d0       	rcall	.+0      	; 0x3d7c <getCertainSensor+0xa>
    3d7c:	cd b7       	in	r28, 0x3d	; 61
    3d7e:	de b7       	in	r29, 0x3e	; 62
    3d80:	89 83       	std	Y+1, r24	; 0x01
    3d82:	7b 83       	std	Y+3, r23	; 0x03
    3d84:	6a 83       	std	Y+2, r22	; 0x02
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	86 30       	cpi	r24, 0x06	; 6
    3d8a:	b4 f4       	brge	.+44     	; 0x3db8 <getCertainSensor+0x46>
    3d8c:	89 81       	ldd	r24, Y+1	; 0x01
    3d8e:	99 27       	eor	r25, r25
    3d90:	87 fd       	sbrc	r24, 7
    3d92:	90 95       	com	r25
    3d94:	88 0f       	add	r24, r24
    3d96:	99 1f       	adc	r25, r25
    3d98:	2a 81       	ldd	r18, Y+2	; 0x02
    3d9a:	3b 81       	ldd	r19, Y+3	; 0x03
    3d9c:	89 01       	movw	r16, r18
    3d9e:	08 0f       	add	r16, r24
    3da0:	19 1f       	adc	r17, r25
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	99 27       	eor	r25, r25
    3da6:	87 fd       	sbrc	r24, 7
    3da8:	90 95       	com	r25
    3daa:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <getSonarData>
    3dae:	88 2f       	mov	r24, r24
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	f8 01       	movw	r30, r16
    3db4:	91 83       	std	Z+1, r25	; 0x01
    3db6:	80 83       	st	Z, r24
    3db8:	0f 90       	pop	r0
    3dba:	0f 90       	pop	r0
    3dbc:	0f 90       	pop	r0
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	1f 91       	pop	r17
    3dc4:	0f 91       	pop	r16
    3dc6:	08 95       	ret

00003dc8 <getSensorGroup>:
    3dc8:	0f 93       	push	r16
    3dca:	1f 93       	push	r17
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <getSensorGroup+0xa>
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	89 83       	std	Y+1, r24	; 0x01
    3dd8:	7b 83       	std	Y+3, r23	; 0x03
    3dda:	6a 83       	std	Y+2, r22	; 0x02
    3ddc:	89 81       	ldd	r24, Y+1	; 0x01
    3dde:	99 27       	eor	r25, r25
    3de0:	87 fd       	sbrc	r24, 7
    3de2:	90 95       	com	r25
    3de4:	81 30       	cpi	r24, 0x01	; 1
    3de6:	91 05       	cpc	r25, r1
    3de8:	01 f1       	breq	.+64     	; 0x3e2a <getSensorGroup+0x62>
    3dea:	82 30       	cpi	r24, 0x02	; 2
    3dec:	91 05       	cpc	r25, r1
    3dee:	b9 f1       	breq	.+110    	; 0x3e5e <getSensorGroup+0x96>
    3df0:	00 97       	sbiw	r24, 0x00	; 0
    3df2:	09 f0       	breq	.+2      	; 0x3df6 <getSensorGroup+0x2e>
    3df4:	4e c0       	rjmp	.+156    	; 0x3e92 <getSensorGroup+0xca>
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <getSonarData>
    3dfe:	28 2f       	mov	r18, r24
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	8a 81       	ldd	r24, Y+2	; 0x02
    3e04:	9b 81       	ldd	r25, Y+3	; 0x03
    3e06:	fc 01       	movw	r30, r24
    3e08:	31 83       	std	Z+1, r19	; 0x01
    3e0a:	20 83       	st	Z, r18
    3e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e10:	8c 01       	movw	r16, r24
    3e12:	0e 5f       	subi	r16, 0xFE	; 254
    3e14:	1f 4f       	sbci	r17, 0xFF	; 255
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <getSonarData>
    3e1e:	88 2f       	mov	r24, r24
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	f8 01       	movw	r30, r16
    3e24:	91 83       	std	Z+1, r25	; 0x01
    3e26:	80 83       	st	Z, r24
    3e28:	34 c0       	rjmp	.+104    	; 0x3e92 <getSensorGroup+0xca>
    3e2a:	82 e0       	ldi	r24, 0x02	; 2
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <getSonarData>
    3e32:	28 2f       	mov	r18, r24
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	8a 81       	ldd	r24, Y+2	; 0x02
    3e38:	9b 81       	ldd	r25, Y+3	; 0x03
    3e3a:	fc 01       	movw	r30, r24
    3e3c:	31 83       	std	Z+1, r19	; 0x01
    3e3e:	20 83       	st	Z, r18
    3e40:	8a 81       	ldd	r24, Y+2	; 0x02
    3e42:	9b 81       	ldd	r25, Y+3	; 0x03
    3e44:	8c 01       	movw	r16, r24
    3e46:	0e 5f       	subi	r16, 0xFE	; 254
    3e48:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4a:	83 e0       	ldi	r24, 0x03	; 3
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <getSonarData>
    3e52:	88 2f       	mov	r24, r24
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	f8 01       	movw	r30, r16
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	80 83       	st	Z, r24
    3e5c:	1a c0       	rjmp	.+52     	; 0x3e92 <getSensorGroup+0xca>
    3e5e:	84 e0       	ldi	r24, 0x04	; 4
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <getSonarData>
    3e66:	28 2f       	mov	r18, r24
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e6e:	fc 01       	movw	r30, r24
    3e70:	31 83       	std	Z+1, r19	; 0x01
    3e72:	20 83       	st	Z, r18
    3e74:	8a 81       	ldd	r24, Y+2	; 0x02
    3e76:	9b 81       	ldd	r25, Y+3	; 0x03
    3e78:	8c 01       	movw	r16, r24
    3e7a:	0e 5f       	subi	r16, 0xFE	; 254
    3e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e7e:	85 e0       	ldi	r24, 0x05	; 5
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <getSonarData>
    3e86:	88 2f       	mov	r24, r24
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	f8 01       	movw	r30, r16
    3e8c:	91 83       	std	Z+1, r25	; 0x01
    3e8e:	80 83       	st	Z, r24
    3e90:	00 00       	nop
    3e92:	0f 90       	pop	r0
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	df 91       	pop	r29
    3e9a:	cf 91       	pop	r28
    3e9c:	1f 91       	pop	r17
    3e9e:	0f 91       	pop	r16
    3ea0:	08 95       	ret

00003ea2 <getSpeed>:
//Speed Sensor group

//get the speed of the vehicle
char getSpeed(char* sensorResponse) {
    3ea2:	df 93       	push	r29
    3ea4:	cf 93       	push	r28
    3ea6:	0f 92       	push	r0
    3ea8:	0f 92       	push	r0
    3eaa:	cd b7       	in	r28, 0x3d	; 61
    3eac:	de b7       	in	r29, 0x3e	; 62
    3eae:	9a 83       	std	Y+2, r25	; 0x02
    3eb0:	89 83       	std	Y+1, r24	; 0x01
   //store dummy speed value
   *sensorResponse = 0;
    3eb2:	e9 81       	ldd	r30, Y+1	; 0x01
    3eb4:	fa 81       	ldd	r31, Y+2	; 0x02
    3eb6:	10 82       	st	Z, r1
   //return success
   return 1;
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
}
    3eba:	0f 90       	pop	r0
    3ebc:	0f 90       	pop	r0
    3ebe:	cf 91       	pop	r28
    3ec0:	df 91       	pop	r29
    3ec2:	08 95       	ret

00003ec4 <setSpeed>:

//will set just the speed of the wheels of the car
char setSpeed(char speedTarget) {
    3ec4:	df 93       	push	r29
    3ec6:	cf 93       	push	r28
    3ec8:	0f 92       	push	r0
    3eca:	cd b7       	in	r28, 0x3d	; 61
    3ecc:	de b7       	in	r29, 0x3e	; 62
    3ece:	89 83       	std	Y+1, r24	; 0x01
   //nothing done down here
   //return success
   return 1;
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
}
    3ed2:	0f 90       	pop	r0
    3ed4:	cf 91       	pop	r28
    3ed6:	df 91       	pop	r29
    3ed8:	08 95       	ret

00003eda <setAngle>:

//Steering group

//JUST SETS ANGLE TARGET. Actual angle changing is lower level
char setAngle(char angleTarget) {
    3eda:	df 93       	push	r29
    3edc:	cf 93       	push	r28
    3ede:	0f 92       	push	r0
    3ee0:	cd b7       	in	r28, 0x3d	; 61
    3ee2:	de b7       	in	r29, 0x3e	; 62
    3ee4:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing will happen for now...
   //return success
   return 1;
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
}
    3ee8:	0f 90       	pop	r0
    3eea:	cf 91       	pop	r28
    3eec:	df 91       	pop	r29
    3eee:	08 95       	ret

00003ef0 <getAngle>:

//get the current angle of the steering system
char getAngle(char* sensorResponse) {
    3ef0:	df 93       	push	r29
    3ef2:	cf 93       	push	r28
    3ef4:	0f 92       	push	r0
    3ef6:	0f 92       	push	r0
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	9a 83       	std	Y+2, r25	; 0x02
    3efe:	89 83       	std	Y+1, r24	; 0x01
   //store fake angle reading
   *sensorResponse = 0;
    3f00:	e9 81       	ldd	r30, Y+1	; 0x01
    3f02:	fa 81       	ldd	r31, Y+2	; 0x02
    3f04:	10 82       	st	Z, r1
   //return success
   return 1;
    3f06:	81 e0       	ldi	r24, 0x01	; 1
}
    3f08:	0f 90       	pop	r0
    3f0a:	0f 90       	pop	r0
    3f0c:	cf 91       	pop	r28
    3f0e:	df 91       	pop	r29
    3f10:	08 95       	ret

00003f12 <getDesiredAngle>:

//get the angle target. argument name is sensorResponse for the sake of consistancy
char getDesiredAngle(char* sensorResponse) {
    3f12:	df 93       	push	r29
    3f14:	cf 93       	push	r28
    3f16:	0f 92       	push	r0
    3f18:	0f 92       	push	r0
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
    3f1e:	9a 83       	std	Y+2, r25	; 0x02
    3f20:	89 83       	std	Y+1, r24	; 0x01
   //fake response
   *sensorResponse = 0;
    3f22:	e9 81       	ldd	r30, Y+1	; 0x01
    3f24:	fa 81       	ldd	r31, Y+2	; 0x02
    3f26:	10 82       	st	Z, r1
   //return success
   return 1;
    3f28:	81 e0       	ldi	r24, 0x01	; 1
}
    3f2a:	0f 90       	pop	r0
    3f2c:	0f 90       	pop	r0
    3f2e:	cf 91       	pop	r28
    3f30:	df 91       	pop	r29
    3f32:	08 95       	ret

00003f34 <changePID>:

//change the PID controller
char changePID(char P, char I, char D) {
    3f34:	df 93       	push	r29
    3f36:	cf 93       	push	r28
    3f38:	00 d0       	rcall	.+0      	; 0x3f3a <changePID+0x6>
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
    3f3e:	89 83       	std	Y+1, r24	; 0x01
    3f40:	6a 83       	std	Y+2, r22	; 0x02
    3f42:	4b 83       	std	Y+3, r20	; 0x03
   //dummy function, nothing happens
   //return success
   return 1;
    3f44:	81 e0       	ldi	r24, 0x01	; 1
}
    3f46:	0f 90       	pop	r0
    3f48:	0f 90       	pop	r0
    3f4a:	0f 90       	pop	r0
    3f4c:	cf 91       	pop	r28
    3f4e:	df 91       	pop	r29
    3f50:	08 95       	ret

00003f52 <setLimits>:

//not sure what this does. Also not sure why upper and lower are separated
//but its in the specs so...
char setLimits(char upper, char lower) {
    3f52:	df 93       	push	r29
    3f54:	cf 93       	push	r28
    3f56:	0f 92       	push	r0
    3f58:	0f 92       	push	r0
    3f5a:	cd b7       	in	r28, 0x3d	; 61
    3f5c:	de b7       	in	r29, 0x3e	; 62
    3f5e:	89 83       	std	Y+1, r24	; 0x01
    3f60:	6a 83       	std	Y+2, r22	; 0x02
   //dummy function, nothing happens
   //return success
   return 1;
    3f62:	81 e0       	ldi	r24, 0x01	; 1
}
    3f64:	0f 90       	pop	r0
    3f66:	0f 90       	pop	r0
    3f68:	cf 91       	pop	r28
    3f6a:	df 91       	pop	r29
    3f6c:	08 95       	ret

00003f6e <memcpy>:
    3f6e:	fb 01       	movw	r30, r22
    3f70:	dc 01       	movw	r26, r24
    3f72:	02 c0       	rjmp	.+4      	; 0x3f78 <memcpy+0xa>
    3f74:	01 90       	ld	r0, Z+
    3f76:	0d 92       	st	X+, r0
    3f78:	41 50       	subi	r20, 0x01	; 1
    3f7a:	50 40       	sbci	r21, 0x00	; 0
    3f7c:	d8 f7       	brcc	.-10     	; 0x3f74 <memcpy+0x6>
    3f7e:	08 95       	ret

00003f80 <memset>:
    3f80:	dc 01       	movw	r26, r24
    3f82:	01 c0       	rjmp	.+2      	; 0x3f86 <memset+0x6>
    3f84:	6d 93       	st	X+, r22
    3f86:	41 50       	subi	r20, 0x01	; 1
    3f88:	50 40       	sbci	r21, 0x00	; 0
    3f8a:	e0 f7       	brcc	.-8      	; 0x3f84 <memset+0x4>
    3f8c:	08 95       	ret

00003f8e <strncpy>:
    3f8e:	fb 01       	movw	r30, r22
    3f90:	dc 01       	movw	r26, r24
    3f92:	41 50       	subi	r20, 0x01	; 1
    3f94:	50 40       	sbci	r21, 0x00	; 0
    3f96:	48 f0       	brcs	.+18     	; 0x3faa <strncpy+0x1c>
    3f98:	01 90       	ld	r0, Z+
    3f9a:	0d 92       	st	X+, r0
    3f9c:	00 20       	and	r0, r0
    3f9e:	c9 f7       	brne	.-14     	; 0x3f92 <strncpy+0x4>
    3fa0:	01 c0       	rjmp	.+2      	; 0x3fa4 <strncpy+0x16>
    3fa2:	1d 92       	st	X+, r1
    3fa4:	41 50       	subi	r20, 0x01	; 1
    3fa6:	50 40       	sbci	r21, 0x00	; 0
    3fa8:	e0 f7       	brcc	.-8      	; 0x3fa2 <strncpy+0x14>
    3faa:	08 95       	ret

00003fac <itoa>:
    3fac:	fb 01       	movw	r30, r22
    3fae:	9f 01       	movw	r18, r30
    3fb0:	e8 94       	clt
    3fb2:	42 30       	cpi	r20, 0x02	; 2
    3fb4:	c4 f0       	brlt	.+48     	; 0x3fe6 <itoa+0x3a>
    3fb6:	45 32       	cpi	r20, 0x25	; 37
    3fb8:	b4 f4       	brge	.+44     	; 0x3fe6 <itoa+0x3a>
    3fba:	4a 30       	cpi	r20, 0x0A	; 10
    3fbc:	29 f4       	brne	.+10     	; 0x3fc8 <itoa+0x1c>
    3fbe:	97 fb       	bst	r25, 7
    3fc0:	1e f4       	brtc	.+6      	; 0x3fc8 <itoa+0x1c>
    3fc2:	90 95       	com	r25
    3fc4:	81 95       	neg	r24
    3fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc8:	64 2f       	mov	r22, r20
    3fca:	77 27       	eor	r23, r23
    3fcc:	0e 94 07 20 	call	0x400e	; 0x400e <__udivmodhi4>
    3fd0:	80 5d       	subi	r24, 0xD0	; 208
    3fd2:	8a 33       	cpi	r24, 0x3A	; 58
    3fd4:	0c f0       	brlt	.+2      	; 0x3fd8 <itoa+0x2c>
    3fd6:	89 5d       	subi	r24, 0xD9	; 217
    3fd8:	81 93       	st	Z+, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	00 97       	sbiw	r24, 0x00	; 0
    3fde:	a1 f7       	brne	.-24     	; 0x3fc8 <itoa+0x1c>
    3fe0:	16 f4       	brtc	.+4      	; 0x3fe6 <itoa+0x3a>
    3fe2:	5d e2       	ldi	r21, 0x2D	; 45
    3fe4:	51 93       	st	Z+, r21
    3fe6:	10 82       	st	Z, r1
    3fe8:	c9 01       	movw	r24, r18
    3fea:	0c 94 f7 1f 	jmp	0x3fee	; 0x3fee <strrev>

00003fee <strrev>:
    3fee:	dc 01       	movw	r26, r24
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	67 2f       	mov	r22, r23
    3ff4:	71 91       	ld	r23, Z+
    3ff6:	77 23       	and	r23, r23
    3ff8:	e1 f7       	brne	.-8      	; 0x3ff2 <strrev+0x4>
    3ffa:	32 97       	sbiw	r30, 0x02	; 2
    3ffc:	04 c0       	rjmp	.+8      	; 0x4006 <strrev+0x18>
    3ffe:	7c 91       	ld	r23, X
    4000:	6d 93       	st	X+, r22
    4002:	70 83       	st	Z, r23
    4004:	62 91       	ld	r22, -Z
    4006:	ae 17       	cp	r26, r30
    4008:	bf 07       	cpc	r27, r31
    400a:	c8 f3       	brcs	.-14     	; 0x3ffe <strrev+0x10>
    400c:	08 95       	ret

0000400e <__udivmodhi4>:
    400e:	aa 1b       	sub	r26, r26
    4010:	bb 1b       	sub	r27, r27
    4012:	51 e1       	ldi	r21, 0x11	; 17
    4014:	07 c0       	rjmp	.+14     	; 0x4024 <__udivmodhi4_ep>

00004016 <__udivmodhi4_loop>:
    4016:	aa 1f       	adc	r26, r26
    4018:	bb 1f       	adc	r27, r27
    401a:	a6 17       	cp	r26, r22
    401c:	b7 07       	cpc	r27, r23
    401e:	10 f0       	brcs	.+4      	; 0x4024 <__udivmodhi4_ep>
    4020:	a6 1b       	sub	r26, r22
    4022:	b7 0b       	sbc	r27, r23

00004024 <__udivmodhi4_ep>:
    4024:	88 1f       	adc	r24, r24
    4026:	99 1f       	adc	r25, r25
    4028:	5a 95       	dec	r21
    402a:	a9 f7       	brne	.-22     	; 0x4016 <__udivmodhi4_loop>
    402c:	80 95       	com	r24
    402e:	90 95       	com	r25
    4030:	bc 01       	movw	r22, r24
    4032:	cd 01       	movw	r24, r26
    4034:	08 95       	ret

00004036 <_exit>:
    4036:	f8 94       	cli

00004038 <__stop_program>:
    4038:	ff cf       	rjmp	.-2      	; 0x4038 <__stop_program>
