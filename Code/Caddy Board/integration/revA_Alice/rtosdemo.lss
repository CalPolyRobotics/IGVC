
rtosdemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  00005160  000051f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005160  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001947  00800230  00800230  00005224  2**0
                  ALLOC
  3 .stab         0000c6fc  00000000  00000000  00005224  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000048c8  00000000  00000000  00011920  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000161e8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
       4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
       8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
       c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      10:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      14:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      18:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      1c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      20:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      24:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      28:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      2c:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__vector_11>
      30:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      34:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      38:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      3c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      40:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      44:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      48:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      4c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      50:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      54:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      58:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      5c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      60:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      64:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      68:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      6c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      70:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      74:	0c 94 61 26 	jmp	0x4cc2	; 0x4cc2 <__vector_29>
      78:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      7c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      80:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__vector_32>
      84:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      88:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      8c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      90:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__vector_36>
      94:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      98:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      9c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      a0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      a4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      a8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      ac:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      b0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      b4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      b8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      bc:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      c0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      c4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      c8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_50>
      cc:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      d0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      d4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      d8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      dc:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      e0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      e4:	f9 1f       	adc	r31, r25
      e6:	10 20       	and	r1, r0
      e8:	40 20       	and	r4, r0
      ea:	20 20       	and	r2, r0
      ec:	40 20       	and	r4, r0
      ee:	40 20       	and	r4, r0
      f0:	30 20       	and	r3, r0
      f2:	40 20       	and	r4, r0

000000f4 <__trampolines_start>:
      f4:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <processCommand+0x5a>
      f8:	0c 94 40 20 	jmp	0x4080	; 0x4080 <processCommand+0xe8>
      fc:	0c 94 10 20 	jmp	0x4020	; 0x4020 <processCommand+0x88>
     100:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <prvIdleTask>
     104:	0c 94 21 22 	jmp	0x4442	; 0x4442 <sonarADCHandler>
     108:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <vTaskUSARTRead>
     10c:	0c 94 30 20 	jmp	0x4060	; 0x4060 <processCommand+0xc8>
     110:	0c 94 9b 02 	jmp	0x536	; 0x536 <vTaskFunction_1>
     114:	0c 94 ee 26 	jmp	0x4ddc	; 0x4ddc <vTaskADC>
     118:	0c 94 20 20 	jmp	0x4040	; 0x4040 <processCommand+0xa8>
     11c:	0c 94 61 22 	jmp	0x44c2	; 0x44c2 <vTaskSonar>

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d1 e2       	ldi	r29, 0x21	; 33
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0c bf       	out	0x3c, r16	; 60

00000130 <__do_copy_data>:
     130:	12 e0       	ldi	r17, 0x02	; 2
     132:	a0 e0       	ldi	r26, 0x00	; 0
     134:	b2 e0       	ldi	r27, 0x02	; 2
     136:	e0 e6       	ldi	r30, 0x60	; 96
     138:	f1 e5       	ldi	r31, 0x51	; 81
     13a:	00 e0       	ldi	r16, 0x00	; 0
     13c:	0b bf       	out	0x3b, r16	; 59
     13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x14>
     140:	07 90       	elpm	r0, Z+
     142:	0d 92       	st	X+, r0
     144:	a0 33       	cpi	r26, 0x30	; 48
     146:	b1 07       	cpc	r27, r17
     148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0x10>

0000014a <__do_clear_bss>:
     14a:	1b e1       	ldi	r17, 0x1B	; 27
     14c:	a0 e3       	ldi	r26, 0x30	; 48
     14e:	b2 e0       	ldi	r27, 0x02	; 2
     150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
     152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
     154:	a7 37       	cpi	r26, 0x77	; 119
     156:	b1 07       	cpc	r27, r17
     158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
     15a:	0e 94 cb 00 	call	0x196	; 0x196 <main>
     15e:	0c 94 ae 28 	jmp	0x515c	; 0x515c <_exit>

00000162 <__bad_interrupt>:
     162:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000166 <vApplicationTickHook>:
int count = 0;

int sonarTime;

void vApplicationTickHook()
{
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
    count++;
     16e:	80 91 30 02 	lds	r24, 0x0230
     172:	90 91 31 02 	lds	r25, 0x0231
     176:	01 96       	adiw	r24, 0x01	; 1
     178:	90 93 31 02 	sts	0x0231, r25
     17c:	80 93 30 02 	sts	0x0230, r24
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(){
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
	return;
     18e:	00 00       	nop
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <main>:
/*-----------------------------------------------------------*/

int main( void )
{
     196:	af 92       	push	r10
     198:	bf 92       	push	r11
     19a:	cf 92       	push	r12
     19c:	df 92       	push	r13
     19e:	ef 92       	push	r14
     1a0:	ff 92       	push	r15
     1a2:	0f 93       	push	r16
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	00 d0       	rcall	.+0      	; 0x1aa <main+0x14>
     1aa:	00 d0       	rcall	.+0      	; 0x1ac <main+0x16>
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
    
    //- wimpy variable defs
	uint8_t val[2] = {0x3F, 0xFE};
     1b0:	8f e3       	ldi	r24, 0x3F	; 63
     1b2:	8d 83       	std	Y+5, r24	; 0x05
     1b4:	8e ef       	ldi	r24, 0xFE	; 254
     1b6:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t *val0, *val1;
    
	//- avoid pesky warnings...
	val0 = val + 0;
     1b8:	ce 01       	movw	r24, r28
     1ba:	05 96       	adiw	r24, 0x05	; 5
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
	val1 = val + 1;
     1c0:	ce 01       	movw	r24, r28
     1c2:	05 96       	adiw	r24, 0x05	; 5
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	9c 83       	std	Y+4, r25	; 0x04
     1c8:	8b 83       	std	Y+3, r24	; 0x03
    
	DDRA = 0xF7;
     1ca:	81 e2       	ldi	r24, 0x21	; 33
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	27 ef       	ldi	r18, 0xF7	; 247
     1d0:	fc 01       	movw	r30, r24
     1d2:	20 83       	st	Z, r18
	//PORTA = 0;
	DDRD = 0xFF;
     1d4:	8a e2       	ldi	r24, 0x2A	; 42
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	2f ef       	ldi	r18, 0xFF	; 255
     1da:	fc 01       	movw	r30, r24
     1dc:	20 83       	st	Z, r18
	DDRE = 0xFF;
     1de:	8d e2       	ldi	r24, 0x2D	; 45
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	2f ef       	ldi	r18, 0xFF	; 255
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 83       	st	Z, r18
	DDRB = 0xFF; 
     1e8:	84 e2       	ldi	r24, 0x24	; 36
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	2f ef       	ldi	r18, 0xFF	; 255
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18
	DDRK = 0;
     1f2:	87 e0       	ldi	r24, 0x07	; 7
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	fc 01       	movw	r30, r24
     1f8:	10 82       	st	Z, r1

	PORTD = 0;
     1fa:	8b e2       	ldi	r24, 0x2B	; 43
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	fc 01       	movw	r30, r24
     200:	10 82       	st	Z, r1
	PORTE = 0;
     202:	8e e2       	ldi	r24, 0x2E	; 46
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	fc 01       	movw	r30, r24
     208:	10 82       	st	Z, r1
	PORTK = 2;
     20a:	88 e0       	ldi	r24, 0x08	; 8
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	fc 01       	movw	r30, r24
     212:	20 83       	st	Z, r18

    //- init IO with goodness
	vIO_init();
     214:	0e 94 57 03 	call	0x6ae	; 0x6ae <vIO_init>

	//- Create a 
	xTaskCreate( (pdTASK_CODE) vTaskFunction_1, (signed char *) "T0", configMINIMAL_STACK_SIZE+1000,
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	9c 81       	ldd	r25, Y+4	; 0x04
     21c:	a1 2c       	mov	r10, r1
     21e:	b1 2c       	mov	r11, r1
     220:	c1 2c       	mov	r12, r1
     222:	d1 2c       	mov	r13, r1
     224:	e1 2c       	mov	r14, r1
     226:	f1 2c       	mov	r15, r1
     228:	01 e0       	ldi	r16, 0x01	; 1
     22a:	9c 01       	movw	r18, r24
     22c:	4d e3       	ldi	r20, 0x3D	; 61
     22e:	54 e0       	ldi	r21, 0x04	; 4
     230:	66 e0       	ldi	r22, 0x06	; 6
     232:	72 e0       	ldi	r23, 0x02	; 2
     234:	8b e9       	ldi	r24, 0x9B	; 155
     236:	92 e0       	ldi	r25, 0x02	; 2
     238:	0e 94 67 03 	call	0x6ce	; 0x6ce <xTaskGenericCreate>
                (void *) val1, 1, NULL );*/

 
  	//xTaskCreate( (pdTASK_CODE) vTaskSteer, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
                //(void *) val1, 1, NULL );
	xTaskCreate( (pdTASK_CODE) vTaskSonar, (signed char *) "TS", configMINIMAL_STACK_SIZE+1000,
     23c:	8b 81       	ldd	r24, Y+3	; 0x03
     23e:	9c 81       	ldd	r25, Y+4	; 0x04
     240:	a1 2c       	mov	r10, r1
     242:	b1 2c       	mov	r11, r1
     244:	c1 2c       	mov	r12, r1
     246:	d1 2c       	mov	r13, r1
     248:	e1 2c       	mov	r14, r1
     24a:	f1 2c       	mov	r15, r1
     24c:	01 e0       	ldi	r16, 0x01	; 1
     24e:	9c 01       	movw	r18, r24
     250:	4d e3       	ldi	r20, 0x3D	; 61
     252:	54 e0       	ldi	r21, 0x04	; 4
     254:	69 e0       	ldi	r22, 0x09	; 9
     256:	72 e0       	ldi	r23, 0x02	; 2
     258:	81 e6       	ldi	r24, 0x61	; 97
     25a:	92 e2       	ldi	r25, 0x22	; 34
     25c:	0e 94 67 03 	call	0x6ce	; 0x6ce <xTaskGenericCreate>
                (void *) val1, 1, NULL );
 
   /*xTaskCreate( (pdTASK_CODE) vTaskUSARTWrite, (signed char *) "T2", configMINIMAL_STACK_SIZE+1000,
   				(void *) val1, 1, NULL);*/

   xTaskCreate( (pdTASK_CODE) vTaskUSARTRead, (signed char *) "T3", configMINIMAL_STACK_SIZE+1000,
     260:	8b 81       	ldd	r24, Y+3	; 0x03
     262:	9c 81       	ldd	r25, Y+4	; 0x04
     264:	a1 2c       	mov	r10, r1
     266:	b1 2c       	mov	r11, r1
     268:	c1 2c       	mov	r12, r1
     26a:	d1 2c       	mov	r13, r1
     26c:	e1 2c       	mov	r14, r1
     26e:	f1 2c       	mov	r15, r1
     270:	01 e0       	ldi	r16, 0x01	; 1
     272:	9c 01       	movw	r18, r24
     274:	4d e3       	ldi	r20, 0x3D	; 61
     276:	54 e0       	ldi	r21, 0x04	; 4
     278:	6c e0       	ldi	r22, 0x0C	; 12
     27a:	72 e0       	ldi	r23, 0x02	; 2
     27c:	85 eb       	ldi	r24, 0xB5	; 181
     27e:	9c e1       	ldi	r25, 0x1C	; 28
     280:	0e 94 67 03 	call	0x6ce	; 0x6ce <xTaskGenericCreate>
   				(void *) val1, 1, NULL);

	
	xTaskCreate( (pdTASK_CODE) vTaskADC, (signed char *) "T5", configMINIMAL_STACK_SIZE+1000,
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	9c 81       	ldd	r25, Y+4	; 0x04
     288:	a1 2c       	mov	r10, r1
     28a:	b1 2c       	mov	r11, r1
     28c:	c1 2c       	mov	r12, r1
     28e:	d1 2c       	mov	r13, r1
     290:	e1 2c       	mov	r14, r1
     292:	f1 2c       	mov	r15, r1
     294:	01 e0       	ldi	r16, 0x01	; 1
     296:	9c 01       	movw	r18, r24
     298:	4d e3       	ldi	r20, 0x3D	; 61
     29a:	54 e0       	ldi	r21, 0x04	; 4
     29c:	6f e0       	ldi	r22, 0x0F	; 15
     29e:	72 e0       	ldi	r23, 0x02	; 2
     2a0:	8e ee       	ldi	r24, 0xEE	; 238
     2a2:	96 e2       	ldi	r25, 0x26	; 38
     2a4:	0e 94 67 03 	call	0x6ce	; 0x6ce <xTaskGenericCreate>

//   xTaskCreate( (pdTASK_CODE) vTaskUSARTLog, (signed char *) "T4", configMINIMAL_STACK_SIZE+1000,
//   				(void *) val1, 1, NULL);
    
    //- kick off the scheduler
	vTaskStartScheduler();
     2a8:	0e 94 66 06 	call	0xccc	; 0xccc <vTaskStartScheduler>
    
	return 0;
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
}
     2b0:	26 96       	adiw	r28, 0x06	; 6
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	08 95       	ret

000002d0 <printHex>:
/*-----------------------------------------------------------*/

void printHex(int i){
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	62 97       	sbiw	r28, 0x12	; 18
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	9a 8b       	std	Y+18, r25	; 0x12
     2e6:	89 8b       	std	Y+17, r24	; 0x11
	char hex[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
     2e8:	20 e1       	ldi	r18, 0x10	; 16
     2ea:	e2 e1       	ldi	r30, 0x12	; 18
     2ec:	f2 e0       	ldi	r31, 0x02	; 2
     2ee:	ce 01       	movw	r24, r28
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	dc 01       	movw	r26, r24
     2f4:	01 90       	ld	r0, Z+
     2f6:	0d 92       	st	X+, r0
     2f8:	2a 95       	dec	r18
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <printHex+0x24>

	USART_Write(hex[(i&0xF000) >> 12]);
     2fc:	89 89       	ldd	r24, Y+17	; 0x11
     2fe:	9a 89       	ldd	r25, Y+18	; 0x12
     300:	89 2f       	mov	r24, r25
     302:	99 27       	eor	r25, r25
     304:	82 95       	swap	r24
     306:	8f 70       	andi	r24, 0x0F	; 15
     308:	9e 01       	movw	r18, r28
     30a:	2f 5f       	subi	r18, 0xFF	; 255
     30c:	3f 4f       	sbci	r19, 0xFF	; 255
     30e:	82 0f       	add	r24, r18
     310:	93 1f       	adc	r25, r19
     312:	fc 01       	movw	r30, r24
     314:	80 81       	ld	r24, Z
     316:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
	USART_Write(hex[(i&0xF00) >> 8]);
     31a:	89 89       	ldd	r24, Y+17	; 0x11
     31c:	9a 89       	ldd	r25, Y+18	; 0x12
     31e:	88 27       	eor	r24, r24
     320:	9f 70       	andi	r25, 0x0F	; 15
     322:	89 2f       	mov	r24, r25
     324:	99 0f       	add	r25, r25
     326:	99 0b       	sbc	r25, r25
     328:	9e 01       	movw	r18, r28
     32a:	2f 5f       	subi	r18, 0xFF	; 255
     32c:	3f 4f       	sbci	r19, 0xFF	; 255
     32e:	82 0f       	add	r24, r18
     330:	93 1f       	adc	r25, r19
     332:	fc 01       	movw	r30, r24
     334:	80 81       	ld	r24, Z
     336:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
	USART_Write(hex[(i&0xF0) >> 4]);
     33a:	89 89       	ldd	r24, Y+17	; 0x11
     33c:	9a 89       	ldd	r25, Y+18	; 0x12
     33e:	80 7f       	andi	r24, 0xF0	; 240
     340:	99 27       	eor	r25, r25
     342:	95 95       	asr	r25
     344:	87 95       	ror	r24
     346:	95 95       	asr	r25
     348:	87 95       	ror	r24
     34a:	95 95       	asr	r25
     34c:	87 95       	ror	r24
     34e:	95 95       	asr	r25
     350:	87 95       	ror	r24
     352:	9e 01       	movw	r18, r28
     354:	2f 5f       	subi	r18, 0xFF	; 255
     356:	3f 4f       	sbci	r19, 0xFF	; 255
     358:	82 0f       	add	r24, r18
     35a:	93 1f       	adc	r25, r19
     35c:	fc 01       	movw	r30, r24
     35e:	80 81       	ld	r24, Z
     360:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
	USART_Write(hex[i&0xF]);
     364:	89 89       	ldd	r24, Y+17	; 0x11
     366:	9a 89       	ldd	r25, Y+18	; 0x12
     368:	8f 70       	andi	r24, 0x0F	; 15
     36a:	99 27       	eor	r25, r25
     36c:	9e 01       	movw	r18, r28
     36e:	2f 5f       	subi	r18, 0xFF	; 255
     370:	3f 4f       	sbci	r19, 0xFF	; 255
     372:	82 0f       	add	r24, r18
     374:	93 1f       	adc	r25, r19
     376:	fc 01       	movw	r30, r24
     378:	80 81       	ld	r24, Z
     37a:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>

}
     37e:	62 96       	adiw	r28, 0x12	; 18
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <printNum>:

void printNum(unsigned char i){
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	2d 97       	sbiw	r28, 0x0d	; 13
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	8d 87       	std	Y+13, r24	; 0x0d
    
    char str[10];
    memset(str,0,10);
     3a6:	ce 01       	movw	r24, r28
     3a8:	03 96       	adiw	r24, 0x03	; 3
     3aa:	4a e0       	ldi	r20, 0x0A	; 10
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	0e 94 53 28 	call	0x50a6	; 0x50a6 <memset>
    itoa(i,str,10);
     3b6:	8d 85       	ldd	r24, Y+13	; 0x0d
     3b8:	88 2f       	mov	r24, r24
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	9e 01       	movw	r18, r28
     3be:	2d 5f       	subi	r18, 0xFD	; 253
     3c0:	3f 4f       	sbci	r19, 0xFF	; 255
     3c2:	4a e0       	ldi	r20, 0x0A	; 10
     3c4:	50 e0       	ldi	r21, 0x00	; 0
     3c6:	b9 01       	movw	r22, r18
     3c8:	0e 94 69 28 	call	0x50d2	; 0x50d2 <itoa>
    char * irr = str;
     3cc:	ce 01       	movw	r24, r28
     3ce:	03 96       	adiw	r24, 0x03	; 3
     3d0:	9a 83       	std	Y+2, r25	; 0x02
     3d2:	89 83       	std	Y+1, r24	; 0x01
    while(*irr){
     3d4:	0b c0       	rjmp	.+22     	; 0x3ec <printNum+0x5c>
        USART_AddToQueue((unsigned char )*irr);
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	9a 81       	ldd	r25, Y+2	; 0x02
     3da:	fc 01       	movw	r30, r24
     3dc:	80 81       	ld	r24, Z
     3de:	0e 94 20 1b 	call	0x3640	; 0x3640 <USART_AddToQueue>
        irr++;
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	9a 81       	ldd	r25, Y+2	; 0x02
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	9a 83       	std	Y+2, r25	; 0x02
     3ea:	89 83       	std	Y+1, r24	; 0x01
    
    char str[10];
    memset(str,0,10);
    itoa(i,str,10);
    char * irr = str;
    while(*irr){
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	9a 81       	ldd	r25, Y+2	; 0x02
     3f0:	fc 01       	movw	r30, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	88 23       	and	r24, r24
     3f6:	79 f7       	brne	.-34     	; 0x3d6 <printNum+0x46>
        USART_AddToQueue((unsigned char )*irr);
        irr++;
    }
    
}
     3f8:	2d 96       	adiw	r28, 0x0d	; 13
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <__vector_50>:

ISR(TIMER5_OVF_vect){
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	00 90 5f 00 	lds	r0, 0x005F
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	00 90 5b 00 	lds	r0, 0x005B
     41a:	0f 92       	push	r0
     41c:	2f 93       	push	r18
     41e:	3f 93       	push	r19
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	ef 93       	push	r30
     426:	ff 93       	push	r31
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62

	PORTB ^= 0xFF;
     430:	85 e2       	ldi	r24, 0x25	; 37
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	25 e2       	ldi	r18, 0x25	; 37
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	f9 01       	movw	r30, r18
     43a:	20 81       	ld	r18, Z
     43c:	20 95       	com	r18
     43e:	fc 01       	movw	r30, r24
     440:	20 83       	st	Z, r18
	TCNT3L = 0;
     442:	84 e9       	ldi	r24, 0x94	; 148
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	fc 01       	movw	r30, r24
     448:	10 82       	st	Z, r1
	TCNT3H = 0;
     44a:	85 e9       	ldi	r24, 0x95	; 149
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	fc 01       	movw	r30, r24
     450:	10 82       	st	Z, r1

}
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	ff 91       	pop	r31
     458:	ef 91       	pop	r30
     45a:	9f 91       	pop	r25
     45c:	8f 91       	pop	r24
     45e:	3f 91       	pop	r19
     460:	2f 91       	pop	r18
     462:	0f 90       	pop	r0
     464:	00 92 5b 00 	sts	0x005B, r0
     468:	0f 90       	pop	r0
     46a:	00 92 5f 00 	sts	0x005F, r0
     46e:	0f 90       	pop	r0
     470:	1f 90       	pop	r1
     472:	18 95       	reti

00000474 <getTimerCount2>:

unsigned int getTimerCount2(){
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62

	//volatile char timerLow = TCNT3L;

	return TCNT0;
     47c:	86 e4       	ldi	r24, 0x46	; 70
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	fc 01       	movw	r30, r24
     482:	80 81       	ld	r24, Z
     484:	88 2f       	mov	r24, r24
     486:	90 e0       	ldi	r25, 0x00	; 0

}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <potValue>:


int potValue(int sonarMax,int sonarMin,int potMax,int potMin,int x){
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	2c 97       	sbiw	r28, 0x0c	; 12
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	9c 83       	std	Y+4, r25	; 0x04
     4a8:	8b 83       	std	Y+3, r24	; 0x03
     4aa:	7e 83       	std	Y+6, r23	; 0x06
     4ac:	6d 83       	std	Y+5, r22	; 0x05
     4ae:	58 87       	std	Y+8, r21	; 0x08
     4b0:	4f 83       	std	Y+7, r20	; 0x07
     4b2:	3a 87       	std	Y+10, r19	; 0x0a
     4b4:	29 87       	std	Y+9, r18	; 0x09
     4b6:	1c 87       	std	Y+12, r17	; 0x0c
     4b8:	0b 87       	std	Y+11, r16	; 0x0b
	int value;	
	if(x < sonarMin){
     4ba:	2b 85       	ldd	r18, Y+11	; 0x0b
     4bc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4be:	8d 81       	ldd	r24, Y+5	; 0x05
     4c0:	9e 81       	ldd	r25, Y+6	; 0x06
     4c2:	28 17       	cp	r18, r24
     4c4:	39 07       	cpc	r19, r25
     4c6:	1c f4       	brge	.+6      	; 0x4ce <potValue+0x40>
		return potMin;
     4c8:	89 85       	ldd	r24, Y+9	; 0x09
     4ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     4cc:	29 c0       	rjmp	.+82     	; 0x520 <potValue+0x92>
	} else if (x > sonarMax){
     4ce:	2b 85       	ldd	r18, Y+11	; 0x0b
     4d0:	3c 85       	ldd	r19, Y+12	; 0x0c
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	9c 81       	ldd	r25, Y+4	; 0x04
     4d6:	82 17       	cp	r24, r18
     4d8:	93 07       	cpc	r25, r19
     4da:	1c f4       	brge	.+6      	; 0x4e2 <potValue+0x54>
		return potMax;
     4dc:	8f 81       	ldd	r24, Y+7	; 0x07
     4de:	98 85       	ldd	r25, Y+8	; 0x08
     4e0:	1f c0       	rjmp	.+62     	; 0x520 <potValue+0x92>
	} else {
		value = x / 4 - 140;
     4e2:	8b 85       	ldd	r24, Y+11	; 0x0b
     4e4:	9c 85       	ldd	r25, Y+12	; 0x0c
     4e6:	99 23       	and	r25, r25
     4e8:	0c f4       	brge	.+2      	; 0x4ec <potValue+0x5e>
     4ea:	03 96       	adiw	r24, 0x03	; 3
     4ec:	95 95       	asr	r25
     4ee:	87 95       	ror	r24
     4f0:	95 95       	asr	r25
     4f2:	87 95       	ror	r24
     4f4:	8c 58       	subi	r24, 0x8C	; 140
     4f6:	91 09       	sbc	r25, r1
     4f8:	9a 83       	std	Y+2, r25	; 0x02
     4fa:	89 83       	std	Y+1, r24	; 0x01
		return value > potMax?potMax:value < potMin?potMin:value;
     4fc:	29 81       	ldd	r18, Y+1	; 0x01
     4fe:	3a 81       	ldd	r19, Y+2	; 0x02
     500:	8f 81       	ldd	r24, Y+7	; 0x07
     502:	98 85       	ldd	r25, Y+8	; 0x08
     504:	82 17       	cp	r24, r18
     506:	93 07       	cpc	r25, r19
     508:	4c f0       	brlt	.+18     	; 0x51c <potValue+0x8e>
     50a:	29 85       	ldd	r18, Y+9	; 0x09
     50c:	3a 85       	ldd	r19, Y+10	; 0x0a
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	9a 81       	ldd	r25, Y+2	; 0x02
     512:	82 17       	cp	r24, r18
     514:	93 07       	cpc	r25, r19
     516:	24 f4       	brge	.+8      	; 0x520 <potValue+0x92>
     518:	c9 01       	movw	r24, r18
     51a:	02 c0       	rjmp	.+4      	; 0x520 <potValue+0x92>
     51c:	8f 81       	ldd	r24, Y+7	; 0x07
     51e:	98 85       	ldd	r25, Y+8	; 0x08
	}
} 
     520:	2c 96       	adiw	r28, 0x0c	; 12
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <vTaskFunction_1>:

void vTaskFunction_1(void *pvParameters)
{	
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	67 97       	sbiw	r28, 0x17	; 23
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	9f 8b       	std	Y+23, r25	; 0x17
     54c:	8e 8b       	std	Y+22, r24	; 0x16
	int sonarResult;
	int movingForward = 1;
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	89 83       	std	Y+1, r24	; 0x01

	int sonarMax = 0x31C;
     556:	8c e1       	ldi	r24, 0x1C	; 28
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	9c 83       	std	Y+4, r25	; 0x04
     55c:	8b 83       	std	Y+3, r24	; 0x03
	int sonarMin = 0xE0;
     55e:	80 ee       	ldi	r24, 0xE0	; 224
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9e 83       	std	Y+6, r25	; 0x06
     564:	8d 83       	std	Y+5, r24	; 0x05
	int potMin = 0x18;
     566:	88 e1       	ldi	r24, 0x18	; 24
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	98 87       	std	Y+8, r25	; 0x08
     56c:	8f 83       	std	Y+7, r24	; 0x07
	int potMax = 0x40;;
     56e:	80 e4       	ldi	r24, 0x40	; 64
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	9a 87       	std	Y+10, r25	; 0x0a
     574:	89 87       	std	Y+9, r24	; 0x09
	int backwardSwitch = 0x100;
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	9c 87       	std	Y+12, r25	; 0x0c
     57c:	8b 87       	std	Y+11, r24	; 0x0b
	int neutralSwitch = 0x140;
     57e:	80 e4       	ldi	r24, 0x40	; 64
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	9e 87       	std	Y+14, r25	; 0x0e
     584:	8d 87       	std	Y+13, r24	; 0x0d
	int forwardSwitch = 0x160;
     586:	80 e6       	ldi	r24, 0x60	; 96
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	98 8b       	std	Y+16, r25	; 0x10
     58c:	8f 87       	std	Y+15, r24	; 0x0f
	int minTicks = 450;
     58e:	82 ec       	ldi	r24, 0xC2	; 194
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	9a 8b       	std	Y+18, r25	; 0x12
     594:	89 8b       	std	Y+17, r24	; 0x11

	int tickCount;

	char a = 'a';
     596:	81 e6       	ldi	r24, 0x61	; 97
     598:	8b 8b       	std	Y+19, r24	; 0x13

	PORTA = 4;
     59a:	82 e2       	ldi	r24, 0x22	; 34
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	24 e0       	ldi	r18, 0x04	; 4
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 83       	st	Z, r18

   USART_Init(9600, 16000000);
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	54 e2       	ldi	r21, 0x24	; 36
     5a8:	64 ef       	ldi	r22, 0xF4	; 244
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 e8       	ldi	r24, 0x80	; 128
     5ae:	95 e2       	ldi	r25, 0x25	; 37
     5b0:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <USART_Init>

	initializeSteeringTimer();
     5b4:	0e 94 b2 23 	call	0x4764	; 0x4764 <initializeSteeringTimer>

	initializeSPI();
     5b8:	0e 94 95 24 	call	0x492a	; 0x492a <initializeSPI>
	initSpeedController();
     5bc:	0e 94 28 23 	call	0x4650	; 0x4650 <initSpeedController>
	setSteeringPWMSpeed(0x80);
     5c0:	80 e8       	ldi	r24, 0x80	; 128
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 c7 23 	call	0x478e	; 0x478e <setSteeringPWMSpeed>

	//setPot(0x20);

	for(;;){
		int sonarData = getSonarData(0);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 91 21 	call	0x4322	; 0x4322 <getSonarData>
     5d0:	9d 8b       	std	Y+21, r25	; 0x15
     5d2:	8c 8b       	std	Y+20, r24	; 0x14
		if(sonarData > 0x300){
     5d4:	8c 89       	ldd	r24, Y+20	; 0x14
     5d6:	9d 89       	ldd	r25, Y+21	; 0x15
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	f3 e0       	ldi	r31, 0x03	; 3
     5dc:	9f 07       	cpc	r25, r31
     5de:	44 f0       	brlt	.+16     	; 0x5f0 <vTaskFunction_1+0xba>
			setSteeringDirection(1);
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <setSteeringDirection>
			USART_Write('F');
     5e8:	86 e4       	ldi	r24, 0x46	; 70
     5ea:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
     5ee:	14 c0       	rjmp	.+40     	; 0x618 <vTaskFunction_1+0xe2>
		} else if(sonarData < 0x50){
     5f0:	8c 89       	ldd	r24, Y+20	; 0x14
     5f2:	9d 89       	ldd	r25, Y+21	; 0x15
     5f4:	80 35       	cpi	r24, 0x50	; 80
     5f6:	91 05       	cpc	r25, r1
     5f8:	44 f4       	brge	.+16     	; 0x60a <vTaskFunction_1+0xd4>
			setSteeringDirection(-1);
     5fa:	8f ef       	ldi	r24, 0xFF	; 255
     5fc:	9f ef       	ldi	r25, 0xFF	; 255
     5fe:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <setSteeringDirection>
			USART_Write('R');
     602:	82 e5       	ldi	r24, 0x52	; 82
     604:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
     608:	07 c0       	rjmp	.+14     	; 0x618 <vTaskFunction_1+0xe2>
		} else {
			setSteeringDirection(0);
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <setSteeringDirection>
			USART_Write('N');
     612:	8e e4       	ldi	r24, 0x4E	; 78
     614:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
		}
		vTaskDelay(10);	
     618:	8a e0       	ldi	r24, 0x0A	; 10
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
	}
     620:	d3 cf       	rjmp	.-90     	; 0x5c8 <vTaskFunction_1+0x92>

00000622 <vTaskFunction_2>:
		PORTL = 0x80;
		vTaskDelay(200);
	}
}

void vTaskFunction_2(void *pvParameters){
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	1f 92       	push	r1
     628:	1f 92       	push	r1
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	9a 83       	std	Y+2, r25	; 0x02
     630:	89 83       	std	Y+1, r24	; 0x01
	DDRL = 0xF0;
     632:	8a e0       	ldi	r24, 0x0A	; 10
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	20 ef       	ldi	r18, 0xF0	; 240
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
	PORTL = 0xC0;
     63c:	8b e0       	ldi	r24, 0x0B	; 11
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	20 ec       	ldi	r18, 0xC0	; 192
     642:	fc 01       	movw	r30, r24
     644:	20 83       	st	Z, r18
	for(;;){
		vTaskDelay(300);
     646:	8c e2       	ldi	r24, 0x2C	; 44
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
	}	
     64e:	fb cf       	rjmp	.-10     	; 0x646 <vTaskFunction_2+0x24>

00000650 <vTaskPot>:
}

void vTaskPot(void *pvParameters){
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	00 d0       	rcall	.+0      	; 0x656 <vTaskPot+0x6>
     656:	1f 92       	push	r1
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	9c 83       	std	Y+4, r25	; 0x04
     65e:	8b 83       	std	Y+3, r24	; 0x03
	initializeSPI();
     660:	0e 94 95 24 	call	0x492a	; 0x492a <initializeSPI>
	int a = 0;
     664:	1a 82       	std	Y+2, r1	; 0x02
     666:	19 82       	std	Y+1, r1	; 0x01
	initSpeedController();
     668:	0e 94 28 23 	call	0x4650	; 0x4650 <initSpeedController>
		setPot(a);
		vTaskDelay(80);
		a++;
	}*/
	for(;;){
		setPot(1);
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 33 23 	call	0x4666	; 0x4666 <setPot>
		vTaskDelay(500);
     674:	84 ef       	ldi	r24, 0xF4	; 244
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
		setPot(0x40);
     67c:	80 e4       	ldi	r24, 0x40	; 64
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 33 23 	call	0x4666	; 0x4666 <setPot>
		vTaskDelay(500);
     684:	84 ef       	ldi	r24, 0xF4	; 244
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
		setPot(0x7F);
     68c:	8f e7       	ldi	r24, 0x7F	; 127
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 33 23 	call	0x4666	; 0x4666 <setPot>
		vTaskDelay(500);
     694:	84 ef       	ldi	r24, 0xF4	; 244
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
		setPot(0x40);
     69c:	80 e4       	ldi	r24, 0x40	; 64
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 33 23 	call	0x4666	; 0x4666 <setPot>
		vTaskDelay(500);
     6a4:	84 ef       	ldi	r24, 0xF4	; 244
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
	}
     6ac:	df cf       	rjmp	.-66     	; 0x66c <vTaskPot+0x1c>

000006ae <vIO_init>:
}


void vIO_init(void)
{
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
    //- set PortB as output
	DDRB = 0xFF; 
     6b6:	84 e2       	ldi	r24, 0x24	; 36
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
    PORTB = 0; 
     6c0:	85 e2       	ldi	r24, 0x25	; 37
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	fc 01       	movw	r30, r24
     6c6:	10 82       	st	Z, r1
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	64 97       	sbiw	r28, 0x14	; 20
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
     6f2:	9f 83       	std	Y+7, r25	; 0x07
     6f4:	8e 83       	std	Y+6, r24	; 0x06
     6f6:	79 87       	std	Y+9, r23	; 0x09
     6f8:	68 87       	std	Y+8, r22	; 0x08
     6fa:	5b 87       	std	Y+11, r21	; 0x0b
     6fc:	4a 87       	std	Y+10, r20	; 0x0a
     6fe:	3d 87       	std	Y+13, r19	; 0x0d
     700:	2c 87       	std	Y+12, r18	; 0x0c
     702:	0e 87       	std	Y+14, r16	; 0x0e
     704:	f8 8a       	std	Y+16, r15	; 0x10
     706:	ef 86       	std	Y+15, r14	; 0x0f
     708:	da 8a       	std	Y+18, r13	; 0x12
     70a:	c9 8a       	std	Y+17, r12	; 0x11
     70c:	bc 8a       	std	Y+20, r11	; 0x14
     70e:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
     710:	29 89       	ldd	r18, Y+17	; 0x11
     712:	3a 89       	ldd	r19, Y+18	; 0x12
     714:	8a 85       	ldd	r24, Y+10	; 0x0a
     716:	9b 85       	ldd	r25, Y+11	; 0x0b
     718:	b9 01       	movw	r22, r18
     71a:	0e 94 1d 0b 	call	0x163a	; 0x163a <prvAllocateTCBAndStack>
     71e:	9b 83       	std	Y+3, r25	; 0x03
     720:	8a 83       	std	Y+2, r24	; 0x02

	if( pxNewTCB != NULL )
     722:	8a 81       	ldd	r24, Y+2	; 0x02
     724:	9b 81       	ldd	r25, Y+3	; 0x03
     726:	00 97       	sbiw	r24, 0x00	; 0
     728:	09 f4       	brne	.+2      	; 0x72c <xTaskGenericCreate+0x5e>
     72a:	9f c0       	rjmp	.+318    	; 0x86a <xTaskGenericCreate+0x19c>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
     72c:	8a 81       	ldd	r24, Y+2	; 0x02
     72e:	9b 81       	ldd	r25, Y+3	; 0x03
     730:	fc 01       	movw	r30, r24
     732:	27 89       	ldd	r18, Z+23	; 0x17
     734:	30 8d       	ldd	r19, Z+24	; 0x18
     736:	8a 85       	ldd	r24, Y+10	; 0x0a
     738:	9b 85       	ldd	r25, Y+11	; 0x0b
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	82 0f       	add	r24, r18
     73e:	93 1f       	adc	r25, r19
     740:	9d 83       	std	Y+5, r25	; 0x05
     742:	8c 83       	std	Y+4, r24	; 0x04
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
     744:	4a 85       	ldd	r20, Y+10	; 0x0a
     746:	5b 85       	ldd	r21, Y+11	; 0x0b
     748:	2b 89       	ldd	r18, Y+19	; 0x13
     74a:	3c 89       	ldd	r19, Y+20	; 0x14
     74c:	68 85       	ldd	r22, Y+8	; 0x08
     74e:	79 85       	ldd	r23, Y+9	; 0x09
     750:	8a 81       	ldd	r24, Y+2	; 0x02
     752:	9b 81       	ldd	r25, Y+3	; 0x03
     754:	8a 01       	movw	r16, r20
     756:	4e 85       	ldd	r20, Y+14	; 0x0e
     758:	0e 94 2d 0a 	call	0x145a	; 0x145a <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     75c:	4c 85       	ldd	r20, Y+12	; 0x0c
     75e:	5d 85       	ldd	r21, Y+13	; 0x0d
     760:	2e 81       	ldd	r18, Y+6	; 0x06
     762:	3f 81       	ldd	r19, Y+7	; 0x07
     764:	8c 81       	ldd	r24, Y+4	; 0x04
     766:	9d 81       	ldd	r25, Y+5	; 0x05
     768:	b9 01       	movw	r22, r18
     76a:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <pxPortInitialiseStack>
     76e:	9c 01       	movw	r18, r24
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	9b 81       	ldd	r25, Y+3	; 0x03
     774:	fc 01       	movw	r30, r24
     776:	31 83       	std	Z+1, r19	; 0x01
     778:	20 83       	st	Z, r18
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
     77a:	8f 85       	ldd	r24, Y+15	; 0x0f
     77c:	98 89       	ldd	r25, Y+16	; 0x10
     77e:	00 97       	sbiw	r24, 0x00	; 0
     780:	39 f0       	breq	.+14     	; 0x790 <xTaskGenericCreate+0xc2>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
     782:	8f 85       	ldd	r24, Y+15	; 0x0f
     784:	98 89       	ldd	r25, Y+16	; 0x10
     786:	2a 81       	ldd	r18, Y+2	; 0x02
     788:	3b 81       	ldd	r19, Y+3	; 0x03
     78a:	fc 01       	movw	r30, r24
     78c:	31 83       	std	Z+1, r19	; 0x01
     78e:	20 83       	st	Z, r18
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
     796:	80 91 80 02 	lds	r24, 0x0280
     79a:	8f 5f       	subi	r24, 0xFF	; 255
     79c:	80 93 80 02 	sts	0x0280, r24
			if( pxCurrentTCB == NULL )
     7a0:	80 91 32 02 	lds	r24, 0x0232
     7a4:	90 91 33 02 	lds	r25, 0x0233
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	69 f4       	brne	.+26     	; 0x7c6 <xTaskGenericCreate+0xf8>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	9b 81       	ldd	r25, Y+3	; 0x03
     7b0:	90 93 33 02 	sts	0x0233, r25
     7b4:	80 93 32 02 	sts	0x0232, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
     7b8:	80 91 80 02 	lds	r24, 0x0280
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	b1 f4       	brne	.+44     	; 0x7ec <xTaskGenericCreate+0x11e>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
     7c0:	0e 94 8e 0a 	call	0x151c	; 0x151c <prvInitialiseTaskLists>
     7c4:	13 c0       	rjmp	.+38     	; 0x7ec <xTaskGenericCreate+0x11e>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
     7c6:	80 91 85 02 	lds	r24, 0x0285
     7ca:	88 23       	and	r24, r24
     7cc:	79 f4       	brne	.+30     	; 0x7ec <xTaskGenericCreate+0x11e>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
     7ce:	80 91 32 02 	lds	r24, 0x0232
     7d2:	90 91 33 02 	lds	r25, 0x0233
     7d6:	fc 01       	movw	r30, r24
     7d8:	96 89       	ldd	r25, Z+22	; 0x16
     7da:	8e 85       	ldd	r24, Y+14	; 0x0e
     7dc:	89 17       	cp	r24, r25
     7de:	30 f0       	brcs	.+12     	; 0x7ec <xTaskGenericCreate+0x11e>
					{
						pxCurrentTCB = pxNewTCB;
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	9b 81       	ldd	r25, Y+3	; 0x03
     7e4:	90 93 33 02 	sts	0x0233, r25
     7e8:	80 93 32 02 	sts	0x0232, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	9b 81       	ldd	r25, Y+3	; 0x03
     7f0:	fc 01       	movw	r30, r24
     7f2:	96 89       	ldd	r25, Z+22	; 0x16
     7f4:	80 91 83 02 	lds	r24, 0x0283
     7f8:	89 17       	cp	r24, r25
     7fa:	30 f4       	brcc	.+12     	; 0x808 <xTaskGenericCreate+0x13a>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
     7fc:	8a 81       	ldd	r24, Y+2	; 0x02
     7fe:	9b 81       	ldd	r25, Y+3	; 0x03
     800:	fc 01       	movw	r30, r24
     802:	86 89       	ldd	r24, Z+22	; 0x16
     804:	80 93 83 02 	sts	0x0283, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
     808:	80 91 8a 02 	lds	r24, 0x028A
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	80 93 8a 02 	sts	0x028A, r24

			prvAddTaskToReadyQueue( pxNewTCB );
     812:	8a 81       	ldd	r24, Y+2	; 0x02
     814:	9b 81       	ldd	r25, Y+3	; 0x03
     816:	fc 01       	movw	r30, r24
     818:	96 89       	ldd	r25, Z+22	; 0x16
     81a:	80 91 84 02 	lds	r24, 0x0284
     81e:	89 17       	cp	r24, r25
     820:	30 f4       	brcc	.+12     	; 0x82e <xTaskGenericCreate+0x160>
     822:	8a 81       	ldd	r24, Y+2	; 0x02
     824:	9b 81       	ldd	r25, Y+3	; 0x03
     826:	fc 01       	movw	r30, r24
     828:	86 89       	ldd	r24, Z+22	; 0x16
     82a:	80 93 84 02 	sts	0x0284, r24
     82e:	8a 81       	ldd	r24, Y+2	; 0x02
     830:	9b 81       	ldd	r25, Y+3	; 0x03
     832:	ac 01       	movw	r20, r24
     834:	4e 5f       	subi	r20, 0xFE	; 254
     836:	5f 4f       	sbci	r21, 0xFF	; 255
     838:	8a 81       	ldd	r24, Y+2	; 0x02
     83a:	9b 81       	ldd	r25, Y+3	; 0x03
     83c:	fc 01       	movw	r30, r24
     83e:	86 89       	ldd	r24, Z+22	; 0x16
     840:	28 2f       	mov	r18, r24
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	c9 01       	movw	r24, r18
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	82 0f       	add	r24, r18
     854:	93 1f       	adc	r25, r19
     856:	8c 5c       	subi	r24, 0xCC	; 204
     858:	9d 4f       	sbci	r25, 0xFD	; 253
     85a:	ba 01       	movw	r22, r20
     85c:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>

			xReturn = pdPASS;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	89 83       	std	Y+1, r24	; 0x01
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	02 c0       	rjmp	.+4      	; 0x86e <xTaskGenericCreate+0x1a0>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	89 83       	std	Y+1, r24	; 0x01
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	79 f4       	brne	.+30     	; 0x892 <xTaskGenericCreate+0x1c4>
	{
		if( xSchedulerRunning != pdFALSE )
     874:	80 91 85 02 	lds	r24, 0x0285
     878:	88 23       	and	r24, r24
     87a:	59 f0       	breq	.+22     	; 0x892 <xTaskGenericCreate+0x1c4>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
     87c:	80 91 32 02 	lds	r24, 0x0232
     880:	90 91 33 02 	lds	r25, 0x0233
     884:	fc 01       	movw	r30, r24
     886:	96 89       	ldd	r25, Z+22	; 0x16
     888:	8e 85       	ldd	r24, Y+14	; 0x0e
     88a:	98 17       	cp	r25, r24
     88c:	10 f4       	brcc	.+4      	; 0x892 <xTaskGenericCreate+0x1c4>
			{
				portYIELD_WITHIN_API();
     88e:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
			}
		}
	}

	return xReturn;
     892:	89 81       	ldd	r24, Y+1	; 0x01
}
     894:	64 96       	adiw	r28, 0x14	; 20
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	bf 90       	pop	r11
     8b2:	af 90       	pop	r10
     8b4:	08 95       	ret

000008b6 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	28 97       	sbiw	r28, 0x08	; 8
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	9e 83       	std	Y+6, r25	; 0x06
     8cc:	8d 83       	std	Y+5, r24	; 0x05
     8ce:	78 87       	std	Y+8, r23	; 0x08
     8d0:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
     8d2:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
     8d4:	0e 94 a8 06 	call	0xd50	; 0xd50 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
     8d8:	8d 81       	ldd	r24, Y+5	; 0x05
     8da:	9e 81       	ldd	r25, Y+6	; 0x06
     8dc:	fc 01       	movw	r30, r24
     8de:	20 81       	ld	r18, Z
     8e0:	31 81       	ldd	r19, Z+1	; 0x01
     8e2:	8f 81       	ldd	r24, Y+7	; 0x07
     8e4:	98 85       	ldd	r25, Y+8	; 0x08
     8e6:	82 0f       	add	r24, r18
     8e8:	93 1f       	adc	r25, r19
     8ea:	9b 83       	std	Y+3, r25	; 0x03
     8ec:	8a 83       	std	Y+2, r24	; 0x02

			if( xTickCount < *pxPreviousWakeTime )
     8ee:	8d 81       	ldd	r24, Y+5	; 0x05
     8f0:	9e 81       	ldd	r25, Y+6	; 0x06
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 81       	ld	r18, Z
     8f6:	31 81       	ldd	r19, Z+1	; 0x01
     8f8:	80 91 81 02 	lds	r24, 0x0281
     8fc:	90 91 82 02 	lds	r25, 0x0282
     900:	82 17       	cp	r24, r18
     902:	93 07       	cpc	r25, r19
     904:	b0 f4       	brcc	.+44     	; 0x932 <vTaskDelayUntil+0x7c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
     906:	8d 81       	ldd	r24, Y+5	; 0x05
     908:	9e 81       	ldd	r25, Y+6	; 0x06
     90a:	fc 01       	movw	r30, r24
     90c:	20 81       	ld	r18, Z
     90e:	31 81       	ldd	r19, Z+1	; 0x01
     910:	8a 81       	ldd	r24, Y+2	; 0x02
     912:	9b 81       	ldd	r25, Y+3	; 0x03
     914:	82 17       	cp	r24, r18
     916:	93 07       	cpc	r25, r19
     918:	08 f5       	brcc	.+66     	; 0x95c <vTaskDelayUntil+0xa6>
     91a:	80 91 81 02 	lds	r24, 0x0281
     91e:	90 91 82 02 	lds	r25, 0x0282
     922:	2a 81       	ldd	r18, Y+2	; 0x02
     924:	3b 81       	ldd	r19, Y+3	; 0x03
     926:	82 17       	cp	r24, r18
     928:	93 07       	cpc	r25, r19
     92a:	c0 f4       	brcc	.+48     	; 0x95c <vTaskDelayUntil+0xa6>
				{
					xShouldDelay = pdTRUE;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	15 c0       	rjmp	.+42     	; 0x95c <vTaskDelayUntil+0xa6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
     932:	8d 81       	ldd	r24, Y+5	; 0x05
     934:	9e 81       	ldd	r25, Y+6	; 0x06
     936:	fc 01       	movw	r30, r24
     938:	20 81       	ld	r18, Z
     93a:	31 81       	ldd	r19, Z+1	; 0x01
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	9b 81       	ldd	r25, Y+3	; 0x03
     940:	82 17       	cp	r24, r18
     942:	93 07       	cpc	r25, r19
     944:	48 f0       	brcs	.+18     	; 0x958 <vTaskDelayUntil+0xa2>
     946:	80 91 81 02 	lds	r24, 0x0281
     94a:	90 91 82 02 	lds	r25, 0x0282
     94e:	2a 81       	ldd	r18, Y+2	; 0x02
     950:	3b 81       	ldd	r19, Y+3	; 0x03
     952:	82 17       	cp	r24, r18
     954:	93 07       	cpc	r25, r19
     956:	10 f4       	brcc	.+4      	; 0x95c <vTaskDelayUntil+0xa6>
				{
					xShouldDelay = pdTRUE;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
     95c:	8d 81       	ldd	r24, Y+5	; 0x05
     95e:	9e 81       	ldd	r25, Y+6	; 0x06
     960:	2a 81       	ldd	r18, Y+2	; 0x02
     962:	3b 81       	ldd	r19, Y+3	; 0x03
     964:	fc 01       	movw	r30, r24
     966:	31 83       	std	Z+1, r19	; 0x01
     968:	20 83       	st	Z, r18

			if( xShouldDelay != pdFALSE )
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	88 23       	and	r24, r24
     96e:	59 f0       	breq	.+22     	; 0x986 <vTaskDelayUntil+0xd0>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     970:	80 91 32 02 	lds	r24, 0x0232
     974:	90 91 33 02 	lds	r25, 0x0233
     978:	02 96       	adiw	r24, 0x02	; 2
     97a:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	9b 81       	ldd	r25, Y+3	; 0x03
     982:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
     986:	0e 94 b4 06 	call	0xd68	; 0xd68 <xTaskResumeAll>
     98a:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     98c:	8c 81       	ldd	r24, Y+4	; 0x04
     98e:	88 23       	and	r24, r24
     990:	11 f4       	brne	.+4      	; 0x996 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
     992:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
		}
	}
     996:	28 96       	adiw	r28, 0x08	; 8
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	00 d0       	rcall	.+0      	; 0x9ae <vTaskDelay+0x6>
     9ae:	1f 92       	push	r1
     9b0:	1f 92       	push	r1
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	9d 83       	std	Y+5, r25	; 0x05
     9b8:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     9ba:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     9bc:	8c 81       	ldd	r24, Y+4	; 0x04
     9be:	9d 81       	ldd	r25, Y+5	; 0x05
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	d1 f0       	breq	.+52     	; 0x9f8 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
     9c4:	0e 94 a8 06 	call	0xd50	; 0xd50 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     9c8:	20 91 81 02 	lds	r18, 0x0281
     9cc:	30 91 82 02 	lds	r19, 0x0282
     9d0:	8c 81       	ldd	r24, Y+4	; 0x04
     9d2:	9d 81       	ldd	r25, Y+5	; 0x05
     9d4:	82 0f       	add	r24, r18
     9d6:	93 1f       	adc	r25, r19
     9d8:	9b 83       	std	Y+3, r25	; 0x03
     9da:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     9dc:	80 91 32 02 	lds	r24, 0x0232
     9e0:	90 91 33 02 	lds	r25, 0x0233
     9e4:	02 96       	adiw	r24, 0x02	; 2
     9e6:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     9ea:	8a 81       	ldd	r24, Y+2	; 0x02
     9ec:	9b 81       	ldd	r25, Y+3	; 0x03
     9ee:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     9f2:	0e 94 b4 06 	call	0xd68	; 0xd68 <xTaskResumeAll>
     9f6:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	88 23       	and	r24, r24
     9fc:	11 f4       	brne	.+4      	; 0xa02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
     9fe:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
		}
	}
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	00 d0       	rcall	.+0      	; 0xa18 <vTaskSuspend+0x6>
     a18:	1f 92       	push	r1
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
     a28:	80 91 32 02 	lds	r24, 0x0232
     a2c:	90 91 33 02 	lds	r25, 0x0233
     a30:	2b 81       	ldd	r18, Y+3	; 0x03
     a32:	3c 81       	ldd	r19, Y+4	; 0x04
     a34:	28 17       	cp	r18, r24
     a36:	39 07       	cpc	r19, r25
     a38:	11 f4       	brne	.+4      	; 0xa3e <vTaskSuspend+0x2c>
			{
				pxTaskToSuspend = NULL;
     a3a:	1c 82       	std	Y+4, r1	; 0x04
     a3c:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
     a3e:	8b 81       	ldd	r24, Y+3	; 0x03
     a40:	9c 81       	ldd	r25, Y+4	; 0x04
     a42:	00 97       	sbiw	r24, 0x00	; 0
     a44:	29 f4       	brne	.+10     	; 0xa50 <vTaskSuspend+0x3e>
     a46:	80 91 32 02 	lds	r24, 0x0232
     a4a:	90 91 33 02 	lds	r25, 0x0233
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <vTaskSuspend+0x42>
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	9c 81       	ldd	r25, Y+4	; 0x04
     a54:	9a 83       	std	Y+2, r25	; 0x02
     a56:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	9a 81       	ldd	r25, Y+2	; 0x02
     a5c:	02 96       	adiw	r24, 0x02	; 2
     a5e:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	fc 01       	movw	r30, r24
     a68:	84 89       	ldd	r24, Z+20	; 0x14
     a6a:	95 89       	ldd	r25, Z+21	; 0x15
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	29 f0       	breq	.+10     	; 0xa7a <vTaskSuspend+0x68>
			{
				uxListRemove( &( pxTCB->xEventListItem ) );
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	9a 81       	ldd	r25, Y+2	; 0x02
     a74:	0c 96       	adiw	r24, 0x0c	; 12
     a76:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	9a 81       	ldd	r25, Y+2	; 0x02
     a7e:	02 96       	adiw	r24, 0x02	; 2
     a80:	bc 01       	movw	r22, r24
     a82:	87 e7       	ldi	r24, 0x77	; 119
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
     a8a:	0f 90       	pop	r0
     a8c:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	00 97       	sbiw	r24, 0x00	; 0
     a94:	a1 f4       	brne	.+40     	; 0xabe <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
     a96:	80 91 85 02 	lds	r24, 0x0285
     a9a:	88 23       	and	r24, r24
     a9c:	19 f0       	breq	.+6      	; 0xaa4 <vTaskSuspend+0x92>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
     a9e:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
     aa2:	0d c0       	rjmp	.+26     	; 0xabe <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
     aa4:	90 91 77 02 	lds	r25, 0x0277
     aa8:	80 91 80 02 	lds	r24, 0x0280
     aac:	98 17       	cp	r25, r24
     aae:	29 f4       	brne	.+10     	; 0xaba <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
     ab0:	10 92 33 02 	sts	0x0233, r1
     ab4:	10 92 32 02 	sts	0x0232, r1
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
     aba:	0e 94 4a 08 	call	0x1094	; 0x1094 <vTaskSwitchContext>
				}
			}
		}
	}
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	00 d0       	rcall	.+0      	; 0xad2 <xTaskIsTaskSuspended+0x6>
     ad2:	1f 92       	push	r1
     ad4:	1f 92       	push	r1
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	9d 83       	std	Y+5, r25	; 0x05
     adc:	8c 83       	std	Y+4, r24	; 0x04
	portBASE_TYPE xReturn = pdFALSE;
     ade:	19 82       	std	Y+1, r1	; 0x01
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
     ae0:	8c 81       	ldd	r24, Y+4	; 0x04
     ae2:	9d 81       	ldd	r25, Y+5	; 0x05
     ae4:	9b 83       	std	Y+3, r25	; 0x03
     ae6:	8a 83       	std	Y+2, r24	; 0x02
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
     ae8:	8a 81       	ldd	r24, Y+2	; 0x02
     aea:	9b 81       	ldd	r25, Y+3	; 0x03
     aec:	fc 01       	movw	r30, r24
     aee:	82 85       	ldd	r24, Z+10	; 0x0a
     af0:	93 85       	ldd	r25, Z+11	; 0x0b
     af2:	f2 e0       	ldi	r31, 0x02	; 2
     af4:	87 37       	cpi	r24, 0x77	; 119
     af6:	9f 07       	cpc	r25, r31
     af8:	91 f4       	brne	.+36     	; 0xb1e <xTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
     afa:	8a 81       	ldd	r24, Y+2	; 0x02
     afc:	9b 81       	ldd	r25, Y+3	; 0x03
     afe:	fc 01       	movw	r30, r24
     b00:	84 89       	ldd	r24, Z+20	; 0x14
     b02:	95 89       	ldd	r25, Z+21	; 0x15
     b04:	f2 e0       	ldi	r31, 0x02	; 2
     b06:	8e 36       	cpi	r24, 0x6E	; 110
     b08:	9f 07       	cpc	r25, r31
     b0a:	49 f0       	breq	.+18     	; 0xb1e <xTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
     b0c:	8a 81       	ldd	r24, Y+2	; 0x02
     b0e:	9b 81       	ldd	r25, Y+3	; 0x03
     b10:	fc 01       	movw	r30, r24
     b12:	84 89       	ldd	r24, Z+20	; 0x14
     b14:	95 89       	ldd	r25, Z+21	; 0x15
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	11 f4       	brne	.+4      	; 0xb1e <xTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}

		return xReturn;
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
	}
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	00 d0       	rcall	.+0      	; 0xb36 <vTaskResume+0x6>
     b36:	1f 92       	push	r1
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	9c 83       	std	Y+4, r25	; 0x04
     b3e:	8b 83       	std	Y+3, r24	; 0x03
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	9c 81       	ldd	r25, Y+4	; 0x04
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	89 83       	std	Y+1, r24	; 0x01

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	9a 81       	ldd	r25, Y+2	; 0x02
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	09 f4       	brne	.+2      	; 0xb52 <vTaskResume+0x22>
     b50:	4f c0       	rjmp	.+158    	; 0xbf0 <vTaskResume+0xc0>
     b52:	80 91 32 02 	lds	r24, 0x0232
     b56:	90 91 33 02 	lds	r25, 0x0233
     b5a:	29 81       	ldd	r18, Y+1	; 0x01
     b5c:	3a 81       	ldd	r19, Y+2	; 0x02
     b5e:	28 17       	cp	r18, r24
     b60:	39 07       	cpc	r19, r25
     b62:	09 f4       	brne	.+2      	; 0xb66 <vTaskResume+0x36>
     b64:	45 c0       	rjmp	.+138    	; 0xbf0 <vTaskResume+0xc0>
		{
			taskENTER_CRITICAL();
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	0f 92       	push	r0
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	0e 94 66 05 	call	0xacc	; 0xacc <xTaskIsTaskSuspended>
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	d1 f5       	brne	.+116    	; 0xbec <vTaskResume+0xbc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					uxListRemove(  &( pxTCB->xGenericListItem ) );
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	02 96       	adiw	r24, 0x02	; 2
     b7e:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	9a 81       	ldd	r25, Y+2	; 0x02
     b86:	fc 01       	movw	r30, r24
     b88:	96 89       	ldd	r25, Z+22	; 0x16
     b8a:	80 91 84 02 	lds	r24, 0x0284
     b8e:	89 17       	cp	r24, r25
     b90:	30 f4       	brcc	.+12     	; 0xb9e <vTaskResume+0x6e>
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	fc 01       	movw	r30, r24
     b98:	86 89       	ldd	r24, Z+22	; 0x16
     b9a:	80 93 84 02 	sts	0x0284, r24
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	ac 01       	movw	r20, r24
     ba4:	4e 5f       	subi	r20, 0xFE	; 254
     ba6:	5f 4f       	sbci	r21, 0xFF	; 255
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	9a 81       	ldd	r25, Y+2	; 0x02
     bac:	fc 01       	movw	r30, r24
     bae:	86 89       	ldd	r24, Z+22	; 0x16
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	c9 01       	movw	r24, r18
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	82 0f       	add	r24, r18
     bc4:	93 1f       	adc	r25, r19
     bc6:	8c 5c       	subi	r24, 0xCC	; 204
     bc8:	9d 4f       	sbci	r25, 0xFD	; 253
     bca:	ba 01       	movw	r22, r20
     bcc:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	9a 81       	ldd	r25, Y+2	; 0x02
     bd4:	fc 01       	movw	r30, r24
     bd6:	26 89       	ldd	r18, Z+22	; 0x16
     bd8:	80 91 32 02 	lds	r24, 0x0232
     bdc:	90 91 33 02 	lds	r25, 0x0233
     be0:	fc 01       	movw	r30, r24
     be2:	86 89       	ldd	r24, Z+22	; 0x16
     be4:	28 17       	cp	r18, r24
     be6:	10 f0       	brcs	.+4      	; 0xbec <vTaskResume+0xbc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
     be8:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
		}
	}
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	00 d0       	rcall	.+0      	; 0xc04 <xTaskResumeFromISR+0x6>
     c04:	00 d0       	rcall	.+0      	; 0xc06 <xTaskResumeFromISR+0x8>
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
	portBASE_TYPE xYieldRequired = pdFALSE;
     c0e:	19 82       	std	Y+1, r1	; 0x01
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
     c10:	8d 81       	ldd	r24, Y+5	; 0x05
     c12:	9e 81       	ldd	r25, Y+6	; 0x06
     c14:	9b 83       	std	Y+3, r25	; 0x03
     c16:	8a 83       	std	Y+2, r24	; 0x02

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     c18:	1c 82       	std	Y+4, r1	; 0x04
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	9b 81       	ldd	r25, Y+3	; 0x03
     c1e:	0e 94 66 05 	call	0xacc	; 0xacc <xTaskIsTaskSuspended>
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	09 f0       	breq	.+2      	; 0xc28 <xTaskResumeFromISR+0x2a>
     c26:	48 c0       	rjmp	.+144    	; 0xcb8 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     c28:	80 91 86 02 	lds	r24, 0x0286
     c2c:	88 23       	and	r24, r24
     c2e:	e1 f5       	brne	.+120    	; 0xca8 <xTaskResumeFromISR+0xaa>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	9b 81       	ldd	r25, Y+3	; 0x03
     c34:	fc 01       	movw	r30, r24
     c36:	26 89       	ldd	r18, Z+22	; 0x16
     c38:	80 91 32 02 	lds	r24, 0x0232
     c3c:	90 91 33 02 	lds	r25, 0x0233
     c40:	fc 01       	movw	r30, r24
     c42:	96 89       	ldd	r25, Z+22	; 0x16
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	29 17       	cp	r18, r25
     c48:	08 f4       	brcc	.+2      	; 0xc4c <xTaskResumeFromISR+0x4e>
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	89 83       	std	Y+1, r24	; 0x01
					uxListRemove(  &( pxTCB->xGenericListItem ) );
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	9b 81       	ldd	r25, Y+3	; 0x03
     c52:	02 96       	adiw	r24, 0x02	; 2
     c54:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	9b 81       	ldd	r25, Y+3	; 0x03
     c5c:	fc 01       	movw	r30, r24
     c5e:	96 89       	ldd	r25, Z+22	; 0x16
     c60:	80 91 84 02 	lds	r24, 0x0284
     c64:	89 17       	cp	r24, r25
     c66:	30 f4       	brcc	.+12     	; 0xc74 <xTaskResumeFromISR+0x76>
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	9b 81       	ldd	r25, Y+3	; 0x03
     c6c:	fc 01       	movw	r30, r24
     c6e:	86 89       	ldd	r24, Z+22	; 0x16
     c70:	80 93 84 02 	sts	0x0284, r24
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	9b 81       	ldd	r25, Y+3	; 0x03
     c78:	ac 01       	movw	r20, r24
     c7a:	4e 5f       	subi	r20, 0xFE	; 254
     c7c:	5f 4f       	sbci	r21, 0xFF	; 255
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	fc 01       	movw	r30, r24
     c84:	86 89       	ldd	r24, Z+22	; 0x16
     c86:	28 2f       	mov	r18, r24
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	c9 01       	movw	r24, r18
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	82 0f       	add	r24, r18
     c9a:	93 1f       	adc	r25, r19
     c9c:	8c 5c       	subi	r24, 0xCC	; 204
     c9e:	9d 4f       	sbci	r25, 0xFD	; 253
     ca0:	ba 01       	movw	r22, r20
     ca2:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>
     ca6:	08 c0       	rjmp	.+16     	; 0xcb8 <xTaskResumeFromISR+0xba>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	9b 81       	ldd	r25, Y+3	; 0x03
     cac:	0c 96       	adiw	r24, 0x0c	; 12
     cae:	bc 01       	movw	r22, r24
     cb0:	8e e6       	ldi	r24, 0x6E	; 110
     cb2:	92 e0       	ldi	r25, 0x02	; 2
     cb4:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
	}
     cba:	26 96       	adiw	r28, 0x06	; 6
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
     ccc:	af 92       	push	r10
     cce:	bf 92       	push	r11
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	1f 92       	push	r1
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
     ce4:	a1 2c       	mov	r10, r1
     ce6:	b1 2c       	mov	r11, r1
     ce8:	c1 2c       	mov	r12, r1
     cea:	d1 2c       	mov	r13, r1
     cec:	e1 2c       	mov	r14, r1
     cee:	f1 2c       	mov	r15, r1
     cf0:	00 e0       	ldi	r16, 0x00	; 0
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	45 e5       	ldi	r20, 0x55	; 85
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	62 e2       	ldi	r22, 0x22	; 34
     cfc:	72 e0       	ldi	r23, 0x02	; 2
     cfe:	8b e1       	ldi	r24, 0x1B	; 27
     d00:	9a e0       	ldi	r25, 0x0A	; 10
     d02:	0e 94 67 03 	call	0x6ce	; 0x6ce <xTaskGenericCreate>
     d06:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	51 f4       	brne	.+20     	; 0xd22 <vTaskStartScheduler+0x56>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
     d0e:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	80 93 85 02 	sts	0x0285, r24
		xTickCount = ( portTickType ) 0U;
     d16:	10 92 82 02 	sts	0x0282, r1
     d1a:	10 92 81 02 	sts	0x0281, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     d1e:	0e 94 09 19 	call	0x3212	; 0x3212 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
     d22:	0f 90       	pop	r0
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	df 90       	pop	r13
     d30:	cf 90       	pop	r12
     d32:	bf 90       	pop	r11
     d34:	af 90       	pop	r10
     d36:	08 95       	ret

00000d38 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
     d40:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
     d42:	10 92 85 02 	sts	0x0285, r1
	vPortEndScheduler();
     d46:	0e 94 42 19 	call	0x3284	; 0x3284 <vPortEndScheduler>
}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
     d58:	80 91 86 02 	lds	r24, 0x0286
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	80 93 86 02 	sts	0x0286, r24
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	1f 92       	push	r1
     d72:	1f 92       	push	r1
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     d78:	19 82       	std	Y+1, r1	; 0x01
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
     d80:	80 91 86 02 	lds	r24, 0x0286
     d84:	81 50       	subi	r24, 0x01	; 1
     d86:	80 93 86 02 	sts	0x0286, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     d8a:	80 91 86 02 	lds	r24, 0x0286
     d8e:	88 23       	and	r24, r24
     d90:	09 f0       	breq	.+2      	; 0xd94 <xTaskResumeAll+0x2c>
     d92:	64 c0       	rjmp	.+200    	; 0xe5c <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
     d94:	80 91 80 02 	lds	r24, 0x0280
     d98:	88 23       	and	r24, r24
     d9a:	09 f4       	brne	.+2      	; 0xd9e <xTaskResumeAll+0x36>
     d9c:	5f c0       	rjmp	.+190    	; 0xe5c <xTaskResumeAll+0xf4>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
     d9e:	1a 82       	std	Y+2, r1	; 0x02

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     da0:	3a c0       	rjmp	.+116    	; 0xe16 <xTaskResumeAll+0xae>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
     da2:	80 91 73 02 	lds	r24, 0x0273
     da6:	90 91 74 02 	lds	r25, 0x0274
     daa:	fc 01       	movw	r30, r24
     dac:	06 81       	ldd	r16, Z+6	; 0x06
     dae:	17 81       	ldd	r17, Z+7	; 0x07
					uxListRemove( &( pxTCB->xEventListItem ) );
     db0:	c8 01       	movw	r24, r16
     db2:	0c 96       	adiw	r24, 0x0c	; 12
     db4:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
					uxListRemove( &( pxTCB->xGenericListItem ) );
     db8:	c8 01       	movw	r24, r16
     dba:	02 96       	adiw	r24, 0x02	; 2
     dbc:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     dc0:	f8 01       	movw	r30, r16
     dc2:	96 89       	ldd	r25, Z+22	; 0x16
     dc4:	80 91 84 02 	lds	r24, 0x0284
     dc8:	89 17       	cp	r24, r25
     dca:	20 f4       	brcc	.+8      	; 0xdd4 <xTaskResumeAll+0x6c>
     dcc:	f8 01       	movw	r30, r16
     dce:	86 89       	ldd	r24, Z+22	; 0x16
     dd0:	80 93 84 02 	sts	0x0284, r24
     dd4:	a8 01       	movw	r20, r16
     dd6:	4e 5f       	subi	r20, 0xFE	; 254
     dd8:	5f 4f       	sbci	r21, 0xFF	; 255
     dda:	f8 01       	movw	r30, r16
     ddc:	86 89       	ldd	r24, Z+22	; 0x16
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	c9 01       	movw	r24, r18
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	82 0f       	add	r24, r18
     df2:	93 1f       	adc	r25, r19
     df4:	8c 5c       	subi	r24, 0xCC	; 204
     df6:	9d 4f       	sbci	r25, 0xFD	; 253
     df8:	ba 01       	movw	r22, r20
     dfa:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     dfe:	f8 01       	movw	r30, r16
     e00:	26 89       	ldd	r18, Z+22	; 0x16
     e02:	80 91 32 02 	lds	r24, 0x0232
     e06:	90 91 33 02 	lds	r25, 0x0233
     e0a:	fc 01       	movw	r30, r24
     e0c:	86 89       	ldd	r24, Z+22	; 0x16
     e0e:	28 17       	cp	r18, r24
     e10:	10 f0       	brcs	.+4      	; 0xe16 <xTaskResumeAll+0xae>
					{
						xYieldRequired = pdTRUE;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	8a 83       	std	Y+2, r24	; 0x02
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     e16:	80 91 6e 02 	lds	r24, 0x026E
     e1a:	88 23       	and	r24, r24
     e1c:	11 f6       	brne	.-124    	; 0xda2 <xTaskResumeAll+0x3a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     e1e:	80 91 87 02 	lds	r24, 0x0287
     e22:	88 23       	and	r24, r24
     e24:	71 f0       	breq	.+28     	; 0xe42 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     e26:	07 c0       	rjmp	.+14     	; 0xe36 <xTaskResumeAll+0xce>
					{
						vTaskIncrementTick();
     e28:	0e 94 6d 07 	call	0xeda	; 0xeda <vTaskIncrementTick>
						--uxMissedTicks;
     e2c:	80 91 87 02 	lds	r24, 0x0287
     e30:	81 50       	subi	r24, 0x01	; 1
     e32:	80 93 87 02 	sts	0x0287, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     e36:	80 91 87 02 	lds	r24, 0x0287
     e3a:	88 23       	and	r24, r24
     e3c:	a9 f7       	brne	.-22     	; 0xe28 <xTaskResumeAll+0xc0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	21 f0       	breq	.+8      	; 0xe50 <xTaskResumeAll+0xe8>
     e48:	80 91 88 02 	lds	r24, 0x0288
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	31 f4       	brne	.+12     	; 0xe5c <xTaskResumeAll+0xf4>
				{
					xAlreadyYielded = pdTRUE;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	89 83       	std	Y+1, r24	; 0x01
					xMissedYield = pdFALSE;
     e54:	10 92 88 02 	sts	0x0288, r1
					portYIELD_WITHIN_API();
     e58:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
     e5c:	0f 90       	pop	r0
     e5e:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
}
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	08 95       	ret

00000e70 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	1f 92       	push	r1
     e76:	1f 92       	push	r1
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	0f 92       	push	r0
	{
		xTicks = xTickCount;
     e82:	80 91 81 02 	lds	r24, 0x0281
     e86:	90 91 82 02 	lds	r25, 0x0282
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63

	return xTicks;
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <xTaskGetTickCountFromISR+0x6>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     eaa:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
     eac:	80 91 81 02 	lds	r24, 0x0281
     eb0:	90 91 82 02 	lds	r25, 0x0282
     eb4:	9b 83       	std	Y+3, r25	; 0x03
     eb6:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	9b 81       	ldd	r25, Y+3	; 0x03
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
     ed0:	80 91 80 02 	lds	r24, 0x0280
}
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	00 d0       	rcall	.+0      	; 0xee0 <vTaskIncrementTick+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <vTaskIncrementTick+0x8>
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     ee6:	80 91 86 02 	lds	r24, 0x0286
     eea:	88 23       	and	r24, r24
     eec:	09 f0       	breq	.+2      	; 0xef0 <vTaskIncrementTick+0x16>
     eee:	c4 c0       	rjmp	.+392    	; 0x1078 <vTaskIncrementTick+0x19e>
	{
		++xTickCount;
     ef0:	80 91 81 02 	lds	r24, 0x0281
     ef4:	90 91 82 02 	lds	r25, 0x0282
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	90 93 82 02 	sts	0x0282, r25
     efe:	80 93 81 02 	sts	0x0281, r24
		if( xTickCount == ( portTickType ) 0U )
     f02:	80 91 81 02 	lds	r24, 0x0281
     f06:	90 91 82 02 	lds	r25, 0x0282
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	e9 f5       	brne	.+122    	; 0xf88 <vTaskIncrementTick+0xae>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
     f0e:	80 91 6a 02 	lds	r24, 0x026A
     f12:	90 91 6b 02 	lds	r25, 0x026B
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedTaskList = pxOverflowDelayedTaskList;
     f1a:	80 91 6c 02 	lds	r24, 0x026C
     f1e:	90 91 6d 02 	lds	r25, 0x026D
     f22:	90 93 6b 02 	sts	0x026B, r25
     f26:	80 93 6a 02 	sts	0x026A, r24
			pxOverflowDelayedTaskList = pxTemp;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	90 93 6d 02 	sts	0x026D, r25
     f32:	80 93 6c 02 	sts	0x026C, r24
			xNumOfOverflows++;
     f36:	80 91 89 02 	lds	r24, 0x0289
     f3a:	8f 5f       	subi	r24, 0xFF	; 255
     f3c:	80 93 89 02 	sts	0x0289, r24

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     f40:	80 91 6a 02 	lds	r24, 0x026A
     f44:	90 91 6b 02 	lds	r25, 0x026B
     f48:	fc 01       	movw	r30, r24
     f4a:	80 81       	ld	r24, Z
     f4c:	88 23       	and	r24, r24
     f4e:	39 f4       	brne	.+14     	; 0xf5e <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	9f ef       	ldi	r25, 0xFF	; 255
     f54:	90 93 01 02 	sts	0x0201, r25
     f58:	80 93 00 02 	sts	0x0200, r24
     f5c:	15 c0       	rjmp	.+42     	; 0xf88 <vTaskIncrementTick+0xae>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     f5e:	80 91 6a 02 	lds	r24, 0x026A
     f62:	90 91 6b 02 	lds	r25, 0x026B
     f66:	fc 01       	movw	r30, r24
     f68:	85 81       	ldd	r24, Z+5	; 0x05
     f6a:	96 81       	ldd	r25, Z+6	; 0x06
     f6c:	fc 01       	movw	r30, r24
     f6e:	86 81       	ldd	r24, Z+6	; 0x06
     f70:	97 81       	ldd	r25, Z+7	; 0x07
     f72:	9c 83       	std	Y+4, r25	; 0x04
     f74:	8b 83       	std	Y+3, r24	; 0x03
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	fc 01       	movw	r30, r24
     f7c:	82 81       	ldd	r24, Z+2	; 0x02
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	90 93 01 02 	sts	0x0201, r25
     f84:	80 93 00 02 	sts	0x0200, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
     f88:	20 91 81 02 	lds	r18, 0x0281
     f8c:	30 91 82 02 	lds	r19, 0x0282
     f90:	80 91 00 02 	lds	r24, 0x0200
     f94:	90 91 01 02 	lds	r25, 0x0201
     f98:	28 17       	cp	r18, r24
     f9a:	39 07       	cpc	r19, r25
     f9c:	08 f4       	brcc	.+2      	; 0xfa0 <vTaskIncrementTick+0xc6>
     f9e:	6b c0       	rjmp	.+214    	; 0x1076 <vTaskIncrementTick+0x19c>
     fa0:	80 91 6a 02 	lds	r24, 0x026A
     fa4:	90 91 6b 02 	lds	r25, 0x026B
     fa8:	fc 01       	movw	r30, r24
     faa:	80 81       	ld	r24, Z
     fac:	88 23       	and	r24, r24
     fae:	39 f4       	brne	.+14     	; 0xfbe <vTaskIncrementTick+0xe4>
     fb0:	8f ef       	ldi	r24, 0xFF	; 255
     fb2:	9f ef       	ldi	r25, 0xFF	; 255
     fb4:	90 93 01 02 	sts	0x0201, r25
     fb8:	80 93 00 02 	sts	0x0200, r24
     fbc:	5c c0       	rjmp	.+184    	; 0x1076 <vTaskIncrementTick+0x19c>
     fbe:	80 91 6a 02 	lds	r24, 0x026A
     fc2:	90 91 6b 02 	lds	r25, 0x026B
     fc6:	fc 01       	movw	r30, r24
     fc8:	85 81       	ldd	r24, Z+5	; 0x05
     fca:	96 81       	ldd	r25, Z+6	; 0x06
     fcc:	fc 01       	movw	r30, r24
     fce:	86 81       	ldd	r24, Z+6	; 0x06
     fd0:	97 81       	ldd	r25, Z+7	; 0x07
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	8b 83       	std	Y+3, r24	; 0x03
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	fc 01       	movw	r30, r24
     fdc:	82 81       	ldd	r24, Z+2	; 0x02
     fde:	93 81       	ldd	r25, Z+3	; 0x03
     fe0:	9e 83       	std	Y+6, r25	; 0x06
     fe2:	8d 83       	std	Y+5, r24	; 0x05
     fe4:	20 91 81 02 	lds	r18, 0x0281
     fe8:	30 91 82 02 	lds	r19, 0x0282
     fec:	8d 81       	ldd	r24, Y+5	; 0x05
     fee:	9e 81       	ldd	r25, Y+6	; 0x06
     ff0:	28 17       	cp	r18, r24
     ff2:	39 07       	cpc	r19, r25
     ff4:	38 f4       	brcc	.+14     	; 0x1004 <vTaskIncrementTick+0x12a>
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	90 93 01 02 	sts	0x0201, r25
     ffe:	80 93 00 02 	sts	0x0200, r24
    1002:	39 c0       	rjmp	.+114    	; 0x1076 <vTaskIncrementTick+0x19c>
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	02 96       	adiw	r24, 0x02	; 2
    100a:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	9c 81       	ldd	r25, Y+4	; 0x04
    1012:	fc 01       	movw	r30, r24
    1014:	84 89       	ldd	r24, Z+20	; 0x14
    1016:	95 89       	ldd	r25, Z+21	; 0x15
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	29 f0       	breq	.+10     	; 0x1026 <vTaskIncrementTick+0x14c>
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	0c 96       	adiw	r24, 0x0c	; 12
    1022:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	fc 01       	movw	r30, r24
    102c:	96 89       	ldd	r25, Z+22	; 0x16
    102e:	80 91 84 02 	lds	r24, 0x0284
    1032:	89 17       	cp	r24, r25
    1034:	30 f4       	brcc	.+12     	; 0x1042 <vTaskIncrementTick+0x168>
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	fc 01       	movw	r30, r24
    103c:	86 89       	ldd	r24, Z+22	; 0x16
    103e:	80 93 84 02 	sts	0x0284, r24
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	9c 81       	ldd	r25, Y+4	; 0x04
    1046:	ac 01       	movw	r20, r24
    1048:	4e 5f       	subi	r20, 0xFE	; 254
    104a:	5f 4f       	sbci	r21, 0xFF	; 255
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	fc 01       	movw	r30, r24
    1052:	86 89       	ldd	r24, Z+22	; 0x16
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	c9 01       	movw	r24, r18
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	82 0f       	add	r24, r18
    1068:	93 1f       	adc	r25, r19
    106a:	8c 5c       	subi	r24, 0xCC	; 204
    106c:	9d 4f       	sbci	r25, 0xFD	; 253
    106e:	ba 01       	movw	r22, r20
    1070:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>
    1074:	95 cf       	rjmp	.-214    	; 0xfa0 <vTaskIncrementTick+0xc6>
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <vTaskIncrementTick+0x1a8>
	}
	else
	{
		++uxMissedTicks;
    1078:	80 91 87 02 	lds	r24, 0x0287
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	80 93 87 02 	sts	0x0287, r24
		{
			vApplicationTickHook();
		}
	}
	#endif
}
    1082:	26 96       	adiw	r28, 0x06	; 6
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	1f 92       	push	r1
    109a:	1f 92       	push	r1
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    10a0:	80 91 86 02 	lds	r24, 0x0286
    10a4:	88 23       	and	r24, r24
    10a6:	21 f0       	breq	.+8      	; 0x10b0 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	80 93 88 02 	sts	0x0288, r24
    10ae:	7a c0       	rjmp	.+244    	; 0x11a4 <vTaskSwitchContext+0x110>
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTempCounter;
		}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    10b0:	80 91 32 02 	lds	r24, 0x0232
    10b4:	90 91 33 02 	lds	r25, 0x0233
    10b8:	fc 01       	movw	r30, r24
    10ba:	20 81       	ld	r18, Z
    10bc:	31 81       	ldd	r19, Z+1	; 0x01
    10be:	80 91 32 02 	lds	r24, 0x0232
    10c2:	90 91 33 02 	lds	r25, 0x0233
    10c6:	fc 01       	movw	r30, r24
    10c8:	87 89       	ldd	r24, Z+23	; 0x17
    10ca:	90 8d       	ldd	r25, Z+24	; 0x18
    10cc:	82 17       	cp	r24, r18
    10ce:	93 07       	cpc	r25, r19
    10d0:	70 f0       	brcs	.+28     	; 0x10ee <vTaskSwitchContext+0x5a>
    10d2:	80 91 32 02 	lds	r24, 0x0232
    10d6:	90 91 33 02 	lds	r25, 0x0233
    10da:	9c 01       	movw	r18, r24
    10dc:	27 5e       	subi	r18, 0xE7	; 231
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	80 91 32 02 	lds	r24, 0x0232
    10e4:	90 91 33 02 	lds	r25, 0x0233
    10e8:	b9 01       	movw	r22, r18
    10ea:	0e 94 c3 00 	call	0x186	; 0x186 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <vTaskSwitchContext+0x66>
    10f0:	80 91 84 02 	lds	r24, 0x0284
    10f4:	81 50       	subi	r24, 0x01	; 1
    10f6:	80 93 84 02 	sts	0x0284, r24
    10fa:	80 91 84 02 	lds	r24, 0x0284
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	c9 01       	movw	r24, r18
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	8c 5c       	subi	r24, 0xCC	; 204
    1116:	9d 4f       	sbci	r25, 0xFD	; 253
    1118:	fc 01       	movw	r30, r24
    111a:	80 81       	ld	r24, Z
    111c:	88 23       	and	r24, r24
    111e:	41 f3       	breq	.-48     	; 0x10f0 <vTaskSwitchContext+0x5c>
    1120:	80 91 84 02 	lds	r24, 0x0284
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	c9 01       	movw	r24, r18
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	82 0f       	add	r24, r18
    1138:	93 1f       	adc	r25, r19
    113a:	8c 5c       	subi	r24, 0xCC	; 204
    113c:	9d 4f       	sbci	r25, 0xFD	; 253
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	fc 01       	movw	r30, r24
    1148:	81 81       	ldd	r24, Z+1	; 0x01
    114a:	92 81       	ldd	r25, Z+2	; 0x02
    114c:	fc 01       	movw	r30, r24
    114e:	22 81       	ldd	r18, Z+2	; 0x02
    1150:	33 81       	ldd	r19, Z+3	; 0x03
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	fc 01       	movw	r30, r24
    1158:	32 83       	std	Z+2, r19	; 0x02
    115a:	21 83       	std	Z+1, r18	; 0x01
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	fc 01       	movw	r30, r24
    1162:	21 81       	ldd	r18, Z+1	; 0x01
    1164:	32 81       	ldd	r19, Z+2	; 0x02
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	03 96       	adiw	r24, 0x03	; 3
    116c:	28 17       	cp	r18, r24
    116e:	39 07       	cpc	r19, r25
    1170:	69 f4       	brne	.+26     	; 0x118c <vTaskSwitchContext+0xf8>
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	9a 81       	ldd	r25, Y+2	; 0x02
    1176:	fc 01       	movw	r30, r24
    1178:	81 81       	ldd	r24, Z+1	; 0x01
    117a:	92 81       	ldd	r25, Z+2	; 0x02
    117c:	fc 01       	movw	r30, r24
    117e:	22 81       	ldd	r18, Z+2	; 0x02
    1180:	33 81       	ldd	r19, Z+3	; 0x03
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	fc 01       	movw	r30, r24
    1188:	32 83       	std	Z+2, r19	; 0x02
    118a:	21 83       	std	Z+1, r18	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	fc 01       	movw	r30, r24
    1192:	81 81       	ldd	r24, Z+1	; 0x01
    1194:	92 81       	ldd	r25, Z+2	; 0x02
    1196:	fc 01       	movw	r30, r24
    1198:	86 81       	ldd	r24, Z+6	; 0x06
    119a:	97 81       	ldd	r25, Z+7	; 0x07
    119c:	90 93 33 02 	sts	0x0233, r25
    11a0:	80 93 32 02 	sts	0x0232, r24

		traceTASK_SWITCHED_IN();
	}
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	08 95       	ret

000011ae <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <vTaskPlaceOnEventList+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <vTaskPlaceOnEventList+0x8>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	9c 83       	std	Y+4, r25	; 0x04
    11bc:	8b 83       	std	Y+3, r24	; 0x03
    11be:	7e 83       	std	Y+6, r23	; 0x06
    11c0:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    11c2:	80 91 32 02 	lds	r24, 0x0232
    11c6:	90 91 33 02 	lds	r25, 0x0233
    11ca:	9c 01       	movw	r18, r24
    11cc:	24 5f       	subi	r18, 0xF4	; 244
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	b9 01       	movw	r22, r18
    11d6:	0e 94 0e 13 	call	0x261c	; 0x261c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    11da:	80 91 32 02 	lds	r24, 0x0232
    11de:	90 91 33 02 	lds	r25, 0x0233
    11e2:	02 96       	adiw	r24, 0x02	; 2
    11e4:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	8f 3f       	cpi	r24, 0xFF	; 255
    11ee:	2f ef       	ldi	r18, 0xFF	; 255
    11f0:	92 07       	cpc	r25, r18
    11f2:	59 f4       	brne	.+22     	; 0x120a <vTaskPlaceOnEventList+0x5c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    11f4:	80 91 32 02 	lds	r24, 0x0232
    11f8:	90 91 33 02 	lds	r25, 0x0233
    11fc:	02 96       	adiw	r24, 0x02	; 2
    11fe:	bc 01       	movw	r22, r24
    1200:	87 e7       	ldi	r24, 0x77	; 119
    1202:	92 e0       	ldi	r25, 0x02	; 2
    1204:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>
    1208:	0e c0       	rjmp	.+28     	; 0x1226 <vTaskPlaceOnEventList+0x78>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    120a:	20 91 81 02 	lds	r18, 0x0281
    120e:	30 91 82 02 	lds	r19, 0x0282
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	9e 81       	ldd	r25, Y+6	; 0x06
    1216:	82 0f       	add	r24, r18
    1218:	93 1f       	adc	r25, r19
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    1226:	26 96       	adiw	r28, 0x06	; 6
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	00 d0       	rcall	.+0      	; 0x123e <xTaskRemoveFromEventList+0x6>
    123e:	1f 92       	push	r1
    1240:	1f 92       	push	r1
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	9d 83       	std	Y+5, r25	; 0x05
    1248:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	fc 01       	movw	r30, r24
    1250:	85 81       	ldd	r24, Z+5	; 0x05
    1252:	96 81       	ldd	r25, Z+6	; 0x06
    1254:	fc 01       	movw	r30, r24
    1256:	86 81       	ldd	r24, Z+6	; 0x06
    1258:	97 81       	ldd	r25, Z+7	; 0x07
    125a:	9b 83       	std	Y+3, r25	; 0x03
    125c:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	9b 81       	ldd	r25, Y+3	; 0x03
    1262:	0c 96       	adiw	r24, 0x0c	; 12
    1264:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1268:	80 91 86 02 	lds	r24, 0x0286
    126c:	88 23       	and	r24, r24
    126e:	69 f5       	brne	.+90     	; 0x12ca <xTaskRemoveFromEventList+0x92>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	9b 81       	ldd	r25, Y+3	; 0x03
    1274:	02 96       	adiw	r24, 0x02	; 2
    1276:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	9b 81       	ldd	r25, Y+3	; 0x03
    127e:	fc 01       	movw	r30, r24
    1280:	96 89       	ldd	r25, Z+22	; 0x16
    1282:	80 91 84 02 	lds	r24, 0x0284
    1286:	89 17       	cp	r24, r25
    1288:	30 f4       	brcc	.+12     	; 0x1296 <xTaskRemoveFromEventList+0x5e>
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	9b 81       	ldd	r25, Y+3	; 0x03
    128e:	fc 01       	movw	r30, r24
    1290:	86 89       	ldd	r24, Z+22	; 0x16
    1292:	80 93 84 02 	sts	0x0284, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	9b 81       	ldd	r25, Y+3	; 0x03
    129a:	ac 01       	movw	r20, r24
    129c:	4e 5f       	subi	r20, 0xFE	; 254
    129e:	5f 4f       	sbci	r21, 0xFF	; 255
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	9b 81       	ldd	r25, Y+3	; 0x03
    12a4:	fc 01       	movw	r30, r24
    12a6:	86 89       	ldd	r24, Z+22	; 0x16
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	c9 01       	movw	r24, r18
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	82 0f       	add	r24, r18
    12bc:	93 1f       	adc	r25, r19
    12be:	8c 5c       	subi	r24, 0xCC	; 204
    12c0:	9d 4f       	sbci	r25, 0xFD	; 253
    12c2:	ba 01       	movw	r22, r20
    12c4:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>
    12c8:	08 c0       	rjmp	.+16     	; 0x12da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	9b 81       	ldd	r25, Y+3	; 0x03
    12ce:	0c 96       	adiw	r24, 0x0c	; 12
    12d0:	bc 01       	movw	r22, r24
    12d2:	8e e6       	ldi	r24, 0x6E	; 110
    12d4:	92 e0       	ldi	r25, 0x02	; 2
    12d6:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	9b 81       	ldd	r25, Y+3	; 0x03
    12de:	fc 01       	movw	r30, r24
    12e0:	26 89       	ldd	r18, Z+22	; 0x16
    12e2:	80 91 32 02 	lds	r24, 0x0232
    12e6:	90 91 33 02 	lds	r25, 0x0233
    12ea:	fc 01       	movw	r30, r24
    12ec:	86 89       	ldd	r24, Z+22	; 0x16
    12ee:	28 17       	cp	r18, r24
    12f0:	18 f0       	brcs	.+6      	; 0x12f8 <xTaskRemoveFromEventList+0xc0>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <xTaskRemoveFromEventList+0xc2>
	}
	else
	{
		xReturn = pdFALSE;
    12f8:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	08 95       	ret

0000130c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	1f 92       	push	r1
    1312:	1f 92       	push	r1
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    131c:	20 91 89 02 	lds	r18, 0x0289
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	fc 01       	movw	r30, r24
    1326:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    1328:	20 91 81 02 	lds	r18, 0x0281
    132c:	30 91 82 02 	lds	r19, 0x0282
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	fc 01       	movw	r30, r24
    1336:	32 83       	std	Z+2, r19	; 0x02
    1338:	21 83       	std	Z+1, r18	; 0x01
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	00 d0       	rcall	.+0      	; 0x134a <xTaskCheckForTimeOut+0x6>
    134a:	1f 92       	push	r1
    134c:	1f 92       	push	r1
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	9b 83       	std	Y+3, r25	; 0x03
    1354:	8a 83       	std	Y+2, r24	; 0x02
    1356:	7d 83       	std	Y+5, r23	; 0x05
    1358:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	fc 01       	movw	r30, r24
    1366:	80 81       	ld	r24, Z
    1368:	91 81       	ldd	r25, Z+1	; 0x01
    136a:	8f 3f       	cpi	r24, 0xFF	; 255
    136c:	ff ef       	ldi	r31, 0xFF	; 255
    136e:	9f 07       	cpc	r25, r31
    1370:	11 f4       	brne	.+4      	; 0x1376 <xTaskCheckForTimeOut+0x32>
			{
				xReturn = pdFALSE;
    1372:	19 82       	std	Y+1, r1	; 0x01
    1374:	4b c0       	rjmp	.+150    	; 0x140c <xTaskCheckForTimeOut+0xc8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	9b 81       	ldd	r25, Y+3	; 0x03
    137a:	fc 01       	movw	r30, r24
    137c:	90 81       	ld	r25, Z
    137e:	80 91 89 02 	lds	r24, 0x0289
    1382:	98 17       	cp	r25, r24
    1384:	79 f0       	breq	.+30     	; 0x13a4 <xTaskCheckForTimeOut+0x60>
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	9b 81       	ldd	r25, Y+3	; 0x03
    138a:	fc 01       	movw	r30, r24
    138c:	21 81       	ldd	r18, Z+1	; 0x01
    138e:	32 81       	ldd	r19, Z+2	; 0x02
    1390:	80 91 81 02 	lds	r24, 0x0281
    1394:	90 91 82 02 	lds	r25, 0x0282
    1398:	82 17       	cp	r24, r18
    139a:	93 07       	cpc	r25, r19
    139c:	18 f0       	brcs	.+6      	; 0x13a4 <xTaskCheckForTimeOut+0x60>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	34 c0       	rjmp	.+104    	; 0x140c <xTaskCheckForTimeOut+0xc8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    13a4:	20 91 81 02 	lds	r18, 0x0281
    13a8:	30 91 82 02 	lds	r19, 0x0282
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	9b 81       	ldd	r25, Y+3	; 0x03
    13b0:	fc 01       	movw	r30, r24
    13b2:	81 81       	ldd	r24, Z+1	; 0x01
    13b4:	92 81       	ldd	r25, Z+2	; 0x02
    13b6:	28 1b       	sub	r18, r24
    13b8:	39 0b       	sbc	r19, r25
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	fc 01       	movw	r30, r24
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
    13c4:	28 17       	cp	r18, r24
    13c6:	39 07       	cpc	r19, r25
    13c8:	f8 f4       	brcc	.+62     	; 0x1408 <xTaskCheckForTimeOut+0xc4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    13ca:	8c 81       	ldd	r24, Y+4	; 0x04
    13cc:	9d 81       	ldd	r25, Y+5	; 0x05
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 81       	ld	r18, Z
    13d2:	31 81       	ldd	r19, Z+1	; 0x01
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	fc 01       	movw	r30, r24
    13da:	41 81       	ldd	r20, Z+1	; 0x01
    13dc:	52 81       	ldd	r21, Z+2	; 0x02
    13de:	80 91 81 02 	lds	r24, 0x0281
    13e2:	90 91 82 02 	lds	r25, 0x0282
    13e6:	ba 01       	movw	r22, r20
    13e8:	68 1b       	sub	r22, r24
    13ea:	79 0b       	sbc	r23, r25
    13ec:	cb 01       	movw	r24, r22
    13ee:	28 0f       	add	r18, r24
    13f0:	39 1f       	adc	r19, r25
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	fc 01       	movw	r30, r24
    13f8:	31 83       	std	Z+1, r19	; 0x01
    13fa:	20 83       	st	Z, r18
			vTaskSetTimeOutState( pxTimeOut );
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1400:	0e 94 86 09 	call	0x130c	; 0x130c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    1404:	19 82       	std	Y+1, r1	; 0x01
    1406:	02 c0       	rjmp	.+4      	; 0x140c <xTaskCheckForTimeOut+0xc8>
		}
		else
		{
			xReturn = pdTRUE;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1410:	89 81       	ldd	r24, Y+1	; 0x01
}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	80 93 88 02 	sts	0x0288, r24
}
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	08 95       	ret

00001436 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	1f 92       	push	r1
    143c:	1f 92       	push	r1
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	9a 83       	std	Y+2, r25	; 0x02
    1444:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    1446:	0e 94 cb 0a 	call	0x1596	; 0x1596 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    144a:	80 91 34 02 	lds	r24, 0x0234
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	18 f0       	brcs	.+6      	; 0x1458 <prvIdleTask+0x22>
			{
				taskYIELD();
    1452:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
    1456:	f7 cf       	rjmp	.-18     	; 0x1446 <prvIdleTask+0x10>
    1458:	f6 cf       	rjmp	.-20     	; 0x1446 <prvIdleTask+0x10>

0000145a <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	29 97       	sbiw	r28, 0x09	; 9
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	7c 83       	std	Y+4, r23	; 0x04
    1478:	6b 83       	std	Y+3, r22	; 0x03
    147a:	4d 83       	std	Y+5, r20	; 0x05
    147c:	3f 83       	std	Y+7, r19	; 0x07
    147e:	2e 83       	std	Y+6, r18	; 0x06
    1480:	19 87       	std	Y+9, r17	; 0x09
    1482:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	49 96       	adiw	r24, 0x19	; 25
    148a:	2b 81       	ldd	r18, Y+3	; 0x03
    148c:	3c 81       	ldd	r19, Y+4	; 0x04
    148e:	40 e1       	ldi	r20, 0x10	; 16
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	b9 01       	movw	r22, r18
    1494:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	fc 01       	movw	r30, r24
    149e:	10 a6       	std	Z+40, r1	; 0x28

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	84 30       	cpi	r24, 0x04	; 4
    14a4:	10 f0       	brcs	.+4      	; 0x14aa <prvInitialiseTCBVariables+0x50>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    14a6:	83 e0       	ldi	r24, 0x03	; 3
    14a8:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	9a 81       	ldd	r25, Y+2	; 0x02
    14ae:	2d 81       	ldd	r18, Y+5	; 0x05
    14b0:	fc 01       	movw	r30, r24
    14b2:	26 8b       	std	Z+22, r18	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	2d 81       	ldd	r18, Y+5	; 0x05
    14ba:	fc 01       	movw	r30, r24
    14bc:	21 a7       	std	Z+41, r18	; 0x29
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	02 96       	adiw	r24, 0x02	; 2
    14c4:	0e 94 a5 12 	call	0x254a	; 0x254a <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	0c 96       	adiw	r24, 0x0c	; 12
    14ce:	0e 94 a5 12 	call	0x254a	; 0x254a <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	29 81       	ldd	r18, Y+1	; 0x01
    14d8:	3a 81       	ldd	r19, Y+2	; 0x02
    14da:	fc 01       	movw	r30, r24
    14dc:	31 87       	std	Z+9, r19	; 0x09
    14de:	20 87       	std	Z+8, r18	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	88 2f       	mov	r24, r24
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	24 e0       	ldi	r18, 0x04	; 4
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	28 1b       	sub	r18, r24
    14ec:	39 0b       	sbc	r19, r25
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	fc 01       	movw	r30, r24
    14f4:	35 87       	std	Z+13, r19	; 0x0d
    14f6:	24 87       	std	Z+12, r18	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	29 81       	ldd	r18, Y+1	; 0x01
    14fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1500:	fc 01       	movw	r30, r24
    1502:	33 8b       	std	Z+19, r19	; 0x13
    1504:	22 8b       	std	Z+18, r18	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    1506:	29 96       	adiw	r28, 0x09	; 9
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	08 95       	ret

0000151c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	1f 92       	push	r1
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    1526:	19 82       	std	Y+1, r1	; 0x01
    1528:	13 c0       	rjmp	.+38     	; 0x1550 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	c9 01       	movw	r24, r18
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	82 0f       	add	r24, r18
    1540:	93 1f       	adc	r25, r19
    1542:	8c 5c       	subi	r24, 0xCC	; 204
    1544:	9d 4f       	sbci	r25, 0xFD	; 253
    1546:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	8f 5f       	subi	r24, 0xFF	; 255
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	84 30       	cpi	r24, 0x04	; 4
    1554:	50 f3       	brcs	.-44     	; 0x152a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    1556:	88 e5       	ldi	r24, 0x58	; 88
    1558:	92 e0       	ldi	r25, 0x02	; 2
    155a:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    155e:	81 e6       	ldi	r24, 0x61	; 97
    1560:	92 e0       	ldi	r25, 0x02	; 2
    1562:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    1566:	8e e6       	ldi	r24, 0x6E	; 110
    1568:	92 e0       	ldi	r25, 0x02	; 2
    156a:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    156e:	87 e7       	ldi	r24, 0x77	; 119
    1570:	92 e0       	ldi	r25, 0x02	; 2
    1572:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1576:	88 e5       	ldi	r24, 0x58	; 88
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	90 93 6b 02 	sts	0x026B, r25
    157e:	80 93 6a 02 	sts	0x026A, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1582:	81 e6       	ldi	r24, 0x61	; 97
    1584:	92 e0       	ldi	r25, 0x02	; 2
    1586:	90 93 6d 02 	sts	0x026D, r25
    158a:	80 93 6c 02 	sts	0x026C, r24
}
    158e:	0f 90       	pop	r0
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret

00001596 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	08 95       	ret

000015a4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	1f 92       	push	r1
    15aa:	1f 92       	push	r1
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	9a 83       	std	Y+2, r25	; 0x02
    15b2:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    15b4:	80 91 32 02 	lds	r24, 0x0232
    15b8:	90 91 33 02 	lds	r25, 0x0233
    15bc:	29 81       	ldd	r18, Y+1	; 0x01
    15be:	3a 81       	ldd	r19, Y+2	; 0x02
    15c0:	fc 01       	movw	r30, r24
    15c2:	33 83       	std	Z+3, r19	; 0x03
    15c4:	22 83       	std	Z+2, r18	; 0x02

	if( xTimeToWake < xTickCount )
    15c6:	80 91 81 02 	lds	r24, 0x0281
    15ca:	90 91 82 02 	lds	r25, 0x0282
    15ce:	29 81       	ldd	r18, Y+1	; 0x01
    15d0:	3a 81       	ldd	r19, Y+2	; 0x02
    15d2:	28 17       	cp	r18, r24
    15d4:	39 07       	cpc	r19, r25
    15d6:	78 f4       	brcc	.+30     	; 0x15f6 <prvAddCurrentTaskToDelayedList+0x52>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    15d8:	80 91 32 02 	lds	r24, 0x0232
    15dc:	90 91 33 02 	lds	r25, 0x0233
    15e0:	9c 01       	movw	r18, r24
    15e2:	2e 5f       	subi	r18, 0xFE	; 254
    15e4:	3f 4f       	sbci	r19, 0xFF	; 255
    15e6:	80 91 6c 02 	lds	r24, 0x026C
    15ea:	90 91 6d 02 	lds	r25, 0x026D
    15ee:	b9 01       	movw	r22, r18
    15f0:	0e 94 0e 13 	call	0x261c	; 0x261c <vListInsert>
    15f4:	1d c0       	rjmp	.+58     	; 0x1630 <prvAddCurrentTaskToDelayedList+0x8c>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    15f6:	80 91 32 02 	lds	r24, 0x0232
    15fa:	90 91 33 02 	lds	r25, 0x0233
    15fe:	9c 01       	movw	r18, r24
    1600:	2e 5f       	subi	r18, 0xFE	; 254
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    1604:	80 91 6a 02 	lds	r24, 0x026A
    1608:	90 91 6b 02 	lds	r25, 0x026B
    160c:	b9 01       	movw	r22, r18
    160e:	0e 94 0e 13 	call	0x261c	; 0x261c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    1612:	80 91 00 02 	lds	r24, 0x0200
    1616:	90 91 01 02 	lds	r25, 0x0201
    161a:	29 81       	ldd	r18, Y+1	; 0x01
    161c:	3a 81       	ldd	r19, Y+2	; 0x02
    161e:	28 17       	cp	r18, r24
    1620:	39 07       	cpc	r19, r25
    1622:	30 f4       	brcc	.+12     	; 0x1630 <prvAddCurrentTaskToDelayedList+0x8c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	90 93 01 02 	sts	0x0201, r25
    162c:	80 93 00 02 	sts	0x0200, r24
		}
	}
}
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	08 95       	ret

0000163a <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	00 d0       	rcall	.+0      	; 0x1640 <prvAllocateTCBAndStack+0x6>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <prvAllocateTCBAndStack+0x8>
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	9c 83       	std	Y+4, r25	; 0x04
    1648:	8b 83       	std	Y+3, r24	; 0x03
    164a:	7e 83       	std	Y+6, r23	; 0x06
    164c:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    164e:	8a e2       	ldi	r24, 0x2A	; 42
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 d6 16 	call	0x2dac	; 0x2dac <pvPortMalloc>
    1656:	9a 83       	std	Y+2, r25	; 0x02
    1658:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	51 f1       	breq	.+84     	; 0x16b6 <prvAllocateTCBAndStack+0x7c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	29 f4       	brne	.+10     	; 0x1674 <prvAllocateTCBAndStack+0x3a>
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	0e 94 d6 16 	call	0x2dac	; 0x2dac <pvPortMalloc>
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <prvAllocateTCBAndStack+0x3e>
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	29 81       	ldd	r18, Y+1	; 0x01
    167a:	3a 81       	ldd	r19, Y+2	; 0x02
    167c:	f9 01       	movw	r30, r18
    167e:	90 8f       	std	Z+24, r25	; 0x18
    1680:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	9a 81       	ldd	r25, Y+2	; 0x02
    1686:	fc 01       	movw	r30, r24
    1688:	87 89       	ldd	r24, Z+23	; 0x17
    168a:	90 8d       	ldd	r25, Z+24	; 0x18
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	39 f4       	brne	.+14     	; 0x169e <prvAllocateTCBAndStack+0x64>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	9a 81       	ldd	r25, Y+2	; 0x02
    1694:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <vPortFree>
			pxNewTCB = NULL;
    1698:	1a 82       	std	Y+2, r1	; 0x02
    169a:	19 82       	std	Y+1, r1	; 0x01
    169c:	0c c0       	rjmp	.+24     	; 0x16b6 <prvAllocateTCBAndStack+0x7c>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	9a 81       	ldd	r25, Y+2	; 0x02
    16a2:	fc 01       	movw	r30, r24
    16a4:	87 89       	ldd	r24, Z+23	; 0x17
    16a6:	90 8d       	ldd	r25, Z+24	; 0x18
    16a8:	2b 81       	ldd	r18, Y+3	; 0x03
    16aa:	3c 81       	ldd	r19, Y+4	; 0x04
    16ac:	a9 01       	movw	r20, r18
    16ae:	65 ea       	ldi	r22, 0xA5	; 165
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	0e 94 53 28 	call	0x50a6	; 0x50a6 <memset>
		}
	}

	return pxNewTCB;
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    16ba:	26 96       	adiw	r28, 0x06	; 6
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	08 95       	ret

000016cc <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	1f 92       	push	r1
    16d6:	1f 92       	push	r1
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
	register unsigned short usCount = 0U;
    16e0:	00 e0       	ldi	r16, 0x00	; 0
    16e2:	10 e0       	ldi	r17, 0x00	; 0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <usTaskCheckFreeStackSpace+0x2c>
		{
			pucStackByte -= portSTACK_GROWTH;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
			usCount++;
    16f0:	c8 01       	movw	r24, r16
    16f2:	8c 01       	movw	r16, r24
    16f4:	0f 5f       	subi	r16, 0xFF	; 255
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	fc 01       	movw	r30, r24
    16fe:	80 81       	ld	r24, Z
    1700:	85 3a       	cpi	r24, 0xA5	; 165
    1702:	89 f3       	breq	.-30     	; 0x16e6 <usTaskCheckFreeStackSpace+0x1a>
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );

		return usCount;
    1704:	c8 01       	movw	r24, r16
	}
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	08 95       	ret

00001714 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	27 97       	sbiw	r28, 0x07	; 7
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	9f 83       	std	Y+7, r25	; 0x07
    172a:	8e 83       	std	Y+6, r24	; 0x06
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    172c:	8e 81       	ldd	r24, Y+6	; 0x06
    172e:	9f 81       	ldd	r25, Y+7	; 0x07
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	29 f4       	brne	.+10     	; 0x173e <uxTaskGetStackHighWaterMark+0x2a>
    1734:	80 91 32 02 	lds	r24, 0x0232
    1738:	90 91 33 02 	lds	r25, 0x0233
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <uxTaskGetStackHighWaterMark+0x2e>
    173e:	8e 81       	ldd	r24, Y+6	; 0x06
    1740:	9f 81       	ldd	r25, Y+7	; 0x07
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	fc 01       	movw	r30, r24
    174c:	87 89       	ldd	r24, Z+23	; 0x17
    174e:	90 8d       	ldd	r25, Z+24	; 0x18
    1750:	9c 83       	std	Y+4, r25	; 0x04
    1752:	8b 83       	std	Y+3, r24	; 0x03
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	0e 94 66 0b 	call	0x16cc	; 0x16cc <usTaskCheckFreeStackSpace>
    175c:	8d 83       	std	Y+5, r24	; 0x05

		return uxReturn;
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
	}
    1760:	27 96       	adiw	r28, 0x07	; 7
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	1f 92       	push	r1
    1778:	1f 92       	push	r1
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    177e:	80 91 32 02 	lds	r24, 0x0232
    1782:	90 91 33 02 	lds	r25, 0x0233
    1786:	9a 83       	std	Y+2, r25	; 0x02
    1788:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret

00001798 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	00 d0       	rcall	.+0      	; 0x179e <vTaskPriorityInherit+0x6>
    179e:	1f 92       	push	r1
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	9c 83       	std	Y+4, r25	; 0x04
    17a6:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	09 f4       	brne	.+2      	; 0x17ba <vTaskPriorityInherit+0x22>
    17b8:	78 c0       	rjmp	.+240    	; 0x18aa <vTaskPriorityInherit+0x112>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	fc 01       	movw	r30, r24
    17c0:	26 89       	ldd	r18, Z+22	; 0x16
    17c2:	80 91 32 02 	lds	r24, 0x0232
    17c6:	90 91 33 02 	lds	r25, 0x0233
    17ca:	fc 01       	movw	r30, r24
    17cc:	86 89       	ldd	r24, Z+22	; 0x16
    17ce:	28 17       	cp	r18, r24
    17d0:	08 f0       	brcs	.+2      	; 0x17d4 <vTaskPriorityInherit+0x3c>
    17d2:	6b c0       	rjmp	.+214    	; 0x18aa <vTaskPriorityInherit+0x112>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    17d4:	80 91 32 02 	lds	r24, 0x0232
    17d8:	90 91 33 02 	lds	r25, 0x0233
    17dc:	fc 01       	movw	r30, r24
    17de:	86 89       	ldd	r24, Z+22	; 0x16
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	24 e0       	ldi	r18, 0x04	; 4
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	28 1b       	sub	r18, r24
    17ea:	39 0b       	sbc	r19, r25
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	fc 01       	movw	r30, r24
    17f2:	35 87       	std	Z+13, r19	; 0x0d
    17f4:	24 87       	std	Z+12, r18	; 0x0c

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	fc 01       	movw	r30, r24
    17fc:	42 85       	ldd	r20, Z+10	; 0x0a
    17fe:	53 85       	ldd	r21, Z+11	; 0x0b
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a 81       	ldd	r25, Y+2	; 0x02
    1804:	fc 01       	movw	r30, r24
    1806:	86 89       	ldd	r24, Z+22	; 0x16
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	c9 01       	movw	r24, r18
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	82 0f       	add	r24, r18
    181c:	93 1f       	adc	r25, r19
    181e:	8c 5c       	subi	r24, 0xCC	; 204
    1820:	9d 4f       	sbci	r25, 0xFD	; 253
    1822:	48 17       	cp	r20, r24
    1824:	59 07       	cpc	r21, r25
    1826:	b9 f5       	brne	.+110    	; 0x1896 <vTaskPriorityInherit+0xfe>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	02 96       	adiw	r24, 0x02	; 2
    182e:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1832:	80 91 32 02 	lds	r24, 0x0232
    1836:	90 91 33 02 	lds	r25, 0x0233
    183a:	fc 01       	movw	r30, r24
    183c:	26 89       	ldd	r18, Z+22	; 0x16
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	9a 81       	ldd	r25, Y+2	; 0x02
    1842:	fc 01       	movw	r30, r24
    1844:	26 8b       	std	Z+22, r18	; 0x16
					prvAddTaskToReadyQueue( pxTCB );
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	fc 01       	movw	r30, r24
    184c:	96 89       	ldd	r25, Z+22	; 0x16
    184e:	80 91 84 02 	lds	r24, 0x0284
    1852:	89 17       	cp	r24, r25
    1854:	30 f4       	brcc	.+12     	; 0x1862 <vTaskPriorityInherit+0xca>
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	9a 81       	ldd	r25, Y+2	; 0x02
    185a:	fc 01       	movw	r30, r24
    185c:	86 89       	ldd	r24, Z+22	; 0x16
    185e:	80 93 84 02 	sts	0x0284, r24
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	ac 01       	movw	r20, r24
    1868:	4e 5f       	subi	r20, 0xFE	; 254
    186a:	5f 4f       	sbci	r21, 0xFF	; 255
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	fc 01       	movw	r30, r24
    1872:	86 89       	ldd	r24, Z+22	; 0x16
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	c9 01       	movw	r24, r18
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	82 0f       	add	r24, r18
    1888:	93 1f       	adc	r25, r19
    188a:	8c 5c       	subi	r24, 0xCC	; 204
    188c:	9d 4f       	sbci	r25, 0xFD	; 253
    188e:	ba 01       	movw	r22, r20
    1890:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>
    1894:	0a c0       	rjmp	.+20     	; 0x18aa <vTaskPriorityInherit+0x112>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1896:	80 91 32 02 	lds	r24, 0x0232
    189a:	90 91 33 02 	lds	r25, 0x0233
    189e:	fc 01       	movw	r30, r24
    18a0:	26 89       	ldd	r18, Z+22	; 0x16
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	fc 01       	movw	r30, r24
    18a8:	26 8b       	std	Z+22, r18	; 0x16
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	00 d0       	rcall	.+0      	; 0x18be <vTaskPriorityDisinherit+0x6>
    18be:	1f 92       	push	r1
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	9c 83       	std	Y+4, r25	; 0x04
    18c6:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	9a 83       	std	Y+2, r25	; 0x02
    18ce:	89 83       	std	Y+1, r24	; 0x01

		if( pxMutexHolder != NULL )
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	09 f4       	brne	.+2      	; 0x18da <vTaskPriorityDisinherit+0x22>
    18d8:	4e c0       	rjmp	.+156    	; 0x1976 <vTaskPriorityDisinherit+0xbe>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	fc 01       	movw	r30, r24
    18e0:	26 89       	ldd	r18, Z+22	; 0x16
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	9a 81       	ldd	r25, Y+2	; 0x02
    18e6:	fc 01       	movw	r30, r24
    18e8:	81 a5       	ldd	r24, Z+41	; 0x29
    18ea:	28 17       	cp	r18, r24
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <vTaskPriorityDisinherit+0x38>
    18ee:	43 c0       	rjmp	.+134    	; 0x1976 <vTaskPriorityDisinherit+0xbe>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	02 96       	adiw	r24, 0x02	; 2
    18f6:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	fc 01       	movw	r30, r24
    1900:	21 a5       	ldd	r18, Z+41	; 0x29
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	fc 01       	movw	r30, r24
    1908:	26 8b       	std	Z+22, r18	; 0x16
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	fc 01       	movw	r30, r24
    1910:	86 89       	ldd	r24, Z+22	; 0x16
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	24 e0       	ldi	r18, 0x04	; 4
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	28 1b       	sub	r18, r24
    191c:	39 0b       	sbc	r19, r25
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	fc 01       	movw	r30, r24
    1924:	35 87       	std	Z+13, r19	; 0x0d
    1926:	24 87       	std	Z+12, r18	; 0x0c
				prvAddTaskToReadyQueue( pxTCB );
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	fc 01       	movw	r30, r24
    192e:	96 89       	ldd	r25, Z+22	; 0x16
    1930:	80 91 84 02 	lds	r24, 0x0284
    1934:	89 17       	cp	r24, r25
    1936:	30 f4       	brcc	.+12     	; 0x1944 <vTaskPriorityDisinherit+0x8c>
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	9a 81       	ldd	r25, Y+2	; 0x02
    193c:	fc 01       	movw	r30, r24
    193e:	86 89       	ldd	r24, Z+22	; 0x16
    1940:	80 93 84 02 	sts	0x0284, r24
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	9a 81       	ldd	r25, Y+2	; 0x02
    1948:	ac 01       	movw	r20, r24
    194a:	4e 5f       	subi	r20, 0xFE	; 254
    194c:	5f 4f       	sbci	r21, 0xFF	; 255
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	9a 81       	ldd	r25, Y+2	; 0x02
    1952:	fc 01       	movw	r30, r24
    1954:	86 89       	ldd	r24, Z+22	; 0x16
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	c9 01       	movw	r24, r18
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	82 0f       	add	r24, r18
    196a:	93 1f       	adc	r25, r19
    196c:	8c 5c       	subi	r24, 0xCC	; 204
    196e:	9d 4f       	sbci	r25, 0xFD	; 253
    1970:	ba 01       	movw	r22, r20
    1972:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>
			}
		}
	}
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	00 d0       	rcall	.+0      	; 0x198a <xQueueGenericReset+0x6>
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	6b 83       	std	Y+3, r22	; 0x03
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	9a 81       	ldd	r25, Y+2	; 0x02
    199e:	fc 01       	movw	r30, r24
    19a0:	20 81       	ld	r18, Z
    19a2:	31 81       	ldd	r19, Z+1	; 0x01
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	9a 81       	ldd	r25, Y+2	; 0x02
    19a8:	fc 01       	movw	r30, r24
    19aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    19ac:	68 2f       	mov	r22, r24
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	fc 01       	movw	r30, r24
    19b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    19b8:	48 2f       	mov	r20, r24
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	64 9f       	mul	r22, r20
    19be:	c0 01       	movw	r24, r0
    19c0:	65 9f       	mul	r22, r21
    19c2:	90 0d       	add	r25, r0
    19c4:	74 9f       	mul	r23, r20
    19c6:	90 0d       	add	r25, r0
    19c8:	11 24       	eor	r1, r1
    19ca:	28 0f       	add	r18, r24
    19cc:	39 1f       	adc	r19, r25
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	fc 01       	movw	r30, r24
    19d4:	33 83       	std	Z+3, r19	; 0x03
    19d6:	22 83       	std	Z+2, r18	; 0x02
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	9a 81       	ldd	r25, Y+2	; 0x02
    19dc:	fc 01       	movw	r30, r24
    19de:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	fc 01       	movw	r30, r24
    19e6:	20 81       	ld	r18, Z
    19e8:	31 81       	ldd	r19, Z+1	; 0x01
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	fc 01       	movw	r30, r24
    19f0:	35 83       	std	Z+5, r19	; 0x05
    19f2:	24 83       	std	Z+4, r18	; 0x04
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	9a 81       	ldd	r25, Y+2	; 0x02
    19f8:	fc 01       	movw	r30, r24
    19fa:	20 81       	ld	r18, Z
    19fc:	31 81       	ldd	r19, Z+1	; 0x01
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	fc 01       	movw	r30, r24
    1a04:	83 8d       	ldd	r24, Z+27	; 0x1b
    1a06:	88 2f       	mov	r24, r24
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	61 50       	subi	r22, 0x01	; 1
    1a0e:	71 09       	sbc	r23, r1
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	fc 01       	movw	r30, r24
    1a16:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a18:	48 2f       	mov	r20, r24
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	64 9f       	mul	r22, r20
    1a1e:	c0 01       	movw	r24, r0
    1a20:	65 9f       	mul	r22, r21
    1a22:	90 0d       	add	r25, r0
    1a24:	74 9f       	mul	r23, r20
    1a26:	90 0d       	add	r25, r0
    1a28:	11 24       	eor	r1, r1
    1a2a:	28 0f       	add	r18, r24
    1a2c:	39 1f       	adc	r19, r25
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	9a 81       	ldd	r25, Y+2	; 0x02
    1a32:	fc 01       	movw	r30, r24
    1a34:	37 83       	std	Z+7, r19	; 0x07
    1a36:	26 83       	std	Z+6, r18	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3c:	2f ef       	ldi	r18, 0xFF	; 255
    1a3e:	fc 01       	movw	r30, r24
    1a40:	25 8f       	std	Z+29, r18	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	2f ef       	ldi	r18, 0xFF	; 255
    1a48:	fc 01       	movw	r30, r24
    1a4a:	26 8f       	std	Z+30, r18	; 0x1e

		if( xNewQueue == pdFALSE )
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	88 23       	and	r24, r24
    1a50:	81 f4       	brne	.+32     	; 0x1a72 <xQueueGenericReset+0xee>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	fc 01       	movw	r30, r24
    1a58:	80 85       	ldd	r24, Z+8	; 0x08
    1a5a:	88 23       	and	r24, r24
    1a5c:	a1 f0       	breq	.+40     	; 0x1a86 <xQueueGenericReset+0x102>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	08 96       	adiw	r24, 0x08	; 8
    1a64:	0e 94 1c 09 	call	0x1238	; 0x1238 <xTaskRemoveFromEventList>
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	69 f4       	brne	.+26     	; 0x1a86 <xQueueGenericReset+0x102>
				{
					portYIELD_WITHIN_API();
    1a6c:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
    1a70:	0a c0       	rjmp	.+20     	; 0x1a86 <xQueueGenericReset+0x102>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	08 96       	adiw	r24, 0x08	; 8
    1a78:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	41 96       	adiw	r24, 0x11	; 17
    1a82:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1a86:	0f 90       	pop	r0
    1a88:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
}
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	29 97       	sbiw	r28, 0x09	; 9
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	8f 83       	std	Y+7, r24	; 0x07
    1aae:	68 87       	std	Y+8, r22	; 0x08
    1ab0:	49 87       	std	Y+9, r20	; 0x09
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    1ab2:	1a 82       	std	Y+2, r1	; 0x02
    1ab4:	19 82       	std	Y+1, r1	; 0x01
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab8:	88 23       	and	r24, r24
    1aba:	09 f4       	brne	.+2      	; 0x1abe <xQueueGenericCreate+0x26>
    1abc:	43 c0       	rjmp	.+134    	; 0x1b44 <xQueueGenericCreate+0xac>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1abe:	8f e1       	ldi	r24, 0x1F	; 31
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 d6 16 	call	0x2dac	; 0x2dac <pvPortMalloc>
    1ac6:	9c 83       	std	Y+4, r25	; 0x04
    1ac8:	8b 83       	std	Y+3, r24	; 0x03
		if( pxNewQueue != NULL )
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	c9 f1       	breq	.+114    	; 0x1b44 <xQueueGenericCreate+0xac>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    1ad2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad4:	48 2f       	mov	r20, r24
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	88 85       	ldd	r24, Y+8	; 0x08
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	42 9f       	mul	r20, r18
    1ae0:	c0 01       	movw	r24, r0
    1ae2:	43 9f       	mul	r20, r19
    1ae4:	90 0d       	add	r25, r0
    1ae6:	52 9f       	mul	r21, r18
    1ae8:	90 0d       	add	r25, r0
    1aea:	11 24       	eor	r1, r1
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	0e 94 d6 16 	call	0x2dac	; 0x2dac <pvPortMalloc>
    1afa:	9c 01       	movw	r18, r24
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	fc 01       	movw	r30, r24
    1b02:	31 83       	std	Z+1, r19	; 0x01
    1b04:	20 83       	st	Z, r18
			if( pxNewQueue->pcHead != NULL )
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	80 81       	ld	r24, Z
    1b0e:	91 81       	ldd	r25, Z+1	; 0x01
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	a1 f0       	breq	.+40     	; 0x1b3c <xQueueGenericCreate+0xa4>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	2f 81       	ldd	r18, Y+7	; 0x07
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	23 8f       	std	Z+27, r18	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	28 85       	ldd	r18, Y+8	; 0x08
    1b24:	fc 01       	movw	r30, r24
    1b26:	24 8f       	std	Z+28, r18	; 0x1c
				xQueueGenericReset( pxNewQueue, pdTRUE );
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	61 e0       	ldi	r22, 0x01	; 1
    1b2e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <xQueueGenericCreate+0xac>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b48:	29 96       	adiw	r28, 0x09	; 9
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	08 95       	ret

00001b5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <xQueueCreateMutex+0x6>
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	8b 83       	std	Y+3, r24	; 0x03
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1b66:	8f e1       	ldi	r24, 0x1F	; 31
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	0e 94 d6 16 	call	0x2dac	; 0x2dac <pvPortMalloc>
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	f1 f1       	breq	.+124    	; 0x1bf6 <xQueueCreateMutex+0x9c>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	fc 01       	movw	r30, r24
    1b80:	13 82       	std	Z+3, r1	; 0x03
    1b82:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	9a 81       	ldd	r25, Y+2	; 0x02
    1b88:	fc 01       	movw	r30, r24
    1b8a:	11 82       	std	Z+1, r1	; 0x01
    1b8c:	10 82       	st	Z, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	9a 81       	ldd	r25, Y+2	; 0x02
    1b92:	fc 01       	movw	r30, r24
    1b94:	15 82       	std	Z+5, r1	; 0x05
    1b96:	14 82       	std	Z+4, r1	; 0x04
			pxNewQueue->pcReadFrom = NULL;
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	17 82       	std	Z+7, r1	; 0x07
    1ba0:	16 82       	std	Z+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	12 8e       	std	Z+26, r1	; 0x1a
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	21 e0       	ldi	r18, 0x01	; 1
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	23 8f       	std	Z+27, r18	; 0x1b
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	fc 01       	movw	r30, r24
    1bba:	14 8e       	std	Z+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc0:	2f ef       	ldi	r18, 0xFF	; 255
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	25 8f       	std	Z+29, r18	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	2f ef       	ldi	r18, 0xFF	; 255
    1bcc:	fc 01       	movw	r30, r24
    1bce:	26 8f       	std	Z+30, r18	; 0x1e
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	08 96       	adiw	r24, 0x08	; 8
    1bd6:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	41 96       	adiw	r24, 0x11	; 17
    1be0:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	50 e0       	ldi	r21, 0x00	; 0
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	2b 97       	sbiw	r28, 0x0b	; 11
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	9e 83       	std	Y+6, r25	; 0x06
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
    1c1e:	78 87       	std	Y+8, r23	; 0x08
    1c20:	6f 83       	std	Y+7, r22	; 0x07
    1c22:	5a 87       	std	Y+10, r21	; 0x0a
    1c24:	49 87       	std	Y+9, r20	; 0x09
    1c26:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1c28:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	fc 01       	movw	r30, r24
    1c36:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c38:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c40:	28 17       	cp	r18, r24
    1c42:	d8 f4       	brcc	.+54     	; 0x1c7a <xQueueGenericSend+0x74>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1c44:	2f 81       	ldd	r18, Y+7	; 0x07
    1c46:	38 85       	ldd	r19, Y+8	; 0x08
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c4e:	b9 01       	movw	r22, r18
    1c50:	0e 94 8d 10 	call	0x211a	; 0x211a <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	9e 81       	ldd	r25, Y+6	; 0x06
    1c58:	fc 01       	movw	r30, r24
    1c5a:	81 89       	ldd	r24, Z+17	; 0x11
    1c5c:	88 23       	and	r24, r24
    1c5e:	49 f0       	breq	.+18     	; 0x1c72 <xQueueGenericSend+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	41 96       	adiw	r24, 0x11	; 17
    1c66:	0e 94 1c 09 	call	0x1238	; 0x1238 <xTaskRemoveFromEventList>
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	11 f4       	brne	.+4      	; 0x1c72 <xQueueGenericSend+0x6c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    1c6e:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    1c72:	0f 90       	pop	r0
    1c74:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	61 c0       	rjmp	.+194    	; 0x1d3c <xQueueGenericSend+0x136>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	21 f4       	brne	.+8      	; 0x1c8a <xQueueGenericSend+0x84>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1c82:	0f 90       	pop	r0
    1c84:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	59 c0       	rjmp	.+178    	; 0x1d3c <xQueueGenericSend+0x136>
				}
				else if( xEntryTimeSet == pdFALSE )
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	88 23       	and	r24, r24
    1c8e:	31 f4       	brne	.+12     	; 0x1c9c <xQueueGenericSend+0x96>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1c90:	ce 01       	movw	r24, r28
    1c92:	02 96       	adiw	r24, 0x02	; 2
    1c94:	0e 94 86 09 	call	0x130c	; 0x130c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1ca0:	0e 94 a8 06 	call	0xd50	; 0xd50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	0f 92       	push	r0
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	fc 01       	movw	r30, r24
    1cb0:	85 8d       	ldd	r24, Z+29	; 0x1d
    1cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb4:	21 f4       	brne	.+8      	; 0x1cbe <xQueueGenericSend+0xb8>
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	fc 01       	movw	r30, r24
    1cbc:	15 8e       	std	Z+29, r1	; 0x1d
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cc6:	8f 3f       	cpi	r24, 0xFF	; 255
    1cc8:	21 f4       	brne	.+8      	; 0x1cd2 <xQueueGenericSend+0xcc>
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	fc 01       	movw	r30, r24
    1cd0:	16 8e       	std	Z+30, r1	; 0x1e
    1cd2:	0f 90       	pop	r0
    1cd4:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1cd6:	9e 01       	movw	r18, r28
    1cd8:	27 5f       	subi	r18, 0xF7	; 247
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	ce 01       	movw	r24, r28
    1cde:	02 96       	adiw	r24, 0x02	; 2
    1ce0:	b9 01       	movw	r22, r18
    1ce2:	0e 94 a2 09 	call	0x1344	; 0x1344 <xTaskCheckForTimeOut>
    1ce6:	88 23       	and	r24, r24
    1ce8:	01 f5       	brne	.+64     	; 0x1d2a <xQueueGenericSend+0x124>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	0e 94 34 12 	call	0x2468	; 0x2468 <prvIsQueueFull>
    1cf2:	88 23       	and	r24, r24
    1cf4:	99 f0       	breq	.+38     	; 0x1d1c <xQueueGenericSend+0x116>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1cf6:	29 85       	ldd	r18, Y+9	; 0x09
    1cf8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	08 96       	adiw	r24, 0x08	; 8
    1d00:	b9 01       	movw	r22, r18
    1d02:	0e 94 d7 08 	call	0x11ae	; 0x11ae <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	0e 94 9c 11 	call	0x2338	; 0x2338 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1d0e:	0e 94 b4 06 	call	0xd68	; 0xd68 <xTaskResumeAll>
    1d12:	88 23       	and	r24, r24
    1d14:	91 f4       	brne	.+36     	; 0x1d3a <xQueueGenericSend+0x134>
				{
					portYIELD_WITHIN_API();
    1d16:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
    1d1a:	0f c0       	rjmp	.+30     	; 0x1d3a <xQueueGenericSend+0x134>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	0e 94 9c 11 	call	0x2338	; 0x2338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1d24:	0e 94 b4 06 	call	0xd68	; 0xd68 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    1d28:	80 cf       	rjmp	.-256    	; 0x1c2a <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	0e 94 9c 11 	call	0x2338	; 0x2338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1d32:	0e 94 b4 06 	call	0xd68	; 0xd68 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <xQueueGenericSend+0x136>
		}
	}
    1d3a:	77 cf       	rjmp	.-274    	; 0x1c2a <xQueueGenericSend+0x24>
}
    1d3c:	2b 96       	adiw	r28, 0x0b	; 11
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	08 95       	ret

00001d4e <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	29 97       	sbiw	r28, 0x09	; 9
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	9c 83       	std	Y+4, r25	; 0x04
    1d64:	8b 83       	std	Y+3, r24	; 0x03
    1d66:	7e 83       	std	Y+6, r23	; 0x06
    1d68:	6d 83       	std	Y+5, r22	; 0x05
    1d6a:	58 87       	std	Y+8, r21	; 0x08
    1d6c:	4f 83       	std	Y+7, r20	; 0x07
    1d6e:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1d70:	1a 82       	std	Y+2, r1	; 0x02
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	fc 01       	movw	r30, r24
    1d78:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	fc 01       	movw	r30, r24
    1d80:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d82:	28 17       	cp	r18, r24
    1d84:	90 f5       	brcc	.+100    	; 0x1dea <xQueueGenericSendFromISR+0x9c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1d86:	2d 81       	ldd	r18, Y+5	; 0x05
    1d88:	3e 81       	ldd	r19, Y+6	; 0x06
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	49 85       	ldd	r20, Y+9	; 0x09
    1d90:	b9 01       	movw	r22, r18
    1d92:	0e 94 8d 10 	call	0x211a	; 0x211a <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d9e:	8f 3f       	cpi	r24, 0xFF	; 255
    1da0:	b9 f4       	brne	.+46     	; 0x1dd0 <xQueueGenericSendFromISR+0x82>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	fc 01       	movw	r30, r24
    1da8:	81 89       	ldd	r24, Z+17	; 0x11
    1daa:	88 23       	and	r24, r24
    1dac:	d9 f0       	breq	.+54     	; 0x1de4 <xQueueGenericSendFromISR+0x96>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	41 96       	adiw	r24, 0x11	; 17
    1db4:	0e 94 1c 09 	call	0x1238	; 0x1238 <xTaskRemoveFromEventList>
    1db8:	88 23       	and	r24, r24
    1dba:	a1 f0       	breq	.+40     	; 0x1de4 <xQueueGenericSendFromISR+0x96>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
    1dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dbe:	98 85       	ldd	r25, Y+8	; 0x08
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	81 f0       	breq	.+32     	; 0x1de4 <xQueueGenericSendFromISR+0x96>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc6:	98 85       	ldd	r25, Y+8	; 0x08
    1dc8:	21 e0       	ldi	r18, 0x01	; 1
    1dca:	fc 01       	movw	r30, r24
    1dcc:	20 83       	st	Z, r18
    1dce:	0a c0       	rjmp	.+20     	; 0x1de4 <xQueueGenericSendFromISR+0x96>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dd8:	21 e0       	ldi	r18, 0x01	; 1
    1dda:	28 0f       	add	r18, r24
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	fc 01       	movw	r30, r24
    1de2:	26 8f       	std	Z+30, r18	; 0x1e
			}

			xReturn = pdPASS;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	01 c0       	rjmp	.+2      	; 0x1dec <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1dea:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dee:	29 96       	adiw	r28, 0x09	; 9
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	08 95       	ret

00001e00 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	2d 97       	sbiw	r28, 0x0d	; 13
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	98 87       	std	Y+8, r25	; 0x08
    1e16:	8f 83       	std	Y+7, r24	; 0x07
    1e18:	7a 87       	std	Y+10, r23	; 0x0a
    1e1a:	69 87       	std	Y+9, r22	; 0x09
    1e1c:	5c 87       	std	Y+12, r21	; 0x0c
    1e1e:	4b 87       	std	Y+11, r20	; 0x0b
    1e20:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1e22:	19 82       	std	Y+1, r1	; 0x01
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1e2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e2c:	98 85       	ldd	r25, Y+8	; 0x08
    1e2e:	fc 01       	movw	r30, r24
    1e30:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e32:	88 23       	and	r24, r24
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <xQueueGenericReceive+0x38>
    1e36:	54 c0       	rjmp	.+168    	; 0x1ee0 <xQueueGenericReceive+0xe0>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1e38:	8f 81       	ldd	r24, Y+7	; 0x07
    1e3a:	98 85       	ldd	r25, Y+8	; 0x08
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	86 81       	ldd	r24, Z+6	; 0x06
    1e40:	97 81       	ldd	r25, Z+7	; 0x07
    1e42:	9b 83       	std	Y+3, r25	; 0x03
    1e44:	8a 83       	std	Y+2, r24	; 0x02

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1e46:	29 85       	ldd	r18, Y+9	; 0x09
    1e48:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e4c:	98 85       	ldd	r25, Y+8	; 0x08
    1e4e:	b9 01       	movw	r22, r18
    1e50:	0e 94 4b 11 	call	0x2296	; 0x2296 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e56:	88 23       	and	r24, r24
    1e58:	49 f5       	brne	.+82     	; 0x1eac <xQueueGenericReceive+0xac>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1e5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e5c:	98 85       	ldd	r25, Y+8	; 0x08
    1e5e:	fc 01       	movw	r30, r24
    1e60:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e62:	2f ef       	ldi	r18, 0xFF	; 255
    1e64:	28 0f       	add	r18, r24
    1e66:	8f 81       	ldd	r24, Y+7	; 0x07
    1e68:	98 85       	ldd	r25, Y+8	; 0x08
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	22 8f       	std	Z+26, r18	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1e6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e70:	98 85       	ldd	r25, Y+8	; 0x08
    1e72:	fc 01       	movw	r30, r24
    1e74:	80 81       	ld	r24, Z
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	41 f4       	brne	.+16     	; 0x1e8c <xQueueGenericReceive+0x8c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    1e7c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <xTaskGetCurrentTaskHandle>
    1e80:	9c 01       	movw	r18, r24
    1e82:	8f 81       	ldd	r24, Y+7	; 0x07
    1e84:	98 85       	ldd	r25, Y+8	; 0x08
    1e86:	fc 01       	movw	r30, r24
    1e88:	33 83       	std	Z+3, r19	; 0x03
    1e8a:	22 83       	std	Z+2, r18	; 0x02
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1e8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e8e:	98 85       	ldd	r25, Y+8	; 0x08
    1e90:	fc 01       	movw	r30, r24
    1e92:	80 85       	ldd	r24, Z+8	; 0x08
    1e94:	88 23       	and	r24, r24
    1e96:	01 f1       	breq	.+64     	; 0x1ed8 <xQueueGenericReceive+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1e98:	8f 81       	ldd	r24, Y+7	; 0x07
    1e9a:	98 85       	ldd	r25, Y+8	; 0x08
    1e9c:	08 96       	adiw	r24, 0x08	; 8
    1e9e:	0e 94 1c 09 	call	0x1238	; 0x1238 <xTaskRemoveFromEventList>
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	c9 f4       	brne	.+50     	; 0x1ed8 <xQueueGenericReceive+0xd8>
						{
							portYIELD_WITHIN_API();
    1ea6:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
    1eaa:	16 c0       	rjmp	.+44     	; 0x1ed8 <xQueueGenericReceive+0xd8>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    1eac:	8f 81       	ldd	r24, Y+7	; 0x07
    1eae:	98 85       	ldd	r25, Y+8	; 0x08
    1eb0:	2a 81       	ldd	r18, Y+2	; 0x02
    1eb2:	3b 81       	ldd	r19, Y+3	; 0x03
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	37 83       	std	Z+7, r19	; 0x07
    1eb8:	26 83       	std	Z+6, r18	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1eba:	8f 81       	ldd	r24, Y+7	; 0x07
    1ebc:	98 85       	ldd	r25, Y+8	; 0x08
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	81 89       	ldd	r24, Z+17	; 0x11
    1ec2:	88 23       	and	r24, r24
    1ec4:	49 f0       	breq	.+18     	; 0x1ed8 <xQueueGenericReceive+0xd8>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1ec6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec8:	98 85       	ldd	r25, Y+8	; 0x08
    1eca:	41 96       	adiw	r24, 0x11	; 17
    1ecc:	0e 94 1c 09 	call	0x1238	; 0x1238 <xTaskRemoveFromEventList>
    1ed0:	88 23       	and	r24, r24
    1ed2:	11 f0       	breq	.+4      	; 0x1ed8 <xQueueGenericReceive+0xd8>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1ed4:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
    1ed8:	0f 90       	pop	r0
    1eda:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	74 c0       	rjmp	.+232    	; 0x1fc8 <xQueueGenericReceive+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1ee0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ee2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	21 f4       	brne	.+8      	; 0x1ef0 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1ee8:	0f 90       	pop	r0
    1eea:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	6c c0       	rjmp	.+216    	; 0x1fc8 <xQueueGenericReceive+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	88 23       	and	r24, r24
    1ef4:	31 f4       	brne	.+12     	; 0x1f02 <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	04 96       	adiw	r24, 0x04	; 4
    1efa:	0e 94 86 09 	call	0x130c	; 0x130c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    1f02:	0f 90       	pop	r0
    1f04:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1f06:	0e 94 a8 06 	call	0xd50	; 0xd50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	0f 92       	push	r0
    1f10:	8f 81       	ldd	r24, Y+7	; 0x07
    1f12:	98 85       	ldd	r25, Y+8	; 0x08
    1f14:	fc 01       	movw	r30, r24
    1f16:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f18:	8f 3f       	cpi	r24, 0xFF	; 255
    1f1a:	21 f4       	brne	.+8      	; 0x1f24 <xQueueGenericReceive+0x124>
    1f1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f1e:	98 85       	ldd	r25, Y+8	; 0x08
    1f20:	fc 01       	movw	r30, r24
    1f22:	15 8e       	std	Z+29, r1	; 0x1d
    1f24:	8f 81       	ldd	r24, Y+7	; 0x07
    1f26:	98 85       	ldd	r25, Y+8	; 0x08
    1f28:	fc 01       	movw	r30, r24
    1f2a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f2e:	21 f4       	brne	.+8      	; 0x1f38 <xQueueGenericReceive+0x138>
    1f30:	8f 81       	ldd	r24, Y+7	; 0x07
    1f32:	98 85       	ldd	r25, Y+8	; 0x08
    1f34:	fc 01       	movw	r30, r24
    1f36:	16 8e       	std	Z+30, r1	; 0x1e
    1f38:	0f 90       	pop	r0
    1f3a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1f3c:	9e 01       	movw	r18, r28
    1f3e:	25 5f       	subi	r18, 0xF5	; 245
    1f40:	3f 4f       	sbci	r19, 0xFF	; 255
    1f42:	ce 01       	movw	r24, r28
    1f44:	04 96       	adiw	r24, 0x04	; 4
    1f46:	b9 01       	movw	r22, r18
    1f48:	0e 94 a2 09 	call	0x1344	; 0x1344 <xTaskCheckForTimeOut>
    1f4c:	88 23       	and	r24, r24
    1f4e:	99 f5       	brne	.+102    	; 0x1fb6 <xQueueGenericReceive+0x1b6>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1f50:	8f 81       	ldd	r24, Y+7	; 0x07
    1f52:	98 85       	ldd	r25, Y+8	; 0x08
    1f54:	0e 94 01 12 	call	0x2402	; 0x2402 <prvIsQueueEmpty>
    1f58:	88 23       	and	r24, r24
    1f5a:	31 f1       	breq	.+76     	; 0x1fa8 <xQueueGenericReceive+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1f5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f5e:	98 85       	ldd	r25, Y+8	; 0x08
    1f60:	fc 01       	movw	r30, r24
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	61 f4       	brne	.+24     	; 0x1f82 <xQueueGenericReceive+0x182>
					{
						portENTER_CRITICAL();
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1f70:	8f 81       	ldd	r24, Y+7	; 0x07
    1f72:	98 85       	ldd	r25, Y+8	; 0x08
    1f74:	fc 01       	movw	r30, r24
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    1f7e:	0f 90       	pop	r0
    1f80:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1f82:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f84:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f86:	8f 81       	ldd	r24, Y+7	; 0x07
    1f88:	98 85       	ldd	r25, Y+8	; 0x08
    1f8a:	41 96       	adiw	r24, 0x11	; 17
    1f8c:	b9 01       	movw	r22, r18
    1f8e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1f92:	8f 81       	ldd	r24, Y+7	; 0x07
    1f94:	98 85       	ldd	r25, Y+8	; 0x08
    1f96:	0e 94 9c 11 	call	0x2338	; 0x2338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1f9a:	0e 94 b4 06 	call	0xd68	; 0xd68 <xTaskResumeAll>
    1f9e:	88 23       	and	r24, r24
    1fa0:	91 f4       	brne	.+36     	; 0x1fc6 <xQueueGenericReceive+0x1c6>
				{
					portYIELD_WITHIN_API();
    1fa2:	0e 94 49 19 	call	0x3292	; 0x3292 <vPortYield>
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <xQueueGenericReceive+0x1c6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1fa8:	8f 81       	ldd	r24, Y+7	; 0x07
    1faa:	98 85       	ldd	r25, Y+8	; 0x08
    1fac:	0e 94 9c 11 	call	0x2338	; 0x2338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1fb0:	0e 94 b4 06 	call	0xd68	; 0xd68 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    1fb4:	37 cf       	rjmp	.-402    	; 0x1e24 <xQueueGenericReceive+0x24>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1fb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb8:	98 85       	ldd	r25, Y+8	; 0x08
    1fba:	0e 94 9c 11 	call	0x2338	; 0x2338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1fbe:	0e 94 b4 06 	call	0xd68	; 0xd68 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <xQueueGenericReceive+0x1c8>
		}
	}
    1fc6:	2e cf       	rjmp	.-420    	; 0x1e24 <xQueueGenericReceive+0x24>
}
    1fc8:	2d 96       	adiw	r28, 0x0d	; 13
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	08 95       	ret

00001fda <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	28 97       	sbiw	r28, 0x08	; 8
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	9c 83       	std	Y+4, r25	; 0x04
    1ff0:	8b 83       	std	Y+3, r24	; 0x03
    1ff2:	7e 83       	std	Y+6, r23	; 0x06
    1ff4:	6d 83       	std	Y+5, r22	; 0x05
    1ff6:	58 87       	std	Y+8, r21	; 0x08
    1ff8:	4f 83       	std	Y+7, r20	; 0x07
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1ffa:	1a 82       	std	Y+2, r1	; 0x02
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	fc 01       	movw	r30, r24
    2002:	82 8d       	ldd	r24, Z+26	; 0x1a
    2004:	88 23       	and	r24, r24
    2006:	d9 f1       	breq	.+118    	; 0x207e <xQueueReceiveFromISR+0xa4>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2008:	2d 81       	ldd	r18, Y+5	; 0x05
    200a:	3e 81       	ldd	r19, Y+6	; 0x06
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	9c 81       	ldd	r25, Y+4	; 0x04
    2010:	b9 01       	movw	r22, r18
    2012:	0e 94 4b 11 	call	0x2296	; 0x2296 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	fc 01       	movw	r30, r24
    201c:	82 8d       	ldd	r24, Z+26	; 0x1a
    201e:	2f ef       	ldi	r18, 0xFF	; 255
    2020:	28 0f       	add	r18, r24
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	fc 01       	movw	r30, r24
    2028:	22 8f       	std	Z+26, r18	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	fc 01       	movw	r30, r24
    2030:	85 8d       	ldd	r24, Z+29	; 0x1d
    2032:	8f 3f       	cpi	r24, 0xFF	; 255
    2034:	b9 f4       	brne	.+46     	; 0x2064 <xQueueReceiveFromISR+0x8a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	fc 01       	movw	r30, r24
    203c:	80 85       	ldd	r24, Z+8	; 0x08
    203e:	88 23       	and	r24, r24
    2040:	d9 f0       	breq	.+54     	; 0x2078 <xQueueReceiveFromISR+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	08 96       	adiw	r24, 0x08	; 8
    2048:	0e 94 1c 09 	call	0x1238	; 0x1238 <xTaskRemoveFromEventList>
    204c:	88 23       	and	r24, r24
    204e:	a1 f0       	breq	.+40     	; 0x2078 <xQueueReceiveFromISR+0x9e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    2050:	8f 81       	ldd	r24, Y+7	; 0x07
    2052:	98 85       	ldd	r25, Y+8	; 0x08
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	81 f0       	breq	.+32     	; 0x2078 <xQueueReceiveFromISR+0x9e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    2058:	8f 81       	ldd	r24, Y+7	; 0x07
    205a:	98 85       	ldd	r25, Y+8	; 0x08
    205c:	21 e0       	ldi	r18, 0x01	; 1
    205e:	fc 01       	movw	r30, r24
    2060:	20 83       	st	Z, r18
    2062:	0a c0       	rjmp	.+20     	; 0x2078 <xQueueReceiveFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	fc 01       	movw	r30, r24
    206a:	85 8d       	ldd	r24, Z+29	; 0x1d
    206c:	21 e0       	ldi	r18, 0x01	; 1
    206e:	28 0f       	add	r18, r24
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	fc 01       	movw	r30, r24
    2076:	25 8f       	std	Z+29, r18	; 0x1d
			}

			xReturn = pdPASS;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	01 c0       	rjmp	.+2      	; 0x2080 <xQueueReceiveFromISR+0xa6>
		}
		else
		{
			xReturn = pdFAIL;
    207e:	19 82       	std	Y+1, r1	; 0x01
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2080:	89 81       	ldd	r24, Y+1	; 0x01
}
    2082:	28 96       	adiw	r28, 0x08	; 8
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	08 95       	ret

00002094 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	00 d0       	rcall	.+0      	; 0x209a <uxQueueMessagesWaiting+0x6>
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	9b 83       	std	Y+3, r25	; 0x03
    20a0:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	9b 81       	ldd	r25, Y+3	; 0x03
    20ac:	fc 01       	movw	r30, r24
    20ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    20b0:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    20b2:	0f 90       	pop	r0
    20b4:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	08 95       	ret

000020c4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <uxQueueMessagesWaitingFromISR+0x6>
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	9b 83       	std	Y+3, r25	; 0x03
    20d0:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	9b 81       	ldd	r25, Y+3	; 0x03
    20d6:	fc 01       	movw	r30, r24
    20d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    20da:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	08 95       	ret

000020ea <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	1f 92       	push	r1
    20f0:	1f 92       	push	r1
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	9a 83       	std	Y+2, r25	; 0x02
    20f8:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	9a 81       	ldd	r25, Y+2	; 0x02
    20fe:	fc 01       	movw	r30, r24
    2100:	80 81       	ld	r24, Z
    2102:	91 81       	ldd	r25, Z+1	; 0x01
    2104:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <vPortFree>
	vPortFree( pxQueue );
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <vPortFree>
}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	08 95       	ret

0000211a <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	00 d0       	rcall	.+0      	; 0x2120 <prvCopyDataToQueue+0x6>
    2120:	1f 92       	push	r1
    2122:	1f 92       	push	r1
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	7c 83       	std	Y+4, r23	; 0x04
    212e:	6b 83       	std	Y+3, r22	; 0x03
    2130:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	fc 01       	movw	r30, r24
    2138:	84 8d       	ldd	r24, Z+28	; 0x1c
    213a:	88 23       	and	r24, r24
    213c:	a9 f4       	brne	.+42     	; 0x2168 <prvCopyDataToQueue+0x4e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	fc 01       	movw	r30, r24
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	09 f0       	breq	.+2      	; 0x214e <prvCopyDataToQueue+0x34>
    214c:	92 c0       	rjmp	.+292    	; 0x2272 <__stack+0x73>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	9a 81       	ldd	r25, Y+2	; 0x02
    2152:	fc 01       	movw	r30, r24
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	fc 01       	movw	r30, r24
    2162:	13 82       	std	Z+3, r1	; 0x03
    2164:	12 82       	std	Z+2, r1	; 0x02
    2166:	85 c0       	rjmp	.+266    	; 0x2272 <__stack+0x73>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	88 23       	and	r24, r24
    216c:	d9 f5       	brne	.+118    	; 0x21e4 <prvCopyDataToQueue+0xca>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	fc 01       	movw	r30, r24
    2174:	84 8d       	ldd	r24, Z+28	; 0x1c
    2176:	48 2f       	mov	r20, r24
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	fc 01       	movw	r30, r24
    2180:	84 81       	ldd	r24, Z+4	; 0x04
    2182:	95 81       	ldd	r25, Z+5	; 0x05
    2184:	2b 81       	ldd	r18, Y+3	; 0x03
    2186:	3c 81       	ldd	r19, Y+4	; 0x04
    2188:	b9 01       	movw	r22, r18
    218a:	0e 94 4a 28 	call	0x5094	; 0x5094 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	fc 01       	movw	r30, r24
    2194:	24 81       	ldd	r18, Z+4	; 0x04
    2196:	35 81       	ldd	r19, Z+5	; 0x05
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	fc 01       	movw	r30, r24
    219e:	84 8d       	ldd	r24, Z+28	; 0x1c
    21a0:	88 2f       	mov	r24, r24
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	28 0f       	add	r18, r24
    21a6:	39 1f       	adc	r19, r25
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	9a 81       	ldd	r25, Y+2	; 0x02
    21ac:	fc 01       	movw	r30, r24
    21ae:	35 83       	std	Z+5, r19	; 0x05
    21b0:	24 83       	std	Z+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	9a 81       	ldd	r25, Y+2	; 0x02
    21b6:	fc 01       	movw	r30, r24
    21b8:	24 81       	ldd	r18, Z+4	; 0x04
    21ba:	35 81       	ldd	r19, Z+5	; 0x05
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	9a 81       	ldd	r25, Y+2	; 0x02
    21c0:	fc 01       	movw	r30, r24
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	28 17       	cp	r18, r24
    21c8:	39 07       	cpc	r19, r25
    21ca:	08 f4       	brcc	.+2      	; 0x21ce <prvCopyDataToQueue+0xb4>
    21cc:	52 c0       	rjmp	.+164    	; 0x2272 <__stack+0x73>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	9a 81       	ldd	r25, Y+2	; 0x02
    21d2:	fc 01       	movw	r30, r24
    21d4:	20 81       	ld	r18, Z
    21d6:	31 81       	ldd	r19, Z+1	; 0x01
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	9a 81       	ldd	r25, Y+2	; 0x02
    21dc:	fc 01       	movw	r30, r24
    21de:	35 83       	std	Z+5, r19	; 0x05
    21e0:	24 83       	std	Z+4, r18	; 0x04
    21e2:	47 c0       	rjmp	.+142    	; 0x2272 <__stack+0x73>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	9a 81       	ldd	r25, Y+2	; 0x02
    21e8:	fc 01       	movw	r30, r24
    21ea:	84 8d       	ldd	r24, Z+28	; 0x1c
    21ec:	48 2f       	mov	r20, r24
    21ee:	50 e0       	ldi	r21, 0x00	; 0
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	fc 01       	movw	r30, r24
    21f6:	86 81       	ldd	r24, Z+6	; 0x06
    21f8:	97 81       	ldd	r25, Z+7	; 0x07
    21fa:	2b 81       	ldd	r18, Y+3	; 0x03
    21fc:	3c 81       	ldd	r19, Y+4	; 0x04
    21fe:	b9 01       	movw	r22, r18
    2200:	0e 94 4a 28 	call	0x5094	; 0x5094 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	fc 01       	movw	r30, r24
    220a:	26 81       	ldd	r18, Z+6	; 0x06
    220c:	37 81       	ldd	r19, Z+7	; 0x07
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	fc 01       	movw	r30, r24
    2214:	84 8d       	ldd	r24, Z+28	; 0x1c
    2216:	88 2f       	mov	r24, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	91 95       	neg	r25
    221c:	81 95       	neg	r24
    221e:	91 09       	sbc	r25, r1
    2220:	28 0f       	add	r18, r24
    2222:	39 1f       	adc	r19, r25
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	fc 01       	movw	r30, r24
    222a:	37 83       	std	Z+7, r19	; 0x07
    222c:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	fc 01       	movw	r30, r24
    2234:	26 81       	ldd	r18, Z+6	; 0x06
    2236:	37 81       	ldd	r19, Z+7	; 0x07
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	9a 81       	ldd	r25, Y+2	; 0x02
    223c:	fc 01       	movw	r30, r24
    223e:	80 81       	ld	r24, Z
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	28 17       	cp	r18, r24
    2244:	39 07       	cpc	r19, r25
    2246:	a8 f4       	brcc	.+42     	; 0x2272 <__stack+0x73>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	fc 01       	movw	r30, r24
    224e:	22 81       	ldd	r18, Z+2	; 0x02
    2250:	33 81       	ldd	r19, Z+3	; 0x03
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	fc 01       	movw	r30, r24
    2258:	84 8d       	ldd	r24, Z+28	; 0x1c
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	91 95       	neg	r25
    2260:	81 95       	neg	r24
    2262:	91 09       	sbc	r25, r1
    2264:	28 0f       	add	r18, r24
    2266:	39 1f       	adc	r19, r25
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	fc 01       	movw	r30, r24
    226e:	37 83       	std	Z+7, r19	; 0x07
    2270:	26 83       	std	Z+6, r18	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	fc 01       	movw	r30, r24
    2278:	82 8d       	ldd	r24, Z+26	; 0x1a
    227a:	21 e0       	ldi	r18, 0x01	; 1
    227c:	28 0f       	add	r18, r24
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	9a 81       	ldd	r25, Y+2	; 0x02
    2282:	fc 01       	movw	r30, r24
    2284:	22 8f       	std	Z+26, r18	; 0x1a
}
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	08 95       	ret

00002296 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	00 d0       	rcall	.+0      	; 0x229c <prvCopyDataFromQueue+0x6>
    229c:	1f 92       	push	r1
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	7c 83       	std	Y+4, r23	; 0x04
    22a8:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	9a 81       	ldd	r25, Y+2	; 0x02
    22ae:	fc 01       	movw	r30, r24
    22b0:	80 81       	ld	r24, Z
    22b2:	91 81       	ldd	r25, Z+1	; 0x01
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	c9 f1       	breq	.+114    	; 0x232a <prvCopyDataFromQueue+0x94>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	fc 01       	movw	r30, r24
    22be:	26 81       	ldd	r18, Z+6	; 0x06
    22c0:	37 81       	ldd	r19, Z+7	; 0x07
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02
    22c6:	fc 01       	movw	r30, r24
    22c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    22ca:	88 2f       	mov	r24, r24
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	28 0f       	add	r18, r24
    22d0:	39 1f       	adc	r19, r25
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	9a 81       	ldd	r25, Y+2	; 0x02
    22d6:	fc 01       	movw	r30, r24
    22d8:	37 83       	std	Z+7, r19	; 0x07
    22da:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	9a 81       	ldd	r25, Y+2	; 0x02
    22e0:	fc 01       	movw	r30, r24
    22e2:	26 81       	ldd	r18, Z+6	; 0x06
    22e4:	37 81       	ldd	r19, Z+7	; 0x07
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	fc 01       	movw	r30, r24
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	28 17       	cp	r18, r24
    22f2:	39 07       	cpc	r19, r25
    22f4:	50 f0       	brcs	.+20     	; 0x230a <prvCopyDataFromQueue+0x74>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	9a 81       	ldd	r25, Y+2	; 0x02
    22fa:	fc 01       	movw	r30, r24
    22fc:	20 81       	ld	r18, Z
    22fe:	31 81       	ldd	r19, Z+1	; 0x01
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	9a 81       	ldd	r25, Y+2	; 0x02
    2304:	fc 01       	movw	r30, r24
    2306:	37 83       	std	Z+7, r19	; 0x07
    2308:	26 83       	std	Z+6, r18	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	9a 81       	ldd	r25, Y+2	; 0x02
    230e:	fc 01       	movw	r30, r24
    2310:	84 8d       	ldd	r24, Z+28	; 0x1c
    2312:	48 2f       	mov	r20, r24
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	fc 01       	movw	r30, r24
    231c:	26 81       	ldd	r18, Z+6	; 0x06
    231e:	37 81       	ldd	r19, Z+7	; 0x07
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	b9 01       	movw	r22, r18
    2326:	0e 94 4a 28 	call	0x5094	; 0x5094 <memcpy>
	}
}
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	08 95       	ret

00002338 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	1f 92       	push	r1
    233e:	1f 92       	push	r1
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	9a 83       	std	Y+2, r25	; 0x02
    2346:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    234e:	1b c0       	rjmp	.+54     	; 0x2386 <prvUnlockQueue+0x4e>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	fc 01       	movw	r30, r24
    2356:	81 89       	ldd	r24, Z+17	; 0x11
    2358:	88 23       	and	r24, r24
    235a:	a1 f0       	breq	.+40     	; 0x2384 <prvUnlockQueue+0x4c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	9a 81       	ldd	r25, Y+2	; 0x02
    2360:	41 96       	adiw	r24, 0x11	; 17
    2362:	0e 94 1c 09 	call	0x1238	; 0x1238 <xTaskRemoveFromEventList>
    2366:	88 23       	and	r24, r24
    2368:	11 f0       	breq	.+4      	; 0x236e <prvUnlockQueue+0x36>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    236a:	0e 94 11 0a 	call	0x1422	; 0x1422 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	fc 01       	movw	r30, r24
    2374:	86 8d       	ldd	r24, Z+30	; 0x1e
    2376:	2f ef       	ldi	r18, 0xFF	; 255
    2378:	28 0f       	add	r18, r24
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	fc 01       	movw	r30, r24
    2380:	26 8f       	std	Z+30, r18	; 0x1e
    2382:	01 c0       	rjmp	.+2      	; 0x2386 <prvUnlockQueue+0x4e>
			}
			else
			{
				break;
    2384:	06 c0       	rjmp	.+12     	; 0x2392 <prvUnlockQueue+0x5a>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	fc 01       	movw	r30, r24
    238c:	86 8d       	ldd	r24, Z+30	; 0x1e
    238e:	18 16       	cp	r1, r24
    2390:	fc f2       	brlt	.-66     	; 0x2350 <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	2f ef       	ldi	r18, 0xFF	; 255
    2398:	fc 01       	movw	r30, r24
    239a:	26 8f       	std	Z+30, r18	; 0x1e
	}
	taskEXIT_CRITICAL();
    239c:	0f 90       	pop	r0
    239e:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    23a6:	1b c0       	rjmp	.+54     	; 0x23de <prvUnlockQueue+0xa6>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	fc 01       	movw	r30, r24
    23ae:	80 85       	ldd	r24, Z+8	; 0x08
    23b0:	88 23       	and	r24, r24
    23b2:	a1 f0       	breq	.+40     	; 0x23dc <prvUnlockQueue+0xa4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	08 96       	adiw	r24, 0x08	; 8
    23ba:	0e 94 1c 09 	call	0x1238	; 0x1238 <xTaskRemoveFromEventList>
    23be:	88 23       	and	r24, r24
    23c0:	11 f0       	breq	.+4      	; 0x23c6 <prvUnlockQueue+0x8e>
				{
					vTaskMissedYield();
    23c2:	0e 94 11 0a 	call	0x1422	; 0x1422 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ca:	fc 01       	movw	r30, r24
    23cc:	85 8d       	ldd	r24, Z+29	; 0x1d
    23ce:	2f ef       	ldi	r18, 0xFF	; 255
    23d0:	28 0f       	add	r18, r24
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	fc 01       	movw	r30, r24
    23d8:	25 8f       	std	Z+29, r18	; 0x1d
    23da:	01 c0       	rjmp	.+2      	; 0x23de <prvUnlockQueue+0xa6>
			}
			else
			{
				break;
    23dc:	06 c0       	rjmp	.+12     	; 0x23ea <prvUnlockQueue+0xb2>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	fc 01       	movw	r30, r24
    23e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    23e6:	18 16       	cp	r1, r24
    23e8:	fc f2       	brlt	.-66     	; 0x23a8 <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	9a 81       	ldd	r25, Y+2	; 0x02
    23ee:	2f ef       	ldi	r18, 0xFF	; 255
    23f0:	fc 01       	movw	r30, r24
    23f2:	25 8f       	std	Z+29, r18	; 0x1d
	}
	taskEXIT_CRITICAL();
    23f4:	0f 90       	pop	r0
    23f6:	0f be       	out	0x3f, r0	; 63
}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	08 95       	ret

00002402 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	00 d0       	rcall	.+0      	; 0x2408 <prvIsQueueEmpty+0x6>
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	9b 83       	std	Y+3, r25	; 0x03
    240e:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	9b 81       	ldd	r25, Y+3	; 0x03
    241a:	fc 01       	movw	r30, r24
    241c:	92 8d       	ldd	r25, Z+26	; 0x1a
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	99 23       	and	r25, r25
    2422:	09 f0       	breq	.+2      	; 0x2426 <prvIsQueueEmpty+0x24>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2428:	0f 90       	pop	r0
    242a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    242c:	89 81       	ldd	r24, Y+1	; 0x01
}
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	08 95       	ret

0000243a <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    243a:	cf 93       	push	r28
    243c:	df 93       	push	r29
    243e:	00 d0       	rcall	.+0      	; 0x2440 <xQueueIsQueueEmptyFromISR+0x6>
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	9b 83       	std	Y+3, r25	; 0x03
    2446:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	9b 81       	ldd	r25, Y+3	; 0x03
    244c:	fc 01       	movw	r30, r24
    244e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	99 23       	and	r25, r25
    2454:	09 f0       	breq	.+2      	; 0x2458 <xQueueIsQueueEmptyFromISR+0x1e>
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    245a:	89 81       	ldd	r24, Y+1	; 0x01
}
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	08 95       	ret

00002468 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	00 d0       	rcall	.+0      	; 0x246e <prvIsQueueFull+0x6>
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	9b 83       	std	Y+3, r25	; 0x03
    2474:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	9b 81       	ldd	r25, Y+3	; 0x03
    2480:	fc 01       	movw	r30, r24
    2482:	22 8d       	ldd	r18, Z+26	; 0x1a
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	9b 81       	ldd	r25, Y+3	; 0x03
    2488:	fc 01       	movw	r30, r24
    248a:	93 8d       	ldd	r25, Z+27	; 0x1b
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	29 17       	cp	r18, r25
    2490:	09 f0       	breq	.+2      	; 0x2494 <prvIsQueueFull+0x2c>
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2496:	0f 90       	pop	r0
    2498:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    249a:	89 81       	ldd	r24, Y+1	; 0x01
}
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	08 95       	ret

000024a8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <xQueueIsQueueFullFromISR+0x6>
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	9b 83       	std	Y+3, r25	; 0x03
    24b4:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ba:	fc 01       	movw	r30, r24
    24bc:	22 8d       	ldd	r18, Z+26	; 0x1a
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	9b 81       	ldd	r25, Y+3	; 0x03
    24c2:	fc 01       	movw	r30, r24
    24c4:	93 8d       	ldd	r25, Z+27	; 0x1b
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	29 17       	cp	r18, r25
    24ca:	09 f0       	breq	.+2      	; 0x24ce <xQueueIsQueueFullFromISR+0x26>
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	08 95       	ret

000024de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	1f 92       	push	r1
    24e4:	1f 92       	push	r1
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	9a 83       	std	Y+2, r25	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	9a 81       	ldd	r25, Y+2	; 0x02
    24f2:	9c 01       	movw	r18, r24
    24f4:	2d 5f       	subi	r18, 0xFD	; 253
    24f6:	3f 4f       	sbci	r19, 0xFF	; 255
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	9a 81       	ldd	r25, Y+2	; 0x02
    24fc:	fc 01       	movw	r30, r24
    24fe:	32 83       	std	Z+2, r19	; 0x02
    2500:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	9a 81       	ldd	r25, Y+2	; 0x02
    2506:	2f ef       	ldi	r18, 0xFF	; 255
    2508:	3f ef       	ldi	r19, 0xFF	; 255
    250a:	fc 01       	movw	r30, r24
    250c:	34 83       	std	Z+4, r19	; 0x04
    250e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	9c 01       	movw	r18, r24
    2516:	2d 5f       	subi	r18, 0xFD	; 253
    2518:	3f 4f       	sbci	r19, 0xFF	; 255
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	9a 81       	ldd	r25, Y+2	; 0x02
    251e:	fc 01       	movw	r30, r24
    2520:	36 83       	std	Z+6, r19	; 0x06
    2522:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
    2528:	9c 01       	movw	r18, r24
    252a:	2d 5f       	subi	r18, 0xFD	; 253
    252c:	3f 4f       	sbci	r19, 0xFF	; 255
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	fc 01       	movw	r30, r24
    2534:	30 87       	std	Z+8, r19	; 0x08
    2536:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	9a 81       	ldd	r25, Y+2	; 0x02
    253c:	fc 01       	movw	r30, r24
    253e:	10 82       	st	Z, r1
}
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	08 95       	ret

0000254a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	1f 92       	push	r1
    2550:	1f 92       	push	r1
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	9a 83       	std	Y+2, r25	; 0x02
    2558:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	9a 81       	ldd	r25, Y+2	; 0x02
    255e:	fc 01       	movw	r30, r24
    2560:	11 86       	std	Z+9, r1	; 0x09
    2562:	10 86       	std	Z+8, r1	; 0x08
}
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	08 95       	ret

0000256e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	00 d0       	rcall	.+0      	; 0x2574 <vListInsertEnd+0x6>
    2574:	00 d0       	rcall	.+0      	; 0x2576 <vListInsertEnd+0x8>
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	9c 83       	std	Y+4, r25	; 0x04
    257c:	8b 83       	std	Y+3, r24	; 0x03
    257e:	7e 83       	std	Y+6, r23	; 0x06
    2580:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	9c 81       	ldd	r25, Y+4	; 0x04
    2586:	fc 01       	movw	r30, r24
    2588:	81 81       	ldd	r24, Z+1	; 0x01
    258a:	92 81       	ldd	r25, Z+2	; 0x02
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	9a 81       	ldd	r25, Y+2	; 0x02
    2594:	fc 01       	movw	r30, r24
    2596:	22 81       	ldd	r18, Z+2	; 0x02
    2598:	33 81       	ldd	r19, Z+3	; 0x03
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	fc 01       	movw	r30, r24
    25a0:	33 83       	std	Z+3, r19	; 0x03
    25a2:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	fc 01       	movw	r30, r24
    25aa:	21 81       	ldd	r18, Z+1	; 0x01
    25ac:	32 81       	ldd	r19, Z+2	; 0x02
    25ae:	8d 81       	ldd	r24, Y+5	; 0x05
    25b0:	9e 81       	ldd	r25, Y+6	; 0x06
    25b2:	fc 01       	movw	r30, r24
    25b4:	35 83       	std	Z+5, r19	; 0x05
    25b6:	24 83       	std	Z+4, r18	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	fc 01       	movw	r30, r24
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	2d 81       	ldd	r18, Y+5	; 0x05
    25c4:	3e 81       	ldd	r19, Y+6	; 0x06
    25c6:	fc 01       	movw	r30, r24
    25c8:	35 83       	std	Z+5, r19	; 0x05
    25ca:	24 83       	std	Z+4, r18	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9a 81       	ldd	r25, Y+2	; 0x02
    25d0:	2d 81       	ldd	r18, Y+5	; 0x05
    25d2:	3e 81       	ldd	r19, Y+6	; 0x06
    25d4:	fc 01       	movw	r30, r24
    25d6:	33 83       	std	Z+3, r19	; 0x03
    25d8:	22 83       	std	Z+2, r18	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    25da:	8b 81       	ldd	r24, Y+3	; 0x03
    25dc:	9c 81       	ldd	r25, Y+4	; 0x04
    25de:	2d 81       	ldd	r18, Y+5	; 0x05
    25e0:	3e 81       	ldd	r19, Y+6	; 0x06
    25e2:	fc 01       	movw	r30, r24
    25e4:	32 83       	std	Z+2, r19	; 0x02
    25e6:	21 83       	std	Z+1, r18	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	2b 81       	ldd	r18, Y+3	; 0x03
    25ee:	3c 81       	ldd	r19, Y+4	; 0x04
    25f0:	fc 01       	movw	r30, r24
    25f2:	31 87       	std	Z+9, r19	; 0x09
    25f4:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	fc 01       	movw	r30, r24
    25fc:	80 81       	ld	r24, Z
    25fe:	21 e0       	ldi	r18, 0x01	; 1
    2600:	28 0f       	add	r18, r24
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	9c 81       	ldd	r25, Y+4	; 0x04
    2606:	fc 01       	movw	r30, r24
    2608:	20 83       	st	Z, r18
}
    260a:	26 96       	adiw	r28, 0x06	; 6
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	28 97       	sbiw	r28, 0x08	; 8
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
    2634:	78 87       	std	Y+8, r23	; 0x08
    2636:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2638:	8f 81       	ldd	r24, Y+7	; 0x07
    263a:	98 85       	ldd	r25, Y+8	; 0x08
    263c:	fc 01       	movw	r30, r24
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	9c 83       	std	Y+4, r25	; 0x04
    2644:	8b 83       	std	Y+3, r24	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	8f 3f       	cpi	r24, 0xFF	; 255
    264c:	ff ef       	ldi	r31, 0xFF	; 255
    264e:	9f 07       	cpc	r25, r31
    2650:	41 f4       	brne	.+16     	; 0x2662 <vListInsert+0x46>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	9e 81       	ldd	r25, Y+6	; 0x06
    2656:	fc 01       	movw	r30, r24
    2658:	87 81       	ldd	r24, Z+7	; 0x07
    265a:	90 85       	ldd	r25, Z+8	; 0x08
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	1a c0       	rjmp	.+52     	; 0x2696 <vListInsert+0x7a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	03 96       	adiw	r24, 0x03	; 3
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	07 c0       	rjmp	.+14     	; 0x267c <vListInsert+0x60>
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	9a 81       	ldd	r25, Y+2	; 0x02
    2672:	fc 01       	movw	r30, r24
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	9a 81       	ldd	r25, Y+2	; 0x02
    2680:	fc 01       	movw	r30, r24
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	fc 01       	movw	r30, r24
    2688:	20 81       	ld	r18, Z
    268a:	31 81       	ldd	r19, Z+1	; 0x01
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	82 17       	cp	r24, r18
    2692:	93 07       	cpc	r25, r19
    2694:	60 f7       	brcc	.-40     	; 0x266e <vListInsert+0x52>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	fc 01       	movw	r30, r24
    269c:	22 81       	ldd	r18, Z+2	; 0x02
    269e:	33 81       	ldd	r19, Z+3	; 0x03
    26a0:	8f 81       	ldd	r24, Y+7	; 0x07
    26a2:	98 85       	ldd	r25, Y+8	; 0x08
    26a4:	fc 01       	movw	r30, r24
    26a6:	33 83       	std	Z+3, r19	; 0x03
    26a8:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    26aa:	8f 81       	ldd	r24, Y+7	; 0x07
    26ac:	98 85       	ldd	r25, Y+8	; 0x08
    26ae:	fc 01       	movw	r30, r24
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	93 81       	ldd	r25, Z+3	; 0x03
    26b4:	2f 81       	ldd	r18, Y+7	; 0x07
    26b6:	38 85       	ldd	r19, Y+8	; 0x08
    26b8:	fc 01       	movw	r30, r24
    26ba:	35 83       	std	Z+5, r19	; 0x05
    26bc:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    26be:	8f 81       	ldd	r24, Y+7	; 0x07
    26c0:	98 85       	ldd	r25, Y+8	; 0x08
    26c2:	29 81       	ldd	r18, Y+1	; 0x01
    26c4:	3a 81       	ldd	r19, Y+2	; 0x02
    26c6:	fc 01       	movw	r30, r24
    26c8:	35 83       	std	Z+5, r19	; 0x05
    26ca:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	2f 81       	ldd	r18, Y+7	; 0x07
    26d2:	38 85       	ldd	r19, Y+8	; 0x08
    26d4:	fc 01       	movw	r30, r24
    26d6:	33 83       	std	Z+3, r19	; 0x03
    26d8:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    26da:	8f 81       	ldd	r24, Y+7	; 0x07
    26dc:	98 85       	ldd	r25, Y+8	; 0x08
    26de:	2d 81       	ldd	r18, Y+5	; 0x05
    26e0:	3e 81       	ldd	r19, Y+6	; 0x06
    26e2:	fc 01       	movw	r30, r24
    26e4:	31 87       	std	Z+9, r19	; 0x09
    26e6:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	9e 81       	ldd	r25, Y+6	; 0x06
    26ec:	fc 01       	movw	r30, r24
    26ee:	80 81       	ld	r24, Z
    26f0:	21 e0       	ldi	r18, 0x01	; 1
    26f2:	28 0f       	add	r18, r24
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	9e 81       	ldd	r25, Y+6	; 0x06
    26f8:	fc 01       	movw	r30, r24
    26fa:	20 83       	st	Z, r18
}
    26fc:	28 96       	adiw	r28, 0x08	; 8
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	08 95       	ret

0000270e <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	00 d0       	rcall	.+0      	; 0x2714 <uxListRemove+0x6>
    2714:	1f 92       	push	r1
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	9c 83       	std	Y+4, r25	; 0x04
    271c:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	9c 81       	ldd	r25, Y+4	; 0x04
    2722:	fc 01       	movw	r30, r24
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	2b 81       	ldd	r18, Y+3	; 0x03
    272a:	3c 81       	ldd	r19, Y+4	; 0x04
    272c:	f9 01       	movw	r30, r18
    272e:	24 81       	ldd	r18, Z+4	; 0x04
    2730:	35 81       	ldd	r19, Z+5	; 0x05
    2732:	fc 01       	movw	r30, r24
    2734:	35 83       	std	Z+5, r19	; 0x05
    2736:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	fc 01       	movw	r30, r24
    273e:	84 81       	ldd	r24, Z+4	; 0x04
    2740:	95 81       	ldd	r25, Z+5	; 0x05
    2742:	2b 81       	ldd	r18, Y+3	; 0x03
    2744:	3c 81       	ldd	r19, Y+4	; 0x04
    2746:	f9 01       	movw	r30, r18
    2748:	22 81       	ldd	r18, Z+2	; 0x02
    274a:	33 81       	ldd	r19, Z+3	; 0x03
    274c:	fc 01       	movw	r30, r24
    274e:	33 83       	std	Z+3, r19	; 0x03
    2750:	22 83       	std	Z+2, r18	; 0x02

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2752:	8b 81       	ldd	r24, Y+3	; 0x03
    2754:	9c 81       	ldd	r25, Y+4	; 0x04
    2756:	fc 01       	movw	r30, r24
    2758:	80 85       	ldd	r24, Z+8	; 0x08
    275a:	91 85       	ldd	r25, Z+9	; 0x09
    275c:	9a 83       	std	Y+2, r25	; 0x02
    275e:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	9a 81       	ldd	r25, Y+2	; 0x02
    2764:	fc 01       	movw	r30, r24
    2766:	21 81       	ldd	r18, Z+1	; 0x01
    2768:	32 81       	ldd	r19, Z+2	; 0x02
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	9c 81       	ldd	r25, Y+4	; 0x04
    276e:	28 17       	cp	r18, r24
    2770:	39 07       	cpc	r19, r25
    2772:	51 f4       	brne	.+20     	; 0x2788 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	9c 81       	ldd	r25, Y+4	; 0x04
    2778:	fc 01       	movw	r30, r24
    277a:	24 81       	ldd	r18, Z+4	; 0x04
    277c:	35 81       	ldd	r19, Z+5	; 0x05
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	9a 81       	ldd	r25, Y+2	; 0x02
    2782:	fc 01       	movw	r30, r24
    2784:	32 83       	std	Z+2, r19	; 0x02
    2786:	21 83       	std	Z+1, r18	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    2788:	8b 81       	ldd	r24, Y+3	; 0x03
    278a:	9c 81       	ldd	r25, Y+4	; 0x04
    278c:	fc 01       	movw	r30, r24
    278e:	11 86       	std	Z+9, r1	; 0x09
    2790:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	9a 81       	ldd	r25, Y+2	; 0x02
    2796:	fc 01       	movw	r30, r24
    2798:	80 81       	ld	r24, Z
    279a:	2f ef       	ldi	r18, 0xFF	; 255
    279c:	28 0f       	add	r18, r24
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	fc 01       	movw	r30, r24
    27a4:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	9a 81       	ldd	r25, Y+2	; 0x02
    27aa:	fc 01       	movw	r30, r24
    27ac:	80 81       	ld	r24, Z
}
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	08 95       	ret

000027bc <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	27 97       	sbiw	r28, 0x07	; 7
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	9d 83       	std	Y+5, r25	; 0x05
    27d2:	8c 83       	std	Y+4, r24	; 0x04
    27d4:	6e 83       	std	Y+6, r22	; 0x06
    27d6:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    27d8:	8a e1       	ldi	r24, 0x1A	; 26
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 94 d6 16 	call	0x2dac	; 0x2dac <pvPortMalloc>
    27e0:	9b 83       	std	Y+3, r25	; 0x03
    27e2:	8a 83       	std	Y+2, r24	; 0x02
	if( pxCoRoutine )
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	9b 81       	ldd	r25, Y+3	; 0x03
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	09 f4       	brne	.+2      	; 0x27ee <xCoRoutineCreate+0x32>
    27ec:	77 c0       	rjmp	.+238    	; 0x28dc <xCoRoutineCreate+0x120>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    27ee:	80 91 8b 02 	lds	r24, 0x028B
    27f2:	90 91 8c 02 	lds	r25, 0x028C
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	41 f4       	brne	.+16     	; 0x280a <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	9b 81       	ldd	r25, Y+3	; 0x03
    27fe:	90 93 8c 02 	sts	0x028C, r25
    2802:	80 93 8b 02 	sts	0x028B, r24
			prvInitialiseCoRoutineLists();
    2806:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    280a:	8e 81       	ldd	r24, Y+6	; 0x06
    280c:	82 30       	cpi	r24, 0x02	; 2
    280e:	10 f0       	brcs	.+4      	; 0x2814 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	9b 81       	ldd	r25, Y+3	; 0x03
    2818:	fc 01       	movw	r30, r24
    281a:	11 8e       	std	Z+25, r1	; 0x19
    281c:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	9b 81       	ldd	r25, Y+3	; 0x03
    2822:	2e 81       	ldd	r18, Y+6	; 0x06
    2824:	fc 01       	movw	r30, r24
    2826:	26 8b       	std	Z+22, r18	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	9b 81       	ldd	r25, Y+3	; 0x03
    282c:	2f 81       	ldd	r18, Y+7	; 0x07
    282e:	fc 01       	movw	r30, r24
    2830:	27 8b       	std	Z+23, r18	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	9b 81       	ldd	r25, Y+3	; 0x03
    2836:	2c 81       	ldd	r18, Y+4	; 0x04
    2838:	3d 81       	ldd	r19, Y+5	; 0x05
    283a:	fc 01       	movw	r30, r24
    283c:	31 83       	std	Z+1, r19	; 0x01
    283e:	20 83       	st	Z, r18

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	9b 81       	ldd	r25, Y+3	; 0x03
    2844:	02 96       	adiw	r24, 0x02	; 2
    2846:	0e 94 a5 12 	call	0x254a	; 0x254a <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	9b 81       	ldd	r25, Y+3	; 0x03
    284e:	0c 96       	adiw	r24, 0x0c	; 12
    2850:	0e 94 a5 12 	call	0x254a	; 0x254a <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	9b 81       	ldd	r25, Y+3	; 0x03
    2858:	2a 81       	ldd	r18, Y+2	; 0x02
    285a:	3b 81       	ldd	r19, Y+3	; 0x03
    285c:	fc 01       	movw	r30, r24
    285e:	31 87       	std	Z+9, r19	; 0x09
    2860:	20 87       	std	Z+8, r18	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	9b 81       	ldd	r25, Y+3	; 0x03
    2866:	2a 81       	ldd	r18, Y+2	; 0x02
    2868:	3b 81       	ldd	r19, Y+3	; 0x03
    286a:	fc 01       	movw	r30, r24
    286c:	33 8b       	std	Z+19, r19	; 0x13
    286e:	22 8b       	std	Z+18, r18	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2870:	8e 81       	ldd	r24, Y+6	; 0x06
    2872:	88 2f       	mov	r24, r24
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	24 e0       	ldi	r18, 0x04	; 4
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	28 1b       	sub	r18, r24
    287c:	39 0b       	sbc	r19, r25
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	9b 81       	ldd	r25, Y+3	; 0x03
    2882:	fc 01       	movw	r30, r24
    2884:	35 87       	std	Z+13, r19	; 0x0d
    2886:	24 87       	std	Z+12, r18	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	9b 81       	ldd	r25, Y+3	; 0x03
    288c:	fc 01       	movw	r30, r24
    288e:	96 89       	ldd	r25, Z+22	; 0x16
    2890:	80 91 be 02 	lds	r24, 0x02BE
    2894:	89 17       	cp	r24, r25
    2896:	30 f4       	brcc	.+12     	; 0x28a4 <xCoRoutineCreate+0xe8>
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	9b 81       	ldd	r25, Y+3	; 0x03
    289c:	fc 01       	movw	r30, r24
    289e:	86 89       	ldd	r24, Z+22	; 0x16
    28a0:	80 93 be 02 	sts	0x02BE, r24
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	9b 81       	ldd	r25, Y+3	; 0x03
    28a8:	ac 01       	movw	r20, r24
    28aa:	4e 5f       	subi	r20, 0xFE	; 254
    28ac:	5f 4f       	sbci	r21, 0xFF	; 255
    28ae:	8a 81       	ldd	r24, Y+2	; 0x02
    28b0:	9b 81       	ldd	r25, Y+3	; 0x03
    28b2:	fc 01       	movw	r30, r24
    28b4:	86 89       	ldd	r24, Z+22	; 0x16
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	c9 01       	movw	r24, r18
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	82 0f       	add	r24, r18
    28ca:	93 1f       	adc	r25, r19
    28cc:	83 57       	subi	r24, 0x73	; 115
    28ce:	9d 4f       	sbci	r25, 0xFD	; 253
    28d0:	ba 01       	movw	r22, r20
    28d2:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>

		xReturn = pdPASS;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	89 83       	std	Y+1, r24	; 0x01
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <xCoRoutineCreate+0x124>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    28dc:	8f ef       	ldi	r24, 0xFF	; 255
    28de:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return xReturn;	
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    28e2:	27 96       	adiw	r28, 0x07	; 7
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	08 95       	ret

000028f4 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <vCoRoutineAddToDelayedList+0x6>
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <vCoRoutineAddToDelayedList+0x8>
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	9c 83       	std	Y+4, r25	; 0x04
    2902:	8b 83       	std	Y+3, r24	; 0x03
    2904:	7e 83       	std	Y+6, r23	; 0x06
    2906:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    2908:	20 91 bf 02 	lds	r18, 0x02BF
    290c:	30 91 c0 02 	lds	r19, 0x02C0
    2910:	8b 81       	ldd	r24, Y+3	; 0x03
    2912:	9c 81       	ldd	r25, Y+4	; 0x04
    2914:	82 0f       	add	r24, r18
    2916:	93 1f       	adc	r25, r19
    2918:	9a 83       	std	Y+2, r25	; 0x02
    291a:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	uxListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    291c:	80 91 8b 02 	lds	r24, 0x028B
    2920:	90 91 8c 02 	lds	r25, 0x028C
    2924:	02 96       	adiw	r24, 0x02	; 2
    2926:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    292a:	80 91 8b 02 	lds	r24, 0x028B
    292e:	90 91 8c 02 	lds	r25, 0x028C
    2932:	29 81       	ldd	r18, Y+1	; 0x01
    2934:	3a 81       	ldd	r19, Y+2	; 0x02
    2936:	fc 01       	movw	r30, r24
    2938:	33 83       	std	Z+3, r19	; 0x03
    293a:	22 83       	std	Z+2, r18	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    293c:	80 91 bf 02 	lds	r24, 0x02BF
    2940:	90 91 c0 02 	lds	r25, 0x02C0
    2944:	29 81       	ldd	r18, Y+1	; 0x01
    2946:	3a 81       	ldd	r19, Y+2	; 0x02
    2948:	28 17       	cp	r18, r24
    294a:	39 07       	cpc	r19, r25
    294c:	78 f4       	brcc	.+30     	; 0x296c <vCoRoutineAddToDelayedList+0x78>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    294e:	80 91 8b 02 	lds	r24, 0x028B
    2952:	90 91 8c 02 	lds	r25, 0x028C
    2956:	9c 01       	movw	r18, r24
    2958:	2e 5f       	subi	r18, 0xFE	; 254
    295a:	3f 4f       	sbci	r19, 0xFF	; 255
    295c:	80 91 b3 02 	lds	r24, 0x02B3
    2960:	90 91 b4 02 	lds	r25, 0x02B4
    2964:	b9 01       	movw	r22, r18
    2966:	0e 94 0e 13 	call	0x261c	; 0x261c <vListInsert>
    296a:	0e c0       	rjmp	.+28     	; 0x2988 <vCoRoutineAddToDelayedList+0x94>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    296c:	80 91 8b 02 	lds	r24, 0x028B
    2970:	90 91 8c 02 	lds	r25, 0x028C
    2974:	9c 01       	movw	r18, r24
    2976:	2e 5f       	subi	r18, 0xFE	; 254
    2978:	3f 4f       	sbci	r19, 0xFF	; 255
    297a:	80 91 b1 02 	lds	r24, 0x02B1
    297e:	90 91 b2 02 	lds	r25, 0x02B2
    2982:	b9 01       	movw	r22, r18
    2984:	0e 94 0e 13 	call	0x261c	; 0x261c <vListInsert>
	}

	if( pxEventList )
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	61 f0       	breq	.+24     	; 0x29a8 <vCoRoutineAddToDelayedList+0xb4>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2990:	80 91 8b 02 	lds	r24, 0x028B
    2994:	90 91 8c 02 	lds	r25, 0x028C
    2998:	9c 01       	movw	r18, r24
    299a:	24 5f       	subi	r18, 0xF4	; 244
    299c:	3f 4f       	sbci	r19, 0xFF	; 255
    299e:	8d 81       	ldd	r24, Y+5	; 0x05
    29a0:	9e 81       	ldd	r25, Y+6	; 0x06
    29a2:	b9 01       	movw	r22, r18
    29a4:	0e 94 0e 13 	call	0x261c	; 0x261c <vListInsert>
	}
}
    29a8:	26 96       	adiw	r28, 0x06	; 6
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	08 95       	ret

000029ba <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	1f 92       	push	r1
    29c0:	1f 92       	push	r1
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    29c6:	3c c0       	rjmp	.+120    	; 0x2a40 <prvCheckPendingReadyList+0x86>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    29c8:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    29ca:	80 91 ba 02 	lds	r24, 0x02BA
    29ce:	90 91 bb 02 	lds	r25, 0x02BB
    29d2:	fc 01       	movw	r30, r24
    29d4:	86 81       	ldd	r24, Z+6	; 0x06
    29d6:	97 81       	ldd	r25, Z+7	; 0x07
    29d8:	9a 83       	std	Y+2, r25	; 0x02
    29da:	89 83       	std	Y+1, r24	; 0x01
			uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	9a 81       	ldd	r25, Y+2	; 0x02
    29e0:	0c 96       	adiw	r24, 0x0c	; 12
    29e2:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
		}
		portENABLE_INTERRUPTS();
    29e6:	78 94       	sei

		uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	9a 81       	ldd	r25, Y+2	; 0x02
    29ec:	02 96       	adiw	r24, 0x02	; 2
    29ee:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	9a 81       	ldd	r25, Y+2	; 0x02
    29f6:	fc 01       	movw	r30, r24
    29f8:	96 89       	ldd	r25, Z+22	; 0x16
    29fa:	80 91 be 02 	lds	r24, 0x02BE
    29fe:	89 17       	cp	r24, r25
    2a00:	30 f4       	brcc	.+12     	; 0x2a0e <prvCheckPendingReadyList+0x54>
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	fc 01       	movw	r30, r24
    2a08:	86 89       	ldd	r24, Z+22	; 0x16
    2a0a:	80 93 be 02 	sts	0x02BE, r24
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02
    2a12:	ac 01       	movw	r20, r24
    2a14:	4e 5f       	subi	r20, 0xFE	; 254
    2a16:	5f 4f       	sbci	r21, 0xFF	; 255
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	86 89       	ldd	r24, Z+22	; 0x16
    2a20:	28 2f       	mov	r18, r24
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	c9 01       	movw	r24, r18
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	88 0f       	add	r24, r24
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	82 0f       	add	r24, r18
    2a34:	93 1f       	adc	r25, r19
    2a36:	83 57       	subi	r24, 0x73	; 115
    2a38:	9d 4f       	sbci	r25, 0xFD	; 253
    2a3a:	ba 01       	movw	r22, r20
    2a3c:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2a40:	80 91 b5 02 	lds	r24, 0x02B5
    2a44:	88 23       	and	r24, r24
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <prvCheckPendingReadyList+0x90>
    2a48:	bf cf       	rjmp	.-130    	; 0x29c8 <prvCheckPendingReadyList+0xe>
		portENABLE_INTERRUPTS();

		uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	df 91       	pop	r29
    2a50:	cf 91       	pop	r28
    2a52:	08 95       	ret

00002a54 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2a54:	cf 93       	push	r28
    2a56:	df 93       	push	r29
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <prvCheckDelayedList+0x6>
    2a5a:	1f 92       	push	r1
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2a60:	0e 94 38 07 	call	0xe70	; 0xe70 <xTaskGetTickCount>
    2a64:	9c 01       	movw	r18, r24
    2a66:	80 91 c1 02 	lds	r24, 0x02C1
    2a6a:	90 91 c2 02 	lds	r25, 0x02C2
    2a6e:	a9 01       	movw	r20, r18
    2a70:	48 1b       	sub	r20, r24
    2a72:	59 0b       	sbc	r21, r25
    2a74:	ca 01       	movw	r24, r20
    2a76:	90 93 c4 02 	sts	0x02C4, r25
    2a7a:	80 93 c3 02 	sts	0x02C3, r24
	while( xPassedTicks )
    2a7e:	8a c0       	rjmp	.+276    	; 0x2b94 <prvCheckDelayedList+0x140>
	{
		xCoRoutineTickCount++;
    2a80:	80 91 bf 02 	lds	r24, 0x02BF
    2a84:	90 91 c0 02 	lds	r25, 0x02C0
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	90 93 c0 02 	sts	0x02C0, r25
    2a8e:	80 93 bf 02 	sts	0x02BF, r24
		xPassedTicks--;
    2a92:	80 91 c3 02 	lds	r24, 0x02C3
    2a96:	90 91 c4 02 	lds	r25, 0x02C4
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	90 93 c4 02 	sts	0x02C4, r25
    2aa0:	80 93 c3 02 	sts	0x02C3, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2aa4:	80 91 bf 02 	lds	r24, 0x02BF
    2aa8:	90 91 c0 02 	lds	r25, 0x02C0
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	a9 f4       	brne	.+42     	; 0x2ada <prvCheckDelayedList+0x86>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    2ab0:	80 91 b1 02 	lds	r24, 0x02B1
    2ab4:	90 91 b2 02 	lds	r25, 0x02B2
    2ab8:	9a 83       	std	Y+2, r25	; 0x02
    2aba:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    2abc:	80 91 b3 02 	lds	r24, 0x02B3
    2ac0:	90 91 b4 02 	lds	r25, 0x02B4
    2ac4:	90 93 b2 02 	sts	0x02B2, r25
    2ac8:	80 93 b1 02 	sts	0x02B1, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad0:	90 93 b4 02 	sts	0x02B4, r25
    2ad4:	80 93 b3 02 	sts	0x02B3, r24
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2ad8:	54 c0       	rjmp	.+168    	; 0x2b82 <prvCheckDelayedList+0x12e>
    2ada:	53 c0       	rjmp	.+166    	; 0x2b82 <prvCheckDelayedList+0x12e>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    2adc:	80 91 b1 02 	lds	r24, 0x02B1
    2ae0:	90 91 b2 02 	lds	r25, 0x02B2
    2ae4:	fc 01       	movw	r30, r24
    2ae6:	85 81       	ldd	r24, Z+5	; 0x05
    2ae8:	96 81       	ldd	r25, Z+6	; 0x06
    2aea:	fc 01       	movw	r30, r24
    2aec:	86 81       	ldd	r24, Z+6	; 0x06
    2aee:	97 81       	ldd	r25, Z+7	; 0x07
    2af0:	9c 83       	std	Y+4, r25	; 0x04
    2af2:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	fc 01       	movw	r30, r24
    2afa:	22 81       	ldd	r18, Z+2	; 0x02
    2afc:	33 81       	ldd	r19, Z+3	; 0x03
    2afe:	80 91 bf 02 	lds	r24, 0x02BF
    2b02:	90 91 c0 02 	lds	r25, 0x02C0
    2b06:	82 17       	cp	r24, r18
    2b08:	93 07       	cpc	r25, r19
    2b0a:	08 f4       	brcc	.+2      	; 0x2b0e <prvCheckDelayedList+0xba>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    2b0c:	43 c0       	rjmp	.+134    	; 0x2b94 <prvCheckDelayedList+0x140>
			}																						

			portDISABLE_INTERRUPTS();
    2b0e:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				uxListRemove( &( pxCRCB->xGenericListItem ) );											
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	02 96       	adiw	r24, 0x02	; 2
    2b16:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1e:	fc 01       	movw	r30, r24
    2b20:	84 89       	ldd	r24, Z+20	; 0x14
    2b22:	95 89       	ldd	r25, Z+21	; 0x15
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	29 f0       	breq	.+10     	; 0x2b32 <prvCheckDelayedList+0xde>
				{															
					uxListRemove( &( pxCRCB->xEventListItem ) );											
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	0c 96       	adiw	r24, 0x0c	; 12
    2b2e:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    2b32:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	fc 01       	movw	r30, r24
    2b3a:	96 89       	ldd	r25, Z+22	; 0x16
    2b3c:	80 91 be 02 	lds	r24, 0x02BE
    2b40:	89 17       	cp	r24, r25
    2b42:	30 f4       	brcc	.+12     	; 0x2b50 <prvCheckDelayedList+0xfc>
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	9c 81       	ldd	r25, Y+4	; 0x04
    2b48:	fc 01       	movw	r30, r24
    2b4a:	86 89       	ldd	r24, Z+22	; 0x16
    2b4c:	80 93 be 02 	sts	0x02BE, r24
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	9c 81       	ldd	r25, Y+4	; 0x04
    2b54:	ac 01       	movw	r20, r24
    2b56:	4e 5f       	subi	r20, 0xFE	; 254
    2b58:	5f 4f       	sbci	r21, 0xFF	; 255
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5e:	fc 01       	movw	r30, r24
    2b60:	86 89       	ldd	r24, Z+22	; 0x16
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	c9 01       	movw	r24, r18
    2b68:	88 0f       	add	r24, r24
    2b6a:	99 1f       	adc	r25, r25
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	82 0f       	add	r24, r18
    2b76:	93 1f       	adc	r25, r19
    2b78:	83 57       	subi	r24, 0x73	; 115
    2b7a:	9d 4f       	sbci	r25, 0xFD	; 253
    2b7c:	ba 01       	movw	r22, r20
    2b7e:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2b82:	80 91 b1 02 	lds	r24, 0x02B1
    2b86:	90 91 b2 02 	lds	r25, 0x02B2
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	80 81       	ld	r24, Z
    2b8e:	88 23       	and	r24, r24
    2b90:	09 f0       	breq	.+2      	; 0x2b94 <prvCheckDelayedList+0x140>
    2b92:	a4 cf       	rjmp	.-184    	; 0x2adc <prvCheckDelayedList+0x88>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2b94:	80 91 c3 02 	lds	r24, 0x02C3
    2b98:	90 91 c4 02 	lds	r25, 0x02C4
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	09 f0       	breq	.+2      	; 0x2ba2 <prvCheckDelayedList+0x14e>
    2ba0:	6f cf       	rjmp	.-290    	; 0x2a80 <prvCheckDelayedList+0x2c>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2ba2:	80 91 bf 02 	lds	r24, 0x02BF
    2ba6:	90 91 c0 02 	lds	r25, 0x02C0
    2baa:	90 93 c2 02 	sts	0x02C2, r25
    2bae:	80 93 c1 02 	sts	0x02C1, r24
}
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	df 91       	pop	r29
    2bbc:	cf 91       	pop	r28
    2bbe:	08 95       	ret

00002bc0 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	1f 92       	push	r1
    2bc6:	1f 92       	push	r1
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2bcc:	0e 94 dd 14 	call	0x29ba	; 0x29ba <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2bd0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2bd4:	0a c0       	rjmp	.+20     	; 0x2bea <vCoRoutineSchedule+0x2a>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    2bd6:	80 91 be 02 	lds	r24, 0x02BE
    2bda:	88 23       	and	r24, r24
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    2bde:	6f c0       	rjmp	.+222    	; 0x2cbe <vCoRoutineSchedule+0xfe>
		}
		--uxTopCoRoutineReadyPriority;
    2be0:	80 91 be 02 	lds	r24, 0x02BE
    2be4:	81 50       	subi	r24, 0x01	; 1
    2be6:	80 93 be 02 	sts	0x02BE, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2bea:	80 91 be 02 	lds	r24, 0x02BE
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	c9 01       	movw	r24, r18
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	88 0f       	add	r24, r24
    2bfe:	99 1f       	adc	r25, r25
    2c00:	82 0f       	add	r24, r18
    2c02:	93 1f       	adc	r25, r19
    2c04:	83 57       	subi	r24, 0x73	; 115
    2c06:	9d 4f       	sbci	r25, 0xFD	; 253
    2c08:	fc 01       	movw	r30, r24
    2c0a:	80 81       	ld	r24, Z
    2c0c:	88 23       	and	r24, r24
    2c0e:	19 f3       	breq	.-58     	; 0x2bd6 <vCoRoutineSchedule+0x16>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2c10:	80 91 be 02 	lds	r24, 0x02BE
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	c9 01       	movw	r24, r18
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	82 0f       	add	r24, r18
    2c28:	93 1f       	adc	r25, r19
    2c2a:	83 57       	subi	r24, 0x73	; 115
    2c2c:	9d 4f       	sbci	r25, 0xFD	; 253
    2c2e:	9a 83       	std	Y+2, r25	; 0x02
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	fc 01       	movw	r30, r24
    2c38:	81 81       	ldd	r24, Z+1	; 0x01
    2c3a:	92 81       	ldd	r25, Z+2	; 0x02
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	22 81       	ldd	r18, Z+2	; 0x02
    2c40:	33 81       	ldd	r19, Z+3	; 0x03
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	9a 81       	ldd	r25, Y+2	; 0x02
    2c46:	fc 01       	movw	r30, r24
    2c48:	32 83       	std	Z+2, r19	; 0x02
    2c4a:	21 83       	std	Z+1, r18	; 0x01
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c50:	fc 01       	movw	r30, r24
    2c52:	21 81       	ldd	r18, Z+1	; 0x01
    2c54:	32 81       	ldd	r19, Z+2	; 0x02
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	03 96       	adiw	r24, 0x03	; 3
    2c5c:	28 17       	cp	r18, r24
    2c5e:	39 07       	cpc	r19, r25
    2c60:	69 f4       	brne	.+26     	; 0x2c7c <vCoRoutineSchedule+0xbc>
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	9a 81       	ldd	r25, Y+2	; 0x02
    2c66:	fc 01       	movw	r30, r24
    2c68:	81 81       	ldd	r24, Z+1	; 0x01
    2c6a:	92 81       	ldd	r25, Z+2	; 0x02
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	22 81       	ldd	r18, Z+2	; 0x02
    2c70:	33 81       	ldd	r19, Z+3	; 0x03
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	9a 81       	ldd	r25, Y+2	; 0x02
    2c76:	fc 01       	movw	r30, r24
    2c78:	32 83       	std	Z+2, r19	; 0x02
    2c7a:	21 83       	std	Z+1, r18	; 0x01
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c80:	fc 01       	movw	r30, r24
    2c82:	81 81       	ldd	r24, Z+1	; 0x01
    2c84:	92 81       	ldd	r25, Z+2	; 0x02
    2c86:	fc 01       	movw	r30, r24
    2c88:	86 81       	ldd	r24, Z+6	; 0x06
    2c8a:	97 81       	ldd	r25, Z+7	; 0x07
    2c8c:	90 93 8c 02 	sts	0x028C, r25
    2c90:	80 93 8b 02 	sts	0x028B, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2c94:	80 91 8b 02 	lds	r24, 0x028B
    2c98:	90 91 8c 02 	lds	r25, 0x028C
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	20 81       	ld	r18, Z
    2ca0:	31 81       	ldd	r19, Z+1	; 0x01
    2ca2:	80 91 8b 02 	lds	r24, 0x028B
    2ca6:	90 91 8c 02 	lds	r25, 0x028C
    2caa:	fc 01       	movw	r30, r24
    2cac:	47 89       	ldd	r20, Z+23	; 0x17
    2cae:	80 91 8b 02 	lds	r24, 0x028B
    2cb2:	90 91 8c 02 	lds	r25, 0x028C
    2cb6:	64 2f       	mov	r22, r20
    2cb8:	f9 01       	movw	r30, r18
    2cba:	19 95       	eicall

	return;
    2cbc:	00 00       	nop
}
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	08 95       	ret

00002cc8 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2cc8:	cf 93       	push	r28
    2cca:	df 93       	push	r29
    2ccc:	1f 92       	push	r1
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2cd2:	19 82       	std	Y+1, r1	; 0x01
    2cd4:	13 c0       	rjmp	.+38     	; 0x2cfc <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	c9 01       	movw	r24, r18
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	88 0f       	add	r24, r24
    2ce4:	99 1f       	adc	r25, r25
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	82 0f       	add	r24, r18
    2cec:	93 1f       	adc	r25, r19
    2cee:	83 57       	subi	r24, 0x73	; 115
    2cf0:	9d 4f       	sbci	r25, 0xFD	; 253
    2cf2:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	8f 5f       	subi	r24, 0xFF	; 255
    2cfa:	89 83       	std	Y+1, r24	; 0x01
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	82 30       	cpi	r24, 0x02	; 2
    2d00:	50 f3       	brcs	.-44     	; 0x2cd6 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2d02:	8f e9       	ldi	r24, 0x9F	; 159
    2d04:	92 e0       	ldi	r25, 0x02	; 2
    2d06:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2d0a:	88 ea       	ldi	r24, 0xA8	; 168
    2d0c:	92 e0       	ldi	r25, 0x02	; 2
    2d0e:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    2d12:	85 eb       	ldi	r24, 0xB5	; 181
    2d14:	92 e0       	ldi	r25, 0x02	; 2
    2d16:	0e 94 6f 12 	call	0x24de	; 0x24de <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2d1a:	8f e9       	ldi	r24, 0x9F	; 159
    2d1c:	92 e0       	ldi	r25, 0x02	; 2
    2d1e:	90 93 b2 02 	sts	0x02B2, r25
    2d22:	80 93 b1 02 	sts	0x02B1, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    2d26:	88 ea       	ldi	r24, 0xA8	; 168
    2d28:	92 e0       	ldi	r25, 0x02	; 2
    2d2a:	90 93 b4 02 	sts	0x02B4, r25
    2d2e:	80 93 b3 02 	sts	0x02B3, r24
}
    2d32:	0f 90       	pop	r0
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	08 95       	ret

00002d3a <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2d3a:	cf 93       	push	r28
    2d3c:	df 93       	push	r29
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <xCoRoutineRemoveFromEventList+0x6>
    2d40:	1f 92       	push	r1
    2d42:	1f 92       	push	r1
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
    2d48:	9d 83       	std	Y+5, r25	; 0x05
    2d4a:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d50:	fc 01       	movw	r30, r24
    2d52:	85 81       	ldd	r24, Z+5	; 0x05
    2d54:	96 81       	ldd	r25, Z+6	; 0x06
    2d56:	fc 01       	movw	r30, r24
    2d58:	86 81       	ldd	r24, Z+6	; 0x06
    2d5a:	97 81       	ldd	r25, Z+7	; 0x07
    2d5c:	9b 83       	std	Y+3, r25	; 0x03
    2d5e:	8a 83       	std	Y+2, r24	; 0x02
	uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2d60:	8a 81       	ldd	r24, Y+2	; 0x02
    2d62:	9b 81       	ldd	r25, Y+3	; 0x03
    2d64:	0c 96       	adiw	r24, 0x0c	; 12
    2d66:	0e 94 87 13 	call	0x270e	; 0x270e <uxListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6e:	0c 96       	adiw	r24, 0x0c	; 12
    2d70:	bc 01       	movw	r22, r24
    2d72:	85 eb       	ldi	r24, 0xB5	; 181
    2d74:	92 e0       	ldi	r25, 0x02	; 2
    2d76:	0e 94 b7 12 	call	0x256e	; 0x256e <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7e:	fc 01       	movw	r30, r24
    2d80:	26 89       	ldd	r18, Z+22	; 0x16
    2d82:	80 91 8b 02 	lds	r24, 0x028B
    2d86:	90 91 8c 02 	lds	r25, 0x028C
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	86 89       	ldd	r24, Z+22	; 0x16
    2d8e:	28 17       	cp	r18, r24
    2d90:	18 f0       	brcs	.+6      	; 0x2d98 <xCoRoutineRemoveFromEventList+0x5e>
	{
		xReturn = pdTRUE;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	89 83       	std	Y+1, r24	; 0x01
    2d96:	01 c0       	rjmp	.+2      	; 0x2d9a <xCoRoutineRemoveFromEventList+0x60>
	}
	else
	{
		xReturn = pdFALSE;
    2d98:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	df 91       	pop	r29
    2da8:	cf 91       	pop	r28
    2daa:	08 95       	ret

00002dac <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2dac:	cf 93       	push	r28
    2dae:	df 93       	push	r29
    2db0:	00 d0       	rcall	.+0      	; 0x2db2 <pvPortMalloc+0x6>
    2db2:	1f 92       	push	r1
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	9c 83       	std	Y+4, r25	; 0x04
    2dba:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    2dbc:	1a 82       	std	Y+2, r1	; 0x02
    2dbe:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    2dc0:	0e 94 a8 06 	call	0xd50	; 0xd50 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    2dc4:	20 91 c5 1a 	lds	r18, 0x1AC5
    2dc8:	30 91 c6 1a 	lds	r19, 0x1AC6
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd0:	82 0f       	add	r24, r18
    2dd2:	93 1f       	adc	r25, r19
    2dd4:	81 15       	cp	r24, r1
    2dd6:	28 e1       	ldi	r18, 0x18	; 24
    2dd8:	92 07       	cpc	r25, r18
    2dda:	18 f5       	brcc	.+70     	; 0x2e22 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    2ddc:	20 91 c5 1a 	lds	r18, 0x1AC5
    2de0:	30 91 c6 1a 	lds	r19, 0x1AC6
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	28 0f       	add	r18, r24
    2dea:	39 1f       	adc	r19, r25
    2dec:	80 91 c5 1a 	lds	r24, 0x1AC5
    2df0:	90 91 c6 1a 	lds	r25, 0x1AC6
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    2df4:	82 17       	cp	r24, r18
    2df6:	93 07       	cpc	r25, r19
    2df8:	a0 f4       	brcc	.+40     	; 0x2e22 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    2dfa:	80 91 c5 1a 	lds	r24, 0x1AC5
    2dfe:	90 91 c6 1a 	lds	r25, 0x1AC6
    2e02:	8b 53       	subi	r24, 0x3B	; 59
    2e04:	9d 4f       	sbci	r25, 0xFD	; 253
    2e06:	9a 83       	std	Y+2, r25	; 0x02
    2e08:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    2e0a:	20 91 c5 1a 	lds	r18, 0x1AC5
    2e0e:	30 91 c6 1a 	lds	r19, 0x1AC6
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	9c 81       	ldd	r25, Y+4	; 0x04
    2e16:	82 0f       	add	r24, r18
    2e18:	93 1f       	adc	r25, r19
    2e1a:	90 93 c6 1a 	sts	0x1AC6, r25
    2e1e:	80 93 c5 1a 	sts	0x1AC5, r24
		}
	}
	xTaskResumeAll();
    2e22:	0e 94 b4 06 	call	0xd68	; 0xd68 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	df 91       	pop	r29
    2e34:	cf 91       	pop	r28
    2e36:	08 95       	ret

00002e38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	1f 92       	push	r1
    2e3e:	1f 92       	push	r1
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	9a 83       	std	Y+2, r25	; 0x02
    2e46:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	08 95       	ret

00002e52 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    2e52:	cf 93       	push	r28
    2e54:	df 93       	push	r29
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    2e5a:	10 92 c6 1a 	sts	0x1AC6, r1
    2e5e:	10 92 c5 1a 	sts	0x1AC5, r1
}
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	08 95       	ret

00002e68 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2e68:	cf 93       	push	r28
    2e6a:	df 93       	push	r29
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    2e70:	80 91 c5 1a 	lds	r24, 0x1AC5
    2e74:	90 91 c6 1a 	lds	r25, 0x1AC6
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	38 e1       	ldi	r19, 0x18	; 24
    2e7c:	a9 01       	movw	r20, r18
    2e7e:	48 1b       	sub	r20, r24
    2e80:	59 0b       	sbc	r21, r25
    2e82:	ca 01       	movw	r24, r20
}
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	08 95       	ret

00002e8a <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	28 97       	sbiw	r28, 0x08	; 8
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	f8 94       	cli
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	cd bf       	out	0x3d, r28	; 61
    2e9e:	9c 83       	std	Y+4, r25	; 0x04
    2ea0:	8b 83       	std	Y+3, r24	; 0x03
    2ea2:	7e 83       	std	Y+6, r23	; 0x06
    2ea4:	6d 83       	std	Y+5, r22	; 0x05
    2ea6:	58 87       	std	Y+8, r21	; 0x08
    2ea8:	4f 83       	std	Y+7, r20	; 0x07
#endif

	/* Place a few bytes of known values on the bottom of the stack.
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	9c 81       	ldd	r25, Y+4	; 0x04
    2eae:	21 e1       	ldi	r18, 0x11	; 17
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	20 83       	st	Z, r18
	pxTopOfStack--;
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	9c 83       	std	Y+4, r25	; 0x04
    2ebc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec2:	22 e2       	ldi	r18, 0x22	; 34
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	20 83       	st	Z, r18
	pxTopOfStack--;
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	9c 83       	std	Y+4, r25	; 0x04
    2ed0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	23 e3       	ldi	r18, 0x33	; 51
    2ed8:	fc 01       	movw	r30, r24
    2eda:	20 83       	st	Z, r18
	pxTopOfStack--;
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	9c 83       	std	Y+4, r25	; 0x04
    2ee4:	8b 83       	std	Y+3, r24	; 0x03
	 * of flash. We do this by adding the .task label in the linker script.
	 *
	 * In order to do this properly, we would need to get a full 3-byte pointer to
	 * pxCode.  That requires a change to GCC.  Not likely to happen any time soon.
	 */
	usAddress = ( unsigned portSHORT ) pxCode;
    2ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eea:	9a 83       	std	Y+2, r25	; 0x02
    2eec:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
    2eee:	29 81       	ldd	r18, Y+1	; 0x01
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	20 83       	st	Z, r18
	pxTopOfStack--;
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	9c 81       	ldd	r25, Y+4	; 0x04
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	9c 83       	std	Y+4, r25	; 0x04
    2f00:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	9a 81       	ldd	r25, Y+2	; 0x02
    2f06:	89 2f       	mov	r24, r25
    2f08:	99 27       	eor	r25, r25
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
    2f0e:	29 81       	ldd	r18, Y+1	; 0x01
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	9c 81       	ldd	r25, Y+4	; 0x04
    2f14:	fc 01       	movw	r30, r24
    2f16:	20 83       	st	Z, r18
	pxTopOfStack--;
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	9c 83       	std	Y+4, r25	; 0x04
    2f20:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = 0;
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	fc 01       	movw	r30, r24
    2f28:	10 82       	st	Z, r1
	pxTopOfStack--;
    2f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	9c 83       	std	Y+4, r25	; 0x04
    2f32:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	9c 81       	ldd	r25, Y+4	; 0x04
    2f38:	fc 01       	movw	r30, r24
    2f3a:	10 82       	st	Z, r1
	pxTopOfStack--;
    2f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	9c 83       	std	Y+4, r25	; 0x04
    2f44:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4a:	20 e8       	ldi	r18, 0x80	; 128
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	20 83       	st	Z, r18
	pxTopOfStack--;
    2f50:	8b 81       	ldd	r24, Y+3	; 0x03
    2f52:	9c 81       	ldd	r25, Y+4	; 0x04
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	9c 83       	std	Y+4, r25	; 0x04
    2f58:	8b 83       	std	Y+3, r24	; 0x03
#if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

	/* If we have an ATmega256x, we are also saving the RAMPZ and EIND registers.
	 * We should default those to 0.
	 */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* EIND */
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5e:	fc 01       	movw	r30, r24
    2f60:	10 82       	st	Z, r1
	pxTopOfStack--;
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	9c 81       	ldd	r25, Y+4	; 0x04
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	9c 83       	std	Y+4, r25	; 0x04
    2f6a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* RAMPZ */
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f70:	fc 01       	movw	r30, r24
    2f72:	10 82       	st	Z, r1
	pxTopOfStack--;
    2f74:	8b 81       	ldd	r24, Y+3	; 0x03
    2f76:	9c 81       	ldd	r25, Y+4	; 0x04
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	9c 83       	std	Y+4, r25	; 0x04
    2f7c:	8b 83       	std	Y+3, r24	; 0x03

#endif

	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    2f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f80:	9c 81       	ldd	r25, Y+4	; 0x04
    2f82:	fc 01       	movw	r30, r24
    2f84:	10 82       	st	Z, r1
	pxTopOfStack--;
    2f86:	8b 81       	ldd	r24, Y+3	; 0x03
    2f88:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	9c 83       	std	Y+4, r25	; 0x04
    2f8e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    2f90:	8b 81       	ldd	r24, Y+3	; 0x03
    2f92:	9c 81       	ldd	r25, Y+4	; 0x04
    2f94:	22 e0       	ldi	r18, 0x02	; 2
    2f96:	fc 01       	movw	r30, r24
    2f98:	20 83       	st	Z, r18
	pxTopOfStack--;
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	9c 83       	std	Y+4, r25	; 0x04
    2fa2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa8:	23 e0       	ldi	r18, 0x03	; 3
    2faa:	fc 01       	movw	r30, r24
    2fac:	20 83       	st	Z, r18
	pxTopOfStack--;
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	9c 83       	std	Y+4, r25	; 0x04
    2fb6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbc:	24 e0       	ldi	r18, 0x04	; 4
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	20 83       	st	Z, r18
	pxTopOfStack--;
    2fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd0:	25 e0       	ldi	r18, 0x05	; 5
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	20 83       	st	Z, r18
	pxTopOfStack--;
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	9c 83       	std	Y+4, r25	; 0x04
    2fde:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    2fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe4:	26 e0       	ldi	r18, 0x06	; 6
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	20 83       	st	Z, r18
	pxTopOfStack--;
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	9c 81       	ldd	r25, Y+4	; 0x04
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	9c 83       	std	Y+4, r25	; 0x04
    2ff2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    2ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff8:	27 e0       	ldi	r18, 0x07	; 7
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	20 83       	st	Z, r18
	pxTopOfStack--;
    2ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    3000:	9c 81       	ldd	r25, Y+4	; 0x04
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	9c 83       	std	Y+4, r25	; 0x04
    3006:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	9c 81       	ldd	r25, Y+4	; 0x04
    300c:	28 e0       	ldi	r18, 0x08	; 8
    300e:	fc 01       	movw	r30, r24
    3010:	20 83       	st	Z, r18
	pxTopOfStack--;
    3012:	8b 81       	ldd	r24, Y+3	; 0x03
    3014:	9c 81       	ldd	r25, Y+4	; 0x04
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	9c 83       	std	Y+4, r25	; 0x04
    301a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	29 e0       	ldi	r18, 0x09	; 9
    3022:	fc 01       	movw	r30, r24
    3024:	20 83       	st	Z, r18
	pxTopOfStack--;
    3026:	8b 81       	ldd	r24, Y+3	; 0x03
    3028:	9c 81       	ldd	r25, Y+4	; 0x04
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	9c 83       	std	Y+4, r25	; 0x04
    302e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	9c 81       	ldd	r25, Y+4	; 0x04
    3034:	20 e1       	ldi	r18, 0x10	; 16
    3036:	fc 01       	movw	r30, r24
    3038:	20 83       	st	Z, r18
	pxTopOfStack--;
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	9c 81       	ldd	r25, Y+4	; 0x04
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	9c 83       	std	Y+4, r25	; 0x04
    3042:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	9c 81       	ldd	r25, Y+4	; 0x04
    3048:	21 e1       	ldi	r18, 0x11	; 17
    304a:	fc 01       	movw	r30, r24
    304c:	20 83       	st	Z, r18
	pxTopOfStack--;
    304e:	8b 81       	ldd	r24, Y+3	; 0x03
    3050:	9c 81       	ldd	r25, Y+4	; 0x04
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	9c 83       	std	Y+4, r25	; 0x04
    3056:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	9c 81       	ldd	r25, Y+4	; 0x04
    305c:	22 e1       	ldi	r18, 0x12	; 18
    305e:	fc 01       	movw	r30, r24
    3060:	20 83       	st	Z, r18
	pxTopOfStack--;
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	9c 81       	ldd	r25, Y+4	; 0x04
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	9c 83       	std	Y+4, r25	; 0x04
    306a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    306c:	8b 81       	ldd	r24, Y+3	; 0x03
    306e:	9c 81       	ldd	r25, Y+4	; 0x04
    3070:	23 e1       	ldi	r18, 0x13	; 19
    3072:	fc 01       	movw	r30, r24
    3074:	20 83       	st	Z, r18
	pxTopOfStack--;
    3076:	8b 81       	ldd	r24, Y+3	; 0x03
    3078:	9c 81       	ldd	r25, Y+4	; 0x04
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	9c 83       	std	Y+4, r25	; 0x04
    307e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    3080:	8b 81       	ldd	r24, Y+3	; 0x03
    3082:	9c 81       	ldd	r25, Y+4	; 0x04
    3084:	24 e1       	ldi	r18, 0x14	; 20
    3086:	fc 01       	movw	r30, r24
    3088:	20 83       	st	Z, r18
	pxTopOfStack--;
    308a:	8b 81       	ldd	r24, Y+3	; 0x03
    308c:	9c 81       	ldd	r25, Y+4	; 0x04
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	9c 83       	std	Y+4, r25	; 0x04
    3092:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    3094:	8b 81       	ldd	r24, Y+3	; 0x03
    3096:	9c 81       	ldd	r25, Y+4	; 0x04
    3098:	25 e1       	ldi	r18, 0x15	; 21
    309a:	fc 01       	movw	r30, r24
    309c:	20 83       	st	Z, r18
	pxTopOfStack--;
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	9c 81       	ldd	r25, Y+4	; 0x04
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	9c 83       	std	Y+4, r25	; 0x04
    30a6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	9c 81       	ldd	r25, Y+4	; 0x04
    30ac:	26 e1       	ldi	r18, 0x16	; 22
    30ae:	fc 01       	movw	r30, r24
    30b0:	20 83       	st	Z, r18
	pxTopOfStack--;
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	9c 81       	ldd	r25, Y+4	; 0x04
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	9c 83       	std	Y+4, r25	; 0x04
    30ba:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    30bc:	8b 81       	ldd	r24, Y+3	; 0x03
    30be:	9c 81       	ldd	r25, Y+4	; 0x04
    30c0:	27 e1       	ldi	r18, 0x17	; 23
    30c2:	fc 01       	movw	r30, r24
    30c4:	20 83       	st	Z, r18
	pxTopOfStack--;
    30c6:	8b 81       	ldd	r24, Y+3	; 0x03
    30c8:	9c 81       	ldd	r25, Y+4	; 0x04
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	9c 83       	std	Y+4, r25	; 0x04
    30ce:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	9c 81       	ldd	r25, Y+4	; 0x04
    30d4:	28 e1       	ldi	r18, 0x18	; 24
    30d6:	fc 01       	movw	r30, r24
    30d8:	20 83       	st	Z, r18
	pxTopOfStack--;
    30da:	8b 81       	ldd	r24, Y+3	; 0x03
    30dc:	9c 81       	ldd	r25, Y+4	; 0x04
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	9c 83       	std	Y+4, r25	; 0x04
    30e2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	9c 81       	ldd	r25, Y+4	; 0x04
    30e8:	29 e1       	ldi	r18, 0x19	; 25
    30ea:	fc 01       	movw	r30, r24
    30ec:	20 83       	st	Z, r18
	pxTopOfStack--;
    30ee:	8b 81       	ldd	r24, Y+3	; 0x03
    30f0:	9c 81       	ldd	r25, Y+4	; 0x04
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	9c 83       	std	Y+4, r25	; 0x04
    30f6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	9c 81       	ldd	r25, Y+4	; 0x04
    30fc:	20 e2       	ldi	r18, 0x20	; 32
    30fe:	fc 01       	movw	r30, r24
    3100:	20 83       	st	Z, r18
	pxTopOfStack--;
    3102:	8b 81       	ldd	r24, Y+3	; 0x03
    3104:	9c 81       	ldd	r25, Y+4	; 0x04
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	9c 83       	std	Y+4, r25	; 0x04
    310a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    310c:	8b 81       	ldd	r24, Y+3	; 0x03
    310e:	9c 81       	ldd	r25, Y+4	; 0x04
    3110:	21 e2       	ldi	r18, 0x21	; 33
    3112:	fc 01       	movw	r30, r24
    3114:	20 83       	st	Z, r18
	pxTopOfStack--;
    3116:	8b 81       	ldd	r24, Y+3	; 0x03
    3118:	9c 81       	ldd	r25, Y+4	; 0x04
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	9c 83       	std	Y+4, r25	; 0x04
    311e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	9c 81       	ldd	r25, Y+4	; 0x04
    3124:	22 e2       	ldi	r18, 0x22	; 34
    3126:	fc 01       	movw	r30, r24
    3128:	20 83       	st	Z, r18
	pxTopOfStack--;
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	9c 81       	ldd	r25, Y+4	; 0x04
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    3134:	8b 81       	ldd	r24, Y+3	; 0x03
    3136:	9c 81       	ldd	r25, Y+4	; 0x04
    3138:	23 e2       	ldi	r18, 0x23	; 35
    313a:	fc 01       	movw	r30, r24
    313c:	20 83       	st	Z, r18
	pxTopOfStack--;
    313e:	8b 81       	ldd	r24, Y+3	; 0x03
    3140:	9c 81       	ldd	r25, Y+4	; 0x04
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    3148:	8f 81       	ldd	r24, Y+7	; 0x07
    314a:	98 85       	ldd	r25, Y+8	; 0x08
    314c:	9a 83       	std	Y+2, r25	; 0x02
    314e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    3150:	29 81       	ldd	r18, Y+1	; 0x01
    3152:	8b 81       	ldd	r24, Y+3	; 0x03
    3154:	9c 81       	ldd	r25, Y+4	; 0x04
    3156:	fc 01       	movw	r30, r24
    3158:	20 83       	st	Z, r18
	pxTopOfStack--;
    315a:	8b 81       	ldd	r24, Y+3	; 0x03
    315c:	9c 81       	ldd	r25, Y+4	; 0x04
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	9c 83       	std	Y+4, r25	; 0x04
    3162:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	9a 81       	ldd	r25, Y+2	; 0x02
    3168:	89 2f       	mov	r24, r25
    316a:	99 27       	eor	r25, r25
    316c:	9a 83       	std	Y+2, r25	; 0x02
    316e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    3170:	29 81       	ldd	r18, Y+1	; 0x01
    3172:	8b 81       	ldd	r24, Y+3	; 0x03
    3174:	9c 81       	ldd	r25, Y+4	; 0x04
    3176:	fc 01       	movw	r30, r24
    3178:	20 83       	st	Z, r18
	pxTopOfStack--;
    317a:	8b 81       	ldd	r24, Y+3	; 0x03
    317c:	9c 81       	ldd	r25, Y+4	; 0x04
    317e:	01 97       	sbiw	r24, 0x01	; 1
    3180:	9c 83       	std	Y+4, r25	; 0x04
    3182:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    3184:	8b 81       	ldd	r24, Y+3	; 0x03
    3186:	9c 81       	ldd	r25, Y+4	; 0x04
    3188:	26 e2       	ldi	r18, 0x26	; 38
    318a:	fc 01       	movw	r30, r24
    318c:	20 83       	st	Z, r18
	pxTopOfStack--;
    318e:	8b 81       	ldd	r24, Y+3	; 0x03
    3190:	9c 81       	ldd	r25, Y+4	; 0x04
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	9c 83       	std	Y+4, r25	; 0x04
    3196:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	9c 81       	ldd	r25, Y+4	; 0x04
    319c:	27 e2       	ldi	r18, 0x27	; 39
    319e:	fc 01       	movw	r30, r24
    31a0:	20 83       	st	Z, r18
	pxTopOfStack--;
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	9c 81       	ldd	r25, Y+4	; 0x04
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	9c 83       	std	Y+4, r25	; 0x04
    31aa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    31ac:	8b 81       	ldd	r24, Y+3	; 0x03
    31ae:	9c 81       	ldd	r25, Y+4	; 0x04
    31b0:	28 e2       	ldi	r18, 0x28	; 40
    31b2:	fc 01       	movw	r30, r24
    31b4:	20 83       	st	Z, r18
	pxTopOfStack--;
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	9c 83       	std	Y+4, r25	; 0x04
    31be:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	9c 81       	ldd	r25, Y+4	; 0x04
    31c4:	29 e2       	ldi	r18, 0x29	; 41
    31c6:	fc 01       	movw	r30, r24
    31c8:	20 83       	st	Z, r18
	pxTopOfStack--;
    31ca:	8b 81       	ldd	r24, Y+3	; 0x03
    31cc:	9c 81       	ldd	r25, Y+4	; 0x04
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	9c 83       	std	Y+4, r25	; 0x04
    31d2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    31d4:	8b 81       	ldd	r24, Y+3	; 0x03
    31d6:	9c 81       	ldd	r25, Y+4	; 0x04
    31d8:	20 e3       	ldi	r18, 0x30	; 48
    31da:	fc 01       	movw	r30, r24
    31dc:	20 83       	st	Z, r18
	pxTopOfStack--;
    31de:	8b 81       	ldd	r24, Y+3	; 0x03
    31e0:	9c 81       	ldd	r25, Y+4	; 0x04
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	9c 83       	std	Y+4, r25	; 0x04
    31e6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    31e8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ea:	9c 81       	ldd	r25, Y+4	; 0x04
    31ec:	21 e3       	ldi	r18, 0x31	; 49
    31ee:	fc 01       	movw	r30, r24
    31f0:	20 83       	st	Z, r18
	pxTopOfStack--;
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	9c 81       	ldd	r25, Y+4	; 0x04
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	9c 83       	std	Y+4, r25	; 0x04
    31fa:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    31fc:	8b 81       	ldd	r24, Y+3	; 0x03
    31fe:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3200:	28 96       	adiw	r28, 0x08	; 8
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	08 95       	ret

00003212 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    321a:	0e 94 0d 1a 	call	0x341a	; 0x341a <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    321e:	a0 91 32 02 	lds	r26, 0x0232
    3222:	b0 91 33 02 	lds	r27, 0x0233
    3226:	cd 91       	ld	r28, X+
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	dd 91       	ld	r29, X+
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	ff 91       	pop	r31
    3230:	ef 91       	pop	r30
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	bf 91       	pop	r27
    3238:	af 91       	pop	r26
    323a:	9f 91       	pop	r25
    323c:	8f 91       	pop	r24
    323e:	7f 91       	pop	r23
    3240:	6f 91       	pop	r22
    3242:	5f 91       	pop	r21
    3244:	4f 91       	pop	r20
    3246:	3f 91       	pop	r19
    3248:	2f 91       	pop	r18
    324a:	1f 91       	pop	r17
    324c:	0f 91       	pop	r16
    324e:	ff 90       	pop	r15
    3250:	ef 90       	pop	r14
    3252:	df 90       	pop	r13
    3254:	cf 90       	pop	r12
    3256:	bf 90       	pop	r11
    3258:	af 90       	pop	r10
    325a:	9f 90       	pop	r9
    325c:	8f 90       	pop	r8
    325e:	7f 90       	pop	r7
    3260:	6f 90       	pop	r6
    3262:	5f 90       	pop	r5
    3264:	4f 90       	pop	r4
    3266:	3f 90       	pop	r3
    3268:	2f 90       	pop	r2
    326a:	1f 90       	pop	r1
    326c:	0f 90       	pop	r0
    326e:	0c be       	out	0x3c, r0	; 60
    3270:	0f 90       	pop	r0
    3272:	0b be       	out	0x3b, r0	; 59
    3274:	0f 90       	pop	r0
    3276:	0f be       	out	0x3f, r0	; 63
    3278:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    327a:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    327c:	81 e0       	ldi	r24, 0x01	; 1
}
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	08 95       	ret

00003284 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	08 95       	ret

00003292 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    3292:	0f 92       	push	r0
    3294:	0f b6       	in	r0, 0x3f	; 63
    3296:	f8 94       	cli
    3298:	0f 92       	push	r0
    329a:	0b b6       	in	r0, 0x3b	; 59
    329c:	0f 92       	push	r0
    329e:	0c b6       	in	r0, 0x3c	; 60
    32a0:	0f 92       	push	r0
    32a2:	1f 92       	push	r1
    32a4:	11 24       	eor	r1, r1
    32a6:	2f 92       	push	r2
    32a8:	3f 92       	push	r3
    32aa:	4f 92       	push	r4
    32ac:	5f 92       	push	r5
    32ae:	6f 92       	push	r6
    32b0:	7f 92       	push	r7
    32b2:	8f 92       	push	r8
    32b4:	9f 92       	push	r9
    32b6:	af 92       	push	r10
    32b8:	bf 92       	push	r11
    32ba:	cf 92       	push	r12
    32bc:	df 92       	push	r13
    32be:	ef 92       	push	r14
    32c0:	ff 92       	push	r15
    32c2:	0f 93       	push	r16
    32c4:	1f 93       	push	r17
    32c6:	2f 93       	push	r18
    32c8:	3f 93       	push	r19
    32ca:	4f 93       	push	r20
    32cc:	5f 93       	push	r21
    32ce:	6f 93       	push	r22
    32d0:	7f 93       	push	r23
    32d2:	8f 93       	push	r24
    32d4:	9f 93       	push	r25
    32d6:	af 93       	push	r26
    32d8:	bf 93       	push	r27
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	ef 93       	push	r30
    32e0:	ff 93       	push	r31
    32e2:	a0 91 32 02 	lds	r26, 0x0232
    32e6:	b0 91 33 02 	lds	r27, 0x0233
    32ea:	0d b6       	in	r0, 0x3d	; 61
    32ec:	0d 92       	st	X+, r0
    32ee:	0e b6       	in	r0, 0x3e	; 62
    32f0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    32f2:	0e 94 4a 08 	call	0x1094	; 0x1094 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    32f6:	a0 91 32 02 	lds	r26, 0x0232
    32fa:	b0 91 33 02 	lds	r27, 0x0233
    32fe:	cd 91       	ld	r28, X+
    3300:	cd bf       	out	0x3d, r28	; 61
    3302:	dd 91       	ld	r29, X+
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	ff 91       	pop	r31
    3308:	ef 91       	pop	r30
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	bf 91       	pop	r27
    3310:	af 91       	pop	r26
    3312:	9f 91       	pop	r25
    3314:	8f 91       	pop	r24
    3316:	7f 91       	pop	r23
    3318:	6f 91       	pop	r22
    331a:	5f 91       	pop	r21
    331c:	4f 91       	pop	r20
    331e:	3f 91       	pop	r19
    3320:	2f 91       	pop	r18
    3322:	1f 91       	pop	r17
    3324:	0f 91       	pop	r16
    3326:	ff 90       	pop	r15
    3328:	ef 90       	pop	r14
    332a:	df 90       	pop	r13
    332c:	cf 90       	pop	r12
    332e:	bf 90       	pop	r11
    3330:	af 90       	pop	r10
    3332:	9f 90       	pop	r9
    3334:	8f 90       	pop	r8
    3336:	7f 90       	pop	r7
    3338:	6f 90       	pop	r6
    333a:	5f 90       	pop	r5
    333c:	4f 90       	pop	r4
    333e:	3f 90       	pop	r3
    3340:	2f 90       	pop	r2
    3342:	1f 90       	pop	r1
    3344:	0f 90       	pop	r0
    3346:	0c be       	out	0x3c, r0	; 60
    3348:	0f 90       	pop	r0
    334a:	0b be       	out	0x3b, r0	; 59
    334c:	0f 90       	pop	r0
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	0f 90       	pop	r0

	asm volatile ( "ret" );
    3352:	08 95       	ret

00003354 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    3354:	0f 92       	push	r0
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	0f 92       	push	r0
    335c:	0b b6       	in	r0, 0x3b	; 59
    335e:	0f 92       	push	r0
    3360:	0c b6       	in	r0, 0x3c	; 60
    3362:	0f 92       	push	r0
    3364:	1f 92       	push	r1
    3366:	11 24       	eor	r1, r1
    3368:	2f 92       	push	r2
    336a:	3f 92       	push	r3
    336c:	4f 92       	push	r4
    336e:	5f 92       	push	r5
    3370:	6f 92       	push	r6
    3372:	7f 92       	push	r7
    3374:	8f 92       	push	r8
    3376:	9f 92       	push	r9
    3378:	af 92       	push	r10
    337a:	bf 92       	push	r11
    337c:	cf 92       	push	r12
    337e:	df 92       	push	r13
    3380:	ef 92       	push	r14
    3382:	ff 92       	push	r15
    3384:	0f 93       	push	r16
    3386:	1f 93       	push	r17
    3388:	2f 93       	push	r18
    338a:	3f 93       	push	r19
    338c:	4f 93       	push	r20
    338e:	5f 93       	push	r21
    3390:	6f 93       	push	r22
    3392:	7f 93       	push	r23
    3394:	8f 93       	push	r24
    3396:	9f 93       	push	r25
    3398:	af 93       	push	r26
    339a:	bf 93       	push	r27
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	ef 93       	push	r30
    33a2:	ff 93       	push	r31
    33a4:	a0 91 32 02 	lds	r26, 0x0232
    33a8:	b0 91 33 02 	lds	r27, 0x0233
    33ac:	0d b6       	in	r0, 0x3d	; 61
    33ae:	0d 92       	st	X+, r0
    33b0:	0e b6       	in	r0, 0x3e	; 62
    33b2:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    33b4:	0e 94 6d 07 	call	0xeda	; 0xeda <vTaskIncrementTick>
	vTaskSwitchContext();
    33b8:	0e 94 4a 08 	call	0x1094	; 0x1094 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    33bc:	a0 91 32 02 	lds	r26, 0x0232
    33c0:	b0 91 33 02 	lds	r27, 0x0233
    33c4:	cd 91       	ld	r28, X+
    33c6:	cd bf       	out	0x3d, r28	; 61
    33c8:	dd 91       	ld	r29, X+
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	ff 91       	pop	r31
    33ce:	ef 91       	pop	r30
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	bf 91       	pop	r27
    33d6:	af 91       	pop	r26
    33d8:	9f 91       	pop	r25
    33da:	8f 91       	pop	r24
    33dc:	7f 91       	pop	r23
    33de:	6f 91       	pop	r22
    33e0:	5f 91       	pop	r21
    33e2:	4f 91       	pop	r20
    33e4:	3f 91       	pop	r19
    33e6:	2f 91       	pop	r18
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    33ec:	ff 90       	pop	r15
    33ee:	ef 90       	pop	r14
    33f0:	df 90       	pop	r13
    33f2:	cf 90       	pop	r12
    33f4:	bf 90       	pop	r11
    33f6:	af 90       	pop	r10
    33f8:	9f 90       	pop	r9
    33fa:	8f 90       	pop	r8
    33fc:	7f 90       	pop	r7
    33fe:	6f 90       	pop	r6
    3400:	5f 90       	pop	r5
    3402:	4f 90       	pop	r4
    3404:	3f 90       	pop	r3
    3406:	2f 90       	pop	r2
    3408:	1f 90       	pop	r1
    340a:	0f 90       	pop	r0
    340c:	0c be       	out	0x3c, r0	; 60
    340e:	0f 90       	pop	r0
    3410:	0b be       	out	0x3b, r0	; 59
    3412:	0f 90       	pop	r0
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	0f 90       	pop	r0

	asm volatile ( "ret" );
    3418:	08 95       	ret

0000341a <prvSetupTimerInterrupt>:

/*
 * Setup timer 0 or 3 or 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    341a:	cf 93       	push	r28
    341c:	df 93       	push	r29
    341e:	00 d0       	rcall	.+0      	; 0x3420 <prvSetupTimerInterrupt+0x6>
    3420:	00 d0       	rcall	.+0      	; 0x3422 <prvSetupTimerInterrupt+0x8>
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62

    /* Using 8bit Timer0 or 16bit Timer1 or Timer3 to generate the tick. */

    // ulCompareMatch 40,000 = 20,000,000 / 500; 20MHz
    // ulCompareMatch 110,592 = 22,118,400 / 200; 22.1184 MHz
    ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	9d e7       	ldi	r25, 0x7D	; 125
    342a:	a0 e0       	ldi	r26, 0x00	; 0
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	89 83       	std	Y+1, r24	; 0x01
    3430:	9a 83       	std	Y+2, r25	; 0x02
    3432:	ab 83       	std	Y+3, r26	; 0x03
    3434:	bc 83       	std	Y+4, r27	; 0x04

    /* We only have 8 or 16 bits so have to scale 64 or 256 to get our required tick rate. */
    //ulCompareMatch = 625 /= portCLOCK_PRESCALER; 20MHz with 64 prescale
    //ulCompareMatch = 108 /= portCLOCK_PRESCALER; 22.1184 MHz with 1024 prescale
    ulCompareMatch /= portCLOCK_PRESCALER;
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	9a 81       	ldd	r25, Y+2	; 0x02
    343a:	ab 81       	ldd	r26, Y+3	; 0x03
    343c:	bc 81       	ldd	r27, Y+4	; 0x04
    343e:	68 94       	set
    3440:	15 f8       	bld	r1, 5
    3442:	b6 95       	lsr	r27
    3444:	a7 95       	ror	r26
    3446:	97 95       	ror	r25
    3448:	87 95       	ror	r24
    344a:	16 94       	lsr	r1
    344c:	d1 f7       	brne	.-12     	; 0x3442 <prvSetupTimerInterrupt+0x28>
    344e:	89 83       	std	Y+1, r24	; 0x01
    3450:	9a 83       	std	Y+2, r25	; 0x02
    3452:	ab 83       	std	Y+3, r26	; 0x03
    3454:	bc 83       	std	Y+4, r27	; 0x04

    /* Adjust for correct value. */
    ulCompareMatch -= ( unsigned portLONG ) 1;
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	9a 81       	ldd	r25, Y+2	; 0x02
    345a:	ab 81       	ldd	r26, Y+3	; 0x03
    345c:	bc 81       	ldd	r27, Y+4	; 0x04
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	a1 09       	sbc	r26, r1
    3462:	b1 09       	sbc	r27, r1
    3464:	89 83       	std	Y+1, r24	; 0x01
    3466:	9a 83       	std	Y+2, r25	; 0x02
    3468:	ab 83       	std	Y+3, r26	; 0x03
    346a:	bc 83       	std	Y+4, r27	; 0x04

    /* Setup compare match value for compare match A.  Interrupts are disabled
    before this is called so we need not worry here. */
    ucLowByte = ( unsigned portCHAR ) ( ulCompareMatch & ( unsigned portLONG ) 0xff );
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	8d 83       	std	Y+5, r24	; 0x05
    //  OCR3AL = ucLowByte;

    // the HiByte is only needed, if a 16 Bit counter is being utilized
#ifdef portOCRH

    ulCompareMatch >>= 8;
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	9a 81       	ldd	r25, Y+2	; 0x02
    3474:	ab 81       	ldd	r26, Y+3	; 0x03
    3476:	bc 81       	ldd	r27, Y+4	; 0x04
    3478:	89 2f       	mov	r24, r25
    347a:	9a 2f       	mov	r25, r26
    347c:	ab 2f       	mov	r26, r27
    347e:	bb 27       	eor	r27, r27
    3480:	89 83       	std	Y+1, r24	; 0x01
    3482:	9a 83       	std	Y+2, r25	; 0x02
    3484:	ab 83       	std	Y+3, r26	; 0x03
    3486:	bc 83       	std	Y+4, r27	; 0x04
    ucHighByte = ( unsigned portCHAR ) ( ulCompareMatch & ( unsigned portLONG ) 0xff );
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	8e 83       	std	Y+6, r24	; 0x06
    portOCRH = ucHighByte;
    348c:	89 e9       	ldi	r24, 0x99	; 153
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	2e 81       	ldd	r18, Y+6	; 0x06
    3492:	fc 01       	movw	r30, r24
    3494:	20 83       	st	Z, r18

#endif

    portOCRL = ucLowByte;
    3496:	88 e9       	ldi	r24, 0x98	; 152
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	2d 81       	ldd	r18, Y+5	; 0x05
    349c:	fc 01       	movw	r30, r24
    349e:	20 83       	st	Z, r18
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	portTCCRb = ucLowByte;

#elif defined( portUSE_TIMER3 )
	/* Setup clock source and compare match behaviour. Assuming  640 / 1280 /1281 / 1284p / 2560 / 2561 (with Timer3) */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    34a0:	8b e0       	ldi	r24, 0x0B	; 11
    34a2:	8d 83       	std	Y+5, r24	; 0x05
	portTCCRb = ucLowByte;
    34a4:	81 e9       	ldi	r24, 0x91	; 145
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	2d 81       	ldd	r18, Y+5	; 0x05
    34aa:	fc 01       	movw	r30, r24
    34ac:	20 83       	st	Z, r18
#endif

    /* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
    ucLowByte = portTIMSK;
    34ae:	81 e7       	ldi	r24, 0x71	; 113
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	fc 01       	movw	r30, r24
    34b4:	80 81       	ld	r24, Z
    34b6:	8d 83       	std	Y+5, r24	; 0x05
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    34b8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ba:	82 60       	ori	r24, 0x02	; 2
    34bc:	8d 83       	std	Y+5, r24	; 0x05
    portTIMSK = ucLowByte;
    34be:	81 e7       	ldi	r24, 0x71	; 113
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	2d 81       	ldd	r18, Y+5	; 0x05
    34c4:	fc 01       	movw	r30, r24
    34c6:	20 83       	st	Z, r18

}
    34c8:	26 96       	adiw	r28, 0x06	; 6
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    34d4:	df 91       	pop	r29
    34d6:	cf 91       	pop	r28
    34d8:	08 95       	ret

000034da <__vector_32>:

	#elif defined( portUSE_TIMER3 )
		#warning "Timer3 used for PRE-EMPTIVE scheduler."
		ISR(TIMER3_COMPA_vect, ISR_NAKED)
		{
			vPortYieldFromTick();
    34da:	0e 94 aa 19 	call	0x3354	; 0x3354 <vPortYieldFromTick>
			asm volatile ( "reti" );
    34de:	18 95       	reti

000034e0 <USART_Init>:
*  the specified baud rate and clk speed.
*
* Param buadin: The desired Baud rate.
* Param clk_seedin: The clk speed of the ATmega328p
************************************/
void USART_Init(uint16_t baudin, uint32_t clk_speedin) {
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <USART_Init+0x6>
    34e6:	00 d0       	rcall	.+0      	; 0x34e8 <USART_Init+0x8>
    34e8:	cd b7       	in	r28, 0x3d	; 61
    34ea:	de b7       	in	r29, 0x3e	; 62
    34ec:	9a 83       	std	Y+2, r25	; 0x02
    34ee:	89 83       	std	Y+1, r24	; 0x01
    34f0:	4b 83       	std	Y+3, r20	; 0x03
    34f2:	5c 83       	std	Y+4, r21	; 0x04
    34f4:	6d 83       	std	Y+5, r22	; 0x05
    34f6:	7e 83       	std	Y+6, r23	; 0x06
    USART_WriteQueue = xQueueCreate(64,sizeof(uint8_t));
    34f8:	40 e0       	ldi	r20, 0x00	; 0
    34fa:	61 e0       	ldi	r22, 0x01	; 1
    34fc:	80 e4       	ldi	r24, 0x40	; 64
    34fe:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <xQueueGenericCreate>
    3502:	90 93 68 1b 	sts	0x1B68, r25
    3506:	80 93 67 1b 	sts	0x1B67, r24
    USART_ReadQueue = xQueueCreate(8,sizeof(uint8_t));
    350a:	40 e0       	ldi	r20, 0x00	; 0
    350c:	61 e0       	ldi	r22, 0x01	; 1
    350e:	88 e0       	ldi	r24, 0x08	; 8
    3510:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <xQueueGenericCreate>
    3514:	90 93 64 1b 	sts	0x1B64, r25
    3518:	80 93 63 1b 	sts	0x1B63, r24

    //uint32_t ubrr = clk_speedin/(16UL)/baudin-1;
    //UBRR1H = (unsigned char)(ubrr>>8) ;// & 0x7F;
    //UBRR1L = (unsigned char)ubrr;
    
    UBRR0H = 0; //115200
    351c:	85 ec       	ldi	r24, 0xC5	; 197
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	fc 01       	movw	r30, r24
    3522:	10 82       	st	Z, r1
    UBRR0L = 8;
    3524:	84 ec       	ldi	r24, 0xC4	; 196
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	28 e0       	ldi	r18, 0x08	; 8
    352a:	fc 01       	movw	r30, r24
    352c:	20 83       	st	Z, r18

    /* Enable receiver and transmitter */
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);//|(1<<RXCIE1);
    352e:	81 ec       	ldi	r24, 0xC1	; 193
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	28 e1       	ldi	r18, 0x18	; 24
    3534:	fc 01       	movw	r30, r24
    3536:	20 83       	st	Z, r18
    /* Set frame format: 8data, 1stop bit */
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
    3538:	82 ec       	ldi	r24, 0xC2	; 194
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	26 e0       	ldi	r18, 0x06	; 6
    353e:	fc 01       	movw	r30, r24
    3540:	20 83       	st	Z, r18
	 // clear U2X0 for Synchronous operation
    UCSR0A &= ~(1<<U2X0);
    3542:	80 ec       	ldi	r24, 0xC0	; 192
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	20 ec       	ldi	r18, 0xC0	; 192
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	f9 01       	movw	r30, r18
    354c:	20 81       	ld	r18, Z
    354e:	2d 7f       	andi	r18, 0xFD	; 253
    3550:	fc 01       	movw	r30, r24
    3552:	20 83       	st	Z, r18
    /* Set frame format: 8data, 1stop bit */
    //UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
    // clear U2X0 for Synchronous operation
    //UCSR0A &= ~(1<<U2X0);*/

}
    3554:	26 96       	adiw	r28, 0x06	; 6
    3556:	0f b6       	in	r0, 0x3f	; 63
    3558:	f8 94       	cli
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	cd bf       	out	0x3d, r28	; 61
    3560:	df 91       	pop	r29
    3562:	cf 91       	pop	r28
    3564:	08 95       	ret

00003566 <USART_Write>:

/*the send function will put 8bits on the trans line. */
void USART_Write(uint8_t data) {
    3566:	cf 93       	push	r28
    3568:	df 93       	push	r29
    356a:	1f 92       	push	r1
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62
    3570:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
    3572:	00 00       	nop
    3574:	80 ec       	ldi	r24, 0xC0	; 192
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	fc 01       	movw	r30, r24
    357a:	80 81       	ld	r24, Z
    357c:	88 2f       	mov	r24, r24
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	80 72       	andi	r24, 0x20	; 32
    3582:	99 27       	eor	r25, r25
    3584:	00 97       	sbiw	r24, 0x00	; 0
    3586:	b1 f3       	breq	.-20     	; 0x3574 <USART_Write+0xe>
		;
		/* Put data into buffer, sends the data */
		UDR0 = data;
    3588:	86 ec       	ldi	r24, 0xC6	; 198
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	29 81       	ldd	r18, Y+1	; 0x01
    358e:	fc 01       	movw	r30, r24
    3590:	20 83       	st	Z, r18
}
    3592:	0f 90       	pop	r0
    3594:	df 91       	pop	r29
    3596:	cf 91       	pop	r28
    3598:	08 95       	ret

0000359a <USART_Write_Unprotected>:

/*the send function will put 8bits on the trans line. */
void USART_Write_Unprotected(uint8_t data) {
    359a:	cf 93       	push	r28
    359c:	df 93       	push	r29
    359e:	1f 92       	push	r1
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
    35a4:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
    35a6:	00 00       	nop
    35a8:	80 ec       	ldi	r24, 0xC0	; 192
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	fc 01       	movw	r30, r24
    35ae:	80 81       	ld	r24, Z
    35b0:	88 2f       	mov	r24, r24
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	80 72       	andi	r24, 0x20	; 32
    35b6:	99 27       	eor	r25, r25
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	b1 f3       	breq	.-20     	; 0x35a8 <USART_Write_Unprotected+0xe>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    35bc:	86 ec       	ldi	r24, 0xC6	; 198
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	29 81       	ldd	r18, Y+1	; 0x01
    35c2:	fc 01       	movw	r30, r24
    35c4:	20 83       	st	Z, r18
}
    35c6:	0f 90       	pop	r0
    35c8:	df 91       	pop	r29
    35ca:	cf 91       	pop	r28
    35cc:	08 95       	ret

000035ce <USART_Read>:
Therefore you may not get control back after this is called 
until a much later time. It may be helpful to use the 
istheredata() function to check before calling this function
        @return 8bit data packet from sender
*/
uint8_t USART_Read(void) {
    35ce:	cf 93       	push	r28
    35d0:	df 93       	push	r29
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    /* Wait for data to be received */
    while ( !(UCSR2A & (1<<RXC2)) )
    35d6:	00 00       	nop
    35d8:	80 ed       	ldi	r24, 0xD0	; 208
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	fc 01       	movw	r30, r24
    35de:	80 81       	ld	r24, Z
    35e0:	88 23       	and	r24, r24
    35e2:	d4 f7       	brge	.-12     	; 0x35d8 <USART_Read+0xa>
        ;
    /* Get and return received data from buffer */
    return UDR2;
    35e4:	86 ed       	ldi	r24, 0xD6	; 214
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	fc 01       	movw	r30, r24
    35ea:	80 81       	ld	r24, Z
}
    35ec:	df 91       	pop	r29
    35ee:	cf 91       	pop	r28
    35f0:	08 95       	ret

000035f2 <__vector_36>:


ISR(USART1_RX_vect){
    35f2:	1f 92       	push	r1
    35f4:	0f 92       	push	r0
    35f6:	00 90 5f 00 	lds	r0, 0x005F
    35fa:	0f 92       	push	r0
    35fc:	11 24       	eor	r1, r1
    35fe:	00 90 5b 00 	lds	r0, 0x005B
    3602:	0f 92       	push	r0
    3604:	8f 93       	push	r24
    3606:	9f 93       	push	r25
    3608:	ef 93       	push	r30
    360a:	ff 93       	push	r31
    360c:	cf 93       	push	r28
    360e:	df 93       	push	r29
    3610:	1f 92       	push	r1
    3612:	cd b7       	in	r28, 0x3d	; 61
    3614:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    data = UDR1;
    3616:	8e ec       	ldi	r24, 0xCE	; 206
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	fc 01       	movw	r30, r24
    361c:	80 81       	ld	r24, Z
    361e:	89 83       	std	Y+1, r24	; 0x01
    //UDR1 = data;
    

  //  USART_AddToQueue(data);
    //xQueueSendToBackFromISR(USART_ReadQueue,&data,NULL);
}
    3620:	0f 90       	pop	r0
    3622:	df 91       	pop	r29
    3624:	cf 91       	pop	r28
    3626:	ff 91       	pop	r31
    3628:	ef 91       	pop	r30
    362a:	9f 91       	pop	r25
    362c:	8f 91       	pop	r24
    362e:	0f 90       	pop	r0
    3630:	00 92 5b 00 	sts	0x005B, r0
    3634:	0f 90       	pop	r0
    3636:	00 92 5f 00 	sts	0x005F, r0
    363a:	0f 90       	pop	r0
    363c:	1f 90       	pop	r1
    363e:	18 95       	reti

00003640 <USART_AddToQueue>:

void USART_AddToQueue(uint8_t data){
    3640:	cf 93       	push	r28
    3642:	df 93       	push	r29
    3644:	1f 92       	push	r1
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	89 83       	std	Y+1, r24	; 0x01
    
    xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);
    364c:	80 91 67 1b 	lds	r24, 0x1B67
    3650:	90 91 68 1b 	lds	r25, 0x1B68
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	4f ef       	ldi	r20, 0xFF	; 255
    3658:	5f ef       	ldi	r21, 0xFF	; 255
    365a:	be 01       	movw	r22, r28
    365c:	6f 5f       	subi	r22, 0xFF	; 255
    365e:	7f 4f       	sbci	r23, 0xFF	; 255
    3660:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <xQueueGenericSend>

}
    3664:	0f 90       	pop	r0
    3666:	df 91       	pop	r29
    3668:	cf 91       	pop	r28
    366a:	08 95       	ret

0000366c <USART_TransmitString>:

void USART_TransmitString(char* str){
    366c:	cf 93       	push	r28
    366e:	df 93       	push	r29
    3670:	1f 92       	push	r1
    3672:	1f 92       	push	r1
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
    3678:	9a 83       	std	Y+2, r25	; 0x02
    367a:	89 83       	std	Y+1, r24	; 0x01
    while(*str) {
    367c:	0b c0       	rjmp	.+22     	; 0x3694 <USART_TransmitString+0x28>
        USART_AddToQueue(*str);
    367e:	89 81       	ldd	r24, Y+1	; 0x01
    3680:	9a 81       	ldd	r25, Y+2	; 0x02
    3682:	fc 01       	movw	r30, r24
    3684:	80 81       	ld	r24, Z
    3686:	0e 94 20 1b 	call	0x3640	; 0x3640 <USART_AddToQueue>
        str++;
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	9a 81       	ldd	r25, Y+2	; 0x02
    368e:	01 96       	adiw	r24, 0x01	; 1
    3690:	9a 83       	std	Y+2, r25	; 0x02
    3692:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendToBack(USART_WriteQueue,&data,portMAX_DELAY);

}

void USART_TransmitString(char* str){
    while(*str) {
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	9a 81       	ldd	r25, Y+2	; 0x02
    3698:	fc 01       	movw	r30, r24
    369a:	80 81       	ld	r24, Z
    369c:	88 23       	and	r24, r24
    369e:	79 f7       	brne	.-34     	; 0x367e <USART_TransmitString+0x12>
        USART_AddToQueue(*str);
        str++;
    }
}
    36a0:	0f 90       	pop	r0
    36a2:	0f 90       	pop	r0
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	08 95       	ret

000036aa <vTaskUSARTWrite>:

void vTaskUSARTWrite(void *pvParameters){
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	00 d0       	rcall	.+0      	; 0x36b0 <vTaskUSARTWrite+0x6>
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	9b 83       	std	Y+3, r25	; 0x03
    36b6:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    while(1){
    xQueueReceive(USART_WriteQueue,&data,portMAX_DELAY);
    36b8:	80 91 67 1b 	lds	r24, 0x1B67
    36bc:	90 91 68 1b 	lds	r25, 0x1B68
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	4f ef       	ldi	r20, 0xFF	; 255
    36c4:	5f ef       	ldi	r21, 0xFF	; 255
    36c6:	be 01       	movw	r22, r28
    36c8:	6f 5f       	subi	r22, 0xFF	; 255
    36ca:	7f 4f       	sbci	r23, 0xFF	; 255
    36cc:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xQueueGenericReceive>

        while(!(UCSR1A & (1<<UDRE1)));
    36d0:	00 00       	nop
    36d2:	88 ec       	ldi	r24, 0xC8	; 200
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	fc 01       	movw	r30, r24
    36d8:	80 81       	ld	r24, Z
    36da:	88 2f       	mov	r24, r24
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	80 72       	andi	r24, 0x20	; 32
    36e0:	99 27       	eor	r25, r25
    36e2:	00 97       	sbiw	r24, 0x00	; 0
    36e4:	b1 f3       	breq	.-20     	; 0x36d2 <vTaskUSARTWrite+0x28>
        UDR1 = data;
    36e6:	8e ec       	ldi	r24, 0xCE	; 206
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	29 81       	ldd	r18, Y+1	; 0x01
    36ec:	fc 01       	movw	r30, r24
    36ee:	20 83       	st	Z, r18

    }
    36f0:	e3 cf       	rjmp	.-58     	; 0x36b8 <vTaskUSARTWrite+0xe>

000036f2 <USART_LogChar>:
}

void USART_LogChar(uint8_t data){
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
    36f6:	1f 92       	push	r1
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
    36fc:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
    36fe:	80 91 65 1b 	lds	r24, 0x1B65
    3702:	90 91 66 1b 	lds	r25, 0x1B66
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	4f ef       	ldi	r20, 0xFF	; 255
    370a:	5f ef       	ldi	r21, 0xFF	; 255
    370c:	be 01       	movw	r22, r28
    370e:	6f 5f       	subi	r22, 0xFF	; 255
    3710:	7f 4f       	sbci	r23, 0xFF	; 255
    3712:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <xQueueGenericSend>
}
    3716:	0f 90       	pop	r0
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	08 95       	ret

0000371e <USART_LogString>:

void USART_LogString(char* str){
    371e:	cf 93       	push	r28
    3720:	df 93       	push	r29
    3722:	1f 92       	push	r1
    3724:	1f 92       	push	r1
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
    372a:	9a 83       	std	Y+2, r25	; 0x02
    372c:	89 83       	std	Y+1, r24	; 0x01
    while(*str){
    372e:	0b c0       	rjmp	.+22     	; 0x3746 <USART_LogString+0x28>
        USART_LogChar(*str);
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	9a 81       	ldd	r25, Y+2	; 0x02
    3734:	fc 01       	movw	r30, r24
    3736:	80 81       	ld	r24, Z
    3738:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <USART_LogChar>
        str++;
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	9a 81       	ldd	r25, Y+2	; 0x02
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	9a 83       	std	Y+2, r25	; 0x02
    3744:	89 83       	std	Y+1, r24	; 0x01
void USART_LogChar(uint8_t data){
    xQueueSendToBack(USART_WriteQueueLog,&data,portMAX_DELAY);
}

void USART_LogString(char* str){
    while(*str){
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	9a 81       	ldd	r25, Y+2	; 0x02
    374a:	fc 01       	movw	r30, r24
    374c:	80 81       	ld	r24, Z
    374e:	88 23       	and	r24, r24
    3750:	79 f7       	brne	.-34     	; 0x3730 <USART_LogString+0x12>
        USART_LogChar(*str);
        str++;
    }
}
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	df 91       	pop	r29
    3758:	cf 91       	pop	r28
    375a:	08 95       	ret

0000375c <vTaskUSARTLog>:

void vTaskUSARTLog(void *pvParameters){
    375c:	cf 93       	push	r28
    375e:	df 93       	push	r29
    3760:	00 d0       	rcall	.+0      	; 0x3762 <vTaskUSARTLog+0x6>
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
    3766:	9b 83       	std	Y+3, r25	; 0x03
    3768:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    while(1){
        xQueueReceive(USART_WriteQueueLog,&data,portMAX_DELAY);
    376a:	80 91 65 1b 	lds	r24, 0x1B65
    376e:	90 91 66 1b 	lds	r25, 0x1B66
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	4f ef       	ldi	r20, 0xFF	; 255
    3776:	5f ef       	ldi	r21, 0xFF	; 255
    3778:	be 01       	movw	r22, r28
    377a:	6f 5f       	subi	r22, 0xFF	; 255
    377c:	7f 4f       	sbci	r23, 0xFF	; 255
    377e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xQueueGenericReceive>

        while(!(UCSR0A & (1<<UDRE0)));
    3782:	00 00       	nop
    3784:	80 ec       	ldi	r24, 0xC0	; 192
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	fc 01       	movw	r30, r24
    378a:	80 81       	ld	r24, Z
    378c:	88 2f       	mov	r24, r24
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	80 72       	andi	r24, 0x20	; 32
    3792:	99 27       	eor	r25, r25
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	b1 f3       	breq	.-20     	; 0x3784 <vTaskUSARTLog+0x28>
        UDR0 = data;
    3798:	86 ec       	ldi	r24, 0xC6	; 198
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	29 81       	ldd	r18, Y+1	; 0x01
    379e:	fc 01       	movw	r30, r24
    37a0:	20 83       	st	Z, r18

    }
    37a2:	e3 cf       	rjmp	.-58     	; 0x376a <vTaskUSARTLog+0xe>

000037a4 <USART_GetChar>:

}

uint8_t USART_GetChar(){
    37a4:	cf 93       	push	r28
    37a6:	df 93       	push	r29
    37a8:	1f 92       	push	r1
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    if(xQueueReceive(USART_ReadQueue,&data,1) == pdTRUE){
    37ae:	80 91 63 1b 	lds	r24, 0x1B63
    37b2:	90 91 64 1b 	lds	r25, 0x1B64
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	41 e0       	ldi	r20, 0x01	; 1
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	be 01       	movw	r22, r28
    37be:	6f 5f       	subi	r22, 0xFF	; 255
    37c0:	7f 4f       	sbci	r23, 0xFF	; 255
    37c2:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xQueueGenericReceive>
    37c6:	81 30       	cpi	r24, 0x01	; 1
    37c8:	11 f4       	brne	.+4      	; 0x37ce <USART_GetChar+0x2a>
        //USART_AddToQueue('~');
        return data;
    37ca:	89 81       	ldd	r24, Y+1	; 0x01
    37cc:	01 c0       	rjmp	.+2      	; 0x37d0 <USART_GetChar+0x2c>
    } else {
        return 255;
    37ce:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
    37d0:	0f 90       	pop	r0
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	08 95       	ret

000037d8 <delay>:

void delay(int a){
    37d8:	cf 93       	push	r28
    37da:	df 93       	push	r29
    37dc:	00 d0       	rcall	.+0      	; 0x37de <delay+0x6>
    37de:	1f 92       	push	r1
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
    37e4:	9c 83       	std	Y+4, r25	; 0x04
    37e6:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i = 0;i < a;i++);
    37e8:	1a 82       	std	Y+2, r1	; 0x02
    37ea:	19 82       	std	Y+1, r1	; 0x01
    37ec:	05 c0       	rjmp	.+10     	; 0x37f8 <delay+0x20>
    37ee:	89 81       	ldd	r24, Y+1	; 0x01
    37f0:	9a 81       	ldd	r25, Y+2	; 0x02
    37f2:	01 96       	adiw	r24, 0x01	; 1
    37f4:	9a 83       	std	Y+2, r25	; 0x02
    37f6:	89 83       	std	Y+1, r24	; 0x01
    37f8:	29 81       	ldd	r18, Y+1	; 0x01
    37fa:	3a 81       	ldd	r19, Y+2	; 0x02
    37fc:	8b 81       	ldd	r24, Y+3	; 0x03
    37fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3800:	28 17       	cp	r18, r24
    3802:	39 07       	cpc	r19, r25
    3804:	a4 f3       	brlt	.-24     	; 0x37ee <delay+0x16>
}
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	0f 90       	pop	r0
    380e:	df 91       	pop	r29
    3810:	cf 91       	pop	r28
    3812:	08 95       	ret

00003814 <sendACK>:

void sendACK(){
    3814:	cf 93       	push	r28
    3816:	df 93       	push	r29
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
    USART_Write(ACK_BYTE);
    381c:	80 e8       	ldi	r24, 0x80	; 128
    381e:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
}
    3822:	df 91       	pop	r29
    3824:	cf 91       	pop	r28
    3826:	08 95       	ret

00003828 <sendNACK>:

void sendNACK(){
    3828:	cf 93       	push	r28
    382a:	df 93       	push	r29
    382c:	cd b7       	in	r28, 0x3d	; 61
    382e:	de b7       	in	r29, 0x3e	; 62
    USART_Write(NACK_BYTE);
    3830:	80 e0       	ldi	r24, 0x00	; 0
    3832:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
}
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	08 95       	ret

0000383c <recievePayload>:

int recievePayload(int size,unsigned char *buffer){
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    3840:	cd b7       	in	r28, 0x3d	; 61
    3842:	de b7       	in	r29, 0x3e	; 62
    3844:	2d 97       	sbiw	r28, 0x0d	; 13
    3846:	0f b6       	in	r0, 0x3f	; 63
    3848:	f8 94       	cli
    384a:	de bf       	out	0x3e, r29	; 62
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	cd bf       	out	0x3d, r28	; 61
    3850:	9b 87       	std	Y+11, r25	; 0x0b
    3852:	8a 87       	std	Y+10, r24	; 0x0a
    3854:	7d 87       	std	Y+13, r23	; 0x0d
    3856:	6c 87       	std	Y+12, r22	; 0x0c

	int bytesRecieved = 0;
    3858:	1a 82       	std	Y+2, r1	; 0x02
    385a:	19 82       	std	Y+1, r1	; 0x01
	int numTries = 0;
    385c:	1c 82       	std	Y+4, r1	; 0x04
    385e:	1b 82       	std	Y+3, r1	; 0x03
	const int maxNumTries = 3;
    3860:	83 e0       	ldi	r24, 0x03	; 3
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	98 87       	std	Y+8, r25	; 0x08
    3866:	8f 83       	std	Y+7, r24	; 0x07
	unsigned char data;
	int timeout;

	while(numTries < maxNumTries){
    3868:	6d c0       	rjmp	.+218    	; 0x3944 <recievePayload+0x108>
		while(bytesRecieved < size){
    386a:	2e c0       	rjmp	.+92     	; 0x38c8 <recievePayload+0x8c>
			timeout = 50;
    386c:	82 e3       	ldi	r24, 0x32	; 50
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	9e 83       	std	Y+6, r25	; 0x06
    3872:	8d 83       	std	Y+5, r24	; 0x05
			while ( !(UCSR0A & (1<<RXC0)) ){
    3874:	10 c0       	rjmp	.+32     	; 0x3896 <recievePayload+0x5a>
  				timeout--;
    3876:	8d 81       	ldd	r24, Y+5	; 0x05
    3878:	9e 81       	ldd	r25, Y+6	; 0x06
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	9e 83       	std	Y+6, r25	; 0x06
    387e:	8d 83       	std	Y+5, r24	; 0x05
     			if(timeout == 0){
    3880:	8d 81       	ldd	r24, Y+5	; 0x05
    3882:	9e 81       	ldd	r25, Y+6	; 0x06
    3884:	00 97       	sbiw	r24, 0x00	; 0
    3886:	19 f4       	brne	.+6      	; 0x388e <recievePayload+0x52>
					return -1;
    3888:	8f ef       	ldi	r24, 0xFF	; 255
    388a:	9f ef       	ldi	r25, 0xFF	; 255
    388c:	65 c0       	rjmp	.+202    	; 0x3958 <recievePayload+0x11c>
     			}
     			vTaskDelay(1);
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
	int timeout;

	while(numTries < maxNumTries){
		while(bytesRecieved < size){
			timeout = 50;
			while ( !(UCSR0A & (1<<RXC0)) ){
    3896:	80 ec       	ldi	r24, 0xC0	; 192
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	fc 01       	movw	r30, r24
    389c:	80 81       	ld	r24, Z
    389e:	88 23       	and	r24, r24
    38a0:	54 f7       	brge	.-44     	; 0x3876 <recievePayload+0x3a>
     			if(timeout == 0){
					return -1;
     			}
     			vTaskDelay(1);
   		}
			data = UDR0;
    38a2:	86 ec       	ldi	r24, 0xC6	; 198
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	fc 01       	movw	r30, r24
    38a8:	80 81       	ld	r24, Z
    38aa:	89 87       	std	Y+9, r24	; 0x09
			buffer[bytesRecieved] = data;
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	9a 81       	ldd	r25, Y+2	; 0x02
    38b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    38b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    38b4:	82 0f       	add	r24, r18
    38b6:	93 1f       	adc	r25, r19
    38b8:	29 85       	ldd	r18, Y+9	; 0x09
    38ba:	fc 01       	movw	r30, r24
    38bc:	20 83       	st	Z, r18
			bytesRecieved++;
    38be:	89 81       	ldd	r24, Y+1	; 0x01
    38c0:	9a 81       	ldd	r25, Y+2	; 0x02
    38c2:	01 96       	adiw	r24, 0x01	; 1
    38c4:	9a 83       	std	Y+2, r25	; 0x02
    38c6:	89 83       	std	Y+1, r24	; 0x01
	const int maxNumTries = 3;
	unsigned char data;
	int timeout;

	while(numTries < maxNumTries){
		while(bytesRecieved < size){
    38c8:	29 81       	ldd	r18, Y+1	; 0x01
    38ca:	3a 81       	ldd	r19, Y+2	; 0x02
    38cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    38ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    38d0:	28 17       	cp	r18, r24
    38d2:	39 07       	cpc	r19, r25
    38d4:	5c f2       	brlt	.-106    	; 0x386c <recievePayload+0x30>
			data = UDR0;
			buffer[bytesRecieved] = data;
			bytesRecieved++;
		}
		
		timeout = 50;
    38d6:	82 e3       	ldi	r24, 0x32	; 50
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	9e 83       	std	Y+6, r25	; 0x06
    38dc:	8d 83       	std	Y+5, r24	; 0x05
		while ( !(UCSR0A & (1<<RXC0)) ){
    38de:	10 c0       	rjmp	.+32     	; 0x3900 <recievePayload+0xc4>
  			timeout--;
    38e0:	8d 81       	ldd	r24, Y+5	; 0x05
    38e2:	9e 81       	ldd	r25, Y+6	; 0x06
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	9e 83       	std	Y+6, r25	; 0x06
    38e8:	8d 83       	std	Y+5, r24	; 0x05
     		if(timeout == 0){
    38ea:	8d 81       	ldd	r24, Y+5	; 0x05
    38ec:	9e 81       	ldd	r25, Y+6	; 0x06
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	19 f4       	brne	.+6      	; 0x38f8 <recievePayload+0xbc>
				return -1;
    38f2:	8f ef       	ldi	r24, 0xFF	; 255
    38f4:	9f ef       	ldi	r25, 0xFF	; 255
    38f6:	30 c0       	rjmp	.+96     	; 0x3958 <recievePayload+0x11c>
     		}
     		vTaskDelay(1);
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
			buffer[bytesRecieved] = data;
			bytesRecieved++;
		}
		
		timeout = 50;
		while ( !(UCSR0A & (1<<RXC0)) ){
    3900:	80 ec       	ldi	r24, 0xC0	; 192
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	fc 01       	movw	r30, r24
    3906:	80 81       	ld	r24, Z
    3908:	88 23       	and	r24, r24
    390a:	54 f7       	brge	.-44     	; 0x38e0 <recievePayload+0xa4>
     		if(timeout == 0){
				return -1;
     		}
     		vTaskDelay(1);
   	}	
		data = UDR0;
    390c:	86 ec       	ldi	r24, 0xC6	; 198
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	fc 01       	movw	r30, r24
    3912:	80 81       	ld	r24, Z
    3914:	89 87       	std	Y+9, r24	; 0x09
		if(data != calcChecksum(buffer,size)){
    3916:	2a 85       	ldd	r18, Y+10	; 0x0a
    3918:	8c 85       	ldd	r24, Y+12	; 0x0c
    391a:	9d 85       	ldd	r25, Y+13	; 0x0d
    391c:	62 2f       	mov	r22, r18
    391e:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <calcChecksum>
    3922:	98 2f       	mov	r25, r24
    3924:	89 85       	ldd	r24, Y+9	; 0x09
    3926:	98 17       	cp	r25, r24
    3928:	41 f0       	breq	.+16     	; 0x393a <recievePayload+0xfe>
			sendNACK();
    392a:	0e 94 14 1c 	call	0x3828	; 0x3828 <sendNACK>
			numTries++;
    392e:	8b 81       	ldd	r24, Y+3	; 0x03
    3930:	9c 81       	ldd	r25, Y+4	; 0x04
    3932:	01 96       	adiw	r24, 0x01	; 1
    3934:	9c 83       	std	Y+4, r25	; 0x04
    3936:	8b 83       	std	Y+3, r24	; 0x03
    3938:	05 c0       	rjmp	.+10     	; 0x3944 <recievePayload+0x108>
		} else {
			sendACK();
    393a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <sendACK>
			return 0;
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	0a c0       	rjmp	.+20     	; 0x3958 <recievePayload+0x11c>
	int numTries = 0;
	const int maxNumTries = 3;
	unsigned char data;
	int timeout;

	while(numTries < maxNumTries){
    3944:	2b 81       	ldd	r18, Y+3	; 0x03
    3946:	3c 81       	ldd	r19, Y+4	; 0x04
    3948:	8f 81       	ldd	r24, Y+7	; 0x07
    394a:	98 85       	ldd	r25, Y+8	; 0x08
    394c:	28 17       	cp	r18, r24
    394e:	39 07       	cpc	r19, r25
    3950:	0c f4       	brge	.+2      	; 0x3954 <recievePayload+0x118>
    3952:	8b cf       	rjmp	.-234    	; 0x386a <recievePayload+0x2e>
		} else {
			sendACK();
			return 0;
		}
	}
	return -1;
    3954:	8f ef       	ldi	r24, 0xFF	; 255
    3956:	9f ef       	ldi	r25, 0xFF	; 255
}
    3958:	2d 96       	adiw	r28, 0x0d	; 13
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	df 91       	pop	r29
    3966:	cf 91       	pop	r28
    3968:	08 95       	ret

0000396a <vTaskUSARTRead>:

void vTaskUSARTRead(void *pvParameters){
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	cc 55       	subi	r28, 0x5C	; 92
    3974:	d1 09       	sbc	r29, r1
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	9e 01       	movw	r18, r28
    3982:	25 5a       	subi	r18, 0xA5	; 165
    3984:	3f 4f       	sbci	r19, 0xFF	; 255
    3986:	f9 01       	movw	r30, r18
    3988:	91 83       	std	Z+1, r25	; 0x01
    398a:	80 83       	st	Z, r24
    unsigned char size;
    char groupID;
    char cmd;
    unsigned int timeout;

	DDRB = 0xFF;
    398c:	84 e2       	ldi	r24, 0x24	; 36
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	2f ef       	ldi	r18, 0xFF	; 255
    3992:	fc 01       	movw	r30, r24
    3994:	20 83       	st	Z, r18

    Command command;
    Response response;
    while(1){
        bytesRecieved = 0;
    3996:	19 82       	std	Y+1, r1	; 0x01
        int timeout = 30;
    3998:	8e e1       	ldi	r24, 0x1E	; 30
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	9b 83       	std	Y+3, r25	; 0x03
    399e:	8a 83       	std	Y+2, r24	; 0x02
        while(bytesRecieved < 4){
    39a0:	2d c0       	rjmp	.+90     	; 0x39fc <vTaskUSARTRead+0x92>
            
            while ( !(UCSR0A & (1<<RXC0)) ){
    39a2:	12 c0       	rjmp	.+36     	; 0x39c8 <vTaskUSARTRead+0x5e>
                timeout--;
    39a4:	8a 81       	ldd	r24, Y+2	; 0x02
    39a6:	9b 81       	ldd	r25, Y+3	; 0x03
    39a8:	01 97       	sbiw	r24, 0x01	; 1
    39aa:	9b 83       	std	Y+3, r25	; 0x03
    39ac:	8a 83       	std	Y+2, r24	; 0x02
                if(timeout == 0){
    39ae:	8a 81       	ldd	r24, Y+2	; 0x02
    39b0:	9b 81       	ldd	r25, Y+3	; 0x03
    39b2:	00 97       	sbiw	r24, 0x00	; 0
    39b4:	29 f4       	brne	.+10     	; 0x39c0 <vTaskUSARTRead+0x56>
                    bytesRecieved = 0;
    39b6:	19 82       	std	Y+1, r1	; 0x01
                    timeout = 30;
    39b8:	8e e1       	ldi	r24, 0x1E	; 30
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	9b 83       	std	Y+3, r25	; 0x03
    39be:	8a 83       	std	Y+2, r24	; 0x02
                }
                vTaskDelay(1);
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
    while(1){
        bytesRecieved = 0;
        int timeout = 30;
        while(bytesRecieved < 4){
            
            while ( !(UCSR0A & (1<<RXC0)) ){
    39c8:	80 ec       	ldi	r24, 0xC0	; 192
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	fc 01       	movw	r30, r24
    39ce:	80 81       	ld	r24, Z
    39d0:	88 23       	and	r24, r24
    39d2:	44 f7       	brge	.-48     	; 0x39a4 <vTaskUSARTRead+0x3a>
                    bytesRecieved = 0;
                    timeout = 30;
                }
                vTaskDelay(1);
            }
            data = UDR0;
    39d4:	86 ec       	ldi	r24, 0xC6	; 198
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	fc 01       	movw	r30, r24
    39da:	80 81       	ld	r24, Z
    39dc:	8c 83       	std	Y+4, r24	; 0x04
            buffer[bytesRecieved] = data;
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	99 27       	eor	r25, r25
    39e2:	87 fd       	sbrc	r24, 7
    39e4:	90 95       	com	r25
    39e6:	9e 01       	movw	r18, r28
    39e8:	2a 5f       	subi	r18, 0xFA	; 250
    39ea:	3f 4f       	sbci	r19, 0xFF	; 255
    39ec:	82 0f       	add	r24, r18
    39ee:	93 1f       	adc	r25, r19
    39f0:	2c 81       	ldd	r18, Y+4	; 0x04
    39f2:	fc 01       	movw	r30, r24
    39f4:	20 83       	st	Z, r18
            bytesRecieved++;        
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
    39f8:	8f 5f       	subi	r24, 0xFF	; 255
    39fa:	89 83       	std	Y+1, r24	; 0x01
    Command command;
    Response response;
    while(1){
        bytesRecieved = 0;
        int timeout = 30;
        while(bytesRecieved < 4){
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
    39fe:	84 30       	cpi	r24, 0x04	; 4
    3a00:	84 f2       	brlt	.-96     	; 0x39a2 <vTaskUSARTRead+0x38>
            data = UDR0;
            buffer[bytesRecieved] = data;
            bytesRecieved++;        
        }

        if(calcChecksum(buffer,3) != buffer[3]){
    3a02:	ce 01       	movw	r24, r28
    3a04:	06 96       	adiw	r24, 0x06	; 6
    3a06:	63 e0       	ldi	r22, 0x03	; 3
    3a08:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <calcChecksum>
    3a0c:	98 2f       	mov	r25, r24
    3a0e:	89 85       	ldd	r24, Y+9	; 0x09
    3a10:	98 17       	cp	r25, r24
    3a12:	21 f0       	breq	.+8      	; 0x3a1c <vTaskUSARTRead+0xb2>
            sendNACK();
    3a14:	0e 94 14 1c 	call	0x3828	; 0x3828 <sendNACK>
            bytesRecieved = 0;
    3a18:	19 82       	std	Y+1, r1	; 0x01
    3a1a:	29 c0       	rjmp	.+82     	; 0x3a6e <vTaskUSARTRead+0x104>
        } else {
            sendACK();
    3a1c:	0e 94 0a 1c 	call	0x3814	; 0x3814 <sendACK>
            bytesRecieved = 0;
    3a20:	19 82       	std	Y+1, r1	; 0x01
				command.groupID = buffer[0];
    3a22:	8e 81       	ldd	r24, Y+6	; 0x06
    3a24:	8e 8b       	std	Y+22, r24	; 0x16
				command.cmd = buffer[1];
    3a26:	8f 81       	ldd	r24, Y+7	; 0x07
    3a28:	8f 8b       	std	Y+23, r24	; 0x17
				size = buffer[2];
    3a2a:	88 85       	ldd	r24, Y+8	; 0x08
    3a2c:	8d 83       	std	Y+5, r24	; 0x05

				if(size > 0){ //No dynamic memory allocations. 16 is the size of the buffer
    3a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a30:	88 23       	and	r24, r24
    3a32:	81 f0       	breq	.+32     	; 0x3a54 <vTaskUSARTRead+0xea>
					if(recievePayload(size,command.payload) == -1){
    3a34:	8d 81       	ldd	r24, Y+5	; 0x05
    3a36:	88 2f       	mov	r24, r24
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	9e 01       	movw	r18, r28
    3a3c:	2a 5e       	subi	r18, 0xEA	; 234
    3a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a40:	2d 5f       	subi	r18, 0xFD	; 253
    3a42:	3f 4f       	sbci	r19, 0xFF	; 255
    3a44:	b9 01       	movw	r22, r18
    3a46:	0e 94 1e 1c 	call	0x383c	; 0x383c <recievePayload>
    3a4a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a4c:	ff ef       	ldi	r31, 0xFF	; 255
    3a4e:	9f 07       	cpc	r25, r31
    3a50:	09 f4       	brne	.+2      	; 0x3a54 <vTaskUSARTRead+0xea>
						continue;	//Restart comms
    3a52:	0d c0       	rjmp	.+26     	; 0x3a6e <vTaskUSARTRead+0x104>
					}
				}
				
 
            processCommand(&command,&response);
    3a54:	9e 01       	movw	r18, r28
    3a56:	27 5c       	subi	r18, 0xC7	; 199
    3a58:	3f 4f       	sbci	r19, 0xFF	; 255
    3a5a:	ce 01       	movw	r24, r28
    3a5c:	46 96       	adiw	r24, 0x16	; 22
    3a5e:	b9 01       	movw	r22, r18
    3a60:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <processCommand>
            sendResponse(&response);
    3a64:	ce 01       	movw	r24, r28
    3a66:	c9 96       	adiw	r24, 0x39	; 57
    3a68:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <sendResponse>

        }

    }
    3a6c:	94 cf       	rjmp	.-216    	; 0x3996 <vTaskUSARTRead+0x2c>
    3a6e:	93 cf       	rjmp	.-218    	; 0x3996 <vTaskUSARTRead+0x2c>

00003a70 <sendResponse>:

}

int sendResponse(Response* response){
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
    3a78:	28 97       	sbiw	r28, 0x08	; 8
    3a7a:	0f b6       	in	r0, 0x3f	; 63
    3a7c:	f8 94       	cli
    3a7e:	de bf       	out	0x3e, r29	; 62
    3a80:	0f be       	out	0x3f, r0	; 63
    3a82:	cd bf       	out	0x3d, r28	; 61
    3a84:	98 87       	std	Y+8, r25	; 0x08
    3a86:	8f 83       	std	Y+7, r24	; 0x07
    char checksumBuffer[2];
    int i;
    int timeout = 50;
    3a88:	82 e3       	ldi	r24, 0x32	; 50
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	9c 83       	std	Y+4, r25	; 0x04
    3a8e:	8b 83       	std	Y+3, r24	; 0x03
    while(1){
        	USART_Write(response->commandBack);
    3a90:	8f 81       	ldd	r24, Y+7	; 0x07
    3a92:	98 85       	ldd	r25, Y+8	; 0x08
    3a94:	fc 01       	movw	r30, r24
    3a96:	80 81       	ld	r24, Z
    3a98:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
			vTaskDelay(1);
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
        	USART_Write(response->size);
    3aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    3aa6:	98 85       	ldd	r25, Y+8	; 0x08
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	81 81       	ldd	r24, Z+1	; 0x01
    3aac:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
			vTaskDelay(1);
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
        	checksumBuffer[0] = response->commandBack;
    3ab8:	8f 81       	ldd	r24, Y+7	; 0x07
    3aba:	98 85       	ldd	r25, Y+8	; 0x08
    3abc:	fc 01       	movw	r30, r24
    3abe:	80 81       	ld	r24, Z
    3ac0:	8d 83       	std	Y+5, r24	; 0x05
        	checksumBuffer[1] = response->size;
    3ac2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ac4:	98 85       	ldd	r25, Y+8	; 0x08
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	81 81       	ldd	r24, Z+1	; 0x01
    3aca:	8e 83       	std	Y+6, r24	; 0x06
        	USART_Write(calcChecksum(checksumBuffer,2));
    3acc:	ce 01       	movw	r24, r28
    3ace:	05 96       	adiw	r24, 0x05	; 5
    3ad0:	62 e0       	ldi	r22, 0x02	; 2
    3ad2:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <calcChecksum>
    3ad6:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
        	switch(waitForAck()){
    3ada:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <waitForAck>
    3ade:	99 27       	eor	r25, r25
    3ae0:	87 fd       	sbrc	r24, 7
    3ae2:	90 95       	com	r25
    3ae4:	00 97       	sbiw	r24, 0x00	; 0
    3ae6:	59 f0       	breq	.+22     	; 0x3afe <sendResponse+0x8e>
    3ae8:	81 30       	cpi	r24, 0x01	; 1
    3aea:	91 05       	cpc	r25, r1
    3aec:	a9 f0       	breq	.+42     	; 0x3b18 <sendResponse+0xa8>
    3aee:	8f 3f       	cpi	r24, 0xFF	; 255
    3af0:	ff ef       	ldi	r31, 0xFF	; 255
    3af2:	9f 07       	cpc	r25, r31
    3af4:	09 f0       	breq	.+2      	; 0x3af8 <sendResponse+0x88>
           	timeout--;
           	if(!timeout){
              	return -1;
           	}
        	}
    }
    3af6:	cc cf       	rjmp	.-104    	; 0x3a90 <sendResponse+0x20>
        	USART_Write(calcChecksum(checksumBuffer,2));
        	switch(waitForAck()){
        	case 1:
           	goto outOfWhile;
        	case -1:
           	return -1;
    3af8:	8f ef       	ldi	r24, 0xFF	; 255
    3afa:	9f ef       	ldi	r25, 0xFF	; 255
    3afc:	43 c0       	rjmp	.+134    	; 0x3b84 <sendResponse+0x114>
        	case 0:
           	timeout--;
    3afe:	8b 81       	ldd	r24, Y+3	; 0x03
    3b00:	9c 81       	ldd	r25, Y+4	; 0x04
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	9c 83       	std	Y+4, r25	; 0x04
    3b06:	8b 83       	std	Y+3, r24	; 0x03
           	if(!timeout){
    3b08:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b0c:	00 97       	sbiw	r24, 0x00	; 0
    3b0e:	19 f4       	brne	.+6      	; 0x3b16 <sendResponse+0xa6>
              	return -1;
    3b10:	8f ef       	ldi	r24, 0xFF	; 255
    3b12:	9f ef       	ldi	r25, 0xFF	; 255
    3b14:	37 c0       	rjmp	.+110    	; 0x3b84 <sendResponse+0x114>
           	}
        	}
    }
    3b16:	bc cf       	rjmp	.-136    	; 0x3a90 <sendResponse+0x20>
        	checksumBuffer[0] = response->commandBack;
        	checksumBuffer[1] = response->size;
        	USART_Write(calcChecksum(checksumBuffer,2));
        	switch(waitForAck()){
        	case 1:
           	goto outOfWhile;
    3b18:	00 00       	nop
    }

    outOfWhile:


    for(i=0;i<response->size;i++){
    3b1a:	1a 82       	std	Y+2, r1	; 0x02
    3b1c:	19 82       	std	Y+1, r1	; 0x01
    3b1e:	14 c0       	rjmp	.+40     	; 0x3b48 <sendResponse+0xd8>
        USART_Write(response->payload[i]);
    3b20:	2f 81       	ldd	r18, Y+7	; 0x07
    3b22:	38 85       	ldd	r19, Y+8	; 0x08
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	9a 81       	ldd	r25, Y+2	; 0x02
    3b28:	82 0f       	add	r24, r18
    3b2a:	93 1f       	adc	r25, r19
    3b2c:	02 96       	adiw	r24, 0x02	; 2
    3b2e:	fc 01       	movw	r30, r24
    3b30:	80 81       	ld	r24, Z
    3b32:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
			vTaskDelay(1);
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
    }

    outOfWhile:


    for(i=0;i<response->size;i++){
    3b3e:	89 81       	ldd	r24, Y+1	; 0x01
    3b40:	9a 81       	ldd	r25, Y+2	; 0x02
    3b42:	01 96       	adiw	r24, 0x01	; 1
    3b44:	9a 83       	std	Y+2, r25	; 0x02
    3b46:	89 83       	std	Y+1, r24	; 0x01
    3b48:	8f 81       	ldd	r24, Y+7	; 0x07
    3b4a:	98 85       	ldd	r25, Y+8	; 0x08
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	81 81       	ldd	r24, Z+1	; 0x01
    3b50:	28 2f       	mov	r18, r24
    3b52:	33 27       	eor	r19, r19
    3b54:	27 fd       	sbrc	r18, 7
    3b56:	30 95       	com	r19
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5c:	82 17       	cp	r24, r18
    3b5e:	93 07       	cpc	r25, r19
    3b60:	fc f2       	brlt	.-66     	; 0x3b20 <sendResponse+0xb0>
        USART_Write(response->payload[i]);
			vTaskDelay(1);
		  //USART_AddToQueue(0x30 | (i + 2));
        //USART_AddToQueue()
    }
    USART_Write(calcChecksum((uint8_t*)response->payload,response->size));
    3b62:	8f 81       	ldd	r24, Y+7	; 0x07
    3b64:	98 85       	ldd	r25, Y+8	; 0x08
    3b66:	fc 01       	movw	r30, r24
    3b68:	81 81       	ldd	r24, Z+1	; 0x01
    3b6a:	28 2f       	mov	r18, r24
    3b6c:	8f 81       	ldd	r24, Y+7	; 0x07
    3b6e:	98 85       	ldd	r25, Y+8	; 0x08
    3b70:	02 96       	adiw	r24, 0x02	; 2
    3b72:	62 2f       	mov	r22, r18
    3b74:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <calcChecksum>
    3b78:	0e 94 b3 1a 	call	0x3566	; 0x3566 <USART_Write>
	 

    waitForAck();
    3b7c:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <waitForAck>

    return 0;
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	90 e0       	ldi	r25, 0x00	; 0

}
    3b84:	28 96       	adiw	r28, 0x08	; 8
    3b86:	0f b6       	in	r0, 0x3f	; 63
    3b88:	f8 94       	cli
    3b8a:	de bf       	out	0x3e, r29	; 62
    3b8c:	0f be       	out	0x3f, r0	; 63
    3b8e:	cd bf       	out	0x3d, r28	; 61
    3b90:	df 91       	pop	r29
    3b92:	cf 91       	pop	r28
    3b94:	08 95       	ret

00003b96 <waitForAck>:

char waitForAck(){
    3b96:	cf 93       	push	r28
    3b98:	df 93       	push	r29
    3b9a:	1f 92       	push	r1
    3b9c:	1f 92       	push	r1
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
    int timeout = 5000;
    3ba2:	88 e8       	ldi	r24, 0x88	; 136
    3ba4:	93 e1       	ldi	r25, 0x13	; 19
    3ba6:	9a 83       	std	Y+2, r25	; 0x02
    3ba8:	89 83       	std	Y+1, r24	; 0x01
    while ( !(UCSR2A & (1<<RXC2)) ){
    3baa:	0b c0       	rjmp	.+22     	; 0x3bc2 <waitForAck+0x2c>
        timeout--;
    3bac:	89 81       	ldd	r24, Y+1	; 0x01
    3bae:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	9a 83       	std	Y+2, r25	; 0x02
    3bb4:	89 83       	std	Y+1, r24	; 0x01
        if(!timeout){
    3bb6:	89 81       	ldd	r24, Y+1	; 0x01
    3bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bba:	00 97       	sbiw	r24, 0x00	; 0
    3bbc:	11 f4       	brne	.+4      	; 0x3bc2 <waitForAck+0x2c>
            return -1;
    3bbe:	8f ef       	ldi	r24, 0xFF	; 255
    3bc0:	0f c0       	rjmp	.+30     	; 0x3be0 <waitForAck+0x4a>

}

char waitForAck(){
    int timeout = 5000;
    while ( !(UCSR2A & (1<<RXC2)) ){
    3bc2:	80 ed       	ldi	r24, 0xD0	; 208
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	80 81       	ld	r24, Z
    3bca:	88 23       	and	r24, r24
    3bcc:	7c f7       	brge	.-34     	; 0x3bac <waitForAck+0x16>
        timeout--;
        if(!timeout){
            return -1;
        }
    }
    if(UDR2 == ACK_BYTE){
    3bce:	86 ed       	ldi	r24, 0xD6	; 214
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	80 81       	ld	r24, Z
    3bd6:	80 38       	cpi	r24, 0x80	; 128
    3bd8:	11 f4       	brne	.+4      	; 0x3bde <waitForAck+0x48>
        return 1;
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	01 c0       	rjmp	.+2      	; 0x3be0 <waitForAck+0x4a>
    } else {
        return 0;
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    3be0:	0f 90       	pop	r0
    3be2:	0f 90       	pop	r0
    3be4:	df 91       	pop	r29
    3be6:	cf 91       	pop	r28
    3be8:	08 95       	ret

00003bea <calcChecksum>:

uint8_t calcChecksum(uint8_t* buffer,uint8_t size){
    3bea:	cf 93       	push	r28
    3bec:	df 93       	push	r29
    3bee:	00 d0       	rcall	.+0      	; 0x3bf0 <calcChecksum+0x6>
    3bf0:	00 d0       	rcall	.+0      	; 0x3bf2 <calcChecksum+0x8>
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	9d 83       	std	Y+5, r25	; 0x05
    3bf8:	8c 83       	std	Y+4, r24	; 0x04
    3bfa:	6e 83       	std	Y+6, r22	; 0x06
    uint8_t checksum = 0;
    3bfc:	19 82       	std	Y+1, r1	; 0x01
    for(int i = 0; i < size; i++) {
    3bfe:	1b 82       	std	Y+3, r1	; 0x03
    3c00:	1a 82       	std	Y+2, r1	; 0x02
    3c02:	11 c0       	rjmp	.+34     	; 0x3c26 <calcChecksum+0x3c>
        checksum += *(buffer++);
    3c04:	8c 81       	ldd	r24, Y+4	; 0x04
    3c06:	9d 81       	ldd	r25, Y+5	; 0x05
    3c08:	9c 01       	movw	r18, r24
    3c0a:	2f 5f       	subi	r18, 0xFF	; 255
    3c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c0e:	3d 83       	std	Y+5, r19	; 0x05
    3c10:	2c 83       	std	Y+4, r18	; 0x04
    3c12:	fc 01       	movw	r30, r24
    3c14:	80 81       	ld	r24, Z
    3c16:	99 81       	ldd	r25, Y+1	; 0x01
    3c18:	89 0f       	add	r24, r25
    3c1a:	89 83       	std	Y+1, r24	; 0x01
    }
}

uint8_t calcChecksum(uint8_t* buffer,uint8_t size){
    uint8_t checksum = 0;
    for(int i = 0; i < size; i++) {
    3c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c20:	01 96       	adiw	r24, 0x01	; 1
    3c22:	9b 83       	std	Y+3, r25	; 0x03
    3c24:	8a 83       	std	Y+2, r24	; 0x02
    3c26:	8e 81       	ldd	r24, Y+6	; 0x06
    3c28:	28 2f       	mov	r18, r24
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c30:	82 17       	cp	r24, r18
    3c32:	93 07       	cpc	r25, r19
    3c34:	3c f3       	brlt	.-50     	; 0x3c04 <calcChecksum+0x1a>
        checksum += *(buffer++);
    }
    return checksum;
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c38:	26 96       	adiw	r28, 0x06	; 6
    3c3a:	0f b6       	in	r0, 0x3f	; 63
    3c3c:	f8 94       	cli
    3c3e:	de bf       	out	0x3e, r29	; 62
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	cd bf       	out	0x3d, r28	; 61
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	08 95       	ret

00003c4a <commandIntegCheck>:
#include "protocol.h"
#include "Components/Sonar/Sonar.h"


//function to CRC the command structure
char commandIntegCheck(Command *command) {
    3c4a:	cf 93       	push	r28
    3c4c:	df 93       	push	r29
    3c4e:	1f 92       	push	r1
    3c50:	1f 92       	push	r1
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62
    3c56:	9a 83       	std	Y+2, r25	; 0x02
    3c58:	89 83       	std	Y+1, r24	; 0x01
   //CRC the command with 0x00 in place of the CRC
   //return success for now
   return 1;
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
}
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	df 91       	pop	r29
    3c62:	cf 91       	pop	r28
    3c64:	08 95       	ret

00003c66 <processUltrasonicCommand>:

char processUltrasonicCommand(char commandCode, void* commandData,char* size, void* responseData) {
    3c66:	cf 93       	push	r28
    3c68:	df 93       	push	r29
    3c6a:	cd b7       	in	r28, 0x3d	; 61
    3c6c:	de b7       	in	r29, 0x3e	; 62
    3c6e:	27 97       	sbiw	r28, 0x07	; 7
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	89 83       	std	Y+1, r24	; 0x01
    3c7c:	7b 83       	std	Y+3, r23	; 0x03
    3c7e:	6a 83       	std	Y+2, r22	; 0x02
    3c80:	5d 83       	std	Y+5, r21	; 0x05
    3c82:	4c 83       	std	Y+4, r20	; 0x04
    3c84:	3f 83       	std	Y+7, r19	; 0x07
    3c86:	2e 83       	std	Y+6, r18	; 0x06
   switch(commandCode) {
    3c88:	89 81       	ldd	r24, Y+1	; 0x01
    3c8a:	99 27       	eor	r25, r25
    3c8c:	87 fd       	sbrc	r24, 7
    3c8e:	90 95       	com	r25
    3c90:	82 30       	cpi	r24, 0x02	; 2
    3c92:	91 05       	cpc	r25, r1
    3c94:	81 f0       	breq	.+32     	; 0x3cb6 <processUltrasonicCommand+0x50>
    3c96:	83 30       	cpi	r24, 0x03	; 3
    3c98:	91 05       	cpc	r25, r1
    3c9a:	c1 f0       	breq	.+48     	; 0x3ccc <processUltrasonicCommand+0x66>
    3c9c:	81 30       	cpi	r24, 0x01	; 1
    3c9e:	91 05       	cpc	r25, r1
    3ca0:	01 f5       	brne	.+64     	; 0x3ce2 <processUltrasonicCommand+0x7c>
      case GET_ALL_SENSORS:
         getAllSensors((int*) responseData);
    3ca2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ca4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ca6:	0e 94 70 22 	call	0x44e0	; 0x44e0 <getAllSensors>
         *size = 12;
    3caa:	8c 81       	ldd	r24, Y+4	; 0x04
    3cac:	9d 81       	ldd	r25, Y+5	; 0x05
    3cae:	2c e0       	ldi	r18, 0x0C	; 12
    3cb0:	fc 01       	movw	r30, r24
    3cb2:	20 83       	st	Z, r18
         break;
    3cb4:	16 c0       	rjmp	.+44     	; 0x3ce2 <processUltrasonicCommand+0x7c>
      case GET_CERTAIN_SENSORS:
         getCertainSensor(((char*)commandData)[0], (int*) responseData);
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    3cba:	fc 01       	movw	r30, r24
    3cbc:	20 81       	ld	r18, Z
    3cbe:	8e 81       	ldd	r24, Y+6	; 0x06
    3cc0:	9f 81       	ldd	r25, Y+7	; 0x07
    3cc2:	bc 01       	movw	r22, r24
    3cc4:	82 2f       	mov	r24, r18
    3cc6:	0e 94 9b 22 	call	0x4536	; 0x4536 <getCertainSensor>
         break;
    3cca:	0b c0       	rjmp	.+22     	; 0x3ce2 <processUltrasonicCommand+0x7c>
      case GET_SENSOR_GROUP:
         getSensorGroup(((char*)commandData)[0], (int*) responseData);
    3ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cce:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd0:	fc 01       	movw	r30, r24
    3cd2:	20 81       	ld	r18, Z
    3cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    3cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    3cd8:	bc 01       	movw	r22, r24
    3cda:	82 2f       	mov	r24, r18
    3cdc:	0e 94 c4 22 	call	0x4588	; 0x4588 <getSensorGroup>
         break;
    3ce0:	00 00       	nop
   }
   //return success for now...
   return 1;
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
}
    3ce4:	27 96       	adiw	r28, 0x07	; 7
    3ce6:	0f b6       	in	r0, 0x3f	; 63
    3ce8:	f8 94       	cli
    3cea:	de bf       	out	0x3e, r29	; 62
    3cec:	0f be       	out	0x3f, r0	; 63
    3cee:	cd bf       	out	0x3d, r28	; 61
    3cf0:	df 91       	pop	r29
    3cf2:	cf 91       	pop	r28
    3cf4:	08 95       	ret

00003cf6 <processSpeedCommand>:

char processSpeedCommand(char commandCode, void* commandData, Response* responseData) {
    3cf6:	cf 93       	push	r28
    3cf8:	df 93       	push	r29
    3cfa:	00 d0       	rcall	.+0      	; 0x3cfc <processSpeedCommand+0x6>
    3cfc:	1f 92       	push	r1
    3cfe:	1f 92       	push	r1
    3d00:	cd b7       	in	r28, 0x3d	; 61
    3d02:	de b7       	in	r29, 0x3e	; 62
    3d04:	89 83       	std	Y+1, r24	; 0x01
    3d06:	7b 83       	std	Y+3, r23	; 0x03
    3d08:	6a 83       	std	Y+2, r22	; 0x02
    3d0a:	5d 83       	std	Y+5, r21	; 0x05
    3d0c:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3d0e:	89 81       	ldd	r24, Y+1	; 0x01
    3d10:	99 27       	eor	r25, r25
    3d12:	87 fd       	sbrc	r24, 7
    3d14:	90 95       	com	r25
    3d16:	00 97       	sbiw	r24, 0x00	; 0
    3d18:	21 f0       	breq	.+8      	; 0x3d22 <processSpeedCommand+0x2c>
    3d1a:	81 30       	cpi	r24, 0x01	; 1
    3d1c:	91 05       	cpc	r25, r1
    3d1e:	31 f0       	breq	.+12     	; 0x3d2c <processSpeedCommand+0x36>
    3d20:	13 c0       	rjmp	.+38     	; 0x3d48 <processSpeedCommand+0x52>
      case GET_SPEED:
         getSpeed((char*) responseData);
    3d22:	8c 81       	ldd	r24, Y+4	; 0x04
    3d24:	9d 81       	ldd	r25, Y+5	; 0x05
    3d26:	0e 94 63 23 	call	0x46c6	; 0x46c6 <getSpeed>
         break;
    3d2a:	0e c0       	rjmp	.+28     	; 0x3d48 <processSpeedCommand+0x52>
      case SET_SPEED:
			responseData->size = 0;
    3d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d30:	fc 01       	movw	r30, r24
    3d32:	11 82       	std	Z+1, r1	; 0x01
         setSpeed(((char*)commandData)[0]);
    3d34:	8a 81       	ldd	r24, Y+2	; 0x02
    3d36:	9b 81       	ldd	r25, Y+3	; 0x03
    3d38:	fc 01       	movw	r30, r24
    3d3a:	80 81       	ld	r24, Z
    3d3c:	99 27       	eor	r25, r25
    3d3e:	87 fd       	sbrc	r24, 7
    3d40:	90 95       	com	r25
    3d42:	0e 94 75 23 	call	0x46ea	; 0x46ea <setSpeed>
         break;
    3d46:	00 00       	nop
   }
   //return success for now
   return 1;
    3d48:	81 e0       	ldi	r24, 0x01	; 1
}
    3d4a:	0f 90       	pop	r0
    3d4c:	0f 90       	pop	r0
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	0f 90       	pop	r0
    3d54:	df 91       	pop	r29
    3d56:	cf 91       	pop	r28
    3d58:	08 95       	ret

00003d5a <processSteeringCommand>:

char processSteeringCommand(char commandCode, void* commandData, void* responseData) {
    3d5a:	cf 93       	push	r28
    3d5c:	df 93       	push	r29
    3d5e:	00 d0       	rcall	.+0      	; 0x3d60 <processSteeringCommand+0x6>
    3d60:	1f 92       	push	r1
    3d62:	1f 92       	push	r1
    3d64:	cd b7       	in	r28, 0x3d	; 61
    3d66:	de b7       	in	r29, 0x3e	; 62
    3d68:	89 83       	std	Y+1, r24	; 0x01
    3d6a:	7b 83       	std	Y+3, r23	; 0x03
    3d6c:	6a 83       	std	Y+2, r22	; 0x02
    3d6e:	5d 83       	std	Y+5, r21	; 0x05
    3d70:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	99 27       	eor	r25, r25
    3d76:	87 fd       	sbrc	r24, 7
    3d78:	90 95       	com	r25
    3d7a:	82 30       	cpi	r24, 0x02	; 2
    3d7c:	91 05       	cpc	r25, r1
    3d7e:	f9 f0       	breq	.+62     	; 0x3dbe <processSteeringCommand+0x64>
    3d80:	83 30       	cpi	r24, 0x03	; 3
    3d82:	91 05       	cpc	r25, r1
    3d84:	34 f4       	brge	.+12     	; 0x3d92 <processSteeringCommand+0x38>
    3d86:	00 97       	sbiw	r24, 0x00	; 0
    3d88:	59 f0       	breq	.+22     	; 0x3da0 <processSteeringCommand+0x46>
    3d8a:	81 30       	cpi	r24, 0x01	; 1
    3d8c:	91 05       	cpc	r25, r1
    3d8e:	91 f0       	breq	.+36     	; 0x3db4 <processSteeringCommand+0x5a>
    3d90:	4c c0       	rjmp	.+152    	; 0x3e2a <processSteeringCommand+0xd0>
    3d92:	83 30       	cpi	r24, 0x03	; 3
    3d94:	91 05       	cpc	r25, r1
    3d96:	c1 f0       	breq	.+48     	; 0x3dc8 <processSteeringCommand+0x6e>
    3d98:	84 30       	cpi	r24, 0x04	; 4
    3d9a:	91 05       	cpc	r25, r1
    3d9c:	91 f1       	breq	.+100    	; 0x3e02 <processSteeringCommand+0xa8>
    3d9e:	45 c0       	rjmp	.+138    	; 0x3e2a <processSteeringCommand+0xd0>
      case SET_ANGLE:
         setAngle(*((char*)commandData));
    3da0:	8a 81       	ldd	r24, Y+2	; 0x02
    3da2:	9b 81       	ldd	r25, Y+3	; 0x03
    3da4:	fc 01       	movw	r30, r24
    3da6:	80 81       	ld	r24, Z
    3da8:	99 27       	eor	r25, r25
    3daa:	87 fd       	sbrc	r24, 7
    3dac:	90 95       	com	r25
    3dae:	0e 94 34 24 	call	0x4868	; 0x4868 <setAngle>
         break;
    3db2:	3b c0       	rjmp	.+118    	; 0x3e2a <processSteeringCommand+0xd0>
      case GET_ANGLE:
         getAngle((char*) responseData);
    3db4:	8c 81       	ldd	r24, Y+4	; 0x04
    3db6:	9d 81       	ldd	r25, Y+5	; 0x05
    3db8:	0e 94 47 24 	call	0x488e	; 0x488e <getAngle>
         break;
    3dbc:	36 c0       	rjmp	.+108    	; 0x3e2a <processSteeringCommand+0xd0>
      case GET_DESIRED_ANGLE:
         getDesiredAngle((char*) responseData);
    3dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    3dc2:	0e 94 59 24 	call	0x48b2	; 0x48b2 <getDesiredAngle>
         break;
    3dc6:	31 c0       	rjmp	.+98     	; 0x3e2a <processSteeringCommand+0xd0>
      case CHANGE_PID:
         changePID(((char*)commandData)[0], ((char*)commandData)[1], ((char*)commandData)[2]);
    3dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dca:	9b 81       	ldd	r25, Y+3	; 0x03
    3dcc:	02 96       	adiw	r24, 0x02	; 2
    3dce:	fc 01       	movw	r30, r24
    3dd0:	80 81       	ld	r24, Z
    3dd2:	48 2f       	mov	r20, r24
    3dd4:	55 27       	eor	r21, r21
    3dd6:	47 fd       	sbrc	r20, 7
    3dd8:	50 95       	com	r21
    3dda:	8a 81       	ldd	r24, Y+2	; 0x02
    3ddc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dde:	01 96       	adiw	r24, 0x01	; 1
    3de0:	fc 01       	movw	r30, r24
    3de2:	80 81       	ld	r24, Z
    3de4:	28 2f       	mov	r18, r24
    3de6:	33 27       	eor	r19, r19
    3de8:	27 fd       	sbrc	r18, 7
    3dea:	30 95       	com	r19
    3dec:	8a 81       	ldd	r24, Y+2	; 0x02
    3dee:	9b 81       	ldd	r25, Y+3	; 0x03
    3df0:	fc 01       	movw	r30, r24
    3df2:	80 81       	ld	r24, Z
    3df4:	99 27       	eor	r25, r25
    3df6:	87 fd       	sbrc	r24, 7
    3df8:	90 95       	com	r25
    3dfa:	b9 01       	movw	r22, r18
    3dfc:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <changePID>
         break;
    3e00:	14 c0       	rjmp	.+40     	; 0x3e2a <processSteeringCommand+0xd0>
      case SET_LIMITS:
         setLimits(((char*)commandData)[0], ((char*)commandData)[1]);
    3e02:	8a 81       	ldd	r24, Y+2	; 0x02
    3e04:	9b 81       	ldd	r25, Y+3	; 0x03
    3e06:	01 96       	adiw	r24, 0x01	; 1
    3e08:	fc 01       	movw	r30, r24
    3e0a:	80 81       	ld	r24, Z
    3e0c:	28 2f       	mov	r18, r24
    3e0e:	33 27       	eor	r19, r19
    3e10:	27 fd       	sbrc	r18, 7
    3e12:	30 95       	com	r19
    3e14:	8a 81       	ldd	r24, Y+2	; 0x02
    3e16:	9b 81       	ldd	r25, Y+3	; 0x03
    3e18:	fc 01       	movw	r30, r24
    3e1a:	80 81       	ld	r24, Z
    3e1c:	99 27       	eor	r25, r25
    3e1e:	87 fd       	sbrc	r24, 7
    3e20:	90 95       	com	r25
    3e22:	b9 01       	movw	r22, r18
    3e24:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <setLimits>
         break;
    3e28:	00 00       	nop
   }
   //return success for now
   return 1;
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
}
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	0f 90       	pop	r0
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	08 95       	ret

00003e3c <processFNRCommand>:

char processFNRCommand(char commandCode, void* commandData, Response* responseData) {
    3e3c:	cf 93       	push	r28
    3e3e:	df 93       	push	r29
    3e40:	00 d0       	rcall	.+0      	; 0x3e42 <processFNRCommand+0x6>
    3e42:	1f 92       	push	r1
    3e44:	1f 92       	push	r1
    3e46:	cd b7       	in	r28, 0x3d	; 61
    3e48:	de b7       	in	r29, 0x3e	; 62
    3e4a:	89 83       	std	Y+1, r24	; 0x01
    3e4c:	7b 83       	std	Y+3, r23	; 0x03
    3e4e:	6a 83       	std	Y+2, r22	; 0x02
    3e50:	5d 83       	std	Y+5, r21	; 0x05
    3e52:	4c 83       	std	Y+4, r20	; 0x04
	responseData->size = 0;	
    3e54:	8c 81       	ldd	r24, Y+4	; 0x04
    3e56:	9d 81       	ldd	r25, Y+5	; 0x05
    3e58:	fc 01       	movw	r30, r24
    3e5a:	11 82       	std	Z+1, r1	; 0x01
   switch(commandCode) {
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01
    3e5e:	99 27       	eor	r25, r25
    3e60:	87 fd       	sbrc	r24, 7
    3e62:	90 95       	com	r25
    3e64:	00 97       	sbiw	r24, 0x00	; 0
    3e66:	21 f0       	breq	.+8      	; 0x3e70 <processFNRCommand+0x34>
    3e68:	81 30       	cpi	r24, 0x01	; 1
    3e6a:	91 05       	cpc	r25, r1
    3e6c:	59 f0       	breq	.+22     	; 0x3e84 <processFNRCommand+0x48>
    3e6e:	0f c0       	rjmp	.+30     	; 0x3e8e <processFNRCommand+0x52>
      case SET_FNR:
         setFNR(*((char*)commandData));
    3e70:	8a 81       	ldd	r24, Y+2	; 0x02
    3e72:	9b 81       	ldd	r25, Y+3	; 0x03
    3e74:	fc 01       	movw	r30, r24
    3e76:	80 81       	ld	r24, Z
    3e78:	99 27       	eor	r25, r25
    3e7a:	87 fd       	sbrc	r24, 7
    3e7c:	90 95       	com	r25
    3e7e:	0e 94 26 21 	call	0x424c	; 0x424c <setFNR>
         break;
    3e82:	05 c0       	rjmp	.+10     	; 0x3e8e <processFNRCommand+0x52>
      case GET_FNR:
         getFNR((char*) responseData);
    3e84:	8c 81       	ldd	r24, Y+4	; 0x04
    3e86:	9d 81       	ldd	r25, Y+5	; 0x05
    3e88:	0e 94 42 21 	call	0x4284	; 0x4284 <getFNR>
         break;
    3e8c:	00 00       	nop
   }
}
    3e8e:	0f 90       	pop	r0
    3e90:	0f 90       	pop	r0
    3e92:	0f 90       	pop	r0
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	df 91       	pop	r29
    3e9a:	cf 91       	pop	r28
    3e9c:	08 95       	ret

00003e9e <processBrakeCommand>:

char processBrakeCommand(char commandCode, void* commandData, void* responseData) {
    3e9e:	cf 93       	push	r28
    3ea0:	df 93       	push	r29
    3ea2:	00 d0       	rcall	.+0      	; 0x3ea4 <processBrakeCommand+0x6>
    3ea4:	1f 92       	push	r1
    3ea6:	1f 92       	push	r1
    3ea8:	cd b7       	in	r28, 0x3d	; 61
    3eaa:	de b7       	in	r29, 0x3e	; 62
    3eac:	89 83       	std	Y+1, r24	; 0x01
    3eae:	7b 83       	std	Y+3, r23	; 0x03
    3eb0:	6a 83       	std	Y+2, r22	; 0x02
    3eb2:	5d 83       	std	Y+5, r21	; 0x05
    3eb4:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3eb6:	89 81       	ldd	r24, Y+1	; 0x01
    3eb8:	99 27       	eor	r25, r25
    3eba:	87 fd       	sbrc	r24, 7
    3ebc:	90 95       	com	r25
    3ebe:	00 97       	sbiw	r24, 0x00	; 0
    3ec0:	21 f0       	breq	.+8      	; 0x3eca <processBrakeCommand+0x2c>
    3ec2:	81 30       	cpi	r24, 0x01	; 1
    3ec4:	91 05       	cpc	r25, r1
    3ec6:	59 f0       	breq	.+22     	; 0x3ede <processBrakeCommand+0x40>
    3ec8:	0f c0       	rjmp	.+30     	; 0x3ee8 <processBrakeCommand+0x4a>
      case SET_BRAKE:
	 setBrake(*((char*)commandData));
    3eca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ecc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ece:	fc 01       	movw	r30, r24
    3ed0:	80 81       	ld	r24, Z
    3ed2:	99 27       	eor	r25, r25
    3ed4:	87 fd       	sbrc	r24, 7
    3ed6:	90 95       	com	r25
    3ed8:	0e 94 6d 20 	call	0x40da	; 0x40da <setBrake>
	 break;
    3edc:	05 c0       	rjmp	.+10     	; 0x3ee8 <processBrakeCommand+0x4a>
      case GET_BRAKE:
	 getBrake((char*) responseData);
    3ede:	8c 81       	ldd	r24, Y+4	; 0x04
    3ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ee2:	0e 94 78 20 	call	0x40f0	; 0x40f0 <getBrake>
	 break; 
    3ee6:	00 00       	nop
   }
}
    3ee8:	0f 90       	pop	r0
    3eea:	0f 90       	pop	r0
    3eec:	0f 90       	pop	r0
    3eee:	0f 90       	pop	r0
    3ef0:	0f 90       	pop	r0
    3ef2:	df 91       	pop	r29
    3ef4:	cf 91       	pop	r28
    3ef6:	08 95       	ret

00003ef8 <processBatteryCommand>:

char processBatteryCommand(char commandCode, void* commandData, void* responseData) {
    3ef8:	cf 93       	push	r28
    3efa:	df 93       	push	r29
    3efc:	00 d0       	rcall	.+0      	; 0x3efe <processBatteryCommand+0x6>
    3efe:	1f 92       	push	r1
    3f00:	1f 92       	push	r1
    3f02:	cd b7       	in	r28, 0x3d	; 61
    3f04:	de b7       	in	r29, 0x3e	; 62
    3f06:	89 83       	std	Y+1, r24	; 0x01
    3f08:	7b 83       	std	Y+3, r23	; 0x03
    3f0a:	6a 83       	std	Y+2, r22	; 0x02
    3f0c:	5d 83       	std	Y+5, r21	; 0x05
    3f0e:	4c 83       	std	Y+4, r20	; 0x04
   switch(commandCode) {
    3f10:	89 81       	ldd	r24, Y+1	; 0x01
    3f12:	99 27       	eor	r25, r25
    3f14:	87 fd       	sbrc	r24, 7
    3f16:	90 95       	com	r25
    3f18:	00 97       	sbiw	r24, 0x00	; 0
    3f1a:	21 f0       	breq	.+8      	; 0x3f24 <processBatteryCommand+0x2c>
    3f1c:	81 30       	cpi	r24, 0x01	; 1
    3f1e:	91 05       	cpc	r25, r1
    3f20:	31 f0       	breq	.+12     	; 0x3f2e <processBatteryCommand+0x36>
    3f22:	0a c0       	rjmp	.+20     	; 0x3f38 <processBatteryCommand+0x40>
      case GET_BATTERY_VOLTAGE:
         getBatteryVoltage((char*) responseData);
    3f24:	8c 81       	ldd	r24, Y+4	; 0x04
    3f26:	9d 81       	ldd	r25, Y+5	; 0x05
    3f28:	0e 94 49 20 	call	0x4092	; 0x4092 <getBatteryVoltage>
         break;
    3f2c:	05 c0       	rjmp	.+10     	; 0x3f38 <processBatteryCommand+0x40>
      case GET_STEERING_VOLTAGE:
         getSteeringVoltage((char*) responseData);
    3f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f30:	9d 81       	ldd	r25, Y+5	; 0x05
    3f32:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <getSteeringVoltage>
         break;
    3f36:	00 00       	nop
   }
}
    3f38:	0f 90       	pop	r0
    3f3a:	0f 90       	pop	r0
    3f3c:	0f 90       	pop	r0
    3f3e:	0f 90       	pop	r0
    3f40:	0f 90       	pop	r0
    3f42:	df 91       	pop	r29
    3f44:	cf 91       	pop	r28
    3f46:	08 95       	ret

00003f48 <processLightCommand>:

char processLightCommand(char commandCode, void* commandData, Response* responseData) {
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
    3f4c:	00 d0       	rcall	.+0      	; 0x3f4e <processLightCommand+0x6>
    3f4e:	1f 92       	push	r1
    3f50:	1f 92       	push	r1
    3f52:	cd b7       	in	r28, 0x3d	; 61
    3f54:	de b7       	in	r29, 0x3e	; 62
    3f56:	89 83       	std	Y+1, r24	; 0x01
    3f58:	7b 83       	std	Y+3, r23	; 0x03
    3f5a:	6a 83       	std	Y+2, r22	; 0x02
    3f5c:	5d 83       	std	Y+5, r21	; 0x05
    3f5e:	4c 83       	std	Y+4, r20	; 0x04
	responseData->size = 0;
    3f60:	8c 81       	ldd	r24, Y+4	; 0x04
    3f62:	9d 81       	ldd	r25, Y+5	; 0x05
    3f64:	fc 01       	movw	r30, r24
    3f66:	11 82       	std	Z+1, r1	; 0x01
   switch(commandCode) {
    3f68:	89 81       	ldd	r24, Y+1	; 0x01
    3f6a:	99 27       	eor	r25, r25
    3f6c:	87 fd       	sbrc	r24, 7
    3f6e:	90 95       	com	r25
    3f70:	00 97       	sbiw	r24, 0x00	; 0
    3f72:	51 f4       	brne	.+20     	; 0x3f88 <processLightCommand+0x40>
   case SET_LIGHT:
	 	setLight(*((char*)commandData));
    3f74:	8a 81       	ldd	r24, Y+2	; 0x02
    3f76:	9b 81       	ldd	r25, Y+3	; 0x03
    3f78:	fc 01       	movw	r30, r24
    3f7a:	80 81       	ld	r24, Z
    3f7c:	99 27       	eor	r25, r25
    3f7e:	87 fd       	sbrc	r24, 7
    3f80:	90 95       	com	r25
    3f82:	0e 94 54 21 	call	0x42a8	; 0x42a8 <setLight>
      break;
    3f86:	00 00       	nop
   }
}
    3f88:	0f 90       	pop	r0
    3f8a:	0f 90       	pop	r0
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	0f 90       	pop	r0
    3f92:	df 91       	pop	r29
    3f94:	cf 91       	pop	r28
    3f96:	08 95       	ret

00003f98 <processCommand>:



//Function that will take in a command (as char array) and process it into a
//correct response to be stored into response
char processCommand(Command *command, Response *response) {
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	00 d0       	rcall	.+0      	; 0x3f9e <processCommand+0x6>
    3f9e:	1f 92       	push	r1
    3fa0:	cd b7       	in	r28, 0x3d	; 61
    3fa2:	de b7       	in	r29, 0x3e	; 62
    3fa4:	9a 83       	std	Y+2, r25	; 0x02
    3fa6:	89 83       	std	Y+1, r24	; 0x01
    3fa8:	7c 83       	std	Y+4, r23	; 0x04
    3faa:	6b 83       	std	Y+3, r22	; 0x03
	response->commandBack = command->cmd;
    3fac:	89 81       	ldd	r24, Y+1	; 0x01
    3fae:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb0:	dc 01       	movw	r26, r24
    3fb2:	11 96       	adiw	r26, 0x01	; 1
    3fb4:	2c 91       	ld	r18, X
    3fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3fba:	fc 01       	movw	r30, r24
    3fbc:	20 83       	st	Z, r18
   switch(command->groupID) {
    3fbe:	89 81       	ldd	r24, Y+1	; 0x01
    3fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	8c 91       	ld	r24, X
    3fc6:	99 27       	eor	r25, r25
    3fc8:	87 fd       	sbrc	r24, 7
    3fca:	90 95       	com	r25
    3fcc:	aa 27       	eor	r26, r26
    3fce:	97 fd       	sbrc	r25, 7
    3fd0:	a0 95       	com	r26
    3fd2:	ba 2f       	mov	r27, r26
    3fd4:	41 e0       	ldi	r20, 0x01	; 1
    3fd6:	50 e0       	ldi	r21, 0x00	; 0
    3fd8:	27 e0       	ldi	r18, 0x07	; 7
    3fda:	30 e0       	ldi	r19, 0x00	; 0
    3fdc:	84 1b       	sub	r24, r20
    3fde:	95 0b       	sbc	r25, r21
    3fe0:	28 17       	cp	r18, r24
    3fe2:	39 07       	cpc	r19, r25
    3fe4:	08 f4       	brcc	.+2      	; 0x3fe8 <processCommand+0x50>
    3fe6:	4d c0       	rjmp	.+154    	; 0x4082 <processCommand+0xea>
    3fe8:	8e 58       	subi	r24, 0x8E	; 142
    3fea:	9f 4f       	sbci	r25, 0xFF	; 255
    3fec:	fc 01       	movw	r30, r24
    3fee:	0c 94 44 28 	jmp	0x5088	; 0x5088 <__tablejump2__>
      case ULTRASONIC_GROUP:
         processUltrasonicCommand(command->cmd, command->payload,&response->size, response->payload);
    3ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff6:	9c 01       	movw	r18, r24
    3ff8:	2e 5f       	subi	r18, 0xFE	; 254
    3ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    3ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    4000:	ac 01       	movw	r20, r24
    4002:	4f 5f       	subi	r20, 0xFF	; 255
    4004:	5f 4f       	sbci	r21, 0xFF	; 255
    4006:	89 81       	ldd	r24, Y+1	; 0x01
    4008:	9a 81       	ldd	r25, Y+2	; 0x02
    400a:	03 96       	adiw	r24, 0x03	; 3
    400c:	69 81       	ldd	r22, Y+1	; 0x01
    400e:	7a 81       	ldd	r23, Y+2	; 0x02
    4010:	db 01       	movw	r26, r22
    4012:	11 96       	adiw	r26, 0x01	; 1
    4014:	ec 91       	ld	r30, X
    4016:	bc 01       	movw	r22, r24
    4018:	8e 2f       	mov	r24, r30
    401a:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <processUltrasonicCommand>
         break;
    401e:	31 c0       	rjmp	.+98     	; 0x4082 <processCommand+0xea>
      case SPEED_GROUP:
			processSpeedCommand(command->cmd,command->payload,response);
    4020:	89 81       	ldd	r24, Y+1	; 0x01
    4022:	9a 81       	ldd	r25, Y+2	; 0x02
    4024:	03 96       	adiw	r24, 0x03	; 3
    4026:	29 81       	ldd	r18, Y+1	; 0x01
    4028:	3a 81       	ldd	r19, Y+2	; 0x02
    402a:	d9 01       	movw	r26, r18
    402c:	11 96       	adiw	r26, 0x01	; 1
    402e:	ec 91       	ld	r30, X
    4030:	2b 81       	ldd	r18, Y+3	; 0x03
    4032:	3c 81       	ldd	r19, Y+4	; 0x04
    4034:	a9 01       	movw	r20, r18
    4036:	bc 01       	movw	r22, r24
    4038:	8e 2f       	mov	r24, r30
    403a:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <processSpeedCommand>
         break;
    403e:	21 c0       	rjmp	.+66     	; 0x4082 <processCommand+0xea>
      case STEERING_GROUP:
         /*do steering things*/
         break;
      case FNR_GROUP:
			processFNRCommand(command->cmd,command->payload,response);
    4040:	89 81       	ldd	r24, Y+1	; 0x01
    4042:	9a 81       	ldd	r25, Y+2	; 0x02
    4044:	03 96       	adiw	r24, 0x03	; 3
    4046:	29 81       	ldd	r18, Y+1	; 0x01
    4048:	3a 81       	ldd	r19, Y+2	; 0x02
    404a:	d9 01       	movw	r26, r18
    404c:	11 96       	adiw	r26, 0x01	; 1
    404e:	ec 91       	ld	r30, X
    4050:	2b 81       	ldd	r18, Y+3	; 0x03
    4052:	3c 81       	ldd	r19, Y+4	; 0x04
    4054:	a9 01       	movw	r20, r18
    4056:	bc 01       	movw	r22, r24
    4058:	8e 2f       	mov	r24, r30
    405a:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <processFNRCommand>
         break;
    405e:	11 c0       	rjmp	.+34     	; 0x4082 <processCommand+0xea>
         break;
      case BATTERY_GROUP:
         /*do battery things*/
         break;
      case LIGHTS_GROUP:
	      processLightCommand(command->cmd,command->payload,response);
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	9a 81       	ldd	r25, Y+2	; 0x02
    4064:	03 96       	adiw	r24, 0x03	; 3
    4066:	29 81       	ldd	r18, Y+1	; 0x01
    4068:	3a 81       	ldd	r19, Y+2	; 0x02
    406a:	d9 01       	movw	r26, r18
    406c:	11 96       	adiw	r26, 0x01	; 1
    406e:	ec 91       	ld	r30, X
    4070:	2b 81       	ldd	r18, Y+3	; 0x03
    4072:	3c 81       	ldd	r19, Y+4	; 0x04
    4074:	a9 01       	movw	r20, r18
    4076:	bc 01       	movw	r22, r24
    4078:	8e 2f       	mov	r24, r30
    407a:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <processLightCommand>
         break;
    407e:	01 c0       	rjmp	.+2      	; 0x4082 <processCommand+0xea>
      case ERROR_GROUP:
         /*do error things*/
         break;
    4080:	00 00       	nop
   }
   //return a dummy success for now
   return 1;
    4082:	81 e0       	ldi	r24, 0x01	; 1
}
    4084:	0f 90       	pop	r0
    4086:	0f 90       	pop	r0
    4088:	0f 90       	pop	r0
    408a:	0f 90       	pop	r0
    408c:	df 91       	pop	r29
    408e:	cf 91       	pop	r28
    4090:	08 95       	ret

00004092 <getBatteryVoltage>:

//battery controller functions

//read battery strength in a char. Might need to be unsigned, specs don't say
//anything regarding that.
char getBatteryVoltage(char *sensorResponse) {
    4092:	cf 93       	push	r28
    4094:	df 93       	push	r29
    4096:	1f 92       	push	r1
    4098:	1f 92       	push	r1
    409a:	cd b7       	in	r28, 0x3d	; 61
    409c:	de b7       	in	r29, 0x3e	; 62
    409e:	9a 83       	std	Y+2, r25	; 0x02
    40a0:	89 83       	std	Y+1, r24	; 0x01
   //fake battery reading
   *sensorResponse = 0;
    40a2:	89 81       	ldd	r24, Y+1	; 0x01
    40a4:	9a 81       	ldd	r25, Y+2	; 0x02
    40a6:	fc 01       	movw	r30, r24
    40a8:	10 82       	st	Z, r1
   //return success
   return 1;
    40aa:	81 e0       	ldi	r24, 0x01	; 1
}
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	df 91       	pop	r29
    40b2:	cf 91       	pop	r28
    40b4:	08 95       	ret

000040b6 <getSteeringVoltage>:

//gets voltage from steering?
char getSteeringVoltage(char *sensorResponse) {
    40b6:	cf 93       	push	r28
    40b8:	df 93       	push	r29
    40ba:	1f 92       	push	r1
    40bc:	1f 92       	push	r1
    40be:	cd b7       	in	r28, 0x3d	; 61
    40c0:	de b7       	in	r29, 0x3e	; 62
    40c2:	9a 83       	std	Y+2, r25	; 0x02
    40c4:	89 83       	std	Y+1, r24	; 0x01
   //fake steering voltage reading
   *sensorResponse = 0;
    40c6:	89 81       	ldd	r24, Y+1	; 0x01
    40c8:	9a 81       	ldd	r25, Y+2	; 0x02
    40ca:	fc 01       	movw	r30, r24
    40cc:	10 82       	st	Z, r1
   //return success
   return 1;
    40ce:	81 e0       	ldi	r24, 0x01	; 1
}
    40d0:	0f 90       	pop	r0
    40d2:	0f 90       	pop	r0
    40d4:	df 91       	pop	r29
    40d6:	cf 91       	pop	r28
    40d8:	08 95       	ret

000040da <setBrake>:
//Brake controller functions. THERE IS CURRENTLY NO WAY TO GET THE DESIRED
//BRAKE TARGET IN THE SPECS

//set brake target
char setBrake(char gainTarget) {
    40da:	cf 93       	push	r28
    40dc:	df 93       	push	r29
    40de:	1f 92       	push	r1
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing happens
   //return success
   return 1;
    40e6:	81 e0       	ldi	r24, 0x01	; 1
}
    40e8:	0f 90       	pop	r0
    40ea:	df 91       	pop	r29
    40ec:	cf 91       	pop	r28
    40ee:	08 95       	ret

000040f0 <getBrake>:

//get what is assumed to be the current brake value?
char getBrake(char* sensorResponse) {
    40f0:	cf 93       	push	r28
    40f2:	df 93       	push	r29
    40f4:	1f 92       	push	r1
    40f6:	1f 92       	push	r1
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
    40fc:	9a 83       	std	Y+2, r25	; 0x02
    40fe:	89 83       	std	Y+1, r24	; 0x01
   //fake brake reading
   *sensorResponse = 0;
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	9a 81       	ldd	r25, Y+2	; 0x02
    4104:	fc 01       	movw	r30, r24
    4106:	10 82       	st	Z, r1
   //return success
   return 1;
    4108:	81 e0       	ldi	r24, 0x01	; 1
}
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	df 91       	pop	r29
    4110:	cf 91       	pop	r28
    4112:	08 95       	ret

00004114 <FNRForward>:

#define clearABit(x) \
PORTA &= ~(1 << (x));


void FNRForward(){
    4114:	cf 93       	push	r28
    4116:	df 93       	push	r29
    4118:	cd b7       	in	r28, 0x3d	; 61
    411a:	de b7       	in	r29, 0x3e	; 62
	clearABit(1);
    411c:	82 e2       	ldi	r24, 0x22	; 34
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	22 e2       	ldi	r18, 0x22	; 34
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	f9 01       	movw	r30, r18
    4126:	20 81       	ld	r18, Z
    4128:	2d 7f       	andi	r18, 0xFD	; 253
    412a:	fc 01       	movw	r30, r24
    412c:	20 83       	st	Z, r18
	while((PORTA & 0x2) != 0){
    412e:	0d c0       	rjmp	.+26     	; 0x414a <FNRForward+0x36>
		clearABit(1);
    4130:	82 e2       	ldi	r24, 0x22	; 34
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	22 e2       	ldi	r18, 0x22	; 34
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	f9 01       	movw	r30, r18
    413a:	20 81       	ld	r18, Z
    413c:	2d 7f       	andi	r18, 0xFD	; 253
    413e:	fc 01       	movw	r30, r24
    4140:	20 83       	st	Z, r18
		vTaskDelay(1);
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
PORTA &= ~(1 << (x));


void FNRForward(){
	clearABit(1);
	while((PORTA & 0x2) != 0){
    414a:	82 e2       	ldi	r24, 0x22	; 34
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	fc 01       	movw	r30, r24
    4150:	80 81       	ld	r24, Z
    4152:	88 2f       	mov	r24, r24
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	82 70       	andi	r24, 0x02	; 2
    4158:	99 27       	eor	r25, r25
    415a:	00 97       	sbiw	r24, 0x00	; 0
    415c:	49 f7       	brne	.-46     	; 0x4130 <FNRForward+0x1c>
		clearABit(1);
		vTaskDelay(1);
	}
	setABit(0);
    415e:	82 e2       	ldi	r24, 0x22	; 34
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	22 e2       	ldi	r18, 0x22	; 34
    4164:	30 e0       	ldi	r19, 0x00	; 0
    4166:	f9 01       	movw	r30, r18
    4168:	20 81       	ld	r18, Z
    416a:	21 60       	ori	r18, 0x01	; 1
    416c:	fc 01       	movw	r30, r24
    416e:	20 83       	st	Z, r18

	//PORTL &= ~0x30;
}
    4170:	df 91       	pop	r29
    4172:	cf 91       	pop	r28
    4174:	08 95       	ret

00004176 <FNRReverse>:

void FNRReverse(){
    4176:	cf 93       	push	r28
    4178:	df 93       	push	r29
    417a:	cd b7       	in	r28, 0x3d	; 61
    417c:	de b7       	in	r29, 0x3e	; 62
	clearABit(0);
    417e:	82 e2       	ldi	r24, 0x22	; 34
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	22 e2       	ldi	r18, 0x22	; 34
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	f9 01       	movw	r30, r18
    4188:	20 81       	ld	r18, Z
    418a:	2e 7f       	andi	r18, 0xFE	; 254
    418c:	fc 01       	movw	r30, r24
    418e:	20 83       	st	Z, r18
	while((PORTA & 0x1) != 0){
    4190:	0d c0       	rjmp	.+26     	; 0x41ac <FNRReverse+0x36>
		clearABit(0);
    4192:	82 e2       	ldi	r24, 0x22	; 34
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	22 e2       	ldi	r18, 0x22	; 34
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	f9 01       	movw	r30, r18
    419c:	20 81       	ld	r18, Z
    419e:	2e 7f       	andi	r18, 0xFE	; 254
    41a0:	fc 01       	movw	r30, r24
    41a2:	20 83       	st	Z, r18
		vTaskDelay(1);
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
	//PORTL &= ~0x30;
}

void FNRReverse(){
	clearABit(0);
	while((PORTA & 0x1) != 0){
    41ac:	82 e2       	ldi	r24, 0x22	; 34
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	fc 01       	movw	r30, r24
    41b2:	80 81       	ld	r24, Z
    41b4:	88 2f       	mov	r24, r24
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	81 70       	andi	r24, 0x01	; 1
    41ba:	99 27       	eor	r25, r25
    41bc:	00 97       	sbiw	r24, 0x00	; 0
    41be:	49 f7       	brne	.-46     	; 0x4192 <FNRReverse+0x1c>
		clearABit(0);
		vTaskDelay(1);
	}
	setABit(1);
    41c0:	82 e2       	ldi	r24, 0x22	; 34
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	22 e2       	ldi	r18, 0x22	; 34
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	f9 01       	movw	r30, r18
    41ca:	20 81       	ld	r18, Z
    41cc:	22 60       	ori	r18, 0x02	; 2
    41ce:	fc 01       	movw	r30, r24
    41d0:	20 83       	st	Z, r18

	//PORTL |= 0x30;
}
    41d2:	df 91       	pop	r29
    41d4:	cf 91       	pop	r28
    41d6:	08 95       	ret

000041d8 <FNRNeutral>:

void FNRNeutral(){
    41d8:	cf 93       	push	r28
    41da:	df 93       	push	r29
    41dc:	cd b7       	in	r28, 0x3d	; 61
    41de:	de b7       	in	r29, 0x3e	; 62
	clearABit(0);
    41e0:	82 e2       	ldi	r24, 0x22	; 34
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	22 e2       	ldi	r18, 0x22	; 34
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	f9 01       	movw	r30, r18
    41ea:	20 81       	ld	r18, Z
    41ec:	2e 7f       	andi	r18, 0xFE	; 254
    41ee:	fc 01       	movw	r30, r24
    41f0:	20 83       	st	Z, r18
	clearABit(1);
    41f2:	82 e2       	ldi	r24, 0x22	; 34
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	22 e2       	ldi	r18, 0x22	; 34
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	f9 01       	movw	r30, r18
    41fc:	20 81       	ld	r18, Z
    41fe:	2d 7f       	andi	r18, 0xFD	; 253
    4200:	fc 01       	movw	r30, r24
    4202:	20 83       	st	Z, r18
	while((PORTA & 0x3) != 0){
    4204:	16 c0       	rjmp	.+44     	; 0x4232 <FNRNeutral+0x5a>
		clearABit(0);
    4206:	82 e2       	ldi	r24, 0x22	; 34
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	22 e2       	ldi	r18, 0x22	; 34
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	f9 01       	movw	r30, r18
    4210:	20 81       	ld	r18, Z
    4212:	2e 7f       	andi	r18, 0xFE	; 254
    4214:	fc 01       	movw	r30, r24
    4216:	20 83       	st	Z, r18
		clearABit(1);
    4218:	82 e2       	ldi	r24, 0x22	; 34
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	22 e2       	ldi	r18, 0x22	; 34
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	f9 01       	movw	r30, r18
    4222:	20 81       	ld	r18, Z
    4224:	2d 7f       	andi	r18, 0xFD	; 253
    4226:	fc 01       	movw	r30, r24
    4228:	20 83       	st	Z, r18
		vTaskDelay(1);
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
}

void FNRNeutral(){
	clearABit(0);
	clearABit(1);
	while((PORTA & 0x3) != 0){
    4232:	82 e2       	ldi	r24, 0x22	; 34
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	fc 01       	movw	r30, r24
    4238:	80 81       	ld	r24, Z
    423a:	88 2f       	mov	r24, r24
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	83 70       	andi	r24, 0x03	; 3
    4240:	99 27       	eor	r25, r25
    4242:	00 97       	sbiw	r24, 0x00	; 0
    4244:	01 f7       	brne	.-64     	; 0x4206 <FNRNeutral+0x2e>
		clearABit(0);
		clearABit(1);
		vTaskDelay(1);
	}
	//PORTL &= ~0x30;
}
    4246:	df 91       	pop	r29
    4248:	cf 91       	pop	r28
    424a:	08 95       	ret

0000424c <setFNR>:

//set the FNR controller, inputs are either -1, 0, or 1.
char setFNR(char FNR) {
    424c:	cf 93       	push	r28
    424e:	df 93       	push	r29
    4250:	1f 92       	push	r1
    4252:	cd b7       	in	r28, 0x3d	; 61
    4254:	de b7       	in	r29, 0x3e	; 62
    4256:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing happens
   //return success
	if(FNR == 0){
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	88 23       	and	r24, r24
    425c:	19 f4       	brne	.+6      	; 0x4264 <setFNR+0x18>
		FNRNeutral();
    425e:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <FNRNeutral>
    4262:	0b c0       	rjmp	.+22     	; 0x427a <setFNR+0x2e>
	} else if(FNR == 1){
    4264:	89 81       	ldd	r24, Y+1	; 0x01
    4266:	81 30       	cpi	r24, 0x01	; 1
    4268:	19 f4       	brne	.+6      	; 0x4270 <setFNR+0x24>
		FNRForward();
    426a:	0e 94 8a 20 	call	0x4114	; 0x4114 <FNRForward>
    426e:	05 c0       	rjmp	.+10     	; 0x427a <setFNR+0x2e>
	} else if(FNR == -1){
    4270:	89 81       	ldd	r24, Y+1	; 0x01
    4272:	8f 3f       	cpi	r24, 0xFF	; 255
    4274:	11 f4       	brne	.+4      	; 0x427a <setFNR+0x2e>
		FNRReverse();
    4276:	0e 94 bb 20 	call	0x4176	; 0x4176 <FNRReverse>
	}

   return 1;
    427a:	81 e0       	ldi	r24, 0x01	; 1
}
    427c:	0f 90       	pop	r0
    427e:	df 91       	pop	r29
    4280:	cf 91       	pop	r28
    4282:	08 95       	ret

00004284 <getFNR>:

//get the current FNR state. Function follows same format for consistancy
char getFNR(char *sensorResponse) {
    4284:	cf 93       	push	r28
    4286:	df 93       	push	r29
    4288:	1f 92       	push	r1
    428a:	1f 92       	push	r1
    428c:	cd b7       	in	r28, 0x3d	; 61
    428e:	de b7       	in	r29, 0x3e	; 62
    4290:	9a 83       	std	Y+2, r25	; 0x02
    4292:	89 83       	std	Y+1, r24	; 0x01
   //fake reading
   *sensorResponse = 0;
    4294:	89 81       	ldd	r24, Y+1	; 0x01
    4296:	9a 81       	ldd	r25, Y+2	; 0x02
    4298:	fc 01       	movw	r30, r24
    429a:	10 82       	st	Z, r1
   //return success
   return 1;
    429c:	81 e0       	ldi	r24, 0x01	; 1
}
    429e:	0f 90       	pop	r0
    42a0:	0f 90       	pop	r0
    42a2:	df 91       	pop	r29
    42a4:	cf 91       	pop	r28
    42a6:	08 95       	ret

000042a8 <setLight>:
//light controller functions
#include <avr/io.h>

//turn lights on and off
char setLight(unsigned char lightTarget) {
    42a8:	cf 93       	push	r28
    42aa:	df 93       	push	r29
    42ac:	1f 92       	push	r1
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62
    42b2:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing happens
	//PORTB ^= 0x80;
	if(lightTarget == 1){
    42b4:	89 81       	ldd	r24, Y+1	; 0x01
    42b6:	81 30       	cpi	r24, 0x01	; 1
    42b8:	51 f4       	brne	.+20     	; 0x42ce <setLight+0x26>
		PORTB |= 0x80;
    42ba:	85 e2       	ldi	r24, 0x25	; 37
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	25 e2       	ldi	r18, 0x25	; 37
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	f9 01       	movw	r30, r18
    42c4:	20 81       	ld	r18, Z
    42c6:	20 68       	ori	r18, 0x80	; 128
    42c8:	fc 01       	movw	r30, r24
    42ca:	20 83       	st	Z, r18
    42cc:	09 c0       	rjmp	.+18     	; 0x42e0 <setLight+0x38>
	} else {
		PORTB &= ~0x80;
    42ce:	85 e2       	ldi	r24, 0x25	; 37
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	25 e2       	ldi	r18, 0x25	; 37
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	f9 01       	movw	r30, r18
    42d8:	20 81       	ld	r18, Z
    42da:	2f 77       	andi	r18, 0x7F	; 127
    42dc:	fc 01       	movw	r30, r24
    42de:	20 83       	st	Z, r18
	}
   return 1;
    42e0:	81 e0       	ldi	r24, 0x01	; 1
}
    42e2:	0f 90       	pop	r0
    42e4:	df 91       	pop	r29
    42e6:	cf 91       	pop	r28
    42e8:	08 95       	ret

000042ea <setSonarData>:
	USART_Write(hex[(i&0xF0) >> 4]);
	USART_Write(hex[i&0xF]);

}   */

void setSonarData(int i,int data){
    42ea:	cf 93       	push	r28
    42ec:	df 93       	push	r29
    42ee:	00 d0       	rcall	.+0      	; 0x42f0 <setSonarData+0x6>
    42f0:	1f 92       	push	r1
    42f2:	cd b7       	in	r28, 0x3d	; 61
    42f4:	de b7       	in	r29, 0x3e	; 62
    42f6:	9a 83       	std	Y+2, r25	; 0x02
    42f8:	89 83       	std	Y+1, r24	; 0x01
    42fa:	7c 83       	std	Y+4, r23	; 0x04
    42fc:	6b 83       	std	Y+3, r22	; 0x03
// xSemaphoreTake(sonarDataMutex[i],portMAX_DELAY);
   sonarData[i] = data;
    42fe:	89 81       	ldd	r24, Y+1	; 0x01
    4300:	9a 81       	ldd	r25, Y+2	; 0x02
    4302:	88 0f       	add	r24, r24
    4304:	99 1f       	adc	r25, r25
    4306:	89 53       	subi	r24, 0x39	; 57
    4308:	95 4e       	sbci	r25, 0xE5	; 229
    430a:	2b 81       	ldd	r18, Y+3	; 0x03
    430c:	3c 81       	ldd	r19, Y+4	; 0x04
    430e:	fc 01       	movw	r30, r24
    4310:	31 83       	std	Z+1, r19	; 0x01
    4312:	20 83       	st	Z, r18
   //xSemaphoreGive(sonarDataMutex[i]);
}
    4314:	0f 90       	pop	r0
    4316:	0f 90       	pop	r0
    4318:	0f 90       	pop	r0
    431a:	0f 90       	pop	r0
    431c:	df 91       	pop	r29
    431e:	cf 91       	pop	r28
    4320:	08 95       	ret

00004322 <getSonarData>:

int getSonarData(int i){
    4322:	cf 93       	push	r28
    4324:	df 93       	push	r29
    4326:	1f 92       	push	r1
    4328:	1f 92       	push	r1
    432a:	cd b7       	in	r28, 0x3d	; 61
    432c:	de b7       	in	r29, 0x3e	; 62
    432e:	9a 83       	std	Y+2, r25	; 0x02
    4330:	89 83       	std	Y+1, r24	; 0x01
   //xSemaphoreTake(sonarDataMutex[i],portMAX_DELAY);
   return sonarData[i];
    4332:	89 81       	ldd	r24, Y+1	; 0x01
    4334:	9a 81       	ldd	r25, Y+2	; 0x02
    4336:	88 0f       	add	r24, r24
    4338:	99 1f       	adc	r25, r25
    433a:	89 53       	subi	r24, 0x39	; 57
    433c:	95 4e       	sbci	r25, 0xE5	; 229
    433e:	fc 01       	movw	r30, r24
    4340:	80 81       	ld	r24, Z
    4342:	91 81       	ldd	r25, Z+1	; 0x01
   //xSemaphoreGive(sonarDataMutex[i]);
}
    4344:	0f 90       	pop	r0
    4346:	0f 90       	pop	r0
    4348:	df 91       	pop	r29
    434a:	cf 91       	pop	r28
    434c:	08 95       	ret

0000434e <getTimerCount>:

unsigned char getTimerCount(){
    434e:	cf 93       	push	r28
    4350:	df 93       	push	r29
    4352:	cd b7       	in	r28, 0x3d	; 61
    4354:	de b7       	in	r29, 0x3e	; 62
   return TCNT0;
    4356:	86 e4       	ldi	r24, 0x46	; 70
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	fc 01       	movw	r30, r24
    435c:	80 81       	ld	r24, Z
}
    435e:	df 91       	pop	r29
    4360:	cf 91       	pop	r28
    4362:	08 95       	ret

00004364 <__vector_11>:

inline void setTimerCount(unsigned char i){
   TCNT0 = i;
}

ISR(PCINT2_vect) {
    4364:	1f 92       	push	r1
    4366:	0f 92       	push	r0
    4368:	00 90 5f 00 	lds	r0, 0x005F
    436c:	0f 92       	push	r0
    436e:	11 24       	eor	r1, r1
    4370:	00 90 5b 00 	lds	r0, 0x005B
    4374:	0f 92       	push	r0
    4376:	2f 93       	push	r18
    4378:	3f 93       	push	r19
    437a:	4f 93       	push	r20
    437c:	5f 93       	push	r21
    437e:	6f 93       	push	r22
    4380:	7f 93       	push	r23
    4382:	8f 93       	push	r24
    4384:	9f 93       	push	r25
    4386:	af 93       	push	r26
    4388:	bf 93       	push	r27
    438a:	ef 93       	push	r30
    438c:	ff 93       	push	r31
    438e:	cf 93       	push	r28
    4390:	df 93       	push	r29
    4392:	00 d0       	rcall	.+0      	; 0x4394 <__vector_11+0x30>
    4394:	cd b7       	in	r28, 0x3d	; 61
    4396:	de b7       	in	r29, 0x3e	; 62

   unsigned char beginCount;
   unsigned char currCount;
   char i=0;   
    4398:	19 82       	std	Y+1, r1	; 0x01

   if(PINK&(1<<currSonar)){
    439a:	86 e0       	ldi	r24, 0x06	; 6
    439c:	91 e0       	ldi	r25, 0x01	; 1
    439e:	fc 01       	movw	r30, r24
    43a0:	80 81       	ld	r24, Z
    43a2:	88 2f       	mov	r24, r24
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	20 91 d5 1a 	lds	r18, 0x1AD5
    43aa:	22 2f       	mov	r18, r18
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	02 2e       	mov	r0, r18
    43b0:	02 c0       	rjmp	.+4      	; 0x43b6 <__vector_11+0x52>
    43b2:	95 95       	asr	r25
    43b4:	87 95       	ror	r24
    43b6:	0a 94       	dec	r0
    43b8:	e2 f7       	brpl	.-8      	; 0x43b2 <__vector_11+0x4e>
    43ba:	81 70       	andi	r24, 0x01	; 1
    43bc:	99 27       	eor	r25, r25
    43be:	00 97       	sbiw	r24, 0x00	; 0
    43c0:	49 f0       	breq	.+18     	; 0x43d4 <__vector_11+0x70>
      //USART_AddToQueue('U');
      beginCount = getTimerCount();
    43c2:	0e 94 a7 21 	call	0x434e	; 0x434e <getTimerCount>
    43c6:	8a 83       	std	Y+2, r24	; 0x02
      PORTE = 0xFF;
    43c8:	8e e2       	ldi	r24, 0x2E	; 46
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	2f ef       	ldi	r18, 0xFF	; 255
    43ce:	fc 01       	movw	r30, r24
    43d0:	20 83       	st	Z, r18
    43d2:	1d c0       	rjmp	.+58     	; 0x440e <__vector_11+0xaa>
   } else {
      //USART_AddToQueue('D');
      currCount = getTimerCount();
    43d4:	0e 94 a7 21 	call	0x434e	; 0x434e <getTimerCount>
    43d8:	8b 83       	std	Y+3, r24	; 0x03
      if(currCount > beginCount){
    43da:	9b 81       	ldd	r25, Y+3	; 0x03
    43dc:	8a 81       	ldd	r24, Y+2	; 0x02
    43de:	89 17       	cp	r24, r25
    43e0:	38 f4       	brcc	.+14     	; 0x43f0 <__vector_11+0x8c>
         lastSonarData = currCount - beginCount;
    43e2:	9b 81       	ldd	r25, Y+3	; 0x03
    43e4:	8a 81       	ldd	r24, Y+2	; 0x02
    43e6:	f9 2f       	mov	r31, r25
    43e8:	f8 1b       	sub	r31, r24
    43ea:	8f 2f       	mov	r24, r31
    43ec:	80 93 d6 1a 	sts	0x1AD6, r24
      }
      PORTE = 0;
    43f0:	8e e2       	ldi	r24, 0x2E	; 46
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	fc 01       	movw	r30, r24
    43f6:	10 82       	st	Z, r1
      xSemaphoreGiveFromISR(sonarSemaphore,0);
    43f8:	80 91 69 1b 	lds	r24, 0x1B69
    43fc:	90 91 6a 1b 	lds	r25, 0x1B6A
    4400:	20 e0       	ldi	r18, 0x00	; 0
    4402:	40 e0       	ldi	r20, 0x00	; 0
    4404:	50 e0       	ldi	r21, 0x00	; 0
    4406:	60 e0       	ldi	r22, 0x00	; 0
    4408:	70 e0       	ldi	r23, 0x00	; 0
    440a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <xQueueGenericSendFromISR>
   }

}
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	df 91       	pop	r29
    4416:	cf 91       	pop	r28
    4418:	ff 91       	pop	r31
    441a:	ef 91       	pop	r30
    441c:	bf 91       	pop	r27
    441e:	af 91       	pop	r26
    4420:	9f 91       	pop	r25
    4422:	8f 91       	pop	r24
    4424:	7f 91       	pop	r23
    4426:	6f 91       	pop	r22
    4428:	5f 91       	pop	r21
    442a:	4f 91       	pop	r20
    442c:	3f 91       	pop	r19
    442e:	2f 91       	pop	r18
    4430:	0f 90       	pop	r0
    4432:	00 92 5b 00 	sts	0x005B, r0
    4436:	0f 90       	pop	r0
    4438:	00 92 5f 00 	sts	0x005F, r0
    443c:	0f 90       	pop	r0
    443e:	1f 90       	pop	r1
    4440:	18 95       	reti

00004442 <sonarADCHandler>:

void sonarADCHandler(int result,void *sonarNum){
    4442:	cf 93       	push	r28
    4444:	df 93       	push	r29
    4446:	00 d0       	rcall	.+0      	; 0x4448 <sonarADCHandler+0x6>
    4448:	1f 92       	push	r1
    444a:	cd b7       	in	r28, 0x3d	; 61
    444c:	de b7       	in	r29, 0x3e	; 62
    444e:	9a 83       	std	Y+2, r25	; 0x02
    4450:	89 83       	std	Y+1, r24	; 0x01
    4452:	7c 83       	std	Y+4, r23	; 0x04
    4454:	6b 83       	std	Y+3, r22	; 0x03

	/*printHex(*((int *)sonarNum));
	USART_Write('\n');
	USART_Write('\r');*/

	setSonarData(*((int *)sonarNum),result);
    4456:	8b 81       	ldd	r24, Y+3	; 0x03
    4458:	9c 81       	ldd	r25, Y+4	; 0x04
    445a:	fc 01       	movw	r30, r24
    445c:	80 81       	ld	r24, Z
    445e:	91 81       	ldd	r25, Z+1	; 0x01
    4460:	29 81       	ldd	r18, Y+1	; 0x01
    4462:	3a 81       	ldd	r19, Y+2	; 0x02
    4464:	b9 01       	movw	r22, r18
    4466:	0e 94 75 21 	call	0x42ea	; 0x42ea <setSonarData>

}
    446a:	0f 90       	pop	r0
    446c:	0f 90       	pop	r0
    446e:	0f 90       	pop	r0
    4470:	0f 90       	pop	r0
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	08 95       	ret

00004478 <initializeSonarSensors>:

void initializeSonarSensors(){
    4478:	cf 93       	push	r28
    447a:	df 93       	push	r29
    447c:	cd b7       	in	r28, 0x3d	; 61
    447e:	de b7       	in	r29, 0x3e	; 62
   PCICR = 0x7;

   TCCR0A = 0;
   TCCR0B = 5;*/

	addADCDevice(0,ADC_OPT_PRECISION_HIGH,sonarADCHandler,&sonarNum0);			
    4480:	23 ed       	ldi	r18, 0xD3	; 211
    4482:	3a e1       	ldi	r19, 0x1A	; 26
    4484:	41 e2       	ldi	r20, 0x21	; 33
    4486:	52 e2       	ldi	r21, 0x22	; 34
    4488:	60 e0       	ldi	r22, 0x00	; 0
    448a:	70 e0       	ldi	r23, 0x00	; 0
    448c:	80 e0       	ldi	r24, 0x00	; 0
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	0e 94 82 27 	call	0x4f04	; 0x4f04 <addADCDevice>
	addADCDevice(12,ADC_OPT_PRECISION_HIGH,sonarADCHandler,&sonarNum1);			
    4494:	22 e0       	ldi	r18, 0x02	; 2
    4496:	32 e0       	ldi	r19, 0x02	; 2
    4498:	41 e2       	ldi	r20, 0x21	; 33
    449a:	52 e2       	ldi	r21, 0x22	; 34
    449c:	60 e0       	ldi	r22, 0x00	; 0
    449e:	70 e0       	ldi	r23, 0x00	; 0
    44a0:	8c e0       	ldi	r24, 0x0C	; 12
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	0e 94 82 27 	call	0x4f04	; 0x4f04 <addADCDevice>
	addADCDevice(15,ADC_OPT_PRECISION_HIGH,sonarADCHandler,&sonarNum2);			
    44a8:	24 e0       	ldi	r18, 0x04	; 4
    44aa:	32 e0       	ldi	r19, 0x02	; 2
    44ac:	41 e2       	ldi	r20, 0x21	; 33
    44ae:	52 e2       	ldi	r21, 0x22	; 34
    44b0:	60 e0       	ldi	r22, 0x00	; 0
    44b2:	70 e0       	ldi	r23, 0x00	; 0
    44b4:	8f e0       	ldi	r24, 0x0F	; 15
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0e 94 82 27 	call	0x4f04	; 0x4f04 <addADCDevice>

}
    44bc:	df 91       	pop	r29
    44be:	cf 91       	pop	r28
    44c0:	08 95       	ret

000044c2 <vTaskSonar>:

void vTaskSonar(void* parameter){
    44c2:	cf 93       	push	r28
    44c4:	df 93       	push	r29
    44c6:	1f 92       	push	r1
    44c8:	1f 92       	push	r1
    44ca:	cd b7       	in	r28, 0x3d	; 61
    44cc:	de b7       	in	r29, 0x3e	; 62
    44ce:	9a 83       	std	Y+2, r25	; 0x02
    44d0:	89 83       	std	Y+1, r24	; 0x01

   int i;
   initializeSonarSensors();
    44d2:	0e 94 3c 22 	call	0x4478	; 0x4478 <initializeSonarSensors>
	for(;;){
		vTaskDelay(300);
    44d6:	8c e2       	ldi	r24, 0x2C	; 44
    44d8:	91 e0       	ldi	r25, 0x01	; 1
    44da:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
	}
    44de:	fb cf       	rjmp	.-10     	; 0x44d6 <vTaskSonar+0x14>

000044e0 <getAllSensors>:
      }
   }
            
} 

char getAllSensors(unsigned short* responseData){
    44e0:	cf 93       	push	r28
    44e2:	df 93       	push	r29
    44e4:	00 d0       	rcall	.+0      	; 0x44e6 <getAllSensors+0x6>
    44e6:	1f 92       	push	r1
    44e8:	cd b7       	in	r28, 0x3d	; 61
    44ea:	de b7       	in	r29, 0x3e	; 62
    44ec:	9c 83       	std	Y+4, r25	; 0x04
    44ee:	8b 83       	std	Y+3, r24	; 0x03
   unsigned short i;
   for(i=0;i<6;i++){
    44f0:	1a 82       	std	Y+2, r1	; 0x02
    44f2:	19 82       	std	Y+1, r1	; 0x01
    44f4:	14 c0       	rjmp	.+40     	; 0x451e <getAllSensors+0x3e>
      //responseData[i] = getSonarData(i);
      responseData[i] = i+1;
    44f6:	89 81       	ldd	r24, Y+1	; 0x01
    44f8:	9a 81       	ldd	r25, Y+2	; 0x02
    44fa:	88 0f       	add	r24, r24
    44fc:	99 1f       	adc	r25, r25
    44fe:	2b 81       	ldd	r18, Y+3	; 0x03
    4500:	3c 81       	ldd	r19, Y+4	; 0x04
    4502:	82 0f       	add	r24, r18
    4504:	93 1f       	adc	r25, r19
    4506:	29 81       	ldd	r18, Y+1	; 0x01
    4508:	3a 81       	ldd	r19, Y+2	; 0x02
    450a:	2f 5f       	subi	r18, 0xFF	; 255
    450c:	3f 4f       	sbci	r19, 0xFF	; 255
    450e:	fc 01       	movw	r30, r24
    4510:	31 83       	std	Z+1, r19	; 0x01
    4512:	20 83       	st	Z, r18
            
} 

char getAllSensors(unsigned short* responseData){
   unsigned short i;
   for(i=0;i<6;i++){
    4514:	89 81       	ldd	r24, Y+1	; 0x01
    4516:	9a 81       	ldd	r25, Y+2	; 0x02
    4518:	01 96       	adiw	r24, 0x01	; 1
    451a:	9a 83       	std	Y+2, r25	; 0x02
    451c:	89 83       	std	Y+1, r24	; 0x01
    451e:	89 81       	ldd	r24, Y+1	; 0x01
    4520:	9a 81       	ldd	r25, Y+2	; 0x02
    4522:	86 30       	cpi	r24, 0x06	; 6
    4524:	91 05       	cpc	r25, r1
    4526:	38 f3       	brcs	.-50     	; 0x44f6 <getAllSensors+0x16>
      //responseData[i] = getSonarData(i);
      responseData[i] = i+1;
   }
}
    4528:	0f 90       	pop	r0
    452a:	0f 90       	pop	r0
    452c:	0f 90       	pop	r0
    452e:	0f 90       	pop	r0
    4530:	df 91       	pop	r29
    4532:	cf 91       	pop	r28
    4534:	08 95       	ret

00004536 <getCertainSensor>:

char getCertainSensor(char commandData,int* responseData){
    4536:	0f 93       	push	r16
    4538:	1f 93       	push	r17
    453a:	cf 93       	push	r28
    453c:	df 93       	push	r29
    453e:	00 d0       	rcall	.+0      	; 0x4540 <getCertainSensor+0xa>
    4540:	cd b7       	in	r28, 0x3d	; 61
    4542:	de b7       	in	r29, 0x3e	; 62
    4544:	89 83       	std	Y+1, r24	; 0x01
    4546:	7b 83       	std	Y+3, r23	; 0x03
    4548:	6a 83       	std	Y+2, r22	; 0x02
   if(commandData < 6){
    454a:	89 81       	ldd	r24, Y+1	; 0x01
    454c:	86 30       	cpi	r24, 0x06	; 6
    454e:	a4 f4       	brge	.+40     	; 0x4578 <getCertainSensor+0x42>
      responseData[commandData] = getSonarData(commandData);
    4550:	89 81       	ldd	r24, Y+1	; 0x01
    4552:	99 27       	eor	r25, r25
    4554:	87 fd       	sbrc	r24, 7
    4556:	90 95       	com	r25
    4558:	88 0f       	add	r24, r24
    455a:	99 1f       	adc	r25, r25
    455c:	2a 81       	ldd	r18, Y+2	; 0x02
    455e:	3b 81       	ldd	r19, Y+3	; 0x03
    4560:	89 01       	movw	r16, r18
    4562:	08 0f       	add	r16, r24
    4564:	19 1f       	adc	r17, r25
    4566:	89 81       	ldd	r24, Y+1	; 0x01
    4568:	99 27       	eor	r25, r25
    456a:	87 fd       	sbrc	r24, 7
    456c:	90 95       	com	r25
    456e:	0e 94 91 21 	call	0x4322	; 0x4322 <getSonarData>
    4572:	f8 01       	movw	r30, r16
    4574:	91 83       	std	Z+1, r25	; 0x01
    4576:	80 83       	st	Z, r24
   }
}
    4578:	0f 90       	pop	r0
    457a:	0f 90       	pop	r0
    457c:	0f 90       	pop	r0
    457e:	df 91       	pop	r29
    4580:	cf 91       	pop	r28
    4582:	1f 91       	pop	r17
    4584:	0f 91       	pop	r16
    4586:	08 95       	ret

00004588 <getSensorGroup>:

char getSensorGroup(char commandData,int* responseData){
    4588:	0f 93       	push	r16
    458a:	1f 93       	push	r17
    458c:	cf 93       	push	r28
    458e:	df 93       	push	r29
    4590:	00 d0       	rcall	.+0      	; 0x4592 <getSensorGroup+0xa>
    4592:	cd b7       	in	r28, 0x3d	; 61
    4594:	de b7       	in	r29, 0x3e	; 62
    4596:	89 83       	std	Y+1, r24	; 0x01
    4598:	7b 83       	std	Y+3, r23	; 0x03
    459a:	6a 83       	std	Y+2, r22	; 0x02

   switch(commandData){
    459c:	89 81       	ldd	r24, Y+1	; 0x01
    459e:	99 27       	eor	r25, r25
    45a0:	87 fd       	sbrc	r24, 7
    45a2:	90 95       	com	r25
    45a4:	81 30       	cpi	r24, 0x01	; 1
    45a6:	91 05       	cpc	r25, r1
    45a8:	e9 f0       	breq	.+58     	; 0x45e4 <getSensorGroup+0x5c>
    45aa:	82 30       	cpi	r24, 0x02	; 2
    45ac:	91 05       	cpc	r25, r1
    45ae:	89 f1       	breq	.+98     	; 0x4612 <getSensorGroup+0x8a>
    45b0:	00 97       	sbiw	r24, 0x00	; 0
    45b2:	09 f0       	breq	.+2      	; 0x45b6 <getSensorGroup+0x2e>
    45b4:	45 c0       	rjmp	.+138    	; 0x4640 <getSensorGroup+0xb8>
      case SONAR_GROUP_LEFT:
         responseData[0] = getSonarData(0);
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	0e 94 91 21 	call	0x4322	; 0x4322 <getSonarData>
    45be:	9c 01       	movw	r18, r24
    45c0:	8a 81       	ldd	r24, Y+2	; 0x02
    45c2:	9b 81       	ldd	r25, Y+3	; 0x03
    45c4:	fc 01       	movw	r30, r24
    45c6:	31 83       	std	Z+1, r19	; 0x01
    45c8:	20 83       	st	Z, r18
         responseData[1] = getSonarData(1);
    45ca:	8a 81       	ldd	r24, Y+2	; 0x02
    45cc:	9b 81       	ldd	r25, Y+3	; 0x03
    45ce:	8c 01       	movw	r16, r24
    45d0:	0e 5f       	subi	r16, 0xFE	; 254
    45d2:	1f 4f       	sbci	r17, 0xFF	; 255
    45d4:	81 e0       	ldi	r24, 0x01	; 1
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	0e 94 91 21 	call	0x4322	; 0x4322 <getSonarData>
    45dc:	f8 01       	movw	r30, r16
    45de:	91 83       	std	Z+1, r25	; 0x01
    45e0:	80 83       	st	Z, r24
         break;
    45e2:	2e c0       	rjmp	.+92     	; 0x4640 <getSensorGroup+0xb8>
      case SONAR_GROUP_FRONT:
         responseData[0] = getSonarData(2);
    45e4:	82 e0       	ldi	r24, 0x02	; 2
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	0e 94 91 21 	call	0x4322	; 0x4322 <getSonarData>
    45ec:	9c 01       	movw	r18, r24
    45ee:	8a 81       	ldd	r24, Y+2	; 0x02
    45f0:	9b 81       	ldd	r25, Y+3	; 0x03
    45f2:	fc 01       	movw	r30, r24
    45f4:	31 83       	std	Z+1, r19	; 0x01
    45f6:	20 83       	st	Z, r18
         responseData[1] = getSonarData(3);
    45f8:	8a 81       	ldd	r24, Y+2	; 0x02
    45fa:	9b 81       	ldd	r25, Y+3	; 0x03
    45fc:	8c 01       	movw	r16, r24
    45fe:	0e 5f       	subi	r16, 0xFE	; 254
    4600:	1f 4f       	sbci	r17, 0xFF	; 255
    4602:	83 e0       	ldi	r24, 0x03	; 3
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	0e 94 91 21 	call	0x4322	; 0x4322 <getSonarData>
    460a:	f8 01       	movw	r30, r16
    460c:	91 83       	std	Z+1, r25	; 0x01
    460e:	80 83       	st	Z, r24
         break;
    4610:	17 c0       	rjmp	.+46     	; 0x4640 <getSensorGroup+0xb8>
      case SONAR_GROUP_RIGHT:
         responseData[0] = getSonarData(4);
    4612:	84 e0       	ldi	r24, 0x04	; 4
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	0e 94 91 21 	call	0x4322	; 0x4322 <getSonarData>
    461a:	9c 01       	movw	r18, r24
    461c:	8a 81       	ldd	r24, Y+2	; 0x02
    461e:	9b 81       	ldd	r25, Y+3	; 0x03
    4620:	fc 01       	movw	r30, r24
    4622:	31 83       	std	Z+1, r19	; 0x01
    4624:	20 83       	st	Z, r18
         responseData[1] = getSonarData(5);
    4626:	8a 81       	ldd	r24, Y+2	; 0x02
    4628:	9b 81       	ldd	r25, Y+3	; 0x03
    462a:	8c 01       	movw	r16, r24
    462c:	0e 5f       	subi	r16, 0xFE	; 254
    462e:	1f 4f       	sbci	r17, 0xFF	; 255
    4630:	85 e0       	ldi	r24, 0x05	; 5
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	0e 94 91 21 	call	0x4322	; 0x4322 <getSonarData>
    4638:	f8 01       	movw	r30, r16
    463a:	91 83       	std	Z+1, r25	; 0x01
    463c:	80 83       	st	Z, r24
         break;
    463e:	00 00       	nop
   }

}
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	0f 90       	pop	r0
    4646:	df 91       	pop	r29
    4648:	cf 91       	pop	r28
    464a:	1f 91       	pop	r17
    464c:	0f 91       	pop	r16
    464e:	08 95       	ret

00004650 <initSpeedController>:
//Speed Sensor group
#include <avr/io.h>
#include "spi.h"

void initSpeedController(){
    4650:	cf 93       	push	r28
    4652:	df 93       	push	r29
    4654:	cd b7       	in	r28, 0x3d	; 61
    4656:	de b7       	in	r29, 0x3e	; 62
	SPIsendShort(0x400F);
    4658:	8f e0       	ldi	r24, 0x0F	; 15
    465a:	90 e4       	ldi	r25, 0x40	; 64
    465c:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <SPIsendShort>
}
    4660:	df 91       	pop	r29
    4662:	cf 91       	pop	r28
    4664:	08 95       	ret

00004666 <setPot>:

void setPot(int value){
    4666:	cf 93       	push	r28
    4668:	df 93       	push	r29
    466a:	00 d0       	rcall	.+0      	; 0x466c <setPot+0x6>
    466c:	1f 92       	push	r1
    466e:	cd b7       	in	r28, 0x3d	; 61
    4670:	de b7       	in	r29, 0x3e	; 62
    4672:	9c 83       	std	Y+4, r25	; 0x04
    4674:	8b 83       	std	Y+3, r24	; 0x03
	unsigned short data = 0;
    4676:	1a 82       	std	Y+2, r1	; 0x02
    4678:	19 82       	std	Y+1, r1	; 0x01
	data = value & 0xFF;
    467a:	8b 81       	ldd	r24, Y+3	; 0x03
    467c:	9c 81       	ldd	r25, Y+4	; 0x04
    467e:	99 27       	eor	r25, r25
    4680:	9a 83       	std	Y+2, r25	; 0x02
    4682:	89 83       	std	Y+1, r24	; 0x01

	SPIsendShort(data);
    4684:	89 81       	ldd	r24, Y+1	; 0x01
    4686:	9a 81       	ldd	r25, Y+2	; 0x02
    4688:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <SPIsendShort>
}
    468c:	0f 90       	pop	r0
    468e:	0f 90       	pop	r0
    4690:	0f 90       	pop	r0
    4692:	0f 90       	pop	r0
    4694:	df 91       	pop	r29
    4696:	cf 91       	pop	r28
    4698:	08 95       	ret

0000469a <decrementPot>:

void decrementPot(){
    469a:	cf 93       	push	r28
    469c:	df 93       	push	r29
    469e:	cd b7       	in	r28, 0x3d	; 61
    46a0:	de b7       	in	r29, 0x3e	; 62
	SPIsendByte(0x06);
    46a2:	86 e0       	ldi	r24, 0x06	; 6
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <SPIsendByte>
}
    46aa:	df 91       	pop	r29
    46ac:	cf 91       	pop	r28
    46ae:	08 95       	ret

000046b0 <incrementPot>:

void incrementPot(){
    46b0:	cf 93       	push	r28
    46b2:	df 93       	push	r29
    46b4:	cd b7       	in	r28, 0x3d	; 61
    46b6:	de b7       	in	r29, 0x3e	; 62
	SPIsendByte(0x0A);
    46b8:	8a e0       	ldi	r24, 0x0A	; 10
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <SPIsendByte>
}
    46c0:	df 91       	pop	r29
    46c2:	cf 91       	pop	r28
    46c4:	08 95       	ret

000046c6 <getSpeed>:

//get the speed of the vehicle
char getSpeed(char* sensorResponse) {
    46c6:	cf 93       	push	r28
    46c8:	df 93       	push	r29
    46ca:	1f 92       	push	r1
    46cc:	1f 92       	push	r1
    46ce:	cd b7       	in	r28, 0x3d	; 61
    46d0:	de b7       	in	r29, 0x3e	; 62
    46d2:	9a 83       	std	Y+2, r25	; 0x02
    46d4:	89 83       	std	Y+1, r24	; 0x01
   //store dummy speed value
   *sensorResponse = 0;
    46d6:	89 81       	ldd	r24, Y+1	; 0x01
    46d8:	9a 81       	ldd	r25, Y+2	; 0x02
    46da:	fc 01       	movw	r30, r24
    46dc:	10 82       	st	Z, r1
   //return success
   return 1;
    46de:	81 e0       	ldi	r24, 0x01	; 1
}
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
    46e4:	df 91       	pop	r29
    46e6:	cf 91       	pop	r28
    46e8:	08 95       	ret

000046ea <setSpeed>:

//will set just the speed of the wheels of the car
char setSpeed(unsigned char speedTarget) {
    46ea:	cf 93       	push	r28
    46ec:	df 93       	push	r29
    46ee:	1f 92       	push	r1
    46f0:	cd b7       	in	r28, 0x3d	; 61
    46f2:	de b7       	in	r29, 0x3e	; 62
    46f4:	89 83       	std	Y+1, r24	; 0x01
   //nothing done down here
   //return success
	if(speedTarget == 0){
    46f6:	89 81       	ldd	r24, Y+1	; 0x01
    46f8:	88 23       	and	r24, r24
    46fa:	51 f4       	brne	.+20     	; 0x4710 <setSpeed+0x26>
		PORTA &= ~4;
    46fc:	82 e2       	ldi	r24, 0x22	; 34
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	22 e2       	ldi	r18, 0x22	; 34
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	f9 01       	movw	r30, r18
    4706:	20 81       	ld	r18, Z
    4708:	2b 7f       	andi	r18, 0xFB	; 251
    470a:	fc 01       	movw	r30, r24
    470c:	20 83       	st	Z, r18
    470e:	09 c0       	rjmp	.+18     	; 0x4722 <setSpeed+0x38>
	} else {
		PORTA |= 4;
    4710:	82 e2       	ldi	r24, 0x22	; 34
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	22 e2       	ldi	r18, 0x22	; 34
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	f9 01       	movw	r30, r18
    471a:	20 81       	ld	r18, Z
    471c:	24 60       	ori	r18, 0x04	; 4
    471e:	fc 01       	movw	r30, r24
    4720:	20 83       	st	Z, r18
	}
	setPot(speedTarget);
    4722:	89 81       	ldd	r24, Y+1	; 0x01
    4724:	88 2f       	mov	r24, r24
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	0e 94 33 23 	call	0x4666	; 0x4666 <setPot>
   return 1;
    472c:	81 e0       	ldi	r24, 0x01	; 1
}
    472e:	0f 90       	pop	r0
    4730:	df 91       	pop	r29
    4732:	cf 91       	pop	r28
    4734:	08 95       	ret

00004736 <getLinearPotCallback>:
#define STEERING_RIGHT	(1 << 3)

static int steeringTarget;
static int wheelAngle;

void getLinearPotCallback(int data,void *parameters){
    4736:	cf 93       	push	r28
    4738:	df 93       	push	r29
    473a:	00 d0       	rcall	.+0      	; 0x473c <getLinearPotCallback+0x6>
    473c:	1f 92       	push	r1
    473e:	cd b7       	in	r28, 0x3d	; 61
    4740:	de b7       	in	r29, 0x3e	; 62
    4742:	9a 83       	std	Y+2, r25	; 0x02
    4744:	89 83       	std	Y+1, r24	; 0x01
    4746:	7c 83       	std	Y+4, r23	; 0x04
    4748:	6b 83       	std	Y+3, r22	; 0x03
	wheelAngle = data;
    474a:	89 81       	ldd	r24, Y+1	; 0x01
    474c:	9a 81       	ldd	r25, Y+2	; 0x02
    474e:	90 93 da 1a 	sts	0x1ADA, r25
    4752:	80 93 d9 1a 	sts	0x1AD9, r24
}
    4756:	0f 90       	pop	r0
    4758:	0f 90       	pop	r0
    475a:	0f 90       	pop	r0
    475c:	0f 90       	pop	r0
    475e:	df 91       	pop	r29
    4760:	cf 91       	pop	r28
    4762:	08 95       	ret

00004764 <initializeSteeringTimer>:

void initializeSteeringTimer(){
    4764:	cf 93       	push	r28
    4766:	df 93       	push	r29
    4768:	cd b7       	in	r28, 0x3d	; 61
    476a:	de b7       	in	r29, 0x3e	; 62
	
	TCCR1A = (1 << COM1A1)|(1 << COM1A0)|(1 << WGM10)|(1 << WGM11);
    476c:	80 e8       	ldi	r24, 0x80	; 128
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	23 ec       	ldi	r18, 0xC3	; 195
    4772:	fc 01       	movw	r30, r24
    4774:	20 83       	st	Z, r18
	TCCR1B = (1 << CS10)|(1 << WGM13)|(1 << WGM12);
    4776:	81 e8       	ldi	r24, 0x81	; 129
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	29 e1       	ldi	r18, 0x19	; 25
    477c:	fc 01       	movw	r30, r24
    477e:	20 83       	st	Z, r18
	TCCR1C = 0;
    4780:	82 e8       	ldi	r24, 0x82	; 130
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	fc 01       	movw	r30, r24
    4786:	10 82       	st	Z, r1

}
    4788:	df 91       	pop	r29
    478a:	cf 91       	pop	r28
    478c:	08 95       	ret

0000478e <setSteeringPWMSpeed>:

void setSteeringPWMSpeed(int spd){
    478e:	cf 93       	push	r28
    4790:	df 93       	push	r29
    4792:	1f 92       	push	r1
    4794:	1f 92       	push	r1
    4796:	cd b7       	in	r28, 0x3d	; 61
    4798:	de b7       	in	r29, 0x3e	; 62
    479a:	9a 83       	std	Y+2, r25	; 0x02
    479c:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH = spd >> 8;
    479e:	89 e8       	ldi	r24, 0x89	; 137
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	29 81       	ldd	r18, Y+1	; 0x01
    47a4:	3a 81       	ldd	r19, Y+2	; 0x02
    47a6:	23 2f       	mov	r18, r19
    47a8:	33 0f       	add	r19, r19
    47aa:	33 0b       	sbc	r19, r19
    47ac:	fc 01       	movw	r30, r24
    47ae:	20 83       	st	Z, r18
	OCR1AL = spd & 0xFF;
    47b0:	88 e8       	ldi	r24, 0x88	; 136
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	29 81       	ldd	r18, Y+1	; 0x01
    47b6:	fc 01       	movw	r30, r24
    47b8:	20 83       	st	Z, r18
}
    47ba:	0f 90       	pop	r0
    47bc:	0f 90       	pop	r0
    47be:	df 91       	pop	r29
    47c0:	cf 91       	pop	r28
    47c2:	08 95       	ret

000047c4 <setSteeringDirection>:

void setSteeringDirection(int dir){
    47c4:	cf 93       	push	r28
    47c6:	df 93       	push	r29
    47c8:	1f 92       	push	r1
    47ca:	1f 92       	push	r1
    47cc:	cd b7       	in	r28, 0x3d	; 61
    47ce:	de b7       	in	r29, 0x3e	; 62
    47d0:	9a 83       	std	Y+2, r25	; 0x02
    47d2:	89 83       	std	Y+1, r24	; 0x01
	switch(dir){
    47d4:	89 81       	ldd	r24, Y+1	; 0x01
    47d6:	9a 81       	ldd	r25, Y+2	; 0x02
    47d8:	00 97       	sbiw	r24, 0x00	; 0
    47da:	41 f0       	breq	.+16     	; 0x47ec <setSteeringDirection+0x28>
    47dc:	81 30       	cpi	r24, 0x01	; 1
    47de:	91 05       	cpc	r25, r1
    47e0:	c1 f0       	breq	.+48     	; 0x4812 <setSteeringDirection+0x4e>
    47e2:	8f 3f       	cpi	r24, 0xFF	; 255
    47e4:	2f ef       	ldi	r18, 0xFF	; 255
    47e6:	92 07       	cpc	r25, r18
    47e8:	39 f1       	breq	.+78     	; 0x4838 <setSteeringDirection+0x74>
    47ea:	39 c0       	rjmp	.+114    	; 0x485e <setSteeringDirection+0x9a>
	case 0:
		STEERING_PORT &= ~STEERING_LEFT;
    47ec:	8b e0       	ldi	r24, 0x0B	; 11
    47ee:	91 e0       	ldi	r25, 0x01	; 1
    47f0:	2b e0       	ldi	r18, 0x0B	; 11
    47f2:	31 e0       	ldi	r19, 0x01	; 1
    47f4:	f9 01       	movw	r30, r18
    47f6:	20 81       	ld	r18, Z
    47f8:	2b 7f       	andi	r18, 0xFB	; 251
    47fa:	fc 01       	movw	r30, r24
    47fc:	20 83       	st	Z, r18
		STEERING_PORT &= ~STEERING_RIGHT;
    47fe:	8b e0       	ldi	r24, 0x0B	; 11
    4800:	91 e0       	ldi	r25, 0x01	; 1
    4802:	2b e0       	ldi	r18, 0x0B	; 11
    4804:	31 e0       	ldi	r19, 0x01	; 1
    4806:	f9 01       	movw	r30, r18
    4808:	20 81       	ld	r18, Z
    480a:	27 7f       	andi	r18, 0xF7	; 247
    480c:	fc 01       	movw	r30, r24
    480e:	20 83       	st	Z, r18
		break;
    4810:	26 c0       	rjmp	.+76     	; 0x485e <setSteeringDirection+0x9a>
	case 1:
		STEERING_PORT &= ~STEERING_LEFT;
    4812:	8b e0       	ldi	r24, 0x0B	; 11
    4814:	91 e0       	ldi	r25, 0x01	; 1
    4816:	2b e0       	ldi	r18, 0x0B	; 11
    4818:	31 e0       	ldi	r19, 0x01	; 1
    481a:	f9 01       	movw	r30, r18
    481c:	20 81       	ld	r18, Z
    481e:	2b 7f       	andi	r18, 0xFB	; 251
    4820:	fc 01       	movw	r30, r24
    4822:	20 83       	st	Z, r18
		STEERING_PORT |= STEERING_RIGHT;
    4824:	8b e0       	ldi	r24, 0x0B	; 11
    4826:	91 e0       	ldi	r25, 0x01	; 1
    4828:	2b e0       	ldi	r18, 0x0B	; 11
    482a:	31 e0       	ldi	r19, 0x01	; 1
    482c:	f9 01       	movw	r30, r18
    482e:	20 81       	ld	r18, Z
    4830:	28 60       	ori	r18, 0x08	; 8
    4832:	fc 01       	movw	r30, r24
    4834:	20 83       	st	Z, r18
		break;
    4836:	13 c0       	rjmp	.+38     	; 0x485e <setSteeringDirection+0x9a>
	case -1:
		STEERING_PORT &= ~STEERING_RIGHT;
    4838:	8b e0       	ldi	r24, 0x0B	; 11
    483a:	91 e0       	ldi	r25, 0x01	; 1
    483c:	2b e0       	ldi	r18, 0x0B	; 11
    483e:	31 e0       	ldi	r19, 0x01	; 1
    4840:	f9 01       	movw	r30, r18
    4842:	20 81       	ld	r18, Z
    4844:	27 7f       	andi	r18, 0xF7	; 247
    4846:	fc 01       	movw	r30, r24
    4848:	20 83       	st	Z, r18
		STEERING_PORT |= STEERING_LEFT;
    484a:	8b e0       	ldi	r24, 0x0B	; 11
    484c:	91 e0       	ldi	r25, 0x01	; 1
    484e:	2b e0       	ldi	r18, 0x0B	; 11
    4850:	31 e0       	ldi	r19, 0x01	; 1
    4852:	f9 01       	movw	r30, r18
    4854:	20 81       	ld	r18, Z
    4856:	24 60       	ori	r18, 0x04	; 4
    4858:	fc 01       	movw	r30, r24
    485a:	20 83       	st	Z, r18
		break;
    485c:	00 00       	nop
	}
}
    485e:	0f 90       	pop	r0
    4860:	0f 90       	pop	r0
    4862:	df 91       	pop	r29
    4864:	cf 91       	pop	r28
    4866:	08 95       	ret

00004868 <setAngle>:

//JUST SETS ANGLE TARGET. Actual angle changing is lower level
char setAngle(char angleTarget) {
    4868:	cf 93       	push	r28
    486a:	df 93       	push	r29
    486c:	1f 92       	push	r1
    486e:	cd b7       	in	r28, 0x3d	; 61
    4870:	de b7       	in	r29, 0x3e	; 62
    4872:	89 83       	std	Y+1, r24	; 0x01
   //dummy function, nothing will happen for now...
   //return success
	steeringTarget = angleTarget;
    4874:	89 81       	ldd	r24, Y+1	; 0x01
    4876:	99 27       	eor	r25, r25
    4878:	87 fd       	sbrc	r24, 7
    487a:	90 95       	com	r25
    487c:	90 93 d8 1a 	sts	0x1AD8, r25
    4880:	80 93 d7 1a 	sts	0x1AD7, r24
   return 1;
    4884:	81 e0       	ldi	r24, 0x01	; 1
}
    4886:	0f 90       	pop	r0
    4888:	df 91       	pop	r29
    488a:	cf 91       	pop	r28
    488c:	08 95       	ret

0000488e <getAngle>:

//get the current angle of the steering system
char getAngle(char* sensorResponse) {
    488e:	cf 93       	push	r28
    4890:	df 93       	push	r29
    4892:	1f 92       	push	r1
    4894:	1f 92       	push	r1
    4896:	cd b7       	in	r28, 0x3d	; 61
    4898:	de b7       	in	r29, 0x3e	; 62
    489a:	9a 83       	std	Y+2, r25	; 0x02
    489c:	89 83       	std	Y+1, r24	; 0x01
   //store fake angle reading
   *sensorResponse = 0;
    489e:	89 81       	ldd	r24, Y+1	; 0x01
    48a0:	9a 81       	ldd	r25, Y+2	; 0x02
    48a2:	fc 01       	movw	r30, r24
    48a4:	10 82       	st	Z, r1
   //return success
   return 1;
    48a6:	81 e0       	ldi	r24, 0x01	; 1
}
    48a8:	0f 90       	pop	r0
    48aa:	0f 90       	pop	r0
    48ac:	df 91       	pop	r29
    48ae:	cf 91       	pop	r28
    48b0:	08 95       	ret

000048b2 <getDesiredAngle>:

//get the angle target. argument name is sensorResponse for the sake of consistancy
char getDesiredAngle(char* sensorResponse) {
    48b2:	cf 93       	push	r28
    48b4:	df 93       	push	r29
    48b6:	1f 92       	push	r1
    48b8:	1f 92       	push	r1
    48ba:	cd b7       	in	r28, 0x3d	; 61
    48bc:	de b7       	in	r29, 0x3e	; 62
    48be:	9a 83       	std	Y+2, r25	; 0x02
    48c0:	89 83       	std	Y+1, r24	; 0x01
   //fake response
   *sensorResponse = 0;
    48c2:	89 81       	ldd	r24, Y+1	; 0x01
    48c4:	9a 81       	ldd	r25, Y+2	; 0x02
    48c6:	fc 01       	movw	r30, r24
    48c8:	10 82       	st	Z, r1
   //return success
   return 1;
    48ca:	81 e0       	ldi	r24, 0x01	; 1
}
    48cc:	0f 90       	pop	r0
    48ce:	0f 90       	pop	r0
    48d0:	df 91       	pop	r29
    48d2:	cf 91       	pop	r28
    48d4:	08 95       	ret

000048d6 <changePID>:

//change the PID controller
char changePID(char P, char I, char D) {
    48d6:	cf 93       	push	r28
    48d8:	df 93       	push	r29
    48da:	00 d0       	rcall	.+0      	; 0x48dc <changePID+0x6>
    48dc:	cd b7       	in	r28, 0x3d	; 61
    48de:	de b7       	in	r29, 0x3e	; 62
    48e0:	89 83       	std	Y+1, r24	; 0x01
    48e2:	6a 83       	std	Y+2, r22	; 0x02
    48e4:	4b 83       	std	Y+3, r20	; 0x03
   //dummy function, nothing happens
   //return success
   return 1;
    48e6:	81 e0       	ldi	r24, 0x01	; 1
}
    48e8:	0f 90       	pop	r0
    48ea:	0f 90       	pop	r0
    48ec:	0f 90       	pop	r0
    48ee:	df 91       	pop	r29
    48f0:	cf 91       	pop	r28
    48f2:	08 95       	ret

000048f4 <setLimits>:

//not sure what this does. Also not sure why upper and lower are separated
//but its in the specs so...
char setLimits(char upper, char lower) {
    48f4:	cf 93       	push	r28
    48f6:	df 93       	push	r29
    48f8:	1f 92       	push	r1
    48fa:	1f 92       	push	r1
    48fc:	cd b7       	in	r28, 0x3d	; 61
    48fe:	de b7       	in	r29, 0x3e	; 62
    4900:	89 83       	std	Y+1, r24	; 0x01
    4902:	6a 83       	std	Y+2, r22	; 0x02
   //dummy function, nothing happens
   //return success
   return 1;
    4904:	81 e0       	ldi	r24, 0x01	; 1
}
    4906:	0f 90       	pop	r0
    4908:	0f 90       	pop	r0
    490a:	df 91       	pop	r29
    490c:	cf 91       	pop	r28
    490e:	08 95       	ret

00004910 <vTaskSteer>:

void vTaskSteer(void* parameters){
    4910:	cf 93       	push	r28
    4912:	df 93       	push	r29
    4914:	1f 92       	push	r1
    4916:	1f 92       	push	r1
    4918:	cd b7       	in	r28, 0x3d	; 61
    491a:	de b7       	in	r29, 0x3e	; 62
    491c:	9a 83       	std	Y+2, r25	; 0x02
    491e:	89 83       	std	Y+1, r24	; 0x01
		}
		setSteeringPWMSpeed(adjust);
		vTaskDelay(10);
	}*/

}
    4920:	0f 90       	pop	r0
    4922:	0f 90       	pop	r0
    4924:	df 91       	pop	r29
    4926:	cf 91       	pop	r28
    4928:	08 95       	ret

0000492a <initializeSPI>:
const static int mosi_pin = 2;
const static int miso_pin = 3;
const static int sck_pin = 1;
const static int ss_pin = 0; 

void initializeSPI(){
    492a:	cf 93       	push	r28
    492c:	df 93       	push	r29
    492e:	cd b7       	in	r28, 0x3d	; 61
    4930:	de b7       	in	r29, 0x3e	; 62
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR1)|(1 << SPR0);
    4932:	8c e4       	ldi	r24, 0x4C	; 76
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	23 e5       	ldi	r18, 0x53	; 83
    4938:	fc 01       	movw	r30, r24
    493a:	20 83       	st	Z, r18
	DDRB |= (1 << ss_pin)|(1 << sck_pin)|(1 << mosi_pin);
    493c:	84 e2       	ldi	r24, 0x24	; 36
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	24 e2       	ldi	r18, 0x24	; 36
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	f9 01       	movw	r30, r18
    4946:	20 81       	ld	r18, Z
    4948:	62 2f       	mov	r22, r18
    494a:	40 e0       	ldi	r20, 0x00	; 0
    494c:	50 e0       	ldi	r21, 0x00	; 0
    494e:	21 e0       	ldi	r18, 0x01	; 1
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	02 c0       	rjmp	.+4      	; 0x4958 <initializeSPI+0x2e>
    4954:	22 0f       	add	r18, r18
    4956:	33 1f       	adc	r19, r19
    4958:	4a 95       	dec	r20
    495a:	e2 f7       	brpl	.-8      	; 0x4954 <initializeSPI+0x2a>
    495c:	72 2f       	mov	r23, r18
    495e:	41 e0       	ldi	r20, 0x01	; 1
    4960:	50 e0       	ldi	r21, 0x00	; 0
    4962:	21 e0       	ldi	r18, 0x01	; 1
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	02 c0       	rjmp	.+4      	; 0x496c <initializeSPI+0x42>
    4968:	22 0f       	add	r18, r18
    496a:	33 1f       	adc	r19, r19
    496c:	4a 95       	dec	r20
    496e:	e2 f7       	brpl	.-8      	; 0x4968 <initializeSPI+0x3e>
    4970:	72 2b       	or	r23, r18
    4972:	42 e0       	ldi	r20, 0x02	; 2
    4974:	50 e0       	ldi	r21, 0x00	; 0
    4976:	21 e0       	ldi	r18, 0x01	; 1
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	02 c0       	rjmp	.+4      	; 0x4980 <initializeSPI+0x56>
    497c:	22 0f       	add	r18, r18
    497e:	33 1f       	adc	r19, r19
    4980:	4a 95       	dec	r20
    4982:	e2 f7       	brpl	.-8      	; 0x497c <initializeSPI+0x52>
    4984:	27 2b       	or	r18, r23
    4986:	26 2b       	or	r18, r22
    4988:	fc 01       	movw	r30, r24
    498a:	20 83       	st	Z, r18
	DDRB &= ~(1 << miso_pin);
    498c:	84 e2       	ldi	r24, 0x24	; 36
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	24 e2       	ldi	r18, 0x24	; 36
    4992:	30 e0       	ldi	r19, 0x00	; 0
    4994:	f9 01       	movw	r30, r18
    4996:	20 81       	ld	r18, Z
    4998:	62 2f       	mov	r22, r18
    499a:	43 e0       	ldi	r20, 0x03	; 3
    499c:	50 e0       	ldi	r21, 0x00	; 0
    499e:	21 e0       	ldi	r18, 0x01	; 1
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	02 c0       	rjmp	.+4      	; 0x49a8 <initializeSPI+0x7e>
    49a4:	22 0f       	add	r18, r18
    49a6:	33 1f       	adc	r19, r19
    49a8:	4a 95       	dec	r20
    49aa:	e2 f7       	brpl	.-8      	; 0x49a4 <initializeSPI+0x7a>
    49ac:	20 95       	com	r18
    49ae:	26 23       	and	r18, r22
    49b0:	fc 01       	movw	r30, r24
    49b2:	20 83       	st	Z, r18
	PORTB |= 1 << ss_pin;
    49b4:	85 e2       	ldi	r24, 0x25	; 37
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	25 e2       	ldi	r18, 0x25	; 37
    49ba:	30 e0       	ldi	r19, 0x00	; 0
    49bc:	f9 01       	movw	r30, r18
    49be:	20 81       	ld	r18, Z
    49c0:	62 2f       	mov	r22, r18
    49c2:	40 e0       	ldi	r20, 0x00	; 0
    49c4:	50 e0       	ldi	r21, 0x00	; 0
    49c6:	21 e0       	ldi	r18, 0x01	; 1
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	02 c0       	rjmp	.+4      	; 0x49d0 <initializeSPI+0xa6>
    49cc:	22 0f       	add	r18, r18
    49ce:	33 1f       	adc	r19, r19
    49d0:	4a 95       	dec	r20
    49d2:	e2 f7       	brpl	.-8      	; 0x49cc <initializeSPI+0xa2>
    49d4:	26 2b       	or	r18, r22
    49d6:	fc 01       	movw	r30, r24
    49d8:	20 83       	st	Z, r18
	PORTB &= ~(1 << sck_pin);
    49da:	85 e2       	ldi	r24, 0x25	; 37
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	25 e2       	ldi	r18, 0x25	; 37
    49e0:	30 e0       	ldi	r19, 0x00	; 0
    49e2:	f9 01       	movw	r30, r18
    49e4:	20 81       	ld	r18, Z
    49e6:	62 2f       	mov	r22, r18
    49e8:	41 e0       	ldi	r20, 0x01	; 1
    49ea:	50 e0       	ldi	r21, 0x00	; 0
    49ec:	21 e0       	ldi	r18, 0x01	; 1
    49ee:	30 e0       	ldi	r19, 0x00	; 0
    49f0:	04 2e       	mov	r0, r20
    49f2:	02 c0       	rjmp	.+4      	; 0x49f8 <initializeSPI+0xce>
    49f4:	22 0f       	add	r18, r18
    49f6:	33 1f       	adc	r19, r19
    49f8:	0a 94       	dec	r0
    49fa:	e2 f7       	brpl	.-8      	; 0x49f4 <initializeSPI+0xca>
    49fc:	20 95       	com	r18
    49fe:	26 23       	and	r18, r22
    4a00:	fc 01       	movw	r30, r24
    4a02:	20 83       	st	Z, r18
}
    4a04:	df 91       	pop	r29
    4a06:	cf 91       	pop	r28
    4a08:	08 95       	ret

00004a0a <SPIsendByte>:

void SPIsendByte(unsigned char byte){
    4a0a:	cf 93       	push	r28
    4a0c:	df 93       	push	r29
    4a0e:	1f 92       	push	r1
    4a10:	cd b7       	in	r28, 0x3d	; 61
    4a12:	de b7       	in	r29, 0x3e	; 62
    4a14:	89 83       	std	Y+1, r24	; 0x01
	PORTB &= ~(1 << ss_pin);
    4a16:	85 e2       	ldi	r24, 0x25	; 37
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	25 e2       	ldi	r18, 0x25	; 37
    4a1c:	30 e0       	ldi	r19, 0x00	; 0
    4a1e:	f9 01       	movw	r30, r18
    4a20:	20 81       	ld	r18, Z
    4a22:	62 2f       	mov	r22, r18
    4a24:	40 e0       	ldi	r20, 0x00	; 0
    4a26:	50 e0       	ldi	r21, 0x00	; 0
    4a28:	21 e0       	ldi	r18, 0x01	; 1
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	02 c0       	rjmp	.+4      	; 0x4a32 <SPIsendByte+0x28>
    4a2e:	22 0f       	add	r18, r18
    4a30:	33 1f       	adc	r19, r19
    4a32:	4a 95       	dec	r20
    4a34:	e2 f7       	brpl	.-8      	; 0x4a2e <SPIsendByte+0x24>
    4a36:	20 95       	com	r18
    4a38:	26 23       	and	r18, r22
    4a3a:	fc 01       	movw	r30, r24
    4a3c:	20 83       	st	Z, r18
	vTaskDelay(1);
    4a3e:	81 e0       	ldi	r24, 0x01	; 1
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
	SPDR = byte;
    4a46:	8e e4       	ldi	r24, 0x4E	; 78
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	29 81       	ldd	r18, Y+1	; 0x01
    4a4c:	fc 01       	movw	r30, r24
    4a4e:	20 83       	st	Z, r18
	while((SPSR & (1 << SPIF)) == 0)
    4a50:	00 00       	nop
    4a52:	8d e4       	ldi	r24, 0x4D	; 77
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	fc 01       	movw	r30, r24
    4a58:	80 81       	ld	r24, Z
    4a5a:	88 23       	and	r24, r24
    4a5c:	d4 f7       	brge	.-12     	; 0x4a52 <SPIsendByte+0x48>
	;
	vTaskDelay(1);
    4a5e:	81 e0       	ldi	r24, 0x01	; 1
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
	PORTB |= (1 << ss_pin);
    4a66:	85 e2       	ldi	r24, 0x25	; 37
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	25 e2       	ldi	r18, 0x25	; 37
    4a6c:	30 e0       	ldi	r19, 0x00	; 0
    4a6e:	f9 01       	movw	r30, r18
    4a70:	20 81       	ld	r18, Z
    4a72:	62 2f       	mov	r22, r18
    4a74:	40 e0       	ldi	r20, 0x00	; 0
    4a76:	50 e0       	ldi	r21, 0x00	; 0
    4a78:	21 e0       	ldi	r18, 0x01	; 1
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	04 2e       	mov	r0, r20
    4a7e:	02 c0       	rjmp	.+4      	; 0x4a84 <SPIsendByte+0x7a>
    4a80:	22 0f       	add	r18, r18
    4a82:	33 1f       	adc	r19, r19
    4a84:	0a 94       	dec	r0
    4a86:	e2 f7       	brpl	.-8      	; 0x4a80 <SPIsendByte+0x76>
    4a88:	26 2b       	or	r18, r22
    4a8a:	fc 01       	movw	r30, r24
    4a8c:	20 83       	st	Z, r18

}
    4a8e:	0f 90       	pop	r0
    4a90:	df 91       	pop	r29
    4a92:	cf 91       	pop	r28
    4a94:	08 95       	ret

00004a96 <SPIsendShort>:

void SPIsendShort(unsigned short data){
    4a96:	cf 93       	push	r28
    4a98:	df 93       	push	r29
    4a9a:	1f 92       	push	r1
    4a9c:	1f 92       	push	r1
    4a9e:	cd b7       	in	r28, 0x3d	; 61
    4aa0:	de b7       	in	r29, 0x3e	; 62
    4aa2:	9a 83       	std	Y+2, r25	; 0x02
    4aa4:	89 83       	std	Y+1, r24	; 0x01
	PORTB &= ~(1 << ss_pin);
    4aa6:	85 e2       	ldi	r24, 0x25	; 37
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	25 e2       	ldi	r18, 0x25	; 37
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	f9 01       	movw	r30, r18
    4ab0:	20 81       	ld	r18, Z
    4ab2:	62 2f       	mov	r22, r18
    4ab4:	40 e0       	ldi	r20, 0x00	; 0
    4ab6:	50 e0       	ldi	r21, 0x00	; 0
    4ab8:	21 e0       	ldi	r18, 0x01	; 1
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	02 c0       	rjmp	.+4      	; 0x4ac2 <SPIsendShort+0x2c>
    4abe:	22 0f       	add	r18, r18
    4ac0:	33 1f       	adc	r19, r19
    4ac2:	4a 95       	dec	r20
    4ac4:	e2 f7       	brpl	.-8      	; 0x4abe <SPIsendShort+0x28>
    4ac6:	20 95       	com	r18
    4ac8:	26 23       	and	r18, r22
    4aca:	fc 01       	movw	r30, r24
    4acc:	20 83       	st	Z, r18
	vTaskDelay(2);
    4ace:	82 e0       	ldi	r24, 0x02	; 2
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
	SPDR = (data >> 8);
    4ad6:	8e e4       	ldi	r24, 0x4E	; 78
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	29 81       	ldd	r18, Y+1	; 0x01
    4adc:	3a 81       	ldd	r19, Y+2	; 0x02
    4ade:	23 2f       	mov	r18, r19
    4ae0:	33 27       	eor	r19, r19
    4ae2:	fc 01       	movw	r30, r24
    4ae4:	20 83       	st	Z, r18
	while((SPSR & (1 << SPIF)) == 0)
    4ae6:	00 00       	nop
    4ae8:	8d e4       	ldi	r24, 0x4D	; 77
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	fc 01       	movw	r30, r24
    4aee:	80 81       	ld	r24, Z
    4af0:	88 23       	and	r24, r24
    4af2:	d4 f7       	brge	.-12     	; 0x4ae8 <SPIsendShort+0x52>
	;
	SPDR = data & 0xFF;
    4af4:	8e e4       	ldi	r24, 0x4E	; 78
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	29 81       	ldd	r18, Y+1	; 0x01
    4afa:	fc 01       	movw	r30, r24
    4afc:	20 83       	st	Z, r18
	while((SPSR & (1 << SPIF)) == 0)
    4afe:	00 00       	nop
    4b00:	8d e4       	ldi	r24, 0x4D	; 77
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	fc 01       	movw	r30, r24
    4b06:	80 81       	ld	r24, Z
    4b08:	88 23       	and	r24, r24
    4b0a:	d4 f7       	brge	.-12     	; 0x4b00 <SPIsendShort+0x6a>
	;
	vTaskDelay(2);
    4b0c:	82 e0       	ldi	r24, 0x02	; 2
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
	PORTB |= (1 << ss_pin);
    4b14:	85 e2       	ldi	r24, 0x25	; 37
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	25 e2       	ldi	r18, 0x25	; 37
    4b1a:	30 e0       	ldi	r19, 0x00	; 0
    4b1c:	f9 01       	movw	r30, r18
    4b1e:	20 81       	ld	r18, Z
    4b20:	62 2f       	mov	r22, r18
    4b22:	40 e0       	ldi	r20, 0x00	; 0
    4b24:	50 e0       	ldi	r21, 0x00	; 0
    4b26:	21 e0       	ldi	r18, 0x01	; 1
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	04 2e       	mov	r0, r20
    4b2c:	02 c0       	rjmp	.+4      	; 0x4b32 <SPIsendShort+0x9c>
    4b2e:	22 0f       	add	r18, r18
    4b30:	33 1f       	adc	r19, r19
    4b32:	0a 94       	dec	r0
    4b34:	e2 f7       	brpl	.-8      	; 0x4b2e <SPIsendShort+0x98>
    4b36:	26 2b       	or	r18, r22
    4b38:	fc 01       	movw	r30, r24
    4b3a:	20 83       	st	Z, r18
}
    4b3c:	0f 90       	pop	r0
    4b3e:	0f 90       	pop	r0
    4b40:	df 91       	pop	r29
    4b42:	cf 91       	pop	r28
    4b44:	08 95       	ret

00004b46 <initADC>:
static ADCDevice devices[16];
static int currDevice = 0;
static int ADCinitialized = 0;

//Initialize ADC registers
void initADC(){
    4b46:	cf 93       	push	r28
    4b48:	df 93       	push	r29
    4b4a:	cd b7       	in	r28, 0x3d	; 61
    4b4c:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = _BV(ADEN);
    4b4e:	8a e7       	ldi	r24, 0x7A	; 122
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	20 e8       	ldi	r18, 0x80	; 128
    4b54:	fc 01       	movw	r30, r24
    4b56:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0)|(1);
    4b58:	8c e7       	ldi	r24, 0x7C	; 124
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	21 e4       	ldi	r18, 0x41	; 65
    4b5e:	fc 01       	movw	r30, r24
    4b60:	20 83       	st	Z, r18

	ADCSRB = (1 << MUX5);
    4b62:	8b e7       	ldi	r24, 0x7B	; 123
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	28 e0       	ldi	r18, 0x08	; 8
    4b68:	fc 01       	movw	r30, r24
    4b6a:	20 83       	st	Z, r18
	
	//DIDR2 = 0xFF;
}
    4b6c:	df 91       	pop	r29
    4b6e:	cf 91       	pop	r28
    4b70:	08 95       	ret

00004b72 <ADCStart>:

//If the ADC isn't running, start it
void ADCStart(ADCDevice* nextDevice) {
    4b72:	cf 93       	push	r28
    4b74:	df 93       	push	r29
    4b76:	1f 92       	push	r1
    4b78:	1f 92       	push	r1
    4b7a:	cd b7       	in	r28, 0x3d	; 61
    4b7c:	de b7       	in	r29, 0x3e	; 62
    4b7e:	9a 83       	std	Y+2, r25	; 0x02
    4b80:	89 83       	std	Y+1, r24	; 0x01

		
	if(!(ADCSRA & _BV(ADSC))){
    4b82:	8a e7       	ldi	r24, 0x7A	; 122
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	fc 01       	movw	r30, r24
    4b88:	80 81       	ld	r24, Z
    4b8a:	88 2f       	mov	r24, r24
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	80 74       	andi	r24, 0x40	; 64
    4b90:	99 27       	eor	r25, r25
    4b92:	00 97       	sbiw	r24, 0x00	; 0
    4b94:	09 f0       	breq	.+2      	; 0x4b98 <ADCStart+0x26>
    4b96:	90 c0       	rjmp	.+288    	; 0x4cb8 <ADCStart+0x146>
		ADCSRA &= ~((1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0));
    4b98:	8a e7       	ldi	r24, 0x7A	; 122
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	2a e7       	ldi	r18, 0x7A	; 122
    4b9e:	30 e0       	ldi	r19, 0x00	; 0
    4ba0:	f9 01       	movw	r30, r18
    4ba2:	20 81       	ld	r18, Z
    4ba4:	28 7f       	andi	r18, 0xF8	; 248
    4ba6:	fc 01       	movw	r30, r24
    4ba8:	20 83       	st	Z, r18
		switch(nextDevice->options & ADC_OPT_PRECISION_MASK){
    4baa:	89 81       	ldd	r24, Y+1	; 0x01
    4bac:	9a 81       	ldd	r25, Y+2	; 0x02
    4bae:	fc 01       	movw	r30, r24
    4bb0:	82 81       	ldd	r24, Z+2	; 0x02
    4bb2:	93 81       	ldd	r25, Z+3	; 0x03
    4bb4:	83 70       	andi	r24, 0x03	; 3
    4bb6:	99 27       	eor	r25, r25
    4bb8:	81 30       	cpi	r24, 0x01	; 1
    4bba:	91 05       	cpc	r25, r1
    4bbc:	a1 f0       	breq	.+40     	; 0x4be6 <ADCStart+0x74>
    4bbe:	82 30       	cpi	r24, 0x02	; 2
    4bc0:	91 05       	cpc	r25, r1
    4bc2:	1c f4       	brge	.+6      	; 0x4bca <ADCStart+0x58>
    4bc4:	00 97       	sbiw	r24, 0x00	; 0
    4bc6:	29 f0       	breq	.+10     	; 0x4bd2 <ADCStart+0x60>
    4bc8:	22 c0       	rjmp	.+68     	; 0x4c0e <ADCStart+0x9c>
    4bca:	82 30       	cpi	r24, 0x02	; 2
    4bcc:	91 05       	cpc	r25, r1
    4bce:	a9 f0       	breq	.+42     	; 0x4bfa <ADCStart+0x88>
			break;
		case ADC_OPT_PRECISION_MED:
			ADCSRA |= (1 << ADPS1)|(1 << ADPS0);
			break;
		case ADC_OPT_PRECISION_LOW:
			break;
    4bd0:	1e c0       	rjmp	.+60     	; 0x4c0e <ADCStart+0x9c>
		
	if(!(ADCSRA & _BV(ADSC))){
		ADCSRA &= ~((1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0));
		switch(nextDevice->options & ADC_OPT_PRECISION_MASK){
		case ADC_OPT_PRECISION_HIGH:
			ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
    4bd2:	8a e7       	ldi	r24, 0x7A	; 122
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	2a e7       	ldi	r18, 0x7A	; 122
    4bd8:	30 e0       	ldi	r19, 0x00	; 0
    4bda:	f9 01       	movw	r30, r18
    4bdc:	20 81       	ld	r18, Z
    4bde:	27 60       	ori	r18, 0x07	; 7
    4be0:	fc 01       	movw	r30, r24
    4be2:	20 83       	st	Z, r18
			break;
    4be4:	14 c0       	rjmp	.+40     	; 0x4c0e <ADCStart+0x9c>
		case ADC_OPT_PRECISION_MED_HIGH:
			ADCSRA |= (1 << ADPS2)|(1 << ADPS0);
    4be6:	8a e7       	ldi	r24, 0x7A	; 122
    4be8:	90 e0       	ldi	r25, 0x00	; 0
    4bea:	2a e7       	ldi	r18, 0x7A	; 122
    4bec:	30 e0       	ldi	r19, 0x00	; 0
    4bee:	f9 01       	movw	r30, r18
    4bf0:	20 81       	ld	r18, Z
    4bf2:	25 60       	ori	r18, 0x05	; 5
    4bf4:	fc 01       	movw	r30, r24
    4bf6:	20 83       	st	Z, r18
			break;
    4bf8:	0a c0       	rjmp	.+20     	; 0x4c0e <ADCStart+0x9c>
		case ADC_OPT_PRECISION_MED:
			ADCSRA |= (1 << ADPS1)|(1 << ADPS0);
    4bfa:	8a e7       	ldi	r24, 0x7A	; 122
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	2a e7       	ldi	r18, 0x7A	; 122
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	f9 01       	movw	r30, r18
    4c04:	20 81       	ld	r18, Z
    4c06:	23 60       	ori	r18, 0x03	; 3
    4c08:	fc 01       	movw	r30, r24
    4c0a:	20 83       	st	Z, r18
			break;
    4c0c:	00 00       	nop
		case ADC_OPT_PRECISION_LOW:
			break;
		}
		ADMUX &= ~((1 << MUX0)|(1 << MUX1)|(1 << MUX2)|(1 << MUX3));
    4c0e:	8c e7       	ldi	r24, 0x7C	; 124
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	2c e7       	ldi	r18, 0x7C	; 124
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	f9 01       	movw	r30, r18
    4c18:	20 81       	ld	r18, Z
    4c1a:	20 7f       	andi	r18, 0xF0	; 240
    4c1c:	fc 01       	movw	r30, r24
    4c1e:	20 83       	st	Z, r18
		if(nextDevice->port < 8){
    4c20:	89 81       	ldd	r24, Y+1	; 0x01
    4c22:	9a 81       	ldd	r25, Y+2	; 0x02
    4c24:	fc 01       	movw	r30, r24
    4c26:	80 81       	ld	r24, Z
    4c28:	91 81       	ldd	r25, Z+1	; 0x01
    4c2a:	88 30       	cpi	r24, 0x08	; 8
    4c2c:	91 05       	cpc	r25, r1
    4c2e:	cc f4       	brge	.+50     	; 0x4c62 <ADCStart+0xf0>
			ADCSRB &= ~(1 << MUX5);
    4c30:	8b e7       	ldi	r24, 0x7B	; 123
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	2b e7       	ldi	r18, 0x7B	; 123
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	f9 01       	movw	r30, r18
    4c3a:	20 81       	ld	r18, Z
    4c3c:	27 7f       	andi	r18, 0xF7	; 247
    4c3e:	fc 01       	movw	r30, r24
    4c40:	20 83       	st	Z, r18
			ADMUX |= nextDevice->port;
    4c42:	8c e7       	ldi	r24, 0x7C	; 124
    4c44:	90 e0       	ldi	r25, 0x00	; 0
    4c46:	2c e7       	ldi	r18, 0x7C	; 124
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	f9 01       	movw	r30, r18
    4c4c:	20 81       	ld	r18, Z
    4c4e:	42 2f       	mov	r20, r18
    4c50:	29 81       	ldd	r18, Y+1	; 0x01
    4c52:	3a 81       	ldd	r19, Y+2	; 0x02
    4c54:	f9 01       	movw	r30, r18
    4c56:	20 81       	ld	r18, Z
    4c58:	31 81       	ldd	r19, Z+1	; 0x01
    4c5a:	24 2b       	or	r18, r20
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	20 83       	st	Z, r18
    4c60:	19 c0       	rjmp	.+50     	; 0x4c94 <ADCStart+0x122>
		} else {
			ADCSRB |= (1 << MUX5);
    4c62:	8b e7       	ldi	r24, 0x7B	; 123
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	2b e7       	ldi	r18, 0x7B	; 123
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	f9 01       	movw	r30, r18
    4c6c:	20 81       	ld	r18, Z
    4c6e:	28 60       	ori	r18, 0x08	; 8
    4c70:	fc 01       	movw	r30, r24
    4c72:	20 83       	st	Z, r18
			ADMUX |= nextDevice->port - 8;
    4c74:	8c e7       	ldi	r24, 0x7C	; 124
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	2c e7       	ldi	r18, 0x7C	; 124
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	f9 01       	movw	r30, r18
    4c7e:	20 81       	ld	r18, Z
    4c80:	42 2f       	mov	r20, r18
    4c82:	29 81       	ldd	r18, Y+1	; 0x01
    4c84:	3a 81       	ldd	r19, Y+2	; 0x02
    4c86:	f9 01       	movw	r30, r18
    4c88:	20 81       	ld	r18, Z
    4c8a:	31 81       	ldd	r19, Z+1	; 0x01
    4c8c:	28 50       	subi	r18, 0x08	; 8
    4c8e:	24 2b       	or	r18, r20
    4c90:	fc 01       	movw	r30, r24
    4c92:	20 83       	st	Z, r18
		}
		
		ADCSRA |= _BV(ADIE);
    4c94:	8a e7       	ldi	r24, 0x7A	; 122
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	2a e7       	ldi	r18, 0x7A	; 122
    4c9a:	30 e0       	ldi	r19, 0x00	; 0
    4c9c:	f9 01       	movw	r30, r18
    4c9e:	20 81       	ld	r18, Z
    4ca0:	28 60       	ori	r18, 0x08	; 8
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	20 83       	st	Z, r18
		ADCSRA |= _BV(ADSC);
    4ca6:	8a e7       	ldi	r24, 0x7A	; 122
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	2a e7       	ldi	r18, 0x7A	; 122
    4cac:	30 e0       	ldi	r19, 0x00	; 0
    4cae:	f9 01       	movw	r30, r18
    4cb0:	20 81       	ld	r18, Z
    4cb2:	20 64       	ori	r18, 0x40	; 64
    4cb4:	fc 01       	movw	r30, r24
    4cb6:	20 83       	st	Z, r18
	}
}
    4cb8:	0f 90       	pop	r0
    4cba:	0f 90       	pop	r0
    4cbc:	df 91       	pop	r29
    4cbe:	cf 91       	pop	r28
    4cc0:	08 95       	ret

00004cc2 <__vector_29>:

//Read the finished value of the ADC and store it
ISR(ADC_vect) {
    4cc2:	1f 92       	push	r1
    4cc4:	0f 92       	push	r0
    4cc6:	00 90 5f 00 	lds	r0, 0x005F
    4cca:	0f 92       	push	r0
    4ccc:	11 24       	eor	r1, r1
    4cce:	00 90 5b 00 	lds	r0, 0x005B
    4cd2:	0f 92       	push	r0
    4cd4:	2f 93       	push	r18
    4cd6:	3f 93       	push	r19
    4cd8:	4f 93       	push	r20
    4cda:	5f 93       	push	r21
    4cdc:	6f 93       	push	r22
    4cde:	7f 93       	push	r23
    4ce0:	8f 93       	push	r24
    4ce2:	9f 93       	push	r25
    4ce4:	af 93       	push	r26
    4ce6:	bf 93       	push	r27
    4ce8:	ef 93       	push	r30
    4cea:	ff 93       	push	r31
    4cec:	cf 93       	push	r28
    4cee:	df 93       	push	r29
    4cf0:	00 d0       	rcall	.+0      	; 0x4cf2 <__vector_29+0x30>
    4cf2:	00 d0       	rcall	.+0      	; 0x4cf4 <__vector_29+0x32>
    4cf4:	cd b7       	in	r28, 0x3d	; 61
    4cf6:	de b7       	in	r29, 0x3e	; 62
	int result = ADCL;
    4cf8:	88 e7       	ldi	r24, 0x78	; 120
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	fc 01       	movw	r30, r24
    4cfe:	80 81       	ld	r24, Z
    4d00:	88 2f       	mov	r24, r24
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	9a 83       	std	Y+2, r25	; 0x02
    4d06:	89 83       	std	Y+1, r24	; 0x01
	result |= (ADCH << 8);
    4d08:	89 e7       	ldi	r24, 0x79	; 121
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	fc 01       	movw	r30, r24
    4d0e:	80 81       	ld	r24, Z
    4d10:	88 2f       	mov	r24, r24
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	98 2f       	mov	r25, r24
    4d16:	88 27       	eor	r24, r24
    4d18:	29 81       	ldd	r18, Y+1	; 0x01
    4d1a:	3a 81       	ldd	r19, Y+2	; 0x02
    4d1c:	82 2b       	or	r24, r18
    4d1e:	93 2b       	or	r25, r19
    4d20:	9a 83       	std	Y+2, r25	; 0x02
    4d22:	89 83       	std	Y+1, r24	; 0x01
	
	ADCHandler handler = devices[currDevice].handler;
    4d24:	80 91 5d 1b 	lds	r24, 0x1B5D
    4d28:	90 91 5e 1b 	lds	r25, 0x1B5E
    4d2c:	88 0f       	add	r24, r24
    4d2e:	99 1f       	adc	r25, r25
    4d30:	88 0f       	add	r24, r24
    4d32:	99 1f       	adc	r25, r25
    4d34:	88 0f       	add	r24, r24
    4d36:	99 1f       	adc	r25, r25
    4d38:	8d 51       	subi	r24, 0x1D	; 29
    4d3a:	95 4e       	sbci	r25, 0xE5	; 229
    4d3c:	fc 01       	movw	r30, r24
    4d3e:	80 81       	ld	r24, Z
    4d40:	91 81       	ldd	r25, Z+1	; 0x01
    4d42:	9c 83       	std	Y+4, r25	; 0x04
    4d44:	8b 83       	std	Y+3, r24	; 0x03
	void *parameters = devices[currDevice].parameters;
    4d46:	80 91 5d 1b 	lds	r24, 0x1B5D
    4d4a:	90 91 5e 1b 	lds	r25, 0x1B5E
    4d4e:	88 0f       	add	r24, r24
    4d50:	99 1f       	adc	r25, r25
    4d52:	88 0f       	add	r24, r24
    4d54:	99 1f       	adc	r25, r25
    4d56:	88 0f       	add	r24, r24
    4d58:	99 1f       	adc	r25, r25
    4d5a:	8f 51       	subi	r24, 0x1F	; 31
    4d5c:	95 4e       	sbci	r25, 0xE5	; 229
    4d5e:	fc 01       	movw	r30, r24
    4d60:	80 81       	ld	r24, Z
    4d62:	91 81       	ldd	r25, Z+1	; 0x01
    4d64:	9e 83       	std	Y+6, r25	; 0x06
    4d66:	8d 83       	std	Y+5, r24	; 0x05
	
	handler(result,parameters);
    4d68:	4d 81       	ldd	r20, Y+5	; 0x05
    4d6a:	5e 81       	ldd	r21, Y+6	; 0x06
    4d6c:	89 81       	ldd	r24, Y+1	; 0x01
    4d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d70:	2b 81       	ldd	r18, Y+3	; 0x03
    4d72:	3c 81       	ldd	r19, Y+4	; 0x04
    4d74:	ba 01       	movw	r22, r20
    4d76:	f9 01       	movw	r30, r18
    4d78:	19 95       	eicall
	
	ADCSRA &= ~(_BV(ADIE));
    4d7a:	8a e7       	ldi	r24, 0x7A	; 122
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	2a e7       	ldi	r18, 0x7A	; 122
    4d80:	30 e0       	ldi	r19, 0x00	; 0
    4d82:	f9 01       	movw	r30, r18
    4d84:	20 81       	ld	r18, Z
    4d86:	27 7f       	andi	r18, 0xF7	; 247
    4d88:	fc 01       	movw	r30, r24
    4d8a:	20 83       	st	Z, r18
	
	xSemaphoreGiveFromISR(adcSemaphore,0);
    4d8c:	80 91 db 1a 	lds	r24, 0x1ADB
    4d90:	90 91 dc 1a 	lds	r25, 0x1ADC
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	40 e0       	ldi	r20, 0x00	; 0
    4d98:	50 e0       	ldi	r21, 0x00	; 0
    4d9a:	60 e0       	ldi	r22, 0x00	; 0
    4d9c:	70 e0       	ldi	r23, 0x00	; 0
    4d9e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <xQueueGenericSendFromISR>
}
    4da2:	26 96       	adiw	r28, 0x06	; 6
    4da4:	0f b6       	in	r0, 0x3f	; 63
    4da6:	f8 94       	cli
    4da8:	de bf       	out	0x3e, r29	; 62
    4daa:	0f be       	out	0x3f, r0	; 63
    4dac:	cd bf       	out	0x3d, r28	; 61
    4dae:	df 91       	pop	r29
    4db0:	cf 91       	pop	r28
    4db2:	ff 91       	pop	r31
    4db4:	ef 91       	pop	r30
    4db6:	bf 91       	pop	r27
    4db8:	af 91       	pop	r26
    4dba:	9f 91       	pop	r25
    4dbc:	8f 91       	pop	r24
    4dbe:	7f 91       	pop	r23
    4dc0:	6f 91       	pop	r22
    4dc2:	5f 91       	pop	r21
    4dc4:	4f 91       	pop	r20
    4dc6:	3f 91       	pop	r19
    4dc8:	2f 91       	pop	r18
    4dca:	0f 90       	pop	r0
    4dcc:	00 92 5b 00 	sts	0x005B, r0
    4dd0:	0f 90       	pop	r0
    4dd2:	00 92 5f 00 	sts	0x005F, r0
    4dd6:	0f 90       	pop	r0
    4dd8:	1f 90       	pop	r1
    4dda:	18 95       	reti

00004ddc <vTaskADC>:

void vTaskADC(void *parameters){
    4ddc:	cf 93       	push	r28
    4dde:	df 93       	push	r29
    4de0:	00 d0       	rcall	.+0      	; 0x4de2 <vTaskADC+0x6>
    4de2:	1f 92       	push	r1
    4de4:	cd b7       	in	r28, 0x3d	; 61
    4de6:	de b7       	in	r29, 0x3e	; 62
    4de8:	9c 83       	std	Y+4, r25	; 0x04
    4dea:	8b 83       	std	Y+3, r24	; 0x03
	
	int i;

	for(i = 0;i < 16; i++){
    4dec:	1a 82       	std	Y+2, r1	; 0x02
    4dee:	19 82       	std	Y+1, r1	; 0x01
    4df0:	14 c0       	rjmp	.+40     	; 0x4e1a <vTaskADC+0x3e>
		devices[i].port = -1;
    4df2:	89 81       	ldd	r24, Y+1	; 0x01
    4df4:	9a 81       	ldd	r25, Y+2	; 0x02
    4df6:	88 0f       	add	r24, r24
    4df8:	99 1f       	adc	r25, r25
    4dfa:	88 0f       	add	r24, r24
    4dfc:	99 1f       	adc	r25, r25
    4dfe:	88 0f       	add	r24, r24
    4e00:	99 1f       	adc	r25, r25
    4e02:	83 52       	subi	r24, 0x23	; 35
    4e04:	95 4e       	sbci	r25, 0xE5	; 229
    4e06:	2f ef       	ldi	r18, 0xFF	; 255
    4e08:	3f ef       	ldi	r19, 0xFF	; 255
    4e0a:	fc 01       	movw	r30, r24
    4e0c:	31 83       	std	Z+1, r19	; 0x01
    4e0e:	20 83       	st	Z, r18

void vTaskADC(void *parameters){
	
	int i;

	for(i = 0;i < 16; i++){
    4e10:	89 81       	ldd	r24, Y+1	; 0x01
    4e12:	9a 81       	ldd	r25, Y+2	; 0x02
    4e14:	01 96       	adiw	r24, 0x01	; 1
    4e16:	9a 83       	std	Y+2, r25	; 0x02
    4e18:	89 83       	std	Y+1, r24	; 0x01
    4e1a:	89 81       	ldd	r24, Y+1	; 0x01
    4e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e1e:	80 31       	cpi	r24, 0x10	; 16
    4e20:	91 05       	cpc	r25, r1
    4e22:	3c f3       	brlt	.-50     	; 0x4df2 <vTaskADC+0x16>
		devices[i].port = -1;
	}

	initADC();
    4e24:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <initADC>

	vSemaphoreCreateBinary(adcSemaphore);
    4e28:	43 e0       	ldi	r20, 0x03	; 3
    4e2a:	60 e0       	ldi	r22, 0x00	; 0
    4e2c:	81 e0       	ldi	r24, 0x01	; 1
    4e2e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <xQueueGenericCreate>
    4e32:	90 93 dc 1a 	sts	0x1ADC, r25
    4e36:	80 93 db 1a 	sts	0x1ADB, r24
    4e3a:	80 91 db 1a 	lds	r24, 0x1ADB
    4e3e:	90 91 dc 1a 	lds	r25, 0x1ADC
    4e42:	00 97       	sbiw	r24, 0x00	; 0
    4e44:	59 f0       	breq	.+22     	; 0x4e5c <vTaskADC+0x80>
    4e46:	80 91 db 1a 	lds	r24, 0x1ADB
    4e4a:	90 91 dc 1a 	lds	r25, 0x1ADC
    4e4e:	20 e0       	ldi	r18, 0x00	; 0
    4e50:	40 e0       	ldi	r20, 0x00	; 0
    4e52:	50 e0       	ldi	r21, 0x00	; 0
    4e54:	60 e0       	ldi	r22, 0x00	; 0
    4e56:	70 e0       	ldi	r23, 0x00	; 0
    4e58:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <xQueueGenericSend>
	
	ADCinitialized = 1;
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	90 93 60 1b 	sts	0x1B60, r25
    4e64:	80 93 5f 1b 	sts	0x1B5F, r24
	while(devices[0].port == -1){
    4e68:	04 c0       	rjmp	.+8      	; 0x4e72 <vTaskADC+0x96>
		vTaskDelay(10);
    4e6a:	8a e0       	ldi	r24, 0x0A	; 10
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
	initADC();

	vSemaphoreCreateBinary(adcSemaphore);
	
	ADCinitialized = 1;
	while(devices[0].port == -1){
    4e72:	80 91 dd 1a 	lds	r24, 0x1ADD
    4e76:	90 91 de 1a 	lds	r25, 0x1ADE
    4e7a:	8f 3f       	cpi	r24, 0xFF	; 255
    4e7c:	ff ef       	ldi	r31, 0xFF	; 255
    4e7e:	9f 07       	cpc	r25, r31
    4e80:	a1 f3       	breq	.-24     	; 0x4e6a <vTaskADC+0x8e>
		vTaskDelay(10);
	}
	
	while(1){
		ADCStart(&devices[currDevice]);
    4e82:	80 91 5d 1b 	lds	r24, 0x1B5D
    4e86:	90 91 5e 1b 	lds	r25, 0x1B5E
    4e8a:	88 0f       	add	r24, r24
    4e8c:	99 1f       	adc	r25, r25
    4e8e:	88 0f       	add	r24, r24
    4e90:	99 1f       	adc	r25, r25
    4e92:	88 0f       	add	r24, r24
    4e94:	99 1f       	adc	r25, r25
    4e96:	83 52       	subi	r24, 0x23	; 35
    4e98:	95 4e       	sbci	r25, 0xE5	; 229
    4e9a:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <ADCStart>
		currDevice++;
    4e9e:	80 91 5d 1b 	lds	r24, 0x1B5D
    4ea2:	90 91 5e 1b 	lds	r25, 0x1B5E
    4ea6:	01 96       	adiw	r24, 0x01	; 1
    4ea8:	90 93 5e 1b 	sts	0x1B5E, r25
    4eac:	80 93 5d 1b 	sts	0x1B5D, r24
		if(currDevice >= 16 || devices[currDevice].port == -1){
    4eb0:	80 91 5d 1b 	lds	r24, 0x1B5D
    4eb4:	90 91 5e 1b 	lds	r25, 0x1B5E
    4eb8:	80 31       	cpi	r24, 0x10	; 16
    4eba:	91 05       	cpc	r25, r1
    4ebc:	9c f4       	brge	.+38     	; 0x4ee4 <vTaskADC+0x108>
    4ebe:	80 91 5d 1b 	lds	r24, 0x1B5D
    4ec2:	90 91 5e 1b 	lds	r25, 0x1B5E
    4ec6:	88 0f       	add	r24, r24
    4ec8:	99 1f       	adc	r25, r25
    4eca:	88 0f       	add	r24, r24
    4ecc:	99 1f       	adc	r25, r25
    4ece:	88 0f       	add	r24, r24
    4ed0:	99 1f       	adc	r25, r25
    4ed2:	83 52       	subi	r24, 0x23	; 35
    4ed4:	95 4e       	sbci	r25, 0xE5	; 229
    4ed6:	fc 01       	movw	r30, r24
    4ed8:	80 81       	ld	r24, Z
    4eda:	91 81       	ldd	r25, Z+1	; 0x01
    4edc:	8f 3f       	cpi	r24, 0xFF	; 255
    4ede:	ff ef       	ldi	r31, 0xFF	; 255
    4ee0:	9f 07       	cpc	r25, r31
    4ee2:	21 f4       	brne	.+8      	; 0x4eec <vTaskADC+0x110>
			currDevice = 0;
    4ee4:	10 92 5e 1b 	sts	0x1B5E, r1
    4ee8:	10 92 5d 1b 	sts	0x1B5D, r1
		}
		xSemaphoreTake(adcSemaphore,portMAX_DELAY);
    4eec:	80 91 db 1a 	lds	r24, 0x1ADB
    4ef0:	90 91 dc 1a 	lds	r25, 0x1ADC
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	4f ef       	ldi	r20, 0xFF	; 255
    4ef8:	5f ef       	ldi	r21, 0xFF	; 255
    4efa:	60 e0       	ldi	r22, 0x00	; 0
    4efc:	70 e0       	ldi	r23, 0x00	; 0
    4efe:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xQueueGenericReceive>
	}
    4f02:	bf cf       	rjmp	.-130    	; 0x4e82 <vTaskADC+0xa6>

00004f04 <addADCDevice>:
}

void addADCDevice(int port,int options,ADCHandler handler,void* parameters){
    4f04:	cf 93       	push	r28
    4f06:	df 93       	push	r29
    4f08:	cd b7       	in	r28, 0x3d	; 61
    4f0a:	de b7       	in	r29, 0x3e	; 62
    4f0c:	2a 97       	sbiw	r28, 0x0a	; 10
    4f0e:	0f b6       	in	r0, 0x3f	; 63
    4f10:	f8 94       	cli
    4f12:	de bf       	out	0x3e, r29	; 62
    4f14:	0f be       	out	0x3f, r0	; 63
    4f16:	cd bf       	out	0x3d, r28	; 61
    4f18:	9c 83       	std	Y+4, r25	; 0x04
    4f1a:	8b 83       	std	Y+3, r24	; 0x03
    4f1c:	7e 83       	std	Y+6, r23	; 0x06
    4f1e:	6d 83       	std	Y+5, r22	; 0x05
    4f20:	58 87       	std	Y+8, r21	; 0x08
    4f22:	4f 83       	std	Y+7, r20	; 0x07
    4f24:	3a 87       	std	Y+10, r19	; 0x0a
    4f26:	29 87       	std	Y+9, r18	; 0x09
	int i;
	
	//Creating a device before all the structures are initialized
	//could lead to race conditions.
	while(ADCinitialized == 0) vTaskDelay(3);
    4f28:	04 c0       	rjmp	.+8      	; 0x4f32 <addADCDevice+0x2e>
    4f2a:	83 e0       	ldi	r24, 0x03	; 3
    4f2c:	90 e0       	ldi	r25, 0x00	; 0
    4f2e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vTaskDelay>
    4f32:	80 91 5f 1b 	lds	r24, 0x1B5F
    4f36:	90 91 60 1b 	lds	r25, 0x1B60
    4f3a:	00 97       	sbiw	r24, 0x00	; 0
    4f3c:	b1 f3       	breq	.-20     	; 0x4f2a <addADCDevice+0x26>

	for(i = 0; i < 16 && devices[i].port != -1; i++)
    4f3e:	1a 82       	std	Y+2, r1	; 0x02
    4f40:	19 82       	std	Y+1, r1	; 0x01
    4f42:	05 c0       	rjmp	.+10     	; 0x4f4e <addADCDevice+0x4a>
    4f44:	89 81       	ldd	r24, Y+1	; 0x01
    4f46:	9a 81       	ldd	r25, Y+2	; 0x02
    4f48:	01 96       	adiw	r24, 0x01	; 1
    4f4a:	9a 83       	std	Y+2, r25	; 0x02
    4f4c:	89 83       	std	Y+1, r24	; 0x01
    4f4e:	89 81       	ldd	r24, Y+1	; 0x01
    4f50:	9a 81       	ldd	r25, Y+2	; 0x02
    4f52:	80 31       	cpi	r24, 0x10	; 16
    4f54:	91 05       	cpc	r25, r1
    4f56:	8c f4       	brge	.+34     	; 0x4f7a <addADCDevice+0x76>
    4f58:	89 81       	ldd	r24, Y+1	; 0x01
    4f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f5c:	88 0f       	add	r24, r24
    4f5e:	99 1f       	adc	r25, r25
    4f60:	88 0f       	add	r24, r24
    4f62:	99 1f       	adc	r25, r25
    4f64:	88 0f       	add	r24, r24
    4f66:	99 1f       	adc	r25, r25
    4f68:	83 52       	subi	r24, 0x23	; 35
    4f6a:	95 4e       	sbci	r25, 0xE5	; 229
    4f6c:	fc 01       	movw	r30, r24
    4f6e:	80 81       	ld	r24, Z
    4f70:	91 81       	ldd	r25, Z+1	; 0x01
    4f72:	8f 3f       	cpi	r24, 0xFF	; 255
    4f74:	ff ef       	ldi	r31, 0xFF	; 255
    4f76:	9f 07       	cpc	r25, r31
    4f78:	29 f7       	brne	.-54     	; 0x4f44 <addADCDevice+0x40>
	;
	
	if(port < 8){
    4f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7e:	88 30       	cpi	r24, 0x08	; 8
    4f80:	91 05       	cpc	r25, r1
    4f82:	a4 f4       	brge	.+40     	; 0x4fac <addADCDevice+0xa8>
		DIDR0 &= ~(1 << port);
    4f84:	8e e7       	ldi	r24, 0x7E	; 126
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	2e e7       	ldi	r18, 0x7E	; 126
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	f9 01       	movw	r30, r18
    4f8e:	20 81       	ld	r18, Z
    4f90:	42 2f       	mov	r20, r18
    4f92:	21 e0       	ldi	r18, 0x01	; 1
    4f94:	30 e0       	ldi	r19, 0x00	; 0
    4f96:	0b 80       	ldd	r0, Y+3	; 0x03
    4f98:	02 c0       	rjmp	.+4      	; 0x4f9e <addADCDevice+0x9a>
    4f9a:	22 0f       	add	r18, r18
    4f9c:	33 1f       	adc	r19, r19
    4f9e:	0a 94       	dec	r0
    4fa0:	e2 f7       	brpl	.-8      	; 0x4f9a <addADCDevice+0x96>
    4fa2:	20 95       	com	r18
    4fa4:	24 23       	and	r18, r20
    4fa6:	fc 01       	movw	r30, r24
    4fa8:	20 83       	st	Z, r18
    4faa:	18 c0       	rjmp	.+48     	; 0x4fdc <addADCDevice+0xd8>
	} else {
		DIDR2 &= ~(1 << (port - 8));
    4fac:	8d e7       	ldi	r24, 0x7D	; 125
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	2d e7       	ldi	r18, 0x7D	; 125
    4fb2:	30 e0       	ldi	r19, 0x00	; 0
    4fb4:	f9 01       	movw	r30, r18
    4fb6:	20 81       	ld	r18, Z
    4fb8:	62 2f       	mov	r22, r18
    4fba:	2b 81       	ldd	r18, Y+3	; 0x03
    4fbc:	3c 81       	ldd	r19, Y+4	; 0x04
    4fbe:	a9 01       	movw	r20, r18
    4fc0:	48 50       	subi	r20, 0x08	; 8
    4fc2:	51 09       	sbc	r21, r1
    4fc4:	21 e0       	ldi	r18, 0x01	; 1
    4fc6:	30 e0       	ldi	r19, 0x00	; 0
    4fc8:	04 2e       	mov	r0, r20
    4fca:	02 c0       	rjmp	.+4      	; 0x4fd0 <addADCDevice+0xcc>
    4fcc:	22 0f       	add	r18, r18
    4fce:	33 1f       	adc	r19, r19
    4fd0:	0a 94       	dec	r0
    4fd2:	e2 f7       	brpl	.-8      	; 0x4fcc <addADCDevice+0xc8>
    4fd4:	20 95       	com	r18
    4fd6:	26 23       	and	r18, r22
    4fd8:	fc 01       	movw	r30, r24
    4fda:	20 83       	st	Z, r18
	}

	if(devices[i].port == -1){
    4fdc:	89 81       	ldd	r24, Y+1	; 0x01
    4fde:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe0:	88 0f       	add	r24, r24
    4fe2:	99 1f       	adc	r25, r25
    4fe4:	88 0f       	add	r24, r24
    4fe6:	99 1f       	adc	r25, r25
    4fe8:	88 0f       	add	r24, r24
    4fea:	99 1f       	adc	r25, r25
    4fec:	83 52       	subi	r24, 0x23	; 35
    4fee:	95 4e       	sbci	r25, 0xE5	; 229
    4ff0:	fc 01       	movw	r30, r24
    4ff2:	80 81       	ld	r24, Z
    4ff4:	91 81       	ldd	r25, Z+1	; 0x01
    4ff6:	8f 3f       	cpi	r24, 0xFF	; 255
    4ff8:	ff ef       	ldi	r31, 0xFF	; 255
    4ffa:	9f 07       	cpc	r25, r31
    4ffc:	e1 f5       	brne	.+120    	; 0x5076 <addADCDevice+0x172>
		devices[i].port = port;
    4ffe:	89 81       	ldd	r24, Y+1	; 0x01
    5000:	9a 81       	ldd	r25, Y+2	; 0x02
    5002:	88 0f       	add	r24, r24
    5004:	99 1f       	adc	r25, r25
    5006:	88 0f       	add	r24, r24
    5008:	99 1f       	adc	r25, r25
    500a:	88 0f       	add	r24, r24
    500c:	99 1f       	adc	r25, r25
    500e:	83 52       	subi	r24, 0x23	; 35
    5010:	95 4e       	sbci	r25, 0xE5	; 229
    5012:	2b 81       	ldd	r18, Y+3	; 0x03
    5014:	3c 81       	ldd	r19, Y+4	; 0x04
    5016:	fc 01       	movw	r30, r24
    5018:	31 83       	std	Z+1, r19	; 0x01
    501a:	20 83       	st	Z, r18
		devices[i].options = options;
    501c:	89 81       	ldd	r24, Y+1	; 0x01
    501e:	9a 81       	ldd	r25, Y+2	; 0x02
    5020:	88 0f       	add	r24, r24
    5022:	99 1f       	adc	r25, r25
    5024:	88 0f       	add	r24, r24
    5026:	99 1f       	adc	r25, r25
    5028:	88 0f       	add	r24, r24
    502a:	99 1f       	adc	r25, r25
    502c:	81 52       	subi	r24, 0x21	; 33
    502e:	95 4e       	sbci	r25, 0xE5	; 229
    5030:	2d 81       	ldd	r18, Y+5	; 0x05
    5032:	3e 81       	ldd	r19, Y+6	; 0x06
    5034:	fc 01       	movw	r30, r24
    5036:	31 83       	std	Z+1, r19	; 0x01
    5038:	20 83       	st	Z, r18
		devices[i].handler = handler;
    503a:	89 81       	ldd	r24, Y+1	; 0x01
    503c:	9a 81       	ldd	r25, Y+2	; 0x02
    503e:	88 0f       	add	r24, r24
    5040:	99 1f       	adc	r25, r25
    5042:	88 0f       	add	r24, r24
    5044:	99 1f       	adc	r25, r25
    5046:	88 0f       	add	r24, r24
    5048:	99 1f       	adc	r25, r25
    504a:	8d 51       	subi	r24, 0x1D	; 29
    504c:	95 4e       	sbci	r25, 0xE5	; 229
    504e:	2f 81       	ldd	r18, Y+7	; 0x07
    5050:	38 85       	ldd	r19, Y+8	; 0x08
    5052:	fc 01       	movw	r30, r24
    5054:	31 83       	std	Z+1, r19	; 0x01
    5056:	20 83       	st	Z, r18
		devices[i].parameters = parameters;
    5058:	89 81       	ldd	r24, Y+1	; 0x01
    505a:	9a 81       	ldd	r25, Y+2	; 0x02
    505c:	88 0f       	add	r24, r24
    505e:	99 1f       	adc	r25, r25
    5060:	88 0f       	add	r24, r24
    5062:	99 1f       	adc	r25, r25
    5064:	88 0f       	add	r24, r24
    5066:	99 1f       	adc	r25, r25
    5068:	8f 51       	subi	r24, 0x1F	; 31
    506a:	95 4e       	sbci	r25, 0xE5	; 229
    506c:	29 85       	ldd	r18, Y+9	; 0x09
    506e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5070:	fc 01       	movw	r30, r24
    5072:	31 83       	std	Z+1, r19	; 0x01
    5074:	20 83       	st	Z, r18
	}
}
    5076:	2a 96       	adiw	r28, 0x0a	; 10
    5078:	0f b6       	in	r0, 0x3f	; 63
    507a:	f8 94       	cli
    507c:	de bf       	out	0x3e, r29	; 62
    507e:	0f be       	out	0x3f, r0	; 63
    5080:	cd bf       	out	0x3d, r28	; 61
    5082:	df 91       	pop	r29
    5084:	cf 91       	pop	r28
    5086:	08 95       	ret

00005088 <__tablejump2__>:
    5088:	ee 0f       	add	r30, r30
    508a:	ff 1f       	adc	r31, r31

0000508c <__tablejump__>:
    508c:	05 90       	lpm	r0, Z+
    508e:	f4 91       	lpm	r31, Z
    5090:	e0 2d       	mov	r30, r0
    5092:	19 94       	eijmp

00005094 <memcpy>:
    5094:	fb 01       	movw	r30, r22
    5096:	dc 01       	movw	r26, r24
    5098:	02 c0       	rjmp	.+4      	; 0x509e <memcpy+0xa>
    509a:	01 90       	ld	r0, Z+
    509c:	0d 92       	st	X+, r0
    509e:	41 50       	subi	r20, 0x01	; 1
    50a0:	50 40       	sbci	r21, 0x00	; 0
    50a2:	d8 f7       	brcc	.-10     	; 0x509a <memcpy+0x6>
    50a4:	08 95       	ret

000050a6 <memset>:
    50a6:	dc 01       	movw	r26, r24
    50a8:	01 c0       	rjmp	.+2      	; 0x50ac <memset+0x6>
    50aa:	6d 93       	st	X+, r22
    50ac:	41 50       	subi	r20, 0x01	; 1
    50ae:	50 40       	sbci	r21, 0x00	; 0
    50b0:	e0 f7       	brcc	.-8      	; 0x50aa <memset+0x4>
    50b2:	08 95       	ret

000050b4 <strncpy>:
    50b4:	fb 01       	movw	r30, r22
    50b6:	dc 01       	movw	r26, r24
    50b8:	41 50       	subi	r20, 0x01	; 1
    50ba:	50 40       	sbci	r21, 0x00	; 0
    50bc:	48 f0       	brcs	.+18     	; 0x50d0 <strncpy+0x1c>
    50be:	01 90       	ld	r0, Z+
    50c0:	0d 92       	st	X+, r0
    50c2:	00 20       	and	r0, r0
    50c4:	c9 f7       	brne	.-14     	; 0x50b8 <strncpy+0x4>
    50c6:	01 c0       	rjmp	.+2      	; 0x50ca <strncpy+0x16>
    50c8:	1d 92       	st	X+, r1
    50ca:	41 50       	subi	r20, 0x01	; 1
    50cc:	50 40       	sbci	r21, 0x00	; 0
    50ce:	e0 f7       	brcc	.-8      	; 0x50c8 <strncpy+0x14>
    50d0:	08 95       	ret

000050d2 <itoa>:
    50d2:	fb 01       	movw	r30, r22
    50d4:	9f 01       	movw	r18, r30
    50d6:	e8 94       	clt
    50d8:	42 30       	cpi	r20, 0x02	; 2
    50da:	c4 f0       	brlt	.+48     	; 0x510c <itoa+0x3a>
    50dc:	45 32       	cpi	r20, 0x25	; 37
    50de:	b4 f4       	brge	.+44     	; 0x510c <itoa+0x3a>
    50e0:	4a 30       	cpi	r20, 0x0A	; 10
    50e2:	29 f4       	brne	.+10     	; 0x50ee <itoa+0x1c>
    50e4:	97 fb       	bst	r25, 7
    50e6:	1e f4       	brtc	.+6      	; 0x50ee <itoa+0x1c>
    50e8:	90 95       	com	r25
    50ea:	81 95       	neg	r24
    50ec:	9f 4f       	sbci	r25, 0xFF	; 255
    50ee:	64 2f       	mov	r22, r20
    50f0:	77 27       	eor	r23, r23
    50f2:	0e 94 9a 28 	call	0x5134	; 0x5134 <__udivmodhi4>
    50f6:	80 5d       	subi	r24, 0xD0	; 208
    50f8:	8a 33       	cpi	r24, 0x3A	; 58
    50fa:	0c f0       	brlt	.+2      	; 0x50fe <itoa+0x2c>
    50fc:	89 5d       	subi	r24, 0xD9	; 217
    50fe:	81 93       	st	Z+, r24
    5100:	cb 01       	movw	r24, r22
    5102:	00 97       	sbiw	r24, 0x00	; 0
    5104:	a1 f7       	brne	.-24     	; 0x50ee <itoa+0x1c>
    5106:	16 f4       	brtc	.+4      	; 0x510c <itoa+0x3a>
    5108:	5d e2       	ldi	r21, 0x2D	; 45
    510a:	51 93       	st	Z+, r21
    510c:	10 82       	st	Z, r1
    510e:	c9 01       	movw	r24, r18
    5110:	0c 94 8a 28 	jmp	0x5114	; 0x5114 <strrev>

00005114 <strrev>:
    5114:	dc 01       	movw	r26, r24
    5116:	fc 01       	movw	r30, r24
    5118:	67 2f       	mov	r22, r23
    511a:	71 91       	ld	r23, Z+
    511c:	77 23       	and	r23, r23
    511e:	e1 f7       	brne	.-8      	; 0x5118 <strrev+0x4>
    5120:	32 97       	sbiw	r30, 0x02	; 2
    5122:	04 c0       	rjmp	.+8      	; 0x512c <strrev+0x18>
    5124:	7c 91       	ld	r23, X
    5126:	6d 93       	st	X+, r22
    5128:	70 83       	st	Z, r23
    512a:	62 91       	ld	r22, -Z
    512c:	ae 17       	cp	r26, r30
    512e:	bf 07       	cpc	r27, r31
    5130:	c8 f3       	brcs	.-14     	; 0x5124 <strrev+0x10>
    5132:	08 95       	ret

00005134 <__udivmodhi4>:
    5134:	aa 1b       	sub	r26, r26
    5136:	bb 1b       	sub	r27, r27
    5138:	51 e1       	ldi	r21, 0x11	; 17
    513a:	07 c0       	rjmp	.+14     	; 0x514a <__udivmodhi4_ep>

0000513c <__udivmodhi4_loop>:
    513c:	aa 1f       	adc	r26, r26
    513e:	bb 1f       	adc	r27, r27
    5140:	a6 17       	cp	r26, r22
    5142:	b7 07       	cpc	r27, r23
    5144:	10 f0       	brcs	.+4      	; 0x514a <__udivmodhi4_ep>
    5146:	a6 1b       	sub	r26, r22
    5148:	b7 0b       	sbc	r27, r23

0000514a <__udivmodhi4_ep>:
    514a:	88 1f       	adc	r24, r24
    514c:	99 1f       	adc	r25, r25
    514e:	5a 95       	dec	r21
    5150:	a9 f7       	brne	.-22     	; 0x513c <__udivmodhi4_loop>
    5152:	80 95       	com	r24
    5154:	90 95       	com	r25
    5156:	bc 01       	movw	r22, r24
    5158:	cd 01       	movw	r24, r26
    515a:	08 95       	ret

0000515c <_exit>:
    515c:	f8 94       	cli

0000515e <__stop_program>:
    515e:	ff cf       	rjmp	.-2      	; 0x515e <__stop_program>
