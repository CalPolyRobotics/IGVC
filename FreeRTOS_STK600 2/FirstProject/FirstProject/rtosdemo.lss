
rtosdemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  00003604  00003698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000018b9  0080021a  0080021a  000036b2  2**0
                  ALLOC
  3 .stab         00007cb0  00000000  00000000  000036b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003772  00000000  00000000  0000b364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000ead6  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
       8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
       c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      14:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      2c:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__vector_11>
      30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      44:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      48:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      4c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      64:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      68:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      6c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      70:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      74:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      78:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      7c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      80:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__vector_32>
      84:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      88:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      8c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      90:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      94:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      98:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      9c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      a0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      a4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      a8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      ac:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      b0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      b4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      b8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      bc:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      c0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      c4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      c8:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__vector_50>
      cc:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      d0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      d4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      d8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      dc:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      e0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 ef 01 	jmp	0x3de	; 0x3de <vTaskFunction_1>
      e8:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <prvIdleTask>

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d1 e2       	ldi	r29, 0x21	; 33
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61
      f8:	00 e0       	ldi	r16, 0x00	; 0
      fa:	0c bf       	out	0x3c, r16	; 60

000000fc <__do_copy_data>:
      fc:	12 e0       	ldi	r17, 0x02	; 2
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b2 e0       	ldi	r27, 0x02	; 2
     102:	e4 e0       	ldi	r30, 0x04	; 4
     104:	f6 e3       	ldi	r31, 0x36	; 54
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0b bf       	out	0x3b, r16	; 59
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
     10c:	07 90       	elpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	aa 31       	cpi	r26, 0x1A	; 26
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
     116:	1a e1       	ldi	r17, 0x1A	; 26
     118:	aa e1       	ldi	r26, 0x1A	; 26
     11a:	b2 e0       	ldi	r27, 0x02	; 2
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a3 3d       	cpi	r26, 0xD3	; 211
     122:	b1 07       	cpc	r27, r17
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	0e 94 a9 00 	call	0x152	; 0x152 <main>
     12a:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <_exit>

0000012e <__bad_interrupt>:
     12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <vApplicationTickHook>:
int count = 0;

int sonarTime;

void vApplicationTickHook()
{
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
    count++;
     13a:	80 91 1a 02 	lds	r24, 0x021A
     13e:	90 91 1b 02 	lds	r25, 0x021B
     142:	01 96       	adiw	r24, 0x01	; 1
     144:	90 93 1b 02 	sts	0x021B, r25
     148:	80 93 1a 02 	sts	0x021A, r24
}
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <main>:
/*-----------------------------------------------------------*/

int main( void )
{
     152:	af 92       	push	r10
     154:	bf 92       	push	r11
     156:	cf 92       	push	r12
     158:	df 92       	push	r13
     15a:	ef 92       	push	r14
     15c:	ff 92       	push	r15
     15e:	0f 93       	push	r16
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	00 d0       	rcall	.+0      	; 0x166 <main+0x14>
     166:	00 d0       	rcall	.+0      	; 0x168 <main+0x16>
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
    USART_Init(9600, 16000000);
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	54 e2       	ldi	r21, 0x24	; 36
     170:	64 ef       	ldi	r22, 0xF4	; 244
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	80 e8       	ldi	r24, 0x80	; 128
     176:	95 e2       	ldi	r25, 0x25	; 37
     178:	0e 94 ff 18 	call	0x31fe	; 0x31fe <USART_Init>
    //- wimpy variable defs
	uint8_t val[2] = {0x3F, 0xFE};
     17c:	8f e3       	ldi	r24, 0x3F	; 63
     17e:	8d 83       	std	Y+5, r24	; 0x05
     180:	8e ef       	ldi	r24, 0xFE	; 254
     182:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t *val0, *val1;
    
	//- avoid pesky warnings...
	val0 = val + 0;
     184:	ce 01       	movw	r24, r28
     186:	05 96       	adiw	r24, 0x05	; 5
     188:	9a 83       	std	Y+2, r25	; 0x02
     18a:	89 83       	std	Y+1, r24	; 0x01
	val1 = val + 1;
     18c:	ce 01       	movw	r24, r28
     18e:	05 96       	adiw	r24, 0x05	; 5
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	9c 83       	std	Y+4, r25	; 0x04
     194:	8b 83       	std	Y+3, r24	; 0x03
    
	DDRD = 0xFF;
     196:	8a e2       	ldi	r24, 0x2A	; 42
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	2f ef       	ldi	r18, 0xFF	; 255
     19c:	fc 01       	movw	r30, r24
     19e:	20 83       	st	Z, r18
	DDRE = 0xFF;
     1a0:	8d e2       	ldi	r24, 0x2D	; 45
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	2f ef       	ldi	r18, 0xFF	; 255
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 83       	st	Z, r18
	DDRK = 0;
     1aa:	87 e0       	ldi	r24, 0x07	; 7
     1ac:	91 e0       	ldi	r25, 0x01	; 1
     1ae:	fc 01       	movw	r30, r24
     1b0:	10 82       	st	Z, r1

	PORTD = 0;
     1b2:	8b e2       	ldi	r24, 0x2B	; 43
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	fc 01       	movw	r30, r24
     1b8:	10 82       	st	Z, r1
	PORTE = 0;
     1ba:	8e e2       	ldi	r24, 0x2E	; 46
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	fc 01       	movw	r30, r24
     1c0:	10 82       	st	Z, r1
	PORTK = 2;
     1c2:	88 e0       	ldi	r24, 0x08	; 8
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	22 e0       	ldi	r18, 0x02	; 2
     1c8:	fc 01       	movw	r30, r24
     1ca:	20 83       	st	Z, r18

    //- init IO with goodness
	vIO_init();
     1cc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <vIO_init>
    
	initializeSonarSensors();
     1d0:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <initializeSonarSensors>


	//- Create a 
	xTaskCreate( (pdTASK_CODE) vTaskFunction_1, (signed char *) "T0", configMINIMAL_STACK_SIZE,
     1d4:	8b 81       	ldd	r24, Y+3	; 0x03
     1d6:	9c 81       	ldd	r25, Y+4	; 0x04
     1d8:	a1 2c       	mov	r10, r1
     1da:	b1 2c       	mov	r11, r1
     1dc:	c1 2c       	mov	r12, r1
     1de:	d1 2c       	mov	r13, r1
     1e0:	e1 2c       	mov	r14, r1
     1e2:	f1 2c       	mov	r15, r1
     1e4:	01 e0       	ldi	r16, 0x01	; 1
     1e6:	9c 01       	movw	r18, r24
     1e8:	45 e5       	ldi	r20, 0x55	; 85
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	62 e0       	ldi	r22, 0x02	; 2
     1ee:	72 e0       	ldi	r23, 0x02	; 2
     1f0:	8f ee       	ldi	r24, 0xEF	; 239
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	0e 94 0d 02 	call	0x41a	; 0x41a <xTaskGenericCreate>
   //xTaskCreate( (pdTASK_CODE) vTaskSonar, (signed char *) "T0", configMINIMAL_STACK_SIZE,
   //             (void *) val1, 1, NULL );
    
    
    //- kick off the scheduler
	vTaskStartScheduler();
     1f8:	0e 94 0c 05 	call	0xa18	; 0xa18 <vTaskStartScheduler>
    
	return 0;
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
}
     200:	26 96       	adiw	r28, 0x06	; 6
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	df 90       	pop	r13
     218:	cf 90       	pop	r12
     21a:	bf 90       	pop	r11
     21c:	af 90       	pop	r10
     21e:	08 95       	ret

00000220 <printHex>:
/*-----------------------------------------------------------*/

void printHex(int i){
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
     228:	62 97       	sbiw	r28, 0x12	; 18
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	f8 94       	cli
     22e:	de bf       	out	0x3e, r29	; 62
     230:	0f be       	out	0x3f, r0	; 63
     232:	cd bf       	out	0x3d, r28	; 61
     234:	9a 8b       	std	Y+18, r25	; 0x12
     236:	89 8b       	std	Y+17, r24	; 0x11
	char hex[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
     238:	20 e1       	ldi	r18, 0x10	; 16
     23a:	e5 e0       	ldi	r30, 0x05	; 5
     23c:	f2 e0       	ldi	r31, 0x02	; 2
     23e:	ce 01       	movw	r24, r28
     240:	01 96       	adiw	r24, 0x01	; 1
     242:	dc 01       	movw	r26, r24
     244:	01 90       	ld	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	2a 95       	dec	r18
     24a:	e1 f7       	brne	.-8      	; 0x244 <printHex+0x24>

	USART_Write(hex[(i&0xF000) >> 12]);
     24c:	89 89       	ldd	r24, Y+17	; 0x11
     24e:	9a 89       	ldd	r25, Y+18	; 0x12
     250:	89 2f       	mov	r24, r25
     252:	99 27       	eor	r25, r25
     254:	82 95       	swap	r24
     256:	8f 70       	andi	r24, 0x0F	; 15
     258:	9e 01       	movw	r18, r28
     25a:	2f 5f       	subi	r18, 0xFF	; 255
     25c:	3f 4f       	sbci	r19, 0xFF	; 255
     25e:	82 0f       	add	r24, r18
     260:	93 1f       	adc	r25, r19
     262:	fc 01       	movw	r30, r24
     264:	80 81       	ld	r24, Z
     266:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <USART_Write>
	USART_Write(hex[(i&0xF00) >> 8]);
     26a:	89 89       	ldd	r24, Y+17	; 0x11
     26c:	9a 89       	ldd	r25, Y+18	; 0x12
     26e:	88 27       	eor	r24, r24
     270:	9f 70       	andi	r25, 0x0F	; 15
     272:	89 2f       	mov	r24, r25
     274:	99 0f       	add	r25, r25
     276:	99 0b       	sbc	r25, r25
     278:	9e 01       	movw	r18, r28
     27a:	2f 5f       	subi	r18, 0xFF	; 255
     27c:	3f 4f       	sbci	r19, 0xFF	; 255
     27e:	82 0f       	add	r24, r18
     280:	93 1f       	adc	r25, r19
     282:	fc 01       	movw	r30, r24
     284:	80 81       	ld	r24, Z
     286:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <USART_Write>
	USART_Write(hex[(i&0xF0) >> 4]);
     28a:	89 89       	ldd	r24, Y+17	; 0x11
     28c:	9a 89       	ldd	r25, Y+18	; 0x12
     28e:	80 7f       	andi	r24, 0xF0	; 240
     290:	99 27       	eor	r25, r25
     292:	95 95       	asr	r25
     294:	87 95       	ror	r24
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	95 95       	asr	r25
     2a0:	87 95       	ror	r24
     2a2:	9e 01       	movw	r18, r28
     2a4:	2f 5f       	subi	r18, 0xFF	; 255
     2a6:	3f 4f       	sbci	r19, 0xFF	; 255
     2a8:	82 0f       	add	r24, r18
     2aa:	93 1f       	adc	r25, r19
     2ac:	fc 01       	movw	r30, r24
     2ae:	80 81       	ld	r24, Z
     2b0:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <USART_Write>
	USART_Write(hex[i&0xF]);
     2b4:	89 89       	ldd	r24, Y+17	; 0x11
     2b6:	9a 89       	ldd	r25, Y+18	; 0x12
     2b8:	8f 70       	andi	r24, 0x0F	; 15
     2ba:	99 27       	eor	r25, r25
     2bc:	9e 01       	movw	r18, r28
     2be:	2f 5f       	subi	r18, 0xFF	; 255
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	82 0f       	add	r24, r18
     2c4:	93 1f       	adc	r25, r19
     2c6:	fc 01       	movw	r30, r24
     2c8:	80 81       	ld	r24, Z
     2ca:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <USART_Write>

}
     2ce:	62 96       	adiw	r28, 0x12	; 18
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <printNum>:

void printNum(unsigned char i){
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	2d 97       	sbiw	r28, 0x0d	; 13
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	8d 87       	std	Y+13, r24	; 0x0d
    
    char str[10];
    memset(str,0,10);
     2f6:	ce 01       	movw	r24, r28
     2f8:	03 96       	adiw	r24, 0x03	; 3
     2fa:	4a e0       	ldi	r20, 0x0A	; 10
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	0e 94 a5 1a 	call	0x354a	; 0x354a <memset>
    itoa(i,str,9);
     306:	8d 85       	ldd	r24, Y+13	; 0x0d
     308:	88 2f       	mov	r24, r24
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	9e 01       	movw	r18, r28
     30e:	2d 5f       	subi	r18, 0xFD	; 253
     310:	3f 4f       	sbci	r19, 0xFF	; 255
     312:	49 e0       	ldi	r20, 0x09	; 9
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	b9 01       	movw	r22, r18
     318:	0e 94 bb 1a 	call	0x3576	; 0x3576 <itoa>
    char * irr = str;
     31c:	ce 01       	movw	r24, r28
     31e:	03 96       	adiw	r24, 0x03	; 3
     320:	9a 83       	std	Y+2, r25	; 0x02
     322:	89 83       	std	Y+1, r24	; 0x01
    while(*irr){
     324:	0b c0       	rjmp	.+22     	; 0x33c <printNum+0x5c>
        USART_Write((unsigned char )*irr);
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	9a 81       	ldd	r25, Y+2	; 0x02
     32a:	fc 01       	movw	r30, r24
     32c:	80 81       	ld	r24, Z
     32e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <USART_Write>
        irr++;
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	9a 81       	ldd	r25, Y+2	; 0x02
     336:	01 96       	adiw	r24, 0x01	; 1
     338:	9a 83       	std	Y+2, r25	; 0x02
     33a:	89 83       	std	Y+1, r24	; 0x01
    
    char str[10];
    memset(str,0,10);
    itoa(i,str,9);
    char * irr = str;
    while(*irr){
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	9a 81       	ldd	r25, Y+2	; 0x02
     340:	fc 01       	movw	r30, r24
     342:	80 81       	ld	r24, Z
     344:	88 23       	and	r24, r24
     346:	79 f7       	brne	.-34     	; 0x326 <printNum+0x46>
        USART_Write((unsigned char )*irr);
        irr++;
    }
    
}
     348:	2d 96       	adiw	r28, 0x0d	; 13
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	de bf       	out	0x3e, r29	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	cd bf       	out	0x3d, r28	; 61
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <__vector_50>:

ISR(TIMER5_OVF_vect){
     35a:	1f 92       	push	r1
     35c:	0f 92       	push	r0
     35e:	00 90 5f 00 	lds	r0, 0x005F
     362:	0f 92       	push	r0
     364:	11 24       	eor	r1, r1
     366:	00 90 5b 00 	lds	r0, 0x005B
     36a:	0f 92       	push	r0
     36c:	2f 93       	push	r18
     36e:	3f 93       	push	r19
     370:	8f 93       	push	r24
     372:	9f 93       	push	r25
     374:	ef 93       	push	r30
     376:	ff 93       	push	r31
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62

	PORTB ^= 0xFF;
     380:	85 e2       	ldi	r24, 0x25	; 37
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	25 e2       	ldi	r18, 0x25	; 37
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	f9 01       	movw	r30, r18
     38a:	20 81       	ld	r18, Z
     38c:	20 95       	com	r18
     38e:	fc 01       	movw	r30, r24
     390:	20 83       	st	Z, r18
	TCNT3L = 0;
     392:	84 e9       	ldi	r24, 0x94	; 148
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	fc 01       	movw	r30, r24
     398:	10 82       	st	Z, r1
	TCNT3H = 0;
     39a:	85 e9       	ldi	r24, 0x95	; 149
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	fc 01       	movw	r30, r24
     3a0:	10 82       	st	Z, r1

}
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	ff 91       	pop	r31
     3a8:	ef 91       	pop	r30
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	3f 91       	pop	r19
     3b0:	2f 91       	pop	r18
     3b2:	0f 90       	pop	r0
     3b4:	00 92 5b 00 	sts	0x005B, r0
     3b8:	0f 90       	pop	r0
     3ba:	00 92 5f 00 	sts	0x005F, r0
     3be:	0f 90       	pop	r0
     3c0:	1f 90       	pop	r1
     3c2:	18 95       	reti

000003c4 <getTimerCount2>:

unsigned int getTimerCount2(){
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62

	//volatile char timerLow = TCNT3L;

	return TCNT0;
     3cc:	86 e4       	ldi	r24, 0x46	; 70
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	fc 01       	movw	r30, r24
     3d2:	80 81       	ld	r24, Z
     3d4:	88 2f       	mov	r24, r24
     3d6:	90 e0       	ldi	r25, 0x00	; 0

}
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <vTaskFunction_1>:

void vTaskFunction_1(void *pvParameters)
{	
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	1f 92       	push	r1
     3e4:	1f 92       	push	r1
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	89 83       	std	Y+1, r24	; 0x01

    for (;;)  {
//        PORTB ^=  0xff;j
		//PCMSK2 = 1;

		vTaskDelay(1);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vTaskDelay>
		printNum(getSonarData(1));
		USART_Write('\n');
      vTaskDelay(25);
        /* Get and return received data from buffer */
        // UDR0;
    }
     3f6:	fb cf       	rjmp	.-10     	; 0x3ee <vTaskFunction_1+0x10>

000003f8 <vIO_init>:
}

void vIO_init(void)
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
    //- set PortB as output
	DDRB = 0xFF; 
     400:	84 e2       	ldi	r24, 0x24	; 36
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	2f ef       	ldi	r18, 0xFF	; 255
     406:	fc 01       	movw	r30, r24
     408:	20 83       	st	Z, r18
    PORTB = 0xFF; 
     40a:	85 e2       	ldi	r24, 0x25	; 37
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	2f ef       	ldi	r18, 0xFF	; 255
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18
}
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
     41a:	af 92       	push	r10
     41c:	bf 92       	push	r11
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	64 97       	sbiw	r28, 0x14	; 20
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
     43e:	9f 83       	std	Y+7, r25	; 0x07
     440:	8e 83       	std	Y+6, r24	; 0x06
     442:	79 87       	std	Y+9, r23	; 0x09
     444:	68 87       	std	Y+8, r22	; 0x08
     446:	5b 87       	std	Y+11, r21	; 0x0b
     448:	4a 87       	std	Y+10, r20	; 0x0a
     44a:	3d 87       	std	Y+13, r19	; 0x0d
     44c:	2c 87       	std	Y+12, r18	; 0x0c
     44e:	0e 87       	std	Y+14, r16	; 0x0e
     450:	f8 8a       	std	Y+16, r15	; 0x10
     452:	ef 86       	std	Y+15, r14	; 0x0f
     454:	da 8a       	std	Y+18, r13	; 0x12
     456:	c9 8a       	std	Y+17, r12	; 0x11
     458:	bc 8a       	std	Y+20, r11	; 0x14
     45a:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
     45c:	29 89       	ldd	r18, Y+17	; 0x11
     45e:	3a 89       	ldd	r19, Y+18	; 0x12
     460:	8a 85       	ldd	r24, Y+10	; 0x0a
     462:	9b 85       	ldd	r25, Y+11	; 0x0b
     464:	b9 01       	movw	r22, r18
     466:	0e 94 ac 09 	call	0x1358	; 0x1358 <prvAllocateTCBAndStack>
     46a:	9b 83       	std	Y+3, r25	; 0x03
     46c:	8a 83       	std	Y+2, r24	; 0x02

	if( pxNewTCB != NULL )
     46e:	8a 81       	ldd	r24, Y+2	; 0x02
     470:	9b 81       	ldd	r25, Y+3	; 0x03
     472:	00 97       	sbiw	r24, 0x00	; 0
     474:	09 f4       	brne	.+2      	; 0x478 <xTaskGenericCreate+0x5e>
     476:	9f c0       	rjmp	.+318    	; 0x5b6 <xTaskGenericCreate+0x19c>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
     478:	8a 81       	ldd	r24, Y+2	; 0x02
     47a:	9b 81       	ldd	r25, Y+3	; 0x03
     47c:	fc 01       	movw	r30, r24
     47e:	27 89       	ldd	r18, Z+23	; 0x17
     480:	30 8d       	ldd	r19, Z+24	; 0x18
     482:	8a 85       	ldd	r24, Y+10	; 0x0a
     484:	9b 85       	ldd	r25, Y+11	; 0x0b
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	82 0f       	add	r24, r18
     48a:	93 1f       	adc	r25, r19
     48c:	9d 83       	std	Y+5, r25	; 0x05
     48e:	8c 83       	std	Y+4, r24	; 0x04
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
     490:	4a 85       	ldd	r20, Y+10	; 0x0a
     492:	5b 85       	ldd	r21, Y+11	; 0x0b
     494:	2b 89       	ldd	r18, Y+19	; 0x13
     496:	3c 89       	ldd	r19, Y+20	; 0x14
     498:	68 85       	ldd	r22, Y+8	; 0x08
     49a:	79 85       	ldd	r23, Y+9	; 0x09
     49c:	8a 81       	ldd	r24, Y+2	; 0x02
     49e:	9b 81       	ldd	r25, Y+3	; 0x03
     4a0:	8a 01       	movw	r16, r20
     4a2:	4e 85       	ldd	r20, Y+14	; 0x0e
     4a4:	0e 94 bc 08 	call	0x1178	; 0x1178 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     4a8:	4c 85       	ldd	r20, Y+12	; 0x0c
     4aa:	5d 85       	ldd	r21, Y+13	; 0x0d
     4ac:	2e 81       	ldd	r18, Y+6	; 0x06
     4ae:	3f 81       	ldd	r19, Y+7	; 0x07
     4b0:	8c 81       	ldd	r24, Y+4	; 0x04
     4b2:	9d 81       	ldd	r25, Y+5	; 0x05
     4b4:	b9 01       	movw	r22, r18
     4b6:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <pxPortInitialiseStack>
     4ba:	9c 01       	movw	r18, r24
     4bc:	8a 81       	ldd	r24, Y+2	; 0x02
     4be:	9b 81       	ldd	r25, Y+3	; 0x03
     4c0:	fc 01       	movw	r30, r24
     4c2:	31 83       	std	Z+1, r19	; 0x01
     4c4:	20 83       	st	Z, r18
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
     4c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     4c8:	98 89       	ldd	r25, Y+16	; 0x10
     4ca:	00 97       	sbiw	r24, 0x00	; 0
     4cc:	39 f0       	breq	.+14     	; 0x4dc <xTaskGenericCreate+0xc2>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
     4ce:	8f 85       	ldd	r24, Y+15	; 0x0f
     4d0:	98 89       	ldd	r25, Y+16	; 0x10
     4d2:	2a 81       	ldd	r18, Y+2	; 0x02
     4d4:	3b 81       	ldd	r19, Y+3	; 0x03
     4d6:	fc 01       	movw	r30, r24
     4d8:	31 83       	std	Z+1, r19	; 0x01
     4da:	20 83       	st	Z, r18
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
     4e2:	80 91 6a 02 	lds	r24, 0x026A
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	80 93 6a 02 	sts	0x026A, r24
			if( pxCurrentTCB == NULL )
     4ec:	80 91 1c 02 	lds	r24, 0x021C
     4f0:	90 91 1d 02 	lds	r25, 0x021D
     4f4:	00 97       	sbiw	r24, 0x00	; 0
     4f6:	69 f4       	brne	.+26     	; 0x512 <xTaskGenericCreate+0xf8>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
     4f8:	8a 81       	ldd	r24, Y+2	; 0x02
     4fa:	9b 81       	ldd	r25, Y+3	; 0x03
     4fc:	90 93 1d 02 	sts	0x021D, r25
     500:	80 93 1c 02 	sts	0x021C, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
     504:	80 91 6a 02 	lds	r24, 0x026A
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	b1 f4       	brne	.+44     	; 0x538 <xTaskGenericCreate+0x11e>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
     50c:	0e 94 1d 09 	call	0x123a	; 0x123a <prvInitialiseTaskLists>
     510:	13 c0       	rjmp	.+38     	; 0x538 <xTaskGenericCreate+0x11e>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
     512:	80 91 6f 02 	lds	r24, 0x026F
     516:	88 23       	and	r24, r24
     518:	79 f4       	brne	.+30     	; 0x538 <xTaskGenericCreate+0x11e>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
     51a:	80 91 1c 02 	lds	r24, 0x021C
     51e:	90 91 1d 02 	lds	r25, 0x021D
     522:	fc 01       	movw	r30, r24
     524:	96 89       	ldd	r25, Z+22	; 0x16
     526:	8e 85       	ldd	r24, Y+14	; 0x0e
     528:	89 17       	cp	r24, r25
     52a:	30 f0       	brcs	.+12     	; 0x538 <xTaskGenericCreate+0x11e>
					{
						pxCurrentTCB = pxNewTCB;
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	9b 81       	ldd	r25, Y+3	; 0x03
     530:	90 93 1d 02 	sts	0x021D, r25
     534:	80 93 1c 02 	sts	0x021C, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
     538:	8a 81       	ldd	r24, Y+2	; 0x02
     53a:	9b 81       	ldd	r25, Y+3	; 0x03
     53c:	fc 01       	movw	r30, r24
     53e:	96 89       	ldd	r25, Z+22	; 0x16
     540:	80 91 6d 02 	lds	r24, 0x026D
     544:	89 17       	cp	r24, r25
     546:	30 f4       	brcc	.+12     	; 0x554 <xTaskGenericCreate+0x13a>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
     548:	8a 81       	ldd	r24, Y+2	; 0x02
     54a:	9b 81       	ldd	r25, Y+3	; 0x03
     54c:	fc 01       	movw	r30, r24
     54e:	86 89       	ldd	r24, Z+22	; 0x16
     550:	80 93 6d 02 	sts	0x026D, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
     554:	80 91 74 02 	lds	r24, 0x0274
     558:	8f 5f       	subi	r24, 0xFF	; 255
     55a:	80 93 74 02 	sts	0x0274, r24

			prvAddTaskToReadyQueue( pxNewTCB );
     55e:	8a 81       	ldd	r24, Y+2	; 0x02
     560:	9b 81       	ldd	r25, Y+3	; 0x03
     562:	fc 01       	movw	r30, r24
     564:	96 89       	ldd	r25, Z+22	; 0x16
     566:	80 91 6e 02 	lds	r24, 0x026E
     56a:	89 17       	cp	r24, r25
     56c:	30 f4       	brcc	.+12     	; 0x57a <xTaskGenericCreate+0x160>
     56e:	8a 81       	ldd	r24, Y+2	; 0x02
     570:	9b 81       	ldd	r25, Y+3	; 0x03
     572:	fc 01       	movw	r30, r24
     574:	86 89       	ldd	r24, Z+22	; 0x16
     576:	80 93 6e 02 	sts	0x026E, r24
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	9b 81       	ldd	r25, Y+3	; 0x03
     57e:	ac 01       	movw	r20, r24
     580:	4e 5f       	subi	r20, 0xFE	; 254
     582:	5f 4f       	sbci	r21, 0xFF	; 255
     584:	8a 81       	ldd	r24, Y+2	; 0x02
     586:	9b 81       	ldd	r25, Y+3	; 0x03
     588:	fc 01       	movw	r30, r24
     58a:	86 89       	ldd	r24, Z+22	; 0x16
     58c:	28 2f       	mov	r18, r24
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	c9 01       	movw	r24, r18
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	82 0f       	add	r24, r18
     5a0:	93 1f       	adc	r25, r19
     5a2:	82 5e       	subi	r24, 0xE2	; 226
     5a4:	9d 4f       	sbci	r25, 0xFD	; 253
     5a6:	ba 01       	movw	r22, r20
     5a8:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>

			xReturn = pdPASS;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	89 83       	std	Y+1, r24	; 0x01
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
     5b0:	0f 90       	pop	r0
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <xTaskGenericCreate+0x1a0>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	89 83       	std	Y+1, r24	; 0x01
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	79 f4       	brne	.+30     	; 0x5de <xTaskGenericCreate+0x1c4>
	{
		if( xSchedulerRunning != pdFALSE )
     5c0:	80 91 6f 02 	lds	r24, 0x026F
     5c4:	88 23       	and	r24, r24
     5c6:	59 f0       	breq	.+22     	; 0x5de <xTaskGenericCreate+0x1c4>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
     5c8:	80 91 1c 02 	lds	r24, 0x021C
     5cc:	90 91 1d 02 	lds	r25, 0x021D
     5d0:	fc 01       	movw	r30, r24
     5d2:	96 89       	ldd	r25, Z+22	; 0x16
     5d4:	8e 85       	ldd	r24, Y+14	; 0x0e
     5d6:	98 17       	cp	r25, r24
     5d8:	10 f4       	brcc	.+4      	; 0x5de <xTaskGenericCreate+0x1c4>
			{
				portYIELD_WITHIN_API();
     5da:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
			}
		}
	}

	return xReturn;
     5de:	89 81       	ldd	r24, Y+1	; 0x01
}
     5e0:	64 96       	adiw	r28, 0x14	; 20
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	bf 90       	pop	r11
     5fe:	af 90       	pop	r10
     600:	08 95       	ret

00000602 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	28 97       	sbiw	r28, 0x08	; 8
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	9e 83       	std	Y+6, r25	; 0x06
     618:	8d 83       	std	Y+5, r24	; 0x05
     61a:	78 87       	std	Y+8, r23	; 0x08
     61c:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
     61e:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
     620:	0e 94 4e 05 	call	0xa9c	; 0xa9c <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
     624:	8d 81       	ldd	r24, Y+5	; 0x05
     626:	9e 81       	ldd	r25, Y+6	; 0x06
     628:	fc 01       	movw	r30, r24
     62a:	20 81       	ld	r18, Z
     62c:	31 81       	ldd	r19, Z+1	; 0x01
     62e:	8f 81       	ldd	r24, Y+7	; 0x07
     630:	98 85       	ldd	r25, Y+8	; 0x08
     632:	82 0f       	add	r24, r18
     634:	93 1f       	adc	r25, r19
     636:	9b 83       	std	Y+3, r25	; 0x03
     638:	8a 83       	std	Y+2, r24	; 0x02

			if( xTickCount < *pxPreviousWakeTime )
     63a:	8d 81       	ldd	r24, Y+5	; 0x05
     63c:	9e 81       	ldd	r25, Y+6	; 0x06
     63e:	fc 01       	movw	r30, r24
     640:	20 81       	ld	r18, Z
     642:	31 81       	ldd	r19, Z+1	; 0x01
     644:	80 91 6b 02 	lds	r24, 0x026B
     648:	90 91 6c 02 	lds	r25, 0x026C
     64c:	82 17       	cp	r24, r18
     64e:	93 07       	cpc	r25, r19
     650:	b0 f4       	brcc	.+44     	; 0x67e <vTaskDelayUntil+0x7c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
     652:	8d 81       	ldd	r24, Y+5	; 0x05
     654:	9e 81       	ldd	r25, Y+6	; 0x06
     656:	fc 01       	movw	r30, r24
     658:	20 81       	ld	r18, Z
     65a:	31 81       	ldd	r19, Z+1	; 0x01
     65c:	8a 81       	ldd	r24, Y+2	; 0x02
     65e:	9b 81       	ldd	r25, Y+3	; 0x03
     660:	82 17       	cp	r24, r18
     662:	93 07       	cpc	r25, r19
     664:	08 f5       	brcc	.+66     	; 0x6a8 <vTaskDelayUntil+0xa6>
     666:	80 91 6b 02 	lds	r24, 0x026B
     66a:	90 91 6c 02 	lds	r25, 0x026C
     66e:	2a 81       	ldd	r18, Y+2	; 0x02
     670:	3b 81       	ldd	r19, Y+3	; 0x03
     672:	82 17       	cp	r24, r18
     674:	93 07       	cpc	r25, r19
     676:	c0 f4       	brcc	.+48     	; 0x6a8 <vTaskDelayUntil+0xa6>
				{
					xShouldDelay = pdTRUE;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	89 83       	std	Y+1, r24	; 0x01
     67c:	15 c0       	rjmp	.+42     	; 0x6a8 <vTaskDelayUntil+0xa6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
     67e:	8d 81       	ldd	r24, Y+5	; 0x05
     680:	9e 81       	ldd	r25, Y+6	; 0x06
     682:	fc 01       	movw	r30, r24
     684:	20 81       	ld	r18, Z
     686:	31 81       	ldd	r19, Z+1	; 0x01
     688:	8a 81       	ldd	r24, Y+2	; 0x02
     68a:	9b 81       	ldd	r25, Y+3	; 0x03
     68c:	82 17       	cp	r24, r18
     68e:	93 07       	cpc	r25, r19
     690:	48 f0       	brcs	.+18     	; 0x6a4 <vTaskDelayUntil+0xa2>
     692:	80 91 6b 02 	lds	r24, 0x026B
     696:	90 91 6c 02 	lds	r25, 0x026C
     69a:	2a 81       	ldd	r18, Y+2	; 0x02
     69c:	3b 81       	ldd	r19, Y+3	; 0x03
     69e:	82 17       	cp	r24, r18
     6a0:	93 07       	cpc	r25, r19
     6a2:	10 f4       	brcc	.+4      	; 0x6a8 <vTaskDelayUntil+0xa6>
				{
					xShouldDelay = pdTRUE;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
     6a8:	8d 81       	ldd	r24, Y+5	; 0x05
     6aa:	9e 81       	ldd	r25, Y+6	; 0x06
     6ac:	2a 81       	ldd	r18, Y+2	; 0x02
     6ae:	3b 81       	ldd	r19, Y+3	; 0x03
     6b0:	fc 01       	movw	r30, r24
     6b2:	31 83       	std	Z+1, r19	; 0x01
     6b4:	20 83       	st	Z, r18

			if( xShouldDelay != pdFALSE )
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	88 23       	and	r24, r24
     6ba:	59 f0       	breq	.+22     	; 0x6d2 <vTaskDelayUntil+0xd0>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     6bc:	80 91 1c 02 	lds	r24, 0x021C
     6c0:	90 91 1d 02 	lds	r25, 0x021D
     6c4:	02 96       	adiw	r24, 0x02	; 2
     6c6:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	9b 81       	ldd	r25, Y+3	; 0x03
     6ce:	0e 94 61 09 	call	0x12c2	; 0x12c2 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
     6d2:	0e 94 5a 05 	call	0xab4	; 0xab4 <xTaskResumeAll>
     6d6:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     6d8:	8c 81       	ldd	r24, Y+4	; 0x04
     6da:	88 23       	and	r24, r24
     6dc:	11 f4       	brne	.+4      	; 0x6e2 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
     6de:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
		}
	}
     6e2:	28 96       	adiw	r28, 0x08	; 8
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <vTaskDelay+0x6>
     6fa:	1f 92       	push	r1
     6fc:	1f 92       	push	r1
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	9d 83       	std	Y+5, r25	; 0x05
     704:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     706:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     708:	8c 81       	ldd	r24, Y+4	; 0x04
     70a:	9d 81       	ldd	r25, Y+5	; 0x05
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	d1 f0       	breq	.+52     	; 0x744 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
     710:	0e 94 4e 05 	call	0xa9c	; 0xa9c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     714:	20 91 6b 02 	lds	r18, 0x026B
     718:	30 91 6c 02 	lds	r19, 0x026C
     71c:	8c 81       	ldd	r24, Y+4	; 0x04
     71e:	9d 81       	ldd	r25, Y+5	; 0x05
     720:	82 0f       	add	r24, r18
     722:	93 1f       	adc	r25, r19
     724:	9b 83       	std	Y+3, r25	; 0x03
     726:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     728:	80 91 1c 02 	lds	r24, 0x021C
     72c:	90 91 1d 02 	lds	r25, 0x021D
     730:	02 96       	adiw	r24, 0x02	; 2
     732:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	9b 81       	ldd	r25, Y+3	; 0x03
     73a:	0e 94 61 09 	call	0x12c2	; 0x12c2 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     73e:	0e 94 5a 05 	call	0xab4	; 0xab4 <xTaskResumeAll>
     742:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	88 23       	and	r24, r24
     748:	11 f4       	brne	.+4      	; 0x74e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
     74a:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
		}
	}
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	00 d0       	rcall	.+0      	; 0x764 <vTaskSuspend+0x6>
     764:	1f 92       	push	r1
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	9c 83       	std	Y+4, r25	; 0x04
     76c:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
     774:	80 91 1c 02 	lds	r24, 0x021C
     778:	90 91 1d 02 	lds	r25, 0x021D
     77c:	2b 81       	ldd	r18, Y+3	; 0x03
     77e:	3c 81       	ldd	r19, Y+4	; 0x04
     780:	28 17       	cp	r18, r24
     782:	39 07       	cpc	r19, r25
     784:	11 f4       	brne	.+4      	; 0x78a <vTaskSuspend+0x2c>
			{
				pxTaskToSuspend = NULL;
     786:	1c 82       	std	Y+4, r1	; 0x04
     788:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
     78a:	8b 81       	ldd	r24, Y+3	; 0x03
     78c:	9c 81       	ldd	r25, Y+4	; 0x04
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	29 f4       	brne	.+10     	; 0x79c <vTaskSuspend+0x3e>
     792:	80 91 1c 02 	lds	r24, 0x021C
     796:	90 91 1d 02 	lds	r25, 0x021D
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <vTaskSuspend+0x42>
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	9c 81       	ldd	r25, Y+4	; 0x04
     7a0:	9a 83       	std	Y+2, r25	; 0x02
     7a2:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	9a 81       	ldd	r25, Y+2	; 0x02
     7a8:	02 96       	adiw	r24, 0x02	; 2
     7aa:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	fc 01       	movw	r30, r24
     7b4:	84 89       	ldd	r24, Z+20	; 0x14
     7b6:	95 89       	ldd	r25, Z+21	; 0x15
     7b8:	00 97       	sbiw	r24, 0x00	; 0
     7ba:	29 f0       	breq	.+10     	; 0x7c6 <vTaskSuspend+0x68>
			{
				uxListRemove( &( pxTCB->xEventListItem ) );
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
     7c0:	0c 96       	adiw	r24, 0x0c	; 12
     7c2:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	02 96       	adiw	r24, 0x02	; 2
     7cc:	bc 01       	movw	r22, r24
     7ce:	81 e6       	ldi	r24, 0x61	; 97
     7d0:	92 e0       	ldi	r25, 0x02	; 2
     7d2:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
     7da:	8b 81       	ldd	r24, Y+3	; 0x03
     7dc:	9c 81       	ldd	r25, Y+4	; 0x04
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	a1 f4       	brne	.+40     	; 0x80a <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
     7e2:	80 91 6f 02 	lds	r24, 0x026F
     7e6:	88 23       	and	r24, r24
     7e8:	19 f0       	breq	.+6      	; 0x7f0 <vTaskSuspend+0x92>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
     7ea:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
     7ee:	0d c0       	rjmp	.+26     	; 0x80a <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
     7f0:	90 91 61 02 	lds	r25, 0x0261
     7f4:	80 91 6a 02 	lds	r24, 0x026A
     7f8:	98 17       	cp	r25, r24
     7fa:	29 f4       	brne	.+10     	; 0x806 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
     7fc:	10 92 1d 02 	sts	0x021D, r1
     800:	10 92 1c 02 	sts	0x021C, r1
     804:	02 c0       	rjmp	.+4      	; 0x80a <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
     806:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <vTaskSwitchContext>
				}
			}
		}
	}
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	00 d0       	rcall	.+0      	; 0x81e <xTaskIsTaskSuspended+0x6>
     81e:	1f 92       	push	r1
     820:	1f 92       	push	r1
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	9d 83       	std	Y+5, r25	; 0x05
     828:	8c 83       	std	Y+4, r24	; 0x04
	portBASE_TYPE xReturn = pdFALSE;
     82a:	19 82       	std	Y+1, r1	; 0x01
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
     82c:	8c 81       	ldd	r24, Y+4	; 0x04
     82e:	9d 81       	ldd	r25, Y+5	; 0x05
     830:	9b 83       	std	Y+3, r25	; 0x03
     832:	8a 83       	std	Y+2, r24	; 0x02
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	9b 81       	ldd	r25, Y+3	; 0x03
     838:	fc 01       	movw	r30, r24
     83a:	82 85       	ldd	r24, Z+10	; 0x0a
     83c:	93 85       	ldd	r25, Z+11	; 0x0b
     83e:	f2 e0       	ldi	r31, 0x02	; 2
     840:	81 36       	cpi	r24, 0x61	; 97
     842:	9f 07       	cpc	r25, r31
     844:	91 f4       	brne	.+36     	; 0x86a <xTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
     846:	8a 81       	ldd	r24, Y+2	; 0x02
     848:	9b 81       	ldd	r25, Y+3	; 0x03
     84a:	fc 01       	movw	r30, r24
     84c:	84 89       	ldd	r24, Z+20	; 0x14
     84e:	95 89       	ldd	r25, Z+21	; 0x15
     850:	f2 e0       	ldi	r31, 0x02	; 2
     852:	88 35       	cpi	r24, 0x58	; 88
     854:	9f 07       	cpc	r25, r31
     856:	49 f0       	breq	.+18     	; 0x86a <xTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	9b 81       	ldd	r25, Y+3	; 0x03
     85c:	fc 01       	movw	r30, r24
     85e:	84 89       	ldd	r24, Z+20	; 0x14
     860:	95 89       	ldd	r25, Z+21	; 0x15
     862:	00 97       	sbiw	r24, 0x00	; 0
     864:	11 f4       	brne	.+4      	; 0x86a <xTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}

		return xReturn;
     86a:	89 81       	ldd	r24, Y+1	; 0x01
	}
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <vTaskResume+0x6>
     882:	1f 92       	push	r1
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	9c 83       	std	Y+4, r25	; 0x04
     88a:	8b 83       	std	Y+3, r24	; 0x03
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
     88e:	9c 81       	ldd	r25, Y+4	; 0x04
     890:	9a 83       	std	Y+2, r25	; 0x02
     892:	89 83       	std	Y+1, r24	; 0x01

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	9a 81       	ldd	r25, Y+2	; 0x02
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	09 f4       	brne	.+2      	; 0x89e <vTaskResume+0x22>
     89c:	4f c0       	rjmp	.+158    	; 0x93c <vTaskResume+0xc0>
     89e:	80 91 1c 02 	lds	r24, 0x021C
     8a2:	90 91 1d 02 	lds	r25, 0x021D
     8a6:	29 81       	ldd	r18, Y+1	; 0x01
     8a8:	3a 81       	ldd	r19, Y+2	; 0x02
     8aa:	28 17       	cp	r18, r24
     8ac:	39 07       	cpc	r19, r25
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <vTaskResume+0x36>
     8b0:	45 c0       	rjmp	.+138    	; 0x93c <vTaskResume+0xc0>
		{
			taskENTER_CRITICAL();
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	0f 92       	push	r0
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	9a 81       	ldd	r25, Y+2	; 0x02
     8bc:	0e 94 0c 04 	call	0x818	; 0x818 <xTaskIsTaskSuspended>
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	d1 f5       	brne	.+116    	; 0x938 <vTaskResume+0xbc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					uxListRemove(  &( pxTCB->xGenericListItem ) );
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	9a 81       	ldd	r25, Y+2	; 0x02
     8c8:	02 96       	adiw	r24, 0x02	; 2
     8ca:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	9a 81       	ldd	r25, Y+2	; 0x02
     8d2:	fc 01       	movw	r30, r24
     8d4:	96 89       	ldd	r25, Z+22	; 0x16
     8d6:	80 91 6e 02 	lds	r24, 0x026E
     8da:	89 17       	cp	r24, r25
     8dc:	30 f4       	brcc	.+12     	; 0x8ea <vTaskResume+0x6e>
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	9a 81       	ldd	r25, Y+2	; 0x02
     8e2:	fc 01       	movw	r30, r24
     8e4:	86 89       	ldd	r24, Z+22	; 0x16
     8e6:	80 93 6e 02 	sts	0x026E, r24
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	9a 81       	ldd	r25, Y+2	; 0x02
     8ee:	ac 01       	movw	r20, r24
     8f0:	4e 5f       	subi	r20, 0xFE	; 254
     8f2:	5f 4f       	sbci	r21, 0xFF	; 255
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	9a 81       	ldd	r25, Y+2	; 0x02
     8f8:	fc 01       	movw	r30, r24
     8fa:	86 89       	ldd	r24, Z+22	; 0x16
     8fc:	28 2f       	mov	r18, r24
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	c9 01       	movw	r24, r18
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	82 0f       	add	r24, r18
     910:	93 1f       	adc	r25, r19
     912:	82 5e       	subi	r24, 0xE2	; 226
     914:	9d 4f       	sbci	r25, 0xFD	; 253
     916:	ba 01       	movw	r22, r20
     918:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	9a 81       	ldd	r25, Y+2	; 0x02
     920:	fc 01       	movw	r30, r24
     922:	26 89       	ldd	r18, Z+22	; 0x16
     924:	80 91 1c 02 	lds	r24, 0x021C
     928:	90 91 1d 02 	lds	r25, 0x021D
     92c:	fc 01       	movw	r30, r24
     92e:	86 89       	ldd	r24, Z+22	; 0x16
     930:	28 17       	cp	r18, r24
     932:	10 f0       	brcs	.+4      	; 0x938 <vTaskResume+0xbc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
     934:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
		}
	}
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	00 d0       	rcall	.+0      	; 0x950 <xTaskResumeFromISR+0x6>
     950:	00 d0       	rcall	.+0      	; 0x952 <xTaskResumeFromISR+0x8>
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	9e 83       	std	Y+6, r25	; 0x06
     958:	8d 83       	std	Y+5, r24	; 0x05
	portBASE_TYPE xYieldRequired = pdFALSE;
     95a:	19 82       	std	Y+1, r1	; 0x01
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
     95c:	8d 81       	ldd	r24, Y+5	; 0x05
     95e:	9e 81       	ldd	r25, Y+6	; 0x06
     960:	9b 83       	std	Y+3, r25	; 0x03
     962:	8a 83       	std	Y+2, r24	; 0x02

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     964:	1c 82       	std	Y+4, r1	; 0x04
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
     966:	8a 81       	ldd	r24, Y+2	; 0x02
     968:	9b 81       	ldd	r25, Y+3	; 0x03
     96a:	0e 94 0c 04 	call	0x818	; 0x818 <xTaskIsTaskSuspended>
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	09 f0       	breq	.+2      	; 0x974 <xTaskResumeFromISR+0x2a>
     972:	48 c0       	rjmp	.+144    	; 0xa04 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     974:	80 91 70 02 	lds	r24, 0x0270
     978:	88 23       	and	r24, r24
     97a:	e1 f5       	brne	.+120    	; 0x9f4 <xTaskResumeFromISR+0xaa>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	9b 81       	ldd	r25, Y+3	; 0x03
     980:	fc 01       	movw	r30, r24
     982:	26 89       	ldd	r18, Z+22	; 0x16
     984:	80 91 1c 02 	lds	r24, 0x021C
     988:	90 91 1d 02 	lds	r25, 0x021D
     98c:	fc 01       	movw	r30, r24
     98e:	96 89       	ldd	r25, Z+22	; 0x16
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	29 17       	cp	r18, r25
     994:	08 f4       	brcc	.+2      	; 0x998 <xTaskResumeFromISR+0x4e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	89 83       	std	Y+1, r24	; 0x01
					uxListRemove(  &( pxTCB->xGenericListItem ) );
     99a:	8a 81       	ldd	r24, Y+2	; 0x02
     99c:	9b 81       	ldd	r25, Y+3	; 0x03
     99e:	02 96       	adiw	r24, 0x02	; 2
     9a0:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     9a4:	8a 81       	ldd	r24, Y+2	; 0x02
     9a6:	9b 81       	ldd	r25, Y+3	; 0x03
     9a8:	fc 01       	movw	r30, r24
     9aa:	96 89       	ldd	r25, Z+22	; 0x16
     9ac:	80 91 6e 02 	lds	r24, 0x026E
     9b0:	89 17       	cp	r24, r25
     9b2:	30 f4       	brcc	.+12     	; 0x9c0 <xTaskResumeFromISR+0x76>
     9b4:	8a 81       	ldd	r24, Y+2	; 0x02
     9b6:	9b 81       	ldd	r25, Y+3	; 0x03
     9b8:	fc 01       	movw	r30, r24
     9ba:	86 89       	ldd	r24, Z+22	; 0x16
     9bc:	80 93 6e 02 	sts	0x026E, r24
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	9b 81       	ldd	r25, Y+3	; 0x03
     9c4:	ac 01       	movw	r20, r24
     9c6:	4e 5f       	subi	r20, 0xFE	; 254
     9c8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	9b 81       	ldd	r25, Y+3	; 0x03
     9ce:	fc 01       	movw	r30, r24
     9d0:	86 89       	ldd	r24, Z+22	; 0x16
     9d2:	28 2f       	mov	r18, r24
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	c9 01       	movw	r24, r18
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	82 0f       	add	r24, r18
     9e6:	93 1f       	adc	r25, r19
     9e8:	82 5e       	subi	r24, 0xE2	; 226
     9ea:	9d 4f       	sbci	r25, 0xFD	; 253
     9ec:	ba 01       	movw	r22, r20
     9ee:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>
     9f2:	08 c0       	rjmp	.+16     	; 0xa04 <xTaskResumeFromISR+0xba>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     9f4:	8a 81       	ldd	r24, Y+2	; 0x02
     9f6:	9b 81       	ldd	r25, Y+3	; 0x03
     9f8:	0c 96       	adiw	r24, 0x0c	; 12
     9fa:	bc 01       	movw	r22, r24
     9fc:	88 e5       	ldi	r24, 0x58	; 88
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
     a04:	89 81       	ldd	r24, Y+1	; 0x01
	}
     a06:	26 96       	adiw	r28, 0x06	; 6
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
     a18:	af 92       	push	r10
     a1a:	bf 92       	push	r11
     a1c:	cf 92       	push	r12
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	1f 92       	push	r1
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
     a30:	a1 2c       	mov	r10, r1
     a32:	b1 2c       	mov	r11, r1
     a34:	c1 2c       	mov	r12, r1
     a36:	d1 2c       	mov	r13, r1
     a38:	e1 2c       	mov	r14, r1
     a3a:	f1 2c       	mov	r15, r1
     a3c:	00 e0       	ldi	r16, 0x00	; 0
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	45 e5       	ldi	r20, 0x55	; 85
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	65 e1       	ldi	r22, 0x15	; 21
     a48:	72 e0       	ldi	r23, 0x02	; 2
     a4a:	8a ea       	ldi	r24, 0xAA	; 170
     a4c:	98 e0       	ldi	r25, 0x08	; 8
     a4e:	0e 94 0d 02 	call	0x41a	; 0x41a <xTaskGenericCreate>
     a52:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	81 30       	cpi	r24, 0x01	; 1
     a58:	51 f4       	brne	.+20     	; 0xa6e <vTaskStartScheduler+0x56>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
     a5a:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	80 93 6f 02 	sts	0x026F, r24
		xTickCount = ( portTickType ) 0U;
     a62:	10 92 6c 02 	sts	0x026C, r1
     a66:	10 92 6b 02 	sts	0x026B, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     a6a:	0e 94 98 17 	call	0x2f30	; 0x2f30 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
     a6e:	0f 90       	pop	r0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	cf 90       	pop	r12
     a7e:	bf 90       	pop	r11
     a80:	af 90       	pop	r10
     a82:	08 95       	ret

00000a84 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
     a8c:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
     a8e:	10 92 6f 02 	sts	0x026F, r1
	vPortEndScheduler();
     a92:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <vPortEndScheduler>
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
     aa4:	80 91 70 02 	lds	r24, 0x0270
     aa8:	8f 5f       	subi	r24, 0xFF	; 255
     aaa:	80 93 70 02 	sts	0x0270, r24
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	1f 92       	push	r1
     abe:	1f 92       	push	r1
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     ac4:	19 82       	std	Y+1, r1	; 0x01
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
     acc:	80 91 70 02 	lds	r24, 0x0270
     ad0:	81 50       	subi	r24, 0x01	; 1
     ad2:	80 93 70 02 	sts	0x0270, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     ad6:	80 91 70 02 	lds	r24, 0x0270
     ada:	88 23       	and	r24, r24
     adc:	09 f0       	breq	.+2      	; 0xae0 <xTaskResumeAll+0x2c>
     ade:	64 c0       	rjmp	.+200    	; 0xba8 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
     ae0:	80 91 6a 02 	lds	r24, 0x026A
     ae4:	88 23       	and	r24, r24
     ae6:	09 f4       	brne	.+2      	; 0xaea <xTaskResumeAll+0x36>
     ae8:	5f c0       	rjmp	.+190    	; 0xba8 <xTaskResumeAll+0xf4>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
     aea:	1a 82       	std	Y+2, r1	; 0x02

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     aec:	3a c0       	rjmp	.+116    	; 0xb62 <xTaskResumeAll+0xae>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
     aee:	80 91 5d 02 	lds	r24, 0x025D
     af2:	90 91 5e 02 	lds	r25, 0x025E
     af6:	fc 01       	movw	r30, r24
     af8:	06 81       	ldd	r16, Z+6	; 0x06
     afa:	17 81       	ldd	r17, Z+7	; 0x07
					uxListRemove( &( pxTCB->xEventListItem ) );
     afc:	c8 01       	movw	r24, r16
     afe:	0c 96       	adiw	r24, 0x0c	; 12
     b00:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
					uxListRemove( &( pxTCB->xGenericListItem ) );
     b04:	c8 01       	movw	r24, r16
     b06:	02 96       	adiw	r24, 0x02	; 2
     b08:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
     b0c:	f8 01       	movw	r30, r16
     b0e:	96 89       	ldd	r25, Z+22	; 0x16
     b10:	80 91 6e 02 	lds	r24, 0x026E
     b14:	89 17       	cp	r24, r25
     b16:	20 f4       	brcc	.+8      	; 0xb20 <xTaskResumeAll+0x6c>
     b18:	f8 01       	movw	r30, r16
     b1a:	86 89       	ldd	r24, Z+22	; 0x16
     b1c:	80 93 6e 02 	sts	0x026E, r24
     b20:	a8 01       	movw	r20, r16
     b22:	4e 5f       	subi	r20, 0xFE	; 254
     b24:	5f 4f       	sbci	r21, 0xFF	; 255
     b26:	f8 01       	movw	r30, r16
     b28:	86 89       	ldd	r24, Z+22	; 0x16
     b2a:	28 2f       	mov	r18, r24
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	c9 01       	movw	r24, r18
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	82 0f       	add	r24, r18
     b3e:	93 1f       	adc	r25, r19
     b40:	82 5e       	subi	r24, 0xE2	; 226
     b42:	9d 4f       	sbci	r25, 0xFD	; 253
     b44:	ba 01       	movw	r22, r20
     b46:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     b4a:	f8 01       	movw	r30, r16
     b4c:	26 89       	ldd	r18, Z+22	; 0x16
     b4e:	80 91 1c 02 	lds	r24, 0x021C
     b52:	90 91 1d 02 	lds	r25, 0x021D
     b56:	fc 01       	movw	r30, r24
     b58:	86 89       	ldd	r24, Z+22	; 0x16
     b5a:	28 17       	cp	r18, r24
     b5c:	10 f0       	brcs	.+4      	; 0xb62 <xTaskResumeAll+0xae>
					{
						xYieldRequired = pdTRUE;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	8a 83       	std	Y+2, r24	; 0x02
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     b62:	80 91 58 02 	lds	r24, 0x0258
     b66:	88 23       	and	r24, r24
     b68:	11 f6       	brne	.-124    	; 0xaee <xTaskResumeAll+0x3a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     b6a:	80 91 71 02 	lds	r24, 0x0271
     b6e:	88 23       	and	r24, r24
     b70:	71 f0       	breq	.+28     	; 0xb8e <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     b72:	07 c0       	rjmp	.+14     	; 0xb82 <xTaskResumeAll+0xce>
					{
						vTaskIncrementTick();
     b74:	0e 94 13 06 	call	0xc26	; 0xc26 <vTaskIncrementTick>
						--uxMissedTicks;
     b78:	80 91 71 02 	lds	r24, 0x0271
     b7c:	81 50       	subi	r24, 0x01	; 1
     b7e:	80 93 71 02 	sts	0x0271, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     b82:	80 91 71 02 	lds	r24, 0x0271
     b86:	88 23       	and	r24, r24
     b88:	a9 f7       	brne	.-22     	; 0xb74 <xTaskResumeAll+0xc0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	21 f0       	breq	.+8      	; 0xb9c <xTaskResumeAll+0xe8>
     b94:	80 91 72 02 	lds	r24, 0x0272
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	31 f4       	brne	.+12     	; 0xba8 <xTaskResumeAll+0xf4>
				{
					xAlreadyYielded = pdTRUE;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	89 83       	std	Y+1, r24	; 0x01
					xMissedYield = pdFALSE;
     ba0:	10 92 72 02 	sts	0x0272, r1
					portYIELD_WITHIN_API();
     ba4:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
     ba8:	0f 90       	pop	r0
     baa:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
     bac:	89 81       	ldd	r24, Y+1	; 0x01
}
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	08 95       	ret

00000bbc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	1f 92       	push	r1
     bc2:	1f 92       	push	r1
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	0f 92       	push	r0
	{
		xTicks = xTickCount;
     bce:	80 91 6b 02 	lds	r24, 0x026B
     bd2:	90 91 6c 02 	lds	r25, 0x026C
     bd6:	9a 83       	std	Y+2, r25	; 0x02
     bd8:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
     bda:	0f 90       	pop	r0
     bdc:	0f be       	out	0x3f, r0	; 63

	return xTicks;
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret

00000bec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <xTaskGetTickCountFromISR+0x6>
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     bf6:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
     bf8:	80 91 6b 02 	lds	r24, 0x026B
     bfc:	90 91 6c 02 	lds	r25, 0x026C
     c00:	9b 83       	std	Y+3, r25	; 0x03
     c02:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	9b 81       	ldd	r25, Y+3	; 0x03
}
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
     c1c:	80 91 6a 02 	lds	r24, 0x026A
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret

00000c26 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <vTaskIncrementTick+0x6>
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <vTaskIncrementTick+0x8>
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     c32:	80 91 70 02 	lds	r24, 0x0270
     c36:	88 23       	and	r24, r24
     c38:	09 f0       	breq	.+2      	; 0xc3c <vTaskIncrementTick+0x16>
     c3a:	c4 c0       	rjmp	.+392    	; 0xdc4 <vTaskIncrementTick+0x19e>
	{
		++xTickCount;
     c3c:	80 91 6b 02 	lds	r24, 0x026B
     c40:	90 91 6c 02 	lds	r25, 0x026C
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	90 93 6c 02 	sts	0x026C, r25
     c4a:	80 93 6b 02 	sts	0x026B, r24
		if( xTickCount == ( portTickType ) 0U )
     c4e:	80 91 6b 02 	lds	r24, 0x026B
     c52:	90 91 6c 02 	lds	r25, 0x026C
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	e9 f5       	brne	.+122    	; 0xcd4 <vTaskIncrementTick+0xae>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
     c5a:	80 91 54 02 	lds	r24, 0x0254
     c5e:	90 91 55 02 	lds	r25, 0x0255
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedTaskList = pxOverflowDelayedTaskList;
     c66:	80 91 56 02 	lds	r24, 0x0256
     c6a:	90 91 57 02 	lds	r25, 0x0257
     c6e:	90 93 55 02 	sts	0x0255, r25
     c72:	80 93 54 02 	sts	0x0254, r24
			pxOverflowDelayedTaskList = pxTemp;
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	90 93 57 02 	sts	0x0257, r25
     c7e:	80 93 56 02 	sts	0x0256, r24
			xNumOfOverflows++;
     c82:	80 91 73 02 	lds	r24, 0x0273
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	80 93 73 02 	sts	0x0273, r24

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     c8c:	80 91 54 02 	lds	r24, 0x0254
     c90:	90 91 55 02 	lds	r25, 0x0255
     c94:	fc 01       	movw	r30, r24
     c96:	80 81       	ld	r24, Z
     c98:	88 23       	and	r24, r24
     c9a:	39 f4       	brne	.+14     	; 0xcaa <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	9f ef       	ldi	r25, 0xFF	; 255
     ca0:	90 93 01 02 	sts	0x0201, r25
     ca4:	80 93 00 02 	sts	0x0200, r24
     ca8:	15 c0       	rjmp	.+42     	; 0xcd4 <vTaskIncrementTick+0xae>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     caa:	80 91 54 02 	lds	r24, 0x0254
     cae:	90 91 55 02 	lds	r25, 0x0255
     cb2:	fc 01       	movw	r30, r24
     cb4:	85 81       	ldd	r24, Z+5	; 0x05
     cb6:	96 81       	ldd	r25, Z+6	; 0x06
     cb8:	fc 01       	movw	r30, r24
     cba:	86 81       	ldd	r24, Z+6	; 0x06
     cbc:	97 81       	ldd	r25, Z+7	; 0x07
     cbe:	9c 83       	std	Y+4, r25	; 0x04
     cc0:	8b 83       	std	Y+3, r24	; 0x03
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	9c 81       	ldd	r25, Y+4	; 0x04
     cc6:	fc 01       	movw	r30, r24
     cc8:	82 81       	ldd	r24, Z+2	; 0x02
     cca:	93 81       	ldd	r25, Z+3	; 0x03
     ccc:	90 93 01 02 	sts	0x0201, r25
     cd0:	80 93 00 02 	sts	0x0200, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
     cd4:	20 91 6b 02 	lds	r18, 0x026B
     cd8:	30 91 6c 02 	lds	r19, 0x026C
     cdc:	80 91 00 02 	lds	r24, 0x0200
     ce0:	90 91 01 02 	lds	r25, 0x0201
     ce4:	28 17       	cp	r18, r24
     ce6:	39 07       	cpc	r19, r25
     ce8:	08 f4       	brcc	.+2      	; 0xcec <vTaskIncrementTick+0xc6>
     cea:	6b c0       	rjmp	.+214    	; 0xdc2 <vTaskIncrementTick+0x19c>
     cec:	80 91 54 02 	lds	r24, 0x0254
     cf0:	90 91 55 02 	lds	r25, 0x0255
     cf4:	fc 01       	movw	r30, r24
     cf6:	80 81       	ld	r24, Z
     cf8:	88 23       	and	r24, r24
     cfa:	39 f4       	brne	.+14     	; 0xd0a <vTaskIncrementTick+0xe4>
     cfc:	8f ef       	ldi	r24, 0xFF	; 255
     cfe:	9f ef       	ldi	r25, 0xFF	; 255
     d00:	90 93 01 02 	sts	0x0201, r25
     d04:	80 93 00 02 	sts	0x0200, r24
     d08:	5c c0       	rjmp	.+184    	; 0xdc2 <vTaskIncrementTick+0x19c>
     d0a:	80 91 54 02 	lds	r24, 0x0254
     d0e:	90 91 55 02 	lds	r25, 0x0255
     d12:	fc 01       	movw	r30, r24
     d14:	85 81       	ldd	r24, Z+5	; 0x05
     d16:	96 81       	ldd	r25, Z+6	; 0x06
     d18:	fc 01       	movw	r30, r24
     d1a:	86 81       	ldd	r24, Z+6	; 0x06
     d1c:	97 81       	ldd	r25, Z+7	; 0x07
     d1e:	9c 83       	std	Y+4, r25	; 0x04
     d20:	8b 83       	std	Y+3, r24	; 0x03
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	fc 01       	movw	r30, r24
     d28:	82 81       	ldd	r24, Z+2	; 0x02
     d2a:	93 81       	ldd	r25, Z+3	; 0x03
     d2c:	9e 83       	std	Y+6, r25	; 0x06
     d2e:	8d 83       	std	Y+5, r24	; 0x05
     d30:	20 91 6b 02 	lds	r18, 0x026B
     d34:	30 91 6c 02 	lds	r19, 0x026C
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	28 17       	cp	r18, r24
     d3e:	39 07       	cpc	r19, r25
     d40:	38 f4       	brcc	.+14     	; 0xd50 <vTaskIncrementTick+0x12a>
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	90 93 01 02 	sts	0x0201, r25
     d4a:	80 93 00 02 	sts	0x0200, r24
     d4e:	39 c0       	rjmp	.+114    	; 0xdc2 <vTaskIncrementTick+0x19c>
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	9c 81       	ldd	r25, Y+4	; 0x04
     d54:	02 96       	adiw	r24, 0x02	; 2
     d56:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	fc 01       	movw	r30, r24
     d60:	84 89       	ldd	r24, Z+20	; 0x14
     d62:	95 89       	ldd	r25, Z+21	; 0x15
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	29 f0       	breq	.+10     	; 0xd72 <vTaskIncrementTick+0x14c>
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	0c 96       	adiw	r24, 0x0c	; 12
     d6e:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	fc 01       	movw	r30, r24
     d78:	96 89       	ldd	r25, Z+22	; 0x16
     d7a:	80 91 6e 02 	lds	r24, 0x026E
     d7e:	89 17       	cp	r24, r25
     d80:	30 f4       	brcc	.+12     	; 0xd8e <vTaskIncrementTick+0x168>
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	fc 01       	movw	r30, r24
     d88:	86 89       	ldd	r24, Z+22	; 0x16
     d8a:	80 93 6e 02 	sts	0x026E, r24
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	ac 01       	movw	r20, r24
     d94:	4e 5f       	subi	r20, 0xFE	; 254
     d96:	5f 4f       	sbci	r21, 0xFF	; 255
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	fc 01       	movw	r30, r24
     d9e:	86 89       	ldd	r24, Z+22	; 0x16
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	c9 01       	movw	r24, r18
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	82 0f       	add	r24, r18
     db4:	93 1f       	adc	r25, r19
     db6:	82 5e       	subi	r24, 0xE2	; 226
     db8:	9d 4f       	sbci	r25, 0xFD	; 253
     dba:	ba 01       	movw	r22, r20
     dbc:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>
     dc0:	95 cf       	rjmp	.-214    	; 0xcec <vTaskIncrementTick+0xc6>
     dc2:	07 c0       	rjmp	.+14     	; 0xdd2 <vTaskIncrementTick+0x1ac>
	}
	else
	{
		++uxMissedTicks;
     dc4:	80 91 71 02 	lds	r24, 0x0271
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	80 93 71 02 	sts	0x0271, r24

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
     dce:	0e 94 99 00 	call	0x132	; 0x132 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
     dd2:	80 91 71 02 	lds	r24, 0x0271
     dd6:	88 23       	and	r24, r24
     dd8:	11 f4       	brne	.+4      	; 0xdde <vTaskIncrementTick+0x1b8>
		{
			vApplicationTickHook();
     dda:	0e 94 99 00 	call	0x132	; 0x132 <vApplicationTickHook>
		}
	}
	#endif
}
     dde:	26 96       	adiw	r28, 0x06	; 6
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	1f 92       	push	r1
     df6:	1f 92       	push	r1
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     dfc:	80 91 70 02 	lds	r24, 0x0270
     e00:	88 23       	and	r24, r24
     e02:	21 f0       	breq	.+8      	; 0xe0c <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 72 02 	sts	0x0272, r24
     e0a:	5b c0       	rjmp	.+182    	; 0xec2 <vTaskSwitchContext+0xd2>

//BB Commented out...
//		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <vTaskSwitchContext+0x28>
     e0e:	80 91 6e 02 	lds	r24, 0x026E
     e12:	81 50       	subi	r24, 0x01	; 1
     e14:	80 93 6e 02 	sts	0x026E, r24
     e18:	80 91 6e 02 	lds	r24, 0x026E
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	c9 01       	movw	r24, r18
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	82 0f       	add	r24, r18
     e30:	93 1f       	adc	r25, r19
     e32:	82 5e       	subi	r24, 0xE2	; 226
     e34:	9d 4f       	sbci	r25, 0xFD	; 253
     e36:	fc 01       	movw	r30, r24
     e38:	80 81       	ld	r24, Z
     e3a:	88 23       	and	r24, r24
     e3c:	41 f3       	breq	.-48     	; 0xe0e <vTaskSwitchContext+0x1e>
     e3e:	80 91 6e 02 	lds	r24, 0x026E
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	c9 01       	movw	r24, r18
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	82 0f       	add	r24, r18
     e56:	93 1f       	adc	r25, r19
     e58:	82 5e       	subi	r24, 0xE2	; 226
     e5a:	9d 4f       	sbci	r25, 0xFD	; 253
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	fc 01       	movw	r30, r24
     e66:	81 81       	ldd	r24, Z+1	; 0x01
     e68:	92 81       	ldd	r25, Z+2	; 0x02
     e6a:	fc 01       	movw	r30, r24
     e6c:	22 81       	ldd	r18, Z+2	; 0x02
     e6e:	33 81       	ldd	r19, Z+3	; 0x03
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	fc 01       	movw	r30, r24
     e76:	32 83       	std	Z+2, r19	; 0x02
     e78:	21 83       	std	Z+1, r18	; 0x01
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	fc 01       	movw	r30, r24
     e80:	21 81       	ldd	r18, Z+1	; 0x01
     e82:	32 81       	ldd	r19, Z+2	; 0x02
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	03 96       	adiw	r24, 0x03	; 3
     e8a:	28 17       	cp	r18, r24
     e8c:	39 07       	cpc	r19, r25
     e8e:	69 f4       	brne	.+26     	; 0xeaa <vTaskSwitchContext+0xba>
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	fc 01       	movw	r30, r24
     e96:	81 81       	ldd	r24, Z+1	; 0x01
     e98:	92 81       	ldd	r25, Z+2	; 0x02
     e9a:	fc 01       	movw	r30, r24
     e9c:	22 81       	ldd	r18, Z+2	; 0x02
     e9e:	33 81       	ldd	r19, Z+3	; 0x03
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	fc 01       	movw	r30, r24
     ea6:	32 83       	std	Z+2, r19	; 0x02
     ea8:	21 83       	std	Z+1, r18	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	fc 01       	movw	r30, r24
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	92 81       	ldd	r25, Z+2	; 0x02
     eb4:	fc 01       	movw	r30, r24
     eb6:	86 81       	ldd	r24, Z+6	; 0x06
     eb8:	97 81       	ldd	r25, Z+7	; 0x07
     eba:	90 93 1d 02 	sts	0x021D, r25
     ebe:	80 93 1c 02 	sts	0x021C, r24

		traceTASK_SWITCHED_IN();
	}
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	08 95       	ret

00000ecc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <vTaskPlaceOnEventList+0x6>
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <vTaskPlaceOnEventList+0x8>
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	9c 83       	std	Y+4, r25	; 0x04
     eda:	8b 83       	std	Y+3, r24	; 0x03
     edc:	7e 83       	std	Y+6, r23	; 0x06
     ede:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
     ee0:	80 91 1c 02 	lds	r24, 0x021C
     ee4:	90 91 1d 02 	lds	r25, 0x021D
     ee8:	9c 01       	movw	r18, r24
     eea:	24 5f       	subi	r18, 0xF4	; 244
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	b9 01       	movw	r22, r18
     ef4:	0e 94 9d 11 	call	0x233a	; 0x233a <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     ef8:	80 91 1c 02 	lds	r24, 0x021C
     efc:	90 91 1d 02 	lds	r25, 0x021D
     f00:	02 96       	adiw	r24, 0x02	; 2
     f02:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
     f06:	8d 81       	ldd	r24, Y+5	; 0x05
     f08:	9e 81       	ldd	r25, Y+6	; 0x06
     f0a:	8f 3f       	cpi	r24, 0xFF	; 255
     f0c:	2f ef       	ldi	r18, 0xFF	; 255
     f0e:	92 07       	cpc	r25, r18
     f10:	59 f4       	brne	.+22     	; 0xf28 <vTaskPlaceOnEventList+0x5c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     f12:	80 91 1c 02 	lds	r24, 0x021C
     f16:	90 91 1d 02 	lds	r25, 0x021D
     f1a:	02 96       	adiw	r24, 0x02	; 2
     f1c:	bc 01       	movw	r22, r24
     f1e:	81 e6       	ldi	r24, 0x61	; 97
     f20:	92 e0       	ldi	r25, 0x02	; 2
     f22:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>
     f26:	0e c0       	rjmp	.+28     	; 0xf44 <vTaskPlaceOnEventList+0x78>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
     f28:	20 91 6b 02 	lds	r18, 0x026B
     f2c:	30 91 6c 02 	lds	r19, 0x026C
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	82 0f       	add	r24, r18
     f36:	93 1f       	adc	r25, r19
     f38:	9a 83       	std	Y+2, r25	; 0x02
     f3a:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	0e 94 61 09 	call	0x12c2	; 0x12c2 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
     f44:	26 96       	adiw	r28, 0x06	; 6
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <xTaskRemoveFromEventList+0x6>
     f5c:	1f 92       	push	r1
     f5e:	1f 92       	push	r1
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	9d 83       	std	Y+5, r25	; 0x05
     f66:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	fc 01       	movw	r30, r24
     f6e:	85 81       	ldd	r24, Z+5	; 0x05
     f70:	96 81       	ldd	r25, Z+6	; 0x06
     f72:	fc 01       	movw	r30, r24
     f74:	86 81       	ldd	r24, Z+6	; 0x06
     f76:	97 81       	ldd	r25, Z+7	; 0x07
     f78:	9b 83       	std	Y+3, r25	; 0x03
     f7a:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	9b 81       	ldd	r25, Y+3	; 0x03
     f80:	0c 96       	adiw	r24, 0x0c	; 12
     f82:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     f86:	80 91 70 02 	lds	r24, 0x0270
     f8a:	88 23       	and	r24, r24
     f8c:	69 f5       	brne	.+90     	; 0xfe8 <xTaskRemoveFromEventList+0x92>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	9b 81       	ldd	r25, Y+3	; 0x03
     f92:	02 96       	adiw	r24, 0x02	; 2
     f94:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	9b 81       	ldd	r25, Y+3	; 0x03
     f9c:	fc 01       	movw	r30, r24
     f9e:	96 89       	ldd	r25, Z+22	; 0x16
     fa0:	80 91 6e 02 	lds	r24, 0x026E
     fa4:	89 17       	cp	r24, r25
     fa6:	30 f4       	brcc	.+12     	; 0xfb4 <xTaskRemoveFromEventList+0x5e>
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	9b 81       	ldd	r25, Y+3	; 0x03
     fac:	fc 01       	movw	r30, r24
     fae:	86 89       	ldd	r24, Z+22	; 0x16
     fb0:	80 93 6e 02 	sts	0x026E, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	9b 81       	ldd	r25, Y+3	; 0x03
     fb8:	ac 01       	movw	r20, r24
     fba:	4e 5f       	subi	r20, 0xFE	; 254
     fbc:	5f 4f       	sbci	r21, 0xFF	; 255
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	9b 81       	ldd	r25, Y+3	; 0x03
     fc2:	fc 01       	movw	r30, r24
     fc4:	86 89       	ldd	r24, Z+22	; 0x16
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	c9 01       	movw	r24, r18
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	82 0f       	add	r24, r18
     fda:	93 1f       	adc	r25, r19
     fdc:	82 5e       	subi	r24, 0xE2	; 226
     fde:	9d 4f       	sbci	r25, 0xFD	; 253
     fe0:	ba 01       	movw	r22, r20
     fe2:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>
     fe6:	08 c0       	rjmp	.+16     	; 0xff8 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	9b 81       	ldd	r25, Y+3	; 0x03
     fec:	0c 96       	adiw	r24, 0x0c	; 12
     fee:	bc 01       	movw	r22, r24
     ff0:	88 e5       	ldi	r24, 0x58	; 88
     ff2:	92 e0       	ldi	r25, 0x02	; 2
     ff4:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	fc 01       	movw	r30, r24
     ffe:	26 89       	ldd	r18, Z+22	; 0x16
    1000:	80 91 1c 02 	lds	r24, 0x021C
    1004:	90 91 1d 02 	lds	r25, 0x021D
    1008:	fc 01       	movw	r30, r24
    100a:	86 89       	ldd	r24, Z+22	; 0x16
    100c:	28 17       	cp	r18, r24
    100e:	18 f0       	brcs	.+6      	; 0x1016 <xTaskRemoveFromEventList+0xc0>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <xTaskRemoveFromEventList+0xc2>
	}
	else
	{
		xReturn = pdFALSE;
    1016:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    1018:	89 81       	ldd	r24, Y+1	; 0x01
}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	1f 92       	push	r1
    1030:	1f 92       	push	r1
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	9a 83       	std	Y+2, r25	; 0x02
    1038:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    103a:	20 91 73 02 	lds	r18, 0x0273
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    1046:	20 91 6b 02 	lds	r18, 0x026B
    104a:	30 91 6c 02 	lds	r19, 0x026C
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	fc 01       	movw	r30, r24
    1054:	32 83       	std	Z+2, r19	; 0x02
    1056:	21 83       	std	Z+1, r18	; 0x01
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	00 d0       	rcall	.+0      	; 0x1068 <xTaskCheckForTimeOut+0x6>
    1068:	1f 92       	push	r1
    106a:	1f 92       	push	r1
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	9b 83       	std	Y+3, r25	; 0x03
    1072:	8a 83       	std	Y+2, r24	; 0x02
    1074:	7d 83       	std	Y+5, r23	; 0x05
    1076:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	9d 81       	ldd	r25, Y+5	; 0x05
    1082:	fc 01       	movw	r30, r24
    1084:	80 81       	ld	r24, Z
    1086:	91 81       	ldd	r25, Z+1	; 0x01
    1088:	8f 3f       	cpi	r24, 0xFF	; 255
    108a:	ff ef       	ldi	r31, 0xFF	; 255
    108c:	9f 07       	cpc	r25, r31
    108e:	11 f4       	brne	.+4      	; 0x1094 <xTaskCheckForTimeOut+0x32>
			{
				xReturn = pdFALSE;
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	4b c0       	rjmp	.+150    	; 0x112a <xTaskCheckForTimeOut+0xc8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	9b 81       	ldd	r25, Y+3	; 0x03
    1098:	fc 01       	movw	r30, r24
    109a:	90 81       	ld	r25, Z
    109c:	80 91 73 02 	lds	r24, 0x0273
    10a0:	98 17       	cp	r25, r24
    10a2:	79 f0       	breq	.+30     	; 0x10c2 <xTaskCheckForTimeOut+0x60>
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	9b 81       	ldd	r25, Y+3	; 0x03
    10a8:	fc 01       	movw	r30, r24
    10aa:	21 81       	ldd	r18, Z+1	; 0x01
    10ac:	32 81       	ldd	r19, Z+2	; 0x02
    10ae:	80 91 6b 02 	lds	r24, 0x026B
    10b2:	90 91 6c 02 	lds	r25, 0x026C
    10b6:	82 17       	cp	r24, r18
    10b8:	93 07       	cpc	r25, r19
    10ba:	18 f0       	brcs	.+6      	; 0x10c2 <xTaskCheckForTimeOut+0x60>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	34 c0       	rjmp	.+104    	; 0x112a <xTaskCheckForTimeOut+0xc8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    10c2:	20 91 6b 02 	lds	r18, 0x026B
    10c6:	30 91 6c 02 	lds	r19, 0x026C
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	9b 81       	ldd	r25, Y+3	; 0x03
    10ce:	fc 01       	movw	r30, r24
    10d0:	81 81       	ldd	r24, Z+1	; 0x01
    10d2:	92 81       	ldd	r25, Z+2	; 0x02
    10d4:	28 1b       	sub	r18, r24
    10d6:	39 0b       	sbc	r19, r25
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	9d 81       	ldd	r25, Y+5	; 0x05
    10dc:	fc 01       	movw	r30, r24
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	28 17       	cp	r18, r24
    10e4:	39 07       	cpc	r19, r25
    10e6:	f8 f4       	brcc	.+62     	; 0x1126 <xTaskCheckForTimeOut+0xc4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 81       	ld	r18, Z
    10f0:	31 81       	ldd	r19, Z+1	; 0x01
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	9b 81       	ldd	r25, Y+3	; 0x03
    10f6:	fc 01       	movw	r30, r24
    10f8:	41 81       	ldd	r20, Z+1	; 0x01
    10fa:	52 81       	ldd	r21, Z+2	; 0x02
    10fc:	80 91 6b 02 	lds	r24, 0x026B
    1100:	90 91 6c 02 	lds	r25, 0x026C
    1104:	ba 01       	movw	r22, r20
    1106:	68 1b       	sub	r22, r24
    1108:	79 0b       	sbc	r23, r25
    110a:	cb 01       	movw	r24, r22
    110c:	28 0f       	add	r18, r24
    110e:	39 1f       	adc	r19, r25
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	fc 01       	movw	r30, r24
    1116:	31 83       	std	Z+1, r19	; 0x01
    1118:	20 83       	st	Z, r18
			vTaskSetTimeOutState( pxTimeOut );
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	9b 81       	ldd	r25, Y+3	; 0x03
    111e:	0e 94 15 08 	call	0x102a	; 0x102a <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    1122:	19 82       	std	Y+1, r1	; 0x01
    1124:	02 c0       	rjmp	.+4      	; 0x112a <xTaskCheckForTimeOut+0xc8>
		}
		else
		{
			xReturn = pdTRUE;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	08 95       	ret

00001140 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 72 02 	sts	0x0272, r24
}
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	08 95       	ret

00001154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	1f 92       	push	r1
    115a:	1f 92       	push	r1
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	9a 83       	std	Y+2, r25	; 0x02
    1162:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    1164:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1168:	80 91 1e 02 	lds	r24, 0x021E
    116c:	82 30       	cpi	r24, 0x02	; 2
    116e:	18 f0       	brcs	.+6      	; 0x1176 <prvIdleTask+0x22>
			{
				taskYIELD();
    1170:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
    1174:	f7 cf       	rjmp	.-18     	; 0x1164 <prvIdleTask+0x10>
    1176:	f6 cf       	rjmp	.-20     	; 0x1164 <prvIdleTask+0x10>

00001178 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	29 97       	sbiw	r28, 0x09	; 9
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	9a 83       	std	Y+2, r25	; 0x02
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	7c 83       	std	Y+4, r23	; 0x04
    1196:	6b 83       	std	Y+3, r22	; 0x03
    1198:	4d 83       	std	Y+5, r20	; 0x05
    119a:	3f 83       	std	Y+7, r19	; 0x07
    119c:	2e 83       	std	Y+6, r18	; 0x06
    119e:	19 87       	std	Y+9, r17	; 0x09
    11a0:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	49 96       	adiw	r24, 0x19	; 25
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	40 e1       	ldi	r20, 0x10	; 16
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	b9 01       	movw	r22, r18
    11b2:	0e 94 ac 1a 	call	0x3558	; 0x3558 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	fc 01       	movw	r30, r24
    11bc:	10 a6       	std	Z+40, r1	; 0x28

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	84 30       	cpi	r24, 0x04	; 4
    11c2:	10 f0       	brcs	.+4      	; 0x11c8 <prvInitialiseTCBVariables+0x50>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	2d 81       	ldd	r18, Y+5	; 0x05
    11ce:	fc 01       	movw	r30, r24
    11d0:	26 8b       	std	Z+22, r18	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	2d 81       	ldd	r18, Y+5	; 0x05
    11d8:	fc 01       	movw	r30, r24
    11da:	21 a7       	std	Z+41, r18	; 0x29
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	02 96       	adiw	r24, 0x02	; 2
    11e2:	0e 94 34 11 	call	0x2268	; 0x2268 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	0c 96       	adiw	r24, 0x0c	; 12
    11ec:	0e 94 34 11 	call	0x2268	; 0x2268 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	29 81       	ldd	r18, Y+1	; 0x01
    11f6:	3a 81       	ldd	r19, Y+2	; 0x02
    11f8:	fc 01       	movw	r30, r24
    11fa:	31 87       	std	Z+9, r19	; 0x09
    11fc:	20 87       	std	Z+8, r18	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    11fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	24 e0       	ldi	r18, 0x04	; 4
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	28 1b       	sub	r18, r24
    120a:	39 0b       	sbc	r19, r25
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	fc 01       	movw	r30, r24
    1212:	35 87       	std	Z+13, r19	; 0x0d
    1214:	24 87       	std	Z+12, r18	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	29 81       	ldd	r18, Y+1	; 0x01
    121c:	3a 81       	ldd	r19, Y+2	; 0x02
    121e:	fc 01       	movw	r30, r24
    1220:	33 8b       	std	Z+19, r19	; 0x13
    1222:	22 8b       	std	Z+18, r18	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    1224:	29 96       	adiw	r28, 0x09	; 9
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	08 95       	ret

0000123a <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	1f 92       	push	r1
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    1244:	19 82       	std	Y+1, r1	; 0x01
    1246:	13 c0       	rjmp	.+38     	; 0x126e <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	c9 01       	movw	r24, r18
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	82 0f       	add	r24, r18
    125e:	93 1f       	adc	r25, r19
    1260:	82 5e       	subi	r24, 0xE2	; 226
    1262:	9d 4f       	sbci	r25, 0xFD	; 253
    1264:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	8f 5f       	subi	r24, 0xFF	; 255
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	50 f3       	brcs	.-44     	; 0x1248 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    1274:	82 e4       	ldi	r24, 0x42	; 66
    1276:	92 e0       	ldi	r25, 0x02	; 2
    1278:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    127c:	8b e4       	ldi	r24, 0x4B	; 75
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    1284:	88 e5       	ldi	r24, 0x58	; 88
    1286:	92 e0       	ldi	r25, 0x02	; 2
    1288:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    128c:	81 e6       	ldi	r24, 0x61	; 97
    128e:	92 e0       	ldi	r25, 0x02	; 2
    1290:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1294:	82 e4       	ldi	r24, 0x42	; 66
    1296:	92 e0       	ldi	r25, 0x02	; 2
    1298:	90 93 55 02 	sts	0x0255, r25
    129c:	80 93 54 02 	sts	0x0254, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    12a0:	8b e4       	ldi	r24, 0x4B	; 75
    12a2:	92 e0       	ldi	r25, 0x02	; 2
    12a4:	90 93 57 02 	sts	0x0257, r25
    12a8:	80 93 56 02 	sts	0x0256, r24
}
    12ac:	0f 90       	pop	r0
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	1f 92       	push	r1
    12c8:	1f 92       	push	r1
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	9a 83       	std	Y+2, r25	; 0x02
    12d0:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    12d2:	80 91 1c 02 	lds	r24, 0x021C
    12d6:	90 91 1d 02 	lds	r25, 0x021D
    12da:	29 81       	ldd	r18, Y+1	; 0x01
    12dc:	3a 81       	ldd	r19, Y+2	; 0x02
    12de:	fc 01       	movw	r30, r24
    12e0:	33 83       	std	Z+3, r19	; 0x03
    12e2:	22 83       	std	Z+2, r18	; 0x02

	if( xTimeToWake < xTickCount )
    12e4:	80 91 6b 02 	lds	r24, 0x026B
    12e8:	90 91 6c 02 	lds	r25, 0x026C
    12ec:	29 81       	ldd	r18, Y+1	; 0x01
    12ee:	3a 81       	ldd	r19, Y+2	; 0x02
    12f0:	28 17       	cp	r18, r24
    12f2:	39 07       	cpc	r19, r25
    12f4:	78 f4       	brcc	.+30     	; 0x1314 <prvAddCurrentTaskToDelayedList+0x52>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    12f6:	80 91 1c 02 	lds	r24, 0x021C
    12fa:	90 91 1d 02 	lds	r25, 0x021D
    12fe:	9c 01       	movw	r18, r24
    1300:	2e 5f       	subi	r18, 0xFE	; 254
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	80 91 56 02 	lds	r24, 0x0256
    1308:	90 91 57 02 	lds	r25, 0x0257
    130c:	b9 01       	movw	r22, r18
    130e:	0e 94 9d 11 	call	0x233a	; 0x233a <vListInsert>
    1312:	1d c0       	rjmp	.+58     	; 0x134e <prvAddCurrentTaskToDelayedList+0x8c>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1314:	80 91 1c 02 	lds	r24, 0x021C
    1318:	90 91 1d 02 	lds	r25, 0x021D
    131c:	9c 01       	movw	r18, r24
    131e:	2e 5f       	subi	r18, 0xFE	; 254
    1320:	3f 4f       	sbci	r19, 0xFF	; 255
    1322:	80 91 54 02 	lds	r24, 0x0254
    1326:	90 91 55 02 	lds	r25, 0x0255
    132a:	b9 01       	movw	r22, r18
    132c:	0e 94 9d 11 	call	0x233a	; 0x233a <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    1330:	80 91 00 02 	lds	r24, 0x0200
    1334:	90 91 01 02 	lds	r25, 0x0201
    1338:	29 81       	ldd	r18, Y+1	; 0x01
    133a:	3a 81       	ldd	r19, Y+2	; 0x02
    133c:	28 17       	cp	r18, r24
    133e:	39 07       	cpc	r19, r25
    1340:	30 f4       	brcc	.+12     	; 0x134e <prvAddCurrentTaskToDelayedList+0x8c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	90 93 01 02 	sts	0x0201, r25
    134a:	80 93 00 02 	sts	0x0200, r24
		}
	}
}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	08 95       	ret

00001358 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	00 d0       	rcall	.+0      	; 0x135e <prvAllocateTCBAndStack+0x6>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <prvAllocateTCBAndStack+0x8>
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	9c 83       	std	Y+4, r25	; 0x04
    1366:	8b 83       	std	Y+3, r24	; 0x03
    1368:	7e 83       	std	Y+6, r23	; 0x06
    136a:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    136c:	8a e2       	ldi	r24, 0x2A	; 42
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 65 15 	call	0x2aca	; 0x2aca <pvPortMalloc>
    1374:	9a 83       	std	Y+2, r25	; 0x02
    1376:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	51 f1       	breq	.+84     	; 0x13d4 <prvAllocateTCBAndStack+0x7c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	29 f4       	brne	.+10     	; 0x1392 <prvAllocateTCBAndStack+0x3a>
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	0e 94 65 15 	call	0x2aca	; 0x2aca <pvPortMalloc>
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <prvAllocateTCBAndStack+0x3e>
    1392:	8d 81       	ldd	r24, Y+5	; 0x05
    1394:	9e 81       	ldd	r25, Y+6	; 0x06
    1396:	29 81       	ldd	r18, Y+1	; 0x01
    1398:	3a 81       	ldd	r19, Y+2	; 0x02
    139a:	f9 01       	movw	r30, r18
    139c:	90 8f       	std	Z+24, r25	; 0x18
    139e:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	fc 01       	movw	r30, r24
    13a6:	87 89       	ldd	r24, Z+23	; 0x17
    13a8:	90 8d       	ldd	r25, Z+24	; 0x18
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	39 f4       	brne	.+14     	; 0x13bc <prvAllocateTCBAndStack+0x64>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <vPortFree>
			pxNewTCB = NULL;
    13b6:	1a 82       	std	Y+2, r1	; 0x02
    13b8:	19 82       	std	Y+1, r1	; 0x01
    13ba:	0c c0       	rjmp	.+24     	; 0x13d4 <prvAllocateTCBAndStack+0x7c>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	fc 01       	movw	r30, r24
    13c2:	87 89       	ldd	r24, Z+23	; 0x17
    13c4:	90 8d       	ldd	r25, Z+24	; 0x18
    13c6:	2b 81       	ldd	r18, Y+3	; 0x03
    13c8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ca:	a9 01       	movw	r20, r18
    13cc:	65 ea       	ldi	r22, 0xA5	; 165
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	0e 94 a5 1a 	call	0x354a	; 0x354a <memset>
		}
	}

	return pxNewTCB;
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    13d8:	26 96       	adiw	r28, 0x06	; 6
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	1f 92       	push	r1
    13f4:	1f 92       	push	r1
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	9a 83       	std	Y+2, r25	; 0x02
    13fc:	89 83       	std	Y+1, r24	; 0x01
	register unsigned short usCount = 0U;
    13fe:	00 e0       	ldi	r16, 0x00	; 0
    1400:	10 e0       	ldi	r17, 0x00	; 0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <usTaskCheckFreeStackSpace+0x2c>
		{
			pucStackByte -= portSTACK_GROWTH;
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
			usCount++;
    140e:	c8 01       	movw	r24, r16
    1410:	8c 01       	movw	r16, r24
    1412:	0f 5f       	subi	r16, 0xFF	; 255
    1414:	1f 4f       	sbci	r17, 0xFF	; 255

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	fc 01       	movw	r30, r24
    141c:	80 81       	ld	r24, Z
    141e:	85 3a       	cpi	r24, 0xA5	; 165
    1420:	89 f3       	breq	.-30     	; 0x1404 <usTaskCheckFreeStackSpace+0x1a>
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );

		return usCount;
    1422:	c8 01       	movw	r24, r16
	}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	27 97       	sbiw	r28, 0x07	; 7
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	9f 83       	std	Y+7, r25	; 0x07
    1448:	8e 83       	std	Y+6, r24	; 0x06
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    144a:	8e 81       	ldd	r24, Y+6	; 0x06
    144c:	9f 81       	ldd	r25, Y+7	; 0x07
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	29 f4       	brne	.+10     	; 0x145c <uxTaskGetStackHighWaterMark+0x2a>
    1452:	80 91 1c 02 	lds	r24, 0x021C
    1456:	90 91 1d 02 	lds	r25, 0x021D
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <uxTaskGetStackHighWaterMark+0x2e>
    145c:	8e 81       	ldd	r24, Y+6	; 0x06
    145e:	9f 81       	ldd	r25, Y+7	; 0x07
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	fc 01       	movw	r30, r24
    146a:	87 89       	ldd	r24, Z+23	; 0x17
    146c:	90 8d       	ldd	r25, Z+24	; 0x18
    146e:	9c 83       	std	Y+4, r25	; 0x04
    1470:	8b 83       	std	Y+3, r24	; 0x03
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	0e 94 f5 09 	call	0x13ea	; 0x13ea <usTaskCheckFreeStackSpace>
    147a:	8d 83       	std	Y+5, r24	; 0x05

		return uxReturn;
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
	}
    147e:	27 96       	adiw	r28, 0x07	; 7
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	08 95       	ret

00001490 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	1f 92       	push	r1
    1496:	1f 92       	push	r1
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    149c:	80 91 1c 02 	lds	r24, 0x021C
    14a0:	90 91 1d 02 	lds	r25, 0x021D
    14a4:	9a 83       	std	Y+2, r25	; 0x02
    14a6:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <vTaskPriorityInherit+0x6>
    14bc:	1f 92       	push	r1
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	9c 83       	std	Y+4, r25	; 0x04
    14c4:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	9a 83       	std	Y+2, r25	; 0x02
    14cc:	89 83       	std	Y+1, r24	; 0x01

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <vTaskPriorityInherit+0x22>
    14d6:	78 c0       	rjmp	.+240    	; 0x15c8 <vTaskPriorityInherit+0x112>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	fc 01       	movw	r30, r24
    14de:	26 89       	ldd	r18, Z+22	; 0x16
    14e0:	80 91 1c 02 	lds	r24, 0x021C
    14e4:	90 91 1d 02 	lds	r25, 0x021D
    14e8:	fc 01       	movw	r30, r24
    14ea:	86 89       	ldd	r24, Z+22	; 0x16
    14ec:	28 17       	cp	r18, r24
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <vTaskPriorityInherit+0x3c>
    14f0:	6b c0       	rjmp	.+214    	; 0x15c8 <vTaskPriorityInherit+0x112>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    14f2:	80 91 1c 02 	lds	r24, 0x021C
    14f6:	90 91 1d 02 	lds	r25, 0x021D
    14fa:	fc 01       	movw	r30, r24
    14fc:	86 89       	ldd	r24, Z+22	; 0x16
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	24 e0       	ldi	r18, 0x04	; 4
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	28 1b       	sub	r18, r24
    1508:	39 0b       	sbc	r19, r25
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	9a 81       	ldd	r25, Y+2	; 0x02
    150e:	fc 01       	movw	r30, r24
    1510:	35 87       	std	Z+13, r19	; 0x0d
    1512:	24 87       	std	Z+12, r18	; 0x0c

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	fc 01       	movw	r30, r24
    151a:	42 85       	ldd	r20, Z+10	; 0x0a
    151c:	53 85       	ldd	r21, Z+11	; 0x0b
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	9a 81       	ldd	r25, Y+2	; 0x02
    1522:	fc 01       	movw	r30, r24
    1524:	86 89       	ldd	r24, Z+22	; 0x16
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	c9 01       	movw	r24, r18
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	82 0f       	add	r24, r18
    153a:	93 1f       	adc	r25, r19
    153c:	82 5e       	subi	r24, 0xE2	; 226
    153e:	9d 4f       	sbci	r25, 0xFD	; 253
    1540:	48 17       	cp	r20, r24
    1542:	59 07       	cpc	r21, r25
    1544:	b9 f5       	brne	.+110    	; 0x15b4 <vTaskPriorityInherit+0xfe>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	02 96       	adiw	r24, 0x02	; 2
    154c:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1550:	80 91 1c 02 	lds	r24, 0x021C
    1554:	90 91 1d 02 	lds	r25, 0x021D
    1558:	fc 01       	movw	r30, r24
    155a:	26 89       	ldd	r18, Z+22	; 0x16
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	9a 81       	ldd	r25, Y+2	; 0x02
    1560:	fc 01       	movw	r30, r24
    1562:	26 8b       	std	Z+22, r18	; 0x16
					prvAddTaskToReadyQueue( pxTCB );
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	9a 81       	ldd	r25, Y+2	; 0x02
    1568:	fc 01       	movw	r30, r24
    156a:	96 89       	ldd	r25, Z+22	; 0x16
    156c:	80 91 6e 02 	lds	r24, 0x026E
    1570:	89 17       	cp	r24, r25
    1572:	30 f4       	brcc	.+12     	; 0x1580 <vTaskPriorityInherit+0xca>
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	fc 01       	movw	r30, r24
    157a:	86 89       	ldd	r24, Z+22	; 0x16
    157c:	80 93 6e 02 	sts	0x026E, r24
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	ac 01       	movw	r20, r24
    1586:	4e 5f       	subi	r20, 0xFE	; 254
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	fc 01       	movw	r30, r24
    1590:	86 89       	ldd	r24, Z+22	; 0x16
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	c9 01       	movw	r24, r18
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	82 0f       	add	r24, r18
    15a6:	93 1f       	adc	r25, r19
    15a8:	82 5e       	subi	r24, 0xE2	; 226
    15aa:	9d 4f       	sbci	r25, 0xFD	; 253
    15ac:	ba 01       	movw	r22, r20
    15ae:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>
    15b2:	0a c0       	rjmp	.+20     	; 0x15c8 <vTaskPriorityInherit+0x112>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    15b4:	80 91 1c 02 	lds	r24, 0x021C
    15b8:	90 91 1d 02 	lds	r25, 0x021D
    15bc:	fc 01       	movw	r30, r24
    15be:	26 89       	ldd	r18, Z+22	; 0x16
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	fc 01       	movw	r30, r24
    15c6:	26 8b       	std	Z+22, r18	; 0x16
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	08 95       	ret

000015d6 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	00 d0       	rcall	.+0      	; 0x15dc <vTaskPriorityDisinherit+0x6>
    15dc:	1f 92       	push	r1
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	9a 83       	std	Y+2, r25	; 0x02
    15ec:	89 83       	std	Y+1, r24	; 0x01

		if( pxMutexHolder != NULL )
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <vTaskPriorityDisinherit+0x22>
    15f6:	4e c0       	rjmp	.+156    	; 0x1694 <vTaskPriorityDisinherit+0xbe>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	fc 01       	movw	r30, r24
    15fe:	26 89       	ldd	r18, Z+22	; 0x16
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	fc 01       	movw	r30, r24
    1606:	81 a5       	ldd	r24, Z+41	; 0x29
    1608:	28 17       	cp	r18, r24
    160a:	09 f4       	brne	.+2      	; 0x160e <vTaskPriorityDisinherit+0x38>
    160c:	43 c0       	rjmp	.+134    	; 0x1694 <vTaskPriorityDisinherit+0xbe>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	02 96       	adiw	r24, 0x02	; 2
    1614:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	fc 01       	movw	r30, r24
    161e:	21 a5       	ldd	r18, Z+41	; 0x29
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	fc 01       	movw	r30, r24
    1626:	26 8b       	std	Z+22, r18	; 0x16
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	fc 01       	movw	r30, r24
    162e:	86 89       	ldd	r24, Z+22	; 0x16
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	24 e0       	ldi	r18, 0x04	; 4
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	28 1b       	sub	r18, r24
    163a:	39 0b       	sbc	r19, r25
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	9a 81       	ldd	r25, Y+2	; 0x02
    1640:	fc 01       	movw	r30, r24
    1642:	35 87       	std	Z+13, r19	; 0x0d
    1644:	24 87       	std	Z+12, r18	; 0x0c
				prvAddTaskToReadyQueue( pxTCB );
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	fc 01       	movw	r30, r24
    164c:	96 89       	ldd	r25, Z+22	; 0x16
    164e:	80 91 6e 02 	lds	r24, 0x026E
    1652:	89 17       	cp	r24, r25
    1654:	30 f4       	brcc	.+12     	; 0x1662 <vTaskPriorityDisinherit+0x8c>
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	fc 01       	movw	r30, r24
    165c:	86 89       	ldd	r24, Z+22	; 0x16
    165e:	80 93 6e 02 	sts	0x026E, r24
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	9a 81       	ldd	r25, Y+2	; 0x02
    1666:	ac 01       	movw	r20, r24
    1668:	4e 5f       	subi	r20, 0xFE	; 254
    166a:	5f 4f       	sbci	r21, 0xFF	; 255
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	fc 01       	movw	r30, r24
    1672:	86 89       	ldd	r24, Z+22	; 0x16
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	c9 01       	movw	r24, r18
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	82 0f       	add	r24, r18
    1688:	93 1f       	adc	r25, r19
    168a:	82 5e       	subi	r24, 0xE2	; 226
    168c:	9d 4f       	sbci	r25, 0xFD	; 253
    168e:	ba 01       	movw	r22, r20
    1690:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>
			}
		}
	}
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	08 95       	ret

000016a2 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <xQueueGenericReset+0x6>
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	6b 83       	std	Y+3, r22	; 0x03
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	9a 81       	ldd	r25, Y+2	; 0x02
    16bc:	fc 01       	movw	r30, r24
    16be:	20 81       	ld	r18, Z
    16c0:	31 81       	ldd	r19, Z+1	; 0x01
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	9a 81       	ldd	r25, Y+2	; 0x02
    16c6:	fc 01       	movw	r30, r24
    16c8:	83 8d       	ldd	r24, Z+27	; 0x1b
    16ca:	68 2f       	mov	r22, r24
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	fc 01       	movw	r30, r24
    16d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    16d6:	48 2f       	mov	r20, r24
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	64 9f       	mul	r22, r20
    16dc:	c0 01       	movw	r24, r0
    16de:	65 9f       	mul	r22, r21
    16e0:	90 0d       	add	r25, r0
    16e2:	74 9f       	mul	r23, r20
    16e4:	90 0d       	add	r25, r0
    16e6:	11 24       	eor	r1, r1
    16e8:	28 0f       	add	r18, r24
    16ea:	39 1f       	adc	r19, r25
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	9a 81       	ldd	r25, Y+2	; 0x02
    16f0:	fc 01       	movw	r30, r24
    16f2:	33 83       	std	Z+3, r19	; 0x03
    16f4:	22 83       	std	Z+2, r18	; 0x02
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	fc 01       	movw	r30, r24
    16fc:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	fc 01       	movw	r30, r24
    1704:	20 81       	ld	r18, Z
    1706:	31 81       	ldd	r19, Z+1	; 0x01
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	fc 01       	movw	r30, r24
    170e:	35 83       	std	Z+5, r19	; 0x05
    1710:	24 83       	std	Z+4, r18	; 0x04
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	fc 01       	movw	r30, r24
    1718:	20 81       	ld	r18, Z
    171a:	31 81       	ldd	r19, Z+1	; 0x01
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	9a 81       	ldd	r25, Y+2	; 0x02
    1720:	fc 01       	movw	r30, r24
    1722:	83 8d       	ldd	r24, Z+27	; 0x1b
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	bc 01       	movw	r22, r24
    172a:	61 50       	subi	r22, 0x01	; 1
    172c:	71 09       	sbc	r23, r1
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	9a 81       	ldd	r25, Y+2	; 0x02
    1732:	fc 01       	movw	r30, r24
    1734:	84 8d       	ldd	r24, Z+28	; 0x1c
    1736:	48 2f       	mov	r20, r24
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	64 9f       	mul	r22, r20
    173c:	c0 01       	movw	r24, r0
    173e:	65 9f       	mul	r22, r21
    1740:	90 0d       	add	r25, r0
    1742:	74 9f       	mul	r23, r20
    1744:	90 0d       	add	r25, r0
    1746:	11 24       	eor	r1, r1
    1748:	28 0f       	add	r18, r24
    174a:	39 1f       	adc	r19, r25
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	fc 01       	movw	r30, r24
    1752:	37 83       	std	Z+7, r19	; 0x07
    1754:	26 83       	std	Z+6, r18	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	2f ef       	ldi	r18, 0xFF	; 255
    175c:	fc 01       	movw	r30, r24
    175e:	25 8f       	std	Z+29, r18	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	2f ef       	ldi	r18, 0xFF	; 255
    1766:	fc 01       	movw	r30, r24
    1768:	26 8f       	std	Z+30, r18	; 0x1e

		if( xNewQueue == pdFALSE )
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	88 23       	and	r24, r24
    176e:	81 f4       	brne	.+32     	; 0x1790 <xQueueGenericReset+0xee>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	fc 01       	movw	r30, r24
    1776:	80 85       	ldd	r24, Z+8	; 0x08
    1778:	88 23       	and	r24, r24
    177a:	a1 f0       	breq	.+40     	; 0x17a4 <xQueueGenericReset+0x102>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	08 96       	adiw	r24, 0x08	; 8
    1782:	0e 94 ab 07 	call	0xf56	; 0xf56 <xTaskRemoveFromEventList>
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	69 f4       	brne	.+26     	; 0x17a4 <xQueueGenericReset+0x102>
				{
					portYIELD_WITHIN_API();
    178a:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
    178e:	0a c0       	rjmp	.+20     	; 0x17a4 <xQueueGenericReset+0x102>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	08 96       	adiw	r24, 0x08	; 8
    1796:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	9a 81       	ldd	r25, Y+2	; 0x02
    179e:	41 96       	adiw	r24, 0x11	; 17
    17a0:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	08 95       	ret

000017b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	29 97       	sbiw	r28, 0x09	; 9
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	8f 83       	std	Y+7, r24	; 0x07
    17cc:	68 87       	std	Y+8, r22	; 0x08
    17ce:	49 87       	std	Y+9, r20	; 0x09
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    17d0:	1a 82       	std	Y+2, r1	; 0x02
    17d2:	19 82       	std	Y+1, r1	; 0x01
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    17d4:	8f 81       	ldd	r24, Y+7	; 0x07
    17d6:	88 23       	and	r24, r24
    17d8:	09 f4       	brne	.+2      	; 0x17dc <xQueueGenericCreate+0x26>
    17da:	43 c0       	rjmp	.+134    	; 0x1862 <xQueueGenericCreate+0xac>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    17dc:	8f e1       	ldi	r24, 0x1F	; 31
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 65 15 	call	0x2aca	; 0x2aca <pvPortMalloc>
    17e4:	9c 83       	std	Y+4, r25	; 0x04
    17e6:	8b 83       	std	Y+3, r24	; 0x03
		if( pxNewQueue != NULL )
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	9c 81       	ldd	r25, Y+4	; 0x04
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	c9 f1       	breq	.+114    	; 0x1862 <xQueueGenericCreate+0xac>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    17f0:	8f 81       	ldd	r24, Y+7	; 0x07
    17f2:	48 2f       	mov	r20, r24
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	88 85       	ldd	r24, Y+8	; 0x08
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	42 9f       	mul	r20, r18
    17fe:	c0 01       	movw	r24, r0
    1800:	43 9f       	mul	r20, r19
    1802:	90 0d       	add	r25, r0
    1804:	52 9f       	mul	r21, r18
    1806:	90 0d       	add	r25, r0
    1808:	11 24       	eor	r1, r1
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	9e 81       	ldd	r25, Y+6	; 0x06
    1814:	0e 94 65 15 	call	0x2aca	; 0x2aca <pvPortMalloc>
    1818:	9c 01       	movw	r18, r24
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	9c 81       	ldd	r25, Y+4	; 0x04
    181e:	fc 01       	movw	r30, r24
    1820:	31 83       	std	Z+1, r19	; 0x01
    1822:	20 83       	st	Z, r18
			if( pxNewQueue->pcHead != NULL )
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	fc 01       	movw	r30, r24
    182a:	80 81       	ld	r24, Z
    182c:	91 81       	ldd	r25, Z+1	; 0x01
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	a1 f0       	breq	.+40     	; 0x185a <xQueueGenericCreate+0xa4>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	2f 81       	ldd	r18, Y+7	; 0x07
    1838:	fc 01       	movw	r30, r24
    183a:	23 8f       	std	Z+27, r18	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	28 85       	ldd	r18, Y+8	; 0x08
    1842:	fc 01       	movw	r30, r24
    1844:	24 8f       	std	Z+28, r18	; 0x1c
				xQueueGenericReset( pxNewQueue, pdTRUE );
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	9a 83       	std	Y+2, r25	; 0x02
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	04 c0       	rjmp	.+8      	; 0x1862 <xQueueGenericCreate+0xac>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1866:	29 96       	adiw	r28, 0x09	; 9
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	08 95       	ret

00001878 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	00 d0       	rcall	.+0      	; 0x187e <xQueueCreateMutex+0x6>
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	8b 83       	std	Y+3, r24	; 0x03
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1884:	8f e1       	ldi	r24, 0x1F	; 31
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 65 15 	call	0x2aca	; 0x2aca <pvPortMalloc>
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	f1 f1       	breq	.+124    	; 0x1914 <xQueueCreateMutex+0x9c>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	fc 01       	movw	r30, r24
    189e:	13 82       	std	Z+3, r1	; 0x03
    18a0:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	fc 01       	movw	r30, r24
    18a8:	11 82       	std	Z+1, r1	; 0x01
    18aa:	10 82       	st	Z, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	fc 01       	movw	r30, r24
    18b2:	15 82       	std	Z+5, r1	; 0x05
    18b4:	14 82       	std	Z+4, r1	; 0x04
			pxNewQueue->pcReadFrom = NULL;
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	fc 01       	movw	r30, r24
    18bc:	17 82       	std	Z+7, r1	; 0x07
    18be:	16 82       	std	Z+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	fc 01       	movw	r30, r24
    18c6:	12 8e       	std	Z+26, r1	; 0x1a
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	9a 81       	ldd	r25, Y+2	; 0x02
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	fc 01       	movw	r30, r24
    18d0:	23 8f       	std	Z+27, r18	; 0x1b
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	fc 01       	movw	r30, r24
    18d8:	14 8e       	std	Z+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	2f ef       	ldi	r18, 0xFF	; 255
    18e0:	fc 01       	movw	r30, r24
    18e2:	25 8f       	std	Z+29, r18	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	9a 81       	ldd	r25, Y+2	; 0x02
    18e8:	2f ef       	ldi	r18, 0xFF	; 255
    18ea:	fc 01       	movw	r30, r24
    18ec:	26 8f       	std	Z+30, r18	; 0x1e
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	9a 81       	ldd	r25, Y+2	; 0x02
    18f2:	08 96       	adiw	r24, 0x08	; 8
    18f4:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	41 96       	adiw	r24, 0x11	; 17
    18fe:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	0e 94 92 0c 	call	0x1924	; 0x1924 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	08 95       	ret

00001924 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	2b 97       	sbiw	r28, 0x0b	; 11
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	8d 83       	std	Y+5, r24	; 0x05
    193c:	78 87       	std	Y+8, r23	; 0x08
    193e:	6f 83       	std	Y+7, r22	; 0x07
    1940:	5a 87       	std	Y+10, r21	; 0x0a
    1942:	49 87       	std	Y+9, r20	; 0x09
    1944:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1946:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	9e 81       	ldd	r25, Y+6	; 0x06
    1952:	fc 01       	movw	r30, r24
    1954:	22 8d       	ldd	r18, Z+26	; 0x1a
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	fc 01       	movw	r30, r24
    195c:	83 8d       	ldd	r24, Z+27	; 0x1b
    195e:	28 17       	cp	r18, r24
    1960:	d8 f4       	brcc	.+54     	; 0x1998 <xQueueGenericSend+0x74>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1962:	2f 81       	ldd	r18, Y+7	; 0x07
    1964:	38 85       	ldd	r19, Y+8	; 0x08
    1966:	8d 81       	ldd	r24, Y+5	; 0x05
    1968:	9e 81       	ldd	r25, Y+6	; 0x06
    196a:	4b 85       	ldd	r20, Y+11	; 0x0b
    196c:	b9 01       	movw	r22, r18
    196e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	9e 81       	ldd	r25, Y+6	; 0x06
    1976:	fc 01       	movw	r30, r24
    1978:	81 89       	ldd	r24, Z+17	; 0x11
    197a:	88 23       	and	r24, r24
    197c:	49 f0       	breq	.+18     	; 0x1990 <xQueueGenericSend+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	41 96       	adiw	r24, 0x11	; 17
    1984:	0e 94 ab 07 	call	0xf56	; 0xf56 <xTaskRemoveFromEventList>
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	11 f4       	brne	.+4      	; 0x1990 <xQueueGenericSend+0x6c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    198c:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    1990:	0f 90       	pop	r0
    1992:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	61 c0       	rjmp	.+194    	; 0x1a5a <xQueueGenericSend+0x136>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1998:	89 85       	ldd	r24, Y+9	; 0x09
    199a:	9a 85       	ldd	r25, Y+10	; 0x0a
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	21 f4       	brne	.+8      	; 0x19a8 <xQueueGenericSend+0x84>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    19a0:	0f 90       	pop	r0
    19a2:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	59 c0       	rjmp	.+178    	; 0x1a5a <xQueueGenericSend+0x136>
				}
				else if( xEntryTimeSet == pdFALSE )
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	88 23       	and	r24, r24
    19ac:	31 f4       	brne	.+12     	; 0x19ba <xQueueGenericSend+0x96>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    19ae:	ce 01       	movw	r24, r28
    19b0:	02 96       	adiw	r24, 0x02	; 2
    19b2:	0e 94 15 08 	call	0x102a	; 0x102a <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    19ba:	0f 90       	pop	r0
    19bc:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    19be:	0e 94 4e 05 	call	0xa9c	; 0xa9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	0f 92       	push	r0
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	fc 01       	movw	r30, r24
    19ce:	85 8d       	ldd	r24, Z+29	; 0x1d
    19d0:	8f 3f       	cpi	r24, 0xFF	; 255
    19d2:	21 f4       	brne	.+8      	; 0x19dc <xQueueGenericSend+0xb8>
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	fc 01       	movw	r30, r24
    19da:	15 8e       	std	Z+29, r1	; 0x1d
    19dc:	8d 81       	ldd	r24, Y+5	; 0x05
    19de:	9e 81       	ldd	r25, Y+6	; 0x06
    19e0:	fc 01       	movw	r30, r24
    19e2:	86 8d       	ldd	r24, Z+30	; 0x1e
    19e4:	8f 3f       	cpi	r24, 0xFF	; 255
    19e6:	21 f4       	brne	.+8      	; 0x19f0 <xQueueGenericSend+0xcc>
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	fc 01       	movw	r30, r24
    19ee:	16 8e       	std	Z+30, r1	; 0x1e
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    19f4:	9e 01       	movw	r18, r28
    19f6:	27 5f       	subi	r18, 0xF7	; 247
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	ce 01       	movw	r24, r28
    19fc:	02 96       	adiw	r24, 0x02	; 2
    19fe:	b9 01       	movw	r22, r18
    1a00:	0e 94 31 08 	call	0x1062	; 0x1062 <xTaskCheckForTimeOut>
    1a04:	88 23       	and	r24, r24
    1a06:	01 f5       	brne	.+64     	; 0x1a48 <xQueueGenericSend+0x124>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	0e 94 c3 10 	call	0x2186	; 0x2186 <prvIsQueueFull>
    1a10:	88 23       	and	r24, r24
    1a12:	99 f0       	breq	.+38     	; 0x1a3a <xQueueGenericSend+0x116>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1a14:	29 85       	ldd	r18, Y+9	; 0x09
    1a16:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	08 96       	adiw	r24, 0x08	; 8
    1a1e:	b9 01       	movw	r22, r18
    1a20:	0e 94 66 07 	call	0xecc	; 0xecc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
    1a26:	9e 81       	ldd	r25, Y+6	; 0x06
    1a28:	0e 94 2b 10 	call	0x2056	; 0x2056 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1a2c:	0e 94 5a 05 	call	0xab4	; 0xab4 <xTaskResumeAll>
    1a30:	88 23       	and	r24, r24
    1a32:	91 f4       	brne	.+36     	; 0x1a58 <xQueueGenericSend+0x134>
				{
					portYIELD_WITHIN_API();
    1a34:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <xQueueGenericSend+0x134>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	0e 94 2b 10 	call	0x2056	; 0x2056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1a42:	0e 94 5a 05 	call	0xab4	; 0xab4 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    1a46:	80 cf       	rjmp	.-256    	; 0x1948 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	0e 94 2b 10 	call	0x2056	; 0x2056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1a50:	0e 94 5a 05 	call	0xab4	; 0xab4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <xQueueGenericSend+0x136>
		}
	}
    1a58:	77 cf       	rjmp	.-274    	; 0x1948 <xQueueGenericSend+0x24>
}
    1a5a:	2b 96       	adiw	r28, 0x0b	; 11
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	08 95       	ret

00001a6c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	29 97       	sbiw	r28, 0x09	; 9
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	8b 83       	std	Y+3, r24	; 0x03
    1a84:	7e 83       	std	Y+6, r23	; 0x06
    1a86:	6d 83       	std	Y+5, r22	; 0x05
    1a88:	58 87       	std	Y+8, r21	; 0x08
    1a8a:	4f 83       	std	Y+7, r20	; 0x07
    1a8c:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1a8e:	1a 82       	std	Y+2, r1	; 0x02
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	fc 01       	movw	r30, r24
    1a96:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1aa0:	28 17       	cp	r18, r24
    1aa2:	90 f5       	brcc	.+100    	; 0x1b08 <xQueueGenericSendFromISR+0x9c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1aa4:	2d 81       	ldd	r18, Y+5	; 0x05
    1aa6:	3e 81       	ldd	r19, Y+6	; 0x06
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	49 85       	ldd	r20, Y+9	; 0x09
    1aae:	b9 01       	movw	r22, r18
    1ab0:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	fc 01       	movw	r30, r24
    1aba:	86 8d       	ldd	r24, Z+30	; 0x1e
    1abc:	8f 3f       	cpi	r24, 0xFF	; 255
    1abe:	b9 f4       	brne	.+46     	; 0x1aee <xQueueGenericSendFromISR+0x82>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	81 89       	ldd	r24, Z+17	; 0x11
    1ac8:	88 23       	and	r24, r24
    1aca:	d9 f0       	breq	.+54     	; 0x1b02 <xQueueGenericSendFromISR+0x96>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	41 96       	adiw	r24, 0x11	; 17
    1ad2:	0e 94 ab 07 	call	0xf56	; 0xf56 <xTaskRemoveFromEventList>
    1ad6:	88 23       	and	r24, r24
    1ad8:	a1 f0       	breq	.+40     	; 0x1b02 <xQueueGenericSendFromISR+0x96>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
    1ada:	8f 81       	ldd	r24, Y+7	; 0x07
    1adc:	98 85       	ldd	r25, Y+8	; 0x08
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	81 f0       	breq	.+32     	; 0x1b02 <xQueueGenericSendFromISR+0x96>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1ae2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae4:	98 85       	ldd	r25, Y+8	; 0x08
    1ae6:	21 e0       	ldi	r18, 0x01	; 1
    1ae8:	fc 01       	movw	r30, r24
    1aea:	20 83       	st	Z, r18
    1aec:	0a c0       	rjmp	.+20     	; 0x1b02 <xQueueGenericSendFromISR+0x96>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	fc 01       	movw	r30, r24
    1af4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1af6:	21 e0       	ldi	r18, 0x01	; 1
    1af8:	28 0f       	add	r18, r24
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	9c 81       	ldd	r25, Y+4	; 0x04
    1afe:	fc 01       	movw	r30, r24
    1b00:	26 8f       	std	Z+30, r18	; 0x1e
			}

			xReturn = pdPASS;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1b08:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b0c:	29 96       	adiw	r28, 0x09	; 9
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	08 95       	ret

00001b1e <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	2d 97       	sbiw	r28, 0x0d	; 13
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	98 87       	std	Y+8, r25	; 0x08
    1b34:	8f 83       	std	Y+7, r24	; 0x07
    1b36:	7a 87       	std	Y+10, r23	; 0x0a
    1b38:	69 87       	std	Y+9, r22	; 0x09
    1b3a:	5c 87       	std	Y+12, r21	; 0x0c
    1b3c:	4b 87       	std	Y+11, r20	; 0x0b
    1b3e:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1b40:	19 82       	std	Y+1, r1	; 0x01
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1b48:	8f 81       	ldd	r24, Y+7	; 0x07
    1b4a:	98 85       	ldd	r25, Y+8	; 0x08
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b50:	88 23       	and	r24, r24
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <xQueueGenericReceive+0x38>
    1b54:	54 c0       	rjmp	.+168    	; 0x1bfe <xQueueGenericReceive+0xe0>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1b56:	8f 81       	ldd	r24, Y+7	; 0x07
    1b58:	98 85       	ldd	r25, Y+8	; 0x08
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	86 81       	ldd	r24, Z+6	; 0x06
    1b5e:	97 81       	ldd	r25, Z+7	; 0x07
    1b60:	9b 83       	std	Y+3, r25	; 0x03
    1b62:	8a 83       	std	Y+2, r24	; 0x02

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1b64:	29 85       	ldd	r18, Y+9	; 0x09
    1b66:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b68:	8f 81       	ldd	r24, Y+7	; 0x07
    1b6a:	98 85       	ldd	r25, Y+8	; 0x08
    1b6c:	b9 01       	movw	r22, r18
    1b6e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1b72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b74:	88 23       	and	r24, r24
    1b76:	49 f5       	brne	.+82     	; 0x1bca <xQueueGenericReceive+0xac>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1b78:	8f 81       	ldd	r24, Y+7	; 0x07
    1b7a:	98 85       	ldd	r25, Y+8	; 0x08
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b80:	2f ef       	ldi	r18, 0xFF	; 255
    1b82:	28 0f       	add	r18, r24
    1b84:	8f 81       	ldd	r24, Y+7	; 0x07
    1b86:	98 85       	ldd	r25, Y+8	; 0x08
    1b88:	fc 01       	movw	r30, r24
    1b8a:	22 8f       	std	Z+26, r18	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1b8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b8e:	98 85       	ldd	r25, Y+8	; 0x08
    1b90:	fc 01       	movw	r30, r24
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	41 f4       	brne	.+16     	; 0x1baa <xQueueGenericReceive+0x8c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    1b9a:	0e 94 48 0a 	call	0x1490	; 0x1490 <xTaskGetCurrentTaskHandle>
    1b9e:	9c 01       	movw	r18, r24
    1ba0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba2:	98 85       	ldd	r25, Y+8	; 0x08
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	33 83       	std	Z+3, r19	; 0x03
    1ba8:	22 83       	std	Z+2, r18	; 0x02
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1baa:	8f 81       	ldd	r24, Y+7	; 0x07
    1bac:	98 85       	ldd	r25, Y+8	; 0x08
    1bae:	fc 01       	movw	r30, r24
    1bb0:	80 85       	ldd	r24, Z+8	; 0x08
    1bb2:	88 23       	and	r24, r24
    1bb4:	01 f1       	breq	.+64     	; 0x1bf6 <xQueueGenericReceive+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1bb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb8:	98 85       	ldd	r25, Y+8	; 0x08
    1bba:	08 96       	adiw	r24, 0x08	; 8
    1bbc:	0e 94 ab 07 	call	0xf56	; 0xf56 <xTaskRemoveFromEventList>
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	c9 f4       	brne	.+50     	; 0x1bf6 <xQueueGenericReceive+0xd8>
						{
							portYIELD_WITHIN_API();
    1bc4:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
    1bc8:	16 c0       	rjmp	.+44     	; 0x1bf6 <xQueueGenericReceive+0xd8>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    1bca:	8f 81       	ldd	r24, Y+7	; 0x07
    1bcc:	98 85       	ldd	r25, Y+8	; 0x08
    1bce:	2a 81       	ldd	r18, Y+2	; 0x02
    1bd0:	3b 81       	ldd	r19, Y+3	; 0x03
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	37 83       	std	Z+7, r19	; 0x07
    1bd6:	26 83       	std	Z+6, r18	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1bd8:	8f 81       	ldd	r24, Y+7	; 0x07
    1bda:	98 85       	ldd	r25, Y+8	; 0x08
    1bdc:	fc 01       	movw	r30, r24
    1bde:	81 89       	ldd	r24, Z+17	; 0x11
    1be0:	88 23       	and	r24, r24
    1be2:	49 f0       	breq	.+18     	; 0x1bf6 <xQueueGenericReceive+0xd8>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1be4:	8f 81       	ldd	r24, Y+7	; 0x07
    1be6:	98 85       	ldd	r25, Y+8	; 0x08
    1be8:	41 96       	adiw	r24, 0x11	; 17
    1bea:	0e 94 ab 07 	call	0xf56	; 0xf56 <xTaskRemoveFromEventList>
    1bee:	88 23       	and	r24, r24
    1bf0:	11 f0       	breq	.+4      	; 0x1bf6 <xQueueGenericReceive+0xd8>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1bf2:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
    1bf6:	0f 90       	pop	r0
    1bf8:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	74 c0       	rjmp	.+232    	; 0x1ce6 <xQueueGenericReceive+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1bfe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c00:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	21 f4       	brne	.+8      	; 0x1c0e <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1c06:	0f 90       	pop	r0
    1c08:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	6c c0       	rjmp	.+216    	; 0x1ce6 <xQueueGenericReceive+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	88 23       	and	r24, r24
    1c12:	31 f4       	brne	.+12     	; 0x1c20 <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1c14:	ce 01       	movw	r24, r28
    1c16:	04 96       	adiw	r24, 0x04	; 4
    1c18:	0e 94 15 08 	call	0x102a	; 0x102a <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    1c20:	0f 90       	pop	r0
    1c22:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1c24:	0e 94 4e 05 	call	0xa9c	; 0xa9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	0f 92       	push	r0
    1c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c30:	98 85       	ldd	r25, Y+8	; 0x08
    1c32:	fc 01       	movw	r30, r24
    1c34:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c36:	8f 3f       	cpi	r24, 0xFF	; 255
    1c38:	21 f4       	brne	.+8      	; 0x1c42 <xQueueGenericReceive+0x124>
    1c3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c3c:	98 85       	ldd	r25, Y+8	; 0x08
    1c3e:	fc 01       	movw	r30, r24
    1c40:	15 8e       	std	Z+29, r1	; 0x1d
    1c42:	8f 81       	ldd	r24, Y+7	; 0x07
    1c44:	98 85       	ldd	r25, Y+8	; 0x08
    1c46:	fc 01       	movw	r30, r24
    1c48:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c4a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c4c:	21 f4       	brne	.+8      	; 0x1c56 <xQueueGenericReceive+0x138>
    1c4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c50:	98 85       	ldd	r25, Y+8	; 0x08
    1c52:	fc 01       	movw	r30, r24
    1c54:	16 8e       	std	Z+30, r1	; 0x1e
    1c56:	0f 90       	pop	r0
    1c58:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1c5a:	9e 01       	movw	r18, r28
    1c5c:	25 5f       	subi	r18, 0xF5	; 245
    1c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c60:	ce 01       	movw	r24, r28
    1c62:	04 96       	adiw	r24, 0x04	; 4
    1c64:	b9 01       	movw	r22, r18
    1c66:	0e 94 31 08 	call	0x1062	; 0x1062 <xTaskCheckForTimeOut>
    1c6a:	88 23       	and	r24, r24
    1c6c:	99 f5       	brne	.+102    	; 0x1cd4 <xQueueGenericReceive+0x1b6>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c70:	98 85       	ldd	r25, Y+8	; 0x08
    1c72:	0e 94 90 10 	call	0x2120	; 0x2120 <prvIsQueueEmpty>
    1c76:	88 23       	and	r24, r24
    1c78:	31 f1       	breq	.+76     	; 0x1cc6 <xQueueGenericReceive+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1c7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c7c:	98 85       	ldd	r25, Y+8	; 0x08
    1c7e:	fc 01       	movw	r30, r24
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	61 f4       	brne	.+24     	; 0x1ca0 <xQueueGenericReceive+0x182>
					{
						portENTER_CRITICAL();
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1c8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c90:	98 85       	ldd	r25, Y+8	; 0x08
    1c92:	fc 01       	movw	r30, r24
    1c94:	82 81       	ldd	r24, Z+2	; 0x02
    1c96:	93 81       	ldd	r25, Z+3	; 0x03
    1c98:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1ca0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ca2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ca4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca6:	98 85       	ldd	r25, Y+8	; 0x08
    1ca8:	41 96       	adiw	r24, 0x11	; 17
    1caa:	b9 01       	movw	r22, r18
    1cac:	0e 94 66 07 	call	0xecc	; 0xecc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1cb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb2:	98 85       	ldd	r25, Y+8	; 0x08
    1cb4:	0e 94 2b 10 	call	0x2056	; 0x2056 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1cb8:	0e 94 5a 05 	call	0xab4	; 0xab4 <xTaskResumeAll>
    1cbc:	88 23       	and	r24, r24
    1cbe:	91 f4       	brne	.+36     	; 0x1ce4 <xQueueGenericReceive+0x1c6>
				{
					portYIELD_WITHIN_API();
    1cc0:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <vPortYield>
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <xQueueGenericReceive+0x1c6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc8:	98 85       	ldd	r25, Y+8	; 0x08
    1cca:	0e 94 2b 10 	call	0x2056	; 0x2056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1cce:	0e 94 5a 05 	call	0xab4	; 0xab4 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    1cd2:	37 cf       	rjmp	.-402    	; 0x1b42 <xQueueGenericReceive+0x24>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1cd4:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd6:	98 85       	ldd	r25, Y+8	; 0x08
    1cd8:	0e 94 2b 10 	call	0x2056	; 0x2056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1cdc:	0e 94 5a 05 	call	0xab4	; 0xab4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <xQueueGenericReceive+0x1c8>
		}
	}
    1ce4:	2e cf       	rjmp	.-420    	; 0x1b42 <xQueueGenericReceive+0x24>
}
    1ce6:	2d 96       	adiw	r28, 0x0d	; 13
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	08 95       	ret

00001cf8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	28 97       	sbiw	r28, 0x08	; 8
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	9c 83       	std	Y+4, r25	; 0x04
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
    1d10:	7e 83       	std	Y+6, r23	; 0x06
    1d12:	6d 83       	std	Y+5, r22	; 0x05
    1d14:	58 87       	std	Y+8, r21	; 0x08
    1d16:	4f 83       	std	Y+7, r20	; 0x07
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1d18:	1a 82       	std	Y+2, r1	; 0x02
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	fc 01       	movw	r30, r24
    1d20:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d22:	88 23       	and	r24, r24
    1d24:	d9 f1       	breq	.+118    	; 0x1d9c <xQueueReceiveFromISR+0xa4>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1d26:	2d 81       	ldd	r18, Y+5	; 0x05
    1d28:	3e 81       	ldd	r19, Y+6	; 0x06
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	b9 01       	movw	r22, r18
    1d30:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	fc 01       	movw	r30, r24
    1d3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d3c:	2f ef       	ldi	r18, 0xFF	; 255
    1d3e:	28 0f       	add	r18, r24
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	fc 01       	movw	r30, r24
    1d46:	22 8f       	std	Z+26, r18	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d50:	8f 3f       	cpi	r24, 0xFF	; 255
    1d52:	b9 f4       	brne	.+46     	; 0x1d82 <xQueueReceiveFromISR+0x8a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	fc 01       	movw	r30, r24
    1d5a:	80 85       	ldd	r24, Z+8	; 0x08
    1d5c:	88 23       	and	r24, r24
    1d5e:	d9 f0       	breq	.+54     	; 0x1d96 <xQueueReceiveFromISR+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	08 96       	adiw	r24, 0x08	; 8
    1d66:	0e 94 ab 07 	call	0xf56	; 0xf56 <xTaskRemoveFromEventList>
    1d6a:	88 23       	and	r24, r24
    1d6c:	a1 f0       	breq	.+40     	; 0x1d96 <xQueueReceiveFromISR+0x9e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1d6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d70:	98 85       	ldd	r25, Y+8	; 0x08
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	81 f0       	breq	.+32     	; 0x1d96 <xQueueReceiveFromISR+0x9e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1d76:	8f 81       	ldd	r24, Y+7	; 0x07
    1d78:	98 85       	ldd	r25, Y+8	; 0x08
    1d7a:	21 e0       	ldi	r18, 0x01	; 1
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	20 83       	st	Z, r18
    1d80:	0a c0       	rjmp	.+20     	; 0x1d96 <xQueueReceiveFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	fc 01       	movw	r30, r24
    1d88:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d8a:	21 e0       	ldi	r18, 0x01	; 1
    1d8c:	28 0f       	add	r18, r24
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	fc 01       	movw	r30, r24
    1d94:	25 8f       	std	Z+29, r18	; 0x1d
			}

			xReturn = pdPASS;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <xQueueReceiveFromISR+0xa6>
		}
		else
		{
			xReturn = pdFAIL;
    1d9c:	19 82       	std	Y+1, r1	; 0x01
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da0:	28 96       	adiw	r28, 0x08	; 8
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	08 95       	ret

00001db2 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <uxQueueMessagesWaiting+0x6>
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	9b 83       	std	Y+3, r25	; 0x03
    1dbe:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dca:	fc 01       	movw	r30, r24
    1dcc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dce:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1dd0:	0f 90       	pop	r0
    1dd2:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	08 95       	ret

00001de2 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <uxQueueMessagesWaitingFromISR+0x6>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	9b 83       	std	Y+3, r25	; 0x03
    1dee:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	9b 81       	ldd	r25, Y+3	; 0x03
    1df4:	fc 01       	movw	r30, r24
    1df6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1df8:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	08 95       	ret

00001e08 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	1f 92       	push	r1
    1e0e:	1f 92       	push	r1
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <vPortFree>
	vPortFree( pxQueue );
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2a:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <vPortFree>
}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	08 95       	ret

00001e38 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <prvCopyDataToQueue+0x6>
    1e3e:	1f 92       	push	r1
    1e40:	1f 92       	push	r1
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	9a 83       	std	Y+2, r25	; 0x02
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	7c 83       	std	Y+4, r23	; 0x04
    1e4c:	6b 83       	std	Y+3, r22	; 0x03
    1e4e:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	9a 81       	ldd	r25, Y+2	; 0x02
    1e54:	fc 01       	movw	r30, r24
    1e56:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e58:	88 23       	and	r24, r24
    1e5a:	a9 f4       	brne	.+42     	; 0x1e86 <prvCopyDataToQueue+0x4e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e60:	fc 01       	movw	r30, r24
    1e62:	80 81       	ld	r24, Z
    1e64:	91 81       	ldd	r25, Z+1	; 0x01
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <prvCopyDataToQueue+0x34>
    1e6a:	92 c0       	rjmp	.+292    	; 0x1f90 <prvCopyDataToQueue+0x158>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e70:	fc 01       	movw	r30, r24
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	fc 01       	movw	r30, r24
    1e80:	13 82       	std	Z+3, r1	; 0x03
    1e82:	12 82       	std	Z+2, r1	; 0x02
    1e84:	85 c0       	rjmp	.+266    	; 0x1f90 <prvCopyDataToQueue+0x158>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1e86:	8d 81       	ldd	r24, Y+5	; 0x05
    1e88:	88 23       	and	r24, r24
    1e8a:	d9 f5       	brne	.+118    	; 0x1f02 <prvCopyDataToQueue+0xca>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	fc 01       	movw	r30, r24
    1e92:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e94:	48 2f       	mov	r20, r24
    1e96:	50 e0       	ldi	r21, 0x00	; 0
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	84 81       	ldd	r24, Z+4	; 0x04
    1ea0:	95 81       	ldd	r25, Z+5	; 0x05
    1ea2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea6:	b9 01       	movw	r22, r18
    1ea8:	0e 94 9c 1a 	call	0x3538	; 0x3538 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	24 81       	ldd	r18, Z+4	; 0x04
    1eb4:	35 81       	ldd	r19, Z+5	; 0x05
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	fc 01       	movw	r30, r24
    1ebc:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ebe:	88 2f       	mov	r24, r24
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	28 0f       	add	r18, r24
    1ec4:	39 1f       	adc	r19, r25
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eca:	fc 01       	movw	r30, r24
    1ecc:	35 83       	std	Z+5, r19	; 0x05
    1ece:	24 83       	std	Z+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	24 81       	ldd	r18, Z+4	; 0x04
    1ed8:	35 81       	ldd	r19, Z+5	; 0x05
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ede:	fc 01       	movw	r30, r24
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	28 17       	cp	r18, r24
    1ee6:	39 07       	cpc	r19, r25
    1ee8:	08 f4       	brcc	.+2      	; 0x1eec <prvCopyDataToQueue+0xb4>
    1eea:	52 c0       	rjmp	.+164    	; 0x1f90 <prvCopyDataToQueue+0x158>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	20 81       	ld	r18, Z
    1ef4:	31 81       	ldd	r19, Z+1	; 0x01
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    1efa:	fc 01       	movw	r30, r24
    1efc:	35 83       	std	Z+5, r19	; 0x05
    1efe:	24 83       	std	Z+4, r18	; 0x04
    1f00:	47 c0       	rjmp	.+142    	; 0x1f90 <prvCopyDataToQueue+0x158>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	fc 01       	movw	r30, r24
    1f08:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	fc 01       	movw	r30, r24
    1f14:	86 81       	ldd	r24, Z+6	; 0x06
    1f16:	97 81       	ldd	r25, Z+7	; 0x07
    1f18:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1c:	b9 01       	movw	r22, r18
    1f1e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	fc 01       	movw	r30, r24
    1f28:	26 81       	ldd	r18, Z+6	; 0x06
    1f2a:	37 81       	ldd	r19, Z+7	; 0x07
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f30:	fc 01       	movw	r30, r24
    1f32:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f34:	88 2f       	mov	r24, r24
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	91 95       	neg	r25
    1f3a:	81 95       	neg	r24
    1f3c:	91 09       	sbc	r25, r1
    1f3e:	28 0f       	add	r18, r24
    1f40:	39 1f       	adc	r19, r25
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	9a 81       	ldd	r25, Y+2	; 0x02
    1f46:	fc 01       	movw	r30, r24
    1f48:	37 83       	std	Z+7, r19	; 0x07
    1f4a:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f50:	fc 01       	movw	r30, r24
    1f52:	26 81       	ldd	r18, Z+6	; 0x06
    1f54:	37 81       	ldd	r19, Z+7	; 0x07
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	28 17       	cp	r18, r24
    1f62:	39 07       	cpc	r19, r25
    1f64:	a8 f4       	brcc	.+42     	; 0x1f90 <prvCopyDataToQueue+0x158>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	22 81       	ldd	r18, Z+2	; 0x02
    1f6e:	33 81       	ldd	r19, Z+3	; 0x03
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	9a 81       	ldd	r25, Y+2	; 0x02
    1f74:	fc 01       	movw	r30, r24
    1f76:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	91 95       	neg	r25
    1f7e:	81 95       	neg	r24
    1f80:	91 09       	sbc	r25, r1
    1f82:	28 0f       	add	r18, r24
    1f84:	39 1f       	adc	r19, r25
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	37 83       	std	Z+7, r19	; 0x07
    1f8e:	26 83       	std	Z+6, r18	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	fc 01       	movw	r30, r24
    1f96:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f98:	21 e0       	ldi	r18, 0x01	; 1
    1f9a:	28 0f       	add	r18, r24
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	22 8f       	std	Z+26, r18	; 0x1a
}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	08 95       	ret

00001fb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <prvCopyDataFromQueue+0x6>
    1fba:	1f 92       	push	r1
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	7c 83       	std	Y+4, r23	; 0x04
    1fc6:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	fc 01       	movw	r30, r24
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	c9 f1       	breq	.+114    	; 0x2048 <prvCopyDataFromQueue+0x94>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	fc 01       	movw	r30, r24
    1fdc:	26 81       	ldd	r18, Z+6	; 0x06
    1fde:	37 81       	ldd	r19, Z+7	; 0x07
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	28 0f       	add	r18, r24
    1fee:	39 1f       	adc	r19, r25
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	37 83       	std	Z+7, r19	; 0x07
    1ff8:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	fc 01       	movw	r30, r24
    2000:	26 81       	ldd	r18, Z+6	; 0x06
    2002:	37 81       	ldd	r19, Z+7	; 0x07
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	9a 81       	ldd	r25, Y+2	; 0x02
    2008:	fc 01       	movw	r30, r24
    200a:	82 81       	ldd	r24, Z+2	; 0x02
    200c:	93 81       	ldd	r25, Z+3	; 0x03
    200e:	28 17       	cp	r18, r24
    2010:	39 07       	cpc	r19, r25
    2012:	50 f0       	brcs	.+20     	; 0x2028 <prvCopyDataFromQueue+0x74>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	9a 81       	ldd	r25, Y+2	; 0x02
    2018:	fc 01       	movw	r30, r24
    201a:	20 81       	ld	r18, Z
    201c:	31 81       	ldd	r19, Z+1	; 0x01
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	9a 81       	ldd	r25, Y+2	; 0x02
    2022:	fc 01       	movw	r30, r24
    2024:	37 83       	std	Z+7, r19	; 0x07
    2026:	26 83       	std	Z+6, r18	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	fc 01       	movw	r30, r24
    202e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2030:	48 2f       	mov	r20, r24
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	fc 01       	movw	r30, r24
    203a:	26 81       	ldd	r18, Z+6	; 0x06
    203c:	37 81       	ldd	r19, Z+7	; 0x07
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	b9 01       	movw	r22, r18
    2044:	0e 94 9c 1a 	call	0x3538	; 0x3538 <memcpy>
	}
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	08 95       	ret

00002056 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	1f 92       	push	r1
    205c:	1f 92       	push	r1
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	9a 83       	std	Y+2, r25	; 0x02
    2064:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    206c:	1b c0       	rjmp	.+54     	; 0x20a4 <prvUnlockQueue+0x4e>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	fc 01       	movw	r30, r24
    2074:	81 89       	ldd	r24, Z+17	; 0x11
    2076:	88 23       	and	r24, r24
    2078:	a1 f0       	breq	.+40     	; 0x20a2 <prvUnlockQueue+0x4c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	9a 81       	ldd	r25, Y+2	; 0x02
    207e:	41 96       	adiw	r24, 0x11	; 17
    2080:	0e 94 ab 07 	call	0xf56	; 0xf56 <xTaskRemoveFromEventList>
    2084:	88 23       	and	r24, r24
    2086:	11 f0       	breq	.+4      	; 0x208c <prvUnlockQueue+0x36>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    2088:	0e 94 a0 08 	call	0x1140	; 0x1140 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	fc 01       	movw	r30, r24
    2092:	86 8d       	ldd	r24, Z+30	; 0x1e
    2094:	2f ef       	ldi	r18, 0xFF	; 255
    2096:	28 0f       	add	r18, r24
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	fc 01       	movw	r30, r24
    209e:	26 8f       	std	Z+30, r18	; 0x1e
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <prvUnlockQueue+0x4e>
			}
			else
			{
				break;
    20a2:	06 c0       	rjmp	.+12     	; 0x20b0 <prvUnlockQueue+0x5a>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	fc 01       	movw	r30, r24
    20aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    20ac:	18 16       	cp	r1, r24
    20ae:	fc f2       	brlt	.-66     	; 0x206e <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	2f ef       	ldi	r18, 0xFF	; 255
    20b6:	fc 01       	movw	r30, r24
    20b8:	26 8f       	std	Z+30, r18	; 0x1e
	}
	taskEXIT_CRITICAL();
    20ba:	0f 90       	pop	r0
    20bc:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    20c4:	1b c0       	rjmp	.+54     	; 0x20fc <prvUnlockQueue+0xa6>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	fc 01       	movw	r30, r24
    20cc:	80 85       	ldd	r24, Z+8	; 0x08
    20ce:	88 23       	and	r24, r24
    20d0:	a1 f0       	breq	.+40     	; 0x20fa <prvUnlockQueue+0xa4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	9a 81       	ldd	r25, Y+2	; 0x02
    20d6:	08 96       	adiw	r24, 0x08	; 8
    20d8:	0e 94 ab 07 	call	0xf56	; 0xf56 <xTaskRemoveFromEventList>
    20dc:	88 23       	and	r24, r24
    20de:	11 f0       	breq	.+4      	; 0x20e4 <prvUnlockQueue+0x8e>
				{
					vTaskMissedYield();
    20e0:	0e 94 a0 08 	call	0x1140	; 0x1140 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	9a 81       	ldd	r25, Y+2	; 0x02
    20e8:	fc 01       	movw	r30, r24
    20ea:	85 8d       	ldd	r24, Z+29	; 0x1d
    20ec:	2f ef       	ldi	r18, 0xFF	; 255
    20ee:	28 0f       	add	r18, r24
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	fc 01       	movw	r30, r24
    20f6:	25 8f       	std	Z+29, r18	; 0x1d
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <prvUnlockQueue+0xa6>
			}
			else
			{
				break;
    20fa:	06 c0       	rjmp	.+12     	; 0x2108 <prvUnlockQueue+0xb2>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	fc 01       	movw	r30, r24
    2102:	85 8d       	ldd	r24, Z+29	; 0x1d
    2104:	18 16       	cp	r1, r24
    2106:	fc f2       	brlt	.-66     	; 0x20c6 <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	2f ef       	ldi	r18, 0xFF	; 255
    210e:	fc 01       	movw	r30, r24
    2110:	25 8f       	std	Z+29, r18	; 0x1d
	}
	taskEXIT_CRITICAL();
    2112:	0f 90       	pop	r0
    2114:	0f be       	out	0x3f, r0	; 63
}
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	08 95       	ret

00002120 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	00 d0       	rcall	.+0      	; 0x2126 <prvIsQueueEmpty+0x6>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9b 83       	std	Y+3, r25	; 0x03
    212c:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	9b 81       	ldd	r25, Y+3	; 0x03
    2138:	fc 01       	movw	r30, r24
    213a:	92 8d       	ldd	r25, Z+26	; 0x1a
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	99 23       	and	r25, r25
    2140:	09 f0       	breq	.+2      	; 0x2144 <prvIsQueueEmpty+0x24>
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2146:	0f 90       	pop	r0
    2148:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    214a:	89 81       	ldd	r24, Y+1	; 0x01
}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	df 91       	pop	r29
    2154:	cf 91       	pop	r28
    2156:	08 95       	ret

00002158 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	00 d0       	rcall	.+0      	; 0x215e <xQueueIsQueueEmptyFromISR+0x6>
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	9b 83       	std	Y+3, r25	; 0x03
    2164:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	9b 81       	ldd	r25, Y+3	; 0x03
    216a:	fc 01       	movw	r30, r24
    216c:	92 8d       	ldd	r25, Z+26	; 0x1a
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	99 23       	and	r25, r25
    2172:	09 f0       	breq	.+2      	; 0x2176 <xQueueIsQueueEmptyFromISR+0x1e>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    2178:	89 81       	ldd	r24, Y+1	; 0x01
}
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	08 95       	ret

00002186 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	00 d0       	rcall	.+0      	; 0x218c <prvIsQueueFull+0x6>
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	9b 83       	std	Y+3, r25	; 0x03
    2192:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	9b 81       	ldd	r25, Y+3	; 0x03
    219e:	fc 01       	movw	r30, r24
    21a0:	22 8d       	ldd	r18, Z+26	; 0x1a
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	9b 81       	ldd	r25, Y+3	; 0x03
    21a6:	fc 01       	movw	r30, r24
    21a8:	93 8d       	ldd	r25, Z+27	; 0x1b
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	29 17       	cp	r18, r25
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <prvIsQueueFull+0x2c>
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    21b4:	0f 90       	pop	r0
    21b6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	08 95       	ret

000021c6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <xQueueIsQueueFullFromISR+0x6>
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	9b 83       	std	Y+3, r25	; 0x03
    21d2:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	9b 81       	ldd	r25, Y+3	; 0x03
    21d8:	fc 01       	movw	r30, r24
    21da:	22 8d       	ldd	r18, Z+26	; 0x1a
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	9b 81       	ldd	r25, Y+3	; 0x03
    21e0:	fc 01       	movw	r30, r24
    21e2:	93 8d       	ldd	r25, Z+27	; 0x1b
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	29 17       	cp	r18, r25
    21e8:	09 f0       	breq	.+2      	; 0x21ec <xQueueIsQueueFullFromISR+0x26>
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	08 95       	ret

000021fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    21fc:	cf 93       	push	r28
    21fe:	df 93       	push	r29
    2200:	1f 92       	push	r1
    2202:	1f 92       	push	r1
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	9c 01       	movw	r18, r24
    2212:	2d 5f       	subi	r18, 0xFD	; 253
    2214:	3f 4f       	sbci	r19, 0xFF	; 255
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
    221a:	fc 01       	movw	r30, r24
    221c:	32 83       	std	Z+2, r19	; 0x02
    221e:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	2f ef       	ldi	r18, 0xFF	; 255
    2226:	3f ef       	ldi	r19, 0xFF	; 255
    2228:	fc 01       	movw	r30, r24
    222a:	34 83       	std	Z+4, r19	; 0x04
    222c:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	9c 01       	movw	r18, r24
    2234:	2d 5f       	subi	r18, 0xFD	; 253
    2236:	3f 4f       	sbci	r19, 0xFF	; 255
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	9a 81       	ldd	r25, Y+2	; 0x02
    223c:	fc 01       	movw	r30, r24
    223e:	36 83       	std	Z+6, r19	; 0x06
    2240:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	9c 01       	movw	r18, r24
    2248:	2d 5f       	subi	r18, 0xFD	; 253
    224a:	3f 4f       	sbci	r19, 0xFF	; 255
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	fc 01       	movw	r30, r24
    2252:	30 87       	std	Z+8, r19	; 0x08
    2254:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	fc 01       	movw	r30, r24
    225c:	10 82       	st	Z, r1
}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	08 95       	ret

00002268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	1f 92       	push	r1
    226e:	1f 92       	push	r1
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	fc 01       	movw	r30, r24
    227e:	11 86       	std	Z+9, r1	; 0x09
    2280:	10 86       	std	Z+8, r1	; 0x08
}
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	00 d0       	rcall	.+0      	; 0x2292 <vListInsertEnd+0x6>
    2292:	00 d0       	rcall	.+0      	; 0x2294 <vListInsertEnd+0x8>
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	7e 83       	std	Y+6, r23	; 0x06
    229e:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	fc 01       	movw	r30, r24
    22a6:	81 81       	ldd	r24, Z+1	; 0x01
    22a8:	92 81       	ldd	r25, Z+2	; 0x02
    22aa:	9a 83       	std	Y+2, r25	; 0x02
    22ac:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	9a 81       	ldd	r25, Y+2	; 0x02
    22b2:	fc 01       	movw	r30, r24
    22b4:	22 81       	ldd	r18, Z+2	; 0x02
    22b6:	33 81       	ldd	r19, Z+3	; 0x03
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	fc 01       	movw	r30, r24
    22be:	33 83       	std	Z+3, r19	; 0x03
    22c0:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	fc 01       	movw	r30, r24
    22c8:	21 81       	ldd	r18, Z+1	; 0x01
    22ca:	32 81       	ldd	r19, Z+2	; 0x02
    22cc:	8d 81       	ldd	r24, Y+5	; 0x05
    22ce:	9e 81       	ldd	r25, Y+6	; 0x06
    22d0:	fc 01       	movw	r30, r24
    22d2:	35 83       	std	Z+5, r19	; 0x05
    22d4:	24 83       	std	Z+4, r18	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	fc 01       	movw	r30, r24
    22dc:	82 81       	ldd	r24, Z+2	; 0x02
    22de:	93 81       	ldd	r25, Z+3	; 0x03
    22e0:	2d 81       	ldd	r18, Y+5	; 0x05
    22e2:	3e 81       	ldd	r19, Y+6	; 0x06
    22e4:	fc 01       	movw	r30, r24
    22e6:	35 83       	std	Z+5, r19	; 0x05
    22e8:	24 83       	std	Z+4, r18	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	9a 81       	ldd	r25, Y+2	; 0x02
    22ee:	2d 81       	ldd	r18, Y+5	; 0x05
    22f0:	3e 81       	ldd	r19, Y+6	; 0x06
    22f2:	fc 01       	movw	r30, r24
    22f4:	33 83       	std	Z+3, r19	; 0x03
    22f6:	22 83       	std	Z+2, r18	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	2d 81       	ldd	r18, Y+5	; 0x05
    22fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2300:	fc 01       	movw	r30, r24
    2302:	32 83       	std	Z+2, r19	; 0x02
    2304:	21 83       	std	Z+1, r18	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	2b 81       	ldd	r18, Y+3	; 0x03
    230c:	3c 81       	ldd	r19, Y+4	; 0x04
    230e:	fc 01       	movw	r30, r24
    2310:	31 87       	std	Z+9, r19	; 0x09
    2312:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	fc 01       	movw	r30, r24
    231a:	80 81       	ld	r24, Z
    231c:	21 e0       	ldi	r18, 0x01	; 1
    231e:	28 0f       	add	r18, r24
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	fc 01       	movw	r30, r24
    2326:	20 83       	st	Z, r18
}
    2328:	26 96       	adiw	r28, 0x06	; 6
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	df 91       	pop	r29
    2336:	cf 91       	pop	r28
    2338:	08 95       	ret

0000233a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	28 97       	sbiw	r28, 0x08	; 8
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	9e 83       	std	Y+6, r25	; 0x06
    2350:	8d 83       	std	Y+5, r24	; 0x05
    2352:	78 87       	std	Y+8, r23	; 0x08
    2354:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2356:	8f 81       	ldd	r24, Y+7	; 0x07
    2358:	98 85       	ldd	r25, Y+8	; 0x08
    235a:	fc 01       	movw	r30, r24
    235c:	80 81       	ld	r24, Z
    235e:	91 81       	ldd	r25, Z+1	; 0x01
    2360:	9c 83       	std	Y+4, r25	; 0x04
    2362:	8b 83       	std	Y+3, r24	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	8f 3f       	cpi	r24, 0xFF	; 255
    236a:	ff ef       	ldi	r31, 0xFF	; 255
    236c:	9f 07       	cpc	r25, r31
    236e:	41 f4       	brne	.+16     	; 0x2380 <vListInsert+0x46>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2370:	8d 81       	ldd	r24, Y+5	; 0x05
    2372:	9e 81       	ldd	r25, Y+6	; 0x06
    2374:	fc 01       	movw	r30, r24
    2376:	87 81       	ldd	r24, Z+7	; 0x07
    2378:	90 85       	ldd	r25, Z+8	; 0x08
    237a:	9a 83       	std	Y+2, r25	; 0x02
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	1a c0       	rjmp	.+52     	; 0x23b4 <vListInsert+0x7a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	03 96       	adiw	r24, 0x03	; 3
    2386:	9a 83       	std	Y+2, r25	; 0x02
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	07 c0       	rjmp	.+14     	; 0x239a <vListInsert+0x60>
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	9a 81       	ldd	r25, Y+2	; 0x02
    2390:	fc 01       	movw	r30, r24
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	fc 01       	movw	r30, r24
    23a0:	82 81       	ldd	r24, Z+2	; 0x02
    23a2:	93 81       	ldd	r25, Z+3	; 0x03
    23a4:	fc 01       	movw	r30, r24
    23a6:	20 81       	ld	r18, Z
    23a8:	31 81       	ldd	r19, Z+1	; 0x01
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	82 17       	cp	r24, r18
    23b0:	93 07       	cpc	r25, r19
    23b2:	60 f7       	brcc	.-40     	; 0x238c <vListInsert+0x52>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	fc 01       	movw	r30, r24
    23ba:	22 81       	ldd	r18, Z+2	; 0x02
    23bc:	33 81       	ldd	r19, Z+3	; 0x03
    23be:	8f 81       	ldd	r24, Y+7	; 0x07
    23c0:	98 85       	ldd	r25, Y+8	; 0x08
    23c2:	fc 01       	movw	r30, r24
    23c4:	33 83       	std	Z+3, r19	; 0x03
    23c6:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    23c8:	8f 81       	ldd	r24, Y+7	; 0x07
    23ca:	98 85       	ldd	r25, Y+8	; 0x08
    23cc:	fc 01       	movw	r30, r24
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	2f 81       	ldd	r18, Y+7	; 0x07
    23d4:	38 85       	ldd	r19, Y+8	; 0x08
    23d6:	fc 01       	movw	r30, r24
    23d8:	35 83       	std	Z+5, r19	; 0x05
    23da:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    23dc:	8f 81       	ldd	r24, Y+7	; 0x07
    23de:	98 85       	ldd	r25, Y+8	; 0x08
    23e0:	29 81       	ldd	r18, Y+1	; 0x01
    23e2:	3a 81       	ldd	r19, Y+2	; 0x02
    23e4:	fc 01       	movw	r30, r24
    23e6:	35 83       	std	Z+5, r19	; 0x05
    23e8:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	9a 81       	ldd	r25, Y+2	; 0x02
    23ee:	2f 81       	ldd	r18, Y+7	; 0x07
    23f0:	38 85       	ldd	r19, Y+8	; 0x08
    23f2:	fc 01       	movw	r30, r24
    23f4:	33 83       	std	Z+3, r19	; 0x03
    23f6:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    23f8:	8f 81       	ldd	r24, Y+7	; 0x07
    23fa:	98 85       	ldd	r25, Y+8	; 0x08
    23fc:	2d 81       	ldd	r18, Y+5	; 0x05
    23fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2400:	fc 01       	movw	r30, r24
    2402:	31 87       	std	Z+9, r19	; 0x09
    2404:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	fc 01       	movw	r30, r24
    240c:	80 81       	ld	r24, Z
    240e:	21 e0       	ldi	r18, 0x01	; 1
    2410:	28 0f       	add	r18, r24
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	9e 81       	ldd	r25, Y+6	; 0x06
    2416:	fc 01       	movw	r30, r24
    2418:	20 83       	st	Z, r18
}
    241a:	28 96       	adiw	r28, 0x08	; 8
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	08 95       	ret

0000242c <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	00 d0       	rcall	.+0      	; 0x2432 <uxListRemove+0x6>
    2432:	1f 92       	push	r1
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	9c 83       	std	Y+4, r25	; 0x04
    243a:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	9c 81       	ldd	r25, Y+4	; 0x04
    2440:	fc 01       	movw	r30, r24
    2442:	82 81       	ldd	r24, Z+2	; 0x02
    2444:	93 81       	ldd	r25, Z+3	; 0x03
    2446:	2b 81       	ldd	r18, Y+3	; 0x03
    2448:	3c 81       	ldd	r19, Y+4	; 0x04
    244a:	f9 01       	movw	r30, r18
    244c:	24 81       	ldd	r18, Z+4	; 0x04
    244e:	35 81       	ldd	r19, Z+5	; 0x05
    2450:	fc 01       	movw	r30, r24
    2452:	35 83       	std	Z+5, r19	; 0x05
    2454:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	fc 01       	movw	r30, r24
    245c:	84 81       	ldd	r24, Z+4	; 0x04
    245e:	95 81       	ldd	r25, Z+5	; 0x05
    2460:	2b 81       	ldd	r18, Y+3	; 0x03
    2462:	3c 81       	ldd	r19, Y+4	; 0x04
    2464:	f9 01       	movw	r30, r18
    2466:	22 81       	ldd	r18, Z+2	; 0x02
    2468:	33 81       	ldd	r19, Z+3	; 0x03
    246a:	fc 01       	movw	r30, r24
    246c:	33 83       	std	Z+3, r19	; 0x03
    246e:	22 83       	std	Z+2, r18	; 0x02

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	9c 81       	ldd	r25, Y+4	; 0x04
    2474:	fc 01       	movw	r30, r24
    2476:	80 85       	ldd	r24, Z+8	; 0x08
    2478:	91 85       	ldd	r25, Z+9	; 0x09
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	9a 81       	ldd	r25, Y+2	; 0x02
    2482:	fc 01       	movw	r30, r24
    2484:	21 81       	ldd	r18, Z+1	; 0x01
    2486:	32 81       	ldd	r19, Z+2	; 0x02
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	28 17       	cp	r18, r24
    248e:	39 07       	cpc	r19, r25
    2490:	51 f4       	brne	.+20     	; 0x24a6 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	fc 01       	movw	r30, r24
    2498:	24 81       	ldd	r18, Z+4	; 0x04
    249a:	35 81       	ldd	r19, Z+5	; 0x05
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	fc 01       	movw	r30, r24
    24a2:	32 83       	std	Z+2, r19	; 0x02
    24a4:	21 83       	std	Z+1, r18	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	fc 01       	movw	r30, r24
    24ac:	11 86       	std	Z+9, r1	; 0x09
    24ae:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	fc 01       	movw	r30, r24
    24b6:	80 81       	ld	r24, Z
    24b8:	2f ef       	ldi	r18, 0xFF	; 255
    24ba:	28 0f       	add	r18, r24
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	9a 81       	ldd	r25, Y+2	; 0x02
    24c0:	fc 01       	movw	r30, r24
    24c2:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	9a 81       	ldd	r25, Y+2	; 0x02
    24c8:	fc 01       	movw	r30, r24
    24ca:	80 81       	ld	r24, Z
}
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	08 95       	ret

000024da <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	27 97       	sbiw	r28, 0x07	; 7
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	9d 83       	std	Y+5, r25	; 0x05
    24f0:	8c 83       	std	Y+4, r24	; 0x04
    24f2:	6e 83       	std	Y+6, r22	; 0x06
    24f4:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    24f6:	8a e1       	ldi	r24, 0x1A	; 26
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0e 94 65 15 	call	0x2aca	; 0x2aca <pvPortMalloc>
    24fe:	9b 83       	std	Y+3, r25	; 0x03
    2500:	8a 83       	std	Y+2, r24	; 0x02
	if( pxCoRoutine )
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	9b 81       	ldd	r25, Y+3	; 0x03
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	09 f4       	brne	.+2      	; 0x250c <xCoRoutineCreate+0x32>
    250a:	77 c0       	rjmp	.+238    	; 0x25fa <xCoRoutineCreate+0x120>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    250c:	80 91 75 02 	lds	r24, 0x0275
    2510:	90 91 76 02 	lds	r25, 0x0276
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	41 f4       	brne	.+16     	; 0x2528 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	9b 81       	ldd	r25, Y+3	; 0x03
    251c:	90 93 76 02 	sts	0x0276, r25
    2520:	80 93 75 02 	sts	0x0275, r24
			prvInitialiseCoRoutineLists();
    2524:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2528:	8e 81       	ldd	r24, Y+6	; 0x06
    252a:	82 30       	cpi	r24, 0x02	; 2
    252c:	10 f0       	brcs	.+4      	; 0x2532 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	9b 81       	ldd	r25, Y+3	; 0x03
    2536:	fc 01       	movw	r30, r24
    2538:	11 8e       	std	Z+25, r1	; 0x19
    253a:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	9b 81       	ldd	r25, Y+3	; 0x03
    2540:	2e 81       	ldd	r18, Y+6	; 0x06
    2542:	fc 01       	movw	r30, r24
    2544:	26 8b       	std	Z+22, r18	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	9b 81       	ldd	r25, Y+3	; 0x03
    254a:	2f 81       	ldd	r18, Y+7	; 0x07
    254c:	fc 01       	movw	r30, r24
    254e:	27 8b       	std	Z+23, r18	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	9b 81       	ldd	r25, Y+3	; 0x03
    2554:	2c 81       	ldd	r18, Y+4	; 0x04
    2556:	3d 81       	ldd	r19, Y+5	; 0x05
    2558:	fc 01       	movw	r30, r24
    255a:	31 83       	std	Z+1, r19	; 0x01
    255c:	20 83       	st	Z, r18

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	9b 81       	ldd	r25, Y+3	; 0x03
    2562:	02 96       	adiw	r24, 0x02	; 2
    2564:	0e 94 34 11 	call	0x2268	; 0x2268 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	9b 81       	ldd	r25, Y+3	; 0x03
    256c:	0c 96       	adiw	r24, 0x0c	; 12
    256e:	0e 94 34 11 	call	0x2268	; 0x2268 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	9b 81       	ldd	r25, Y+3	; 0x03
    2576:	2a 81       	ldd	r18, Y+2	; 0x02
    2578:	3b 81       	ldd	r19, Y+3	; 0x03
    257a:	fc 01       	movw	r30, r24
    257c:	31 87       	std	Z+9, r19	; 0x09
    257e:	20 87       	std	Z+8, r18	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
    2582:	9b 81       	ldd	r25, Y+3	; 0x03
    2584:	2a 81       	ldd	r18, Y+2	; 0x02
    2586:	3b 81       	ldd	r19, Y+3	; 0x03
    2588:	fc 01       	movw	r30, r24
    258a:	33 8b       	std	Z+19, r19	; 0x13
    258c:	22 8b       	std	Z+18, r18	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    258e:	8e 81       	ldd	r24, Y+6	; 0x06
    2590:	88 2f       	mov	r24, r24
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	24 e0       	ldi	r18, 0x04	; 4
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	28 1b       	sub	r18, r24
    259a:	39 0b       	sbc	r19, r25
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	9b 81       	ldd	r25, Y+3	; 0x03
    25a0:	fc 01       	movw	r30, r24
    25a2:	35 87       	std	Z+13, r19	; 0x0d
    25a4:	24 87       	std	Z+12, r18	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	9b 81       	ldd	r25, Y+3	; 0x03
    25aa:	fc 01       	movw	r30, r24
    25ac:	96 89       	ldd	r25, Z+22	; 0x16
    25ae:	80 91 a8 02 	lds	r24, 0x02A8
    25b2:	89 17       	cp	r24, r25
    25b4:	30 f4       	brcc	.+12     	; 0x25c2 <xCoRoutineCreate+0xe8>
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ba:	fc 01       	movw	r30, r24
    25bc:	86 89       	ldd	r24, Z+22	; 0x16
    25be:	80 93 a8 02 	sts	0x02A8, r24
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	9b 81       	ldd	r25, Y+3	; 0x03
    25c6:	ac 01       	movw	r20, r24
    25c8:	4e 5f       	subi	r20, 0xFE	; 254
    25ca:	5f 4f       	sbci	r21, 0xFF	; 255
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	9b 81       	ldd	r25, Y+3	; 0x03
    25d0:	fc 01       	movw	r30, r24
    25d2:	86 89       	ldd	r24, Z+22	; 0x16
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	c9 01       	movw	r24, r18
    25da:	88 0f       	add	r24, r24
    25dc:	99 1f       	adc	r25, r25
    25de:	88 0f       	add	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	88 0f       	add	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	82 0f       	add	r24, r18
    25e8:	93 1f       	adc	r25, r19
    25ea:	89 58       	subi	r24, 0x89	; 137
    25ec:	9d 4f       	sbci	r25, 0xFD	; 253
    25ee:	ba 01       	movw	r22, r20
    25f0:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>

		xReturn = pdPASS;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <xCoRoutineCreate+0x124>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    25fa:	8f ef       	ldi	r24, 0xFF	; 255
    25fc:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return xReturn;	
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2600:	27 96       	adiw	r28, 0x07	; 7
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	00 d0       	rcall	.+0      	; 0x2618 <vCoRoutineAddToDelayedList+0x6>
    2618:	00 d0       	rcall	.+0      	; 0x261a <vCoRoutineAddToDelayedList+0x8>
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	9c 83       	std	Y+4, r25	; 0x04
    2620:	8b 83       	std	Y+3, r24	; 0x03
    2622:	7e 83       	std	Y+6, r23	; 0x06
    2624:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    2626:	20 91 a9 02 	lds	r18, 0x02A9
    262a:	30 91 aa 02 	lds	r19, 0x02AA
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	82 0f       	add	r24, r18
    2634:	93 1f       	adc	r25, r19
    2636:	9a 83       	std	Y+2, r25	; 0x02
    2638:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	uxListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    263a:	80 91 75 02 	lds	r24, 0x0275
    263e:	90 91 76 02 	lds	r25, 0x0276
    2642:	02 96       	adiw	r24, 0x02	; 2
    2644:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    2648:	80 91 75 02 	lds	r24, 0x0275
    264c:	90 91 76 02 	lds	r25, 0x0276
    2650:	29 81       	ldd	r18, Y+1	; 0x01
    2652:	3a 81       	ldd	r19, Y+2	; 0x02
    2654:	fc 01       	movw	r30, r24
    2656:	33 83       	std	Z+3, r19	; 0x03
    2658:	22 83       	std	Z+2, r18	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    265a:	80 91 a9 02 	lds	r24, 0x02A9
    265e:	90 91 aa 02 	lds	r25, 0x02AA
    2662:	29 81       	ldd	r18, Y+1	; 0x01
    2664:	3a 81       	ldd	r19, Y+2	; 0x02
    2666:	28 17       	cp	r18, r24
    2668:	39 07       	cpc	r19, r25
    266a:	78 f4       	brcc	.+30     	; 0x268a <vCoRoutineAddToDelayedList+0x78>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    266c:	80 91 75 02 	lds	r24, 0x0275
    2670:	90 91 76 02 	lds	r25, 0x0276
    2674:	9c 01       	movw	r18, r24
    2676:	2e 5f       	subi	r18, 0xFE	; 254
    2678:	3f 4f       	sbci	r19, 0xFF	; 255
    267a:	80 91 9d 02 	lds	r24, 0x029D
    267e:	90 91 9e 02 	lds	r25, 0x029E
    2682:	b9 01       	movw	r22, r18
    2684:	0e 94 9d 11 	call	0x233a	; 0x233a <vListInsert>
    2688:	0e c0       	rjmp	.+28     	; 0x26a6 <vCoRoutineAddToDelayedList+0x94>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    268a:	80 91 75 02 	lds	r24, 0x0275
    268e:	90 91 76 02 	lds	r25, 0x0276
    2692:	9c 01       	movw	r18, r24
    2694:	2e 5f       	subi	r18, 0xFE	; 254
    2696:	3f 4f       	sbci	r19, 0xFF	; 255
    2698:	80 91 9b 02 	lds	r24, 0x029B
    269c:	90 91 9c 02 	lds	r25, 0x029C
    26a0:	b9 01       	movw	r22, r18
    26a2:	0e 94 9d 11 	call	0x233a	; 0x233a <vListInsert>
	}

	if( pxEventList )
    26a6:	8d 81       	ldd	r24, Y+5	; 0x05
    26a8:	9e 81       	ldd	r25, Y+6	; 0x06
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	61 f0       	breq	.+24     	; 0x26c6 <vCoRoutineAddToDelayedList+0xb4>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    26ae:	80 91 75 02 	lds	r24, 0x0275
    26b2:	90 91 76 02 	lds	r25, 0x0276
    26b6:	9c 01       	movw	r18, r24
    26b8:	24 5f       	subi	r18, 0xF4	; 244
    26ba:	3f 4f       	sbci	r19, 0xFF	; 255
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	9e 81       	ldd	r25, Y+6	; 0x06
    26c0:	b9 01       	movw	r22, r18
    26c2:	0e 94 9d 11 	call	0x233a	; 0x233a <vListInsert>
	}
}
    26c6:	26 96       	adiw	r28, 0x06	; 6
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	08 95       	ret

000026d8 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	1f 92       	push	r1
    26de:	1f 92       	push	r1
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    26e4:	3c c0       	rjmp	.+120    	; 0x275e <prvCheckPendingReadyList+0x86>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    26e6:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    26e8:	80 91 a4 02 	lds	r24, 0x02A4
    26ec:	90 91 a5 02 	lds	r25, 0x02A5
    26f0:	fc 01       	movw	r30, r24
    26f2:	86 81       	ldd	r24, Z+6	; 0x06
    26f4:	97 81       	ldd	r25, Z+7	; 0x07
    26f6:	9a 83       	std	Y+2, r25	; 0x02
    26f8:	89 83       	std	Y+1, r24	; 0x01
			uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	9a 81       	ldd	r25, Y+2	; 0x02
    26fe:	0c 96       	adiw	r24, 0x0c	; 12
    2700:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
		}
		portENABLE_INTERRUPTS();
    2704:	78 94       	sei

		uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	02 96       	adiw	r24, 0x02	; 2
    270c:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	fc 01       	movw	r30, r24
    2716:	96 89       	ldd	r25, Z+22	; 0x16
    2718:	80 91 a8 02 	lds	r24, 0x02A8
    271c:	89 17       	cp	r24, r25
    271e:	30 f4       	brcc	.+12     	; 0x272c <prvCheckPendingReadyList+0x54>
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	fc 01       	movw	r30, r24
    2726:	86 89       	ldd	r24, Z+22	; 0x16
    2728:	80 93 a8 02 	sts	0x02A8, r24
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	9a 81       	ldd	r25, Y+2	; 0x02
    2730:	ac 01       	movw	r20, r24
    2732:	4e 5f       	subi	r20, 0xFE	; 254
    2734:	5f 4f       	sbci	r21, 0xFF	; 255
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	9a 81       	ldd	r25, Y+2	; 0x02
    273a:	fc 01       	movw	r30, r24
    273c:	86 89       	ldd	r24, Z+22	; 0x16
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	c9 01       	movw	r24, r18
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	88 0f       	add	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	82 0f       	add	r24, r18
    2752:	93 1f       	adc	r25, r19
    2754:	89 58       	subi	r24, 0x89	; 137
    2756:	9d 4f       	sbci	r25, 0xFD	; 253
    2758:	ba 01       	movw	r22, r20
    275a:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    275e:	80 91 9f 02 	lds	r24, 0x029F
    2762:	88 23       	and	r24, r24
    2764:	09 f0       	breq	.+2      	; 0x2768 <prvCheckPendingReadyList+0x90>
    2766:	bf cf       	rjmp	.-130    	; 0x26e6 <prvCheckPendingReadyList+0xe>
		portENABLE_INTERRUPTS();

		uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	08 95       	ret

00002772 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    2776:	00 d0       	rcall	.+0      	; 0x2778 <prvCheckDelayedList+0x6>
    2778:	1f 92       	push	r1
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    277e:	0e 94 de 05 	call	0xbbc	; 0xbbc <xTaskGetTickCount>
    2782:	9c 01       	movw	r18, r24
    2784:	80 91 ab 02 	lds	r24, 0x02AB
    2788:	90 91 ac 02 	lds	r25, 0x02AC
    278c:	a9 01       	movw	r20, r18
    278e:	48 1b       	sub	r20, r24
    2790:	59 0b       	sbc	r21, r25
    2792:	ca 01       	movw	r24, r20
    2794:	90 93 ae 02 	sts	0x02AE, r25
    2798:	80 93 ad 02 	sts	0x02AD, r24
	while( xPassedTicks )
    279c:	8a c0       	rjmp	.+276    	; 0x28b2 <prvCheckDelayedList+0x140>
	{
		xCoRoutineTickCount++;
    279e:	80 91 a9 02 	lds	r24, 0x02A9
    27a2:	90 91 aa 02 	lds	r25, 0x02AA
    27a6:	01 96       	adiw	r24, 0x01	; 1
    27a8:	90 93 aa 02 	sts	0x02AA, r25
    27ac:	80 93 a9 02 	sts	0x02A9, r24
		xPassedTicks--;
    27b0:	80 91 ad 02 	lds	r24, 0x02AD
    27b4:	90 91 ae 02 	lds	r25, 0x02AE
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	90 93 ae 02 	sts	0x02AE, r25
    27be:	80 93 ad 02 	sts	0x02AD, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    27c2:	80 91 a9 02 	lds	r24, 0x02A9
    27c6:	90 91 aa 02 	lds	r25, 0x02AA
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	a9 f4       	brne	.+42     	; 0x27f8 <prvCheckDelayedList+0x86>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    27ce:	80 91 9b 02 	lds	r24, 0x029B
    27d2:	90 91 9c 02 	lds	r25, 0x029C
    27d6:	9a 83       	std	Y+2, r25	; 0x02
    27d8:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    27da:	80 91 9d 02 	lds	r24, 0x029D
    27de:	90 91 9e 02 	lds	r25, 0x029E
    27e2:	90 93 9c 02 	sts	0x029C, r25
    27e6:	80 93 9b 02 	sts	0x029B, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	90 93 9e 02 	sts	0x029E, r25
    27f2:	80 93 9d 02 	sts	0x029D, r24
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    27f6:	54 c0       	rjmp	.+168    	; 0x28a0 <prvCheckDelayedList+0x12e>
    27f8:	53 c0       	rjmp	.+166    	; 0x28a0 <prvCheckDelayedList+0x12e>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    27fa:	80 91 9b 02 	lds	r24, 0x029B
    27fe:	90 91 9c 02 	lds	r25, 0x029C
    2802:	fc 01       	movw	r30, r24
    2804:	85 81       	ldd	r24, Z+5	; 0x05
    2806:	96 81       	ldd	r25, Z+6	; 0x06
    2808:	fc 01       	movw	r30, r24
    280a:	86 81       	ldd	r24, Z+6	; 0x06
    280c:	97 81       	ldd	r25, Z+7	; 0x07
    280e:	9c 83       	std	Y+4, r25	; 0x04
    2810:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	fc 01       	movw	r30, r24
    2818:	22 81       	ldd	r18, Z+2	; 0x02
    281a:	33 81       	ldd	r19, Z+3	; 0x03
    281c:	80 91 a9 02 	lds	r24, 0x02A9
    2820:	90 91 aa 02 	lds	r25, 0x02AA
    2824:	82 17       	cp	r24, r18
    2826:	93 07       	cpc	r25, r19
    2828:	08 f4       	brcc	.+2      	; 0x282c <prvCheckDelayedList+0xba>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    282a:	43 c0       	rjmp	.+134    	; 0x28b2 <prvCheckDelayedList+0x140>
			}																						

			portDISABLE_INTERRUPTS();
    282c:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				uxListRemove( &( pxCRCB->xGenericListItem ) );											
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	9c 81       	ldd	r25, Y+4	; 0x04
    2832:	02 96       	adiw	r24, 0x02	; 2
    2834:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	9c 81       	ldd	r25, Y+4	; 0x04
    283c:	fc 01       	movw	r30, r24
    283e:	84 89       	ldd	r24, Z+20	; 0x14
    2840:	95 89       	ldd	r25, Z+21	; 0x15
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	29 f0       	breq	.+10     	; 0x2850 <prvCheckDelayedList+0xde>
				{															
					uxListRemove( &( pxCRCB->xEventListItem ) );											
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	0c 96       	adiw	r24, 0x0c	; 12
    284c:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    2850:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	fc 01       	movw	r30, r24
    2858:	96 89       	ldd	r25, Z+22	; 0x16
    285a:	80 91 a8 02 	lds	r24, 0x02A8
    285e:	89 17       	cp	r24, r25
    2860:	30 f4       	brcc	.+12     	; 0x286e <prvCheckDelayedList+0xfc>
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	9c 81       	ldd	r25, Y+4	; 0x04
    2866:	fc 01       	movw	r30, r24
    2868:	86 89       	ldd	r24, Z+22	; 0x16
    286a:	80 93 a8 02 	sts	0x02A8, r24
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	9c 81       	ldd	r25, Y+4	; 0x04
    2872:	ac 01       	movw	r20, r24
    2874:	4e 5f       	subi	r20, 0xFE	; 254
    2876:	5f 4f       	sbci	r21, 0xFF	; 255
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	fc 01       	movw	r30, r24
    287e:	86 89       	ldd	r24, Z+22	; 0x16
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	c9 01       	movw	r24, r18
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	88 0f       	add	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	82 0f       	add	r24, r18
    2894:	93 1f       	adc	r25, r19
    2896:	89 58       	subi	r24, 0x89	; 137
    2898:	9d 4f       	sbci	r25, 0xFD	; 253
    289a:	ba 01       	movw	r22, r20
    289c:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    28a0:	80 91 9b 02 	lds	r24, 0x029B
    28a4:	90 91 9c 02 	lds	r25, 0x029C
    28a8:	fc 01       	movw	r30, r24
    28aa:	80 81       	ld	r24, Z
    28ac:	88 23       	and	r24, r24
    28ae:	09 f0       	breq	.+2      	; 0x28b2 <prvCheckDelayedList+0x140>
    28b0:	a4 cf       	rjmp	.-184    	; 0x27fa <prvCheckDelayedList+0x88>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    28b2:	80 91 ad 02 	lds	r24, 0x02AD
    28b6:	90 91 ae 02 	lds	r25, 0x02AE
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	09 f0       	breq	.+2      	; 0x28c0 <prvCheckDelayedList+0x14e>
    28be:	6f cf       	rjmp	.-290    	; 0x279e <prvCheckDelayedList+0x2c>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    28c0:	80 91 a9 02 	lds	r24, 0x02A9
    28c4:	90 91 aa 02 	lds	r25, 0x02AA
    28c8:	90 93 ac 02 	sts	0x02AC, r25
    28cc:	80 93 ab 02 	sts	0x02AB, r24
}
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	08 95       	ret

000028de <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    28de:	cf 93       	push	r28
    28e0:	df 93       	push	r29
    28e2:	1f 92       	push	r1
    28e4:	1f 92       	push	r1
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    28ea:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    28ee:	0e 94 b9 13 	call	0x2772	; 0x2772 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    28f2:	0a c0       	rjmp	.+20     	; 0x2908 <vCoRoutineSchedule+0x2a>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    28f4:	80 91 a8 02 	lds	r24, 0x02A8
    28f8:	88 23       	and	r24, r24
    28fa:	09 f4       	brne	.+2      	; 0x28fe <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    28fc:	6f c0       	rjmp	.+222    	; 0x29dc <vCoRoutineSchedule+0xfe>
		}
		--uxTopCoRoutineReadyPriority;
    28fe:	80 91 a8 02 	lds	r24, 0x02A8
    2902:	81 50       	subi	r24, 0x01	; 1
    2904:	80 93 a8 02 	sts	0x02A8, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2908:	80 91 a8 02 	lds	r24, 0x02A8
    290c:	28 2f       	mov	r18, r24
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	c9 01       	movw	r24, r18
    2912:	88 0f       	add	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	88 0f       	add	r24, r24
    2918:	99 1f       	adc	r25, r25
    291a:	88 0f       	add	r24, r24
    291c:	99 1f       	adc	r25, r25
    291e:	82 0f       	add	r24, r18
    2920:	93 1f       	adc	r25, r19
    2922:	89 58       	subi	r24, 0x89	; 137
    2924:	9d 4f       	sbci	r25, 0xFD	; 253
    2926:	fc 01       	movw	r30, r24
    2928:	80 81       	ld	r24, Z
    292a:	88 23       	and	r24, r24
    292c:	19 f3       	breq	.-58     	; 0x28f4 <vCoRoutineSchedule+0x16>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    292e:	80 91 a8 02 	lds	r24, 0x02A8
    2932:	28 2f       	mov	r18, r24
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	c9 01       	movw	r24, r18
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	88 0f       	add	r24, r24
    293e:	99 1f       	adc	r25, r25
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	82 0f       	add	r24, r18
    2946:	93 1f       	adc	r25, r19
    2948:	89 58       	subi	r24, 0x89	; 137
    294a:	9d 4f       	sbci	r25, 0xFD	; 253
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	fc 01       	movw	r30, r24
    2956:	81 81       	ldd	r24, Z+1	; 0x01
    2958:	92 81       	ldd	r25, Z+2	; 0x02
    295a:	fc 01       	movw	r30, r24
    295c:	22 81       	ldd	r18, Z+2	; 0x02
    295e:	33 81       	ldd	r19, Z+3	; 0x03
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	9a 81       	ldd	r25, Y+2	; 0x02
    2964:	fc 01       	movw	r30, r24
    2966:	32 83       	std	Z+2, r19	; 0x02
    2968:	21 83       	std	Z+1, r18	; 0x01
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	9a 81       	ldd	r25, Y+2	; 0x02
    296e:	fc 01       	movw	r30, r24
    2970:	21 81       	ldd	r18, Z+1	; 0x01
    2972:	32 81       	ldd	r19, Z+2	; 0x02
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	9a 81       	ldd	r25, Y+2	; 0x02
    2978:	03 96       	adiw	r24, 0x03	; 3
    297a:	28 17       	cp	r18, r24
    297c:	39 07       	cpc	r19, r25
    297e:	69 f4       	brne	.+26     	; 0x299a <vCoRoutineSchedule+0xbc>
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	fc 01       	movw	r30, r24
    2986:	81 81       	ldd	r24, Z+1	; 0x01
    2988:	92 81       	ldd	r25, Z+2	; 0x02
    298a:	fc 01       	movw	r30, r24
    298c:	22 81       	ldd	r18, Z+2	; 0x02
    298e:	33 81       	ldd	r19, Z+3	; 0x03
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	9a 81       	ldd	r25, Y+2	; 0x02
    2994:	fc 01       	movw	r30, r24
    2996:	32 83       	std	Z+2, r19	; 0x02
    2998:	21 83       	std	Z+1, r18	; 0x01
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	9a 81       	ldd	r25, Y+2	; 0x02
    299e:	fc 01       	movw	r30, r24
    29a0:	81 81       	ldd	r24, Z+1	; 0x01
    29a2:	92 81       	ldd	r25, Z+2	; 0x02
    29a4:	fc 01       	movw	r30, r24
    29a6:	86 81       	ldd	r24, Z+6	; 0x06
    29a8:	97 81       	ldd	r25, Z+7	; 0x07
    29aa:	90 93 76 02 	sts	0x0276, r25
    29ae:	80 93 75 02 	sts	0x0275, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    29b2:	80 91 75 02 	lds	r24, 0x0275
    29b6:	90 91 76 02 	lds	r25, 0x0276
    29ba:	fc 01       	movw	r30, r24
    29bc:	20 81       	ld	r18, Z
    29be:	31 81       	ldd	r19, Z+1	; 0x01
    29c0:	80 91 75 02 	lds	r24, 0x0275
    29c4:	90 91 76 02 	lds	r25, 0x0276
    29c8:	fc 01       	movw	r30, r24
    29ca:	47 89       	ldd	r20, Z+23	; 0x17
    29cc:	80 91 75 02 	lds	r24, 0x0275
    29d0:	90 91 76 02 	lds	r25, 0x0276
    29d4:	64 2f       	mov	r22, r20
    29d6:	f9 01       	movw	r30, r18
    29d8:	19 95       	eicall

	return;
    29da:	00 00       	nop
}
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	df 91       	pop	r29
    29e2:	cf 91       	pop	r28
    29e4:	08 95       	ret

000029e6 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	1f 92       	push	r1
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    29f0:	19 82       	std	Y+1, r1	; 0x01
    29f2:	13 c0       	rjmp	.+38     	; 0x2a1a <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	c9 01       	movw	r24, r18
    29fc:	88 0f       	add	r24, r24
    29fe:	99 1f       	adc	r25, r25
    2a00:	88 0f       	add	r24, r24
    2a02:	99 1f       	adc	r25, r25
    2a04:	88 0f       	add	r24, r24
    2a06:	99 1f       	adc	r25, r25
    2a08:	82 0f       	add	r24, r18
    2a0a:	93 1f       	adc	r25, r19
    2a0c:	89 58       	subi	r24, 0x89	; 137
    2a0e:	9d 4f       	sbci	r25, 0xFD	; 253
    2a10:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	8f 5f       	subi	r24, 0xFF	; 255
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	82 30       	cpi	r24, 0x02	; 2
    2a1e:	50 f3       	brcs	.-44     	; 0x29f4 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2a20:	89 e8       	ldi	r24, 0x89	; 137
    2a22:	92 e0       	ldi	r25, 0x02	; 2
    2a24:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2a28:	82 e9       	ldi	r24, 0x92	; 146
    2a2a:	92 e0       	ldi	r25, 0x02	; 2
    2a2c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    2a30:	8f e9       	ldi	r24, 0x9F	; 159
    2a32:	92 e0       	ldi	r25, 0x02	; 2
    2a34:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2a38:	89 e8       	ldi	r24, 0x89	; 137
    2a3a:	92 e0       	ldi	r25, 0x02	; 2
    2a3c:	90 93 9c 02 	sts	0x029C, r25
    2a40:	80 93 9b 02 	sts	0x029B, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    2a44:	82 e9       	ldi	r24, 0x92	; 146
    2a46:	92 e0       	ldi	r25, 0x02	; 2
    2a48:	90 93 9e 02 	sts	0x029E, r25
    2a4c:	80 93 9d 02 	sts	0x029D, r24
}
    2a50:	0f 90       	pop	r0
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	08 95       	ret

00002a58 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <xCoRoutineRemoveFromEventList+0x6>
    2a5e:	1f 92       	push	r1
    2a60:	1f 92       	push	r1
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	9d 83       	std	Y+5, r25	; 0x05
    2a68:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a6e:	fc 01       	movw	r30, r24
    2a70:	85 81       	ldd	r24, Z+5	; 0x05
    2a72:	96 81       	ldd	r25, Z+6	; 0x06
    2a74:	fc 01       	movw	r30, r24
    2a76:	86 81       	ldd	r24, Z+6	; 0x06
    2a78:	97 81       	ldd	r25, Z+7	; 0x07
    2a7a:	9b 83       	std	Y+3, r25	; 0x03
    2a7c:	8a 83       	std	Y+2, r24	; 0x02
	uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	9b 81       	ldd	r25, Y+3	; 0x03
    2a82:	0c 96       	adiw	r24, 0x0c	; 12
    2a84:	0e 94 16 12 	call	0x242c	; 0x242c <uxListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8c:	0c 96       	adiw	r24, 0x0c	; 12
    2a8e:	bc 01       	movw	r22, r24
    2a90:	8f e9       	ldi	r24, 0x9F	; 159
    2a92:	92 e0       	ldi	r25, 0x02	; 2
    2a94:	0e 94 46 11 	call	0x228c	; 0x228c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	26 89       	ldd	r18, Z+22	; 0x16
    2aa0:	80 91 75 02 	lds	r24, 0x0275
    2aa4:	90 91 76 02 	lds	r25, 0x0276
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	86 89       	ldd	r24, Z+22	; 0x16
    2aac:	28 17       	cp	r18, r24
    2aae:	18 f0       	brcs	.+6      	; 0x2ab6 <xCoRoutineRemoveFromEventList+0x5e>
	{
		xReturn = pdTRUE;
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	89 83       	std	Y+1, r24	; 0x01
    2ab4:	01 c0       	rjmp	.+2      	; 0x2ab8 <xCoRoutineRemoveFromEventList+0x60>
	}
	else
	{
		xReturn = pdFALSE;
    2ab6:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	08 95       	ret

00002aca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	00 d0       	rcall	.+0      	; 0x2ad0 <pvPortMalloc+0x6>
    2ad0:	1f 92       	push	r1
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	9c 83       	std	Y+4, r25	; 0x04
    2ad8:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    2ada:	1a 82       	std	Y+2, r1	; 0x02
    2adc:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    2ade:	0e 94 4e 05 	call	0xa9c	; 0xa9c <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    2ae2:	20 91 af 1a 	lds	r18, 0x1AAF
    2ae6:	30 91 b0 1a 	lds	r19, 0x1AB0
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
    2aec:	9c 81       	ldd	r25, Y+4	; 0x04
    2aee:	82 0f       	add	r24, r18
    2af0:	93 1f       	adc	r25, r19
    2af2:	81 15       	cp	r24, r1
    2af4:	28 e1       	ldi	r18, 0x18	; 24
    2af6:	92 07       	cpc	r25, r18
    2af8:	18 f5       	brcc	.+70     	; 0x2b40 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    2afa:	20 91 af 1a 	lds	r18, 0x1AAF
    2afe:	30 91 b0 1a 	lds	r19, 0x1AB0
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	9c 81       	ldd	r25, Y+4	; 0x04
    2b06:	28 0f       	add	r18, r24
    2b08:	39 1f       	adc	r19, r25
    2b0a:	80 91 af 1a 	lds	r24, 0x1AAF
    2b0e:	90 91 b0 1a 	lds	r25, 0x1AB0
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    2b12:	82 17       	cp	r24, r18
    2b14:	93 07       	cpc	r25, r19
    2b16:	a0 f4       	brcc	.+40     	; 0x2b40 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    2b18:	80 91 af 1a 	lds	r24, 0x1AAF
    2b1c:	90 91 b0 1a 	lds	r25, 0x1AB0
    2b20:	81 55       	subi	r24, 0x51	; 81
    2b22:	9d 4f       	sbci	r25, 0xFD	; 253
    2b24:	9a 83       	std	Y+2, r25	; 0x02
    2b26:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    2b28:	20 91 af 1a 	lds	r18, 0x1AAF
    2b2c:	30 91 b0 1a 	lds	r19, 0x1AB0
    2b30:	8b 81       	ldd	r24, Y+3	; 0x03
    2b32:	9c 81       	ldd	r25, Y+4	; 0x04
    2b34:	82 0f       	add	r24, r18
    2b36:	93 1f       	adc	r25, r19
    2b38:	90 93 b0 1a 	sts	0x1AB0, r25
    2b3c:	80 93 af 1a 	sts	0x1AAF, r24
		}
	}
	xTaskResumeAll();
    2b40:	0e 94 5a 05 	call	0xab4	; 0xab4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	08 95       	ret

00002b56 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	1f 92       	push	r1
    2b5c:	1f 92       	push	r1
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	9a 83       	std	Y+2, r25	; 0x02
    2b64:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	08 95       	ret

00002b70 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    2b78:	10 92 b0 1a 	sts	0x1AB0, r1
    2b7c:	10 92 af 1a 	sts	0x1AAF, r1
}
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	08 95       	ret

00002b86 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    2b8e:	80 91 af 1a 	lds	r24, 0x1AAF
    2b92:	90 91 b0 1a 	lds	r25, 0x1AB0
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	38 e1       	ldi	r19, 0x18	; 24
    2b9a:	a9 01       	movw	r20, r18
    2b9c:	48 1b       	sub	r20, r24
    2b9e:	59 0b       	sbc	r21, r25
    2ba0:	ca 01       	movw	r24, r20
}
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	08 95       	ret

00002ba8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    2ba8:	cf 93       	push	r28
    2baa:	df 93       	push	r29
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	28 97       	sbiw	r28, 0x08	; 8
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	9c 83       	std	Y+4, r25	; 0x04
    2bbe:	8b 83       	std	Y+3, r24	; 0x03
    2bc0:	7e 83       	std	Y+6, r23	; 0x06
    2bc2:	6d 83       	std	Y+5, r22	; 0x05
    2bc4:	58 87       	std	Y+8, r21	; 0x08
    2bc6:	4f 83       	std	Y+7, r20	; 0x07
#endif

	/* Place a few bytes of known values on the bottom of the stack.
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	9c 81       	ldd	r25, Y+4	; 0x04
    2bcc:	21 e1       	ldi	r18, 0x11	; 17
    2bce:	fc 01       	movw	r30, r24
    2bd0:	20 83       	st	Z, r18
	pxTopOfStack--;
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	9c 83       	std	Y+4, r25	; 0x04
    2bda:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	9c 81       	ldd	r25, Y+4	; 0x04
    2be0:	22 e2       	ldi	r18, 0x22	; 34
    2be2:	fc 01       	movw	r30, r24
    2be4:	20 83       	st	Z, r18
	pxTopOfStack--;
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	9c 83       	std	Y+4, r25	; 0x04
    2bee:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf4:	23 e3       	ldi	r18, 0x33	; 51
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	20 83       	st	Z, r18
	pxTopOfStack--;
    2bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	8b 83       	std	Y+3, r24	; 0x03
	 * of flash. We do this by adding the .task label in the linker script.
	 *
	 * In order to do this properly, we would need to get a full 3-byte pointer to
	 * pxCode.  That requires a change to GCC.  Not likely to happen any time soon.
	 */
	usAddress = ( unsigned portSHORT ) pxCode;
    2c04:	8d 81       	ldd	r24, Y+5	; 0x05
    2c06:	9e 81       	ldd	r25, Y+6	; 0x06
    2c08:	9a 83       	std	Y+2, r25	; 0x02
    2c0a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
    2c0c:	29 81       	ldd	r18, Y+1	; 0x01
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	9c 81       	ldd	r25, Y+4	; 0x04
    2c12:	fc 01       	movw	r30, r24
    2c14:	20 83       	st	Z, r18
	pxTopOfStack--;
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	9c 83       	std	Y+4, r25	; 0x04
    2c1e:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	9a 81       	ldd	r25, Y+2	; 0x02
    2c24:	89 2f       	mov	r24, r25
    2c26:	99 27       	eor	r25, r25
    2c28:	9a 83       	std	Y+2, r25	; 0x02
    2c2a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
    2c2c:	29 81       	ldd	r18, Y+1	; 0x01
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	9c 81       	ldd	r25, Y+4	; 0x04
    2c32:	fc 01       	movw	r30, r24
    2c34:	20 83       	st	Z, r18
	pxTopOfStack--;
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	9c 83       	std	Y+4, r25	; 0x04
    2c3e:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = 0;
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	9c 81       	ldd	r25, Y+4	; 0x04
    2c44:	fc 01       	movw	r30, r24
    2c46:	10 82       	st	Z, r1
	pxTopOfStack--;
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	9c 83       	std	Y+4, r25	; 0x04
    2c50:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    2c52:	8b 81       	ldd	r24, Y+3	; 0x03
    2c54:	9c 81       	ldd	r25, Y+4	; 0x04
    2c56:	fc 01       	movw	r30, r24
    2c58:	10 82       	st	Z, r1
	pxTopOfStack--;
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	9c 83       	std	Y+4, r25	; 0x04
    2c62:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	9c 81       	ldd	r25, Y+4	; 0x04
    2c68:	20 e8       	ldi	r18, 0x80	; 128
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	20 83       	st	Z, r18
	pxTopOfStack--;
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	9c 81       	ldd	r25, Y+4	; 0x04
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	9c 83       	std	Y+4, r25	; 0x04
    2c76:	8b 83       	std	Y+3, r24	; 0x03
#if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

	/* If we have an ATmega256x, we are also saving the RAMPZ and EIND registers.
	 * We should default those to 0.
	 */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* EIND */
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	10 82       	st	Z, r1
	pxTopOfStack--;
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	9c 81       	ldd	r25, Y+4	; 0x04
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	9c 83       	std	Y+4, r25	; 0x04
    2c88:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* RAMPZ */
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8e:	fc 01       	movw	r30, r24
    2c90:	10 82       	st	Z, r1
	pxTopOfStack--;
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	9c 81       	ldd	r25, Y+4	; 0x04
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9c 83       	std	Y+4, r25	; 0x04
    2c9a:	8b 83       	std	Y+3, r24	; 0x03

#endif

	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	10 82       	st	Z, r1
	pxTopOfStack--;
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	9c 83       	std	Y+4, r25	; 0x04
    2cac:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb2:	22 e0       	ldi	r18, 0x02	; 2
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	20 83       	st	Z, r18
	pxTopOfStack--;
    2cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cba:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	9c 83       	std	Y+4, r25	; 0x04
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc6:	23 e0       	ldi	r18, 0x03	; 3
    2cc8:	fc 01       	movw	r30, r24
    2cca:	20 83       	st	Z, r18
	pxTopOfStack--;
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	9c 83       	std	Y+4, r25	; 0x04
    2cd4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	24 e0       	ldi	r18, 0x04	; 4
    2cdc:	fc 01       	movw	r30, r24
    2cde:	20 83       	st	Z, r18
	pxTopOfStack--;
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	9c 81       	ldd	r25, Y+4	; 0x04
    2cee:	25 e0       	ldi	r18, 0x05	; 5
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	20 83       	st	Z, r18
	pxTopOfStack--;
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	9c 83       	std	Y+4, r25	; 0x04
    2cfc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	9c 81       	ldd	r25, Y+4	; 0x04
    2d02:	26 e0       	ldi	r18, 0x06	; 6
    2d04:	fc 01       	movw	r30, r24
    2d06:	20 83       	st	Z, r18
	pxTopOfStack--;
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	9c 83       	std	Y+4, r25	; 0x04
    2d10:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	9c 81       	ldd	r25, Y+4	; 0x04
    2d16:	27 e0       	ldi	r18, 0x07	; 7
    2d18:	fc 01       	movw	r30, r24
    2d1a:	20 83       	st	Z, r18
	pxTopOfStack--;
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	9c 83       	std	Y+4, r25	; 0x04
    2d24:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    2d26:	8b 81       	ldd	r24, Y+3	; 0x03
    2d28:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2a:	28 e0       	ldi	r18, 0x08	; 8
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	20 83       	st	Z, r18
	pxTopOfStack--;
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	9c 81       	ldd	r25, Y+4	; 0x04
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	9c 83       	std	Y+4, r25	; 0x04
    2d38:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    2d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3e:	29 e0       	ldi	r18, 0x09	; 9
    2d40:	fc 01       	movw	r30, r24
    2d42:	20 83       	st	Z, r18
	pxTopOfStack--;
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	9c 81       	ldd	r25, Y+4	; 0x04
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	9c 83       	std	Y+4, r25	; 0x04
    2d4c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	9c 81       	ldd	r25, Y+4	; 0x04
    2d52:	20 e1       	ldi	r18, 0x10	; 16
    2d54:	fc 01       	movw	r30, r24
    2d56:	20 83       	st	Z, r18
	pxTopOfStack--;
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	9c 83       	std	Y+4, r25	; 0x04
    2d60:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    2d62:	8b 81       	ldd	r24, Y+3	; 0x03
    2d64:	9c 81       	ldd	r25, Y+4	; 0x04
    2d66:	21 e1       	ldi	r18, 0x11	; 17
    2d68:	fc 01       	movw	r30, r24
    2d6a:	20 83       	st	Z, r18
	pxTopOfStack--;
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	9c 83       	std	Y+4, r25	; 0x04
    2d74:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7a:	22 e1       	ldi	r18, 0x12	; 18
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	20 83       	st	Z, r18
	pxTopOfStack--;
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	9c 81       	ldd	r25, Y+4	; 0x04
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	9c 83       	std	Y+4, r25	; 0x04
    2d88:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8e:	23 e1       	ldi	r18, 0x13	; 19
    2d90:	fc 01       	movw	r30, r24
    2d92:	20 83       	st	Z, r18
	pxTopOfStack--;
    2d94:	8b 81       	ldd	r24, Y+3	; 0x03
    2d96:	9c 81       	ldd	r25, Y+4	; 0x04
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	9c 83       	std	Y+4, r25	; 0x04
    2d9c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	9c 81       	ldd	r25, Y+4	; 0x04
    2da2:	24 e1       	ldi	r18, 0x14	; 20
    2da4:	fc 01       	movw	r30, r24
    2da6:	20 83       	st	Z, r18
	pxTopOfStack--;
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	9c 83       	std	Y+4, r25	; 0x04
    2db0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	9c 81       	ldd	r25, Y+4	; 0x04
    2db6:	25 e1       	ldi	r18, 0x15	; 21
    2db8:	fc 01       	movw	r30, r24
    2dba:	20 83       	st	Z, r18
	pxTopOfStack--;
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	9c 83       	std	Y+4, r25	; 0x04
    2dc4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	26 e1       	ldi	r18, 0x16	; 22
    2dcc:	fc 01       	movw	r30, r24
    2dce:	20 83       	st	Z, r18
	pxTopOfStack--;
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	9c 83       	std	Y+4, r25	; 0x04
    2dd8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dde:	27 e1       	ldi	r18, 0x17	; 23
    2de0:	fc 01       	movw	r30, r24
    2de2:	20 83       	st	Z, r18
	pxTopOfStack--;
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	9c 83       	std	Y+4, r25	; 0x04
    2dec:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    2dee:	8b 81       	ldd	r24, Y+3	; 0x03
    2df0:	9c 81       	ldd	r25, Y+4	; 0x04
    2df2:	28 e1       	ldi	r18, 0x18	; 24
    2df4:	fc 01       	movw	r30, r24
    2df6:	20 83       	st	Z, r18
	pxTopOfStack--;
    2df8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	9c 83       	std	Y+4, r25	; 0x04
    2e00:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	9c 81       	ldd	r25, Y+4	; 0x04
    2e06:	29 e1       	ldi	r18, 0x19	; 25
    2e08:	fc 01       	movw	r30, r24
    2e0a:	20 83       	st	Z, r18
	pxTopOfStack--;
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	9c 83       	std	Y+4, r25	; 0x04
    2e14:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1a:	20 e2       	ldi	r18, 0x20	; 32
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	20 83       	st	Z, r18
	pxTopOfStack--;
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	9c 81       	ldd	r25, Y+4	; 0x04
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	9c 83       	std	Y+4, r25	; 0x04
    2e28:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    2e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2e:	21 e2       	ldi	r18, 0x21	; 33
    2e30:	fc 01       	movw	r30, r24
    2e32:	20 83       	st	Z, r18
	pxTopOfStack--;
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	9c 81       	ldd	r25, Y+4	; 0x04
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	9c 83       	std	Y+4, r25	; 0x04
    2e3c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	9c 81       	ldd	r25, Y+4	; 0x04
    2e42:	22 e2       	ldi	r18, 0x22	; 34
    2e44:	fc 01       	movw	r30, r24
    2e46:	20 83       	st	Z, r18
	pxTopOfStack--;
    2e48:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	9c 83       	std	Y+4, r25	; 0x04
    2e50:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    2e52:	8b 81       	ldd	r24, Y+3	; 0x03
    2e54:	9c 81       	ldd	r25, Y+4	; 0x04
    2e56:	23 e2       	ldi	r18, 0x23	; 35
    2e58:	fc 01       	movw	r30, r24
    2e5a:	20 83       	st	Z, r18
	pxTopOfStack--;
    2e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	9c 83       	std	Y+4, r25	; 0x04
    2e64:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    2e66:	8f 81       	ldd	r24, Y+7	; 0x07
    2e68:	98 85       	ldd	r25, Y+8	; 0x08
    2e6a:	9a 83       	std	Y+2, r25	; 0x02
    2e6c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2e6e:	29 81       	ldd	r18, Y+1	; 0x01
    2e70:	8b 81       	ldd	r24, Y+3	; 0x03
    2e72:	9c 81       	ldd	r25, Y+4	; 0x04
    2e74:	fc 01       	movw	r30, r24
    2e76:	20 83       	st	Z, r18
	pxTopOfStack--;
    2e78:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	9c 83       	std	Y+4, r25	; 0x04
    2e80:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	9a 81       	ldd	r25, Y+2	; 0x02
    2e86:	89 2f       	mov	r24, r25
    2e88:	99 27       	eor	r25, r25
    2e8a:	9a 83       	std	Y+2, r25	; 0x02
    2e8c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2e8e:	29 81       	ldd	r18, Y+1	; 0x01
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	9c 81       	ldd	r25, Y+4	; 0x04
    2e94:	fc 01       	movw	r30, r24
    2e96:	20 83       	st	Z, r18
	pxTopOfStack--;
    2e98:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	9c 83       	std	Y+4, r25	; 0x04
    2ea0:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    2ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea6:	26 e2       	ldi	r18, 0x26	; 38
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	20 83       	st	Z, r18
	pxTopOfStack--;
    2eac:	8b 81       	ldd	r24, Y+3	; 0x03
    2eae:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	9c 83       	std	Y+4, r25	; 0x04
    2eb4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eba:	27 e2       	ldi	r18, 0x27	; 39
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	20 83       	st	Z, r18
	pxTopOfStack--;
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	9c 83       	std	Y+4, r25	; 0x04
    2ec8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ece:	28 e2       	ldi	r18, 0x28	; 40
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	20 83       	st	Z, r18
	pxTopOfStack--;
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	9c 83       	std	Y+4, r25	; 0x04
    2edc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee2:	29 e2       	ldi	r18, 0x29	; 41
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	20 83       	st	Z, r18
	pxTopOfStack--;
    2ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eea:	9c 81       	ldd	r25, Y+4	; 0x04
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	9c 83       	std	Y+4, r25	; 0x04
    2ef0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    2ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef6:	20 e3       	ldi	r18, 0x30	; 48
    2ef8:	fc 01       	movw	r30, r24
    2efa:	20 83       	st	Z, r18
	pxTopOfStack--;
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	9c 81       	ldd	r25, Y+4	; 0x04
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	9c 83       	std	Y+4, r25	; 0x04
    2f04:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    2f06:	8b 81       	ldd	r24, Y+3	; 0x03
    2f08:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0a:	21 e3       	ldi	r18, 0x31	; 49
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	20 83       	st	Z, r18
	pxTopOfStack--;
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	9c 81       	ldd	r25, Y+4	; 0x04
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	9c 83       	std	Y+4, r25	; 0x04
    2f18:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2f1e:	28 96       	adiw	r28, 0x08	; 8
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	f8 94       	cli
    2f24:	de bf       	out	0x3e, r29	; 62
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	cd bf       	out	0x3d, r28	; 61
    2f2a:	df 91       	pop	r29
    2f2c:	cf 91       	pop	r28
    2f2e:	08 95       	ret

00002f30 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    2f38:	0e 94 9c 18 	call	0x3138	; 0x3138 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2f3c:	a0 91 1c 02 	lds	r26, 0x021C
    2f40:	b0 91 1d 02 	lds	r27, 0x021D
    2f44:	cd 91       	ld	r28, X+
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	dd 91       	ld	r29, X+
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	ff 91       	pop	r31
    2f4e:	ef 91       	pop	r30
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	bf 91       	pop	r27
    2f56:	af 91       	pop	r26
    2f58:	9f 91       	pop	r25
    2f5a:	8f 91       	pop	r24
    2f5c:	7f 91       	pop	r23
    2f5e:	6f 91       	pop	r22
    2f60:	5f 91       	pop	r21
    2f62:	4f 91       	pop	r20
    2f64:	3f 91       	pop	r19
    2f66:	2f 91       	pop	r18
    2f68:	1f 91       	pop	r17
    2f6a:	0f 91       	pop	r16
    2f6c:	ff 90       	pop	r15
    2f6e:	ef 90       	pop	r14
    2f70:	df 90       	pop	r13
    2f72:	cf 90       	pop	r12
    2f74:	bf 90       	pop	r11
    2f76:	af 90       	pop	r10
    2f78:	9f 90       	pop	r9
    2f7a:	8f 90       	pop	r8
    2f7c:	7f 90       	pop	r7
    2f7e:	6f 90       	pop	r6
    2f80:	5f 90       	pop	r5
    2f82:	4f 90       	pop	r4
    2f84:	3f 90       	pop	r3
    2f86:	2f 90       	pop	r2
    2f88:	1f 90       	pop	r1
    2f8a:	0f 90       	pop	r0
    2f8c:	0c be       	out	0x3c, r0	; 60
    2f8e:	0f 90       	pop	r0
    2f90:	0b be       	out	0x3b, r0	; 59
    2f92:	0f 90       	pop	r0
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2f98:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
}
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	08 95       	ret

00002fa2 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2fa2:	cf 93       	push	r28
    2fa4:	df 93       	push	r29
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	08 95       	ret

00002fb0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2fb0:	0f 92       	push	r0
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	0f 92       	push	r0
    2fb8:	0b b6       	in	r0, 0x3b	; 59
    2fba:	0f 92       	push	r0
    2fbc:	0c b6       	in	r0, 0x3c	; 60
    2fbe:	0f 92       	push	r0
    2fc0:	1f 92       	push	r1
    2fc2:	11 24       	eor	r1, r1
    2fc4:	2f 92       	push	r2
    2fc6:	3f 92       	push	r3
    2fc8:	4f 92       	push	r4
    2fca:	5f 92       	push	r5
    2fcc:	6f 92       	push	r6
    2fce:	7f 92       	push	r7
    2fd0:	8f 92       	push	r8
    2fd2:	9f 92       	push	r9
    2fd4:	af 92       	push	r10
    2fd6:	bf 92       	push	r11
    2fd8:	cf 92       	push	r12
    2fda:	df 92       	push	r13
    2fdc:	ef 92       	push	r14
    2fde:	ff 92       	push	r15
    2fe0:	0f 93       	push	r16
    2fe2:	1f 93       	push	r17
    2fe4:	2f 93       	push	r18
    2fe6:	3f 93       	push	r19
    2fe8:	4f 93       	push	r20
    2fea:	5f 93       	push	r21
    2fec:	6f 93       	push	r22
    2fee:	7f 93       	push	r23
    2ff0:	8f 93       	push	r24
    2ff2:	9f 93       	push	r25
    2ff4:	af 93       	push	r26
    2ff6:	bf 93       	push	r27
    2ff8:	cf 93       	push	r28
    2ffa:	df 93       	push	r29
    2ffc:	ef 93       	push	r30
    2ffe:	ff 93       	push	r31
    3000:	a0 91 1c 02 	lds	r26, 0x021C
    3004:	b0 91 1d 02 	lds	r27, 0x021D
    3008:	0d b6       	in	r0, 0x3d	; 61
    300a:	0d 92       	st	X+, r0
    300c:	0e b6       	in	r0, 0x3e	; 62
    300e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    3010:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    3014:	a0 91 1c 02 	lds	r26, 0x021C
    3018:	b0 91 1d 02 	lds	r27, 0x021D
    301c:	cd 91       	ld	r28, X+
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	dd 91       	ld	r29, X+
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	ff 91       	pop	r31
    3026:	ef 91       	pop	r30
    3028:	df 91       	pop	r29
    302a:	cf 91       	pop	r28
    302c:	bf 91       	pop	r27
    302e:	af 91       	pop	r26
    3030:	9f 91       	pop	r25
    3032:	8f 91       	pop	r24
    3034:	7f 91       	pop	r23
    3036:	6f 91       	pop	r22
    3038:	5f 91       	pop	r21
    303a:	4f 91       	pop	r20
    303c:	3f 91       	pop	r19
    303e:	2f 91       	pop	r18
    3040:	1f 91       	pop	r17
    3042:	0f 91       	pop	r16
    3044:	ff 90       	pop	r15
    3046:	ef 90       	pop	r14
    3048:	df 90       	pop	r13
    304a:	cf 90       	pop	r12
    304c:	bf 90       	pop	r11
    304e:	af 90       	pop	r10
    3050:	9f 90       	pop	r9
    3052:	8f 90       	pop	r8
    3054:	7f 90       	pop	r7
    3056:	6f 90       	pop	r6
    3058:	5f 90       	pop	r5
    305a:	4f 90       	pop	r4
    305c:	3f 90       	pop	r3
    305e:	2f 90       	pop	r2
    3060:	1f 90       	pop	r1
    3062:	0f 90       	pop	r0
    3064:	0c be       	out	0x3c, r0	; 60
    3066:	0f 90       	pop	r0
    3068:	0b be       	out	0x3b, r0	; 59
    306a:	0f 90       	pop	r0
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    3070:	08 95       	ret

00003072 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    3072:	0f 92       	push	r0
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	0f 92       	push	r0
    307a:	0b b6       	in	r0, 0x3b	; 59
    307c:	0f 92       	push	r0
    307e:	0c b6       	in	r0, 0x3c	; 60
    3080:	0f 92       	push	r0
    3082:	1f 92       	push	r1
    3084:	11 24       	eor	r1, r1
    3086:	2f 92       	push	r2
    3088:	3f 92       	push	r3
    308a:	4f 92       	push	r4
    308c:	5f 92       	push	r5
    308e:	6f 92       	push	r6
    3090:	7f 92       	push	r7
    3092:	8f 92       	push	r8
    3094:	9f 92       	push	r9
    3096:	af 92       	push	r10
    3098:	bf 92       	push	r11
    309a:	cf 92       	push	r12
    309c:	df 92       	push	r13
    309e:	ef 92       	push	r14
    30a0:	ff 92       	push	r15
    30a2:	0f 93       	push	r16
    30a4:	1f 93       	push	r17
    30a6:	2f 93       	push	r18
    30a8:	3f 93       	push	r19
    30aa:	4f 93       	push	r20
    30ac:	5f 93       	push	r21
    30ae:	6f 93       	push	r22
    30b0:	7f 93       	push	r23
    30b2:	8f 93       	push	r24
    30b4:	9f 93       	push	r25
    30b6:	af 93       	push	r26
    30b8:	bf 93       	push	r27
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	ef 93       	push	r30
    30c0:	ff 93       	push	r31
    30c2:	a0 91 1c 02 	lds	r26, 0x021C
    30c6:	b0 91 1d 02 	lds	r27, 0x021D
    30ca:	0d b6       	in	r0, 0x3d	; 61
    30cc:	0d 92       	st	X+, r0
    30ce:	0e b6       	in	r0, 0x3e	; 62
    30d0:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    30d2:	0e 94 13 06 	call	0xc26	; 0xc26 <vTaskIncrementTick>
	vTaskSwitchContext();
    30d6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    30da:	a0 91 1c 02 	lds	r26, 0x021C
    30de:	b0 91 1d 02 	lds	r27, 0x021D
    30e2:	cd 91       	ld	r28, X+
    30e4:	cd bf       	out	0x3d, r28	; 61
    30e6:	dd 91       	ld	r29, X+
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	ff 91       	pop	r31
    30ec:	ef 91       	pop	r30
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	bf 91       	pop	r27
    30f4:	af 91       	pop	r26
    30f6:	9f 91       	pop	r25
    30f8:	8f 91       	pop	r24
    30fa:	7f 91       	pop	r23
    30fc:	6f 91       	pop	r22
    30fe:	5f 91       	pop	r21
    3100:	4f 91       	pop	r20
    3102:	3f 91       	pop	r19
    3104:	2f 91       	pop	r18
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	ff 90       	pop	r15
    310c:	ef 90       	pop	r14
    310e:	df 90       	pop	r13
    3110:	cf 90       	pop	r12
    3112:	bf 90       	pop	r11
    3114:	af 90       	pop	r10
    3116:	9f 90       	pop	r9
    3118:	8f 90       	pop	r8
    311a:	7f 90       	pop	r7
    311c:	6f 90       	pop	r6
    311e:	5f 90       	pop	r5
    3120:	4f 90       	pop	r4
    3122:	3f 90       	pop	r3
    3124:	2f 90       	pop	r2
    3126:	1f 90       	pop	r1
    3128:	0f 90       	pop	r0
    312a:	0c be       	out	0x3c, r0	; 60
    312c:	0f 90       	pop	r0
    312e:	0b be       	out	0x3b, r0	; 59
    3130:	0f 90       	pop	r0
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	0f 90       	pop	r0

	asm volatile ( "ret" );
    3136:	08 95       	ret

00003138 <prvSetupTimerInterrupt>:

/*
 * Setup timer 0 or 3 or 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    3138:	cf 93       	push	r28
    313a:	df 93       	push	r29
    313c:	00 d0       	rcall	.+0      	; 0x313e <prvSetupTimerInterrupt+0x6>
    313e:	00 d0       	rcall	.+0      	; 0x3140 <prvSetupTimerInterrupt+0x8>
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62

    /* Using 8bit Timer0 or 16bit Timer1 or Timer3 to generate the tick. */

    // ulCompareMatch 40,000 = 20,000,000 / 500; 20MHz
    // ulCompareMatch 110,592 = 22,118,400 / 200; 22.1184 MHz
    ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	9d e7       	ldi	r25, 0x7D	; 125
    3148:	a0 e0       	ldi	r26, 0x00	; 0
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	89 83       	std	Y+1, r24	; 0x01
    314e:	9a 83       	std	Y+2, r25	; 0x02
    3150:	ab 83       	std	Y+3, r26	; 0x03
    3152:	bc 83       	std	Y+4, r27	; 0x04

    /* We only have 8 or 16 bits so have to scale 64 or 256 to get our required tick rate. */
    //ulCompareMatch = 625 /= portCLOCK_PRESCALER; 20MHz with 64 prescale
    //ulCompareMatch = 108 /= portCLOCK_PRESCALER; 22.1184 MHz with 1024 prescale
    ulCompareMatch /= portCLOCK_PRESCALER;
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	9a 81       	ldd	r25, Y+2	; 0x02
    3158:	ab 81       	ldd	r26, Y+3	; 0x03
    315a:	bc 81       	ldd	r27, Y+4	; 0x04
    315c:	68 94       	set
    315e:	15 f8       	bld	r1, 5
    3160:	b6 95       	lsr	r27
    3162:	a7 95       	ror	r26
    3164:	97 95       	ror	r25
    3166:	87 95       	ror	r24
    3168:	16 94       	lsr	r1
    316a:	d1 f7       	brne	.-12     	; 0x3160 <prvSetupTimerInterrupt+0x28>
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	9a 83       	std	Y+2, r25	; 0x02
    3170:	ab 83       	std	Y+3, r26	; 0x03
    3172:	bc 83       	std	Y+4, r27	; 0x04

    /* Adjust for correct value. */
    ulCompareMatch -= ( unsigned portLONG ) 1;
    3174:	89 81       	ldd	r24, Y+1	; 0x01
    3176:	9a 81       	ldd	r25, Y+2	; 0x02
    3178:	ab 81       	ldd	r26, Y+3	; 0x03
    317a:	bc 81       	ldd	r27, Y+4	; 0x04
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	a1 09       	sbc	r26, r1
    3180:	b1 09       	sbc	r27, r1
    3182:	89 83       	std	Y+1, r24	; 0x01
    3184:	9a 83       	std	Y+2, r25	; 0x02
    3186:	ab 83       	std	Y+3, r26	; 0x03
    3188:	bc 83       	std	Y+4, r27	; 0x04

    /* Setup compare match value for compare match A.  Interrupts are disabled
    before this is called so we need not worry here. */
    ucLowByte = ( unsigned portCHAR ) ( ulCompareMatch & ( unsigned portLONG ) 0xff );
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	8d 83       	std	Y+5, r24	; 0x05
    //  OCR3AL = ucLowByte;

    // the HiByte is only needed, if a 16 Bit counter is being utilized
#ifdef portOCRH

    ulCompareMatch >>= 8;
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	9a 81       	ldd	r25, Y+2	; 0x02
    3192:	ab 81       	ldd	r26, Y+3	; 0x03
    3194:	bc 81       	ldd	r27, Y+4	; 0x04
    3196:	89 2f       	mov	r24, r25
    3198:	9a 2f       	mov	r25, r26
    319a:	ab 2f       	mov	r26, r27
    319c:	bb 27       	eor	r27, r27
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	9a 83       	std	Y+2, r25	; 0x02
    31a2:	ab 83       	std	Y+3, r26	; 0x03
    31a4:	bc 83       	std	Y+4, r27	; 0x04
    ucHighByte = ( unsigned portCHAR ) ( ulCompareMatch & ( unsigned portLONG ) 0xff );
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	8e 83       	std	Y+6, r24	; 0x06
    portOCRH = ucHighByte;
    31aa:	89 e9       	ldi	r24, 0x99	; 153
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	2e 81       	ldd	r18, Y+6	; 0x06
    31b0:	fc 01       	movw	r30, r24
    31b2:	20 83       	st	Z, r18

#endif

    portOCRL = ucLowByte;
    31b4:	88 e9       	ldi	r24, 0x98	; 152
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	2d 81       	ldd	r18, Y+5	; 0x05
    31ba:	fc 01       	movw	r30, r24
    31bc:	20 83       	st	Z, r18
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	portTCCRb = ucLowByte;

#elif defined( portUSE_TIMER3 )
	/* Setup clock source and compare match behaviour. Assuming  640 / 1280 /1281 / 1284p / 2560 / 2561 (with Timer3) */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    31be:	8b e0       	ldi	r24, 0x0B	; 11
    31c0:	8d 83       	std	Y+5, r24	; 0x05
	portTCCRb = ucLowByte;
    31c2:	81 e9       	ldi	r24, 0x91	; 145
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	2d 81       	ldd	r18, Y+5	; 0x05
    31c8:	fc 01       	movw	r30, r24
    31ca:	20 83       	st	Z, r18
#endif

    /* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
    ucLowByte = portTIMSK;
    31cc:	81 e7       	ldi	r24, 0x71	; 113
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	fc 01       	movw	r30, r24
    31d2:	80 81       	ld	r24, Z
    31d4:	8d 83       	std	Y+5, r24	; 0x05
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    31d6:	8d 81       	ldd	r24, Y+5	; 0x05
    31d8:	82 60       	ori	r24, 0x02	; 2
    31da:	8d 83       	std	Y+5, r24	; 0x05
    portTIMSK = ucLowByte;
    31dc:	81 e7       	ldi	r24, 0x71	; 113
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	2d 81       	ldd	r18, Y+5	; 0x05
    31e2:	fc 01       	movw	r30, r24
    31e4:	20 83       	st	Z, r18

}
    31e6:	26 96       	adiw	r28, 0x06	; 6
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	df 91       	pop	r29
    31f4:	cf 91       	pop	r28
    31f6:	08 95       	ret

000031f8 <__vector_32>:

	#elif defined( portUSE_TIMER3 )
		#warning "Timer3 used for PRE-EMPTIVE scheduler."
		ISR(TIMER3_COMPA_vect, ISR_NAKED)
		{
			vPortYieldFromTick();
    31f8:	0e 94 39 18 	call	0x3072	; 0x3072 <vPortYieldFromTick>
			asm volatile ( "reti" );
    31fc:	18 95       	reti

000031fe <USART_Init>:
*  the specified baud rate and clk speed.
*
* Param buadin: The desired Baud rate.
* Param clk_seedin: The clk speed of the ATmega328p
************************************/
void USART_Init(uint16_t baudin, uint32_t clk_speedin) {
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	2e 97       	sbiw	r28, 0x0e	; 14
    3208:	0f b6       	in	r0, 0x3f	; 63
    320a:	f8 94       	cli
    320c:	de bf       	out	0x3e, r29	; 62
    320e:	0f be       	out	0x3f, r0	; 63
    3210:	cd bf       	out	0x3d, r28	; 61
    3212:	9e 83       	std	Y+6, r25	; 0x06
    3214:	8d 83       	std	Y+5, r24	; 0x05
    3216:	4f 83       	std	Y+7, r20	; 0x07
    3218:	58 87       	std	Y+8, r21	; 0x08
    321a:	69 87       	std	Y+9, r22	; 0x09
    321c:	7a 87       	std	Y+10, r23	; 0x0a
    uint32_t ubrr = clk_speedin/(16UL)/baudin-1;
    321e:	8f 81       	ldd	r24, Y+7	; 0x07
    3220:	98 85       	ldd	r25, Y+8	; 0x08
    3222:	a9 85       	ldd	r26, Y+9	; 0x09
    3224:	ba 85       	ldd	r27, Y+10	; 0x0a
    3226:	68 94       	set
    3228:	13 f8       	bld	r1, 3
    322a:	b6 95       	lsr	r27
    322c:	a7 95       	ror	r26
    322e:	97 95       	ror	r25
    3230:	87 95       	ror	r24
    3232:	16 94       	lsr	r1
    3234:	d1 f7       	brne	.-12     	; 0x322a <USART_Init+0x2c>
    3236:	2d 81       	ldd	r18, Y+5	; 0x05
    3238:	3e 81       	ldd	r19, Y+6	; 0x06
    323a:	99 01       	movw	r18, r18
    323c:	40 e0       	ldi	r20, 0x00	; 0
    323e:	50 e0       	ldi	r21, 0x00	; 0
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__udivmodsi4>
    3248:	da 01       	movw	r26, r20
    324a:	c9 01       	movw	r24, r18
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	a1 09       	sbc	r26, r1
    3250:	b1 09       	sbc	r27, r1
    3252:	89 83       	std	Y+1, r24	; 0x01
    3254:	9a 83       	std	Y+2, r25	; 0x02
    3256:	ab 83       	std	Y+3, r26	; 0x03
    3258:	bc 83       	std	Y+4, r27	; 0x04
    UBRR0H = (unsigned char)(ubrr>>8) ;// & 0x7F;
    325a:	25 ec       	ldi	r18, 0xC5	; 197
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	9a 81       	ldd	r25, Y+2	; 0x02
    3262:	ab 81       	ldd	r26, Y+3	; 0x03
    3264:	bc 81       	ldd	r27, Y+4	; 0x04
    3266:	89 2f       	mov	r24, r25
    3268:	9a 2f       	mov	r25, r26
    326a:	ab 2f       	mov	r26, r27
    326c:	bb 27       	eor	r27, r27
    326e:	f9 01       	movw	r30, r18
    3270:	80 83       	st	Z, r24
    UBRR0L = (unsigned char)ubrr;
    3272:	84 ec       	ldi	r24, 0xC4	; 196
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	29 81       	ldd	r18, Y+1	; 0x01
    3278:	fc 01       	movw	r30, r24
    327a:	20 83       	st	Z, r18
    /* Enable receiver and transmitter */
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    327c:	81 ec       	ldi	r24, 0xC1	; 193
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	28 e1       	ldi	r18, 0x18	; 24
    3282:	fc 01       	movw	r30, r24
    3284:	20 83       	st	Z, r18
    /* Set frame format: 8data, 1stop bit */
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
    3286:	82 ec       	ldi	r24, 0xC2	; 194
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	26 e0       	ldi	r18, 0x06	; 6
    328c:	fc 01       	movw	r30, r24
    328e:	20 83       	st	Z, r18
	// clear U2X0 for Synchronous operation
    UCSR0A &= ~(1<<U2X0);
    3290:	80 ec       	ldi	r24, 0xC0	; 192
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	20 ec       	ldi	r18, 0xC0	; 192
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	f9 01       	movw	r30, r18
    329a:	20 81       	ld	r18, Z
    329c:	2d 7f       	andi	r18, 0xFD	; 253
    329e:	fc 01       	movw	r30, r24
    32a0:	20 83       	st	Z, r18
}
    32a2:	2e 96       	adiw	r28, 0x0e	; 14
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	f8 94       	cli
    32a8:	de bf       	out	0x3e, r29	; 62
    32aa:	0f be       	out	0x3f, r0	; 63
    32ac:	cd bf       	out	0x3d, r28	; 61
    32ae:	df 91       	pop	r29
    32b0:	cf 91       	pop	r28
    32b2:	08 95       	ret

000032b4 <USART_Write>:

/*the send function will put 8bits on the trans line. */
void USART_Write(uint8_t data) {
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	1f 92       	push	r1
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
    32c0:	00 00       	nop
    32c2:	80 ec       	ldi	r24, 0xC0	; 192
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	fc 01       	movw	r30, r24
    32c8:	80 81       	ld	r24, Z
    32ca:	88 2f       	mov	r24, r24
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	80 72       	andi	r24, 0x20	; 32
    32d0:	99 27       	eor	r25, r25
    32d2:	00 97       	sbiw	r24, 0x00	; 0
    32d4:	b1 f3       	breq	.-20     	; 0x32c2 <USART_Write+0xe>
		;
		/* Put data into buffer, sends the data */
		UDR0 = data;
    32d6:	86 ec       	ldi	r24, 0xC6	; 198
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	29 81       	ldd	r18, Y+1	; 0x01
    32dc:	fc 01       	movw	r30, r24
    32de:	20 83       	st	Z, r18
}
    32e0:	0f 90       	pop	r0
    32e2:	df 91       	pop	r29
    32e4:	cf 91       	pop	r28
    32e6:	08 95       	ret

000032e8 <USART_Write_Unprotected>:

/*the send function will put 8bits on the trans line. */
void USART_Write_Unprotected(uint8_t data) {
    32e8:	cf 93       	push	r28
    32ea:	df 93       	push	r29
    32ec:	1f 92       	push	r1
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
    32f4:	00 00       	nop
    32f6:	80 ec       	ldi	r24, 0xC0	; 192
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	fc 01       	movw	r30, r24
    32fc:	80 81       	ld	r24, Z
    32fe:	88 2f       	mov	r24, r24
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	80 72       	andi	r24, 0x20	; 32
    3304:	99 27       	eor	r25, r25
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	b1 f3       	breq	.-20     	; 0x32f6 <USART_Write_Unprotected+0xe>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    330a:	86 ec       	ldi	r24, 0xC6	; 198
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	29 81       	ldd	r18, Y+1	; 0x01
    3310:	fc 01       	movw	r30, r24
    3312:	20 83       	st	Z, r18
}
    3314:	0f 90       	pop	r0
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	08 95       	ret

0000331c <USART_Read>:
Therefore you may not get control back after this is called 
until a much later time. It may be helpful to use the 
istheredata() function to check before calling this function
        @return 8bit data packet from sender
*/
uint8_t USART_Read(void) {
    331c:	cf 93       	push	r28
    331e:	df 93       	push	r29
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    /* Wait for data to be received */
    while ( !(UCSR0A & (1<<RXC0)) )
    3324:	00 00       	nop
    3326:	80 ec       	ldi	r24, 0xC0	; 192
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	fc 01       	movw	r30, r24
    332c:	80 81       	ld	r24, Z
    332e:	88 23       	and	r24, r24
    3330:	d4 f7       	brge	.-12     	; 0x3326 <USART_Read+0xa>
        ;
    /* Get and return received data from buffer */
    return UDR0;
    3332:	86 ec       	ldi	r24, 0xC6	; 198
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	fc 01       	movw	r30, r24
    3338:	80 81       	ld	r24, Z
}
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	08 95       	ret

00003340 <setSonarData>:
extern int count;

unsigned char beginCount[6];
unsigned char lastState[6] = {0,0,0,0,0,0};
	
void setSonarData(int i,unsigned char data){
    3340:	cf 93       	push	r28
    3342:	df 93       	push	r29
    3344:	00 d0       	rcall	.+0      	; 0x3346 <setSonarData+0x6>
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	9a 83       	std	Y+2, r25	; 0x02
    334c:	89 83       	std	Y+1, r24	; 0x01
    334e:	6b 83       	std	Y+3, r22	; 0x03
//	xSemaphoreTake(sonarDataMutex[i],portMAX_DELAY);
	sonarData[i] = data;
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	9a 81       	ldd	r25, Y+2	; 0x02
    3354:	81 54       	subi	r24, 0x41	; 65
    3356:	95 4e       	sbci	r25, 0xE5	; 229
    3358:	2b 81       	ldd	r18, Y+3	; 0x03
    335a:	fc 01       	movw	r30, r24
    335c:	20 83       	st	Z, r18
	//xSemaphoreGive(sonarDataMutex[i]);
}
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	08 95       	ret

0000336a <getSonarData>:

unsigned char getSonarData(int i){
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	1f 92       	push	r1
    3370:	1f 92       	push	r1
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
    3376:	9a 83       	std	Y+2, r25	; 0x02
    3378:	89 83       	std	Y+1, r24	; 0x01
	//xSemaphoreTake(sonarDataMutex[i],portMAX_DELAY);
	return sonarData[i];
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	9a 81       	ldd	r25, Y+2	; 0x02
    337e:	81 54       	subi	r24, 0x41	; 65
    3380:	95 4e       	sbci	r25, 0xE5	; 229
    3382:	fc 01       	movw	r30, r24
    3384:	80 81       	ld	r24, Z
	//xSemaphoreGive(sonarDataMutex[i]);
}
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	08 95       	ret

00003390 <getTimerCount>:

unsigned char getTimerCount(){
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    3398:	86 e4       	ldi	r24, 0x46	; 70
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	fc 01       	movw	r30, r24
    339e:	80 81       	ld	r24, Z
}
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	08 95       	ret

000033a6 <__vector_11>:

inline void setTimerCount(unsigned char i){
	TCNT0 = i;
}

ISR(PCINT2_vect) {
    33a6:	1f 92       	push	r1
    33a8:	0f 92       	push	r0
    33aa:	00 90 5f 00 	lds	r0, 0x005F
    33ae:	0f 92       	push	r0
    33b0:	11 24       	eor	r1, r1
    33b2:	00 90 5b 00 	lds	r0, 0x005B
    33b6:	0f 92       	push	r0
    33b8:	2f 93       	push	r18
    33ba:	3f 93       	push	r19
    33bc:	4f 93       	push	r20
    33be:	5f 93       	push	r21
    33c0:	6f 93       	push	r22
    33c2:	7f 93       	push	r23
    33c4:	8f 93       	push	r24
    33c6:	9f 93       	push	r25
    33c8:	af 93       	push	r26
    33ca:	bf 93       	push	r27
    33cc:	ef 93       	push	r30
    33ce:	ff 93       	push	r31
    33d0:	cf 93       	push	r28
    33d2:	df 93       	push	r29
    33d4:	1f 92       	push	r1
    33d6:	1f 92       	push	r1
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62


	unsigned char currCount;
	char i=0;	
    33dc:	19 82       	std	Y+1, r1	; 0x01

	//for(i=0;i<2;i++){

	USART_Write(0x41+(PINK&1));
    33de:	86 e0       	ldi	r24, 0x06	; 6
    33e0:	91 e0       	ldi	r25, 0x01	; 1
    33e2:	fc 01       	movw	r30, r24
    33e4:	80 81       	ld	r24, Z
    33e6:	88 2f       	mov	r24, r24
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	81 70       	andi	r24, 0x01	; 1
    33ec:	99 27       	eor	r25, r25
    33ee:	8f 5b       	subi	r24, 0xBF	; 191
    33f0:	9f 4f       	sbci	r25, 0xFF	; 255
    33f2:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <USART_Write>
	USART_Write('\n');
    33f6:	8a e0       	ldi	r24, 0x0A	; 10
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <USART_Write>

		if(PINK&(1) != lastState[0]){
    33fe:	86 e0       	ldi	r24, 0x06	; 6
    3400:	91 e0       	ldi	r25, 0x01	; 1
    3402:	fc 01       	movw	r30, r24
    3404:	80 81       	ld	r24, Z
    3406:	28 2f       	mov	r18, r24
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	90 91 b1 1a 	lds	r25, 0x1AB1
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	91 30       	cpi	r25, 0x01	; 1
    3412:	09 f4       	brne	.+2      	; 0x3416 <__vector_11+0x70>
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	88 2f       	mov	r24, r24
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	82 23       	and	r24, r18
    341c:	93 23       	and	r25, r19
    341e:	00 97       	sbiw	r24, 0x00	; 0
    3420:	91 f1       	breq	.+100    	; 0x3486 <__vector_11+0xe0>
			//PORTE = 0xFF;
			lastState[0] = PINK&(1);
    3422:	86 e0       	ldi	r24, 0x06	; 6
    3424:	91 e0       	ldi	r25, 0x01	; 1
    3426:	fc 01       	movw	r30, r24
    3428:	80 81       	ld	r24, Z
    342a:	81 70       	andi	r24, 0x01	; 1
    342c:	80 93 b1 1a 	sts	0x1AB1, r24
			if(PINK&(1)){
    3430:	86 e0       	ldi	r24, 0x06	; 6
    3432:	91 e0       	ldi	r25, 0x01	; 1
    3434:	fc 01       	movw	r30, r24
    3436:	80 81       	ld	r24, Z
    3438:	88 2f       	mov	r24, r24
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	81 70       	andi	r24, 0x01	; 1
    343e:	99 27       	eor	r25, r25
    3440:	00 97       	sbiw	r24, 0x00	; 0
    3442:	51 f0       	breq	.+20     	; 0x3458 <__vector_11+0xb2>
				beginCount[0] = getTimerCount();
    3444:	0e 94 c8 19 	call	0x3390	; 0x3390 <getTimerCount>
    3448:	80 93 b9 1a 	sts	0x1AB9, r24
				PORTE = 0xFF;
    344c:	8e e2       	ldi	r24, 0x2E	; 46
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	2f ef       	ldi	r18, 0xFF	; 255
    3452:	fc 01       	movw	r30, r24
    3454:	20 83       	st	Z, r18
    3456:	17 c0       	rjmp	.+46     	; 0x3486 <__vector_11+0xe0>
			} else {
				currCount = getTimerCount();
    3458:	0e 94 c8 19 	call	0x3390	; 0x3390 <getTimerCount>
    345c:	8a 83       	std	Y+2, r24	; 0x02
				if(currCount > beginCount[0]){
    345e:	90 91 b9 1a 	lds	r25, 0x1AB9
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	98 17       	cp	r25, r24
    3466:	58 f4       	brcc	.+22     	; 0x347e <__vector_11+0xd8>
					setSonarData(0,currCount - beginCount[0]);
    3468:	80 91 b9 1a 	lds	r24, 0x1AB9
    346c:	9a 81       	ldd	r25, Y+2	; 0x02
    346e:	f9 2f       	mov	r31, r25
    3470:	f8 1b       	sub	r31, r24
    3472:	8f 2f       	mov	r24, r31
    3474:	68 2f       	mov	r22, r24
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	0e 94 a0 19 	call	0x3340	; 0x3340 <setSonarData>
				}
				PORTE = 0;
    347e:	8e e2       	ldi	r24, 0x2E	; 46
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	fc 01       	movw	r30, r24
    3484:	10 82       	st	Z, r1
			}
		}
	//}
}
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	df 91       	pop	r29
    348c:	cf 91       	pop	r28
    348e:	ff 91       	pop	r31
    3490:	ef 91       	pop	r30
    3492:	bf 91       	pop	r27
    3494:	af 91       	pop	r26
    3496:	9f 91       	pop	r25
    3498:	8f 91       	pop	r24
    349a:	7f 91       	pop	r23
    349c:	6f 91       	pop	r22
    349e:	5f 91       	pop	r21
    34a0:	4f 91       	pop	r20
    34a2:	3f 91       	pop	r19
    34a4:	2f 91       	pop	r18
    34a6:	0f 90       	pop	r0
    34a8:	00 92 5b 00 	sts	0x005B, r0
    34ac:	0f 90       	pop	r0
    34ae:	00 92 5f 00 	sts	0x005F, r0
    34b2:	0f 90       	pop	r0
    34b4:	1f 90       	pop	r1
    34b6:	18 95       	reti

000034b8 <initializeSonarSensors>:

void initializeSonarSensors(){
    34b8:	cf 93       	push	r28
    34ba:	df 93       	push	r29
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
	//DDRD &= 0xFE;	
	DIDR2 = 0;
    34c0:	8d e7       	ldi	r24, 0x7D	; 125
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	fc 01       	movw	r30, r24
    34c6:	10 82       	st	Z, r1

	//EICRA = 1;
	//EIMSK = 1;

	PCMSK2 = 0xFF;
    34c8:	8d e6       	ldi	r24, 0x6D	; 109
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	2f ef       	ldi	r18, 0xFF	; 255
    34ce:	fc 01       	movw	r30, r24
    34d0:	20 83       	st	Z, r18
	PCICR = 0x7;
    34d2:	88 e6       	ldi	r24, 0x68	; 104
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	27 e0       	ldi	r18, 0x07	; 7
    34d8:	fc 01       	movw	r30, r24
    34da:	20 83       	st	Z, r18

	TCCR0A = 0;
    34dc:	84 e4       	ldi	r24, 0x44	; 68
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	fc 01       	movw	r30, r24
    34e2:	10 82       	st	Z, r1
	TCCR0B = 5;
    34e4:	85 e4       	ldi	r24, 0x45	; 69
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	25 e0       	ldi	r18, 0x05	; 5
    34ea:	fc 01       	movw	r30, r24
    34ec:	20 83       	st	Z, r18

}
    34ee:	df 91       	pop	r29
    34f0:	cf 91       	pop	r28
    34f2:	08 95       	ret

000034f4 <__udivmodsi4>:
    34f4:	a1 e2       	ldi	r26, 0x21	; 33
    34f6:	1a 2e       	mov	r1, r26
    34f8:	aa 1b       	sub	r26, r26
    34fa:	bb 1b       	sub	r27, r27
    34fc:	fd 01       	movw	r30, r26
    34fe:	0d c0       	rjmp	.+26     	; 0x351a <__udivmodsi4_ep>

00003500 <__udivmodsi4_loop>:
    3500:	aa 1f       	adc	r26, r26
    3502:	bb 1f       	adc	r27, r27
    3504:	ee 1f       	adc	r30, r30
    3506:	ff 1f       	adc	r31, r31
    3508:	a2 17       	cp	r26, r18
    350a:	b3 07       	cpc	r27, r19
    350c:	e4 07       	cpc	r30, r20
    350e:	f5 07       	cpc	r31, r21
    3510:	20 f0       	brcs	.+8      	; 0x351a <__udivmodsi4_ep>
    3512:	a2 1b       	sub	r26, r18
    3514:	b3 0b       	sbc	r27, r19
    3516:	e4 0b       	sbc	r30, r20
    3518:	f5 0b       	sbc	r31, r21

0000351a <__udivmodsi4_ep>:
    351a:	66 1f       	adc	r22, r22
    351c:	77 1f       	adc	r23, r23
    351e:	88 1f       	adc	r24, r24
    3520:	99 1f       	adc	r25, r25
    3522:	1a 94       	dec	r1
    3524:	69 f7       	brne	.-38     	; 0x3500 <__udivmodsi4_loop>
    3526:	60 95       	com	r22
    3528:	70 95       	com	r23
    352a:	80 95       	com	r24
    352c:	90 95       	com	r25
    352e:	9b 01       	movw	r18, r22
    3530:	ac 01       	movw	r20, r24
    3532:	bd 01       	movw	r22, r26
    3534:	cf 01       	movw	r24, r30
    3536:	08 95       	ret

00003538 <memcpy>:
    3538:	fb 01       	movw	r30, r22
    353a:	dc 01       	movw	r26, r24
    353c:	02 c0       	rjmp	.+4      	; 0x3542 <memcpy+0xa>
    353e:	01 90       	ld	r0, Z+
    3540:	0d 92       	st	X+, r0
    3542:	41 50       	subi	r20, 0x01	; 1
    3544:	50 40       	sbci	r21, 0x00	; 0
    3546:	d8 f7       	brcc	.-10     	; 0x353e <memcpy+0x6>
    3548:	08 95       	ret

0000354a <memset>:
    354a:	dc 01       	movw	r26, r24
    354c:	01 c0       	rjmp	.+2      	; 0x3550 <memset+0x6>
    354e:	6d 93       	st	X+, r22
    3550:	41 50       	subi	r20, 0x01	; 1
    3552:	50 40       	sbci	r21, 0x00	; 0
    3554:	e0 f7       	brcc	.-8      	; 0x354e <memset+0x4>
    3556:	08 95       	ret

00003558 <strncpy>:
    3558:	fb 01       	movw	r30, r22
    355a:	dc 01       	movw	r26, r24
    355c:	41 50       	subi	r20, 0x01	; 1
    355e:	50 40       	sbci	r21, 0x00	; 0
    3560:	48 f0       	brcs	.+18     	; 0x3574 <strncpy+0x1c>
    3562:	01 90       	ld	r0, Z+
    3564:	0d 92       	st	X+, r0
    3566:	00 20       	and	r0, r0
    3568:	c9 f7       	brne	.-14     	; 0x355c <strncpy+0x4>
    356a:	01 c0       	rjmp	.+2      	; 0x356e <strncpy+0x16>
    356c:	1d 92       	st	X+, r1
    356e:	41 50       	subi	r20, 0x01	; 1
    3570:	50 40       	sbci	r21, 0x00	; 0
    3572:	e0 f7       	brcc	.-8      	; 0x356c <strncpy+0x14>
    3574:	08 95       	ret

00003576 <itoa>:
    3576:	fb 01       	movw	r30, r22
    3578:	9f 01       	movw	r18, r30
    357a:	e8 94       	clt
    357c:	42 30       	cpi	r20, 0x02	; 2
    357e:	c4 f0       	brlt	.+48     	; 0x35b0 <itoa+0x3a>
    3580:	45 32       	cpi	r20, 0x25	; 37
    3582:	b4 f4       	brge	.+44     	; 0x35b0 <itoa+0x3a>
    3584:	4a 30       	cpi	r20, 0x0A	; 10
    3586:	29 f4       	brne	.+10     	; 0x3592 <itoa+0x1c>
    3588:	97 fb       	bst	r25, 7
    358a:	1e f4       	brtc	.+6      	; 0x3592 <itoa+0x1c>
    358c:	90 95       	com	r25
    358e:	81 95       	neg	r24
    3590:	9f 4f       	sbci	r25, 0xFF	; 255
    3592:	64 2f       	mov	r22, r20
    3594:	77 27       	eor	r23, r23
    3596:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__udivmodhi4>
    359a:	80 5d       	subi	r24, 0xD0	; 208
    359c:	8a 33       	cpi	r24, 0x3A	; 58
    359e:	0c f0       	brlt	.+2      	; 0x35a2 <itoa+0x2c>
    35a0:	89 5d       	subi	r24, 0xD9	; 217
    35a2:	81 93       	st	Z+, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	00 97       	sbiw	r24, 0x00	; 0
    35a8:	a1 f7       	brne	.-24     	; 0x3592 <itoa+0x1c>
    35aa:	16 f4       	brtc	.+4      	; 0x35b0 <itoa+0x3a>
    35ac:	5d e2       	ldi	r21, 0x2D	; 45
    35ae:	51 93       	st	Z+, r21
    35b0:	10 82       	st	Z, r1
    35b2:	c9 01       	movw	r24, r18
    35b4:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <strrev>

000035b8 <strrev>:
    35b8:	dc 01       	movw	r26, r24
    35ba:	fc 01       	movw	r30, r24
    35bc:	67 2f       	mov	r22, r23
    35be:	71 91       	ld	r23, Z+
    35c0:	77 23       	and	r23, r23
    35c2:	e1 f7       	brne	.-8      	; 0x35bc <strrev+0x4>
    35c4:	32 97       	sbiw	r30, 0x02	; 2
    35c6:	04 c0       	rjmp	.+8      	; 0x35d0 <strrev+0x18>
    35c8:	7c 91       	ld	r23, X
    35ca:	6d 93       	st	X+, r22
    35cc:	70 83       	st	Z, r23
    35ce:	62 91       	ld	r22, -Z
    35d0:	ae 17       	cp	r26, r30
    35d2:	bf 07       	cpc	r27, r31
    35d4:	c8 f3       	brcs	.-14     	; 0x35c8 <strrev+0x10>
    35d6:	08 95       	ret

000035d8 <__udivmodhi4>:
    35d8:	aa 1b       	sub	r26, r26
    35da:	bb 1b       	sub	r27, r27
    35dc:	51 e1       	ldi	r21, 0x11	; 17
    35de:	07 c0       	rjmp	.+14     	; 0x35ee <__udivmodhi4_ep>

000035e0 <__udivmodhi4_loop>:
    35e0:	aa 1f       	adc	r26, r26
    35e2:	bb 1f       	adc	r27, r27
    35e4:	a6 17       	cp	r26, r22
    35e6:	b7 07       	cpc	r27, r23
    35e8:	10 f0       	brcs	.+4      	; 0x35ee <__udivmodhi4_ep>
    35ea:	a6 1b       	sub	r26, r22
    35ec:	b7 0b       	sbc	r27, r23

000035ee <__udivmodhi4_ep>:
    35ee:	88 1f       	adc	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	5a 95       	dec	r21
    35f4:	a9 f7       	brne	.-22     	; 0x35e0 <__udivmodhi4_loop>
    35f6:	80 95       	com	r24
    35f8:	90 95       	com	r25
    35fa:	bc 01       	movw	r22, r24
    35fc:	cd 01       	movw	r24, r26
    35fe:	08 95       	ret

00003600 <_exit>:
    3600:	f8 94       	cli

00003602 <__stop_program>:
    3602:	ff cf       	rjmp	.-2      	; 0x3602 <__stop_program>
